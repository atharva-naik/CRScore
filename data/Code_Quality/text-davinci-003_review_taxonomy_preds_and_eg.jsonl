{"id": 0, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: can we also test for `transport=rest`?\nLABEL:", "completions": "testability"}
{"id": 1, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: If record_batch_size is not set in config.ini, this code will trigger a notice about an undefined value. I would suggest either wrapping the setPageSize() call in an `if (!empty(...)) {` check, or else providing a default value in the set call (i.e. `$config->Index->record_batch_size ?? 100`).\nLABEL:", "completions": "alternative solution"}
{"id": 2, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I didn't realize we were hardcoding this, thanks for moving it to an env value.\nLABEL:", "completions": "alternative solution"}
{"id": 3, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: We are trying to support IE 10-11, so we'll need a polyfill for this one, I think.\nLABEL:", "completions": "compatibility"}
{"id": 4, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: It looks like there's a new `isNavigatingTo( url )` selector for this very purpose so let's use this here instead. This way we just need to use the one selector rather than two. Let's assign that to a similar-named variable here (e.g. `isNavigatingToPostResetURL`) rather than the prop it's used with.\nLABEL:", "completions": "alternative solution"}
{"id": 5, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think im2col should only accommodate CPUMat.\nLABEL:", "completions": "correctness"}
{"id": 6, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: alpha sort the imports\nLABEL:", "completions": "presentation"}
{"id": 7, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Can you explain why is this necessary? Is `snprintf()` with four integer arguments unsafe?\nLABEL:", "completions": "rationale"}
{"id": 8, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: How likely would it be that the keyboard layout for the NVDA main thread differs from the keyboard layout of the currently focused app?\nLABEL:", "completions": "code context"}
{"id": 9, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Would you mind removing the default parameter above? (I doubt I'll ever use defaults again since you still have to protect against callers explicitly passing `null` or `undefined`)\nLABEL:", "completions": "alternative solution"}
{"id": 10, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Also update line 2205 below\nLABEL:", "completions": "location"}
{"id": 11, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: n_: It is a good practice to name the variable to indicate what they contain. In this case since `shared` is supposed to have boolean, calling it: `isShared` can help in the readability of the code.\nLABEL:", "completions": "naming"}
{"id": 12, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I suppose it's a false-positive error. Maybe there is a way to configure the `eslint-*` package to accept `i.e. .... lower case` syntax  \nLABEL:", "completions": "configuration"}
{"id": 13, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: this maynot be a perf issue, if ToHexString() is not actually allocating a string, but returns the caches string value. to be confirmed.\nLABEL:", "completions": "performance"}
{"id": 14, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: `zap.String(\"image-provider\", provider.Name())` should be in a same line.\nLABEL:", "completions": "presentation"}
{"id": 15, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why this deletion?\nLABEL:", "completions": "rationale"}
{"id": 16, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This change looks unrelated to the CL description?\nLABEL:", "completions": "correctness"}
{"id": 17, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I'm not certain that `res`+`utl` isn't a thing.\nLABEL:", "completions": "correctness"}
{"id": 18, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This method can cause bugs. Why don't you use list of finalize statuses and then use join by comma and that will give you correct value. Use Apache Commons Lang library List<Integer> list = Arrays.asList(1,2,3,4,5,6,7); String str = org.apache.commons.lang.StringUtils.join(list, \",\"); You can use it at multiple places shown in this diff.\nLABEL:", "completions": "alternative solution"}
{"id": 19, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Merge with next condition\nLABEL:", "completions": "alternative solution"}
{"id": 20, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Maybe add it when it is used.\nLABEL:", "completions": "Necessity"}
{"id": 21, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: More clear naming: NONEXISTENT_ENABLED\nLABEL:", "completions": "naming"}
{"id": 22, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: why is this change necessary?\nLABEL:", "completions": "Necessity"}
{"id": 23, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: make a SchemaTypeNameConverter.getTypeNameForEmptyType() and call that here.\nLABEL:", "completions": "alternative solution"}
{"id": 24, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Use braces on your conditional structures please\nLABEL:", "completions": "syntax"}
{"id": 25, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Great God, I have a question. This \".nebula_history\" file is used to save history commands. Is there a file size limit? When the file is large, does it take a long time to start initialization (loadHistory)? How did you think about this? Thx.\nLABEL:", "completions": "specialized expertise"}
{"id": 26, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Isn't this the same check as two lines above?\nLABEL:", "completions": "redundancy"}
{"id": 27, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Don't redefine, just import the existing one in `cmdline.py`. :)\nLABEL:", "completions": "alternative solution"}
{"id": 28, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: why not call `respond_to?(\"#{name}=\")` from the `if` line?\nLABEL:", "completions": "alternative solution"}
{"id": 29, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This was properly set above as `<target>.runfiles/<workspace_name>` (with a fallback to workspace root dir) but never used past this line.\nLABEL:", "completions": "code optimization"}
{"id": 30, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Are all these namespaces required for this attribute?\nLABEL:", "completions": "code context"}
{"id": 31, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Given this may be used and printed in other ways, isn't `debug` more appropriate?\nLABEL:", "completions": "alternative solution"}
{"id": 32, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Looks like this is unused? Did you mean to call it when clearing the block journal?\nLABEL:", "completions": "correctness"}
{"id": 33, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: why named alters? how about this.alerts = alerts?\nLABEL:", "completions": "naming"}
{"id": 34, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: not sure if this has to be here or not tbh\nLABEL:", "completions": "Necessity"}
{"id": 35, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: There's a better fix for this in #1741, which should replace this.\nLABEL:", "completions": "alternative solution"}
{"id": 36, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Use swarm.Address not []byte as type, and construct it from actual byteslice or use swarm.NewAddress if it is constructed from hex-encoded string.\nLABEL:", "completions": "syntax"}
{"id": 37, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: It would be worth factoring this out to a function, but you don't have to do that here.\nLABEL:", "completions": "refactoring"}
{"id": 38, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: There's no need for `final` in interfaces.\nLABEL:", "completions": "correctness"}
{"id": 39, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Isn't this case handled as a custom tag in `Span.SetTag()` below? This switch is only for special tags that actually set `Span` properties.\nLABEL:", "completions": "code context"}
{"id": 40, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This shouldn't be changed.\nLABEL:", "completions": "correctness"}
{"id": 41, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This one is important `2: I102 copyright year is outdated, expected 2014 but got 2012`\nLABEL:", "completions": "correctness"}
{"id": 42, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Are these imports needed (BiConsumer and Consumer)? If they are unused imports, then precommit will fail.\nLABEL:", "completions": "Necessity"}
{"id": 43, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why are we catching and logging exceptions? By doing that we make it look like the job has succeeded and it will be removed from the queue - if we didn't do that then it would stay queued...\nLABEL:", "completions": "rationale"}
{"id": 44, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: If there are `@param` tags in docblock, there should be `@return` tag also. (applies for a whole file)\nLABEL:", "completions": "consistency"}
{"id": 45, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Is the concept of validators exclusive to IBFT2? I wonder if this category should be more explicitly linked to IBFT2.\nLABEL:", "completions": "code context"}
{"id": 46, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Spotless is configured to reject star imports. Please replace with explicit imports.\nLABEL:", "completions": "formatting"}
{"id": 47, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Remind me why you are using CUDA vocabulary when naming these variables.\nLABEL:", "completions": "code context"}
{"id": 48, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Please turn the iteration order around (instead of `0...size` to `size...0`). The reason is that this sometimes skips indices when removing an item. You can therefore end up with feeds that have counter 0 and are still displayed.\nLABEL:", "completions": "correctness"}
{"id": 49, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: this is a behavior change. solid_subset=[] represents an empty pipeline where as solid_subset=None is the full pipeline\nLABEL:", "completions": "behavior"}
{"id": 50, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: this is a breaking change, any specific reason you want to do this?\nLABEL:", "completions": "rationale"}
{"id": 51, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Blocking: we still want read write separation. Node functions should absolutely not write to the chain store and the interface should reflect that. Only the syncer should have this capability in production code. It should be no problem to keep casting chainForTest to a read-write interface, or doing other function decomposition and automatic casting tricks.\nLABEL:", "completions": "security"}
{"id": 52, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: The PR description says the lowest on-demand request priority is `2^30`. Why the `-1` here?\nLABEL:", "completions": "correctness"}
{"id": 53, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: checking health again? I think it is not necessary.\nLABEL:", "completions": "Necessity"}
{"id": 54, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Need an `if err == nil {break}` above this line so that we don't log/sleep if the retry succeeds.\nLABEL:", "completions": "logic"}
{"id": 55, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: to reiterate my point above, this class is not the actual provided Promise, but rather something a user can provide a Promise to/with. I think a name like `PromiseProvider` is more appropriate.\nLABEL:", "completions": "naming"}
{"id": 56, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I guess we can only call this from a post-build function, but we might need to check that this target is to be built? I guess target A depends on B which has a post build. We `plz build :B` which adds C as a dep of A. Won't we queue C to be built even though it only needs to build if A needs to be built? That's kinda why I approached this the way I did. I trust you've thought about this but would be good to understand this a bit better.\nLABEL:", "completions": "code context"}
{"id": 57, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: You should use `isinstance()` instead of comparing the class name to a string.\nLABEL:", "completions": "alternative solution"}
{"id": 58, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why should audio and video elements always return `false` for `isHidden`?\nLABEL:", "completions": "code context"}
{"id": 59, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This obviously won't work for all the other platforms.\nLABEL:", "completions": "portability"}
{"id": 60, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Isn't he diamond operator Java7+?\nLABEL:", "completions": "code context"}
{"id": 61, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Prefer adding a second `positive(String, double)` that delegates down to this three-param version. Using `null` in code is generally Not A Great Idea, and it looks ugly.\nLABEL:", "completions": "alternative solution"}
{"id": 62, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This pattern, where we add a new parameter without using it, often indicates to me that we've got a leaky interface or abstraction. I see this pattern _a lot_ in this patch, so wondering you have thoughts about it.\nLABEL:", "completions": "abstraction"}
{"id": 63, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This seems like an improved pattern :)\nLABEL:", "completions": "alternative solution"}
{"id": 64, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: `open_id_authentication` is no longer the name of the function, and it's not OpenID specific\nLABEL:", "completions": "naming"}
{"id": 65, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This didn't require corresponding changes to the test case(s)?\nLABEL:", "completions": "test coverage"}
{"id": 66, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: A question! I think `string` totally works, but what do you think of `*string` for consistency?\nLABEL:", "completions": "specialized expertise"}
{"id": 67, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Should this be: `aws.infrastructure.cluster.sigs.k8s.io` instead?\nLABEL:", "completions": "correctness"}
{"id": 68, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Not clear on why this change is correct.\nLABEL:", "completions": "correctness"}
{"id": 69, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Hi Simon. Whether this should return true depends on what byte buffers are used? The same applies to ByteBufferIndexInput, actually... I don't think you can generally tell whether the ByteBuffers the input operates on come from a mmap call or from somewhere else (even direct buffers don't have to be a result of mmap).\nLABEL:", "completions": "specialized expertise"}
{"id": 70, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: All stories in this file also need to have the default padding.\nLABEL:", "completions": "consistency"}
{"id": 71, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I don't think these asserts are necessary, because `subsurface_find_sibling` already searches in the parent. Or am I missing something?\nLABEL:", "completions": "necessity"}
{"id": 72, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Should this be `number` instead of `id`?\nLABEL:", "completions": "naming"}
{"id": 73, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I have forgotten why we thought this restriction is necessary. A user registers a Hive/HBase table with us but is not able to use the table with the registered name in DML. Will UPDATE STATs will be on the original name too (and update stats code will find out registered name and use it for Table_uid?). This was the registration concept is almost like an internal implementation idea, at some point could even be done by some utility program for all existing Hive/hBase tables, and the user need not be aware of it? I am struggling with a user would want to register a table, if they cannot use it by that name.\nLABEL:", "completions": "code context"}
{"id": 74, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Should most of these non-globals be static?\nLABEL:", "completions": "scope"}
{"id": 75, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Please do not approve PRs without tests!!!!\nLABEL:", "completions": "testing"}
{"id": 76, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Now that you handle this in `webenginetab.py` you can undo all the changes in this file.\nLABEL:", "completions": "refactoring"}
{"id": 77, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think we should log the exception to a log file instead of printing it. The current behavior (not catching the exception) should lead to an automatic print of the exception to the terminal/console.\nLABEL:", "completions": "logging"}
{"id": 78, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: These changes to the resource helpers have some more far-reaching implications as they also affect calls made in hive-operator, I believe. It's probably OK still, though. Ideally, the resource helper would not be the one doing the logging, since it cannot know the severity, but that is well beyond something that we should tackle for this PR. I would rather have the hive-operator log warnings than have the syncsetinstance controller log errors.\nLABEL:", "completions": "specialized expertise"}
{"id": 79, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: do you really want to change the behavior on foreign key ?\nLABEL:", "completions": "necessity"}
{"id": 80, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Looks like my bad. Thanks for fixing!\nLABEL:", "completions": "appreciation"}
{"id": 81, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think \"Don't replace variables ...\" would be cleaner.\nLABEL:", "completions": "alternative solution"}
{"id": 82, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Do you validate the possible strings? I've not read the code below but we should make sure if a string is supplied it is validate...\nLABEL:", "completions": "security"}
{"id": 83, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I'd recommend using generateDataDiskName here as well -- might as well benefit from the safety that it gives to protect yourself from future changes to w.ID().\nLABEL:", "completions": "safety"}
{"id": 84, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: qq: do we want to include anything in the name to indicate that it is a position in the manifest?\nLABEL:", "completions": "naming"}
{"id": 85, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: These logs should probably use the `LOGTAG`\nLABEL:", "completions": "conventions"}
{"id": 86, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: From this, it was clear, that we are using our version of wireguard-go. And now it looks like we are using original packages which is confusing.\nLABEL:", "completions": "clarity"}
{"id": 87, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Any particular reason for this? This potentially will make harder to investigate users issues\nLABEL:", "completions": "rationale"}
{"id": 88, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Do you also need to check if Blockly.localConnection_ is non-null?\nLABEL:", "completions": "correctness"}
{"id": 89, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Not really a container, and it's not just about non-config data, not sure of a better description, @myronmarston ?\nLABEL:", "completions": "specialized expertise"}
{"id": 90, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: The desktop app will load this fine. on iOS I get `TypeError: undefined is not an object (evaluating '_$$_REQUIRE(_dependencyMap[8], \"stream\").Readable.Readable')` if I change it to `const Readable = require('stream').Readable;` or `const { Readable } = require('stream');` I get undefined errors from the stream on iOS: `[TypeError: stream.on is not a function. (In 'stream.on(\"data\", function (chunk) { return chunks.push(chunk); })', 'stream.on' is undefined)]` What am I missing?\nLABEL:", "completions": "debugging"}
{"id": 91, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: this is needed since the chunk feeder shares memory across calls to the pipeline. this is in order to avoid multiple allocations. this change mimics the behavior of shed and localstore, and copies the data from the call into the in-memory store\nLABEL:", "completions": "rationale"}
{"id": 92, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: wut. We can do this at the beginning of tests if we want right? Why are we depending on init?\nLABEL:", "completions": "rationale"}
{"id": 93, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Same trick here IMO.\nLABEL:", "completions": "alternative solution"}
{"id": 94, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Should be `@origin = element || origin || POINTER`\nLABEL:", "completions": "syntax"}
{"id": 95, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: this example needs a fix?\nLABEL:", "completions": "correctness"}
{"id": 96, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Is it safe to assume this surface is a toplevel?\nLABEL:", "completions": "code context"}
{"id": 97, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: we don't need that function\nLABEL:", "completions": "necessity"}
{"id": 98, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: we'll also have to think about adding \"Windows Server 2014\" or whatever they come up with later.\nLABEL:", "completions": "scalability"}
{"id": 99, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: curious do we have an API to fetch an inactive flow?\nLABEL:", "completions": "specialized expertise"}
{"id": 100, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This branch is not needed anymore because every `vnode` that passes through `h` in compat or core will have the `$$typeof`-property now .\nLABEL:", "completions": "alternative solution"}
{"id": 101, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Did you mean to use `hasAttribute`? You shouldn't. This does not improve performance and it messes with the readability.\nLABEL:", "completions": "performance"}
{"id": 102, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Please import modules and not classes (except for Qt stuff).\nLABEL:", "completions": "syntax"}
{"id": 103, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Hm... why do we have a \"DummyJavaNode\" in src/main? Looks like, this should have gone into src/test....\nLABEL:", "completions": "organization"}
{"id": 104, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This seems meaningless. If we cannot add any info let us remove this.\nLABEL:", "completions": "Necessity"}
{"id": 105, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Can you rename `Ports` to `PortsUnsafe`?\nLABEL:", "completions": "naming"}
{"id": 106, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This feels like it could be moved out to your first gem!\nLABEL:", "completions": "refactoring"}
{"id": 107, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: The expected behaviour for `poll` would be to match what `Deque` does, which is: > Retrieves and removes the head of the queue represented by this deque As such, you shouldn't need the `RequestId` here.\nLABEL:", "completions": "alternative solution"}
{"id": 108, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This is super minor, but it'd be nice if this iterated over an arbitrary number of array inputs.\nLABEL:", "completions": "alternative solution"}
{"id": 109, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: What is the problem here? The commit message has strange wording \"readlink is defined with restrict pointers\": do you mean \"restricted\"? Is that a well-defined language term? I'm not sure what it means.\nLABEL:", "completions": "clarity"}
{"id": 110, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why are we not wrapping here?\nLABEL:", "completions": "Necessity"}
{"id": 111, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I though that all data objects are being unified in the fashion where all default values are initialized in constructor, are not they?\nLABEL:", "completions": "code context"}
{"id": 112, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Does this file actually need to be committed to git? Having to run `make generate` is rather tedious on each PR and it conflicts easily.\nLABEL:", "completions": "Necessity"}
{"id": 113, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: We don't need this anymore, as Google's library handles various auth mechanisms for us. We'll be less explicit about why we're failing but we gain support for several authentication methods- swings and roundabouts!\nLABEL:", "completions": "alternative solution"}
{"id": 114, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: No need to speficy attribute here. Moreover in yaml it is default to use lowercase names.\nLABEL:", "completions": "syntax"}
{"id": 115, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: In general I'm a trying to understand the reason behind this PR. Looks like if a blob (name) already exists we check if the contents are identical? In what scenarios this is not the case? When we want to publish a package/asset that has changed but still we want to use the same version?\nLABEL:", "completions": "rationale"}
{"id": 116, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Can rename `req` to be `opener`, since that is the object, and it wraps `req` internally?\nLABEL:", "completions": "naming"}
{"id": 117, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: @MichaelDCurran, thoughts on adding a breakpoint format field attribute? It seems almost app specific, but I guess it does seem odd abusing line-prefix. Is there any more generic concept here?\nLABEL:", "completions": "specialized expertise"}
{"id": 118, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This would return a tuple of two dictionaries. You need to combine them and return a dictionary\nLABEL:", "completions": "alternative solution"}
{"id": 119, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: What do you think of moving the example to the help text of the prompt? and the prompt itself can be \"What is your application's GitHub repository URL?\"\nLABEL:", "completions": "alternative solution"}
{"id": 120, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Break out tests for events into their own tests rather than placing them in other ones. That makes it easier for us to figure out where problems lie and to do a TDD-driven implementation over new APIs.\nLABEL:", "completions": "testing"}
{"id": 121, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Nice use of std::distance. I'm a bit worried about first += 9 though.\nLABEL:", "completions": "correctness"}
{"id": 122, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Shouldn't this be `app.kubernetes.io/managed-by` as prometheus-operator manages this resource, but this resource isn't a part of prometheus-operator?\nLABEL:", "completions": "correctness"}
{"id": 123, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: As long as we're being extra-vigilant about NREs, should we check that `httpMethod` and `requestUri` are not null?\nLABEL:", "completions": "correctness"}
{"id": 124, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: No need to have `xrc20` alias\nLABEL:", "completions": "Necessity"}
{"id": 125, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: the naming convention I'm been adopting if `_type` for instances of these classes. So maybe `context_config_type` is a better name for this fn\nLABEL:", "completions": "naming"}
{"id": 126, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Don't call it GPU mining, call it `externalMining`, here and throughout.\nLABEL:", "completions": "naming"}
{"id": 127, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: `within this with` typo, should be `within this width`\nLABEL:", "completions": "syntax"}
{"id": 128, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: how come this is false?\nLABEL:", "completions": "code context"}
{"id": 129, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: How about `Object.prototype.toString`? Or using the `typeof` operator?\nLABEL:", "completions": "alternative solution"}
{"id": 130, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I know @jzila suggested this, but I disagree: you're really not supposed to save a context in a struct. Can you get by with just saving the `Done()` channel instead? The `ctx` should continue to be passed around explicitly.\nLABEL:", "completions": "alternative solution"}
{"id": 131, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This check isn't right though.\nLABEL:", "completions": "correctness"}
{"id": 132, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: maybe `toolkitVersion` instead? It doesn't necessarily have to be called that in the generated code, but in the view model classes, I think it makes it clearer that it is the version of toolkit itself.\nLABEL:", "completions": "naming"}
{"id": 133, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: the response data was added intentionally in #612, i think we could keep the `setFileState` stuff here as a special case, at least for now \nLABEL:", "completions": "alternative solution"}
{"id": 134, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This isn't really easy to read.\nLABEL:", "completions": "readability"}
{"id": 135, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This line changed due to go formatting. Format was not there earlier.\nLABEL:", "completions": "formatting"}
{"id": 136, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: The name \"Without\" in code is a little nebulous. Maybe something more descriptive like TrimPrefix or StripPrefix or WithoutPathPrefix or something like that. (Thoughts?)\nLABEL:", "completions": "naming"}
{"id": 137, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: is this test in the move tests? I see what you mean then - it works, but I wonder if we won't lose track that it's being tested here.\nLABEL:", "completions": "test coverage"}
{"id": 138, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I'm not sure if this wanted to be `json:\"tags\"` (which I'd set in my PR) or `json:\"tag\"` that someone elses PR had set. Given that the rest of the fields had their JSON field name set to the same as the struct field name, I opted for `tags`.\nLABEL:", "completions": "code context"}
{"id": 139, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: since the logic here and in `Proposal` is exactly the same, do you think it makes sense for us to include it elsewhere? I am not opposed to duplicated code when it makes sense, but the reason I first identified this was that I was looking for code in NCR::WorkOrder that was not specific to Work Orders. Seems like fiscal year logic might be helpful for reporting for other clients. In that case, we'd want this scope on those client data classes as well. Might be wrong to include this in the FiscalYear mixin, but it does seem like it should be outside of Proposal and WorkOrder. Does that make sense?\nLABEL:", "completions": "alternative solution"}
{"id": 140, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: there is no static method as a go between -- how does this work?\nLABEL:", "completions": "code context"}
{"id": 141, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Can you please change the name of this class to be something else?\nLABEL:", "completions": "refactoring"}
{"id": 142, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think we might prefer generalizing the interface rather than creating an exception. Current design of `h2o_next_token` assumes the input to be a comma-separated list, and allows the caller to specify a different separator when parsing a nested list. As I understand, what we are trying to attain in this PR is to have a way of parsing a flat list of semicolon-separated list. Assuming that is the case, I think it would be better to change the API of the function to accept two separators (i.e. inner and outer), where for our existing use-cases `outer` would be `,`.\nLABEL:", "completions": "alternative solution"}
{"id": 143, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: why not recycling? I Lru cache now recycling?\nLABEL:", "completions": "rationale"}
{"id": 144, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why it is now called `PaymentVersionV3`?\nLABEL:", "completions": "rationale"}
{"id": 145, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: changed for debug purpose?\nLABEL:", "completions": "rationale"}
{"id": 146, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: @cijothomas I needed a way to set the Exporter.ParentProvider when the Processor's gets set. Internal to SDK though.\nLABEL:", "completions": "specialized expertise"}
{"id": 147, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Talking through this scenario with @srividyacb and she's wondering if there should also be a check of `(from_trunk && node_based_graph.GetEdgeData(eid).flags.road_classification.IsLinkClass())` as highways with trunk classifications can also have this scenario.\nLABEL:", "completions": "specialized expertise"}
{"id": 148, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: where does `master_certname` come from?\nLABEL:", "completions": "code context"}
{"id": 149, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: The line breaking is unnecessary.\nLABEL:", "completions": "presentation"}
{"id": 150, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: why not enable split by space here ?\nLABEL:", "completions": "alternative solution"}
{"id": 151, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Shouldn't the operator be && ?\nLABEL:", "completions": "correctness"}
{"id": 152, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: My best guess is that you want to use host.name in these parts to get the name of the host ?\nLABEL:", "completions": "code context"}
{"id": 153, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: IMO this edge case handling could remain here, just instead of overwriting the `n.nodeType`, the `makeEdgeType` method of `n` should be called, so `n.nodeType = nodeTypeEdge` -> `n.makeEdge()`\nLABEL:", "completions": "alternative solution"}
{"id": 154, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Just wondering... The two kinds of notifications are now quite different (Channel, text, maybe even icon). Would it make sense to extract the auto download notification to a new class instead of handling everything in the existing `notificationManager`? I have not checked if this will lead to a lot of code duplication, though.\nLABEL:", "completions": "alternative solution"}
{"id": 155, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Do we need to put this on the Call? We only need the API communication between the Encoding and the Transports which is currently done through the Transport.Request. The Call is used by users right?\nLABEL:", "completions": "necessity"}
{"id": 156, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: `ctx` is unused in GenerateAPIKey\nLABEL:", "completions": "correctness"}
{"id": 157, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Can you judge the type of error?\nLABEL:", "completions": "debugging"}
{"id": 158, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Much simpler than a weird and confusing ``convolve`` call!\nLABEL:", "completions": "alternative solution"}
{"id": 159, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Huh, this seems weird to me... Surely the suspenders render was called again in order to get the new `<div>Hello second 2</div>` output... Imma take a peak at these tests to understand what's going on\nLABEL:", "completions": "debugging"}
{"id": 160, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Since this is just a helper function to create text, perhaps this could live in a helper? I noticed that we have a few other error/message creators in the application controller as well, but I think this type of function should be re-factored to be part of a helper.\nLABEL:", "completions": "alternative solution"}
{"id": 161, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Will this mess up parsing the messages by other editors? (vscode, vim ...)\nLABEL:", "completions": "compatibility"}
{"id": 162, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\nLABEL:", "completions": "style"}
{"id": 163, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why can the pool be null?\nLABEL:", "completions": "code context"}
{"id": 164, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: It might be good to have a note here: > work-around for issue #7562 allowing us to differentiate presentational lists from interactive lists (such as of size greater 1 and ARIA list boxes). In firefox, this is possible by the presence of a read-only state, even in content editable.\nLABEL:", "completions": "annotation"}
{"id": 165, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This set of changes is the one part of this that I'm not completely sure is valid. Can someone look over this to make sure I got the E's right?\nLABEL:", "completions": "correctness"}
{"id": 166, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: There doesn't seem to be a reason to copy this here.\nLABEL:", "completions": "Necessity"}
{"id": 167, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: We've avoided including h2o headers in BPF programs because it's a runtime dependency. However, IIRC, this is because h2olog was maintained in the separate repository so that h2olog did not know where h2o was installed. Now h2olog can use `H2O_ROOT`, we should add it to BCC's `cflags` in order to include h2o headers in BPF programs.\nLABEL:", "completions": "dependency"}
{"id": 168, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think the docstring here should include the CLI arg `--alert.query-url` just to make it clear to users which setting this uses.\nLABEL:", "completions": "documentation"}
{"id": 169, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Same change just above?\nLABEL:", "completions": "duplicate code"}
{"id": 170, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Could you check the result content rather than just the number of search results please? For example with this test if the search engine suddenly starts returning \"latin n\" for both queries, we won't know about it.\nLABEL:", "completions": "test coverage"}
{"id": 171, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: nit: I think that `workloadID` should suffice for this test... that's what we'd be issuing anyways\nLABEL:", "completions": "naming"}
{"id": 172, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\nLABEL:", "completions": "syntax"}
{"id": 173, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: We should have a rule to detect identical catch branches\nLABEL:", "completions": "rule enforcement"}
{"id": 174, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: remove these from the targets file.\nLABEL:", "completions": "refactoring"}
{"id": 175, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: now that we have the signature in the hive messages, it might be that this must be drastically reduced, since there are limits on the protobuf reader/writers i believe\nLABEL:", "completions": "optimization"}
{"id": 176, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I recommend that we move this to be optional, as other users might not need it. Can you look at `OPTIONAL_PACKAGES` section, around line 68?\nLABEL:", "completions": "alternative solution"}
{"id": 177, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I usually set idea to never use wildcard import such as `import java.util.*;` Now i use setting from javaslang standard.\nLABEL:", "completions": "coding convention"}
{"id": 178, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Where is host['ips'] coming from?\nLABEL:", "completions": "code context"}
{"id": 179, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: oh! missed a `:` here; let me fix that; also can get rid of the intermediate variable\nLABEL:", "completions": "bug fix"}
{"id": 180, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Is this necessary?\nLABEL:", "completions": "Necessity"}
{"id": 181, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I'd create a different method for each render section.\nLABEL:", "completions": "structure"}
{"id": 182, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Instead of storing the revert flag in the tracer is it possible to use org.hyperledger.besu.ethereum.mainnet.TransactionProcessor.Result#getRevertReason? (via org.hyperledger.besu.ethereum.transaction.TransactionSimulatorResult#getResult)? If a TX reverts without a reason do we get an empty revert reason or a revert reason with zero bytes?\nLABEL:", "completions": "specialized expertise"}
{"id": 183, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think this should test with and without container reuse if that is implemented in this PR. Probably just make this test parameterized.\nLABEL:", "completions": "test coverage"}
{"id": 184, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: These modifications allow BaseFile to translate into a SparkRow with the specID as a column\nLABEL:", "completions": "functionality"}
{"id": 185, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: is this something we've been missing this whole time?\nLABEL:", "completions": "Necessity"}
{"id": 186, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: nit: this is a package-wide constant so better to narrow the scope like `allEventsSign`.\nLABEL:", "completions": "naming"}
{"id": 187, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: There seems to be some repetition. Does a local function make this code shorter overall?\nLABEL:", "completions": "alternative solution"}
{"id": 188, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Might be cheaper to reuse the `null` assignment of line 313 and set `isHydrating` to null instead WDYT?\nLABEL:", "completions": "alternative solution"}
{"id": 189, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Revert this blank line\nLABEL:", "completions": "correctness"}
{"id": 190, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This was introduced recently for the Hadoop 3 upgrade. Copy/paste error but definitely causing some of the new test failures.\nLABEL:", "completions": "bug"}
{"id": 191, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think we should only need to do this for `:approve` since we are using `authenticate_user!` for all other actions and that checks for disabled client\nLABEL:", "completions": "security"}
{"id": 192, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I wonder if we should create new tests for header checks; here for instance we're mixing querystring and headers. Thoughts?\nLABEL:", "completions": "specialized expertise"}
{"id": 193, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: We should be able to add sensitive by hard-coding the parameters, same as you put into the metadata in apply_helpers.\nLABEL:", "completions": "alternative solution"}
{"id": 194, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why do you think that it is necessary to create this class?\nLABEL:", "completions": "Necessity"}
{"id": 195, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: replacing the `1` with `io.SeekCurrent` may be good here\nLABEL:", "completions": "alternative solution"}
{"id": 196, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: nit: perhaps this file would be better named `jwks_source.go` ?\nLABEL:", "completions": "naming"}
{"id": 197, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: It will be helpful to specify the intended priority as well for the properties within this file.\nLABEL:", "completions": "organization"}
{"id": 198, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Make this private and update all the public functions to not take this argument. The variable you set below should also be private, then in the tests instead of passing the variable in to the function just update the variable. We don't want to expose the testing implementation in the public api if it can be avoided.\nLABEL:", "completions": "refactoring"}
{"id": 199, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Do you now why is it a specific table name is used as a default?\nLABEL:", "completions": "code context"}
{"id": 200, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: If all you're doing is checking for the existence of a directory as your \"temp\" directory, why does it matter what OS you're on?\nLABEL:", "completions": "platform compatibility"}
{"id": 201, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: nit- would be cleaner to import it once\nLABEL:", "completions": "optimization"}
{"id": 202, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Looks like there is a closing parenthesis `)` missing here.\nLABEL:", "completions": "syntax"}
{"id": 203, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: this one bothers me. There are many places where this one is written to for an error message and just a single callsite is changed.\nLABEL:", "completions": "code refactoring"}
{"id": 204, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: You can put this in `kbfsOpsInit()` in you want, so we don't have to call it in every test.\nLABEL:", "completions": "alternative solution"}
{"id": 205, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: `ARM_32` is what clients define as an input to DR, and is not always defined internally: we use just `ARM` to mean AArch32.\nLABEL:", "completions": "code context"}
{"id": 206, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: s/for use/to use for/\nLABEL:", "completions": "syntax"}
{"id": 207, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: ` $event->getAvatarFilename()` this function return `string` or `null`. In this place ` $event->getAvatarFilename()->getValue()` return `Fatal error `\nLABEL:", "completions": "bug"}
{"id": 208, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: why not creating a new error type for server's own resource limit exceed error and do conversion within rpc interceptor?\nLABEL:", "completions": "alternative solution"}
{"id": 209, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Could be a timing thing here. When options are created they'll copy the ref for the current default propagator. If user sets through SDK the global propagator after that, it won't be reflected. Could leave it null here and then when it is used in instrumentation do `options.Propagator ?? Propagators.DefaultTextMapPropagator`. It would be a slight perf hit but it makes it hot-swappable.\nLABEL:", "completions": "alternative solution"}
{"id": 210, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Unrelated file. Please remove from PR.\nLABEL:", "completions": "unrelated"}
{"id": 211, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Careful: you only want two newlines after the final header message. (That indicates the end of headers and the start of data.)\nLABEL:", "completions": "correctness"}
{"id": 212, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This will not work on Python 3 (to which we are transitioning) because `.content` is bytes, not a str. Can you make the pattern a bytes object as well (like so: `b\"pattern\"`)?\nLABEL:", "completions": "compatibility"}
{"id": 213, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This was to allow the tests to pass when the order of the required was different. Silly, but we don't have an easy way to check for \"equal but order doesn't matter\" in chai.\nLABEL:", "completions": "bug fix"}
{"id": 214, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: maybe say \"returns the default cost method that returns an object of cost 1\".\nLABEL:", "completions": "clarity"}
{"id": 215, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I believe these rules will be enforced both (1) on egress from a local workload, and (2) on ingress **to** a local workload. Right? I understand that we definitely want (1), but do we really want to enforce (2) as well?\nLABEL:", "completions": "code context"}
{"id": 216, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Use `response.asJsonObject()` instead. Also, use `put()` instead of `putOpt()`, `null` as a value is fine.\nLABEL:", "completions": "alternative solution"}
{"id": 217, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Are you sure? We've changed it during an introduction of the IME support.\nLABEL:", "completions": "historical context"}
{"id": 218, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think here we want the use of `empty()` to take care of empty strings. If you put `dql_filter: ''` in your YAML config ... this will add `->andWhere('')` and it will fail, right?\nLABEL:", "completions": "code context"}
{"id": 219, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: this is golang's named return, err is defined, `return` is equivalent to `return err` the current code has no problem\nLABEL:", "completions": "correct understanding"}
{"id": 220, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I don't think this is right; in Rust terms it's like a `&mut String`, in Java `StringBuilder` - it's not a return value from the function which is what `(out)` is for.\nLABEL:", "completions": "correctness"}
{"id": 221, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: If the label is not binary, should we rename this function?\nLABEL:", "completions": "naming"}
{"id": 222, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This is very-very bad idea because of its performance impact\nLABEL:", "completions": "performance"}
{"id": 223, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: WHY U NOT SORT IMPORTS?\nLABEL:", "completions": "presentation"}
{"id": 224, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Put a comma after the last item of a multiline hash.\nLABEL:", "completions": "presentation"}
{"id": 225, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: How come we need ``Dimensioned`` in the top-level namespace?\nLABEL:", "completions": "code context"}
{"id": 226, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: excess whitespace through plugin.\nLABEL:", "completions": "formatting"}
{"id": 227, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: What is the problem here? I feel we used this in a lot of places.\nLABEL:", "completions": "code context"}
{"id": 228, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Update the docstring.\nLABEL:", "completions": "documentation"}
{"id": 229, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: delete the empty line \"github.com/pkg/errors\" should be grouped with other third party packages same for the rest\nLABEL:", "completions": "presentation"}
{"id": 230, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Assigning capabilities to the field here is not the best idea. Semantically this field contains the capabilities returned by the browser after session start. So here we sould better amend capabilities and return them from `init` method to pass later to `startSession` method (that will assign the capabilities returned by the browser to the field).\nLABEL:", "completions": "alternative solution"}
{"id": 231, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Is this a breaking change, or is the API private?\nLABEL:", "completions": "compatibility"}
{"id": 232, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I don't think we need this dependency in this project right now\nLABEL:", "completions": "necessity"}
{"id": 233, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I don't think this is necessary since `CommonLabels` is a public func and every component name is also public constant.\nLABEL:", "completions": "Necessity"}
{"id": 234, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: The `_example` field should be updated to include an interpreter with an array value.\nLABEL:", "completions": "alternative solution"}
{"id": 235, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Put this in the godoc of SupportedProtocols instead. Preferably we would just use one map though. Why not just use this one?\nLABEL:", "completions": "alternative solution"}
{"id": 236, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I'd feel a little safer if the first argument were a string, not a *string unless there's a particular reason for making it a pointer.\nLABEL:", "completions": "safety"}
{"id": 237, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Can you please revert changes to files in the `thoughtworks` package? This is legacy code and we will eventually phase out RC.\nLABEL:", "completions": "revert"}
{"id": 238, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: You can safely revert changes to this file.\nLABEL:", "completions": "safety"}
{"id": 239, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This deletion is unnecessary.\nLABEL:", "completions": "Necessity"}
{"id": 240, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I'm not a huge fan of this overloading of the prop; accepting very different types of arguments for props like this can be confusing, and wasn't part of the IB. I understand wanting to import the SVG directly, but the IB suggests using `${global._googlesitekitLegacyData.admin.assetsRoot}${userInputSuccessImage}` as the `src`/`smallImage` value here. It'd be great to refactor this to accept components directly in the future, but let's do that all-at-once rather than this hybrid approach that makes the API less clear.\nLABEL:", "completions": "alternative solution"}
{"id": 241, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I've had this happen recently with IntelliJ, was this intentional?\nLABEL:", "completions": "tooling"}
{"id": 242, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Order(1) vs Order(logN) -- not sure it's measurable at the ~200 element size of the table. All of the published comparisons start at ~1000 elements.\nLABEL:", "completions": "performance"}
{"id": 243, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I don't know about this aliasing and 'factory'. Previous version was rather straightforward: `location.CreateLocationResolver`. Perhaps `location.CreateResolver` would be even better? What do we actually gain here from moving DI to a separate sub-package?\nLABEL:", "completions": "alternative solution"}
{"id": 244, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Use `UpperCamelCase` for function names\nLABEL:", "completions": "naming convention"}
{"id": 245, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I'm not 100% sold on this idea but I like it in general. Nice compromise between using the 'Date' constructor where possible and falling back to the pre #5880 behavior when it makes sense. However, instead of `Number(value) < 0`, let's do `Number(value) < MIN_YEAR` because `new Date('-2017')` is perfectly valid in JS and I don't want to break the date behavior.\nLABEL:", "completions": "alternative solution"}
{"id": 246, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Remember to close SOLR-11877 after this\nLABEL:", "completions": "task management"}
{"id": 247, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: this change should be reverted\nLABEL:", "completions": "revert"}
{"id": 248, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This function signature is a bit complicated, some parameters are IN type (stopLoop which is modified from outside), others are OUT (registeredEvent channel which is modified inside function) I suggest the following signature -> SubscribeToRegistrationEvent(identityAddress) returns registeredEvent chan of type (RegisteredEvent not int), Unsubscribe func(), error (in case of any error). That way caller can always cance subscription if needed and check for any errors. Also - unsubscribe function hides any internal details how subscribtion is really implemented\nLABEL:", "completions": "alternative solution"}
{"id": 249, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: `.wav`?! cannot we use something slightly more modern and compressed instead? :) I dunno, like `.mp3` or `.aac` or `.ogg`...\nLABEL:", "completions": "alternative solution"}
{"id": 250, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Wouldn't a single signal call be enough? (without the boolean even)\nLABEL:", "completions": "alternative solution"}
{"id": 251, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I suspect that this whole block, which is going to be repeated a number of times, should probably be in a helper. I guess it would need to be given the object and the title and could probably figure out everything else from that?\nLABEL:", "completions": "alternative solution"}
{"id": 252, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Should we expose this attribute in the Asciidoctor.js API ?\nLABEL:", "completions": "API"}
{"id": 253, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think contains on `Multimap` was broken - it should return true if one of the values is associated with the key? It that right\nLABEL:", "completions": "correctness"}
{"id": 254, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: delete this line\nLABEL:", "completions": "correctness"}
{"id": 255, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Presumably we no longer need `force: true` here.\nLABEL:", "completions": "alternative solution"}
{"id": 256, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: HIP runtime is compiled using a C++ compiler. So comparison to both NULL as well as 0 does not make sense. Just comparing to NULL is sufficient.\nLABEL:", "completions": "correctness"}
{"id": 257, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: these urls are still in `a` tags so we should probably include these links separately for a non-HTML version\nLABEL:", "completions": "accessibility"}
{"id": 258, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: That's fine though, meaning that you can send to this channel under the server lock. The internalSendLoop will pick up the change when the server lock is released (if loop is blocked trying to grab the server lock). Even the way you do it here (releasing the lock, sending, then reacquiring) does not guarantee that the internalSendLoop will have time to refresh in that interval.\nLABEL:", "completions": "concurrency"}
{"id": 259, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: The name `enableDownloading` implies this is a boolean capability. How about `downloadDir`?\nLABEL:", "completions": "naming"}
{"id": 260, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Found one internal team is using this method. Will coordinate with them about the migration solution.\nLABEL:", "completions": "coordination"}
{"id": 261, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: The field `HttpServerErrorCodes` should be called `HttpServerErrorStatuses`\nLABEL:", "completions": "naming"}
{"id": 262, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Can you please make each of these in a separate line. It will be easier to keep them sorted, and add/remove.\nLABEL:", "completions": "organization"}
{"id": 263, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: should we error instead of silently ignoring the `cleanup` param? it defaults to `false`, so someone must have explicitly set it to `true`\nLABEL:", "completions": "correctness"}
{"id": 264, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: There is no specific requirement that the root be called `root`, just that there is a single root directory and that it be the first entry in the zip.\nLABEL:", "completions": "code context"}
{"id": 265, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: perhaps we should encapsulate this logic in a helper method w a test?\nLABEL:", "completions": "alternative solution"}
{"id": 266, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Now that we're only using this repo as a Gem you shouldn't need to `require` an expanded local file path like below.\nLABEL:", "completions": "alternative solution"}
{"id": 267, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This isn't necessarily a year. It may be months, days, or hours. Can we return `intValue()` directly instead?\nLABEL:", "completions": "alternative solution"}
{"id": 268, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: this is redundant because it gets logged immediately on entering the handleContainerChange function\nLABEL:", "completions": "redundancy"}
{"id": 269, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: `ds.GenericDeploymentConfig.DeploymentNotification` in L128 is nullable.\nLABEL:", "completions": "code context"}
{"id": 270, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: this shouldn't be exposed here - this class isn't a carriage for this - its used internally to determine if/how we can mine.\nLABEL:", "completions": "encapsulation"}
{"id": 271, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: It's fine to leave these checks in. It'll make the exception come from `FirefoxDriver`, and that's probably clearer to a user.\nLABEL:", "completions": "readability"}
{"id": 272, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: We don't want to include the `IntegrationSpecHelper` for models...mind moving this line out of the loop to be `config.include EnvironmentSpecHelper, type: :model`?\nLABEL:", "completions": "alternative solution"}
{"id": 273, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Please check the return on these.\nLABEL:", "completions": "correctness"}
{"id": 274, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Do we need `==` for true?\nLABEL:", "completions": "Necessity"}
{"id": 275, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Changing the default value may cause BC-breaking. Suggest changing this value in config.\nLABEL:", "completions": "backward compatibility"}
{"id": 276, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: how does that happen?\nLABEL:", "completions": "code context"}
{"id": 277, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This is gross/clever. :-)\nLABEL:", "completions": "opinion"}
{"id": 278, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Take a look at the name of this file. Definitely copy and  \nLABEL:", "completions": "naming"}
{"id": 279, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Can you check with @mahebbar how to work this error. Should be different from 404.\nLABEL:", "completions": "specialized expertise"}
{"id": 280, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Do we still need the upper bound `<3.9`?\nLABEL:", "completions": "Necessity"}
{"id": 281, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Does this mean `vendor/bin/psalm` is not a symlink (or whatever equivalent Windows has for symlinks) on Windows?\nLABEL:", "completions": "platform compatibility"}
{"id": 282, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: @lpabon having a separate package name `aws_test` allows to test the package as if the tester was an external package. If the test package name is the same as the package being tested, the test package can also use methods and variables not exposed to the eventual user.\nLABEL:", "completions": "specialized expertise"}
{"id": 283, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: The exporter should still be able to test these histogram instrument kinds, right? Is there another reason to remove these?\nLABEL:", "completions": "Necessity"}
{"id": 284, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: should this increment eval.Round somehow?\nLABEL:", "completions": "logic"}
{"id": 285, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Although this change looks good. Maybe there are other inconsistent cases too?\nLABEL:", "completions": "correctness"}
{"id": 286, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This is a way better method name.\nLABEL:", "completions": "naming"}
{"id": 287, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Prefer single-quoted strings when you don't need string interpolation or special symbols.\nLABEL:", "completions": "syntax"}
{"id": 288, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I was wondering if this should allow per role specification, instead of (or in addition to) a generic \"allowed everywhere\". So you could do: `{ separator: ['aria-valuenow', 'aria-valuemin', 'aria-valuemax'] }`. You could still allow the array, and you could add a wildcard option for the \"generic\" case you've got now: `{ '*': ['always-allowed'] }`.\nLABEL:", "completions": "alternative solution"}
{"id": 289, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I'm confused by the name. The string was a Hive string but it isn't any longer? Why should we care? (I imagine I'll find the answer later... there is some different semantic that we want downstream...)\nLABEL:", "completions": "code context"}
{"id": 290, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Could you please leave the explicit imports?\nLABEL:", "completions": "readability"}
{"id": 291, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why need alias?\nLABEL:", "completions": "Necessity"}
{"id": 292, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Shouldn't this be a `libfs.nullIDGetter` (exported, of course)?\nLABEL:", "completions": "alternative solution"}
{"id": 293, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I dislike the messages.go pattern; the strings are only used once and make more sense in context. The other two added reportErrorf() calls in clerk.go have inline strings.\nLABEL:", "completions": "consistency"}
{"id": 294, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Seems we don't need it anymore.\nLABEL:", "completions": "Necessity"}
{"id": 295, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This might cause problems with the weird way we publish Guidance and Groups in the UI. We will have to make sure that UAT is thorough.\nLABEL:", "completions": "integration"}
{"id": 296, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: this default needs to be on order 1 minute, I'm not sure why we defaulted to 1 hour below...\nLABEL:", "completions": "necessity"}
{"id": 297, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I figure to make `{env.*}` work, right? I can't think of any other placeholder that makes sense here\nLABEL:", "completions": "code context"}
{"id": 298, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why change the port from 0 to getAvailablePort()?\nLABEL:", "completions": "rationale"}
{"id": 299, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: For me would be great don't repeat timeout sending in every get_locator call. Looks like it should be sent into LocatorsManager init. And possibly it should me non mandatory, something like that: `def __init__ (self, locators, timeout=60):`\nLABEL:", "completions": "alternative solution"}
{"id": 300, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I feel like since now we don't initiate the `opts.projectName` with `opts.ProjectName()`, which means `opts.projectName` and `opts.ProjectName()` they don't necessarily equal to each other, we need to also substitute all usage of `opts.ProjectName()` within `Ask()`, `Validate()`, and `Execute()` to `opts.projectName`. Otherwise if `-p` is set, `opts.ProjectName()` will get expired.\nLABEL:", "completions": "logic"}
{"id": 301, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: why do we thinkg that an empty string is ok to return from this method? I think the null should never be passed in here in the first place\nLABEL:", "completions": "correctness"}
{"id": 302, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: nit: can remove this `else` since we return from the condition above.\nLABEL:", "completions": "alternative solution"}
{"id": 303, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: You missed `Write<T>(...)`! I'm kidding ofc.\nLABEL:", "completions": "humor"}
{"id": 304, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Was there a customer who had this set to an empty string?\nLABEL:", "completions": "code context"}
{"id": 305, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I know we have the `reporter` spec below, but what about a unit test for this to explain reasoning behind logic? If I were going to update this decorator, I would assume it wasn't covered by tests because there is no unit test.\nLABEL:", "completions": "testing"}
{"id": 306, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: it's better to be : void attach(String name, Part part);\nLABEL:", "completions": "syntax"}
{"id": 307, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I didn't see where the IOException can get thrown, is this just to match the V1 reader?\nLABEL:", "completions": "code context"}
{"id": 308, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: We normally suppress this warning with `RDUSED_PARAM(forceRDKit)`\nLABEL:", "completions": "conventions"}
{"id": 309, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: What if `Game::getPlayerByNameWildcard` had not been called before. It would not find a player, wouldn't it?\nLABEL:", "completions": "code context"}
{"id": 310, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why upper case \"R\"?\nLABEL:", "completions": "code context"}
{"id": 311, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Does this need to return an error or could it return `false, nil`?\nLABEL:", "completions": "alternative solution"}
{"id": 312, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Can you not change those scopes in public API classes? This applies here and in other places -- protected changed to package-scope for source is not really an API-compatible change.\nLABEL:", "completions": "compatibility"}
{"id": 313, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: this parameter is only used in POST, please use `getRequest()->request->get('...');` Thanks\nLABEL:", "completions": "alternative solution"}
{"id": 314, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Problem number 1: Scoped packages would have a `/` character here. Changing this to `validatePackage` resolves the 403.\nLABEL:", "completions": "bug fix"}
{"id": 315, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I don't quite get why there would be key errors: ``deep_mapped`` is a clone of ``self`` and ``k`` comes from ``self.items()`` so why would the key ever be rejected?\nLABEL:", "completions": "code context"}
{"id": 316, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: this chain ID determines only from which chain to withdraw, therefore your changes do not accomplish what you want them to accomplish. You'll need changes to `func (aps *hermesPromiseSettler) Withdraw(chainID int64, providerID identity.Identity, hermesID, beneficiary common.Address) error`. The method probably has to include two chain ids: to and from. Currently, the method internally uses: `aps.config.L1ChainID` -> the chain to withdraw to `chainID` -> the chainID that was passed as the chain that the withdrawal is originating from.\nLABEL:", "completions": "code context"}
{"id": 317, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: If instead we had `TraceContext.extract` return a bool value as a second return value, we could avoid the byte array comparison in `TraceID.IsValid`. Did you consider that alternative?\nLABEL:", "completions": "alternative solution"}
{"id": 318, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: here shouldn't we use `depotFreeLimit`?\nLABEL:", "completions": "correctness"}
{"id": 319, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Could we use the Rails application's secret token instead? Do we actually need our own here?\nLABEL:", "completions": "Necessity"}
{"id": 320, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: so should be fixed here also\nLABEL:", "completions": "consistency"}
{"id": 321, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I would just remove this assert as it's going to get un-maintainable with a long list of valid sizes. Ditto below.\nLABEL:", "completions": "alternative solution"}
{"id": 322, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: `HostDataDir` is misleading. Can we rename it to something more relevant ? The constant should also be moved up and reused as necessary.\nLABEL:", "completions": "naming"}
{"id": 323, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I still feel like we are double-counting the outer IP header here (once in `defaultMTUGRE` and once in `ipsecESPOverhead`) but I'm not that familiar with IPsec.\nLABEL:", "completions": "specialized expertise"}
{"id": 324, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Not sure what benefit we gain by extending BaseProcessor here, as this seems to be defining a new OnEnd method. Could we modify MeasurementItem to have all the things, and then MeasurementProcessor can be simply extending BaseProcessor<MeasurementItem> (not blocking. just noting some observations in the PR :) )\nLABEL:", "completions": "alternative solution"}
{"id": 325, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This change was not really intended but made by the linter of VS Code. And looking at other packages this looks like a best practise to place interal packages on the top and gh imports afterwards.\nLABEL:", "completions": "best practice"}
{"id": 326, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This seems like a more appropriate message under `ListenAndServe`. WDYT?\nLABEL:", "completions": "alternative solution"}
{"id": 327, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Is this not required?\nLABEL:", "completions": "Necessity"}
{"id": 328, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: We should start thinking of an object that encapsulates this information :) we might need more arguments in the future.\nLABEL:", "completions": "refactoring"}
{"id": 329, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Given that we are (conceptually) searching across multiple self-dependencies, all we can say is that we didn't have a self dependency in which *both* source and dest masks were correct. Since the spec doesn't imagine this case, the valid usage statement assume we can differentiate only wrong source from only wrong dest within a *single* self-dependency -- which we can't across multiple (at least not meaningfully)... so we always return both the source/dest VUID's if we can't find a self-dependency in with *both* are correct.\nLABEL:", "completions": "code context"}
{"id": 330, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: rename? MiningCoordinator always exists\nLABEL:", "completions": "refactoring"}
{"id": 331, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Here would be the same case you don't need to call `loadConfigs`, but you would need to reread configs using `getConfig` on each getHost function call, not once per file.\nLABEL:", "completions": "alternative solution"}
{"id": 332, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Unlocking with defer means that this lock is still held curing the call to forgetNode(), below, which I see attempts to acquire `f.mu`, which looks dangerous to me.\nLABEL:", "completions": "correctness"}
{"id": 333, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Does anyone still use the cst out of this method? If not consider deleting\nLABEL:", "completions": "necessity"}
{"id": 334, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Line is too long. [97/80]\nLABEL:", "completions": "presentation"}
{"id": 335, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This seems unused.\nLABEL:", "completions": "Necessity"}
{"id": 336, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: @luguanglong , Thanks for the fix, can you re-phrase it to sound better something like \"This OS version is currently un-supported by keadm\"\nLABEL:", "completions": "wording"}
{"id": 337, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: should probably be called `_DeleteFpInfoAttr` because it removes it. Cleaning gives the impression it is still there. I would also move this to the end of the function `GetAtomicWeightsForFingerprint`.\nLABEL:", "completions": "refactoring"}
{"id": 338, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: nit, can we use `VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR` here (granted it isn't else where, maybe worth fixing here or in separate PR)\nLABEL:", "completions": "consistency"}
{"id": 339, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This will need to be updated in the upcase-exercises repo as well.\nLABEL:", "completions": "synchronization"}
{"id": 340, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Think it's worth extracting this to `Exercise#complete?`?\nLABEL:", "completions": "refactoring"}
{"id": 341, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This is still a potentially useful public method - should we remove such methods?\nLABEL:", "completions": "necessity"}
{"id": 342, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I don't understand this change, what is happening here?\nLABEL:", "completions": "understanding"}
{"id": 343, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think its worth stating this is `versionMajor`\nLABEL:", "completions": "documentation"}
{"id": 344, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: rebuild: say loads and merges\nLABEL:", "completions": "terminology"}
{"id": 345, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why was this removed here (also in the other file)? Shouldn't we import them so that the reference in the docs below is interpreted correctly?\nLABEL:", "completions": "correctness"}
{"id": 346, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I'd prefer to have a blank line between the class declaration and its first member. Is it possible?\nLABEL:", "completions": "presentation"}
{"id": 347, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Is it really LEGACY_HELLO if we are using the most up to date HELLO? Perhaps `MONGOS_HELLO` would work here?\nLABEL:", "completions": "naming"}
{"id": 348, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I am afraid this is going to cause problems on Windows where it is not uncommon to have injected threads (CTRL_SHUTDOWN, CTRL_LOGOFF, etc.) we have no privileges to suspend -- and thus retrying will just fail again, and with the new \"synchall failure is fatal and should kill the process\" approach it turns what used to work for us on Windows into process death.\nLABEL:", "completions": "platform compatibility"}
{"id": 349, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: think it should only be in create_dist\nLABEL:", "completions": "organization"}
{"id": 350, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Do you plan to support Pod spec change? Like hostPort is added/removed later after Pod creation?\nLABEL:", "completions": "compatibility"}
{"id": 351, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Is this behavior correct? It used to return `true`, which should map to `dokan.ExistingDir`. Was that previously a bug?\nLABEL:", "completions": "correctness"}
{"id": 352, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: What about just printing an empty list in this case? That would make the output more predictable.\nLABEL:", "completions": "alternative solution"}
{"id": 353, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I looked and couldn't find any usage of `container` in any of the editor component files (js or hbs), so I assume this was used once and didn't get removed?\nLABEL:", "completions": "code context"}
{"id": 354, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I just updated a number of sites using older versions of Roots onto WP 3.6 and this little function change was required. Multiple search bars were displaying when I used the search widget in a widgetized sidebar. Updated the roots_get_search_form as seen in this change resolved it for me!\nLABEL:", "completions": "bug fix"}
{"id": 355, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Fixes test failed in some cases\nLABEL:", "completions": "bug fix"}
{"id": 356, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: what's the prod url for this? just curious. @amirsaber\nLABEL:", "completions": "specialized expertise"}
{"id": 357, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Can you please change this to azkaban.jobs.java.opts?\nLABEL:", "completions": "syntax"}
{"id": 358, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Here is another concatenation which should be updated. Even though `Source:` and the link are essentially separate, it isn't RTL friendly. This would be another good use for `createInterpolateElement` I think so that we wouldn't need to include all of the classnames in the translation string (or extract them to a placeholder). That would allow us to use the `Link` component as well, rather than using its resulting HTML as a string which will be a pain to maintain if we were to make changes to the base `Link` component.\nLABEL:", "completions": "alternative solution"}
{"id": 359, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I would add an overload `GetCancelledZeroTask()` which calls `GetCancelledZeroTask(CancellationToken.None)`. This is cleaner than requiring the caller to pass `default(CancellationToken)` or `CancellationToken.None`.\nLABEL:", "completions": "alternative solution"}
{"id": 360, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Would it be equivalent to check if `chain != nullptr` below? Not suggesting a change, just curious.\nLABEL:", "completions": "code context"}
{"id": 361, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Should probably do `auto this_l (shared_from_this ());` and pass/use that instead of `this`. Same a few other places. IOW, replace both `shared_from_this()` and `this` with `this_l`\nLABEL:", "completions": "alternative solution"}
{"id": 362, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: And here. Please, use `'` for apostrophes in changed strings in this file.\nLABEL:", "completions": "formatting"}
{"id": 363, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: assignments should only be cuddled with other assignments (from `wsl`)\nLABEL:", "completions": "presentation"}
{"id": 364, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Please move this to `block_types.go`.\nLABEL:", "completions": "organization"}
{"id": 365, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: So this is not needed anymore for all attributes?\nLABEL:", "completions": "Necessity"}
{"id": 366, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Happy to get suggestion for better messaging here. Here's what I intended to convey: Something is wrong - the Exception is a hint to what might be the cause The impact of that - tracing wont work.\nLABEL:", "completions": "messaging"}
{"id": 367, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think we can remove this function, right? (duplicate with `ses_starter.py`)\nLABEL:", "completions": "necessity"}
{"id": 368, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: With this fix, I am not even sure we need to overwrite this function.\nLABEL:", "completions": "alternative solution"}
{"id": 369, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why not just import this from `data_transfer`? As a rule copying the same code twice is not a good idea. Also: please run `pylint` on all files in this PR.\nLABEL:", "completions": "alternative solution"}
{"id": 370, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: You've got an absolute path here referencing your home dir :-).\nLABEL:", "completions": "security"}
{"id": 371, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Maybe I should do some sorting so that these properties don't keep moving around...\nLABEL:", "completions": "structure"}
{"id": 372, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Can we keep this test anyway, as it's part of the spec?\nLABEL:", "completions": "Necessity"}
{"id": 373, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Can be removed\nLABEL:", "completions": "Necessity"}
{"id": 374, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: It's a minor quibble I know, but I like having the imports ordered by lengt\nLABEL:", "completions": "presentation"}
{"id": 375, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: It's better to get the charset from context or other setting to let the user override it.\nLABEL:", "completions": "configuration"}
{"id": 376, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: this filename as well needs change\nLABEL:", "completions": "naming"}
{"id": 377, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think we want to remove `omitempty` here\nLABEL:", "completions": "correctness"}
{"id": 378, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: You cannot move this here because it breaks detach. Just call `tty.Close()` before returning the error from start\nLABEL:", "completions": "correctness"}
{"id": 379, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I updated only the implicit roles who needed a update for this new rule to validate.\nLABEL:", "completions": "scope"}
{"id": 380, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: > // Code generated by protoc-gen-go. DO NOT EDIT.\nLABEL:", "completions": "correctness"}
{"id": 381, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: minor: skipOSConfigMetadata, otherwise, the name sounds like a boolean\nLABEL:", "completions": "naming"}
{"id": 382, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: ~~I think lines 65-67 should be moved into this else clause after `type = ...` Else, it is a bit confusing why we check the enclose type validity a second time~~ Nevermind, will do some refactoring, myself. But thanks for \"fixing\" this!\nLABEL:", "completions": "alternative solution"}
{"id": 383, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: `sessions := endpoints.SessionsDTO{}` and using only `sessions` should be simpler.\nLABEL:", "completions": "alternative solution"}
{"id": 384, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: These need to be in the other order to avoid crashing when dcontext == GLOBAL_DCONTEXT (==-1)\nLABEL:", "completions": "correctness"}
{"id": 385, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why not change the other samples?\nLABEL:", "completions": "consistency"}
{"id": 386, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Indentation is mixed up here due to spaces/tabs, I'm guessing.\nLABEL:", "completions": "presentation"}
{"id": 387, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Should we provide a little more context in the error message? Maybe throw in something about what operation was being performed?\nLABEL:", "completions": "error handling"}
{"id": 388, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Project standard is spaces, not tabs. Please fix and then we can merge this.\nLABEL:", "completions": "formatting"}
{"id": 389, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: @hgtw is there anything we're worried about with regards to using this cache? Do we want to do staged testing around expeditions before we merge? Curious your thoughts here\nLABEL:", "completions": "specialized expertise"}
{"id": 390, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: The purpose of this was to allow pushing filters into the manifest files if we ever use a format other than Parquet. I think overall this is a good change because we can add it back later. Just wanted to note why the unused argument was there.\nLABEL:", "completions": "rationale"}
{"id": 391, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think BSON::Decimal128 should always be serialized as Decimal128 regardless of config option.\nLABEL:", "completions": "correctness"}
{"id": 392, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: We should probably just move the `require 'bolt/plan_creator'` in `Bolt::CLI` to `Bolt::Application` so it will already be loaded.\nLABEL:", "completions": "alternative solution"}
{"id": 393, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: >20 [](start = 45, length = 2) Can we override this at runtime? Maybe it should be a command line option with default.\nLABEL:", "completions": "alternative solution"}
{"id": 394, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: can just remove it ?\nLABEL:", "completions": "Necessity"}
{"id": 395, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Better call it `CleanUpMirrorInfo`?\nLABEL:", "completions": "naming"}
{"id": 396, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: @shannonwells is there still something missing here?\nLABEL:", "completions": "specialized expertise"}
{"id": 397, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This could be more indicative of what it is... e.g... `stresstest_time_limit`\nLABEL:", "completions": "naming"}
{"id": 398, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Shouldn't we do a `reader_payload_pool_.reset()` here?\nLABEL:", "completions": "correctness"}
{"id": 399, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I'd prefer the nomenclature less tightly coupled to DRAND throughout. I played with renaming the `drand` package to `beacon` but it was too much noise in this change.\nLABEL:", "completions": "naming"}
{"id": 400, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think I would prefer you declare `self._current_key=None` in the constructor and just return `self._current_key`. That way you can prevent anyone from overwriting `current_key` without needing to use `getattr` here.\nLABEL:", "completions": "alternative solution"}
{"id": 401, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I guess I like the name `mode` okay. I can't think of anything better.\nLABEL:", "completions": "naming"}
{"id": 402, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I would create a new method (NewStepWithDefaultTimeout?) for this purpose because timeout<=0 looks like a hidden logic\nLABEL:", "completions": "alternative solution"}
{"id": 403, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Are these limit changes related?\nLABEL:", "completions": "code context"}
{"id": 404, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Don't you mean `import scapy.consts`?\nLABEL:", "completions": "correctness"}
{"id": 405, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: `ctx` is unused in rollbackPrimary\nLABEL:", "completions": "correctness"}
{"id": 406, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This is not what title says.\nLABEL:", "completions": "correctness"}
{"id": 407, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: a fix applies several fixes? maybe this should simply be `applyToNode`\nLABEL:", "completions": "alternative solution"}
{"id": 408, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: U1000: func `fakeGetOk` is unused (from `unused`)\nLABEL:", "completions": "linting"}
{"id": 409, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Because there is a \"k8s.io/client-go/tools/cache\" below, we can sort out all the \"imports\" here.\nLABEL:", "completions": "organization"}
{"id": 410, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Nit should be using `goimports` to format the import statements with standard libary imports first, new line, followed by non-standard library imports.\nLABEL:", "completions": "formatting"}
{"id": 411, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Do we not have tests for pipeline delete  \nLABEL:", "completions": "testing"}
{"id": 412, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Good that you mention this constraint in the docstring :)\nLABEL:", "completions": "documentation"}
{"id": 413, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: remove this blank?\nLABEL:", "completions": "correctness"}
{"id": 414, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Partitions is misspelled 8 times in this commit, might make sense to fix the spelling for all of those.\nLABEL:", "completions": "correctness"}
{"id": 415, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Please remove this blank line - those are only used to group Python/third-party/qutebrowser imports.\nLABEL:", "completions": "formatting"}
{"id": 416, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: `insecure` is a global variable (from `gochecknoglobals`)\nLABEL:", "completions": "code context"}
{"id": 417, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Same as above (HTTP in upper-case)\nLABEL:", "completions": "presentation"}
{"id": 418, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This is getting repetitive  maybe you could introduce an abstract test case with a `getExpectedUrl($providerReference)` method ?\nLABEL:", "completions": "alternative solution"}
{"id": 419, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I do not think returning `Value{}` is correct here. For example, `reflect.MakeFunc(...).Kind()` would return `reflect.Invalid` instead of `reflect.Func`. Therefore, I think this should panic instead.\nLABEL:", "completions": "correctness"}
{"id": 420, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Does this work for Custom Elements? iirc we're lacking test cases for them. /cc @andrewiggins @developit\nLABEL:", "completions": "specialized expertise"}
{"id": 421, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Same change just above?\nLABEL:", "completions": "duplication"}
{"id": 422, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I suppose `apploader.js` isn't used by WebWorkers. So `self` will always be `window` here.\nLABEL:", "completions": "code context"}
{"id": 423, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Since this var is no longer defined we should remove the `if skip_targets.any?` bit below.\nLABEL:", "completions": "alternative solution"}
{"id": 424, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think we should `return arn` as a fallback at the end of this function (otherwise the `['Resource']` entry below could become `None`).\nLABEL:", "completions": "alternative solution"}
{"id": 425, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why session is started at all, if you need to shut it down e.g. DI should launch noopSession\nLABEL:", "completions": "rationale"}
{"id": 426, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: nit: can we rename the interface to `wsFileDeleter`\nLABEL:", "completions": "naming"}
{"id": 427, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why target cannot be external endpoints?\nLABEL:", "completions": "code context"}
{"id": 428, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: We use a suffix \".AUTOCREATED\" for configsets, maybe we can use the same here?\nLABEL:", "completions": "alternative solution"}
{"id": 429, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This one won't be disposed. Should be (something like) `using var openTelemetry = OpenTelemetrySdk.EnableOpenTelemetry(` no?\nLABEL:", "completions": "syntax"}
{"id": 430, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why this is in the diff?\nLABEL:", "completions": "Necessity"}
{"id": 431, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: How is status determined? When the user calls CloudBackupCreate( src_volume_id ) they can then call CloudBackupStatus( src_volume_id ) Is there something similar for this new API?\nLABEL:", "completions": "code context"}
{"id": 432, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: We could pass `excessDomChildren` to `options._catchError` and only do this if an error-boundary catches the error. Not entirely sure if that's better.\nLABEL:", "completions": "alternative solution"}
{"id": 433, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: In php8 named parameters were introduced and now it is required to match called method parameter name when setting parameters by array destructing or call_user_func_array() etc.\nLABEL:", "completions": "language update"}
{"id": 434, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: If instead we had `B3.extractSingleHeader` and `B3.extract` return a bool value as a second return value, we could avoid the byte array comparison in `TraceID.IsValid`. Did you consider that alternative?\nLABEL:", "completions": "alternative solution"}
{"id": 435, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think this is more of a semantic difference than a typo - `weiter hinzufgen` is like `continue adding` whereas `weitere hinzufgen` is like `add more`. I think it makes sense to change it though  \nLABEL:", "completions": "correctness"}
{"id": 436, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: nit: 200 is superfluous\nLABEL:", "completions": "correctness"}
{"id": 437, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This is testing `unreserved keyword`\nLABEL:", "completions": "correctness"}
{"id": 438, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: paramsNatOrigin doesn't include sUVtoST. I would just remove that definition for now\nLABEL:", "completions": "alternative solution"}
{"id": 439, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: It feels like the test should be waiting for the prefetcher to shut down, but I don't have a great reason why other than that it might be confusing for debugging if there are still goroutines from old prefetchers lying. But I guess since `TogglePrefetcher(false)` doesn't actually set the prefetcher to nil, the queue shutdown method will still end up waiting for the shutdown to finish. If that sounds right, nevermind me.\nLABEL:", "completions": "code context"}
{"id": 440, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: AWS Identity and Access Management (IAM)\nLABEL:", "completions": "external resource"}
{"id": 441, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: As a long term thing, would it make sense to move the resource names as keys under the requirements map?\nLABEL:", "completions": "alternative solution"}
{"id": 442, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: That doesn't fix the whole problem. The issue lays in this line right here, not the one above. There are two problems with this line: 1. It finds things that aren't cells in the table 2. if it doesn't find anything, it shouldn't return empty here, but continue down to look for row/ column headers.\nLABEL:", "completions": "code context"}
{"id": 443, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I am pretty sure that this is infinite recursion as getAllProjects returns the project itself.\nLABEL:", "completions": "logic"}
{"id": 444, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Something I didn't catch before I merged this PR, is the hyphenated constant a problem? E.g. should \"data-lists\" be \"data_lists\"? @paulkaplan\nLABEL:", "completions": "syntax"}
{"id": 445, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Can you write the test as `if not (conf.use_winpcapy or conf.use_pcap or conf.use_dnet):`\nLABEL:", "completions": "alternative solution"}
{"id": 446, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: we have to include foreign assets on the repository directly because they don't belong to a job? This seems very awkward... Is this a step towards the job-less assets on the repository? Did you consider having `build_asset_job` take in a set of foreign assets instead? I suppose we would then need to subclass it to be a more special `AssetJobDefinition` that can keep track of them.\nLABEL:", "completions": "alternative solution"}
{"id": 447, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: `-Wstringop-truncation` is a new kind of error detector introduced in GCC 8. As for this patch, these are two false-positives though.\nLABEL:", "completions": "compiler warnings"}
{"id": 448, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Can we port this error msg to v2 too? This one is better, as it explicitly states what sources are allowed.\nLABEL:", "completions": "compatibility"}
{"id": 449, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: The convention so far has been to require directly from the defining file (in this case `../../read_preference') . I think the concern has been mostly about the potential for circular dependency cycles\nLABEL:", "completions": "dependency"}
{"id": 450, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I suggest expanding dims here to simplify the formatting.\nLABEL:", "completions": "presentation"}
{"id": 451, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why do you need to specify the kinto prefix here?\nLABEL:", "completions": "code context"}
{"id": 452, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: The `!r` is unnecessary.\nLABEL:", "completions": "correctness"}
{"id": 453, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I didn't see existing tests for this `OpenBucketURL`. Not sure if it's easy to do without mocking these `opener` calls.\nLABEL:", "completions": "testability"}
{"id": 454, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Should we default to `true` ?\nLABEL:", "completions": "Necessity"}
{"id": 455, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: File is not `goimports`-ed (from `goimports`)\nLABEL:", "completions": "formatting"}
{"id": 456, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Shouldn't these options also include `@babel/preset-env`? Also I see you set `babelrc` to `false`, could we rely on our existing `.babelrc` file? Feels like some duplicate configuration otherwise.\nLABEL:", "completions": "configuration"}
{"id": 457, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Nit: We can use `%s` since `disconnectReason` is a string.\nLABEL:", "completions": "syntax"}
{"id": 458, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think it's better to create a new example\nLABEL:", "completions": "alternative solution"}
{"id": 459, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: The stages are correct, but the more forgiving `kAttachmentRasterOrder` should be used, based on a review of the spec. That should give the same effect of suppressing the false positive conflict between the DEPTH R/W and resolve. > End-of-subpass multisample resolves are treated as color attachment writes for the purposes of synchronization. This applies to resolve operations for both color and depth/stencil attachments. That is, they are considered to execute in the VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT pipeline stage and their writes are synchronized with VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT. Synchronization between rendering within a subpass and any resolve operations at the end of the subpass occurs automatically, without need for explicit dependencies or pipeline barriers.\nLABEL:", "completions": "technical accuracy"}
{"id": 460, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: To be consistent, I think it should actually just be a single `-`\nLABEL:", "completions": "consistency"}
{"id": 461, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: this seems extraneous.\nLABEL:", "completions": "Necessity"}
{"id": 462, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Ah, I see here that 'LongDomain' is defined as something that contains a subdomain segment that is `maxLengthOfDomainSegment` long (which I think is 63 characters) - I don't think any public ACME servers/Let's Encrypt's staging environment has a restriction on this?   if it does, and the 'pebble' based ACME server does not, then Pebble needs modifying to also fail in these cases as it aims to replicate the ACME RFC as closely as possible\nLABEL:", "completions": "code context"}
{"id": 463, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think you need `-y` here to prevent a user confirmation prompt\nLABEL:", "completions": "correctness"}
{"id": 464, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Repeating: I don't think this should be a core-wide global var. This should be isolated to arch/x86 or at least arch/, maybe inside getter/setters as mentioned above.\nLABEL:", "completions": "scope"}
{"id": 465, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: right URL is like in cmdrunner, using search.maven .org\nLABEL:", "completions": "correctness"}
{"id": 466, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: The link to valid syntax is not really applicable for NET2_1, right?\nLABEL:", "completions": "code context"}
{"id": 467, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Shouldn't it be more specific, like \"gcppubsub supports all UTF-8 strings\"?\nLABEL:", "completions": "accuracy"}
{"id": 468, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Everything in this class is SolrCloud-related, not legacy replication\nLABEL:", "completions": "refactoring"}
{"id": 469, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Could just assign directly and eliminate the `newval` var.\nLABEL:", "completions": "alternative solution"}
{"id": 470, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: ... with the name of the affected package, or \"all\", followed by a colon,...\nLABEL:", "completions": "syntax"}
{"id": 471, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: We'll want to remove this one if we make the assembly version constant.\nLABEL:", "completions": "alternative solution"}
{"id": 472, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Can we have a single function here that uses the same subscribers and just changes meta based on context?\nLABEL:", "completions": "alternative solution"}
{"id": 473, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: where would ` static startup_kernel_loader skl;` be instantiated? if it's not instantiated anywhere should this be removed?\nLABEL:", "completions": "code context"}
{"id": 474, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think we should move those util functions that work with drag-drop to @uppy/utils, so they can be shared (maybe later) with drag-drop plugin? Otherwise it will continue to depend on drag-drop module.\nLABEL:", "completions": "refactoring"}
{"id": 475, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Migrate the spec.Labels to locator.Labels ?\nLABEL:", "completions": "refactoring"}
{"id": 476, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: The test case already existed but it never tested properly because of the conditional in the test.\nLABEL:", "completions": "correctness"}
{"id": 477, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I'm okay with this, but I don't see a lot of benefit to removing unnecessary parens. If extra parens make something more readable (like this) or clarify order of operations even when matching the default, I would say we should keep them.\nLABEL:", "completions": "readability"}
{"id": 478, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: @sarowe why was this volatile? It's fishy to see this as the only volatile field.\nLABEL:", "completions": "code context"}
{"id": 479, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: template is not correct?\nLABEL:", "completions": "correctness"}
{"id": 480, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Rename the registies to `BBOX_ASSIGNERS` and `BBOX_SAMPLERS` to avoid ambiguity. There is also a registry for dataset sampler.\nLABEL:", "completions": "naming"}
{"id": 481, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This is no longer stubbed on every test. Perhaps it should be, and should be unstubbed in the single case that it matters.\nLABEL:", "completions": "alternative solution"}
{"id": 482, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This seems much simpler! I'm not sure I follow what you mean by the threading part... Also tests are not liking this constant. Might need a require or to fully qualify this.\nLABEL:", "completions": "debugging"}
{"id": 483, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Convention is \"FIXME: i#2144\" or \"XXX: i#2144\"\nLABEL:", "completions": "conventions"}
{"id": 484, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This should probably be a property instead of a method.\nLABEL:", "completions": "alternative solution"}
{"id": 485, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: do we need to consider setting the `state` as well? If so, lot of changes might be required, like, setting to 'Reconciling' in upgrade code, setting to 'error' or 'reconciled' in volumeReconciler functions.\nLABEL:", "completions": "code context"}
{"id": 486, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Line is too long. [82/80]\nLABEL:", "completions": "presentation"}
{"id": 487, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Add blank line below license header.\nLABEL:", "completions": "formatting"}
{"id": 488, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I'm not clear on whether this really should be the right behavior. Basically we're saying that a replace table will keep the existing location (as opposed to using defaults). I suspect we don't have create or replace with location semantics, but this is making some assumptions that a replacement is somehow the same as the old. If we were to go with id based pathing convention, this wouldn't work. I don't think this is an issue at this point, but it might make sense to push this down to the location provider.\nLABEL:", "completions": "code context"}
{"id": 489, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Just run a global replacement for all `executionproto`.\nLABEL:", "completions": "refactoring"}
{"id": 490, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: @AutomatedTester @davehunt thoughts on a new keyword argument?\nLABEL:", "completions": "specialized expertise"}
{"id": 491, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Should line 47 be OPAE_ERR?\nLABEL:", "completions": "correctness"}
{"id": 492, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Not necessary, just write `time.Time{}`\nLABEL:", "completions": "alternative solution"}
{"id": 493, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: As these two strings simply get concatenated for the docs, there's a space missing after the dot here.\nLABEL:", "completions": "syntax"}
{"id": 494, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: What about integrations where we don't plug ourselved on OnMethodBegin?\nLABEL:", "completions": "code context"}
{"id": 495, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: shouldn't **call** return a boolean?\nLABEL:", "completions": "correctness"}
{"id": 496, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: ViewModel classes should not expose any classes from framework.model.\nLABEL:", "completions": "security"}
{"id": 497, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: how would you feel about keeping these tests to be more explicit and having them `assert not _validate...`? or is your view that that is too duplicative of the tests in `test_evaluator.py`?\nLABEL:", "completions": "alternative solution"}
{"id": 498, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why do we use the `winrm_nodes` variable here and not the string `\"winrm_nodes\"` as we were using before?\nLABEL:", "completions": "rationale"}
{"id": 499, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: why update Copyright ?\nLABEL:", "completions": "Necessity"}
{"id": 500, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Does this mean we cannot update statistics with sampling on a table with LOB columns?\nLABEL:", "completions": "code context"}
{"id": 501, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Look good, but I think a `[flags]` enum would be more future proof? Although i'm not sure if a flags-enum is working from the XML config. What do you think?\nLABEL:", "completions": "alternative solution"}
{"id": 502, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Since I believe state will never be anything other than 'expanded' or collapse, you can rewrite this as follows: `return row.treeNode.state === 'expanded' ? 'ui-grid-icon-minus-squared' : 'ui-grid-icon-plus-squared'; `\nLABEL:", "completions": "alternative solution"}
{"id": 503, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: the latter part can go but isn't the first part of this still sound -- that we assume \"id\"?\nLABEL:", "completions": "alternative solution"}
{"id": 504, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why is the escaping of @ and $ removed?\nLABEL:", "completions": "rationale"}
{"id": 505, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Nit: `Http` is redundant in this interface's name.\nLABEL:", "completions": "naming"}
{"id": 506, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: what if I set SynchronizableEntitiesPrefix to \"a/b/c/d\" in config?\nLABEL:", "completions": "code context"}
{"id": 507, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: nit: This error message doesn't mention that the path is a directory, maybe \"Dockerfile path is a directory:%s, please provide path to file.\"\nLABEL:", "completions": "correctness"}
{"id": 508, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This is done automatically, you can skip it next time ;)\nLABEL:", "completions": "automation"}
{"id": 509, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This is needed in `set_value` because of `:open-editor` (you could open an editor, close the tab, then close the editor). I don't think it makes any sense to have it here?\nLABEL:", "completions": "Necessity"}
{"id": 510, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Perhaps we can assume that profiling is enabled if ProfilingPort is set? And/or configure a default port and frequency, so we don't have to set three config vars every time?\nLABEL:", "completions": "alternative solution"}
{"id": 511, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This nil check won't correctly handle the case where forward_ssh_agent is set to false - it won't be nil but it should still not be set.\nLABEL:", "completions": "correctness"}
{"id": 512, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: We could avoid passing proto since threshold isn't needed.\nLABEL:", "completions": "alternative solution"}
{"id": 513, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This route excluding needed for reconnect only when one connection is lost and we trying to establish another. I was thinking to make 2 separate flags for killswitch and reconnect enabling. This way we can keep killswitch working, but we don't need these routes excluded.\nLABEL:", "completions": "alternative solution"}
{"id": 514, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: why can this modification avoid crash?\nLABEL:", "completions": "rationale"}
{"id": 515, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This looks good -- signing out the user if the current user is disabled\nLABEL:", "completions": "correctness"}
{"id": 516, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: The line exceeds 120 characters.\nLABEL:", "completions": "presentation"}
{"id": 517, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Let's go ahead and change \"Site\" to \"Project\", since that's the path we've chosen. One less thing to alter in the other issue.\nLABEL:", "completions": "refactoring"}
{"id": 518, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I am for this change iff we are sure the information is no longer helpful. I think this could still be valuable for certain scenarios, wbu?\nLABEL:", "completions": "necessity"}
{"id": 519, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I thought we decided on using the latest active version and not the one which is max ramped up.\nLABEL:", "completions": "version control"}
{"id": 520, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: can we update this to a `log.Warningf`?\nLABEL:", "completions": "alternative solution"}
{"id": 521, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: can we get something emitted in the logs on non-zero exits to trace back to for problems like this failing on the first invocation?\nLABEL:", "completions": "logging"}
{"id": 522, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Do we need `schema manager` at here ?\nLABEL:", "completions": "Necessity"}
{"id": 523, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This won't work because of the permissions on the directory when this is included as a library. But, we may be able to do this. The key would be wrapping this command with either a script or a go binary that ensures the current directory is writable. If the current directory is not writable, it would attempt to make it writable so that we could write out the produced binary. But I'm not sure if that will influence the hash that gets produced for `go.sum` since I am not sure how that is calculated. Alternatively, we can choose a place in `/usr/local` or choose a location that is writable in the go cache and use that. I'll give that a try since it might be needed for the ARM builds if we choose to only include `x86_64` precompiled binaries in the module.\nLABEL:", "completions": "specialized expertise"}
{"id": 524, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Correct me if I'm wrong, but is this necessary? Why not just use the value returned by `interpreter.Eval` and not mess with the scope? `interpreter.Eval` will return any produced side effects. This means TableObjects as well as any value resulting from any expression statements.\nLABEL:", "completions": "alternative solution"}
{"id": 525, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This service is global per namespace, not per Alertmanager/Prometheus/ThanosRuler instance. So this approach won't work. But maybe I missing out something, can you describe your use case here?\nLABEL:", "completions": "specialized expertise"}
{"id": 526, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Do we need this default? Since we aren't using a sql.NullBool or *bool, an unset column will be interpreted as `false` already... We don't set a default on our other bool fields (e.g. entry admin and downstream columns).\nLABEL:", "completions": "necessity"}
{"id": 527, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: thanks for moving these over. makes more sense for them to be in the exports_helper\nLABEL:", "completions": "organization"}
{"id": 528, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: That import now isn't needed anymore\nLABEL:", "completions": "unnecessary code"}
{"id": 529, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Can you update the `Usage` to be an absolute path as well? Something like `/path/to/firebug.xpi`\nLABEL:", "completions": "syntax"}
{"id": 530, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This class is missing the `MvxPlugin` attribute\nLABEL:", "completions": "correctness"}
{"id": 531, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: What if `wxLang` is returned `None` from `getWxLang`\nLABEL:", "completions": "code context"}
{"id": 532, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Please don't do changing like this unless it _**really**_ cares. BTW. Please look around to infer our naming conventions.\nLABEL:", "completions": "conventions"}
{"id": 533, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This is in test code: understanding what we're doing is important in this context.\nLABEL:", "completions": "correctness"}
{"id": 534, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: prob should still have an example that has multiple option names even if you have to make it up. Or maybe we don't need this method?\nLABEL:", "completions": "Necessity"}
{"id": 535, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I believe respond_to whitelists the formats passed to the block so if we don't want to display html, we can just remove the line format.html...\nLABEL:", "completions": "alternative solution"}
{"id": 536, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: stylistic nitpick: I _feel_ like we've largely shown errors like this as \"error: \" vs. \"error=\". IMO colon/space reads better.\nLABEL:", "completions": "presentation"}
{"id": 537, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: We could put this implementation in `RTPSWriter::create_change_pool` and avoid an extra function.\nLABEL:", "completions": "alternative solution"}
{"id": 538, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: should this file ends with _test.go?\nLABEL:", "completions": "naming"}
{"id": 539, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: It's because of this change. `ss` was unused and it made sense in the program. However I haven't read the IPv6 RFC so I'm unsure of what it does\nLABEL:", "completions": "code context"}
{"id": 540, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: \"Flatten\" is a verb, so I'd probably go with `flattenedIndex` as a variable name here.\nLABEL:", "completions": "naming"}
{"id": 541, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: If it can only be called once, perhaps a more appropriate name is something like `setMaskables`? `addX` sounds like you can add many `X`es by calling it many times\nLABEL:", "completions": "naming"}
{"id": 542, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Nodecfg should be downloading from a private bucket -- these shouldn't be for public consumption. In general these should be generic and expect environment to provide appropriate credentials and bucket.\nLABEL:", "completions": "security"}
{"id": 543, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Could you please end the file with an empty line?\nLABEL:", "completions": "formatting"}
{"id": 544, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This is an incorrect change. The dialect spoken is an important part of the handshake and should be communicated to users.\nLABEL:", "completions": "correctness"}
{"id": 545, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Can this be non-exported to avoid direct use? It would be a breaking change but using previous package version would work.\nLABEL:", "completions": "alternative solution"}
{"id": 546, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Nit: this is just `return gcerrors.Code(err)`, isn't it?\nLABEL:", "completions": "correctness"}
{"id": 547, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I don't know where this came from, but it's not a good idea. This is actually timing out after 5 rounds, not 5 blocks. 5 consecutive null blocks won't be that uncommon. Also when testing with a short block time, this is a very short duration that can contribute to flaky tests.\nLABEL:", "completions": "correctness"}
{"id": 548, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: In Python 3 when pickling or unpickling objects, the file needs to be opened as binary so that no text encoding/decoding takes place. So for any open calls around pickle loads or dumps, the mode for reading must be rb and the mode for writing must be wb.\nLABEL:", "completions": "syntax"}
{"id": 549, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: did you remove **params.qstring.method** intentionally? if so why?\nLABEL:", "completions": "rationale"}
{"id": 550, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: What is the current default? Is that inconsistent across uses and that's why this is null?\nLABEL:", "completions": "code context"}
{"id": 551, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why did we make this change? How come it wasn't an issue before\nLABEL:", "completions": "rationale"}
{"id": 552, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Can you tighten scope by moving to of these variables? i.e. Move to ~4372?\nLABEL:", "completions": "scope"}
{"id": 553, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Nice to see this `dataverse.rserve.password` fix rolled in.\nLABEL:", "completions": "correctness"}
{"id": 554, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: How about the following faster alternative that doesn't need `strlen()` at all: if (*tmp_optarg == '\\0' || *endptr != '\\0') { fprintf(...) ... This would treat the bus argument as invalid if it's either empty (`tmp_optarg` points to '\\0') or invalid (`endptr` points to something other that a '\\0'). Actually, the existing code would accept an empty argument and set the bus to `0`, so if (*endptr != '\\0') { fprintf(...) ... would be enough. The check for an empty argument doesn't hurt, though.\nLABEL:", "completions": "alternative solution"}
{"id": 555, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I could be missing something here, but the `from` and `cc` are the same. On the test email sent to gatewaycommunicator, these values are different.\nLABEL:", "completions": "correctness"}
{"id": 556, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I'm honestly scared because act is now a hard requirement for useEffect which it wasn't before... This could break some tests :(\nLABEL:", "completions": "risk assessment"}
{"id": 557, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Could use election from `info_a.election`, or is this deliberate?\nLABEL:", "completions": "correctness"}
{"id": 558, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: looks like this should be `return array(LegacyFormHelper::getType('form'));`\nLABEL:", "completions": "syntax"}
{"id": 559, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Maybe it would simpler to ignore opt_port if type !== 'number'?\nLABEL:", "completions": "alternative solution"}
{"id": 560, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Where was `name` being declared before?\nLABEL:", "completions": "code context"}
{"id": 561, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: nit: use `corev1.ConditionUnknown`\nLABEL:", "completions": "syntax"}
{"id": 562, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: You also need to add a similar check on line 992, there's another place where we check `length === 24`\nLABEL:", "completions": "consistency"}
{"id": 563, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: nit: can extract the voteProvider as a local variable\nLABEL:", "completions": "alternative solution"}
{"id": 564, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: [0] Not suggesting you change it here, but....kindof weird that there's just not an `assertFuncNotEquals`\nLABEL:", "completions": "alternative solution"}
{"id": 565, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: why are we passing 'registryAddress' here? We probably should construct it together with bc. Registry is not something that change?\nLABEL:", "completions": "rationale"}
{"id": 566, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: `.` at the end of the sentence\nLABEL:", "completions": "presentation"}
{"id": 567, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: wouldn't it be useful to split this into an error metric for the timing?\nLABEL:", "completions": "alternative solution"}
{"id": 568, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Not sure if this is good enough. Each generator will have it's own unit test anyway. Ideally, I think I'd want to test that each generator in the yml is actually a valid generator...\nLABEL:", "completions": "testing"}
{"id": 569, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: line is 138 characters\nLABEL:", "completions": "formatting"}
{"id": 570, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Nit: I would leave `Wire` out of the description; if you use this without wire you can still use it.\nLABEL:", "completions": "clarity"}
{"id": 571, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Nit: each field can be on a separate line to make it visually easier to read.\nLABEL:", "completions": "presentation"}
{"id": 572, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Do we still have these files? Shouldn't we remove these?\nLABEL:", "completions": "clean-up"}
{"id": 573, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: A lot of things to do with constants seemed to move since the original commit, so I stuck this here, Is there a better place for it?\nLABEL:", "completions": "placement"}
{"id": 574, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: is 10 too small compared to 1000? consider sync chan is unicast only (vs block chan is broadcast + unicast), i would say use 200~400 for BlockSyncChanSize my concern is that this would potentially slowdown sync speed of full-node\nLABEL:", "completions": "performance"}
{"id": 575, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: A full parse of the plan here on listing the plans will be expensive from both a computation and IO perspective.\nLABEL:", "completions": "optimization"}
{"id": 576, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: These constants use the `_PIN` suffix, while the other constants don't use it. I'm not sure what is best, but I would prefer to keep this consistent. Do you have an opinion on which it should be (with or without suffix)?\nLABEL:", "completions": "consistency"}
{"id": 577, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Hmm... this feels like discovery should come first. perhaps `--discovery-dns-url`? @NicolasMassart any opinions on this or ideas on who it should be run by?\nLABEL:", "completions": "specialized expertise"}
{"id": 578, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: why is this needed?\nLABEL:", "completions": "Necessity"}
{"id": 579, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I wonder if it'd be possible to autogenerate a key from the name within this function if one is not provided explicitly, rather than having all the callsites pass both the name and key (and usually as the same value)? Might give us a good place to implement a `name->key` function that isn't 1:1.\nLABEL:", "completions": "alternative solution"}
{"id": 580, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: @adriancole I do not see a change in the thrift file. Are there unit tests verifying that this manual serialization is compatible with the native Thrift serialization done by classes generated from `.thrift` IDL file?\nLABEL:", "completions": "testing"}
{"id": 581, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: spelling (variable name, all three changes)\nLABEL:", "completions": "correctness"}
{"id": 582, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I believe you meant \"specify `desiredUID` and `desiredRole`\"?\nLABEL:", "completions": "correctness"}
{"id": 583, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Please follow the import style, move it to its similar group\nLABEL:", "completions": "organization"}
{"id": 584, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Do we really need these? This is expanding on an API that we're about to do work on with the error stuff @kriskowal\nLABEL:", "completions": "necessity"}
{"id": 585, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: passwordModificationTime is no longer used - did the change drop a time check that should be restored? Or should the param get dropped from the methods?\nLABEL:", "completions": "necessity"}
{"id": 586, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Would it break here without trim? If so, can we do trim in Startup.cs so we don't need to add this code to every parser?\nLABEL:", "completions": "alternative solution"}
{"id": 587, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Since we're using Logrus, probably best to use `Infof` to avoid confusion (Logrus' Printf behaves differently to the built in one)\nLABEL:", "completions": "correctness"}
{"id": 588, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Hm, this looks like a change that should go upstream as well.\nLABEL:", "completions": "upstream"}
{"id": 589, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: let's keep ActionByActionHash and delete getActionByActionHash\nLABEL:", "completions": "alternative solution"}
{"id": 590, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: please use return type\nLABEL:", "completions": "syntax"}
{"id": 591, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This is deliberately at this level.\nLABEL:", "completions": "correct understanding"}
{"id": 592, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I'm going to go ahead and undo this change, I don't think it was intentional.\nLABEL:", "completions": "revert"}
{"id": 593, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: > specialised This isn't a typo in my neck of the woods  \nLABEL:", "completions": "regionalism"}
{"id": 594, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: will change to `storage_target`\nLABEL:", "completions": "naming"}
{"id": 595, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This would be better as `cls.securitycenter_client`, to match what is being instantiated.\nLABEL:", "completions": "naming"}
{"id": 596, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Could we have this initialization as part of the initialize method?\nLABEL:", "completions": "alternative solution"}
{"id": 597, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This line should be removed as editController is not used from this context anymore.\nLABEL:", "completions": "code removal"}
{"id": 598, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This is correct in concept but the method signature doesn't really communicate the same thing. In other words, if the function produces an output table where is it? Its not on the function signature. Can you explain where the output table is created?\nLABEL:", "completions": "code context"}
{"id": 599, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: For insurance, it's best not to take it directly\nLABEL:", "completions": "security"}
{"id": 600, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: change 'value' to keysToSend, here and in other references in this commit. 'value' implies the user is getting the value of the element, rather than just the keys we're sending to it.\nLABEL:", "completions": "naming"}
{"id": 601, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: is the plan to fully migrate to boltdb and then remove the state save here?\nLABEL:", "completions": "timeline"}
{"id": 602, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This should be `output.colorBright`. Unless I'm missing some reason for adding a new theme variable.\nLABEL:", "completions": "naming"}
{"id": 603, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: nit: I wonder if these should be moved down to where version is defined, just to keep them all in the same place.\nLABEL:", "completions": "organization"}
{"id": 604, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Is this supported by every implementation of Java (and Android)? Should it be conditional upon `gen_nullable`?\nLABEL:", "completions": "compatibility"}
{"id": 605, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: @briri Thanks! I just caught this too updating my feature branch\nLABEL:", "completions": "collaboration"}
{"id": 606, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think you should move this block (and the `envpw := os.Getenv(\"RCLONE_CONFIG_PASS\")`) right to the start of the function, then we can remove the duplicate code below\nLABEL:", "completions": "alternative solution"}
{"id": 607, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Is this only to set the node to draining?   I think we can do that inside `Before` or something?\nLABEL:", "completions": "alternative solution"}
{"id": 608, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This should have been moved up above this inner `try` because the log message in the `catch` block does not apply to this.\nLABEL:", "completions": "code flow"}
{"id": 609, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Do we expect people to use PlanResult directly?\nLABEL:", "completions": "usability"}
{"id": 610, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Maybe we should call this something like `errToReturn`?\nLABEL:", "completions": "naming"}
{"id": 611, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: should calculate numEpochIn1Year = xxx and <= fairBankEpochNum+numEpochIn1Year a.foundationBonusLastEpoch just happens to be equal to 1 year now, but should not count on that\nLABEL:", "completions": "correctness"}
{"id": 612, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I wasn't sure if the content type needed to be removed from both the `default` and `usemap` objects - I'm not sure how usemap is used.\nLABEL:", "completions": "code context"}
{"id": 613, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Duplication of line 28 Please refer your tox -e flake8 It seems that XStrField, XShortField, FieldLenField are not used\nLABEL:", "completions": "correctness"}
{"id": 614, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I don't really understand the `self._file_model.index(path)` as parent here - you use `self._root_index` for `rowCount` above, so wouldn't the parent here need to be `self._root_index` as well?\nLABEL:", "completions": "code context"}
{"id": 615, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Do we want validation somewhere that max >= min? Or simply treat the max < min case as ignoring max?\nLABEL:", "completions": "correctness"}
{"id": 616, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: :+1: that's a easier example :)\nLABEL:", "completions": "feedback"}
{"id": 617, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: If an external module decorates this interface, such a change will cause it to generate an error\nLABEL:", "completions": "compatibility"}
{"id": 618, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Oh ha hah, FNM_PERIOD worked out nicely there. Points for co-opting a file system convention.\nLABEL:", "completions": "creativity"}
{"id": 619, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: wrong grouping. As you can tell from the other files, we put system packages in the first group, the 3rd party packages in the second group, and our own packages in the third group.\nLABEL:", "completions": "organization"}
{"id": 620, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Is `o.name` always set here?\nLABEL:", "completions": "code context"}
{"id": 621, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Can this line be removed, as `SteadyStateDependencies` isn't updated anywhere? Also do we need to check the `TransitionDependencySet` here?\nLABEL:", "completions": "Necessity"}
{"id": 622, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: `plan.present?` and `has_active_subscription?` are equivalent. We can drop this change, while leaving the one on `app/controllers/application_controller.rb`.\nLABEL:", "completions": "alternative solution"}
{"id": 623, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: No need for this, as pylint already only turns things off for this function and it's needed for the entire function.\nLABEL:", "completions": "Necessity"}
{"id": 624, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: L171 needs to be modified too?\nLABEL:", "completions": "code context"}
{"id": 625, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why do you compare by nodeid? Simply saying d == e should be enough. Unless we have to objects in memory with the same nodeid. If that is so, something went really wrong.\nLABEL:", "completions": "correctness"}
{"id": 626, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: configs/pvt/retinanet_pvt_t_fpn_1x_coco.py --> configs/pvt/retinanet_pvt-t_fpn_1x_coco.py\nLABEL:", "completions": "syntax"}
{"id": 627, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Nit, this could be json:\",omitempty\"\nLABEL:", "completions": "alternative solution"}
{"id": 628, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: It's kinda funny to read `s.Image.Image` I wonder why it resulted to this way. What would it take to refactor to just `s.Image`?\nLABEL:", "completions": "refactoring"}
{"id": 629, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: nit: I like the idea! can we instead change the tag to `integration-remote` to be more specific? I feel like it's possible for us to use the `deploy` build tag for possibly another scenario\nLABEL:", "completions": "alternative solution"}
{"id": 630, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Copy and paste error here. Edit: Also missing commas here and in other Perl croaks between some parameters and not others.\nLABEL:", "completions": "syntax"}
{"id": 631, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: stateRoot or maybe ParentHeader would make more sense from API point of view?\nLABEL:", "completions": "naming"}
{"id": 632, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Are you sure that this is no longer needed?\nLABEL:", "completions": "Necessity"}
{"id": 633, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Would it help to use SCAN_COLUMNS as base to build SCAN_WITH_STATS_COLUMNS e.g like so `SCAN_WITHSTATS_COLUMNS = ImmutableList.<String>builder().addAll(SCAN_COLUMNS).add(\"value_counts\",....).build()` ?\nLABEL:", "completions": "alternative solution"}
{"id": 634, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: `ctx` is unused in ReportStat\nLABEL:", "completions": "correctness"}
{"id": 635, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: We don't want to add boost as a dependency when building the Thrift compiler. Sorry.\nLABEL:", "completions": "Dependency"}
{"id": 636, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: It's not printing the range. Also I think it's useful to print a warning above stating that the minimum change is -1000.\nLABEL:", "completions": "correctness"}
{"id": 637, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: if name is empty will this become enumerate ? (and cause the unmarshal to fail ?)\nLABEL:", "completions": "correctness"}
{"id": 638, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: How about including a flash message that explains the exercises are only available to subscribers of X plan?\nLABEL:", "completions": "feature request"}
{"id": 639, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: You should also call `e.accept()` and `return` so the key press isn't processed further (as we're leaving insert mode anyways).\nLABEL:", "completions": "logic"}
{"id": 640, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Freeze mutable objects assigned to constants.\nLABEL:", "completions": "security"}
{"id": 641, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Hmm, this feels hacky. Maybe good enough if it makes the test more stable, but why is timing even an aspect here, since below it should wait for these two things anyway?\nLABEL:", "completions": "rationale"}
{"id": 642, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Do we want this on by default, or an opt-in (e.g. via some config while add the instrumentation)? I guess a more general question is - what's the bar for the default vs opt-in tags.\nLABEL:", "completions": "feature"}
{"id": 643, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: `status` is just one of the features, named as status is not suitable.\nLABEL:", "completions": "naming"}
{"id": 644, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: There is an option to hide the subscriptions list from the sidebar. If it is hidden, the filter text should not be displayed.\nLABEL:", "completions": "logic"}
{"id": 645, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I'd like for all of this to be dynamically configurable at some point, but it doesn't have to be in this PR. Can add it to the future SIP or create a separate JIRA for it, as you think would be appropriate.\nLABEL:", "completions": "scope"}
{"id": 646, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: move the constructor to down the `namespace`\nLABEL:", "completions": "structure"}
{"id": 647, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Nit: ending with a '.' looks consistent with the fields around it.\nLABEL:", "completions": "presentation"}
{"id": 648, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Audit log will not have a warning about they are using a deprecated path, is it something we must care about?\nLABEL:", "completions": "security"}
{"id": 649, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think you also want to update the condition to add ` || impl.Visibility == TypeMemberVisibility.FamilyOrAssembly`.\nLABEL:", "completions": "alternative solution"}
{"id": 650, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: `DepositToRewardingFundBaseGas` is a global variable (from `gochecknoglobals`)\nLABEL:", "completions": "correctness"}
{"id": 651, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: What do you think of \"operations\"?? Also what do these emojis look like on Linux??\nLABEL:", "completions": "specialized expertise"}
{"id": 652, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I like the word \"give\" here. Feels like I'm giving a gift to my team.\nLABEL:", "completions": "readability"}
{"id": 653, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Is it possible to use `np.random` module instead?\nLABEL:", "completions": "alternative solution"}
{"id": 654, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: ``default=None`` implies ``allow_None`` so ``allow_None`` is superfluous here. As a special case, if allow_None=True (which is true by default if the parameter has a default of None when declared) then a value of None is also allowed.\nLABEL:", "completions": "alternative solution"}
{"id": 655, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Is there anything in particular that makes setting up the downstream rolebinding(s) to `system:k3s-controller` burdensome or confusing? This changes looks fine to me but it seems a shame to alias an embedded k3s controller. If we are doing this in other places that I am not aware of then we can dismiss this concern out of hand.\nLABEL:", "completions": "specialized expertise"}
{"id": 656, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: File is not `goimports`-ed (from `goimports`)\nLABEL:", "completions": "formatting"}
{"id": 657, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: nit: all other types in this project have full names, so maybe a better name would be `OperatingSystem`?\nLABEL:", "completions": "naming"}
{"id": 658, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why is this needed here?\nLABEL:", "completions": "Necessity"}
{"id": 659, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: mmm, why a method declaration should not have the TypeVariableResolutionCapability? Is this ok?\nLABEL:", "completions": "correctness"}
{"id": 660, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: nit: any reason you swapped the ordering?\nLABEL:", "completions": "presentation"}
{"id": 661, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: can you de-uglify at least this line?.. hard to tell what changed...\nLABEL:", "completions": "presentation"}
{"id": 662, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Please can you merge master in before making these changes. I just reinstated a bunch of BPF UTs. Possible that the UTs use this code.\nLABEL:", "completions": "integration"}
{"id": 663, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Do you want to add additional cases for `Bla.__b()` and `self.__c()`? (Just add additional classmethods `__b` and `__c` and the calls to `__init__`)\nLABEL:", "completions": "alternative solution"}
{"id": 664, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: the recids is never changed after. So, it should contains the exact shown results, whatever are the rights for the user (admin or simple user, restricted collections...)\nLABEL:", "completions": "code context"}
{"id": 665, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Shouldn't the docstring mention that the MD5 checksum of `p` is computed each time and verified? Also, could there be use cases where a caller might not want such a check to happen because, eg, a blob storage solution doesn't provide MD5 verification or uses another hash algorithm such as SHA256?\nLABEL:", "completions": "documentation"}
{"id": 666, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: focusRedirect is used in the powerpnt appModule. We might have to make sure that this does not break. Having said that, I really like this being handled on the events level!\nLABEL:", "completions": "compatibility"}
{"id": 667, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: You imports are out of order\nLABEL:", "completions": "presentation"}
{"id": 668, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This should not be called Flow Trigger. FlowTrigger should has its own flowTrigger job name, for instance, \"flowtrigger\"\nLABEL:", "completions": "naming"}
{"id": 669, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: File is not `goimports`-ed (from `goimports`)\nLABEL:", "completions": "formatting"}
{"id": 670, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why do we need `\\n` if we already use `WriteLine`? (and `\\n` is not cross platform)\nLABEL:", "completions": "portability"}
{"id": 671, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: What is instrumentation name used for? I'm not seeing other classes use it, only a getter, constructor, and builder.\nLABEL:", "completions": "code context"}
{"id": 672, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: @kristofgazso could you review these warnings?\nLABEL:", "completions": "specialized expertise"}
{"id": 673, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: will delete this.\nLABEL:", "completions": "removal"}
{"id": 674, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: ~~Indent 2 lines above~~ Disregard. My fault\nLABEL:", "completions": "formatting"}
{"id": 675, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: What was the bug that this is fixing?\nLABEL:", "completions": "bug fix"}
{"id": 676, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This will always add the authorization header to the request object. Is this the right scope for these two lines? If username/password are not defined, it will encode 'Basic :'\nLABEL:", "completions": "scope"}
{"id": 677, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Is this always how Bazel does paths? Would it be nicer to do `-DBAZEL_TEST_DATA_PATH=../com_github_google_flatbuffers/tests/` so this string is not hardcoded in the the source?\nLABEL:", "completions": "alternative solution"}
{"id": 678, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Not an expert of ES, so not sure of the impact here.\nLABEL:", "completions": "specialized expertise"}
{"id": 679, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Who deletes the memory for the granteeList? (or the roleList for that matter)\nLABEL:", "completions": "memory management"}
{"id": 680, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This loop is missing a lock on subscriptions_mutex.\nLABEL:", "completions": "security"}
{"id": 681, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: shouldn't clearance be setting these up for us?\nLABEL:", "completions": "Necessity"}
{"id": 682, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Need to update the doc for `TelemetrySDK` and `Host` structs deleting references from removed functions.\nLABEL:", "completions": "documentation"}
{"id": 683, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think we should keep that here and add a new method `isSyntacticallyFinal` that returns `super.isFinal()` (and can be used in UnnecessaryModifier). Otherwise the contract of `isFinal` is not respected\nLABEL:", "completions": "contract"}
{"id": 684, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Is there a reason why we wouldn't want to check this every time? Why are we only checking for the footer and scroll bar when enableCellEditOnFocus is true?\nLABEL:", "completions": "code context"}
{"id": 685, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: You need to create an API for this class. This class should follow roughly the same dependency structure than RemoteAvailableInstallersPlayOnLinuxImplementation / RemoteAvailableInstallers. Maybe we could use a inner class here?\nLABEL:", "completions": "architecture"}
{"id": 686, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This should not be a case, right? If `run_id` is the same `workflow_id` can't be changed. Actually surprised that it is not part of a key.\nLABEL:", "completions": "logic"}
{"id": 687, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: How would AQR work for an INSERT/SELECT of one table into another where a LOB column is being copied?\nLABEL:", "completions": "specialized expertise"}
{"id": 688, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Since these are ultimately different endpoints, it would be nice if we could move them up one level and nuke the common `sds` directory in order to reduce path stutter\nLABEL:", "completions": "organization"}
{"id": 689, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Please check also whether `null` occurs in the rest of `beforeChangeResult` array.\nLABEL:", "completions": "correctness"}
{"id": 690, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Outdated docs. There is no response, there's an ack.\nLABEL:", "completions": "correctness"}
{"id": 691, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I'd rather have the container process remove the FIFO after it unblocks. Then `start` can always `Exec()`, and you can catch the \"FIFO does not exist\" error and translate it to a prettier \"someone must have already started the container\".\nLABEL:", "completions": "alternative solution"}
{"id": 692, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: can you check if there's other similar cases to add nil-check like this?\nLABEL:", "completions": "alternative solution"}
{"id": 693, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: `<= 64`? I just picked up what you said in #3981 (\"the CN field is limited to 64 characters\") but maybe there's something I don't know where the 64th character is needed (trailing dot or whatever?) Also this sounds like something that could be beautifully unit tested. Sorry for bugging you :grin:\nLABEL:", "completions": "specialized expertise"}
{"id": 694, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I understand that this grabs a Licenses objects but what is the autocomplete method used for? What does this do in context of the auto_completes controller?\nLABEL:", "completions": "code context"}
{"id": 695, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I don't really like that way of naming methods based on their arguments. But I can see that the other method names are the same ...\nLABEL:", "completions": "naming convention"}
{"id": 696, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: @sekmiller This method correctly strips the leading and trailing slashes (and also \".\" and \"-\"); But I thought the plan was also to replace any multiple slashes between nested folders with a single slash. For example, as implemented now, I can enter \"folder1///folder2\", and it gets saved and displayed like this, with the 3 slashes. I thought we wanted to sanitize it as \"folder1/folder2\".\nLABEL:", "completions": "correctness"}
{"id": 697, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Looks like the X86 inline assembly is not happy with this type. I will update that\nLABEL:", "completions": "platform compatibility"}
{"id": 698, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Tabs and a space, again.\nLABEL:", "completions": "formatting"}
{"id": 699, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Please just enclose if blocks with brackets; this has created issues in the past so I'd prefer we don't use them\nLABEL:", "completions": "safety"}
{"id": 700, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: `version` isn't need anymore because it's built into `approve_proposal_url`, yes?\nLABEL:", "completions": "Necessity"}
{"id": 701, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Moved to the bottom of the file. `CtrlPDU` sits on `BTLE_DATA` so let's put it after\nLABEL:", "completions": "organization"}
{"id": 702, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This ends up requiring the `json` gem, right? Is there any way we can do this to be implementation agnostic (e.g. to let me use `yajl-ruby` for performance reasons (or because my app already brings in a JSON library)\nLABEL:", "completions": "implementation"}
{"id": 703, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This seems dangerous. What circumstances lead to the need for a retry? Can that happen more than once? I'm concerned that if we hit the pathological state, this could turn into a CPU spinner. I wonder if we could get the same benefit from just \"trying again\" and failing if it fails the second time.\nLABEL:", "completions": "safety"}
{"id": 704, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: If there is a reference to other fields or methods, please do the initialization in the constructor.\nLABEL:", "completions": "initialization"}
{"id": 705, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: These should be importing from `pill-container`\nLABEL:", "completions": "syntax"}
{"id": 706, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why this change? It will now only show on the bottom of the screen as white text, is it correct behaviour?\nLABEL:", "completions": "correctness"}
{"id": 707, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Does this need to allocate a string or would a nil value (indicating no header) be a better?\nLABEL:", "completions": "alternative solution"}
{"id": 708, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Nit: Past tense of `reset` is also `reset`.\nLABEL:", "completions": "spelling"}
{"id": 709, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Shouldn't this use `'n'` instead?\nLABEL:", "completions": "correctness"}
{"id": 710, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: revert back to 'TASK_TYPE_ACTIVITY_TIMEOUT'\nLABEL:", "completions": "alternative solution"}
{"id": 711, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Shouldn't we prefer passing a pointer by reference T*&, since these are C++ bindings?\nLABEL:", "completions": "language"}
{"id": 712, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: nit: Personally I feel that it's cleaner to let `toAntreaPeerForCRD` to take `ingressRule` as a param instead of `ingressRule.From`. It can call `processRefCGs` inside the function and do the ipBlock/AG union within the function itself. It might not be worth the refactor though.\nLABEL:", "completions": "alternative solution"}
{"id": 713, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Pending has been set only for SPC.. why? for other CRs as well, this need to be done.. right?\nLABEL:", "completions": "code context"}
{"id": 714, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: would use an empty string here as default and then check for emptiness in the twig template. I dont like mixing types @core23 what do you think?\nLABEL:", "completions": "alternative solution"}
{"id": 715, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: How come we need case manipulation for the nextPageToken and not for pageToken?\nLABEL:", "completions": "code context"}
{"id": 716, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: why use these rather than regular named paths?\nLABEL:", "completions": "rationale"}
{"id": 717, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Hm, I don't think the extra flags are doing any harm here, but it does seem like `--help` is the only flag you could *actually* use with this command. We might eventually want to separate those out.\nLABEL:", "completions": "splittable"}
{"id": 718, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: We should make this a docstring, so that editors are able to pick it up.\nLABEL:", "completions": "documentation"}
{"id": 719, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Put a comma after the last parameter of a multiline method call.\nLABEL:", "completions": "presentation"}
{"id": 720, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: App cache size is now managed dynamically by the `WebView`. This statement has no effect in the new framework.\nLABEL:", "completions": "obsolete code"}
{"id": 721, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: VirtualNode has a `hasAttr` function, any reason why you're not using it?\nLABEL:", "completions": "alternative solution"}
{"id": 722, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This now throws when running tests (maybe the move to java 11??). Do we want to keep it?\nLABEL:", "completions": "compatibility"}
{"id": 723, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: We can allow 7-char SHA, does not mean we want to show with 7-char in default, please change to `if len() > 10`, then cut.\nLABEL:", "completions": "alternative solution"}
{"id": 724, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: this one should also have quotes i guess :)\nLABEL:", "completions": "syntax"}
{"id": 725, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Using the variable on range scope `mock` in function literal (from `scopelint`)\nLABEL:", "completions": "linting"}
{"id": 726, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: does this result in a 200 when the dataset is still inprogress/publishing not yet finalized? Seems like 202 is the right code for that (as it was) and the test should be watching for a 202?\nLABEL:", "completions": "correctness"}
{"id": 727, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Previously you could only order by the field you were searching by. But for full-text search, you can search across all indexed fields, and it didn't make sense not to have a sorting. For backward compatibility, the javascript code uses indexPath as the orderPath when no orderPath is provided.\nLABEL:", "completions": "compatibility"}
{"id": 728, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: VIM didn't like your whitespace.\nLABEL:", "completions": "formatting"}
{"id": 729, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Are you sure the namespace should change?\nLABEL:", "completions": "necessity"}
{"id": 730, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: @martijn00 I'm not sure why we're keeping the object parameter and return type since this can be done by using MvxApplication<THint> with THint set to object\nLABEL:", "completions": "alternative solution"}
{"id": 731, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: why do we create a time type here?\nLABEL:", "completions": "necessity"}
{"id": 732, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Does this style actually need to get loaded in all of these components?\nLABEL:", "completions": "Necessity"}
{"id": 733, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: import but not used so you did not resolve compile warnings?\nLABEL:", "completions": "correctness"}
{"id": 734, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This is so much more concise and beautiful than the previous formula  \nLABEL:", "completions": "alternative solution"}
{"id": 735, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Is there any reason not to have the `static` modifier for the logger? _(that would be in keeping with the reference being uppercase)_\nLABEL:", "completions": "naming"}
{"id": 736, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: It's not about session creation config. It's about passing consumer config parameters to underlying transport - nothing to do with session itself\nLABEL:", "completions": "correct understanding"}
{"id": 737, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why is there an \"enable\" in the param name? Couldn't it just be `overrideDebug`? Here are everywhere else.\nLABEL:", "completions": "consistency"}
{"id": 738, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: `published.recently_published_first` reads a little oddly to me. Is this the same thing as `Video.published.ordered`?\nLABEL:", "completions": "readability"}
{"id": 739, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Encountered this because I had a stray comma. Figured I'd tweak it a bit.\nLABEL:", "completions": "bug fix"}
{"id": 740, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: qq: Should this include the iptables6-save sim. to the inverse checks above?\nLABEL:", "completions": "specialized expertise"}
{"id": 741, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: im open to explicitly checking NotSet value here but json logic already handles it so kept it this way.\nLABEL:", "completions": "rationale"}
{"id": 742, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: The naming of the include file appears to be unlucky.\nLABEL:", "completions": "naming"}
{"id": 743, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Bit worried about this. At minimum you should make a copy of the dict here to avoid modifying a user supplied variable.\nLABEL:", "completions": "safety"}
{"id": 744, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Is it better to create one before pruning? In case creation fails we don't want to delete the previous one. We create a new one, it is tagged as latest, so the previous can be deleted. `CreateLaunchTemplateVersion` returns the version created, how about directly trying to delete the previous version? Assuming the numbering is strictly increasing.\nLABEL:", "completions": "alternative solution"}
{"id": 745, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Do we require the specific implementation information here?\nLABEL:", "completions": "Necessity"}
{"id": 746, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: How about `exists?(['domain ~* ?', domain.downcase])` ?\nLABEL:", "completions": "alternative solution"}
{"id": 747, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Is this getting used in other places? Can we switch all the places to use the new API you added?\nLABEL:", "completions": "refactoring"}
{"id": 748, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This need to be checked with linux. AFAIK, we have this file in our bin directory that is a link to the system file.\nLABEL:", "completions": "platform compatibility"}
{"id": 749, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Shouldn't we import `default`? I can't get here to test.\nLABEL:", "completions": "correctness"}
{"id": 750, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: !!!!!!!!!!!!! @graingert, does this mean that tests haven't been running???\nLABEL:", "completions": "urgency"}
{"id": 751, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I've already tried the null-coalescing operator here and got a strange error, so did this the old-fashioned way.\nLABEL:", "completions": "debugging"}
{"id": 752, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This doesn't follow our spacing convention. It's also a little hard to read. Can you reformat?\nLABEL:", "completions": "presentation"}
{"id": 753, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: The deploy should come before template? EDIT: I see that in other files, we put a separate line and put deploy at the end. What is the reason for this?\nLABEL:", "completions": "consistency"}
{"id": 754, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Consider making a constant (e.g. `MetricStreamConfiguration.Drop`).\nLABEL:", "completions": "refactoring"}
{"id": 755, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: same question: why not just switch this to range too?\nLABEL:", "completions": "alternative solution"}
{"id": 756, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: @chuckatkins most places used an empty string for \"no type\", but a few used `\"unknown\"`. I've converted both cases to `Type::None`. Do you know why there was a distinction before?\nLABEL:", "completions": "historical context"}
{"id": 757, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: should we assert for the type for `FeatureGroupData` ? I think it should be 1-Byte type.\nLABEL:", "completions": "type checking"}
{"id": 758, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: As long as you are sure this is definitely correct now... :-)\nLABEL:", "completions": "correctness"}
{"id": 759, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: ... so that all action buttons have the same height :-)\nLABEL:", "completions": "presentation"}
{"id": 760, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Use correct, alpha sorted, include order. Correct order means: 1. Header corresponding to this source (i.e. `\"LatencyTestPublisher.hpp\"`) 2. C system headers 3. C++ system headers 4. Alpha-sorted external libraries headers 5. Alpha-sorted public headers from this project 6. Alpha-sorted private headers\nLABEL:", "completions": "presentation"}
{"id": 761, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I hate this name, open to suggestions.\nLABEL:", "completions": "naming"}
{"id": 762, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Does this log line work? We need Warningf or just warning without the format string.\nLABEL:", "completions": "correctness"}
{"id": 763, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: The pull controller would need similar updates.\nLABEL:", "completions": "code context"}
{"id": 764, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: ignore this.. just didn't want to litter with a commit update to satisfy license plugin\nLABEL:", "completions": "irrelevant"}
{"id": 765, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Is this definition needed since it doesn't look like it's being used anywhere?\nLABEL:", "completions": "Necessity"}
{"id": 766, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Can this condition be reworded using `if` please?\nLABEL:", "completions": "alternative solution"}
{"id": 767, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: after ||, no need inputs != nullptr\nLABEL:", "completions": "alternative solution"}
{"id": 768, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Is it just preference or on purpose that using slice of structs instead of slice of pointers?\nLABEL:", "completions": "rationale"}
{"id": 769, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This line always confused me   anyway. Good catch!\nLABEL:", "completions": "clarity"}
{"id": 770, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Should we add `ctx` to `BlockServer.Shutdown()` for this purpose? Would be nice, but I don't care too much.\nLABEL:", "completions": "opinion"}
{"id": 771, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Duration_t at RTPS level must be serialized using fractions.\nLABEL:", "completions": "correctness"}
{"id": 772, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: \"peer\" has its own meaning within YARPC with its own class of objects. This should probably be \"dispatcher\" too?\nLABEL:", "completions": "terminology"}
{"id": 773, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I do not like this line break before `=true`. Maybe starting the list in the next line would help to reduce the indent? This way we could keep this string together.\nLABEL:", "completions": "presentation"}
{"id": 774, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: _plugins should be removed too\nLABEL:", "completions": "correctness"}
{"id": 775, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: The rule selector will not include `<input>` and `<area>` elements. Why not make this a new, separate rule altogether?\nLABEL:", "completions": "alternative solution"}
{"id": 776, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: @The-Compiler Is this style okay or would you prefer a common userscript exception base?\nLABEL:", "completions": "specialized expertise"}
{"id": 777, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: we'd need to return a MongooseBuffer here instead of the Binary. lets add the subtype option to the buffer schema type as referenced in #1000 instead.\nLABEL:", "completions": "alternative solution"}
{"id": 778, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Let's remove this change.\nLABEL:", "completions": "removal"}
{"id": 779, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Could you split this into multiple lines?\nLABEL:", "completions": "readability"}
{"id": 780, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This technically works, however it may be safer to use both `getCurrentReferenceURL` and `getCurrentEntityURL` and then make this condition `currentReferenceURL === currentEntityURL`. Currently, this code only works based on the internals of `getCurrentReferenceURL`, so by checking both we would decouple that.\nLABEL:", "completions": "safety"}
{"id": 781, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: It does not recommend capitalization\nLABEL:", "completions": "correctness"}
{"id": 782, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Minor thing, but can you use 1.9 hash syntax for this?\nLABEL:", "completions": "alternative solution"}
{"id": 783, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I tried to follow the code structure already present.\nLABEL:", "completions": "consistency"}
{"id": 784, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: seems reasonable to also want to include the 'to' location?\nLABEL:", "completions": "alternative solution"}
{"id": 785, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Please leave 1 space char between commas here and other places in this PR.\nLABEL:", "completions": "presentation"}
{"id": 786, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: hm is this really &&? Not ||? Was it initially correct if any of these things are not set that it needs to recreated?\nLABEL:", "completions": "code context"}
{"id": 787, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Please don't use C-style array declarations. IMO our pre-commit ought to be enhanced to not allow this\nLABEL:", "completions": "standards"}
{"id": 788, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: @rhc54 This doesn't look like a comprehensive comparison. For `PMIX_STRING` we seem to actually compare the content of the data while here we only compare meta-information which doesn't ensure that values are the same.\nLABEL:", "completions": "correctness"}
{"id": 789, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think `bypass_frontier_confirmation` conveys the intention better (default false as well)\nLABEL:", "completions": "alternative solution"}
{"id": 790, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This looks like it goes beyond the scope of removing `BlockHeight()`, in the future please do this in a separate commit at a minimum -- separate PR is fine too.\nLABEL:", "completions": "scope"}
{"id": 791, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: You'll also need to adjust `FakeWebTabAudio` in `tests/helpers/stubs.py`.\nLABEL:", "completions": "code context"}
{"id": 792, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: @csrwng what should we do here? This one is from origin.\nLABEL:", "completions": "specialized expertise"}
{"id": 793, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Follow alphabetical order.\nLABEL:", "completions": "presentation"}
{"id": 794, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: As far as I can tell, these always get and set the context as an `IReadOnlyDictionary<string, string>`. Can we use that here instead of `object` and get rid of the `as IReadOnlyDictionary<string, string>`?\nLABEL:", "completions": "alternative solution"}
{"id": 795, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: As you only have `{}` as the format string (without anything else in it), this is the same as doing `self._doc.setHtml(html.escape(self._opt.text))`\nLABEL:", "completions": "alternative solution"}
{"id": 796, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Where would this be configured? In azkaban.properties?\nLABEL:", "completions": "configuration"}
{"id": 797, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: 1. Use `const` instead of `var` here. 2. Move the check to after the `if (update == null || typeof update !== 'object')`.\nLABEL:", "completions": "alternative solution"}
{"id": 798, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Let's assume that on Linux `eventfd` is always available as a wrapper of the eventfd2 system call. It is supported since linux 2.6.27 + glibc 2.9, as well as from the ancient versions of bionic. In other words, it would be fair to argue that the pair would be available on practically all platforms that provide `pipe2`. Therefore switching from using `pipe2` to `eventfd` on linux unconditionally would not cause issues on our users.\nLABEL:", "completions": "platform compatibility"}
{"id": 799, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This field could be `final`.\nLABEL:", "completions": "optimization"}
{"id": 800, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: would be good to have a test for the case when `shutdown!` raises\nLABEL:", "completions": "test coverage"}
{"id": 801, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Does upsert pass this check also?\nLABEL:", "completions": "code context"}
{"id": 802, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Apologies reviewers, I did end up pushing another change. I was starting to request SRE-P help to get the apiserver configs from some clusters before and after when I realized I can just log the stdout from the patch command to see if anything was changed or not. Much simpler to verify if my work did or did not make changes to the config during the transition. Also got the spacing issue you mentioned @abhinavdahiya Thanks all.\nLABEL:", "completions": "debugging"}
{"id": 803, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I'm not sure this naming is a good idea; that's the format for macOS xattr metadata files on unsupported filesystems.\nLABEL:", "completions": "naming"}
{"id": 804, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Metrics/LineLength: Line is too long. [85/80]\nLABEL:", "completions": "metrics"}
{"id": 805, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Please remove these imports. The project's style is to use `Assert.assertEquals` and not import static methods in general. This also caused a lot of unnecessary changes.\nLABEL:", "completions": "style"}
{"id": 806, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: thanks. Note that returning at this point might leak memory from the allocations above, so the PR will need to take care of that too.\nLABEL:", "completions": "correctness"}
{"id": 807, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: If you really want to rename this, you'll also need to adjust the name in `__init__` and in other places it's used (`browser/commands.py`).\nLABEL:", "completions": "refactoring"}
{"id": 808, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: As discussed at standup, I gave up on this. Calling `DeleteMapLayerMetadataCommand` felt cleaner anyway because there might be other cleanup that needs to happen. @scolapasta and @matthew-a-dunlap plan to discuss this.\nLABEL:", "completions": "collaboration"}
{"id": 809, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Do we need these changes? If so, can you tidy up the messages? Looks like it might have been your testing/debugging changes  \nLABEL:", "completions": "Necessity"}
{"id": 810, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: where is the default being set?\nLABEL:", "completions": "code context"}
{"id": 811, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: these changes should likely be in the next commit instead\nLABEL:", "completions": "splittable"}
{"id": 812, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Since you have defined this struct, I would suggest to replace all exist literal structs by this.\nLABEL:", "completions": "alternative solution"}
{"id": 813, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: The field name doesn't really capture what this option does. I think `mConfirmDiscardMessage` would be a better choice.\nLABEL:", "completions": "naming"}
{"id": 814, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: what if `$media->getBinaryContent() == Symfony\\Component\\HttpFoundation\\File\\File` does `is_string()` return `true`? ping @greg0ire\nLABEL:", "completions": "specialized expertise"}
{"id": 815, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: maybe rather than `bool` make this field a `StructDef *` ?\nLABEL:", "completions": "alternative solution"}
{"id": 816, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Shall we maybe put this in a `const` like `backgroundTaskTimeout`?\nLABEL:", "completions": "naming"}
{"id": 817, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: CI is complaining about this.\nLABEL:", "completions": "correctness"}
{"id": 818, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Let's only change a file if it is really necessary. Such a change does not bring much value and makes it harder to find the original commit in which the method was introduced.\nLABEL:", "completions": "necessity"}
{"id": 819, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I would prefer to set up space between classes in format pattern, `%s %s` and then use `trim()` to remove unnecessary whitespaces. This will also solve stripping whitespaces from the beginning and end of a string `$attributes['class']`\nLABEL:", "completions": "alternative solution"}
{"id": 820, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: when Op is illegal should return here?\nLABEL:", "completions": "code context"}
{"id": 821, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: don't we need to remove the project version from installedVersions?\nLABEL:", "completions": "correctness"}
{"id": 822, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: the bridge here isn't defined as an accessor / reader to try mask it better. So you need to directly call the iVar `@bridge` here.\nLABEL:", "completions": "access control"}
{"id": 823, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This is intended. Pls revert this.\nLABEL:", "completions": "intention"}
{"id": 824, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Something wrong with cast to `(Comparator<> & Serializable)`, need to be investigated\nLABEL:", "completions": "correctness"}
{"id": 825, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think we need this. Not sure, I'll test.\nLABEL:", "completions": "Necessity"}
{"id": 826, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I'm going to need to check if google compute requires these steps in this order, or if you can disable iptables after the fact.\nLABEL:", "completions": "external context"}
{"id": 827, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Did go change their tags with the new version?\nLABEL:", "completions": "specialized expertise"}
{"id": 828, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I don't recall what we decided here in terms of which source would get priority. As written, the static configuration will overwrite datastore results.\nLABEL:", "completions": "code context"}
{"id": 829, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think it should still panic for when there are no outputs; might be nice to special-case that though so the message is more explicit.\nLABEL:", "completions": "error handling"}
{"id": 830, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: *NULL_DEREFERENCE:* object `null` is dereferenced by call to `meterSupplier(...)` at line 122.\nLABEL:", "completions": "bug report"}
{"id": 831, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: switch over to .mode\nLABEL:", "completions": "alternative solution"}
{"id": 832, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I guess your IDE did some auto-fixing here  \nLABEL:", "completions": "code formatting"}
{"id": 833, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This is an unused import failing recommit still.\nLABEL:", "completions": "correctness"}
{"id": 834, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I'm concerned that we're conflating multiple things here. There are 2 things that Beaker should really care about: - Network transport - i.e. `ssh` vs `winrm` - Interpreter - i.e. `bash`, `cmd`, `powershell`, etc The problem is that @cowofevil is running Bitvise SSH, and he assumed we should be setting `is_cygwin: false` in node definitions. But that doesn't really accurately convey what we care about, and since Beaker doesn't appear to track network transport apart from interpreter, we end up in a strange state. `is_cygwin: false` appears to end up setting `is_powershell?` to `true`, which IMHO is not accurate or appropriate. Bitvise templates use `ssh` (like Cygwin), but the interpreter used is `cmd`, not `powershell`.\nLABEL:", "completions": "code context"}
{"id": 835, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think this is ok for now. This ties into the larger issue of the site not having a consistent method for relaying form input errors. Please make sure the focus gets set on the close button when the dialog opens.\nLABEL:", "completions": "usability"}
{"id": 836, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Should these link be removed?\nLABEL:", "completions": "Necessity"}
{"id": 837, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Please make this a keyword-only argument by adding a `*` argument before `add_undo`.\nLABEL:", "completions": "syntax"}
{"id": 838, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: didn't quite follow what this code block is doing.\nLABEL:", "completions": "understanding"}
{"id": 839, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: this doesn't sound pretty... I would rather we have a proper navigation for all modes - AFAIK TV remote navigation is very similar to normal keyboard, but maybe it just uses another key codes - those should be extracted in a single file and defined there depending on context then\nLABEL:", "completions": "alternative solution"}
{"id": 840, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: After diffing the children we check whether the value got out of sync, if it did we update it. We also update the `_prevValue` to prepare for the next event hitting our controlled component\nLABEL:", "completions": "logic"}
{"id": 841, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: It provides a type called Node which is a fully functional bee client. This package is where the dependencies are injected. It is not just a glue-code, it is concept of node.\nLABEL:", "completions": "architecture"}
{"id": 842, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think this will change `''` to `'%'` unconditionally, i.e. there'll be no way to set `''` anymore. This should really only be used for values which make no sense anymore.\nLABEL:", "completions": "alternative solution"}
{"id": 843, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Nit: this table's row key map -> this table's row keys map\nLABEL:", "completions": "grammar"}
{"id": 844, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: this change should be reverted\nLABEL:", "completions": "revert"}
{"id": 845, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I'm a bit confused about the `os.path.dirname(basedir)` here - is this just to get to the parent directory? Either way, I think I'd prefer just having this in `update_version.py` as it's not needed in qutebrowser itself.\nLABEL:", "completions": "alternative solution"}
{"id": 846, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Revert this change and see below why...\nLABEL:", "completions": "corrective action"}
{"id": 847, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Should not switch to `lvis_v1_instance` here because that base config uses ClassBalancedDataset to oversample the data.\nLABEL:", "completions": "correctness"}
{"id": 848, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This is an informational message that allows someone to read the console output and understand how the grid node is configured. Please leave.\nLABEL:", "completions": "logging"}
{"id": 849, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This doesn't make sense to me. What does RaiseSingleton mean? To me it sounds like a single object is being.. raised? Not sure.\nLABEL:", "completions": "clarity"}
{"id": 850, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: What's the benefit of having jobExecutorTests as a member variable? What do you think about making the method static? Afterall, it is a stateless method.\nLABEL:", "completions": "Necessity"}
{"id": 851, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This looks like it's only downloading things, not really checking their true validity. Especially for the MD object. Should we call `BareRootMetadata.IsValidAndSigned()` in `mdGet`?\nLABEL:", "completions": "correctness"}
{"id": 852, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Nikoli, I believe that this addresses your concern. One question for you or Jae-Seung is if any allocation from the clone is properly cleaned up when the vector is destroyed. I believe that it should.\nLABEL:", "completions": "specialized expertise"}
{"id": 853, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: should be `ECSApp`  \nLABEL:", "completions": "correctness"}
{"id": 854, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: flake8 is going to fail on this having 2 lines\nLABEL:", "completions": "code quality"}
{"id": 855, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: should we make a dir named controllers/scheduler/podchaos\nLABEL:", "completions": "organization"}
{"id": 856, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: there seems to be one KeyNode in kubernetes.go of PV.. would it make sense to use it?\nLABEL:", "completions": "alternative solution"}
{"id": 857, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Im gonna be a little annoying here but did you configure your linter correctly? This empty line should not be here. Maybe go to settings and check if `goimports` is enabled?\nLABEL:", "completions": "linting"}
{"id": 858, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Don't think this belongs in this pr\nLABEL:", "completions": "scope"}
{"id": 859, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: We can assert on the existence of Outbounds through ClientConfig calls right? Since this is only for tests, do we need this function?\nLABEL:", "completions": "Necessity"}
{"id": 860, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: @martijn00 so this PR introduces a new ViewModel lifecyle method? It isn't in the PR description/any new docs  \nLABEL:", "completions": "clarity"}
{"id": 861, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Are these modification duplicate? Or should we move it into base detector.\nLABEL:", "completions": "refactoring"}
{"id": 862, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Since this is private and single use it should be un-wrapped inside of the two-arg dagSeed method.\nLABEL:", "completions": "alternative solution"}
{"id": 863, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: why the order change? Also for the next chunk. (I understand the result will be the same though)\nLABEL:", "completions": "rationale"}
{"id": 864, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I wonder if this should just be a single `string`? We don't have any cases where we return different types and it would make the parser simpler to just read a single identifier.\nLABEL:", "completions": "alternative solution"}
{"id": 865, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I don't think this needs to change. Can you go back to the previous implementation?\nLABEL:", "completions": "alternative solution"}
{"id": 866, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Bump it 2 lines higher, 'c' > 'u'.\nLABEL:", "completions": "presentation"}
{"id": 867, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Please do not add author here\nLABEL:", "completions": "correctness"}
{"id": 868, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Similarly, we should be able to persist action uniformly\nLABEL:", "completions": "consistency"}
{"id": 869, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think i'd prefer this override to be in the test helper instead, if that's possible?\nLABEL:", "completions": "alternative solution"}
{"id": 870, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This would be better with context added via wrapping or fmt.errorf()\nLABEL:", "completions": "logging"}
{"id": 871, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: What's the purpose of this file?\nLABEL:", "completions": "purpose"}
{"id": 872, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: @bhariharan Why was passcode length requirement allowed to be lowered?\nLABEL:", "completions": "rationale"}
{"id": 873, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This file needs a license header, too. Sorry I didn't catch that earlier.\nLABEL:", "completions": "compliance"}
{"id": 874, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: probably don't need `[:]` why not reference into `github.com/algorand/go-algorand/daemon/algod/api/server/lib` here and skip bouncing off daemon/algod/server.go ?\nLABEL:", "completions": "alternative solution"}
{"id": 875, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why reference is converted to table?\nLABEL:", "completions": "rationale"}
{"id": 876, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: should we implement pagination in the fake datastore so the server startup code that paginates entries for trust domain validation can be tested?\nLABEL:", "completions": "implementation"}
{"id": 877, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: What mechanism will be exposed so the caller knows they're using the vectorized version?\nLABEL:", "completions": "interface"}
{"id": 878, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Can we remove respond_to block its not required here\nLABEL:", "completions": "necessity"}
{"id": 879, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Do not do that even in example, we demonstrate bad practice\nLABEL:", "completions": "correctness"}
{"id": 880, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Hm, taking a second look over this, this is why we have the object inheritance structure that we do. This could be divided up by having a custom determine_if_x86_64 in the pswindows/exec hosts and then a default method in hosts.rb. That way all the custom ps windows work is in a single location.\nLABEL:", "completions": "alternative solution"}
{"id": 881, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: We have to `.Complete` now because of empty/null string test cases.\nLABEL:", "completions": "alternative solution"}
{"id": 882, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Is there still a way to specify no recursion?\nLABEL:", "completions": "code context"}
{"id": 883, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: How is this name being URI safe and being used programmatically related?\nLABEL:", "completions": "code context"}
{"id": 884, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think we have to keep this as a fallback for now, else it's a small breaking change :(\nLABEL:", "completions": "compatibility"}
{"id": 885, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: nit: shouldn't be part of this PR.\nLABEL:", "completions": "splittable"}
{"id": 886, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: this change looks wrong to me. I think the test is trying to signal that something went wrong by throwing the `Error` here, otherwise the `catch` below will swallow it.\nLABEL:", "completions": "correctness"}
{"id": 887, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I'm doubting if this should be `if (_layout.IsThreadAgnostic)`, as ThreadAgnostic stuff could be calculated on every thread. (and thus could be lazy). non-ThreadAgnostic should be calculated on the main thread.\nLABEL:", "completions": "threading"}
{"id": 888, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Please use only `Logger` instead of `org.slf4j.Logger`\nLABEL:", "completions": "syntax"}
{"id": 889, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Should this be \"no limiter drop\", since this isn't an absolutely essential activity for the stability of the network?\nLABEL:", "completions": "alternative solution"}
{"id": 890, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I updated many of the success messages, because most of these operations don't return data if they succeed. This meant many of the operations would print: `Success null` if the script ran successfully.\nLABEL:", "completions": "bug fix"}
{"id": 891, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Could you simply add it to the previous clause ?\nLABEL:", "completions": "alternative solution"}
{"id": 892, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: @joshyrobot, I think you can just use localeCompare with only the first argument and leave the other arguments out (here and all the other lines changed). It seems to do the right thing, and then we don't have to worry about these extra options.\nLABEL:", "completions": "alternative solution"}
{"id": 893, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: @chengren311 : where does this logic move to?\nLABEL:", "completions": "alternative solution"}
{"id": 894, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Can we have a `nil` exception check at `s.scope.ManagedMachinePool`\nLABEL:", "completions": "exception handling"}
{"id": 895, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Rather than deleting this, should you just reformat it so it's the `*` settings, so if nothing is configured in facets.ini, the existing default behavior continues to work?\nLABEL:", "completions": "alternative solution"}
{"id": 896, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: wrap, single line\nLABEL:", "completions": "presentation"}
{"id": 897, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: always use brackets for if statements\nLABEL:", "completions": "style"}
{"id": 898, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: `NUnitIntegration` doesn't need to cache this anymore.\nLABEL:", "completions": "Necessity"}
{"id": 899, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why did you change it to `>=` here?\nLABEL:", "completions": "rationale"}
{"id": 900, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Looks like this needs to be updated. There is no need to remove `hadoop.` if Hadoop tables don't use this code path.\nLABEL:", "completions": "alternative solution"}
{"id": 901, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This require isn't need anymore, right?\nLABEL:", "completions": "Necessity"}
{"id": 902, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: a bit weird to see payments crypto package inside connection manager. There probably will be services not having any relation with payments that will use connection manager. Thats why probably ping-ping by itself can be useful without any relation to payments..\nLABEL:", "completions": "structure"}
{"id": 903, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I like the overall idea here, but I wonder if it would be more clear to define the property in the trait, and then set it in the constructors of the classes using the trait. Alternatively, at a bare minimum, it may be a good idea to add `?? 'Bibliographic'` here, to account for the possibility of the trait being used in a class that does not define the property at all.\nLABEL:", "completions": "alternative solution"}
{"id": 904, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I would prefer to not have a magic number, but construct this value out of other constants we already have.\nLABEL:", "completions": "alternative solution"}
{"id": 905, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: The limitation is if somebody configure another policy with the same name, but it is an edge case we can ignore I guess.\nLABEL:", "completions": "edge case"}
{"id": 906, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: ? The package is named `hashivault`.\nLABEL:", "completions": "naming"}
{"id": 907, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I don't think this should enable xwayland, because it's convenient to toggle xwayland just by setting `xwayland` to `false`\nLABEL:", "completions": "Necessity"}
{"id": 908, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Remove this line by accident?\nLABEL:", "completions": "correctness"}
{"id": 909, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Calling `.stream()` on a `DomainObjectCollection` is pretty much always a bug, as it doesn't include objects added later (and encourages people to use afterEvaluate). I wonder if we should make this an error prone check?\nLABEL:", "completions": "correctness"}
{"id": 910, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Thanks for paying attention to other places this might happen. This one is particularly important; I probably never should have gotten in the habit of CheckErr(), since it does a log.Panic() explicitly, which looks like something else until you look closely. It's supposed to be used places where \"can't happen\" but Things Can Happen.\nLABEL:", "completions": "correctness"}
{"id": 911, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: What is the different between nw_tos and ip_dscp? Only high 6 bits vs low 6 bits and supported version?\nLABEL:", "completions": "code context"}
{"id": 912, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I'm assuming that asSmarts & cxSmiles == asSmarts\nLABEL:", "completions": "correct understanding"}
{"id": 913, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Seems like an oversight but I don't think the super would do anything else in this case unless I'm mistaken.\nLABEL:", "completions": "code context"}
{"id": 914, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Curious, do we consider this as pedantic for example code?\nLABEL:", "completions": "opinion"}
{"id": 915, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Should we convert the entity name to snake case using `Doctrine\\Common\\Inflector\\Inflector::tableize` or similar ? Should a `snaked_name` or whatever be part of the entity metadata in order to use it for form names, ids, & other html attributes ?\nLABEL:", "completions": "specialized expertise"}
{"id": 916, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Should be `client.outboundIp`\nLABEL:", "completions": "syntax"}
{"id": 917, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Must these `using` statements not go inside the `namespace` block?\nLABEL:", "completions": "syntax"}
{"id": 918, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why? I thought the previous way was idiomatic. (Same with the `MetadataVer` stuff above.)\nLABEL:", "completions": "rationale"}
{"id": 919, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: shouldn't we `reject` here instead?\nLABEL:", "completions": "alternative solution"}
{"id": 920, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: check err or use gasPriceUnitIOTX, _ := if we are sure action.Core.GasPrice is correct\nLABEL:", "completions": "correctness"}
{"id": 921, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Just curious, was wait not used at all before?\nLABEL:", "completions": "code context"}
{"id": 922, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: nit: can we remove this?\nLABEL:", "completions": "nitpick"}
{"id": 923, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: is it not a problem when one synchronized function is called by other?\nLABEL:", "completions": "concurrency"}
{"id": 924, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: We (even as admins) shouldn't override the User Preference settings like `email_master`, `email_posts`, `email_kudos`, `email_new_followers`. These all would be set by the user of their choice. Please do remove these attributes from editing//updating. Thanks!\nLABEL:", "completions": "security"}
{"id": 925, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: \"Este :attribute j est anexado.\" sounds better.\nLABEL:", "completions": "localization"}
{"id": 926, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This line should be repeated for every module that needs testing. One cannot rely on nosetest to automatically discover all the modules. On the bright side, there is no need to change any of the other files.\nLABEL:", "completions": "maintenance"}
{"id": 927, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This error was unused\nLABEL:", "completions": "correctness"}
{"id": 928, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Personally I wish we didn't have a proto for every single little thing we do. RequestShardAction with an enum for the action type would be a lot cleaner imo, but I'm pretty sure that ship has sailed :) Just kvetching.\nLABEL:", "completions": "opinion"}
{"id": 929, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Does this make more sense as `trails/_trail` now?\nLABEL:", "completions": "naming"}
{"id": 930, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: synced offline. let's move this to `agent_unix.go` to make the IMDS call, since this is not supported in Windows.\nLABEL:", "completions": "platform compatibility"}
{"id": 931, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Too much indentation here. Should match the lines above, which have four spaces.\nLABEL:", "completions": "presentation"}
{"id": 932, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Same here we still need this test to make sure the fallback works.\nLABEL:", "completions": "Necessity"}
{"id": 933, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I'm wondering if we can actually base this on a `IMvxPresentationAttribute` instead of the base one.\nLABEL:", "completions": "alternative solution"}
{"id": 934, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: could we switch to `undefined` here?\nLABEL:", "completions": "alternative solution"}
{"id": 935, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: The cleanup call\nLABEL:", "completions": "correctness"}
{"id": 936, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think \"View artist\" is a bit more standard and expected. Or even \"Go to artist\" to take the Spotify terminology as-is.\nLABEL:", "completions": "terminology"}
{"id": 937, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: It might make sense to refactor this later so that we use a Bolt-native type to hide sensitive values.\nLABEL:", "completions": "security"}
{"id": 938, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: We were trying to move away from this to force people to always run tests under py.test.\nLABEL:", "completions": "standards"}
{"id": 939, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: 1 - create browser specific options class: - chromeoptions - firefoxoptions - argsoptions\nLABEL:", "completions": "alternative solution"}
{"id": 940, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: should be a case insensitive match though no? DOCTYPE and doctype are both widely used\nLABEL:", "completions": "code context"}
{"id": 941, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: We must have a `fail ParamNotFound` here for cases where `@account.nil?`.\nLABEL:", "completions": "correctness"}
{"id": 942, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: How come this change was needed?\nLABEL:", "completions": "rationale"}
{"id": 943, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why are there only 6 pins here, while below it appears to have 8 ADC inputs? Are pin 2 and 5 used for something else on this board?\nLABEL:", "completions": "code context"}
{"id": 944, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think we need an issue to track that chain sync omits BLS messages, and then to fix and test it!\nLABEL:", "completions": "tracking"}
{"id": 945, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: what is this default about? I am not using ngrok atm so would prefer an env var.\nLABEL:", "completions": "environment"}
{"id": 946, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: @Samuell1 Might be better to say \"Automatically check for plugin updates on login\".\nLABEL:", "completions": "wording"}
{"id": 947, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Thanks for the additional Process helper! Can we also cache the first `Process.GetCurrentProcess()` result in a static field so we don't have to repeatedly call it? It means we would also need to dispose it when the static `_runtimeMetricsWriter` instance is disposed\nLABEL:", "completions": "alternative solution"}
{"id": 948, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: just wondering what is the result of breaking the logic we test here? it seems that in that case we will just not return immediately, but i'm not sure whether the test will fail?\nLABEL:", "completions": "code context"}
{"id": 949, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: We should fail the test if this returns `err != nil`.\nLABEL:", "completions": "correctness"}
{"id": 950, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: What is the drawback of not having this flag as a gating condition to report the metric?\nLABEL:", "completions": "code context"}
{"id": 951, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: `getProcessName()` will be less ambiguous, since Caddy has \"apps\" that it runs internally.\nLABEL:", "completions": "naming"}
{"id": 952, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Is there any way to not hardcode this given we know the size in bytes? The public API has the flexibility of being a Span. Should we maybe not do anything printing DML? The runtime allocates the buffer, but it's a \"scratch memory\" area, The delegate gets it passed in and they decide how to use it. Also, how is DML used if the feature is for macOS support?\nLABEL:", "completions": "specialized expertise"}
{"id": 953, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: How about just override the `buildFilter`? Passing another function here is a little weird.\nLABEL:", "completions": "alternative solution"}
{"id": 954, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This should just be a `.Bool()` flag I think, we don't encode anything beyond y/n here. See `$(RUN_CHECK)` and `$(STOP_ON_PKG_FAIL)` for examples of how to pass those in.\nLABEL:", "completions": "alternative solution"}
{"id": 955, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Is this needed?\nLABEL:", "completions": "Necessity"}
{"id": 956, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This code is passing a non localized string when it should be passing in a localized string or it should use the name of the item being deleted.\nLABEL:", "completions": "localization"}
{"id": 957, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: how about moving it under L26\nLABEL:", "completions": "alternative solution"}
{"id": 958, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I think this needs to be tested\nLABEL:", "completions": "testing"}
{"id": 959, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Style/MutableConstant: Freeze mutable objects assigned to constants.\nLABEL:", "completions": "code style"}
{"id": 960, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Just a thought, really. If it's a bug that can be probed for (and it can be - see Adrian's repro) then it could as well be a static initialization of a supplier of Deflater instances; if we probe for a buggy JVM, we return the wrapper. If we don't we return the Deflater. This way on non-affected JVMs nothing happens and if we do use the wrapper, we know the JVM is broken.\nLABEL:", "completions": "alternative solution"}
{"id": 961, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Looks like this should be publicly accessible for tests in any modules?\nLABEL:", "completions": "accessibility"}
{"id": 962, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Allow putenv is necessary to be able to get environment variables with `getenv`?\nLABEL:", "completions": "Necessity"}
{"id": 963, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: use function to check it. - don't do everything in main\nLABEL:", "completions": "structure"}
{"id": 964, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Sorry I'm confused. Why not kwarg this like the others?\nLABEL:", "completions": "clarity"}
{"id": 965, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: First, any changes here should be synchronized with instr_compute_VSIB_index(). Second, the original looks correct to me: the first letter of the opcode name suffix is the index size, while the second is the memory size. So \"vpgatherdq\" is a d-sized index and q-sized memory. The operand size we store for memory accesses is always the memory size, not the address size, and for VSIB we store a single memory element size. It looks like we have no inside-opnd_t storage of the index size: that's done by dispatch on opcode it seems. I have a bunch of notes of discussions on how to handle VSIB: we decided to bail on encoding too much inside the opnd_t I guess.\nLABEL:", "completions": "code context"}
{"id": 966, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Sorry for going back and forth. Adding docstring here would be very helpful for others to understand the need of this method.\nLABEL:", "completions": "documentation"}
{"id": 967, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: You introduced a bug here.\nLABEL:", "completions": "bug"}
{"id": 968, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Should we log a warning/error if only one is specified and not the other?\nLABEL:", "completions": "Necessity"}
{"id": 969, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: `ctx` is unused in GetLatestEvent\nLABEL:", "completions": "correctness"}
{"id": 970, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This looks good to me. Personally, I would have the following for maximum flexibility: * convert peering_port from uint64_t to int. * Set the default value to \"-1\" to specify the value is not set * if the value is -1 then do `config.node.peering_port = network_params.network.default_node_port` That would allow for 0 to mean, select the port number yourself and be more consistent. But I am happy with the change as is, as well.\nLABEL:", "completions": "alternative solution"}
{"id": 971, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: The blank line between the summary and detailed description is better to be kept.\nLABEL:", "completions": "presentation"}
{"id": 972, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Curiously, are these indents intended or should they be aligned?\nLABEL:", "completions": "presentation"}
{"id": 973, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: What if we changed this to this? roleText=attrs.get('roleText', lambda:getSpeechTextForProperties(reason=reason,role=role)) That will prevent the function from ever needing called in the roletext case, and removes that if.\nLABEL:", "completions": "alternative solution"}
{"id": 974, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: This will still result in a safe_read_tls_magic on AMD in tls_thread_preinit().\nLABEL:", "completions": "code context"}
{"id": 975, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Can you remove this change?\nLABEL:", "completions": "necessity"}
{"id": 976, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Oh, was that a bug in the validation?\nLABEL:", "completions": "correctness"}
{"id": 977, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Please use the Google java code style. Basically, add more space characters like in the statements below. Next to method arguments and curly braces. This is currently not checked on CI because it is too inconsistent in the code base but I would prefer new code to be consistent.\nLABEL:", "completions": "formatting"}
{"id": 978, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Actually, I don't think we need to create object on heap.\nLABEL:", "completions": "alternative solution"}
{"id": 979, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: this is a file we copy from gRPC, sp ideally it be fixed upstream as well..\nLABEL:", "completions": "upstream"}
{"id": 980, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: changes like this, just strangle guava usages to be replaced by DelayLimiter into one place\nLABEL:", "completions": "refactoring"}
{"id": 981, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: PropTypes need to be updated accordingly here. Note that the type also needs updating, not just the case. That is, these should both expect a `PropTypes.elementType` now instead of an `element`.\nLABEL:", "completions": "correctness"}
{"id": 982, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: maybe extra paren around `strncmp(...) != 0`\nLABEL:", "completions": "syntax"}
{"id": 983, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: We should call `Windows.onResume `: - When the app is launched for the first time - When the app is resumed after being paused (home button and resume or device goes to sleep) - After a permission prompt is displayed\nLABEL:", "completions": "code context"}
{"id": 984, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Rename to ForksSchedule? Maybe in separate PR.\nLABEL:", "completions": "refactoring"}
{"id": 985, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why a blank line here?\nLABEL:", "completions": "presentation"}
{"id": 986, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I have a sense that this will actually eventually change to check the actual date so that subscriptions can be deactivated in the future. But I mention that here just to keep you in the loop. We should not make that change now, because it's not needed functionality.\nLABEL:", "completions": "code context"}
{"id": 987, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: What is the reasoning for using the negation of `isOption()` instead of simply using `isPositional()` to identify a positional param?\nLABEL:", "completions": "rationale"}
{"id": 988, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Why would you add those if client version min is set to 1100?\nLABEL:", "completions": "code context"}
{"id": 989, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: You can delete this, it will now need to live in `gointerfaces` package\nLABEL:", "completions": "refactoring"}
{"id": 990, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Okay, I still don't understand why you have to add `html_safe` here, and it still seems like a very bad idea. It will allow html tags in the title, and keep Rails from escaping literal greater-than or less-than chars not intended as HTML tags. It ought to work to just let Rails do HTML-escaing as normal, without any manual `html_safe` or `strip_tags` or whatever. I am not clear on what problem you are trying to solve, why the straightfoward approach does not work.\nLABEL:", "completions": "rationale"}
{"id": 991, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: What is is subject when it's not the email subject. Why are we having to do this crap? What's calling this with an empty string?\nLABEL:", "completions": "code context"}
{"id": 992, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Could you also remove the `defaultSamplingProbability` constant from `sampling.go`? It seems to became unused with this change.\nLABEL:", "completions": "refactoring"}
{"id": 993, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: can you delete the `generateDeploymentStrategicPatch` function as well?\nLABEL:", "completions": "Necessity"}
{"id": 994, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: I'd keep this at `info` level...\nLABEL:", "completions": "logging"}
{"id": 995, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Don't use DCHECK to debug your code if it's the regular branch you need to handle.\nLABEL:", "completions": "debugging"}
{"id": 996, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: You should return null here instead. Null is an acceptable default value for the image attribute.\nLABEL:", "completions": "alternative solution"}
{"id": 997, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: react bails as well?\nLABEL:", "completions": "code context"}
{"id": 998, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Can you please tell me why you did this?\nLABEL:", "completions": "rationale"}
{"id": 999, "prompt": "Classify code change reviews:\n\nREVIEW: Since the change owner is always admin, this code might be able to move out of\nthe loop? The following should be enough for this\nLABEL: alternative solution\n\nREVIEW: This is now an empty heading. Or do you feel it is important to point out that these are C++ classes?\nLABEL: correct understanding\n\nREVIEW: Can you explain why you replaced that with this and where exactly was failing?\nLABEL: rationale\n\nREVIEW: In what situations would [this condition] be false, but not undefined?\nLABEL: code context\n\nREVIEW: Is this needed?\nLABEL: Necessity\n\nREVIEW: Lars, Simon, any ideas? We really need to fix this for [the next release] and the\ntime draws nigh\nLABEL: specialized expertise\n\nREVIEW: This looks like an unrelated change. Should it be in a separate commit?\nLABEL: splittable \n\nREVIEW: I think it\u2019s really neat that he uses enhanced for loops.\nLABEL: algorithm\n\nREVIEW: This is not DRY, as you have the same test: one in the if statement, and the other in the while.\nLABEL: algorithm\n\nREVIEW: Inverting lists and printing them, we don\u2019t do that. That is when we need to have a separate function for inverting and a separate function for printing.\nLABEL: structure\n\nREVIEW: you rarely have too many classes\nLABEL: structure\n\nREVIEW: I think that is very nice, very symmetrical. I like symmetric code; if you do similar things they should be similarly formatted.\nLABEL: presentation\n\nREVIEW: Old code and ordering for code in a file. Instance variables at the bottom of the module.\nLABEL: presentation\n\nREVIEW: The comments should be at a higher level of abstraction. You should describe the intent behind what you are doing, not provide a textual version of what follows.\nLABEL: documentation\n\nREVIEW: I would prefer that variables, if they contain multiple words, use camel casing, so I can easily read them.\nLABEL: documentation\n\nREVIEW: Reading this again it should prob prefer the `videoConstraints.facingMode` value over `facingMode` if the former was already set\nLABEL:", "completions": "alternative solution"}
