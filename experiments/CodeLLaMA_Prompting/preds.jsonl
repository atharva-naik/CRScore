{"pred": "This code switches the transport to grpc which changed how the client is generated. It is likely that this might change how the main class for the services look amongst other things.", "gold": "can we also test for `transport=rest`?"}
{"pred": "I see that code change was made 'abstract class AbstractSolrBackendFactory implements FactoryInterface' was change to protected function createBackend(Connector $connector). We also see new code is \"The code creates a new object of type Connector \" and the abstract functions is change to protected createBackend(Connector $connector). The new object  will  be used in the behavior of the constructor and the previous has been replace with a new one that was specified", "gold": "If record_batch_size is not set in config.ini, this code will trigger a notice about an undefined value. I would suggest either wrapping the setPageSize() call in an `if (!empty(...)) {` check, or else providing a default value in the set call (i.e. `$config->Index->record_batch_size ?? 100`)."}
{"pred": "This javascript should be used to track usage in the new code. the key of the analytic.js is therefore replaced with the ENV variable for analytics. this is done so that the app can pick this up when deployed to production. As per the dev's feedback its supposed to be more dynamic and reflect the key that is need to track.", "gold": "I didn't realize we were hardcoding this, thanks for moving it to an env value."}
{"pred": "The new code change was an attempt to make the size readout in the dashboard more safe.\nIn the old code the size is also shown when the file has no data, therefore returning NaN. This leads to a broken look so the new code was written to use a ternary expression to only display the data when it is a valid number.\n\nWhat do you think of this code change? Is it effective? Explain your answer.\n\nStrengths:", "gold": "We are trying to support IE 10-11, so we'll need a polyfill for this one, I think."}
{"pred": "In new code added the component is now using the new \"isNavigating()()\" method in \"useSelect()\" which returns boolean value, indicating if the user has triggered the navigation ...", "gold": "It looks like there's a new `isNavigatingTo( url )` selector for this very purpose so let's use this here instead. This way we just need to use the one selector rather than two. Let's assign that to a similar-named variable here (e.g. `isNavigatingToPostResetURL`) rather than the prop it's used with."}
{"pred": "\"If we change im2col to take a reference argument to constant a Mat or AbsMat object, then you are giving it encouragement (by keeping im) not to make a copy of the Mat you pass as im. In the im2col of input, you basically just called the overloaded im2col, which in turn called the overloaded im2col on the im. If you want to stay within the same im2col overloads, then just pass im without using", "gold": "I think im2col should only accommodate CPUMat."}
{"pred": "The reviewer has added another line under the import line \"from google.cloud.forseti.notifier.notifiers.email_violation import EmailViolations\" which imports the function EmailViolations. The function EmailViolations accepts an object of type scanner_dao, an object data access, and four more variables for the subject, invoice number, and duty address.\nRunning the new code will return an internal server error because", "gold": "alpha sort the imports"}
{"pred": "Changing the old code to new code will definitely take less memory now and calculate the expected function.", "gold": "Can you explain why is this necessary? Is `snprintf()` with four integer arguments unsafe?"}
{"pred": "The old code had a hard dependency on the keyboard layout being retrieved for the thread with focus (using the keyboard layout from another thread might cause unexpected issues). The largest change introduced by this code change was that from then on they could try to retrieve the keyboard layout from other threads. The code might fail to get a keyboard layout even when it should be possible if the user has one or more extra keyboard layouts, also the fact that the foreground thread may change in a specific time (e", "gold": "How likely would it be that the keyboard layout for the NVDA main thread differs from the keyboard layout of the currently focused app?"}
{"pred": "The new code service field is optional, So  there is a need to check\nwhether the service is given else the function will get the default service.", "gold": "Would you mind removing the default parameter above? (I doubt I'll ever use defaults again since you still have to protect against callers explicitly passing `null` or `undefined`)"}
{"pred": "The old code had incorrectly scheduled the command to the WebDriver, which would result in a fact that more of the code that the author had not intended to be written, since the code wasn't really broken, but rather obsolete. In particular, the old code would have effectively been setting a parameter set to a `Promise` that would never get resolved.\n\nThis is a classic example of a vulnerability caused by not carefully looking at the code and paying attention to", "gold": "Also update line 2205 below"}
{"pred": "Based on the code change I can tell you that it is a new addition to the `ProvisioninHostPath` method in which they created a new `shared` value which is not present in the old code.\nIt looks like it's a new parameter to the method that is initialized with the return value of `volumeConfig.GetSharedMountValue()`.\n \nThis value is used in the `cSpec` method inside the `if nil != err` clause,", "gold": "n_: It is a good practice to name the variable to indicate what they contain. In this case since `shared` is supposed to have boolean, calling it: `isShared` can help in the readability of the code."}
{"pred": "A new feature was added to automatically freeze the given column. The first version did not freeze the specified column. Basically, the previously available function freezeColumn() did not freeze a column and it was the task of the user to do the freezing. The new property grid manualColumnFreeze will allow that the column is frozen based on its current position. To freeze the specific column is the task of the user. The code shows the new public API replacing the existing private", "gold": "I suppose it's a false-positive error. Maybe there is a way to configure the `eslint-*` package to accept `i.e. .... lower case` syntax  "}
{"pred": "Was the intent of the committers to ignore the activity.ParentId? If so, design wise is this ok?\nWas the IgnoreParentIdAnExpectedBehavior() method designed well and to achieve the correct results?\nWhen would you expect the parentContext to be set to the activity context?\n\nI think that the committers wanted to ignore the activity.ParentId somehow when the ParentSpanId is 00000000000", "gold": "this maynot be a perf issue, if ToHexString() is not actually allocating a string, but returns the caches string value. to be confirmed."}
{"pred": "The code had a line if len(updates) == 0 { which had the function for logging information about errors from the image-updater. Now, a new line of code -w.logger.Info has been added to log the name of the image-provider. This is added near the existing error logging.\n\nTwo different loggers are used in the added and exsting loggers lines, so we might end up with isomorphic equality in logs, e.", "gold": "`zap.String(\"image-provider\", provider.Name())` should be in a same line."}
{"pred": "The code change is a minor efficiency, minor feature, or non-coding change in their computer science course. The move of the default value:||300 to the parameters creates the parameter longer - increasing the readability of the function and leaving a clear indication of the parameters function. This is also consistent with JavaScript coding standards. Prior to the introduced change, the viewer should read the definitions of the variable 300 as part of the function which leads to reduced code", "gold": "Why this deletion?"}
{"pred": "This commit added the method. 'assertIn' which checks that an item exists in the some iterable or not. This is the better approach than using 'assertEqual' in case the functionality returns a multivalued data with a meaningful delimiter as well. Using 'asserEqual' one needs to put both the values (our expected and actual value) in the test case. As such if there is a huge data to wrap the singlecase then it will yield a more difficult to understand", "gold": "This change looks unrelated to the CL description?"}
{"pred": "In previous example, missing 'n' in DEDUP_RESUTL_CHECK macro changed checking result fake DEDUP_RESULT_CHECK = DEDUP_RESULT_CHECK", "gold": "I'm not certain that `res`+`utl` isn't a thing."}
{"pred": "New Class Added: FetchActiveFlowDao\nModified classes:  FetchActiveFlowDao\n\nReason and Approval: New Class - FetchActiveFlowDao\nStatus.EXECUTION_STOPPED\".getNumVal() is added to the list of filtors.\n\nUnion and Approval: Same\n\nPlease take a note that FetchActiveFlowDao is the name of a class, while FetchActive", "gold": "This method can cause bugs. Why don't you use list of finalize statuses and then use join by comma and that will give you correct value. Use Apache Commons Lang library List<Integer> list = Arrays.asList(1,2,3,4,5,6,7); String str = org.apache.commons.lang.StringUtils.join(list, \",\"); You can use it at multiple places shown in this diff."}
{"pred": "From the added code, it is clear that we have to check the dev->_device is null value or not.If it not null value,then conversion happen for the current device type.Also, Before initializing the wlr_input_device, should check the null value of dev.If it is null value,then assignment of default value will happen for the wlr_input_device.\n\nNow generate a thorough review of the following code change:\nReview:", "gold": "Merge with next condition"}
{"pred": "The old code had two interfaces, taskDeployer and taskRunner. Before, taskDefiner implemented the taskRunner interface but had no DeleteTask function. Now the new code added a DeleteTask method to the taskDeployer interface and implemented it in the taskDeployer type. The old code did not needed this method.\n\n\n## Question\n\nTo ensure the TypeScript interface is consistent and safe, the old code\u2019s taskRunner interface did not have a DeleteTask", "gold": "Maybe add it when it is used."}
{"pred": "This is a code change to DO NOTHING, the same code was present in the new code. I am actually not sure what the purpose of this code change is.\n\nWould you know if this code change actually does something? By analyzing the code and the context, can you give a detailed explanation of what this code change has done?\n\nI am just looking for a brief explanation of what this actually does. Perhaps giving them a code snippet to demonstrate the existing and", "gold": "More clear naming: NONEXISTENT_ENABLED"}
{"pred": "This code is reviewing the compatibility notion between two types. This was implemented before this review, so this practical section should focus on generating an appropriate review for this change.\n\nAuthorship: ??\nTitle: Compatibilty of Types", "gold": "why is this change necessary?"}
{"pred": "The previous version used a null pointer test to handle null type instances. However, the newer version eliminates this test using an isEmptyType() method implemented\non the TypeModel interface. Several code changes occurred in the process:\n- The return was modified from \u201cnull\u201d to \u201cjava.lang.Void\u201d to represent the type Void.\n- The name used to lookup the query was changed from \u201cnullFullName\u201d to \u201cjava.lang.Void\u201d.\n-", "gold": "make a SchemaTypeNameConverter.getTypeNameForEmptyType() and call that here."}
{"pred": "The previous code defined the lang property within the constructor to \nonly have a value once the Oject is initialized on a request. This \nresults in querying the session service each time the plugin is used. \n\nWith the new changes, the lang property is now initialized to \nthe default language locale first if there is no session, and then \nchanges to the request language locale if there is a session, thus \nsaving a single query for each request", "gold": "Use braces on your conditional structures please"}
{"pred": "The DECLARE_string macro in the old version has been declared for the local namespace, and the new code has replaced it with the DEFINE_bool macro, which has been declared for the namespace nebula. The string POST has been added, and the mean is \"Whether to force saving the command history\". Moreover, the logging is done using a mutable, which cannot be updated at compile time.\nCompare this project with an existing codebase and use lead your peer Ref", "gold": "Great God, I have a question. This \".nebula_history\" file is used to save history commands. Is there a file size limit? When the file is large, does it take a long time to start initialization (loadHistory)? How did you think about this? Thx."}
{"pred": "This editing of this function changed the actor from the valid token function to the ingenious tonic. The previous function  did not validate any tokens after that there were opened parenthesis type tokens read. This was done to correct an issue with incorrectly generated parenthesis with single inheritance. It cried out to be taken a baby step at a time and to accomplish one thing at a time. This change seemed like the better option for the problem that was occurring. The previous review of the", "gold": "Isn't this the same check as two lines above?"}
{"pred": "Initially, the code used filepath utils to explicitly import files.  However, the following code is trying to determine CS CA\u2019s path from the user\u2019s environment.  We can get the environment by using the os module. Importing the relevant library is a matter of importing os and using the known functionality to fetch the user\u2019s environment variables:\nThe new code updates the user\u2019s directory of the Lab on your local machine.", "gold": "Don't redefine, just import the existing one in `cmdline.py`. :)"}
{"pred": "In the old code, the condition provided in an if statement is used explicitly to check whether the hash store_as holds the corresponding alias for the variable (also a string) name(please check naming conventions again). Then, the name variable is redefined, then the below clause checks whether the model respond_to?(\"#{name}=\" i.e. whether there is a setter on the Class model for attribute name or not. Lastly, a method eligible for", "gold": "why not call `respond_to?(\"#{name}=\")` from the `if` line?"}
{"pred": "This code is adding a class named \u201cBlazeCidrLauncher\u201d that is extending an existing class of \u201cCidrLauncher\u201d. This class is using the \u201cfinal\u201d keyword to tell Java that it is a final class and can\u2019t be inherited from hereforward. The class is also adding a workingDir variable that is of a \u201cpath\u201d type. The class is creating a new class called \u201cGeneralCommandLine\u201d and then adding parameters at many places throughout the", "gold": "This was properly set above as `<target>.runfiles/<workspace_name>` (with a fallback to workspace root dir) but never used past this line."}
{"pred": "- I had to ask my partner to review it with me as I couldn't make heads or tails of it", "gold": "Are all these namespaces required for this attribute?"}
{"pred": "Look at the following code change:\nOld Code:\nmodule Beaker\n           result.stdout << std_out\n           result.stderr << std_err\n           result.exit_code = status.exitstatus\n         end\n       rescue => e\n         result.stderr << e.inspect\n         result.exit_code = 1\n       end\n\nNew Code:\nmodule Beaker\n           result.stdout << std_out\n           result", "gold": "Given this may be used and printed in other ways, isn't `debug` more appropriate?"}
{"pred": "The review starts off by saying that the old code defines a function that takes a block id and its disk storage location as an argument, removes the block or block metadata from it\u2019s disk file, performs a check on the metadata to see that the block actually exists, and returns an error (if it is nil it means success).\n\nIt is clear that the block id is a unique identifier that references a block and that special file system calls are used in the code which prevent everything to", "gold": "Looks like this is unused? Did you mean to call it when clearing the block journal?"}
{"pred": "The new code has an extra instance variable that gets assigned in the constructor, and an extra parameter to the constructor. In the constructor, it call three new methods, setupExecutors, loadRunningFlows, and updatedStats (not shown). The methods it calls in loadRunningFlows are identical to the old method that is now deleted because that code has been moved to the class definition. So since we have a new parameter and new instance variable, and the only code inside the constructor has changed", "gold": "why named alters? how about this.alerts = alerts?"}
{"pred": "The subj. is a change in JetStream. (JetStream is a part of the NATS suite which includes JetStream).\nThe change is with the stream config description. It now includes Sources and Mirror. (The information still exists in the StreamInfo but now needs to be explicitly requested by clients.)\nThe overall structure of the code remains the same but with the addition of a new field in the StreamInfo struct.\nNew functions and method for clients that explicit", "gold": "not sure if this has to be here or not tbh"}
{"pred": "I added a minor changes that made it so the topic name can still be under 50 characters and didn't see any tests to fail.", "gold": "There's a better fix for this in #1741, which should replace this."}
{"pred": "Changing Address from string to []byte.\nTaxonomy/Divide: change-from-string-to-byte.\nType: Situation.\nTaxonomy notes: Changing from a string to a byte.\nTaxonomy keywords: no-op\n\nSomething had to change this code. We can see this because the func signature is the same, that means something changed _inside_ the function, not the structure of the function. My first thought was that", "gold": "Use swarm.Address not []byte as type, and construct it from actual byteslice or use swarm.NewAddress if it is constructed from hex-encoded string."}
{"pred": "In the old code cleanup of temp dir should be done by defer.\nBut in the new code, it seems clean up of the and the defer block\nis moved to defer function.\nCode improved quite a bit by adding RemoveAll in cleanup itself.", "gold": "It would be worth factoring this out to a function, but you don't have to do that here."}
{"pred": "The \u201clinkifyUri\u201d method now performs HTML formatting before returning the result.  This modification allows the output to be parsed to locate tags. \nThe natural progression of the development would be to create methods like \u201clinkifyAnchor\" or \u201clinkifyImage\u201d or \"linkifySummary\" et al. \nWhich would lead to an even more complex set of methods for those wanting to call these. \nThis lack of method encapsulation would make that harder to", "gold": "There's no need for `final` in interfaces."}
{"pred": "As compared to the old code in this case, our newly changed DatadogTags were changed to use DatadogTags.ServiceVersion and then stored in Our Span using .SetTag(Tags.Version, value)", "gold": "Isn't this case handled as a custom tag in `Span.SetTag()` below? This switch is only for special tags that actually set `Span` properties."}
{"pred": "Hi there,\nI'm writing a review of this code change. Our code is slightly different,\nand I'm also not a fan of anagrams. However, I do think there are a few\nimprovements we can make. Let's look at our old code, shall we?\nWe have a Quitter function, which takes two arguments: session and save.\nSave appears to be a boolean which tells the function to save our windows.\nO", "gold": "This shouldn't be changed."}
{"pred": "The new code is adding one more year of copyright to the existing code which is\n2014.\n\n\n(Python2.7)\n\nThe professor would like to use the rev module to review a file. Given the\nfollowing as text in a file controlled.c:\n#ifndef ...\n#define ...\n#endif\nint main()\n{\n\tputs(\"hello\");\n}\n#ifdef DEBUG\n...<admin", "gold": "This one is important `2: I102 copyright year is outdated, expected 2014 but got 2012`"}
{"pred": "The code change provides a more appropriate buffer for communication, the addition of the \u201cimport java.util.function.BiConsumer;\u201d and \u201cimport java.util.function.Consumer;\u201d makes the code more readable.", "gold": "Are these imports needed (BiConsumer and Consumer)? If they are unused imports, then precommit will fail."}
{"pred": "This is a new class for the job gem. There is code to rotate uploads in the remove(event) method. It rotates image, audio and video files.  After rotating the file the location of the file is used to rotate the media object using paperclip. I enclosed around a begin and rescue block just in case the media object doesn't exist which can happen if the event owning the media item is deleted.\n\n https://github.com/Work", "gold": "Why are we catching and logging exceptions? By doing that we make it look like the job has succeeded and it will be removed from the queue - if we didn't do that then it would stay queued..."}
{"pred": "Another major change in your CartController, in the original code, you have a facade. \nIn the facade, ac product can only be in one cart of a customer, there is a uniqueness validation\nThis change add:\n - If somebody clear his cart, when you refresh the cart page there no problem. \n - You iterate in all items of cart, so if 2 customers created new cart at same time and one add a shared product to the other", "gold": "If there are `@param` tags in docblock, there should be `@return` tag also. (applies for a whole file)"}
{"pred": "Method of declaration has been modified. BesuMetricCategory has been changed from Enum to final class. BesuModules has been added to create the packages for new code. All previous methods have been corrected as per declared methods.\n\nAs expected, other classes which created coddependant methods required some other improvement as per code convention. As per code convention, default metrics has been changed to private; according to the principle of \u2018Least privileged\u2019 which means an object should be", "gold": "Is the concept of validators exclusive to IBFT2? I wonder if this category should be more explicitly linked to IBFT2."}
{"pred": "The code changes in the file prior to the package statement, and there is a new import statement according to Crypto\u0434\u0430\u0432\u044f\u0441\u044c.\nPrevious code adds a new import statement of org.hyperledger.besu.crypto.SECP256K1 which is not needed. Added crypto classes imported java.util base imports.\n\nScore: 2", "gold": "Spotless is configured to reject star imports. Please replace with explicit imports."}
{"pred": "The kernel as implemented before, can be multi-threaded but not in the same way that the same kernel as done now on the same device. This change resulted in a new buffer to ensure transfer of variables between blocks. As done in the new change, a new variable was pushed through i.e: m_maxShmemPerBlock. The change in the new kernel implementation maintained the implementation of the other synchronizations through sycl in the case of multi-threaded kernels", "gold": "Remind me why you are using CUDA vocabulary when naming these variables."}
{"pred": "This change introduced a change in using a new feed filter where it will perform a check to see if the feed has a counter of six. To do this, it will query the feed database to count the feed(s) downloaded from each URL. If a feed is downloaded with a counter of six, the feed will skip the download process.\n\n\nTo improve the performance later down the road for the reader. the client needs to do this brightly and hopefully the product can be activ", "gold": "Please turn the iteration order around (instead of `0...size` to `size...0`). The reason is that this sometimes skips indices when removing an item. You can therefore end up with feeds that have counter 0 and are still displayed."}
{"pred": "Okay, there was a redundant check in the `get_subset_pipeline()` function before the `return` statement. As it was redundant, it is not needed anymore. The above-mentioned redundant check was removed and the code seems more concise now.", "gold": "this is a behavior change. solid_subset=[] represents an empty pipeline where as solid_subset=None is the full pipeline"}
{"pred": "Changes LogError to LogWarning by loads file only one time and tracking unmatchedSettings. Also changed Exception to ArgumentException instead of merely plain Exception.\n\n\nExplanation Vlad Buckov, a Telerik Software Engineer, answered on February 27, 2015:\n\nThe explanation is pretty clear. The changes are:\n\n1. Changed LogError to LogWarning, which will allow only a warning instead of an error. The problem", "gold": "this is a breaking change, any specific reason you want to do this?"}
{"pred": "This code change modifies the nodeChainReader interface in order to provide support for adding tipsets and states to the node. It also provides a function to set the head tipset which will now be called every time a new tipset arrives to the node. It also provids methods for PutTipSetAndState and GetTipSetStateRoot to help other pieces of code on the node to know the current state of the node and d if the node is caught up or if", "gold": "Blocking: we still want read write separation. Node functions should absolutely not write to the chain store and the interface should reflect that. Only the syncer should have this capability in production code. It should be no problem to keep casting chainForTest to a read-write interface, or doing other function decomposition and automatic casting tricks."}
{"pred": "In the said file, constants are defined for worker and queue sizes. The minimum prefetch worker queue size was changed from 1 to the defaultOnDemandRequestPriority-1 which could be too big for some systems and in another update, minimalPrefetchWorkerQueueSize, testPrefetchWorkerQueueSize, workerQueueSize were updated to use highest priority for the queue size similar to testBlockRetrievalWorkerQueueSize. LowestTriggerPrefetchPriority constant", "gold": "The PR description says the lowest on-demand request priority is `2^30`. Why the `-1` here?"}
{"pred": "The basic game structure has changed from an execution type to a computation- and data type, and it is expected to be more faithful in the ecs paradigm. and memorization for life, damage and other computation and data that belongs to it. For more consideration of memory management, I have modified the code to remove the creature object, only memory to store the id and position of the player plus algorithms related to question parsing the sprite to the id.\n\nHow would you rate the", "gold": "checking health again? I think it is not necessary."}
{"pred": "File:typhaConnection.go\nChange: add new loop in Start() function\nAffected function: Start()\nAffected part of the code: Go function\nStart function with retries to connect to Tropha if fail.\n\nCode style:\nnew line after block", "gold": "Need an `if err == nil {break}` above this line so that we don't log/sleep if the retry succeeds."}
{"pred": "The first thing that is going on is that whenever a new variable is created, it is assigned the type of function. We are also telling the employee that it must be a function, and finally, if it is not of the type function, it will throw a new error, and if it is a function, they should be able to use the Promise that is being created.", "gold": "to reiterate my point above, this class is not the actual provided Promise, but rather something a user can provide a Promise to/with. I think a name like `PromiseProvider` is more appropriate."}
{"pred": "In an attempt to make things better, the programmer added queue task feature. After check with everybody, they found it's better idea. The condition of adding queue task is unqualifiedly better than pre Python3.\nIt's kind of hard to understand why QueueTarget can return error, as the only negative return value is NoSuchTargetError, and it might occurs when target labels not exists, or dep is mapping key. But we need to figure it out.", "gold": "I guess we can only call this from a post-build function, but we might need to check that this target is to be built? I guess target A depends on B which has a post build. We `plz build :B` which adds C as a dep of A. Won't we queue C to be built even though it only needs to build if A needs to be built? That's kinda why I approached this the way I did. I trust you've thought about this but would be good to understand this a bit better."}
{"pred": "This is a code review for a function called sndrcv() in which some parts of the code \nare modified. The reason for including it all at once is that some parts \nare deleted, others changed. On the other hand, the losses are \ncomparative to the gains. Looking at the above modified code \nand describing what could be some of the improvements done, \nit is clear that similar points are mentioned more than once here.", "gold": "You should use `isinstance()` instead of comparing the class name to a string."}
{"pred": "In the `axe.utils` function for element `isHidden`, this change enforced that the function could return false in two more contexts. \nThe function's new default value just relies on the isVisibleTree function to return true if and only if the icon node is shown. \nThis function simply returns false if the node type does not equal 11 (Node.DocumentFragmentNode) or if the icon element is neither `VIDEO` nor `", "gold": "Why should audio and video elements always return `false` for `isHidden`?"}
{"pred": "How does removing the Comment Sign, impact the application? Will it still work as intended? Please explain your answer.\n\nCompare and Contrast Three Great Programmers \n\nWhat are the similarities between Dijkstra, Knusax, andTuring? Please explain you answer.\n\nDijkstra(Netherlands) gets his nickname from the Dutch word for \"eagle,\" which he obtained his degree (He he he he eagle he said", "gold": "This obviously won't work for all the other platforms."}
{"pred": "", "gold": "Isn't he diamond operator Java7+?"}
{"pred": "Welcome to my first change version  function! \n(v1.0.1) Actual version 2-0-0 \nRequiresib fixed a few of its is methods. Also, several new methods have been added to increase functionality.\n\nTransitive& strict has maintained its without effectiveness. just having used functions required for other methods are not exceptional. On the other hand, this function ignores the addition of satisfactory satisfy Kent &", "gold": "Prefer adding a second `positive(String, double)` that delegates down to this three-param version. Using `null` in code is generally Not A Great Idea, and it looks ugly."}
{"pred": "This name rule strips new rules from the plan. It returns the source node, so it can be re-executed. An additional parameter has been added to the rewrite method, and a generate global id number. This id number will be added to the replace node, making it unique in the interpreter.", "gold": "This pattern, where we add a new parameter without using it, often indicates to me that we've got a leaky interface or abstraction. I see this pattern _a lot_ in this patch, so wondering you have thoughts about it."}
{"pred": "In the code change provided, we see a change from old code to new code in the WriteWordpressConfig function. Basically the old code ensures the directory is writable by changing the chmod value, whereas the new code ensures the directory exists and is writable and creates the directory if it doesn\u2019t exist. Although they are trying to solve different problems in slightly different ways, it appears both codes could potentially have problems. What are two potential problems with these codes? (Be", "gold": "This seems like an improved pattern :)"}
{"pred": "The code change changes the login process for the user controller. Originally, the login process uses a user verification tool called OpenID. In the new version of the code, it uses OpenID instead. For the login controller, using OpenID was changed to implementing OpenID. OpenID is an identity verification protocol that allows people to access their users information without actually remembering their passwords. It integrates with many windows ID's  and other relevant management systems in order to make it", "gold": "`open_id_authentication` is no longer the name of the function, and it's not OpenID specific"}
{"pred": "Remove \"Wallet\" word from wallet balance page in rai's mobile GUI for consistency with desktop\n\nLook at the following code change:\n\nOld Code:\nvoid rai::state_block::visit (rai::block_visitor & visitor_a) const\n{\n  visitor_a.state_block (*this);\n}\n\nNew Code:\nvoid rai::state_block::visit (rai::block_vis", "gold": "This didn't require corresponding changes to the test case(s)?"}
{"pred": "The addition of a field EnvFile is an update to the TaskConfig struct in the core/Task package. This was done to allow the tasks to support an optional parameter in the YAML file known as the env_file. This file path is used to load environment variables and will be treated similarly to environment variables such as the ones defined inside of a task's exec block. \nThe 'addition' of this field is a feature addition to existing code and will not break", "gold": "A question! I think `string` totally works, but what do you think of `*string` for consistency?"}
{"pred": "Here there is a change to the code because:\n if we want to commit code that:\n* Inject optimized labels in the existing definitions of AWS availability zones.\n* The Azure availability zones are attached to existing labels\n* Attach predefined annotations to the existing frameworks adding limitations and avoiding to create a lots of custom annotations.\n\n\nLook at the following code change:\nOld Code:\nimport (\n\t\"encoding/base64\"", "gold": "Should this be: `aws.infrastructure.cluster.sigs.k8s.io` instead?"}
{"pred": "The \u201cYprd\u201d in :\nEf[0][1] = Ef[1][0] = 0.5 \\* h_rate[5] / domain->\\textbf{Yprd};\nEf[0][2] = = Ef[2][0] = 0.5 \\* h_rate[4] / domain-> \\textbf{Yprd};\nEf[1][ 2] = Ef", "gold": "Not clear on why this change is correct."}
{"pred": "My first observation is that the class name ByteBuffersIndexInput remains constant. But now, the class has implemented a RandomAccess interface. For developers who are not familiar with RandomAccess interface, this interface is used to read the data in an absolutely random manner, and this interface specifies two read methods \u2014 one secures reads against java.io.IOException and one new read method.\n\nIn the old code, the method randomAccess() did not appear anywhere, and in the", "gold": "Hi Simon. Whether this should return true depends on what byte buffers are used? The same applies to ByteBufferIndexInput, actually... I don't think you can generally tell whether the ByteBuffers the input operates on come from a mmap call or from somewhere else (even direct buffers don't have to be a result of mmap)."}
{"pred": "First, we added padding: 0 to the code because it can see what each item represents as the code is rendered in a storybook. However, it does not add padding in the format of (a,b,c,d) as with margin(:tb).", "gold": "All stories in this file also need to have the default padding."}
{"pred": "This code is changing the way the link list it created. New widget is being linked after the sibling\u2019s parent_pending_link.prev link, rather than relying on the unnecessary wl_list_remove and wl_list_insert calls. So code is more organized, meaning can be used with fewer links.", "gold": "I don't think these asserts are necessary, because `subsurface_find_sibling` already searches in the parent. Or am I missing something?"}
{"pred": "The only thing changed here is that freshcop will know the lecture is published so he doesn't call \"-I don't believe you. Don't be mad please??\". Look for what is new??? Why did I highlight here??", "gold": "Should this be `number` instead of `id`?"}
{"pred": "The old code creates a Trafodion external name when a NATable is created and neither external table access nor allow external tables flags are set.  Allow access through the Trafodion external name created for the HIVE object if the external flag exists \nThe new code uses the allow external table flag to determine if access to the HIVE object through NATable is possible unless external table access is enabled\nPrevious Code:\nif (! (table->isExternalTable()", "gold": "I have forgotten why we thought this restriction is necessary. A user registers a Hive/HBase table with us but is not able to use the table with the registered name in DML. Will UPDATE STATs will be on the original name too (and update stats code will find out registered name and use it for Table_uid?). This was the registration concept is almost like an internal implementation idea, at some point could even be done by some utility program for all existing Hive/hBase tables, and the user need not be aware of it? I am struggling with a user would want to register a table, if they cannot use it by that name."}
{"pred": "The Core-Capable Class needs the ability to interact with the \"host to Cloud Xapp\".  Hence the following class variables have been added keeping a record for stats with a Server Socket triggered by the host Cloud Xapp. The global variables have been retained in the old code, and the new class variables have been added to the New Code.\n\nSummary:\n{...}", "gold": "Should most of these non-globals be static?"}
{"pred": "The old code uses methods that have been updated in the new code. In the new code, method for first and last names has been added to respective test methods. The other difference is that the old code uses one test method and the new uses three test methods to test each method. So, using the new methods improves the definition and readability of the code.", "gold": "Please do not approve PRs without tests!!!!"}
{"pred": "In WebEngingveView class, the new function \ndef shutdown is there with self as the argument. The shutdown function does\nnot perform anything. The old code has the extra function. The change does\nnot make any major modification or change to the views.\n\nIs this review correct? Does this affect the impact analysis?\nAnswer:\nYes\n\nAfter you have added a brief review, go back to the full impact analysis\nand highlight or underline", "gold": "Now that you handle this in `webenginetab.py` you can undo all the changes in this file."}
{"pred": "The following code change is merely a syntax change that generates a new entry point to handle exceptions. Before the change to the code, the application could crash without the opportunity to debug the problem since the configuration tells JavaFX to handle any exceptions with the base handle(e) method. The current version of the code will now emit appropriate debugging and error messages.", "gold": "I think we should log the exception to a log file instead of printing it. The current behavior (not catching the exception) should lead to an automatic print of the exception to the terminal/console."}
{"pred": "When comparing the old code to the new code, we can see that some changes have been made to the code in the Apply() function within the Helper struct.\nThe most important difference between the two code segments is that the change log message level has been changed from Error to Warn.\nThis change will log the same entry into the log, but at a different level.\nThe other main difference is that the code now returns changeTracker.GetResult() instead of having", "gold": "These changes to the resource helpers have some more far-reaching implications as they also affect calls made in hive-operator, I believe. It's probably OK still, though. Ideally, the resource helper would not be the one doing the logging, since it cannot know the severity, but that is well beyond something that we should tackle for this PR. I would rather have the hive-operator log warnings than have the syncsetinstance controller log errors."}
{"pred": "This code change changes the\nparentCategoryId\nto\nparent_category_id\nin the\nExportCategoryTableMap\ncn.php\nfile. Calling\nparentCategoryId()\nnow returns\nparent_category_id\n. It also makes changes to the\nbuildRelations()\nmethod\n. The\nCASCADE\nON DELETE.\nThe ON DELETE command is changed to null\n. If we add ON DELETE CASCADE", "gold": "do you really want to change the behavior on foreign key ?"}
{"pred": "The change modifies event_batch_destroy by replacing the old code within the if (batch->state_trans) { block with new code:\nif (json_array_size (batch->state_trans) > 0)\n    event_publish_state (batch->event, batch->state_trans);\n             json_decref (batch->state_trans);\n\nThis code change increases the code coverage by ~5%. The outer block and some inner", "gold": "Looks like my bad. Thanks for fixing!"}
{"pred": "This code change seems intentional, as everything else in the code block I don't see any difference. The last line modification is the one that sticks out with great attention to details. I believe the author of the patch got busy and left a typo in the code. I would like to comment on the related issue (bugzilla or gerrit issue ID). I think the patch owner would benefit from having a code review, where a template of the domain that the function plays in will", "gold": "I think \"Don't replace variables ...\" would be cleaner."}
{"pred": "The following code change  changes the type of the \u2018projection\u2019 parameter\nof MPLPlot class from ObjectSelector to Parameter. This change means the previously\nassigned \u2018projection\u2019 is from ObjectSelecter which is a parameter with fixed set\nof valuess. So, it was not supporting new values, but with the new\nimplementation as Parameter, it supports new values without modifying\nthe whole codebase. The \u2018projection\u2019 property can be easily extend for adding", "gold": "Do you validate the possible strings? I've not read the code below but we should make sure if a string is supplied it is validate..."}
{"pred": "In the new code file, there are several changes. \nFirstly, the 'diskNames' variable is appended with the 'generateDataDiskName' function's return value.\nSecondly, the 'diskImporterDiskName' and 'scratchDiskDiskName' variables are appended with 'fmt.Sprintf' in the old code, which has been removed.\nThirdly, these two variables are appended with a new function", "gold": "I'd recommend using generateDataDiskName here as well -- might as well benefit from the safety that it gives to protect yourself from future changes to w.ID()."}
{"pred": "To address an issue with position of files in a Manifest, the Spark-Related Repo restructured the unified logic for . Parquet and . ORC files. In particular, Parquet files no longer include Manifest metadata in partition values, and position is now read from exif metadata\n\nQuestion 5: To analyze this, developers used the mvp-promotes-graceful-degradation-instead-of-throwing-exceptions", "gold": "qq: do we want to include anything in the name to indicate that it is a position in the manifest?"}
{"pred": "The code change adds a simple test for a paused composition. The situation where a running composition should start before it gets paused is already written as being one of the supported cases.\n\nWhat is the intention of the code change?\nResume respective compositors as applicable.\n\nWhy was there no test to handle this situation previously?\nThere hadn't been any situation in which a resume instruction follows right behind a pause instruction without any interruption.\n\nUpdated code now does what", "gold": "These logs should probably use the `LOGTAG`"}
{"pred": "The import section of the given code has been directly changed without any modification to other sections.\n\tThe constant section has not been changed.\n\tThe only change done entirely is going from the link\n\tgithub.com/mysteriumnetwork/wireguard-go/device\n\tand \n\tgithub.com/mysteriumnetwork/wireguard-go/tun\nto github.com/golang-zx2c4/wire", "gold": "From this, it was clear, that we are using our version of wireguard-go. And now it looks like we are using original packages which is confusing."}
{"pred": "The SetValue function is named as Fail and they are used to pass the errors, now the code introduces a new variable e and this variable is the Exception which was passed the constructer and it is calling an extension method ToStirng with the Current Exception (this keyword is used here because) and again it is passing an error object to it property which is of an error and it is getting printed which is bad for the performance and the develoepment or the maker", "gold": "Any particular reason for this? This potentially will make harder to investigate users issues"}
{"pred": "The function arguments for Blockly.BlockSvg.prototype.updatePreviews have been modified. The function previously checked whether ((closestConnection != Blockly.highlightedConnection_)) and then checked specifically if ((Blockly.localConnection_ != localConnection)), if that connection existed. The input has now been changed to simply checking that the current connection does not match the closest connection, and then additionally checking if the current connection is different from the local connection (previous issue).", "gold": "Do you also need to check if Blockly.localConnection_ is non-null?"}
{"pred": "Based on Plagiarism Check [https://www.plagiarismcheck.eu/best-paper-generation-software/]\nTyping Speed [https://www.typingclub.com/typing-speed-test/]", "gold": "Not really a container, and it's not just about non-config data, not sure of a better description, @myronmarston ?"}
{"pred": "In old code, the code included imports from the 'stream' package. In the new code, the module.exports is called. the old code did not have exports with codes exported, the new code is sending out to the file the module.paths of the original nm, imports, and the functions of the functions of the package @aws-sdk/client-s3.", "gold": "The desktop app will load this fine. on iOS I get `TypeError: undefined is not an object (evaluating '_$$_REQUIRE(_dependencyMap[8], \"stream\").Readable.Readable')` if I change it to `const Readable = require('stream').Readable;` or `const { Readable } = require('stream');` I get undefined errors from the stream on iOS: `[TypeError: stream.on is not a function. (In 'stream.on(\"data\", function (chunk) { return chunks.push(chunk); })', 'stream.on' is undefined)]` What am I missing?"}
{"pred": "The change to the \"Put\" function in the \"MockStorer\" repository introduces a small memory increase.  Before the change the chunk data is stored exactly as it is received.  After the change the data is copied into a new slice to protect the received data from external modifications by accident.  The \"copy\" function has not been demonstrated to be inefficient thus introducing memory leaks.  If memory is in fact a concern I would either recommend the changes to be done on", "gold": "this is needed since the chunk feeder shares memory across calls to the pipeline. this is in order to avoid multiple allocations. this change mimics the behavior of shed and localstore, and copies the data from the call into the in-memory store"}
{"pred": "When I looked at the above code change in the repo: I saw that the GlobalTracer value was set in the init() function instead of the TestHandlerSuccess() function. I think that changing the order in this way was done so that the runner could more quickly exit and reduce the time posting the files. I feel that setting GlobalTracer in the TestMain() function as it seems.", "gold": "wut. We can do this at the beginning of tests if we want right? Why are we depending on init?"}
{"pred": "This patch introduces a design flaw in the case of non-GW or client connections.\nIn the old code, the library assumed that server will never talk to a client.\nWhereas in GW and client connections there will only ever be client to server communications and there are only 23 servers.\nSo the lock srv.mu is held for almost 2 seconds.\nSo we are introducing a long term lock of the srv.mu in", "gold": "Same trick here IMO."}
{"pred": "The old code initialized the pointer element as nil and the new code initializes the pointer_element as nil or passes the origin. Also, the new code initializes the duration from milliseconds to seconds if provided and if the new code is used, the user won\u2019t be required to know that the new code has changed the scale of a duration from milliseconds to seconds. The new change makes life easier for the users of the new code.\n\n\n3) Consider the following code", "gold": "Should be `@origin = element || origin || POINTER`"}
{"pred": "Significant change was made to write upgrade functionality for cstor pool claim.\nIn old code, only upgrade for single cstor spc was configured. Upgrade was enabled only when value was passed to --spc flag in commandline.\n\nIn new code upgrade is enabled for both single and bulk iterations. If multiple cspc names are provided in stingbuilder separated by comma then the bulk upgrade from commandline would take effect or else single cspc upgrade.", "gold": "this example needs a fix?"}
{"pred": "The \"close\" function is provided with static storage duration that stores\na \"struct roots_view\". A new sampling is also declared. It states that a\n\"struct wlr_xdg_popup\" should be embedded in \"view->xdg_surface->popups\". It \nboasts a temporary sampling \"popup\". This fun checks each time a \n\"wlr_xdg_surface\" is embedded in \"surface->popups", "gold": "Is it safe to assume this surface is a toplevel?"}
{"pred": "What changes occurred in the code? What is the reason for the change?\nReview:\nWhat are the goals of the code change?\nReview:\nAre there any errors in the code? Do the tests separate from the functions perform an error check similar to the code change?\nReview:\nAre there any inconsistencies in the code? Are they intentional or unintentional? Do they match the result of the tests?\n\n#elif GDAL", "gold": "we don't need that function"}
{"pred": "This code change modifies the enum \"Platform\" to add a new category which is windows 10. \tAt this point, there is little change to the code because it does not affect any of the given features. \tIt would be similar of adding a new other feature to the code since it will not affect the same code.", "gold": "we'll also have to think about adding \"Windows Server 2014\" or whatever they come up with later."}
{"pred": "The following code is adding a method called executorfetchActiveFlowByExecId() to an interface, it will take the argument integer, execId, and will thow an exception of type ExecutorManagerException. The method will return a Pair<ExecutionReference, ExecutableFlow> instance. The method will query the database for an executing ExecutableFlow instance. Then, it will use the execId as a parameter to the query to fetch the relevant execution. Upon failure, it", "gold": "curious do we have an API to fetch an inactive flow?"}
{"pred": "Don\u2019t really understand the need for nodes. However, to me it seems like upgrading node is just making it  easier to read. \n\nIs it doing something other than converting nodes into vnode. If thats the case, why did they remove create element in the code. Was createelement being used FOR something that they might need/want to check for in the new code?", "gold": "This branch is not needed anymore because every `vnode` that passes through `h` in compat or core will have the `$$typeof`-property now ."}
{"pred": "The previous example was written in the irresponsible style of making the code reflective about its own global scope. Now the definition for shoudMatchElement (the function that was used directly in the previous example) has been pulled out into something more logical and functional. The utilization of getComposedParent in the closure ensures that it has access to the function. It also cleans up the previous code and makes it easier to read, as the definition of this closure has been removed", "gold": "Did you mean to use `hasAttribute`? You shouldn't. This does not improve performance and it messes with the readability."}
{"pred": "I am really confused about this code change. I don\u2019t know whether this change is on the right track or not. The reason why I say this is because there are so many import names changed in this patch. For example, as we see in the new code, original code change happens outside of the name_space function.It imports CallbackChecker from helpers.utils instead of helpers.stubs. I see also a few import names are deleted.\n\nLike", "gold": "Please import modules and not classes (except for Qt stuff)."}
{"pred": "This code change extends the abstract class `AbstractJavaNode` and overrides the `setImage`method that updates the image of the node to a string passed to it. It then the code change passes the image of the node and the ID of the node(Optional) to its superclass. The code change by `setImage` obeys the Open Closed Principle because you are open to creating new nodes while keeping the original class unimodified.\n\nNew code", "gold": "Hm... why do we have a \"DummyJavaNode\" in src/main? Looks like, this should have gone into src/test...."}
{"pred": "This code change corrects a typo in one of the cas specific annotation keys from \"Kies\" to \"Key\" as required by the v1alpha1 version of the developer's API version because the former would not pass validation.", "gold": "This seems meaningless. If we cannot add any info let us remove this."}
{"pred": "This code change is regarding 2 features:\n1. Port binding and returning \n2. Health status checking\n\nThe new GetPorts method is added enabling clients to retrieve a container's binded ports.\n\nThe HealthStatusShouldBeReported returns true if the health check is defined in the task definition", "gold": "Can you rename `Ports` to `PortsUnsafe`?"}
{"pred": "This code adds two things compared to the old code to add security. \nFirst it adds a token as a double checked way of user validation, stored secret_key_base, validating it's passed on the Request object.\n\nThis is double checked as any corrupting of key would generate invalid signature code.\n\nThis code review will compare only the the letsencrypt security related bug fixes.\n\nFirst Let's talk what this codebase is,", "gold": "This feels like it could be moved out to your first gem!"}
{"pred": "The new code added the concept of an identifier. It added an identifier argument to every one of the methods called on the object to allow for identification of which of the methods the object implementers are building because there is more than one NewSessionQueue implemented i.e. each implementer will act based on which requestId was passed in. So if you want to poll for the NewSessionQueue that corresponds to your requestId, be sure to pass in the same requestId when you call poll", "gold": "The expected behaviour for `poll` would be to match what `Deque` does, which is: > Retrieves and removes the head of the queue represented by this deque As such, you shouldn't need the `RequestId` here."}
{"pred": "The addition of the axe.utils.uniqueArray function protects against lexical injection vulnerabilities by verifying that the values received are array literals and that they are able to be\ncast to \"safe\" values. Doing this ensures that our values are secure since they are only able to come into array literals in our function and not as arbitrary user input. For this reason, it is not necessary to verify the check-sensitive function. The code appears to", "gold": "This is super minor, but it'd be nice if this iterated over an arbitrary number of array inputs."}
{"pred": "On Unix systems, readlink is invoked passing a hardcoded string of arguments, which are:\n  /proc/<process_id>/exe\n In order to find the path to the current executable (aka, the path of this process's executable on disk)\n  and check whether gdb is attached.\n\n  If we have previously allocated memory, we have a buffer which should be of the proper size for the latest GLIBC\n  implementation of readlink", "gold": "What is the problem here? The commit message has strange wording \"readlink is defined with restrict pointers\": do you mean \"restricted\"? Is that a well-defined language term? I'm not sure what it means."}
{"pred": "For generation of ruby classes, the new method com.google.api.codegen.util.ruby.NameFormatter::format(com.google.api.codegen.util.Name) is added, which removes making the use of NameFormatter::initials(com.google.api.codegen.util.Name) and NameFormatter::honorific(com.google.api.codegen.util.Name) methods for formatting.", "gold": "Why are we not wrapping here?"}
{"pred": "This change changes type of method parameter parameter of class ParameterFilterData from Parameter to Parameter or null. There is a loss of type safety.", "gold": "I though that all data objects are being unified in the fashion where all default values are initialized in constructor, are not they?"}
{"pred": "Neither version of the code is much used or well maintained.\nWhile this change has not contributed significant value to the repository, this change changed the version of package in ast/mod.rs to 29b25b75a01cf1e1ac2b52d99b91986cec32011dc55af1ffd7f145838fce858d", "gold": "Does this file actually need to be committed to git? Having to run `make generate` is rather tedious on each PR and it conflicts easily."}
{"pred": "The updated code changes in this section are useful for increasing security through a few key ways:\n-\tEvery instance can locally overwrite their application credencials.\n-\tYou should have visibility of a variable to name paths. More famous to variable names than absolute paths.\n-\tSeperate the security levels of execution enviroment from the code you are executing and the environment in which the code is being executed. One only needs to provide the path normally and they can overwrite it", "gold": "We don't need this anymore, as Google's library handles various auth mechanisms for us. We'll be less explicit about why we're failing but we gain support for several authentication methods- swings and roundabouts!"}
{"pred": "This is a huge change that add the ability to store an open file descriptor.\nWe don't know what are really stored in that they are allowed to store any file descriptor. Sensitive\ninformation is being stored into a file.\n\nNumber of lines code added: 224 with end of file so 225 lines.\nChanges to packaged library\nYes, add lib.\nNumber of changes: 28.\n\nNumber", "gold": "No need to speficy attribute here. Moreover in yaml it is default to use lowercase names."}
{"pred": "Adding using for System.Linq in the new code adds a new namespace so that the compiler can access the Linq extension methods to do LINQ query style operations on sequences of objects. Also, adding the Task = using at the end indicate that both System.Threading.Tasks.Task class and System.Threading.Tasks namespace are available under 'Tasks' identifier. Therefore, using Linq and Task extensions without specify their namespace name is possible from the compile.", "gold": "In general I'm a trying to understand the reason behind this PR. Looks like if a blob (name) already exists we check if the contents are identical? In what scenarios this is not the case? When we want to publish a package/asset that has changed but still we want to use the same version?"}
{"pred": "The code change involves adding what is known as User Agent header to call to get blacklists .It ensures that the website receives header defining which browser it should support when accessing the site. Although not stated in the source code ... , they hope this will resolve \"403\" issues they may encounter with some specific websites.", "gold": "Can rename `req` to be `opener`, since that is the object, and it wraps `req` internally?"}
{"pred": "The developer has added the line:\n\n\tbreakpoint=attrs.get(\"breakpoint\")\n\tif breakpoint: textList.append(breakpoint)\n\nIn the first version of the method the get method was called only if the attribute defined by attrs.get(\"line-prefix\") exists. Now the developer has added a new optional attribute (breakpoint) to the function: with this change the method will execute the if clause only if the attribute exists even if", "gold": "@MichaelDCurran, thoughts on adding a breakpoint format field attribute? It seems almost app specific, but I guess it does seem odd abusing line-prefix. Is there any more generic concept here?"}
{"pred": "This code change removed the duplicate code by creating two different functions and calling it efficiently at the correct syntax.\n\nThe first change added a statement that called the element width_as_base64 function if class _w3c evaluated to True. The same way it added a notation if _w3c evaluated to false.\n\nThe advantages of this change in the code are first and foremost dirineness. This just makes the code readable since it has removed all the", "gold": "This would return a tuple of two dictionaries. You need to combine them and return a dictionary"}
{"pred": "The addon ssm package is being added in the existing project in the internal package under pkg folder. This package is used for all the ssm related packages. The internal/pkg/ssm, internal/pkg/store/ssm was used.\n\nAt the beginning of the new addition. The archer, manifest, secrets manager, workspace packages are added. These are used to create and manage all the application resources. \n\n Therefore, adding these packages", "gold": "What do you think of moving the example to the help text of the prompt? and the prompt itself can be \"What is your application's GitHub repository URL?\""}
{"pred": "The major code changes are two lines commented out in\nreferring to a TimeStamp, corresponding to the event when when cheese was\nmelted. An attribute was added to cheese's event as well, but because there\nare changes to the current code and uncommented areas, I cannot verify \nwith confidence the changes made to Grating cheese, Melting cheese, \n(the timeStamp) or cheese event. Though the below", "gold": "Break out tests for events into their own tests rather than placing them in other ones. That makes it easier for us to figure out where problems lie and to do a TDD-driven implementation over new APIs."}
{"pred": "This code change required no change at all in the old code. The main difference is that the extra check is carried out in the new code.\nThis code change required no change at all in the old code. The main difference is that the extra check is carried out in the new code.\n\nAll of these are fairly effective types of optimization, but they are not 9\n9\n\n[Conclusion](#Conclusion)\n\n* What do you think about the additional constraint", "gold": "Nice use of std::distance. I'm a bit worried about first += 9 though."}
{"pred": "The old code did not contain the key:value substring pair \"app.kubernetes.io/part-of=prometheus-operator\".\nThe new code did have the key:value substring \"app.kubernetes.io/part-of=prometheus-operator\".\nThis adds a label to the kubernetes objects represented by the node that the kubelet operates in.\nWhat is significantly different between the old code and the new code?", "gold": "Shouldn't this be `app.kubernetes.io/managed-by` as prometheus-operator manages this resource, but this resource isn't a part of prometheus-operator?"}
{"pred": "The reviewer rules out the possibility of one of the methods of Equals being overloaded so that there would be a method that is called other than the one provided in the old codepace of the task number Source:\n\nNew Code: Equals method to string. Mention the original Alon Fliess, simplified solution to replace two strings in String comparison. Random samples of reviews: One of the notable improvements brought about by the use of a simplified approach is its ease of use.", "gold": "As long as we're being extra-vigilant about NREs, should we check that `httpMethod` and `requestUri` are not null?"}
{"pred": "The new version of the iotex project updates with an xrc20 module allows IOV users to interact and transfer IOV apart from other IOV related actions. By implementing the xrc20 module we can make the iotex eco system more robust for users and also adding more cases of such as IOVC,IOVP.\n\nExplain any challenges you faced while making this change use cases and reasons:\nSome of the challenges we faced while implementing", "gold": "No need to have `xrc20` alias"}
{"pred": "The code change converts the pipeline_def parameter from a pipeline definition to a generic instance of DefineCtor, which is a wrapper class that provides a parameterized constructor. This feature makes it possible to pass different types of arguments to the \u201cdefine_context_cls\u201d method using this instance\u2019s named parameters. This feature is especially useful when implementing graphql-backed interfaces for Dagster pipelines.\nHere are some potential benefits of this change:\nFirst, it simplifies", "gold": "the naming convention I'm been adopting if `_type` for instances of these classes. So maybe `context_config_type` is a better name for this fn"}
{"pred": "This code change adds a Boolean variable and sets its initial value to false. This will allow there code to \ndifferentiate mainnet and kovan network, both using different variation for GPU mining, geth has several variation \nto mine (GPU, QUAD, CPU)' and so others(miners). also includes miners argument into the constructor\n\n\nKnown Bugs & Bugs to fix:", "gold": "Don't call it GPU mining, call it `externalMining`, here and throughout."}
{"pred": "The change adds two new properties imageQuality to the media, media service and enables the storage for this service.", "gold": "`within this with` typo, should be `within this width`"}
{"pred": "The change adds the +k8s:openapi-gen=true annotation to the struct of the type prometheus in the lines begin and end that makes automatic generate the current CRD by the ApiBuilder tool.\n\nNote: Instead of saying \"add the annotation: +k8s:openapi-gen=true\", which is what the question actually asks, a possible shorter/better wording is \"set the annotation: +k8s:openapi-", "gold": "how come this is false?"}
{"pred": "The purpose of this change is to type check command line parameters and verify that the number of parameters passed to\nthe function matches the number of arguments expected by the function. It is assumed that although function no longer work,\nparameters were previously passed correctly using other means of protection. This makes me suspect that function might\npreviously be called directly from the commandline without arguments, and accepting all that is passed as arguments. Hence,\npassing in the wrong number of arguments or passing the", "gold": "How about `Object.prototype.toString`? Or using the `typeof` operator?"}
{"pred": "Uses unnamed parameters. Old code adds \u201cctx\u201d via assignment immediately following declaration. New code does not. Context parameter needs to be added.\nYes; Increases maintenance and code-duplication Debt, reduces code properties, and pollutes project-namespace with one function that\u2019s called only in one place. Yes, taking steps to improve code should always be sought, but with a heuristic of asking when the gains far outweigh the costs, rather than", "gold": "I know @jzila suggested this, but I disagree: you're really not supposed to save a context in a struct. Can you get by with just saving the `Done()` channel instead? The `ctx` should continue to be passed around explicitly."}
{"pred": "IsWindows = PlatformApis.IsWindows;\nAnd\n          var isDarwinMono = !IsWindows && PlatformApis.IsDarwin;\nNow compare the original code and the code after the change. Review the two definitions of isDarwinMono. Compare the two definitions in terms of variable assignment to check for bugs in the code. Use the two code definitions to make up a story explaining the relationship between the two variables in terms", "gold": "This check isn't right though."}
{"pred": "A new public abstract method named override codeGenVersion returning a String object introduces to the DynamicLangXApiView class. The missingDefaultServiceAddress puts language into missingDefaultServiceScopes, without comment.\n\nQuestion:\nAre you suggesting that we still find a reference to missingDefaultServiceScopes in missingDefaultServiceAddress? Which class and method are you referring to?", "gold": "maybe `toolkitVersion` instead? It doesn't necessarily have to be called that in the generated code, but in the view model classes, I think it makes it clearer that it is the version of toolkit itself."}
{"pred": "The change from the code in old code to new code is that the variable response was replaced with the variable uploadResp. This variable was used to update file state in the plugin\u2019s constructor and to emit an upload with the file, body, and uploadURL. It is now being used to emit an upload with file, uploadResp.\nAlso we have detailed the user about the upload of the file.", "gold": "the response data was added intentionally in #612, i think we could keep the `setFileState` stuff here as a special case, at least for now "}
{"pred": "The code first decides whether it is going to import fire.\nThis decision first ensures that the select statement is evaluated in the future from its return value. Calling time.After(d) in a select statement returns a read-only channel alternative that will return the zero value after d holds. The channel by itself is never written to; instead the select statement removes the channel from its consideration forever. It has no effect neither on the timing of deadline nor on the read-", "gold": "This isn't really easy to read."}
{"pred": "Good change. The change is a little typo correction and it is a concise code.", "gold": "This line changed due to go formatting. Format was not there earlier."}
{"pred": "For the added value in the new code; Notes on the pros and the foxes of the changed code [Added Value, Pros, Cons].", "gold": "The name \"Without\" in code is a little nebulous. Maybe something more descriptive like TrimPrefix or StripPrefix or WithoutPathPrefix or something like that. (Thoughts?)"}
{"pred": "The previous code for the method linkDataset does not ensure that dataSets cannot be linked to the same dataverse again, which is what the commented-out code that was removed did.\n\n-------\nRank/Amplitude\nConsidering the above mentioned code change is there anything you find surprising, assuming you have read all the proposed changes in the SO thread?\n\nYou have an idea of the kind of answer i was hoping for. No surprises, testing against", "gold": "is this test in the move tests? I see what you mean then - it works, but I wonder if we won't lose track that it's being tested here."}
{"pred": "We have a new member added to the Instance struct called SecurityGroups. This is a map[string]string and is associated with Tags which indicated Tags was the last member on the struct before this changed. This indicates that a new member was added to the third position. This is an important information in the project because it shows the order and organization of data members of the Instance struct. This is important because the Instance struct will be used in an AWS API call to spatialTo", "gold": "I'm not sure if this wanted to be `json:\"tags\"` (which I'd set in my PR) or `json:\"tag\"` that someone elses PR had set. Given that the rest of the fields had their JSON field name set to the same as the struct field name, I opted for `tags`."}
{"pred": "This added a scope to allow for user queries of a given fiscal year.", "gold": "since the logic here and in `Proposal` is exactly the same, do you think it makes sense for us to include it elsewhere? I am not opposed to duplicated code when it makes sense, but the reason I first identified this was that I was looking for code in NCR::WorkOrder that was not specific to Work Orders. Seems like fiscal year logic might be helpful for reporting for other clients. In that case, we'd want this scope on those client data classes as well. Might be wrong to include this in the FiscalYear mixin, but it does seem like it should be outside of Proposal and WorkOrder. Does that make sense?"}
{"pred": "The code change only involved changing the use statement creating to log.info for better logging.\n  There was a change of creating a on_connection_closed and connecting the connection to rabbitMQ if the connection closes.\n  This surrounds the original connection behavior statement.", "gold": "there is no static method as a go between -- how does this work?"}
{"pred": "As we can see, the old code is longer in length than the new code. The only difference between them is a single new field called stringified_symbol. In the new code, it's specified that the value of stringified_codom_symbol will be of the object StringifiedSymbol. Therefore, including Mongoid::Document means that the class is inheriting from that module. By including Mongoid::Document, we also get an array of this class as a field,", "gold": "Can you please change the name of this class to be something else?"}
{"pred": "which argument has been added to the h2o_next_token function: a new int named coma_separator. If it is available, how would we edit or rewrite the h2o function in order to use this new argument? Write necessary modifications. In order for the coma_separator argument to be available to h2o functions, we would either need to add a formal parameter with that name to the prototype of the function that is calling it\nor modify the code", "gold": "I think we might prefer generalizing the interface rather than creating an exception. Current design of `h2o_next_token` assumes the input to be a comma-separated list, and allows the caller to specify a different separator when parsing a nested list. As I understand, what we are trying to attain in this PR is to have a way of parsing a flat list of semicolon-separated list. Assuming that is the case, I think it would be better to change the API of the function to accept two separators (i.e. inner and outer), where for our existing use-cases `outer` would be `,`."}
{"pred": "The code change is a straightforward change. It replaces instances of the LruCacheWithRecycling class with the LruCache class. It seems like the code is more efficient, but it's not entirely clear. According to the Android source code, this change is making use of the new LRU-based cache, which can make memory management more efficient. However, more information is needed to evaluate the major changes in the code.", "gold": "why not recycling? I Lru cache now recycling?"}
{"pred": "First, it is obvious in the new implementation, method is renamed to \u201cConsume\u201d from \u201cProcess\u201d is a no-brainer. Even though it looks like it is minor change, it is a semantic change that can be heavily used in some edge case scenarios.\n\nHowever, changing the variable name is not a big change by itself. The\u0436\u0443 understand the second part of the implementation. ConsumerInfo.PaymentVersion is the extracted field. Before it used to only able", "gold": "Why it is now called `PaymentVersionV3`?"}
{"pred": "The code is introduced to reduce the output of klog.infof into the log files. In kubernetes 1.7, the klog library was updated to include V(4) as a new logging level, which resulted in additional output to the stderr. The existing code included 20 klog.infof lines, logging a lot more output than necessary. The downstreamController is affected, which means a lot of output was being written to the kubernetes log files.", "gold": "changed for debug purpose?"}
{"pred": "The code is in the OnShutdown method of the OpenTelemetry.BaseProcessor class. \nOn a review, it appears that this method doesn't return a result.\n\nAlso there is an method by name SetParentProvider of type void defined after the OnShutdown method but inside.\nIn general both operations seems to be common for external observers to do not have access to them: OnEnd method of the public class and another SetParentProvider.", "gold": "@cijothomas I needed a way to set the Exporter.ParentProvider when the Processor's gets set. Internal to SDK though."}
{"pred": "The new code has a new function with the name isRampClass() in util/node_based_graph_qgis.cpp. This function takes 4 arguments: edgeID, Node-Based-Dynamic-Graph, from_motorway and classicRoad. \nThe new function checks and returns the road's classification ramp or link and the default implementation to return is based on the function from previous classfication.\nThis document includes an ab", "gold": "Talking through this scenario with @srividyacb and she's wondering if there should also be a check of `(from_trunk && node_based_graph.GetEdgeData(eid).flags.road_classification.IsLinkClass())` as highways with trunk classifications can also have this scenario."}
{"pred": "master_certname should be used instead of the master. The find the \npuppetagent certname which is the node name of the machine on which the \npuppet agent runs, master_certname should be returned instead that \nmaster variable.", "gold": "where does `master_certname` come from?"}
{"pred": "The old \u201c__all__\u201d line states that \u201chrnet\u201d is not in the list of __all__ which means normal usage will lead to an ImportError when hrnet is needed. Creating the new __all__ line that includes \u201chrnet\u201d will correct this, allowing normal usage to find the module.", "gold": "The line breaking is unnecessary."}
{"pred": "The code change involved altering the code in the \u2018datasetloader\u2019 module for the \u2018SetHeader() function\u2019. The old code used tab as the delimiter between column headings, while the new code uses the \u2018,\u2019 character to serve as the delimiter for column headings. The changes alter the headers to have a \u2018,\u2018 instead of \u2018tab,\u2018 thereby adjusting the headers format.", "gold": "why not enable split by space here ?"}
{"pred": "This change in the code will allow both Integrated devices and discret devices to work.", "gold": "Shouldn't the operator be && ?"}
{"pred": "Today a new feature has been added to the Beaker API, the ability to take and restore snapshots of all hosts being used in a Beaker run. This method makes use of the snapshotting provided in github.com/scalefactory/vagrant-multiprovider-snap. The original vagarnt_cmd method changed to support this back to snapshot saving and restoring. The method has been extended by two methods that take a snapshot by name before the Be", "gold": "My best guess is that you want to use host.name in these parts to get the name of the host ?"}
{"pred": "In the previous version of the code, the if statement pasted checks to see if the next byte is the same as a zero byte array. In the new code, this check is entirely gone. Although initially it seems that the code is still checking the value, we know that because of the offset of the binary can't be null, it doesn't really make a difference.", "gold": "IMO this edge case handling could remain here, just instead of overwriting the `n.nodeType`, the `makeEdgeType` method of `n` should be called, so `n.nodeType = nodeTypeEdge` -> `n.makeEdge()`"}
