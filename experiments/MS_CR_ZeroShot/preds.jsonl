{"pred": "nit: space after comma", "gold": "can we also test for `transport=rest`?"}
{"pred": "Why do we need to set this here?", "gold": "If record_batch_size is not set in config.ini, this code will trigger a notice about an undefined value. I would suggest either wrapping the setPageSize() call in an `if (!empty(...)) {` check, or else providing a default value in the set call (i.e. `$config->Index->record_batch_size ?? 100`)."}
{"pred": "Shouldn't this be `<%= ENV.SEGMENT_KEY %>`?", "gold": "I didn't realize we were hardcoding this, thanks for moving it to an env value."}
{"pred": "`isNaN(file.data.size) ? '' : html`", "gold": "We are trying to support IE 10-11, so we'll need a polyfill for this one, I think."}
{"pred": "Shouldn't this be `getNavigateURL` instead of `isNavigating`?", "gold": "It looks like there's a new `isNavigatingTo( url )` selector for this very purpose so let's use this here instead. This way we just need to use the one selector rather than two. Let's assign that to a similar-named variable here (e.g. `isNavigatingToPostResetURL`) rather than the prop it's used with."}
{"pred": "Why not `const AbsMat&`?", "gold": "I think im2col should only accommodate CPUMat."}
{"pred": "nit: `email_violations` is unused.", "gold": "alpha sort the imports"}
{"pred": "please use `snprintf_s_iiii`", "gold": "Can you explain why is this necessary? Is `snprintf()` with four integer arguments unsafe?"}
{"pred": "I think this should be `getattr(api.getForegroundObject(), '_lastDetectedKeyboardLayoutChange', 0)`", "gold": "How likely would it be that the keyboard layout for the NVDA main thread differs from the keyboard layout of the currently focused app?"}
{"pred": "Why do we need this?", "gold": "Would you mind removing the default parameter above? (I doubt I'll ever use defaults again since you still have to protect against callers explicitly passing `null` or `undefined`)"}
{"pred": "`keys.then(keys => keys.join(''))`", "gold": "Also update line 2205 below"}
{"pred": "Why do we need this?", "gold": "n_: It is a good practice to name the variable to indicate what they contain. In this case since `shared` is supposed to have boolean, calling it: `isShared` can help in the readability of the code."}
{"pred": "`freezeColumn()` doesn't re-render the table, so you need to call `render()` afterward.`", "gold": "I suppose it's a false-positive error. Maybe there is a way to configure the `eslint-*` package to accept `i.e. .... lower case` syntax  "}
{"pred": "Why do we need this?", "gold": "this maynot be a perf issue, if ToHexString() is not actually allocating a string, but returns the caches string value. to be confirmed."}
{"pred": "I think this should be `image-provider-name`", "gold": "`zap.String(\"image-provider\", provider.Name())` should be in a same line."}
{"pred": "Why was this removed?", "gold": "Why this deletion?"}
{"pred": "I think this should be `assertIn(check.cache_control, ...)`", "gold": "This change looks unrelated to the CL description?"}
{"pred": "Why did you change this?", "gold": "I'm not certain that `res`+`utl` isn't a thing."}
{"pred": "Shouldn't this be `EXECUTION_STOPPED`?", "gold": "This method can cause bugs. Why don't you use list of finalize statuses and then use join by comma and that will give you correct value. Use Apache Commons Lang library List<Integer> list = Arrays.asList(1,2,3,4,5,6,7); String str = org.apache.commons.lang.StringUtils.join(list, \",\"); You can use it at multiple places shown in this diff."}
{"pred": "Shouldn't this be `dev == NULL`?", "gold": "Merge with next condition"}
{"pred": "Why do we need to add this to the taskDeployer interface?", "gold": "Maybe add it when it is used."}
{"pred": "This should be `ALL_EXIST_ENABLED`", "gold": "More clear naming: NONEXISTENT_ENABLED"}
{"pred": "Why not `to.equals(LongType.get())`?", "gold": "why is this change necessary?"}
{"pred": "I'm not sure if this is the right way to handle this. I think it should be `return \"java.lang.Void\";`", "gold": "make a SchemaTypeNameConverter.getTypeNameForEmptyType() and call that here."}
{"pred": "Expected 1 space after IF keyword; 0 found", "gold": "Use braces on your conditional structures please"}
{"pred": "DEFINE_bool(save_history, false, \"Whether to force saving the command history\");", "gold": "Great God, I have a question. This \".nebula_history\" file is used to save history commands. Is there a file size limit? When the file is large, does it take a long time to start initialization (loadHistory)? How did you think about this? Thx."}
{"pred": "Why did you remove this?", "gold": "Isn't this the same check as two lines above?"}
{"pred": "This should be `os.path.dirname(__file__)`.", "gold": "Don't redefine, just import the existing one in `cmdline.py`. :)"}
{"pred": "`responds = respond_to?(\"#{name}=\") || respond_to?(\"#{name}=\")`", "gold": "why not call `respond_to?(\"#{name}=\")` from the `if` line?"}
{"pred": "Why do we need this change?", "gold": "This was properly set above as `<target>.runfiles/<workspace_name>` (with a fallback to workspace root dir) but never used past this line."}
{"pred": "Why do we need this class?", "gold": "Are all these namespaces required for this attribute?"}
{"pred": "Do we want these to be `info` level?", "gold": "Given this may be used and printed in other ways, isn't `debug` more appropriate?"}
{"pred": "Why do we need this function?", "gold": "Looks like this is unused? Did you mean to call it when clearing the block journal?"}
{"pred": "`alerters` -> `alerterMap`", "gold": "why named alters? how about this.alerts = alerts?"}
{"pred": "why do we need sources and mirror info?", "gold": "not sure if this has to be here or not tbh"}
{"pred": "Why do we need this?", "gold": "There's a better fix for this in #1741, which should replace this."}
{"pred": "Why this change?", "gold": "Use swarm.Address not []byte as type, and construct it from actual byteslice or use swarm.NewAddress if it is constructed from hex-encoded string."}
{"pred": "This should be `require.NoError`", "gold": "It would be worth factoring this out to a function, but you don't have to do that here."}
{"pred": "Why do we need this interface?", "gold": "There's no need for `final` in interfaces."}
{"pred": "Should this be `Tags.ServiceVersion = value`?", "gold": "Isn't this case handled as a custom tag in `Span.SetTag()` below? This switch is only for special tags that actually set `Span` properties."}
{"pred": "Why was this removed?", "gold": "This shouldn't be changed."}
{"pred": "## Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2012, 2014 CERN.", "gold": "This one is important `2: I102 copyright year is outdated, expected 2014 but got 2012`"}
{"pred": "Why is this needed?", "gold": "Are these imports needed (BiConsumer and Consumer)? If they are unused imports, then precommit will fail."}
{"pred": "Should this be `logger.error ex.to_s`?", "gold": "Why are we catching and logging exceptions? By doing that we make it look like the job has succeeded and it will be removed from the queue - if we didn't do that then it would stay queued..."}
{"pred": "`$cartItems` can be `null`", "gold": "If there are `@param` tags in docblock, there should be `@return` tag also. (applies for a whole file)"}
{"pred": "Why do we need this?", "gold": "Is the concept of validators exclusive to IBFT2? I wonder if this category should be more explicitly linked to IBFT2."}
{"pred": "Please don't use star imports.", "gold": "Spotless is configured to reject star imports. Please replace with explicit imports."}
{"pred": "Shouldn't this be `max_local_mem_size`?", "gold": "Remind me why you are using CUDA vocabulary when naming these variables."}
{"pred": "Shouldn't this be `feeds.get(i).getId()`?", "gold": "Please turn the iteration order around (instead of `0...size` to `size...0`). The reason is that this sometimes skips indices when removing an item. You can therefore end up with feeds that have counter 0 and are still displayed."}
{"pred": "Why this change?", "gold": "this is a behavior change. solid_subset=[] represents an empty pipeline where as solid_subset=None is the full pipeline"}
{"pred": "Why did you remove the ArgumentException here?", "gold": "this is a breaking change, any specific reason you want to do this?"}
{"pred": "Why does this need to be exported?", "gold": "Blocking: we still want read write separation. Node functions should absolutely not write to the chain store and the interface should reflect that. Only the syncer should have this capability in production code. It should be no problem to keep casting chainForTest to a read-write interface, or doing other function decomposition and automatic casting tricks."}
{"pred": "Why do we need to change this?", "gold": "The PR description says the lowest on-demand request priority is `2^30`. Why the `-1` here?"}
{"pred": "you should check if creature is nullptr", "gold": "checking health again? I think it is not necessary."}
{"pred": "Shouldn't this be `time.Since(startTime)`?", "gold": "Need an `if err == nil {break}` above this line so that we don't log/sleep if the retry succeeds."}
{"pred": "Shouldn't this be `global.Promise`?", "gold": "to reiterate my point above, this class is not the actual provided Promise, but rather something a user can provide a Promise to/with. I think a name like `PromiseProvider` is more appropriate."}
{"pred": "I don't think we need to queue the dep if it's already in the inactive state.", "gold": "I guess we can only call this from a post-build function, but we might need to check that this target is to be built? I guess target A depends on B which has a post build. We `plz build :B` which adds C as a dep of A. Won't we queue C to be built even though it only needs to build if A needs to be built? That's kinda why I approached this the way I did. I trust you've thought about this but would be good to understand this a bit better."}
{"pred": "`pks.__class__.__name__ == 'StreamSocket'` -> `pks.__name__ == 'StreamSocket'`", "gold": "You should use `isinstance()` instead of comparing the class name to a string."}
{"pred": "Shouldn't this be `el.nodeName.toLowerCase()`?", "gold": "Why should audio and video elements always return `false` for `isHidden`?"}
{"pred": "Can we remove this?", "gold": "This obviously won't work for all the other platforms."}
{"pred": "Why this change?", "gold": "Isn't he diamond operator Java7+?"}
{"pred": "`positive(argName, number, \"must be greater than 0\")`", "gold": "Prefer adding a second `positive(String, double)` that delegates down to this three-param version. Using `null` in code is generally Not A Great Idea, and it looks ugly."}
{"pred": "`nextNodeId` is unused (from `structcheck`)", "gold": "This pattern, where we add a new parameter without using it, often indicates to me that we've got a leaky interface or abstraction. I see this pattern _a lot_ in this patch, so wondering you have thoughts about it."}
{"pred": "Shouldn't this be `MkdirAll`?", "gold": "This seems like an improved pattern :)"}
{"pred": "Style/RedundantSelf: Redundant self detected.", "gold": "`open_id_authentication` is no longer the name of the function, and it's not OpenID specific"}
{"pred": "Why did you remove the `(XRB)`?", "gold": "This didn't require corresponding changes to the test case(s)?"}
{"pred": "Why do we need this?", "gold": "A question! I think `string` totally works, but what do you think of `*string` for consistency?"}
{"pred": "I think this should be `aws.cluster.sigs.k8s.io`", "gold": "Should this be: `aws.infrastructure.cluster.sigs.k8s.io` instead?"}
{"pred": "Why was this changed?", "gold": "Not clear on why this change is correct."}
{"pred": "Why is this needed?", "gold": "Hi Simon. Whether this should return true depends on what byte buffers are used? The same applies to ByteBufferIndexInput, actually... I don't think you can generally tell whether the ByteBuffers the input operates on come from a mmap call or from somewhere else (even direct buffers don't have to be a result of mmap)."}
{"pred": "Why do we need this?", "gold": "All stories in this file also need to have the default padding."}
{"pred": "`assert(sibling->parent_pending_link.prev == subsurface->parent_pending_link.prev);`", "gold": "I don't think these asserts are necessary, because `subsurface_find_sibling` already searches in the parent. Or am I missing something?"}
{"pred": "Extra empty line detected at class body beginning.", "gold": "Should this be `number` instead of `id`?"}
{"pred": "Why do we need to allow external tables for native tables?", "gold": "I have forgotten why we thought this restriction is necessary. A user registers a Hive/HBase table with us but is not able to use the table with the registered name in DML. Will UPDATE STATs will be on the original name too (and update stats code will find out registered name and use it for Table_uid?). This was the registration concept is almost like an internal implementation idea, at some point could even be done by some utility program for all existing Hive/hBase tables, and the user need not be aware of it? I am struggling with a user would want to register a table, if they cannot use it by that name."}
{"pred": "I think it would be better to use `MAX_USR_INTRS` here.", "gold": "Should most of these non-globals be static?"}
{"pred": "Extra empty line detected at class body end.", "gold": "Please do not approve PRs without tests!!!!"}
{"pred": "This should be `win_id=win_id or self.win_id`", "gold": "Now that you handle this in `webenginetab.py` you can undo all the changes in this file."}
{"pred": "Why is this needed?", "gold": "I think we should log the exception to a log file instead of printing it. The current behavior (not catching the exception) should lead to an automatic print of the exception to the terminal/console."}
{"pred": "Why do we need to change this?", "gold": "These changes to the resource helpers have some more far-reaching implications as they also affect calls made in hive-operator, I believe. It's probably OK still, though. Ideally, the resource helper would not be the one doing the logging, since it cannot know the severity, but that is well beyond something that we should tackle for this PR. I would rather have the hive-operator log warnings than have the syncsetinstance controller log errors."}
{"pred": "Why did you remove the `RESTRICT` relation?", "gold": "do you really want to change the behavior on foreign key ?"}
{"pred": "`if (json_array_size (batch->state_trans) > 0)`", "gold": "Looks like my bad. Thanks for fixing!"}
{"pred": "I'm not sure if this is the best name for this option. Maybe `replace_url_vars`?", "gold": "I think \"Don't replace variables ...\" would be cleaner."}
{"pred": "This should be `param.Parameter(default=None, doc=\"\"\"\")`", "gold": "Do you validate the possible strings? I've not read the code below but we should make sure if a string is supplied it is validate..."}
{"pred": "Why do we need `w.ID()` here?", "gold": "I'd recommend using generateDataDiskName here as well -- might as well benefit from the safety that it gives to protect yourself from future changes to w.ID()."}
{"pred": "nit: `or null if it was not read from a manifest.`", "gold": "qq: do we want to include anything in the name to indicate that it is a position in the manifest?"}
{"pred": "Shouldn't this be `if (mWindows.isPaused())`?", "gold": "These logs should probably use the `LOGTAG`"}
{"pred": "nit: remove empty line", "gold": "From this, it was clear, that we are using our version of wireguard-go. And now it looks like we are using original packages which is confusing."}
{"pred": ">e.Message [](start = 58, length = 10) why not e.ToString()?", "gold": "Any particular reason for this? This potentially will make harder to investigate users issues"}
{"pred": "Why do we need to check for localConnection here?", "gold": "Do you also need to check if Blockly.localConnection_ is non-null?"}
{"pred": "# Internal container for global configuration data", "gold": "Not really a container, and it's not just about non-config data, not sure of a better description, @myronmarston ?"}
{"pred": "Why do we need this?", "gold": "The desktop app will load this fine. on iOS I get `TypeError: undefined is not an object (evaluating '_$$_REQUIRE(_dependencyMap[8], \"stream\").Readable.Readable')` if I change it to `const Readable = require('stream').Readable;` or `const { Readable } = require('stream');` I get undefined errors from the stream on iOS: `[TypeError: stream.on is not a function. (In 'stream.on(\"data\", function (chunk) { return chunks.push(chunk); })', 'stream.on' is undefined)]` What am I missing?"}
{"pred": "Why do we need to copy here?", "gold": "this is needed since the chunk feeder shares memory across calls to the pipeline. this is in order to avoid multiple allocations. this change mimics the behavior of shed and localstore, and copies the data from the call into the in-memory store"}
{"pred": "Why do we need this?", "gold": "wut. We can do this at the beginning of tests if we want right? Why are we depending on init?"}
{"pred": "Why do we need a lock here?", "gold": "Same trick here IMO."}
{"pred": "Why do we need this change?", "gold": "Should be `@origin = element || origin || POINTER`"}
{"pred": "Shouldn't this be `options.cstorSPC.spcName`?", "gold": "this example needs a fix?"}
{"pred": "Shouldn't this be `wlr_xdg_toplevel_popup_destroy`?", "gold": "Is it safe to assume this surface is a toplevel?"}
{"pred": "`new (std::nothrow)` is unnecessary.", "gold": "we don't need that function"}
{"pred": "Shouldn't this be `WIN_10`?", "gold": "we'll also have to think about adding \"Windows Server 2014\" or whatever they come up with later."}
{"pred": "`fetchActiveFlowsByExecId` -> `fetchActiveFlowsByExecId`", "gold": "curious do we have an API to fetch an inactive flow?"}
{"pred": "Why was this removed?", "gold": "This branch is not needed anymore because every `vnode` that passes through `h` in compat or core will have the `$$typeof`-property now ."}
{"pred": "Why do we need to check for `aria-hidden` here?", "gold": "Did you mean to use `hasAttribute`? You shouldn't. This does not improve performance and it messes with the readability."}
{"pred": "Why did you remove `pyqtSignal`?", "gold": "Please import modules and not classes (except for Qt stuff)."}
{"pred": "Why do we need this method?", "gold": "Hm... why do we have a \"DummyJavaNode\" in src/main? Looks like, this should have gone into src/test...."}
{"pred": "// Package v1alpha1", "gold": "This seems meaningless. If we cannot add any info let us remove this."}
{"pred": "nit: `GetPorts returns the ports for a container`", "gold": "Can you rename `Ports` to `PortsUnsafe`?"}
{"pred": "Style/TrailingCommaInHashLiteral: Put a comma after the last item of a multiline hash.", "gold": "This feels like it could be moved out to your first gem!"}
{"pred": "`poll(RequestId requestId)` -> `poll(RequestId requestId)`", "gold": "The expected behaviour for `poll` would be to match what `Deque` does, which is: > Retrieves and removes the head of the queue represented by this deque As such, you shouldn't need the `RequestId` here."}
{"pred": "`axe.utils.uniqueArray = (arr1, arr2) => {`", "gold": "This is super minor, but it'd be nice if this iterated over an arbitrary number of array inputs."}
{"pred": "Shouldn't this be `MAXIMUM_PATH - 1`?", "gold": "What is the problem here? The commit message has strange wording \"readlink is defined with restrict pointers\": do you mean \"restricted\"? Is that a well-defined language term? I'm not sure what it means."}
{"pred": "Why is this needed?", "gold": "Why are we not wrapping here?"}
{"pred": "Why removing the use statement?", "gold": "I though that all data objects are being unified in the fashion where all default values are initialized in constructor, are not they?"}
{"pred": "Why did this change?", "gold": "Does this file actually need to be committed to git? Having to run `make generate` is rather tedious on each PR and it conflicts easily."}
{"pred": "Why is this being removed?", "gold": "We don't need this anymore, as Google's library handles various auth mechanisms for us. We'll be less explicit about why we're failing but we gain support for several authentication methods- swings and roundabouts!"}
{"pred": "Why is this defaulted to /var/lib?", "gold": "No need to speficy attribute here. Moreover in yaml it is default to use lowercase names."}
{"pred": "nit: sort usings", "gold": "In general I'm a trying to understand the reason behind this PR. Looks like if a blob (name) already exists we check if the contents are identical? In what scenarios this is not the case? When we want to publish a package/asset that has changed but still we want to use the same version?"}
{"pred": "This should be `urllib2.build_opener().open(url)`", "gold": "Can rename `req` to be `opener`, since that is the object, and it wraps `req` internally?"}
{"pred": "missing whitespace around operator", "gold": "@MichaelDCurran, thoughts on adding a breakpoint format field attribute? It seems almost app specific, but I guess it does seem odd abusing line-prefix. Is there any more generic concept here?"}
{"pred": "Shouldn't this be `self.size, self.location`?", "gold": "This would return a tuple of two dictionaries. You need to combine them and return a dictionary"}
{"pred": "nit: remove empty line", "gold": "What do you think of moving the example to the help text of the prompt? and the prompt itself can be \"What is your application's GitHub repository URL?\""}
{"pred": "I'm not sure if this is the right way to do it, but I think it would be better to use `TimeUnit.SECONDS.toMillis(1593493828L)`.", "gold": "Break out tests for events into their own tests rather than placing them in other ones. That makes it easier for us to figure out where problems lie and to do a TDD-driven implementation over new APIs."}
{"pred": "Shouldn't this be `std::distance(first, last) < 9`?", "gold": "Nice use of std::distance. I'm a bit worried about first += 9 though."}
{"pred": "Shouldn't this be `prometheus-operator`?", "gold": "Shouldn't this be `app.kubernetes.io/managed-by` as prometheus-operator manages this resource, but this resource isn't a part of prometheus-operator?"}
{"pred": "Why do we need to check `InstrumentationName`?", "gold": "As long as we're being extra-vigilant about NREs, should we check that `httpMethod` and `requestUri` are not null?"}
{"pred": "Why do we need this alias?", "gold": "No need to have `xrc20` alias"}
{"pred": "Why do we need this?", "gold": "the naming convention I'm been adopting if `_type` for instances of these classes. So maybe `context_config_type` is a better name for this fn"}
{"pred": "`gpuMining` -> `gpuMiningEnabled`", "gold": "Don't call it GPU mining, call it `externalMining`, here and throughout."}
{"pred": "I think this should be `(in pixels, 0 = ignore)`", "gold": "`within this with` typo, should be `within this width`"}
{"pred": "Why is this needed?", "gold": "how come this is false?"}
{"pred": "I don't think we need to call `toLowerCase` here.", "gold": "How about `Object.prototype.toString`? Or using the `typeof` operator?"}
{"pred": "Why do we need this?", "gold": "I know @jzila suggested this, but I disagree: you're really not supposed to save a context in a struct. Can you get by with just saving the `Done()` channel instead? The `ctx` should continue to be passed around explicitly."}
{"pred": "Why did you remove the DNX451 check?", "gold": "This check isn't right though."}
{"pred": "Why do we need this abstract method?", "gold": "maybe `toolkitVersion` instead? It doesn't necessarily have to be called that in the generated code, but in the view model classes, I think it makes it clearer that it is the version of toolkit itself."}
{"pred": "`uploadResp` -> `uploadResponse`", "gold": "the response data was added intentionally in #612, i think we could keep the `setFileState` stuff here as a special case, at least for now "}
{"pred": "Shouldn't this be `time.Until(deadline)`?", "gold": "This isn't really easy to read."}
{"pred": "nit: space after `,`", "gold": "This line changed due to go formatting. Format was not there earlier."}
{"pred": "Why is this removed?", "gold": "The name \"Without\" in code is a little nebulous. Maybe something more descriptive like TrimPrefix or StripPrefix or WithoutPathPrefix or something like that. (Thoughts?)"}
{"pred": "nit: `tryToLinkAgain` -> `tryToLink`", "gold": "is this test in the move tests? I see what you mean then - it works, but I wonder if we won't lose track that it's being tested here."}
{"pred": "Why is this a pointer?", "gold": "I'm not sure if this wanted to be `json:\"tags\"` (which I'd set in my PR) or `json:\"tag\"` that someone elses PR had set. Given that the rest of the fields had their JSON field name set to the same as the struct field name, I opted for `tags`."}
{"pred": "Space inside { missing.<br>Space inside } missing.", "gold": "since the logic here and in `Proposal` is exactly the same, do you think it makes sense for us to include it elsewhere? I am not opposed to duplicated code when it makes sense, but the reason I first identified this was that I was looking for code in NCR::WorkOrder that was not specific to Work Orders. Seems like fiscal year logic might be helpful for reporting for other clients. In that case, we'd want this scope on those client data classes as well. Might be wrong to include this in the FiscalYear mixin, but it does seem like it should be outside of Proposal and WorkOrder. Does that make sense?"}
{"pred": "Why is this 5 seconds?", "gold": "there is no static method as a go between -- how does this work?"}
{"pred": "Layout/TrailingBlankLines: Final newline missing.", "gold": "Can you please change the name of this class to be something else?"}
{"pred": "(style) line over 80 characters", "gold": "I think we might prefer generalizing the interface rather than creating an exception. Current design of `h2o_next_token` assumes the input to be a comma-separated list, and allows the caller to specify a different separator when parsing a nested list. As I understand, what we are trying to attain in this PR is to have a way of parsing a flat list of semicolon-separated list. Assuming that is the case, I think it would be better to change the API of the function to accept two separators (i.e. inner and outer), where for our existing use-cases `outer` would be `,`."}
{"pred": "Why did you remove the `Recycling` here?", "gold": "why not recycling? I Lru cache now recycling?"}
{"pred": "Shouldn't this be `PaymentVersionV4`?", "gold": "Why it is now called `PaymentVersionV3`?"}
{"pred": "why V(4) ?", "gold": "changed for debug purpose?"}
{"pred": "Why is this needed?", "gold": "@cijothomas I needed a way to set the Exporter.ParentProvider when the Processor's gets set. Internal to SDK though."}
{"pred": "nit: `from_motorway` -> `from_motorway`", "gold": "Talking through this scenario with @srividyacb and she's wondering if there should also be a check of `(from_trunk && node_based_graph.GetEdgeData(eid).flags.road_classification.IsLinkClass())` as highways with trunk classifications can also have this scenario."}
{"pred": "Should this be `master_certname || host`?", "gold": "where does `master_certname` come from?"}
{"pred": "`hrnet` is not used in this file.", "gold": "The line breaking is unnecessary."}
{"pred": "Why this change?", "gold": "why not enable split by space here ?"}
{"pred": "Shouldn't this be `&&` instead of `||`?", "gold": "Shouldn't the operator be && ?"}
{"pred": "Please add a space after the comma.", "gold": "My best guess is that you want to use host.name in these parts to get the name of the host ?"}
{"pred": "Why was this removed?", "gold": "IMO this edge case handling could remain here, just instead of overwriting the `n.nodeType`, the `makeEdgeType` method of `n` should be called, so `n.nodeType = nodeTypeEdge` -> `n.makeEdge()`"}
{"pred": "Shouldn't this be `showDownloadReport() || showAutoDownloadReport`?", "gold": "Just wondering... The two kinds of notifications are now quite different (Channel, text, maybe even icon). Would it make sense to extract the auto download notification to a new class instead of handling everything in the existing `notificationManager`? I have not checked if this will lead to a lot of code duplication, though."}
{"pred": "Why do we need this?", "gold": "Do we need to put this on the Call? We only need the API communication between the Encoding and the Transports which is currently done through the Transport.Request. The Call is used by users right?"}
{"pred": "Why is this not implemented?", "gold": "`ctx` is unused in GenerateAPIKey"}
{"pred": "This should be `log.Fatal(err)`", "gold": "Can you judge the type of error?"}
{"pred": "I think this should be `np.diff(data) / 2.`.", "gold": "Much simpler than a weird and confusing ``convolve`` call!"}
{"pred": "Why was this changed?", "gold": "Huh, this seems weird to me... Surely the suspenders render was called again in order to get the new `<div>Hello second 2</div>` output... Imma take a peak at these tests to understand what's going on"}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.", "gold": "Since this is just a helper function to create text, perhaps this could live in a helper? I noticed that we have a few other error/message creators in the application controller as well, but I think this type of function should be re-factored to be part of a helper."}
{"pred": "E501 line too long (116 > 115 characters)", "gold": "Will this mess up parsing the messages by other editors? (vscode, vim ...)"}
{"pred": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "gold": "Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping."}
{"pred": "Why do we need to use the pooled block?", "gold": "Why can the pool be null?"}
{"pred": "Why do we need this class?", "gold": "It might be good to have a note here: > work-around for issue #7562 allowing us to differentiate presentational lists from interactive lists (such as of size greater 1 and ARIA list boxes). In firefox, this is possible by the presence of a read-only state, even in content editable."}
{"pred": "Why not `Set<DigraphNode<?>>`?", "gold": "This set of changes is the one part of this that I'm not completely sure is valid. Can someone look over this to make sure I got the E's right?"}
{"pred": "`if (pull.head.is_zero ())` ?", "gold": "There doesn't seem to be a reason to copy this here."}
{"pred": "#include <linux/ebpf.h>", "gold": "We've avoided including h2o headers in BPF programs because it's a runtime dependency. However, IIRC, this is because h2olog was maintained in the separate repository so that h2olog did not know where h2o was installed. Now h2olog can use `H2O_ROOT`, we should add it to BCC's `cflags` in order to include h2o headers in BPF programs."}
{"pred": "nit: `The external Query URL the Thanos Ruler will set in the 'Source' field`", "gold": "I think the docstring here should include the CLI arg `--alert.query-url` just to make it clear to users which setting this uses."}
{"pred": "Why do we need this change?", "gold": "Same change just above?"}
{"pred": "I don't think you need the `asyncTest` here, you can just call `engine.syncTables()`", "gold": "Could you check the result content rather than just the number of search results please? For example with this test if the search engine suddenly starts returning \"latin n\" for both queries, we won't know about it."}
{"pred": "Should this be `agentlessID`?", "gold": "nit: I think that `workloadID` should suffice for this test... that's what we'd be issuing anyways"}
{"pred": "Freeze mutable objects assigned to constants.", "gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping."}
{"pred": "Why is this change needed?", "gold": "We should have a rule to detect identical catch branches"}
{"pred": "Why are these removed?", "gold": "remove these from the targets file."}
{"pred": "Why are we removing this?", "gold": "now that we have the signature in the hive messages, it might be that this must be drastically reduced, since there are limits on the protobuf reader/writers i believe"}
{"pred": "I don't think we need this anymore.", "gold": "I recommend that we move this to be optional, as other users might not need it. Can you look at `OPTIONAL_PACKAGES` section, around line 68?"}
{"pred": "Please don't use star imports.", "gold": "I usually set idea to never use wildcard import such as `import java.util.*;` Now i use setting from javaslang standard."}
{"pred": "`host['ips'].each_with_index do |ip, index|`", "gold": "Where is host['ips'] coming from?"}
{"pred": "I don't think we need this file anymore.", "gold": "oh! missed a `:` here; let me fix that; also can get rid of the intermediate variable"}
{"pred": "I'm not sure if this is the best way to do this. I'm not sure what the best way to do this is.", "gold": "Is this necessary?"}
{"pred": "Why do we need this component?", "gold": "I'd create a different method for each render section."}
{"pred": "`isReverted` -> `isReverted`", "gold": "Instead of storing the revert flag in the tracer is it possible to use org.hyperledger.besu.ethereum.mainnet.TransactionProcessor.Result#getRevertReason? (via org.hyperledger.besu.ethereum.transaction.TransactionSimulatorResult#getResult)? If a TX reverts without a reason do we get an empty revert reason or a revert reason with zero bytes?"}
{"pred": "`readOrcSchema` -> `readOrcSchema`", "gold": "I think this should test with and without container reuse if that is implemented in this PR. Probably just make this test parameterized."}
{"pred": "Shouldn't this be `14`?", "gold": "These modifications allow BaseFile to translate into a SparkRow with the specID as a column"}
{"pred": "Why not just `return readPreference ?? new ReadPreference()`?", "gold": "is this something we've been missing this whole time?"}
{"pred": "Why do we need this?", "gold": "nit: this is a package-wide constant so better to narrow the scope like `allEventsSign`."}
{"pred": "Shouldn't this be `auth_thrift = 'authentication.thrift'`?", "gold": "There seems to be some repetition. Does a local function make this code shorter overall?"}
{"pred": "Why do we need this?", "gold": "Might be cheaper to reuse the `null` assignment of line 313 and set `isHydrating` to null instead WDYT?"}
{"pred": "Why was this removed?", "gold": "Revert this blank line"}
{"pred": "Why do we need to clear these properties?", "gold": "This was introduced recently for the Hadoop 3 upgrade. Copy/paste error but definitely causing some of the new test failures."}
{"pred": "Why do we need this?", "gold": "I think we should only need to do this for `:approve` since we are using `authenticate_user!` for all other actions and that checks for disabled client"}
{"pred": "`assertIn('Content-Length', resp.headers)` should be enough.", "gold": "I wonder if we should create new tests for header checks; here for instance we're mixing querystring and headers. Thoughts?"}
{"pred": "Should this be `apply_helpers::custom_facts`?", "gold": "We should be able to add sensitive by hard-coding the parameters, same as you put into the metadata in apply_helpers."}
{"pred": "Missing license header.", "gold": "Why do you think that it is necessary to create this class?"}
{"pred": "Why are we ignoring the error here?", "gold": "replacing the `1` with `io.SeekCurrent` may be good here"}
{"pred": "Why do we need this interface? Can't we just call `FetchKeySet()` directly?", "gold": "nit: perhaps this file would be better named `jwks_source.go` ?"}
{"pred": "Should this be `azkaban.param.override.props`?", "gold": "It will be helpful to specify the intended priority as well for the properties within this file."}
{"pred": "Why is this exported?", "gold": "Make this private and update all the public functions to not take this argument. The variable you set below should also be private, then in the tests instead of passing the variable in to the function just update the variable. We don't want to expose the testing implementation in the public api if it can be avoided."}
{"pred": "Why is this change needed?", "gold": "Do you now why is it a specific table name is used as a default?"}
{"pred": "Shouldn't this be `Path.Combine(Environment.GetEnvironmentVariable(\"HOME\"), \"DDITAdministrator\", \"myagent/_work/_temp\")`?", "gold": "If all you're doing is checking for the existence of a directory as your \"temp\" directory, why does it matter what OS you're on?"}
{"pred": "I think this should be `v4`", "gold": "nit- would be cleaner to import it once"}
{"pred": "I'm not sure if this is the best way to do this. I'm not sure what the best way to do this is.", "gold": "Looks like there is a closing parenthesis `)` missing here."}
{"pred": "Please use `snprintf()` instead of `sprintf()`.", "gold": "this one bothers me. There are many places where this one is written to for an error message and just a single callsite is changed."}
{"pred": "Why do we need this?", "gold": "You can put this in `kbfsOpsInit()` in you want, so we don't have to call it in every test."}
{"pred": "I think this should be `#elif defined(ARM_64)`", "gold": "`ARM_32` is what clients define as an input to DR, and is not always defined internally: we use just `ARM` to mean AArch32."}
{"pred": "Why do we need this field? Can't we just use `originalSchema`?", "gold": "s/for use/to use for/"}
{"pred": "Shouldn't this be `avatar_filename`?", "gold": "` $event->getAvatarFilename()` this function return `string` or `null`. In this place ` $event->getAvatarFilename()->getValue()` return `Fatal error `"}
{"pred": "Shouldn't this be `ResourceExhausted`?", "gold": "why not creating a new error type for server's own resource limit exceed error and do conversion within rpc interceptor?"}
{"pred": "Nit: `default` => `the default`", "gold": "Could be a timing thing here. When options are created they'll copy the ref for the current default propagator. If user sets through SDK the global propagator after that, it won't be reflected. Could leave it null here and then when it is used in instrumentation do `options.Propagator ?? Propagators.DefaultTextMapPropagator`. It would be a slight perf hit but it makes it hot-swappable."}
{"pred": "Why is this removed?", "gold": "Unrelated file. Please remove from PR."}
{"pred": "This should be `Access-Control-Allow-Origin: \"*\"`.", "gold": "Careful: you only want two newlines after the final header message. (That indicates the end of headers and the start of data.)"}
{"pred": "Why do we need this?", "gold": "This will not work on Python 3 (to which we are transitioning) because `.content` is bytes, not a str. Can you make the pattern a bytes object as well (like so: `b\"pattern\"`)?"}
{"pred": "Why is this change needed?", "gold": "This was to allow the tests to pass when the order of the required was different. Silly, but we don't have an easy way to check for \"equal but order doesn't matter\" in chai."}
{"pred": "Why do we need this?", "gold": "maybe say \"returns the default cost method that returns an object of cost 1\"."}
{"pred": "I don't think we want to drop packets originating in pods for VXLAN. If we want to drop packets originating in pods for VXLAN, we should also drop packets for IPinIP.", "gold": "I believe these rules will be enforced both (1) on egress from a local workload, and (2) on ingress **to** a local workload. Right? I understand that we definitely want (1), but do we really want to enforce (2) as well?"}
{"pred": "Shouldn't this be `response.asJSONObject()`?", "gold": "Use `response.asJsonObject()` instead. Also, use `put()` instead of `putOpt()`, `null` as a value is fine."}
{"pred": "`expect(editorHolder.is(':visible')).toBe(true)`", "gold": "Are you sure? We've changed it during an introduction of the IME support."}
{"pred": "`if (null !== $dqlFilter)`", "gold": "I think here we want the use of `empty()` to take care of empty strings. If you put `dql_filter: ''` in your YAML config ... this will add `->andWhere('')` and it will fail, right?"}
{"pred": "error when asserting broadcast msg context", "gold": "this is golang's named return, err is defined, `return` is equivalent to `return err` the current code has no problem"}
{"pred": "I think this should be `@output_buffer: a #GString`", "gold": "I don't think this is right; in Rust terms it's like a `&mut String`, in Java `StringBuilder` - it's not a return value from the function which is what `(out)` is for."}
{"pred": "I don't think this is correct. If `labels >= 0` and `labels < label_channels`, then `labels >= 0` and `labels < label_channels` will be false.", "gold": "If the label is not binary, should we rename this function?"}
{"pred": "Shouldn't this be `cur_path + File.separator`?", "gold": "This is very-very bad idea because of its performance impact"}
{"pred": "Please remove this empty line.", "gold": "WHY U NOT SORT IMPORTS?"}
{"pred": "Style/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.", "gold": "Put a comma after the last item of a multiline hash."}
{"pred": "Shouldn't this be `Dimensioned`?", "gold": "How come we need ``Dimensioned`` in the top-level namespace?"}
{"pred": "Why did you change this?", "gold": "excess whitespace through plugin."}
{"pred": "Why not `size_t{ 0 }`?", "gold": "What is the problem here? I feel we used this in a lot of places."}
{"pred": "Why did you remove this restriction?", "gold": "Update the docstring."}
{"pred": "nit: remove empty line", "gold": "delete the empty line \"github.com/pkg/errors\" should be grouped with other third party packages same for the rest"}
{"pred": "Why do we need this change?", "gold": "Assigning capabilities to the field here is not the best idea. Semantically this field contains the capabilities returned by the browser after session start. So here we sould better amend capabilities and return them from `init` method to pass later to `startSession` method (that will assign the capabilities returned by the browser to the field)."}
{"pred": "Why did you remove this?", "gold": "Is this a breaking change, or is the API private?"}
{"pred": "I don't think you need the `apply(list)` here.", "gold": "I don't think we need this dependency in this project right now"}
{"pred": "Why do we need this?", "gold": "I don't think this is necessary since `CommonLabels` is a public func and every component name is also public constant."}
{"pred": "I don't think we need the `-r` here.", "gold": "The `_example` field should be updated to include an interpreter with an array value."}
{"pred": "Why do we need to update this?", "gold": "Put this in the godoc of SupportedProtocols instead. Preferably we would just use one map though. Why not just use this one?"}
{"pred": "Why was this removed?", "gold": "I'd feel a little safer if the first argument were a string, not a *string unless there's a particular reason for making it a pointer."}
{"pred": "Why is this needed?", "gold": "Can you please revert changes to files in the `thoughtworks` package? This is legacy code and we will eventually phase out RC."}
{"pred": "I don't think this is used.", "gold": "You can safely revert changes to this file."}
{"pred": "Why did you remove this?", "gold": "This deletion is unnecessary."}
{"pred": "Why do we need the `typeof` check?", "gold": "I'm not a huge fan of this overloading of the prop; accepting very different types of arguments for props like this can be confusing, and wasn't part of the IB. I understand wanting to import the SVG directly, but the IB suggests using `${global._googlesitekitLegacyData.admin.assetsRoot}${userInputSuccessImage}` as the `src`/`smallImage` value here. It'd be great to refactor this to accept components directly in the future, but let's do that all-at-once rather than this hybrid approach that makes the API less clear."}
{"pred": "Please don't use wildcard imports.", "gold": "I've had this happen recently with IntelliJ, was this intentional?"}
{"pred": "Why is this header needed?", "gold": "Order(1) vs Order(logN) -- not sure it's measurable at the ~200 element size of the table. All of the published comparisons start at ~1000 elements."}
{"pred": "Why do we need this alias?", "gold": "I don't know about this aliasing and 'factory'. Previous version was rather straightforward: `location.CreateLocationResolver`. Perhaps `location.CreateResolver` would be even better? What do we actually gain here from moving DI to a separate sub-package?"}
{"pred": "I think it would be better to throw `std::runtime_error` here.", "gold": "Use `UpperCamelCase` for function names"}
{"pred": "Should this be `Number(value) >= 275761`?", "gold": "I'm not 100% sold on this idea but I like it in general. Nice compromise between using the 'Date' constructor where possible and falling back to the pre #5880 behavior when it makes sense. However, instead of `Number(value) < 0`, let's do `Number(value) < MIN_YEAR` because `new Date('-2017')` is perfectly valid in JS and I don't want to break the date behavior."}
{"pred": "Why did you remove this TODO?", "gold": "Remember to close SOLR-11877 after this"}
{"pred": "Why did you remove the comma?", "gold": "this change should be reverted"}
{"pred": "why do we need this?", "gold": "This function signature is a bit complicated, some parameters are IN type (stopLoop which is modified from outside), others are OUT (registeredEvent channel which is modified inside function) I suggest the following signature -> SubscribeToRegistrationEvent(identityAddress) returns registeredEvent chan of type (RegisteredEvent not int), Unsubscribe func(), error (in case of any error). That way caller can always cance subscription if needed and check for any errors. Also - unsubscribe function hides any internal details how subscribtion is really implemented"}
{"pred": "Shouldn't this be `src/**/*.wav`?", "gold": "`.wav`?! cannot we use something slightly more modern and compressed instead? :) I dunno, like `.mp3` or `.aac` or `.ogg`..."}
{"pred": "Shouldn't this be `swapped` instead of `swapped`?", "gold": "Wouldn't a single signal call be enough? (without the boolean even)"}
{"pred": "Shouldn't this be `current_user != @note.author`?", "gold": "I suspect that this whole block, which is going to be repeated a number of times, should probably be in a helper. I guess it would need to be given the object and the title and could probably figure out everything else from that?"}
{"pred": "Style/MutableConstant: Freeze mutable objects assigned to constants.", "gold": "Should we expose this attribute in the Asciidoctor.js API ?"}
{"pred": "Why not `Objects.equals(v, element._2)`?", "gold": "I think contains on `Multimap` was broken - it should return true if one of the values is associated with the key? It that right"}
{"pred": "How about using `DEFAULT_KV_CLIENT_CONCURRENCY`?", "gold": "delete this line"}
{"pred": "Line is too long. [81/80]", "gold": "Presumably we no longer need `force: true` here."}
{"pred": "`if(ptr == NULL || ptr == 0)`", "gold": "HIP runtime is compiled using a C++ compiler. So comparison to both NULL as well as 0 does not make sense. Just comparing to NULL is sufficient."}
{"pred": "Shouldn't this be `help_url: help_url('')`?", "gold": "these urls are still in `a` tags so we should probably include these links separately for a non-HTML version"}
{"pred": "Why do we need to check `s.sys != nil` here?", "gold": "That's fine though, meaning that you can send to this channel under the server lock. The internalSendLoop will pick up the change when the server lock is released (if loop is blocked trying to grab the server lock). Even the way you do it here (releasing the lock, sending, then reacquiring) does not guarantee that the internalSendLoop will have time to refresh in that interval."}
{"pred": "Should this be `chromium:downloading`?", "gold": "The name `enableDownloading` implies this is a boolean capability. How about `downloadDir`?"}
{"pred": "I don't think we need to deprecate this method.", "gold": "Found one internal team is using this method. Will coordinate with them about the migration solution."}
{"pred": "Should this be `DD_HTTP_CLIENT_SERVER_ERROR_STATUSES`?", "gold": "The field `HttpServerErrorCodes` should be called `HttpServerErrorStatuses`"}
{"pred": "Why do we need this?", "gold": "Can you please make each of these in a separate line. It will be easier to keep them sorted, and add/remove."}
{"pred": "Shouldn't this be `allowOverwrite`?", "gold": "should we error instead of silently ignoring the `cleanup` param? it defaults to `false`, so someone must have explicitly set it to `true`"}
{"pred": "`archive root directory missing: expected a 'root' directory but got %v`", "gold": "There is no specific requirement that the root be called `root`, just that there is a single root directory and that it be the first entry in the zip."}
{"pred": "Should this be `current_user&.requires_profile_attention?`?", "gold": "perhaps we should encapsulate this logic in a helper method w a test?"}
{"pred": "Style/RescueStandardError: Avoid rescuing without specifying an error class.", "gold": "Now that we're only using this repo as a Gem you shouldn't need to `require` an expanded local file path like below."}
{"pred": "Why do we need this change?", "gold": "This isn't necessarily a year. It may be months, days, or hours. Can we return `intValue()` directly instead?"}
{"pred": "Why was this removed?", "gold": "this is redundant because it gets logged immediately on entering the handleContainerChange function"}
{"pred": "nit: `e := model.NotificationEventType_...`", "gold": "`ds.GenericDeploymentConfig.DeploymentNotification` in L128 is nullable."}
{"pred": "Why do we need this method?", "gold": "this shouldn't be exposed here - this class isn't a carriage for this - its used internally to determine if/how we can mine."}
{"pred": "Why was this removed?", "gold": "It's fine to leave these checks in. It'll make the exception come from `FirefoxDriver`, and that's probably clearer to a user."}
{"pred": "Use %i or %I for an array of symbols.", "gold": "We don't want to include the `IntegrationSpecHelper` for models...mind moving this line out of the loop to be `config.include EnvironmentSpecHelper, type: :model`?"}
{"pred": "Why is this needed?", "gold": "Please check the return on these."}
{"pred": "This should be `uplink.config.cache === true`", "gold": "Do we need `==` for true?"}
{"pred": "Why did you change this?", "gold": "Changing the default value may cause BC-breaking. Suggest changing this value in config."}
{"pred": "`num_blocks = FEE_ETA_TARGETS[int(slider_pos)]`", "gold": "how does that happen?"}
{"pred": "Why do we need to import doctest?", "gold": "This is gross/clever. :-)"}
{"pred": "Metrics/ClassLength: Class has too many lines. [117/100]", "gold": "Take a look at the name of this file. Definitely copy and  "}
{"pred": "Why do we need to return here?", "gold": "Can you check with @mahebbar how to work this error. Should be different from 404."}
{"pred": "Why this change?", "gold": "Do we still need the upper bound `<3.9`?"}
{"pred": "Shouldn't this be `bin` instead of `bin`?", "gold": "Does this mean `vendor/bin/psalm` is not a symlink (or whatever equivalent Windows has for symlinks) on Windows?"}
{"pred": "Why did you change the package name?", "gold": "@lpabon having a separate package name `aws_test` allows to test the package as if the tester was an external package. If the test package name is the same as the package being tested, the test package can also use methods and variables not exposed to the eventual user."}
{"pred": "Why are these being removed?", "gold": "The exporter should still be able to test these histogram instrument kinds, right? Is there another reason to remove these?"}
{"pred": "Why do we need this?", "gold": "should this increment eval.Round somehow?"}
{"pred": "Line is too long. [81/80]", "gold": "Although this change looks good. Maybe there are other inconsistent cases too?"}
{"pred": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "gold": "This is a way better method name."}
{"pred": "Should this be `marketing.show.new_language_flash`?", "gold": "Prefer single-quoted strings when you don't need string interpolation or special symbols."}
{"pred": "Why do we need this line?", "gold": "I was wondering if this should allow per role specification, instead of (or in addition to) a generic \"allowed everywhere\". So you could do: `{ separator: ['aria-valuenow', 'aria-valuemin', 'aria-valuemax'] }`. You could still allow the array, and you could add a wildcard option for the \"generic\" case you've got now: `{ '*': ['always-allowed'] }`."}
{"pred": "Why do we need this?", "gold": "I'm confused by the name. The string was a Hive string but it isn't any longer? Why should we care? (I imagine I'll find the answer later... there is some different semantic that we want downstream...)"}
{"pred": "Don't use wildcard imports.", "gold": "Could you please leave the explicit imports?"}
{"pred": "Why do we need this alias?", "gold": "Why need alias?"}
{"pred": "Why do we need this?", "gold": "Shouldn't this be a `libfs.nullIDGetter` (exported, of course)?"}
{"pred": "\"logicsig program size too large: %d > %d\"", "gold": "I dislike the messages.go pattern; the strings are only used once and make more sense in context. The other two added reportErrorf() calls in clerk.go have inline strings."}
{"pred": "Why is this no longer needed?", "gold": "Seems we don't need it anymore."}
{"pred": "Layout/SpaceInsideHashLiteralBraces: Space inside { missing.<br>Layout/SpaceInsideHashLiteralBraces: Space inside } missing.", "gold": "This might cause problems with the weird way we publish Guidance and Groups in the UI. We will have to make sure that UAT is thorough."}
{"pred": "Why do we need to change this?", "gold": "this default needs to be on order 1 minute, I'm not sure why we defaulted to 1 hour below..."}
{"pred": "Why do we need to do this?", "gold": "I figure to make `{env.*}` work, right? I can't think of any other placeholder that makes sense here"}
{"pred": "Why do we need this change?", "gold": "Why change the port from 0 to getAvailablePort()?"}
{"pred": "missing whitespace after ','", "gold": "For me would be great don't repeat timeout sending in every get_locator call. Looks like it should be sent into LocatorsManager init. And possibly it should me non mandatory, something like that: `def __init__ (self, locators, timeout=60):`"}
{"pred": "I'm not sure if this is the best way to do this, but I'm not sure if there's a better way to do this.", "gold": "I feel like since now we don't initiate the `opts.projectName` with `opts.ProjectName()`, which means `opts.projectName` and `opts.ProjectName()` they don't necessarily equal to each other, we need to also substitute all usage of `opts.ProjectName()` within `Ask()`, `Validate()`, and `Execute()` to `opts.projectName`. Otherwise if `-p` is set, `opts.ProjectName()` will get expired."}
{"pred": "`bytes?.Length == 0 || bytes == null`", "gold": "why do we thinkg that an empty string is ok to return from this method? I think the null should never be passed in here in the first place"}
{"pred": "Why did you remove the `retVal` check?", "gold": "nit: can remove this `else` since we return from the condition above."}
{"pred": "Why is this being removed?", "gold": "You missed `Write<T>(...)`! I'm kidding ofc."}
{"pred": "Use next to skip iteration.", "gold": "Was there a customer who had this set to an empty string?"}
{"pred": "Should this be `status_aware_approver_email_address`?", "gold": "I know we have the `reporter` spec below, but what about a unit test for this to explain reasoning behind logic? If I were going to update this decorator, I would assume it wasn't covered by tests because there is no unit test."}
{"pred": "What is the purpose of this method?", "gold": "it's better to be : void attach(String name, Part part);"}
{"pred": "Why is this change needed?", "gold": "I didn't see where the IOException can get thrown, is this just to match the V1 reader?"}
{"pred": "Why this change?", "gold": "We normally suppress this warning with `RDUSED_PARAM(forceRDKit)`"}
{"pred": "`auto it = mappedPlayerGuids.find(guid);`", "gold": "What if `Game::getPlayerByNameWildcard` had not been called before. It would not find a player, wouldn't it?"}
{"pred": "Shouldn't this be \"Patch Required\"?", "gold": "Why upper case \"R\"?"}
{"pred": "nit: `return mf.BuildRequired(), nil`", "gold": "Does this need to return an error or could it return `false, nil`?"}
{"pred": "Why is this needed?", "gold": "Can you not change those scopes in public API classes? This applies here and in other places -- protected changed to package-scope for source is not really an API-compatible change."}
{"pred": "Why did you remove the default value?", "gold": "this parameter is only used in POST, please use `getRequest()->request->get('...');` Thanks"}
{"pred": "Why did you change this?", "gold": "Problem number 1: Scoped packages would have a `/` character here. Changing this to `validatePackage` resolves the 403."}
{"pred": "Why is this necessary?", "gold": "I don't quite get why there would be key errors: ``deep_mapped`` is a clone of ``self`` and ``k`` comes from ``self.items()`` so why would the key ever be rejected?"}
{"pred": "Shouldn't this be an error?", "gold": "this chain ID determines only from which chain to withdraw, therefore your changes do not accomplish what you want them to accomplish. You'll need changes to `func (aps *hermesPromiseSettler) Withdraw(chainID int64, providerID identity.Identity, hermesID, beneficiary common.Address) error`. The method probably has to include two chain ids: to and from. Currently, the method internally uses: `aps.config.L1ChainID` -> the chain to withdraw to `chainID` -> the chainID that was passed as the chain that the withdrawal is originating from."}
{"pred": "Why do we need this check?", "gold": "If instead we had `TraceContext.extract` return a bool value as a second return value, we could avoid the byte array comparison in `TraceID.IsValid`. Did you consider that alternative?"}
{"pred": "`paginated` should default to `false`", "gold": "here shouldn't we use `depotFreeLimit`?"}
{"pred": "Layout/TrailingBlankLines: Final newline missing.", "gold": "Could we use the Rails application's secret token instead? Do we actually need our own here?"}
{"pred": "I don't think this is the right place to put these tests. It should be in `test_groupby.py`.", "gold": "so should be fixed here also"}
{"pred": "Shouldn't this be `sizeof(dr_mcontext_t) - sizeof(dr_opmask_t)`?", "gold": "I would just remove this assert as it's going to get un-maintainable with a long list of valid sizes. Ditto below."}
{"pred": "Why do we need this?", "gold": "`HostDataDir` is misleading. Can we rename it to something more relevant ? The constant should also be moved up and reused as necessary."}
{"pred": "I think this should be `defaultESPOverhead = 38`", "gold": "I still feel like we are double-counting the outer IP header here (once in `defaultMTUGRE` and once in `ipsecESPOverhead`) but I'm not that familiar with IPsec."}
{"pred": "Why did you remove nullable enable?", "gold": "Not sure what benefit we gain by extending BaseProcessor here, as this seems to be defining a new OnEnd method. Could we modify MeasurementItem to have all the things, and then MeasurementProcessor can be simply extending BaseProcessor<MeasurementItem> (not blocking. just noting some observations in the PR :) )"}
{"pred": "nit: remove empty line", "gold": "This change was not really intended but made by the linter of VS Code. And looking at other packages this looks like a best practise to place interal packages on the top and gh imports afterwards."}
{"pred": "nit: `Note: A configured Requestlogger will not log HealthChecks.`", "gold": "This seems like a more appropriate message under `ListenAndServe`. WDYT?"}
{"pred": "Why was this removed?", "gold": "Is this not required?"}
{"pred": "`$this->entity['search']['sort']['field'] ?? $this->request->query->get('sortField')`", "gold": "We should start thinking of an object that encapsulates this information :) we might need more arguments in the future."}
{"pred": "Why did you add these two lines?", "gold": "Given that we are (conceptually) searching across multiple self-dependencies, all we can say is that we didn't have a self dependency in which *both* source and dest masks were correct. Since the spec doesn't imagine this case, the valid usage statement assume we can differentiate only wrong source from only wrong dest within a *single* self-dependency -- which we can't across multiple (at least not meaningfully)... so we always return both the source/dest VUID's if we can't find a self-dependency in with *both* are correct."}
{"pred": "Why do we need this change?", "gold": "rename? MiningCoordinator always exists"}
{"pred": "nit: space after `=`", "gold": "Here would be the same case you don't need to call `loadConfigs`, but you would need to reread configs using `getConfig` on each getHost function call, not once per file."}
{"pred": "Why do we need a lock here?", "gold": "Unlocking with defer means that this lock is still held curing the call to forgetNode(), below, which I see attempts to acquire `f.mu`, which looks dangerous to me."}
{"pred": "Error return value of `sharedSetup` is not checked", "gold": "Does anyone still use the cst out of this method? If not consider deleting"}
{"pred": "get \"/videos/vim-for-rails-developers\" => redirect(", "gold": "Line is too long. [97/80]"}
{"pred": "Why do we need this?", "gold": "This seems unused."}
{"pred": "Why do we need to panic here?", "gold": "@luguanglong , Thanks for the fix, can you re-phrase it to sound better something like \"This OS version is currently un-supported by keadm\""}
{"pred": "Why is this needed?", "gold": "should probably be called `_DeleteFpInfoAttr` because it removes it. Cleaning gives the impression it is still there. I would also move this to the end of the function `GetAtomicWeightsForFingerprint`."}
{"pred": "I think it would be better to move this validation to ValidatePipelineBindPoint.", "gold": "nit, can we use `VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR` here (granted it isn't else where, maybe worth fixing here or in separate PR)"}
{"pred": "Why did you change this?", "gold": "This will need to be updated in the upcase-exercises repo as well."}
{"pred": "I don't think this is correct. We want to show the remaining steps for reviewed exercises.", "gold": "Think it's worth extracting this to `Exercise#complete?`?"}
{"pred": "Why did you remove this method?", "gold": "This is still a potentially useful public method - should we remove such methods?"}
{"pred": "I don't think this should be alpha.", "gold": "I don't understand this change, what is happening here?"}
{"pred": "missing whitespace around operator", "gold": "I think its worth stating this is `versionMajor`"}
{"pred": "nit: typo `directroy` -> `data directory`", "gold": "rebuild: say loads and merges"}
{"pred": "Why was this removed?", "gold": "Why was this removed here (also in the other file)? Shouldn't we import them so that the reference in the docs below is interpreted correctly?"}
{"pred": "Why this change?", "gold": "I'd prefer to have a blank line between the class declaration and its first member. Is it possible?"}
{"pred": "`HELLO` -> `HELLO_DEFAULT`", "gold": "Is it really LEGACY_HELLO if we are using the most up to date HELLO? Perhaps `MONGOS_HELLO` would work here?"}
{"pred": "Shouldn't this be `THREAD_SYNCH_SUSPEND_FAILURE_RETRY`?", "gold": "I am afraid this is going to cause problems on Windows where it is not uncommon to have injected threads (CTRL_SHUTDOWN, CTRL_LOGOFF, etc.) we have no privileges to suspend -- and thus retrying will just fail again, and with the new \"synchall failure is fatal and should kill the process\" approach it turns what used to work for us on Windows into process death."}
{"pred": "This should be `--mac_installer_signing_keychain <keychain>`", "gold": "think it should only be in create_dist"}
{"pred": "Shouldn't this be `V(4).Infof`?", "gold": "Do you plan to support Pod spec change? Like hostPort is added/removed later after Pod creation?"}
{"pred": "Should this be `dokan.NewDir`?", "gold": "Is this behavior correct? It used to return `true`, which should map to `dokan.ExistingDir`. Was that previously a bug?"}
{"pred": "Shouldn't this be `osrm::util::Log()`?", "gold": "What about just printing an empty list in this case? That would make the output more predictable."}
{"pred": "Why was this removed?", "gold": "I looked and couldn't find any usage of `container` in any of the editor component files (js or hbs), so I assume this was used once and didn't get removed?"}
{"pred": "This should be `3.7+`.", "gold": "I just updated a number of sites using older versions of Roots onto WP 3.6 and this little function change was required. Multiple search bars were displaying when I used the search widget in a widgetized sidebar. Updated the roots_get_search_form as seen in this change resolved it for me!"}
{"pred": "Why is this needed?", "gold": "Fixes test failed in some cases"}
{"pred": "why are we removing this?", "gold": "what's the prod url for this? just curious. @amirsaber"}
{"pred": "Should this be `azkaban.jvm.ignore.args`?", "gold": "Can you please change this to azkaban.jobs.java.opts?"}
{"pred": ":ok: This change is safe, we'll keep the existing 19 translations.", "gold": "Here is another concatenation which should be updated. Even though `Source:` and the link are essentially separate, it isn't RTL friendly. This would be another good use for `createInterpolateElement` I think so that we wouldn't need to include all of the classnames in the translation string (or extract them to a placeholder). That would allow us to use the `Link` component as well, rather than using its resulting HTML as a string which will be a pain to maintain if we were to make changes to the base `Link` component."}
{"pred": "Why not just use `Task.FromCanceled`?", "gold": "I would add an overload `GetCancelledZeroTask()` which calls `GetCancelledZeroTask(CancellationToken.None)`. This is cleaner than requiring the caller to pass `default(CancellationToken)` or `CancellationToken.None`."}
{"pred": "Shouldn't this be `swapchain != VK_NULL_HANDLE`?", "gold": "Would it be equivalent to check if `chain != nullptr` below? Not suggesting a change, just curious."}
{"pred": "`std::chrono::steady_clock::now ()` is not needed.", "gold": "Should probably do `auto this_l (shared_from_this ());` and pass/use that instead of `this`. Same a few other places. IOW, replace both `shared_from_this()` and `this` with `this_l`"}
{"pred": "I don't think this is correct. It should be `function\\'s description`.", "gold": "And here. Please, use `'` for apostrophes in changed strings in this file."}
{"pred": "Why do we need to simulate execution here?", "gold": "assignments should only be cuddled with other assignments (from `wsl`)"}
{"pred": "nit: `DefaultNewBlockDataVersion` -> `DefaultNewBlockDataVersion`", "gold": "Please move this to `block_types.go`."}
{"pred": "Why is this being removed?", "gold": "So this is not needed anymore for all attributes?"}
{"pred": "\"An exception occured while adding OpenTelemetry Tracing to ServiceCollection. OpenTelemetry tracing will not work. Exception: '{0}'.\"", "gold": "Happy to get suggestion for better messaging here. Here's what I intended to convey: Something is wrong - the Exception is a hint to what might be the cause The impact of that - tracing wont work."}
{"pred": "E302 expected 2 blank lines, found 1", "gold": "I think we can remove this function, right? (duplicate with `ses_starter.py`)"}
{"pred": "@HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon Thoughts?", "gold": "With this fix, I am not even sure we need to overwrite this function."}
{"pred": "I don't think you need the `.lower()` here.", "gold": "Why not just import this from `data_transfer`? As a rule copying the same code twice is not a good idea. Also: please run `pylint` on all files in this PR."}
{"pred": "Why was this removed?", "gold": "You've got an absolute path here referencing your home dir :-)."}
{"pred": "Why did you change the order of these?", "gold": "Maybe I should do some sorting so that these properties don't keep moving around..."}
{"pred": "Why was this test removed?", "gold": "Can we keep this test anyway, as it's part of the spec?"}
{"pred": "Why do we need this class?", "gold": "Can be removed"}
{"pred": "Please sort these by length.", "gold": "It's a minor quibble I know, but I like having the imports ordered by lengt"}
{"pred": "Why do we need this change?", "gold": "It's better to get the charset from context or other setting to let the user override it."}
{"pred": "Why do we need to change this?", "gold": "this filename as well needs change"}
{"pred": "I don't think we need the `omitempty` here.", "gold": "I think we want to remove `omitempty` here"}
{"pred": "Why do we need a new handler here?", "gold": "You cannot move this here because it breaks detach. Just call `tty.Close()` before returning the error from start"}
{"pred": "Why was this removed?", "gold": "I updated only the implicit roles who needed a update for this new rule to validate."}
{"pred": "Why are these changes needed?", "gold": "> // Code generated by protoc-gen-go. DO NOT EDIT."}
{"pred": "Why do we need this?", "gold": "minor: skipOSConfigMetadata, otherwise, the name sounds like a boolean"}
{"pred": "space between `if` and `(`", "gold": "~~I think lines 65-67 should be moved into this else clause after `type = ...` Else, it is a bit confusing why we check the enclose type validity a second time~~ Nevermind, will do some refactoring, myself. But thanks for \"fixing\" this!"}
{"pred": "Do we need to close the response body here?", "gold": "`sessions := endpoints.SessionsDTO{}` and using only `sessions` should be simpler."}
{"pred": "Shouldn't this be `dcontext->is_exiting == GLOBAL_DCONTEXT`?", "gold": "These need to be in the other order to avoid crashing when dcontext == GLOBAL_DCONTEXT (==-1)"}
{"pred": "Shouldn't this be `ConfigureKestrel`?", "gold": "Why not change the other samples?"}
{"pred": "`cell.getAttribute('id')` -> `cell.id`", "gold": "Indentation is mixed up here due to spaces/tabs, I'm guessing."}
{"pred": "Shouldn't this be `bytes_read < 0`?", "gold": "Should we provide a little more context in the error message? Maybe throw in something about what operation was being performed?"}
{"pred": "`return $configuration['settings'] ?? [];`", "gold": "Project standard is spaces, not tabs. Please fix and then we can merge this."}
{"pred": "`extern ClientList clientlist;`", "gold": "@hgtw is there anything we're worried about with regards to using this cache? Do we want to do staged testing around expeditions before we merge? Curious your thoughts here"}
{"pred": "Why did you remove the `alwaysTrue`?", "gold": "The purpose of this was to allow pushing filters into the manifest files if we ever use a format other than Parquet. I think overall this is a good change because we can add it back later. Just wanted to note why the unused argument was there."}
{"pred": "Should this be `obj.is_a?(BSON::Decimal128)`?", "gold": "I think BSON::Decimal128 should always be serialized as Decimal128 regardless of config option."}
{"pred": "require 'bolt/plan_creator'", "gold": "We should probably just move the `require 'bolt/plan_creator'` in `Bolt::CLI` to `Bolt::Application` so it will already be loaded."}
{"pred": "I don't think we want to run more than 20 iterations.", "gold": ">20 [](start = 45, length = 2) Can we override this at runtime? Maybe it should be a command line option with default."}
{"pred": "W293 blank line contains whitespace", "gold": "can just remove it ?"}
{"pred": "Why do we need this function? Can't we just call `FinishMigrateRepository` directly?", "gold": "Better call it `CleanUpMirrorInfo`?"}
{"pred": "Let's remove these lines.", "gold": "@shannonwells is there still something missing here?"}
{"pred": "I don't think we need to add a setting here, we can just set it to `nil` by default.", "gold": "This could be more indicative of what it is... e.g... `stresstest_time_limit`"}
{"pred": "Why is this removed?", "gold": "Shouldn't we do a `reader_payload_pool_.reset()` here?"}
{"pred": "Why do we need to change this?", "gold": "I'd prefer the nomenclature less tightly coupled to DRAND throughout. I played with renaming the `drand` package to `beacon` but it was too much noise in this change."}
{"pred": "Why do we need this?", "gold": "I think I would prefer you declare `self._current_key=None` in the constructor and just return `self._current_key`. That way you can prevent anyone from overwriting `current_key` without needing to use `getattr` here."}
{"pred": "nit: `rawMode` is unused (from `deadcode`)", "gold": "I guess I like the name `mode` okay. I can't think of anything better."}
{"pred": "I think this should be `timeout <= 0 && w.DefaultTimeout != 0`", "gold": "I would create a new method (NewStepWithDefaultTimeout?) for this purpose because timeout<=0 looks like a hidden logic"}
{"pred": "`The max length of the events list`", "gold": "Are these limit changes related?"}
{"pred": "Why this change?", "gold": "Don't you mean `import scapy.consts`?"}
{"pred": "Why do we need to rollback the primary?", "gold": "`ctx` is unused in rollbackPrimary"}
{"pred": "Why change this?", "gold": "This is not what title says."}
{"pred": "What is the purpose of this interface? It doesn't seem to be used.", "gold": "a fix applies several fixes? maybe this should simply be `applyToNode`"}
{"pred": "`fakeGetClientset` is unused (from `deadcode`)", "gold": "U1000: func `fakeGetOk` is unused (from `unused`)"}
{"pred": "nit: remove empty line", "gold": "Because there is a \"k8s.io/client-go/tools/cache\" below, we can sort out all the \"imports\" here."}
{"pred": "This should be `github.com/aws/aws-sdk-go/aws/credentials`", "gold": "Nit should be using `goimports` to format the import statements with standard libary imports first, new line, followed by non-standard library imports."}
{"pred": "Why do we need this check?", "gold": "Do we not have tests for pipeline delete  "}
{"pred": "This should be 2.3.0", "gold": "Good that you mention this constraint in the docstring :)"}
{"pred": "Why do we need this?", "gold": "remove this blank?"}
{"pred": "`computedNumOfActivePartiions_(-1)` -> `numActivePartiions_(-1)`", "gold": "Partitions is misspelled 8 times in this commit, might make sense to fix the spelling for all of those."}
{"pred": "`objreg` is not used.", "gold": "Please remove this blank line - those are only used to group Python/third-party/qutebrowser imports."}
{"pred": "Why do we need this?", "gold": "`insecure` is a global variable (from `gochecknoglobals`)"}
{"pred": "\"Interacting with repositories by HTTP protocol is not allowed\"", "gold": "Same as above (HTTP in upper-case)"}
{"pred": "Please use `assertSame()` instead of `assertEquals()`", "gold": "This is getting repetitive  maybe you could introduce an abstract test case with a `getExpectedUrl($providerReference)` method ?"}
{"pred": "`MakeFunc` is unused (from `deadcode`)", "gold": "I do not think returning `Value{}` is correct here. For example, `reflect.MakeFunc(...).Kind()` would return `reflect.Invalid` instead of `reflect.Func`. Therefore, I think this should panic instead."}
{"pred": "Why is this change needed?", "gold": "Does this work for Custom Elements? iirc we're lacking test cases for them. /cc @andrewiggins @developit"}
{"pred": "Why do we need this change?", "gold": "Same change just above?"}
{"pred": "Why is this needed?", "gold": "I suppose `apploader.js` isn't used by WebWorkers. So `self` will always be `window` here."}
{"pred": "Why are we removing this?", "gold": "Since this var is no longer defined we should remove the `if skip_targets.any?` bit below."}
{"pred": "nit: `if ARN_TO_LAMBDA.get(arn).qualifier_exists(qualifier):`", "gold": "I think we should `return arn` as a fallback at the end of this function (otherwise the `['Resource']` entry below could become `None`)."}
{"pred": "Why do we need to close the connection here?", "gold": "Why session is started at all, if you need to shut it down e.g. DI should launch noopSession"}
{"pred": "nit: rename to `DeleteWorkspaceFile`", "gold": "nit: can we rename the interface to `wsFileDeleter`"}
{"pred": "nit: `can't coexist` -> `cannot coexist`", "gold": "Why target cannot be external endpoints?"}
{"pred": "Why do we need this?", "gold": "We use a suffix \".AUTOCREATED\" for configsets, maybe we can use the same here?"}
{"pred": ">OpenTelemetrySdk.EnableOpenTelemetry [](start = 24, length = 26) I think we can remove this line.", "gold": "This one won't be disposed. Should be (something like) `using var openTelemetry = OpenTelemetrySdk.EnableOpenTelemetry(` no?"}
{"pred": "Why this change?", "gold": "Why this is in the diff?"}
{"pred": "nit: s/creates and then uploads/creates and then uploads/", "gold": "How is status determined? When the user calls CloudBackupCreate( src_volume_id ) they can then call CloudBackupStatus( src_volume_id ) Is there something similar for this new API?"}
{"pred": "I don't think this is the right place to do this. If we are hydrating, we don't know the _children this VNode should receive so it's safer to unmount them. Else on the subsequent error-boundary diff, we won't know the oldDom and insert an additional node instead of replace the prerendered one.", "gold": "We could pass `excessDomChildren` to `options._catchError` and only do this if an error-boundary catches the error. Not entirely sure if that's better."}
{"pred": "Why not `array_merge($this->getFilters(), ...array_values($this->getFilters()))`?", "gold": "In php8 named parameters were introduced and now it is required to match called method parameter name when setting parameters by array destructing or call_user_func_array() etc."}
{"pred": "Why do we need this check?", "gold": "If instead we had `B3.extractSingleHeader` and `B3.extract` return a bool value as a second return value, we could avoid the byte array comparison in `TraceID.IsValid`. Did you consider that alternative?"}
{"pred": "Shouldn't this be \"weitere\"?", "gold": "I think this is more of a semantic difference than a typo - `weiter hinzufgen` is like `continue adding` whereas `weitere hinzufgen` is like `add more`. I think it makes sense to change it though  "}
{"pred": "blank line contains whitespace", "gold": "nit: 200 is superfluous"}
{"pred": "Why did you change this?", "gold": "This is testing `unreserved keyword`"}
{"pred": "This should be Spherical_Spherical_Cube", "gold": "paramsNatOrigin doesn't include sUVtoST. I would just remove that definition for now"}
{"pred": "nit: `initBlockRetrievalQueue` would be a better name.", "gold": "It feels like the test should be waiting for the prefetcher to shut down, but I don't have a great reason why other than that it might be confusing for debugging if there are still goroutines from old prefetchers lying. But I guess since `TogglePrefetcher(false)` doesn't actually set the prefetcher to nil, the queue shutdown method will still end up waiting for the shutdown to finish. If that sounds right, nevermind me."}
{"pred": "//snippet-keyword:[AWS SDK for Java v2]", "gold": "AWS Identity and Access Management (IAM)"}
{"pred": "Why do we need this?", "gold": "As a long term thing, would it make sense to move the resource names as keys under the requirements map?"}
{"pred": "`hasAttribute` is deprecated, use `getAttribute` instead.", "gold": "That doesn't fix the whole problem. The issue lays in this line right here, not the one above. There are two problems with this line: 1. It finds things that aren't cells in the table 2. if it doesn't find anything, it shouldn't return empty here, but continue down to look for row/ column headers."}
{"pred": "`getProject().getAllprojects().flatMap(project -> BaselineVersions.getResolvedArtifacts(project))`", "gold": "I am pretty sure that this is infinite recursion as getAllProjects returns the project itself."}
{"pred": "This should be `data-lists`, not `dataLists`.", "gold": "Something I didn't catch before I merged this PR, is the hyphenated constant a problem? E.g. should \"data-lists\" be \"data_lists\"? @paulkaplan"}
{"pred": "`conf.use_winpcapy` should be `conf.use_winpcapy`", "gold": "Can you write the test as `if not (conf.use_winpcapy or conf.use_pcap or conf.use_dnet):`"}
{"pred": "Why do we need this import?", "gold": "we have to include foreign assets on the repository directly because they don't belong to a job? This seems very awkward... Is this a step towards the job-less assets on the repository? Did you consider having `build_asset_job` take in a set of foreign assets instead? I suppose we would then need to subclass it to be a more special `AssetJobDefinition` that can keep track of them."}
{"pred": "Why this change?", "gold": "`-Wstringop-truncation` is a new kind of error detector introduced in GCC 8. As for this patch, these are two false-positives though."}
{"pred": "\"only one credential type may be specified per profile\"", "gold": "Can we port this error msg to v2 too? This one is better, as it explicitly states what sources are allowed."}
{"pred": "Why do we need this?", "gold": "The convention so far has been to require directly from the defining file (in this case `../../read_preference') . I think the concern has been mostly about the potential for circular dependency cycles"}
{"pred": "`color_type` -> `color_type`", "gold": "I suggest expanding dims here to simplify the formatting."}
{"pred": "init(CONFIG_FILE)", "gold": "Why do you need to specify the kinto prefix here?"}
{"pred": "Why did you change this?", "gold": "The `!r` is unnecessary."}
{"pred": "Why do we need to check if `sasToken` is not empty?", "gold": "I didn't see existing tests for this `OpenBucketURL`. Not sure if it's easy to do without mocking these `opener` calls."}
{"pred": "Why do we need this?", "gold": "Should we default to `true` ?"}
{"pred": "nit: remove empty line", "gold": "File is not `goimports`-ed (from `goimports`)"}
{"pred": "Why do we need this?", "gold": "Shouldn't these options also include `@babel/preset-env`? Also I see you set `babelrc` to `false`, could we rely on our existing `.babelrc` file? Feels like some duplicate configuration otherwise."}
{"pred": "Do we want to include the reason in the message?", "gold": "Nit: We can use `%s` since `disconnectReason` is a string."}
{"pred": "I think this should be `boosting_type='regression'`", "gold": "I think it's better to create a new example"}
{"pred": "Why this change?", "gold": "The stages are correct, but the more forgiving `kAttachmentRasterOrder` should be used, based on a review of the spec. That should give the same effect of suppressing the false positive conflict between the DEPTH R/W and resolve. > End-of-subpass multisample resolves are treated as color attachment writes for the purposes of synchronization. This applies to resolve operations for both color and depth/stencil attachments. That is, they are considered to execute in the VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT pipeline stage and their writes are synchronized with VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT. Synchronization between rendering within a subpass and any resolve operations at the end of the subpass occurs automatically, without need for explicit dependencies or pipeline barriers."}
{"pred": "Why is this change needed?", "gold": "To be consistent, I think it should actually just be a single `-`"}
{"pred": "module level import not at top of file", "gold": "this seems extraneous."}
{"pred": "nit: `LongDomainFeatureSet` -> `LongDomainOnly`", "gold": "Ah, I see here that 'LongDomain' is defined as something that contains a subdomain segment that is `maxLengthOfDomainSegment` long (which I think is 63 characters) - I don't think any public ACME servers/Let's Encrypt's staging environment has a restriction on this?   if it does, and the 'pebble' based ACME server does not, then Pebble needs modifying to also fail in these cases as it aims to replicate the ACME RFC as closely as possible"}
{"pred": "Why do we need to install `gdebi-core`?", "gold": "I think you need `-y` here to prevent a user confirmation prompt"}
{"pred": "Can we rename this to `avx512_code_in_use`?", "gold": "Repeating: I don't think this should be a core-wide global var. This should be isolated to arch/x86 or at least arch/, maybe inside getter/setters as mentioned above."}
{"pred": "I don't think we need the `jpgc-` prefix here.", "gold": "right URL is like in cmdrunner, using search.maven .org"}
{"pred": "Why not use `Uri.TryCreate`?", "gold": "The link to valid syntax is not really applicable for NET2_1, right?"}
{"pred": "I'm not sure if this is the best way to do this. I'm not sure what the best way to do this is.", "gold": "Shouldn't it be more specific, like \"gcppubsub supports all UTF-8 strings\"?"}
{"pred": "Why do we need to stop the secondary jetty?", "gold": "Everything in this class is SolrCloud-related, not legacy replication"}
{"pred": "Shouldn't this be dr_merge_arith_flags()?", "gold": "Could just assign directly and eliminate the `newval` var."}
{"pred": "I think this should be `pullRequestTitleComment`.", "gold": "... with the name of the affected package, or \"all\", followed by a colon,..."}
{"pred": "Should this be `NugetVersionReplace`?", "gold": "We'll want to remove this one if we make the assembly version constant."}
{"pred": "$this->setup_single_page_style();", "gold": "Can we have a single function here that uses the same subscribers and just changes meta based on context?"}
{"pred": "HIP will load the kernels and setup the function symbol map on program startup", "gold": "where would ` static startup_kernel_loader skl;` be instantiated? if it's not instantiated anywhere should this be removed?"}
{"pred": "I don't think you need the `items[0]` check, you can just use `dataTransfer.items[0]`.", "gold": "I think we should move those util functions that work with drag-drop to @uppy/utils, so they can be shared (maybe later) with drag-drop plugin? Otherwise it will continue to depend on drag-drop module."}
{"pred": "Why is this being removed?", "gold": "Migrate the spec.Labels to locator.Labels ?"}
{"pred": "`require.NoError(t, gotErr, tc.wantErr)`", "gold": "The test case already existed but it never tested properly because of the conditional in the test."}
{"pred": "Why this change?", "gold": "I'm okay with this, but I don't see a lot of benefit to removing unnecessary parens. If extra parens make something more readable (like this) or clarify order of operations even when matching the default, I would say we should keep them."}
{"pred": "Why do we need this change?", "gold": "@sarowe why was this volatile? It's fishy to see this as the only volatile field."}
{"pred": "Why do we need this class?", "gold": "template is not correct?"}
{"pred": "Why do we need these?", "gold": "Rename the registies to `BBOX_ASSIGNERS` and `BBOX_SAMPLERS` to avoid ambiguity. There is also a registry for dataset sampler."}
{"pred": "This should be `FakeFS.activate!`", "gold": "This is no longer stubbed on every test. Perhaps it should be, and should be unstubbed in the single case that it matters."}
{"pred": "Should this be `Puma.stats.to_json`?", "gold": "This seems much simpler! I'm not sure I follow what you mean by the threading part... Also tests are not liking this constant. Might need a require or to fully qualify this."}
{"pred": "Why do we need this?", "gold": "Convention is \"FIXME: i#2144\" or \"XXX: i#2144\""}
{"pred": "Why do we need this interface?", "gold": "This should probably be a property instead of a method."}
{"pred": "Should this be `RECONCILIED`?", "gold": "do we need to consider setting the `state` as well? If so, lot of changes might be required, like, setting to 'Reconciling' in upgrade code, setting to 'error' or 'reconciled' in volumeReconciler functions."}
{"pred": "Layout/AlignArray: Align the elements of an array literal if they span more than one line.", "gold": "Line is too long. [82/80]"}
{"pred": "I don't think we need this change.", "gold": "Add blank line below license header."}
{"pred": "Shouldn't this be `ops.current().location()`?", "gold": "I'm not clear on whether this really should be the right behavior. Basically we're saying that a replace table will keep the existing location (as opposed to using defaults). I suspect we don't have create or replace with location semantics, but this is making some assumptions that a replacement is somehow the same as the old. If we were to go with id based pathing convention, this wouldn't work. I don't think this is an issue at this point, but it might make sense to push this down to the location provider."}
{"pred": "nit: remove empty line", "gold": "Just run a global replacement for all `executionproto`."}
{"pred": "`options` should be `None` by default.", "gold": "@AutomatedTester @davehunt thoughts on a new keyword argument?"}
{"pred": "Shouldn't this be `ENOTSUP`?", "gold": "Should line 47 be OPAE_ERR?"}
{"pred": "Why do we need this?", "gold": "Not necessary, just write `time.Time{}`"}
{"pred": "This should be `typ.PercOrInt(minperc=0, maxperc=100, minint=1)`", "gold": "As these two strings simply get concatenated for the docs, there's a space missing after the dot here."}
{"pred": "Why do we need to record telemetry here?", "gold": "What about integrations where we don't plug ourselved on OnMethodBegin?"}
{"pred": "Why did you change this?", "gold": "shouldn't **call** return a boolean?"}
{"pred": "Why is this needed?", "gold": "ViewModel classes should not expose any classes from framework.model."}
{"pred": "Why was this removed?", "gold": "how would you feel about keeping these tests to be more explicit and having them `assert not _validate...`? or is your view that that is too duplicative of the tests in `test_evaluator.py`?"}
{"pred": "Why is this needed?", "gold": "Why do we use the `winrm_nodes` variable here and not the string `\"winrm_nodes\"` as we were using before?"}
{"pred": "This file should be reverted.", "gold": "why update Copyright ?"}
{"pred": "Why do we need to check for sample scan here?", "gold": "Does this mean we cannot update statistics with sampling on a table with LOB columns?"}
{"pred": "Why do we need this?", "gold": "Look good, but I think a `[flags]` enum would be more future proof? Although i'm not sure if a flags-enum is working from the XML config. What do you think?"}
{"pred": "Why do you need to check `row.treeLevel > -1`?", "gold": "Since I believe state will never be anything other than 'expanded' or collapse, you can rewrite this as follows: `return row.treeNode.state === 'expanded' ? 'ui-grid-icon-minus-squared' : 'ui-grid-icon-plus-squared'; `"}
{"pred": "Why did you remove this?", "gold": "the latter part can go but isn't the first part of this still sound -- that we assume \"id\"?"}
{"pred": "Why did you remove the quotes?", "gold": "Why is the escaping of @ and $ removed?"}
{"pred": "Why do we need this interface?", "gold": "Nit: `Http` is redundant in this interface's name."}
{"pred": "Why do we need to check if the prefix exists?", "gold": "what if I set SynchronizableEntitiesPrefix to \"a/b/c/d\" in config?"}
{"pred": "nit: `expected, got %s`", "gold": "nit: This error message doesn't mention that the path is a directory, maybe \"Dockerfile path is a directory:%s, please provide path to file.\""}
{"pred": "This should be `2021 Daniel van Noord <13665637@users.noreply.github.com>`", "gold": "This is done automatically, you can skip it next time ;)"}
{"pred": "Why do we need this?", "gold": "This is needed in `set_value` because of `:open-editor` (you could open an editor, close the tab, then close the editor). I don't think it makes any sense to have it here?"}
{"pred": "Why do we need these flags?", "gold": "Perhaps we can assume that profiling is enabled if ProfilingPort is set? And/or configure a default port and frequency, so we don't have to set three config vars every time?"}
{"pred": "`unless options['forward_ssh_agent'].nil?`", "gold": "This nil check won't correctly handle the case where forward_ssh_agent is set to false - it won't be nil but it should still not be set."}
{"pred": "why do we need to set the proto here?", "gold": "We could avoid passing proto since threshold isn't needed."}
{"pred": "I think this should be `if !config.GetBool(config.FlagKeepConnectedOnFail)`", "gold": "This route excluding needed for reconnect only when one connection is lost and we trying to establish another. I was thinking to make 2 separate flags for killswitch and reconnect enabling. This way we can keep killswitch working, but we don't need these routes excluded."}
{"pred": "Why this change?", "gold": "why can this modification avoid crash?"}
{"pred": "Why not just `@account.id == current_user.id`?", "gold": "This looks good -- signing out the user if the current user is disabled"}
{"pred": "The collection of the selection layer levels where the whole row was selected using the row header or the corner header.", "gold": "The line exceeds 120 characters."}
{"pred": "This should be `desc[\"php_version\"].String()`", "gold": "Let's go ahead and change \"Site\" to \"Project\", since that's the path we've chosen. One less thing to alter in the other issue."}
{"pred": "Why is this removed?", "gold": "I am for this change iff we are sure the information is no longer helpful. I think this could still be valuable for certain scenarios, wbu?"}
{"pred": "Why do we need to find the imageVersion in the Rampup list?", "gold": "I thought we decided on using the latest active version and not the one which is max ramped up."}
{"pred": "I don't think we need the `else` here, since we return in the `if` block.", "gold": "can we update this to a `log.Warningf`?"}
{"pred": "Why do we need to disable this pylint check?", "gold": "can we get something emitted in the logs on non-zero exits to trace back to for problems like this failing on the first invocation?"}
{"pred": "Why do we need to mock the schema man?", "gold": "Do we need `schema manager` at here ?"}
{"pred": "`Parse` is unused (from `deadcode`)", "gold": "This won't work because of the permissions on the directory when this is included as a library. But, we may be able to do this. The key would be wrapping this command with either a script or a go binary that ensures the current directory is writable. If the current directory is not writable, it would attempt to make it writable so that we could write out the produced binary. But I'm not sure if that will influence the hash that gets produced for `go.sum` since I am not sure how that is calculated. Alternatively, we can choose a place in `/usr/local` or choose a location that is writable in the go cache and use that. I'll give that a try since it might be needed for the ARM builds if we choose to only include `x86_64` precompiled binaries in the module."}
{"pred": "Why is this needed?", "gold": "Correct me if I'm wrong, but is this necessary? Why not just use the value returned by `interpreter.Eval` and not mess with the scope? `interpreter.Eval` will return any produced side effects. This means TableObjects as well as any value resulting from any expression statements."}
{"pred": "Why do we need this?", "gold": "This service is global per namespace, not per Alertmanager/Prometheus/ThanosRuler instance. So this approach won't work. But maybe I missing out something, can you describe your use case here?"}
{"pred": "`CanReattest` is unused (from `deadcode`)", "gold": "Do we need this default? Since we aren't using a sql.NullBool or *bool, an unset column will be interpreted as `false` already... We don't set a default on our other bool fields (e.g. entry admin and downstream columns)."}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.", "gold": "thanks for moving these over. makes more sense for them to be in the exports_helper"}
{"pred": "`keyconf` is not used.", "gold": "That import now isn't needed anymore"}
{"pred": "Should be `:param str path: Full path to the addon that will be installed.`", "gold": "Can you update the `Usage` to be an absolute path as well? Something like `/path/to/firebug.xpi`"}
{"pred": "Why did you remove the MvxWindowsCommonAccelerometer?", "gold": "This class is missing the `MvxPlugin` attribute"}
{"pred": "Why do we need to set the layout direction here?", "gold": "What if `wxLang` is returned `None` from `getWxLang`"}
{"pred": "`if (ResultCode::SUCCEEDED != ret_code)`", "gold": "Please don't do changing like this unless it _**really**_ cares. BTW. Please look around to infer our naming conventions."}
{"pred": "Why are we changing these to `finest`?", "gold": "This is in test code: understanding what we're doing is important in this context."}
{"pred": "`--goquorum-compatibility-enabled` is no longer used and can be removed.", "gold": "prob should still have an example that has multiple option names even if you have to make it up. Or maybe we don't need this method?"}
{"pred": "Layout/AlignHash: Align the elements of a hash literal if they span more than one line.", "gold": "I believe respond_to whitelists the formats passed to the block so if we don't want to display html, we can just remove the line format.html..."}
{"pred": "Shouldn't this be `err` instead of `err`?", "gold": "stylistic nitpick: I _feel_ like we've largely shown errors like this as \"error: \" vs. \"error=\". IMO colon/space reads better."}
{"pred": "Why is this header needed?", "gold": "We could put this implementation in `RTPSWriter::create_change_pool` and avoid an extra function."}
{"pred": "Why do we need this?", "gold": "should this file ends with _test.go?"}
{"pred": "Why this change?", "gold": "It's because of this change. `ss` was unused and it made sense in the program. However I haven't read the IPv6 RFC so I'm unsure of what it does"}
{"pred": "Why do we need this?", "gold": "\"Flatten\" is a verb, so I'd probably go with `flattenedIndex` as a variable name here."}
{"pred": "`Object.freeze(valuesToMask)` is unnecessary.", "gold": "If it can only be called once, perhaps a more appropriate name is something like `setMaskables`? `addX` sounds like you can add many `X`es by calling it many times"}
{"pred": "why is this public?", "gold": "Nodecfg should be downloading from a private bucket -- these shouldn't be for public consumption. In general these should be generic and expect environment to provide appropriate credentials and bucket."}
{"pred": "Why do we need this class?", "gold": "Could you please end the file with an empty line?"}
{"pred": "Why did you change this to `finest`?", "gold": "This is an incorrect change. The dialect spoken is an important part of the handshake and should be communicated to users."}
{"pred": "`isCanceledMx` is unused (from `structcheck`)", "gold": "Can this be non-exported to avoid direct use? It would be a breaking change but using previous package version would work."}
{"pred": "Why not return `gcerrors.Code(err)` here?", "gold": "Nit: this is just `return gcerrors.Code(err)`, isn't it?"}
{"pred": "Why was this removed?", "gold": "I don't know where this came from, but it's not a good idea. This is actually timing out after 5 rounds, not 5 blocks. 5 consecutive null blocks won't be that uncommon. Also when testing with a short block time, this is a very short duration that can contribute to flaky tests."}
{"pred": "`with open(statePath, \"r\") as f:`", "gold": "In Python 3 when pickling or unpickling objects, the file needs to be opened as binary so that no text encoding/decoding takes place. So for any open calls around pickle loads or dumps, the mode for reading must be rb and the mode for writing must be wb."}
{"pred": "`params.qstring.method` is no longer used.", "gold": "did you remove **params.qstring.method** intentionally? if so why?"}
{"pred": "Shouldn't this be `read.locality.task.initialize.threads`?", "gold": "What is the current default? Is that inconsistent across uses and that's why this is null?"}
{"pred": "Should this be `previouslyDeployedConfig.Name`?", "gold": "Why did we make this change? How come it wasn't an issue before"}
{"pred": "Why did you remove this?", "gold": "Can you tighten scope by moving to of these variables? i.e. Move to ~4372?"}
{"pred": "Why did you change this?", "gold": "Nice to see this `dataverse.rserve.password` fix rolled in."}
{"pred": "Shouldn't this be `strnlen(tmp_optarg)`?", "gold": "How about the following faster alternative that doesn't need `strlen()` at all: if (*tmp_optarg == '\\0' || *endptr != '\\0') { fprintf(...) ... This would treat the bus argument as invalid if it's either empty (`tmp_optarg` points to '\\0') or invalid (`endptr` points to something other that a '\\0'). Actually, the existing code would accept an empty argument and set the bus to `0`, so if (*endptr != '\\0') { fprintf(...) ... would be enough. The check for an empty argument doesn't hurt, though."}
{"pred": "Use 2 (not 0) spaces for indentation.", "gold": "I could be missing something here, but the `from` and `cc` are the same. On the test email sent to gatewaycommunicator, these values are different."}
{"pred": "Why did you remove this test?", "gold": "I'm honestly scared because act is now a hard requirement for useEffect which it wasn't before... This could break some tests :("}
{"pred": "`election->blocks[block_a->hash ()] = block_a;` ?", "gold": "Could use election from `info_a.election`, or is this deliberate?"}
{"pred": "Why do we need this method?", "gold": "looks like this should be `return array(LegacyFormHelper::getType('form'));`"}
{"pred": "I think this should be `typeof opt_port === 'function'`.", "gold": "Maybe it would simpler to ignore opt_port if type !== 'number'?"}
{"pred": "Why change this to a for loop?", "gold": "Where was `name` being declared before?"}
{"pred": "I'm not sure if this is the best place for this helper. I think it should be in `pkg/apis/apps/v1/helper.go`", "gold": "nit: use `corev1.ConditionUnknown`"}
{"pred": "Shouldn't this be `/^[a-f0-9]*$/`?", "gold": "You also need to add a similar check on line 992, there's another place where we check `length === 24`"}
{"pred": "Shouldn't this be `getVoteProviderAfterBlock`?", "gold": "nit: can extract the voteProvider as a local variable"}
{"pred": "You can use `assertThatThrownBy` here.", "gold": "[0] Not suggesting you change it here, but....kindof weird that there's just not an `assertFuncNotEquals`"}
{"pred": "nit: `wether the given identity is registered or not`", "gold": "why are we passing 'registryAddress' here? We probably should construct it together with bc. Registry is not something that change?"}
{"pred": "It's like {@link RA.flattenPath|flattenPath}, but preserves object under property path", "gold": "`.` at the end of the sentence"}
{"pred": "I don't think you need to do this. You can just use `s.metrics.PingTime`", "gold": "wouldn't it be useful to split this into an error metric for the timing?"}
{"pred": "Extra empty line detected at class body end.", "gold": "Not sure if this is good enough. Each generator will have it's own unit test anyway. Ideally, I think I'd want to test that each generator in the yml is actually a valid generator..."}
{"pred": "Why do we need this?", "gold": "line is 138 characters"}
{"pred": "Why do we need the second return value?", "gold": "Nit: I would leave `Wire` out of the description; if you use this without wire you can still use it."}
{"pred": "Nit: Unnecessary new line.", "gold": "Nit: each field can be on a separate line to make it visually easier to read."}
{"pred": "Shouldn't this be `compiler_info.json`?", "gold": "Do we still have these files? Shouldn't we remove these?"}
{"pred": "nit: `ErrorRenewBeforeInvalid` or `ErrRenewBeforeInvalid`?", "gold": "A lot of things to do with constants seemed to move since the original commit, so I stuck this here, Is there a better place for it?"}
{"pred": "Why is this 10?", "gold": "is 10 too small compared to 1000? consider sync chan is unicast only (vs block chan is broadcast + unicast), i would say use 200~400 for BlockSyncChanSize my concern is that this would potentially slowdown sync speed of full-node"}
{"pred": "Why do we need to reject private plans?", "gold": "A full parse of the plan here on listing the plans will be expensive from both a computation and IO perspective."}
{"pred": "This should be `UART_TX_PIN`", "gold": "These constants use the `_PIN` suffix, while the other constants don't use it. I'm not sure what is best, but I would prefer to keep this consistent. Do you have an opinion on which it should be (with or without suffix)?"}
{"pred": "Shouldn't this be `final`?", "gold": "Hmm... this feels like discovery should come first. perhaps `--discovery-dns-url`? @NicolasMassart any opinions on this or ideas on who it should be run by?"}
{"pred": "Why is this needed?", "gold": "why is this needed?"}
{"pred": "Why do we need this change?", "gold": "I wonder if it'd be possible to autogenerate a key from the name within this function if one is not provided explicitly, rather than having all the callsites pass both the name and key (and usually as the same value)? Might give us a good place to implement a `name->key` function that isn't 1:1."}
{"pred": "Shouldn't this be `TYPE_I16`?", "gold": "@adriancole I do not see a change in the thrift file. Are there unit tests verifying that this manual serialization is compatible with the native Thrift serialization done by classes generated from `.thrift` IDL file?"}
{"pred": "Shouldn't this be `PLAYER_NAME_MAXLEN`?", "gold": "spelling (variable name, all three changes)"}
{"pred": "`desiredUser` and `desiredRole` don't seem to be used in this function.", "gold": "I believe you meant \"specify `desiredUID` and `desiredRole`\"?"}
{"pred": "nit: remove empty line", "gold": "Please follow the import style, move it to its similar group"}
{"pred": "Why do we need this function?", "gold": "Do we really need these? This is expanding on an API that we're about to do work on with the error stuff @kriskowal"}
{"pred": "Why did you remove this?", "gold": "passwordModificationTime is no longer used - did the change drop a time check that should be restored? Or should the param get dropped from the methods?"}
{"pred": "Why do we need to trim here?", "gold": "Would it break here without trim? If so, can we do trim in Startup.cs so we don't need to add this code to every parser?"}
{"pred": "Why did you remove this check?", "gold": "Since we're using Logrus, probably best to use `Infof` to avoid confusion (Logrus' Printf behaves differently to the built in one)"}
{"pred": "Why is this change needed?", "gold": "Hm, this looks like a change that should go upstream as well."}
{"pred": "Why is this removed?", "gold": "let's keep ActionByActionHash and delete getActionByActionHash"}
{"pred": "Why do we need this method?", "gold": "please use return type"}
{"pred": "Why change to `fine`?", "gold": "This is deliberately at this level."}
{"pred": "Why is this change needed?", "gold": "I'm going to go ahead and undo this change, I don't think it was intentional."}
{"pred": "nit: currnent => current", "gold": "> specialised This isn't a typo in my neck of the woods  "}
{"pred": "Why is this needed?", "gold": "will change to `storage_target`"}
{"pred": "Why this change?", "gold": "This would be better as `cls.securitycenter_client`, to match what is being instantiated."}
{"pred": "Why do we need this?", "gold": "Could we have this initialization as part of the initialize method?"}
{"pred": "Why is this null?", "gold": "This line should be removed as editController is not used from this context anymore."}
{"pred": "nit: `RetractTable returns an output flux Table`", "gold": "This is correct in concept but the method signature doesn't really communicate the same thing. In other words, if the function produces an output table where is it? Its not on the function signature. Can you explain where the output table is created?"}
{"pred": "I think this should be `if init_cfg is not None and 'checkpoint' in init_cfg:`", "gold": "For insurance, it's best not to take it directly"}
{"pred": "Why do we need the `value` parameter?", "gold": "change 'value' to keysToSend, here and in other references in this commit. 'value' implies the user is getting the value of the element, rather than just the keys we're sending to it."}
{"pred": "Why do we need to save task data here?", "gold": "is the plan to fully migrate to boltdb and then remove the state save here?"}
{"pred": "output.strongColor = 'rgb(220,220,220)';", "gold": "This should be `output.colorBright`. Unless I'm missing some reason for adding a new theme variable."}
{"pred": "Why is this needed?", "gold": "nit: I wonder if these should be moved down to where version is defined, just to keep them all in the same place."}
{"pred": "Why is this needed?", "gold": "Is this supported by every implementation of Java (and Android)? Should it be conditional upon `gen_nullable`?"}
{"pred": "Align the operands of an expression in an assignment spanning multiple lines.<br>Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "@briri Thanks! I just caught this too updating my feature branch"}
{"pred": "This should be `fs.Debugf(nil, \"Using RCLONE_CONFIG_PASS returned:\", err)`", "gold": "I think you should move this block (and the `envpw := os.Getenv(\"RCLONE_CONFIG_PASS\")`) right to the start of the function, then we can remove the duplicate code below"}
{"pred": "nit: space after `//`", "gold": "Is this only to set the node to draining?   I think we can do that inside `Before` or something?"}
{"pred": "Why do we need this?", "gold": "This should have been moved up above this inner `try` because the log message in the `catch` block does not apply to this."}
{"pred": "Should this be `alias_types`?", "gold": "Do we expect people to use PlanResult directly?"}
{"pred": "`actualErr` doesn't seem to be used.", "gold": "Maybe we should call this something like `errToReturn`?"}
{"pred": "Shouldn't this be `epochNum >= fairBankEpochNum && epochNum <= fairBankEpochNum+a.foundationBonusLastEpoch`?", "gold": "should calculate numEpochIn1Year = xxx and <= fairBankEpochNum+numEpochIn1Year a.foundationBonusLastEpoch just happens to be equal to 1 year now, but should not count on that"}
{"pred": "Why do we need to change this?", "gold": "I wasn't sure if the content type needed to be removed from both the `default` and `usemap` objects - I'm not sure how usemap is used."}
{"pred": "Why is this import needed?", "gold": "Duplication of line 28 Please refer your tox -e flake8 It seems that XStrField, XShortField, FieldLenField are not used"}
{"pred": "Please use `log.warning` instead of `log.prompt.debug`.", "gold": "I don't really understand the `self._file_model.index(path)` as parent here - you use `self._root_index` for `rowCount` above, so wouldn't the parent here need to be `self._root_index` as well?"}
{"pred": "I don't think this is needed.", "gold": "Do we want validation somewhere that max >= min? Or simply treat the max < min case as ignoring max?"}
{"pred": "Why did you remove the `== '':inner=:else=${ndc}|` part?", "gold": ":+1: that's a easier example :)"}
{"pred": "`findProductIdsWithBoundAttributeByAttributeId(AggregateId $id): array;`", "gold": "If an external module decorates this interface, such a change will cause it to generate an error"}
{"pred": "`fnmatch (arg, name, FNM_PERIOD)` -> `fnmatch (arg, name, FNM_PERIOD) == 0`", "gold": "Oh ha hah, FNM_PERIOD worked out nicely there. Points for co-opting a file system convention."}
{"pred": "nit: remove empty line", "gold": "wrong grouping. As you can tell from the other files, we put system packages in the first group, the 3rd party packages in the second group, and our own packages in the third group."}
{"pred": "Shouldn't this be `if o.jobName != \"\"`?", "gold": "Is `o.name` always set here?"}
{"pred": "nit: `onSteadyStateCanResolve` -> `onSteadyStateDependencies`", "gold": "Can this line be removed, as `SteadyStateDependencies` isn't updated anywhere? Also do we need to check the `TransitionDependencySet` here?"}
{"pred": "`plan.present? && plan.has_annual_plan?`", "gold": "`plan.present?` and `has_active_subscription?` are equivalent. We can drop this change, while leaving the one on `app/controllers/application_controller.rb`."}
{"pred": "Why is this needed?", "gold": "No need for this, as pylint already only turns things off for this function and it's needed for the entire function."}
{"pred": "Shouldn't this be `AlertmanagerAllowList`?", "gold": "L171 needs to be modified too?"}
{"pred": "Please add a space after the `if`.", "gold": "Why do you compare by nodeid? Simply saying d == e should be enough. Unless we have to objects in memory with the same nodeid. If that is so, something went really wrong."}
{"pred": "why do we need this?", "gold": "configs/pvt/retinanet_pvt_t_fpn_1x_coco.py --> configs/pvt/retinanet_pvt-t_fpn_1x_coco.py"}
{"pred": "Is there a reason why we don't use `json:\"DesiredStatus\"` here?", "gold": "Nit, this could be json:\",omitempty\""}
{"pred": "nit: missing space after `//`", "gold": "It's kinda funny to read `s.Image.Image` I wonder why it resulted to this way. What would it take to refactor to just `s.Image`?"}
{"pred": "Why do we need this?", "gold": "nit: I like the idea! can we instead change the tag to `integration-remote` to be more specific? I feel like it's possible for us to use the `deploy` build tag for possibly another scenario"}
{"pred": "Why did you change this?", "gold": "Copy and paste error here. Edit: Also missing commas here and in other Perl croaks between some parameters and not others."}
{"pred": "Why do we need stateRoot here?", "gold": "stateRoot or maybe ParentHeader would make more sense from API point of view?"}
{"pred": "Why was this removed?", "gold": "Are you sure that this is no longer needed?"}
{"pred": "`SNAPSHOT_WITH_STATS_COLUMNS` -> `SNAPSHOT_WITH_STATS_COLUMNS`", "gold": "Would it help to use SCAN_COLUMNS as base to build SCAN_WITH_STATS_COLUMNS e.g like so `SCAN_WITHSTATS_COLUMNS = ImmutableList.<String>builder().addAll(SCAN_COLUMNS).add(\"value_counts\",....).build()` ?"}
{"pred": "This service is deprecated, use ReportPipedMeta instead.", "gold": "`ctx` is unused in ReportStat"}
{"pred": "Why is this header needed?", "gold": "We don't want to add boost as a dependency when building the Thrift compiler. Sorry."}
{"pred": "`speedChange` -> `minSpeedChange`", "gold": "It's not printing the range. Also I think it's useful to print a warning above stating that the minimum change is -1000."}
{"pred": "nit: `SchedPolicyGet returns schedule policy matching given name.`", "gold": "if name is empty will this become enumerate ? (and cause the unmarshal to fail ?)"}
{"pred": "Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.", "gold": "How about including a flash message that explains the exercises are only available to subscribers of X plan?"}
{"pred": "Please remove this blank line.", "gold": "You should also call `e.accept()` and `return` so the key press isn't processed further (as we're leaving insert mode anyways)."}
{"pred": "Style/TrailingCommaInHashLiteral: Put a comma after the last item of a multiline hash.", "gold": "Freeze mutable objects assigned to constants."}
{"pred": "Why do we need to wait for the page to load?", "gold": "Hmm, this feels hacky. Maybe good enough if it makes the test more stable, but why is timing even an aspect here, since below it should wait for these two things anyway?"}
{"pred": "Do we need to check if `xForwardedFor` is not empty?", "gold": "Do we want this on by default, or an opt-in (e.g. via some config while add the instrumentation)? I guess a more general question is - what's the bar for the default vs opt-in tags."}
{"pred": "Why this change?", "gold": "`status` is just one of the features, named as status is not suitable."}
{"pred": "You can use `UserPreferences.isFeedFilterEnabled()` here.", "gold": "There is an option to hide the subscriptions list from the sidebar. If it is hidden, the filter text should not be displayed."}
{"pred": "I don't think we need to validate the memory breaker threshold here.", "gold": "I'd like for all of this to be dynamically configurable at some point, but it doesn't have to be in this PR. Can add it to the future SIP or create a separate JIRA for it, as you think would be appropriate."}
{"pred": "Why did you remove this?", "gold": "move the constructor to down the `namespace`"}
{"pred": "Why do we need a pointer here? Isn't `federatedClusterRef` sufficient?", "gold": "Nit: ending with a '.' looks consistent with the fields around it."}
{"pred": "Why do we need to pass in `req.Id` here?", "gold": "Audit log will not have a warning about they are using a deprecated path, is it something we must care about?"}
{"pred": "Shouldn't this be `TypeMemberVisibility.Assembly`?", "gold": "I think you also want to update the condition to add ` || impl.Visibility == TypeMemberVisibility.FamilyOrAssembly`."}
{"pred": "Shouldn't this be `uint64(100)`?", "gold": "`DepositToRewardingFundBaseGas` is a global variable (from `gochecknoglobals`)"}
{"pred": "I think this should be `Operational`", "gold": "What do you think of \"operations\"?? Also what do these emojis look like on Linux??"}
{"pred": "I don't think we need the `prime-aside-links` class.", "gold": "I like the word \"give\" here. Feels like I'm giving a gift to my team."}
{"pred": "I don't think we need this import.", "gold": "Is it possible to use `np.random` module instead?"}
{"pred": "Shouldn't this be `allow_none=False`?", "gold": "``default=None`` implies ``allow_None`` so ``allow_None`` is superfluous here. As a special case, if allow_None=True (which is true by default if the parameter has a default of None when declared) then a value of None is also allowed."}
{"pred": "Why is this hardcoded to `system:k3s-controller` instead of `system:k3s-controller`?", "gold": "Is there anything in particular that makes setting up the downstream rolebinding(s) to `system:k3s-controller` burdensome or confusing? This changes looks fine to me but it seems a shame to alias an embedded k3s controller. If we are doing this in other places that I am not aware of then we can dismiss this concern out of hand."}
{"pred": "Why this change?", "gold": "File is not `goimports`-ed (from `goimports`)"}
{"pred": "Nit: `Architecture` => `Architecture`", "gold": "nit: all other types in this project have full names, so maybe a better name would be `OperatingSystem`?"}
{"pred": "Why did you change this?", "gold": "Why is this needed here?"}
{"pred": "Why this change?", "gold": "mmm, why a method declaration should not have the TypeVariableResolutionCapability? Is this ok?"}
{"pred": "Please revert this change.", "gold": "nit: any reason you swapped the ordering?"}
{"pred": "Why did you change this?", "gold": "can you de-uglify at least this line?.. hard to tell what changed..."}
{"pred": "Why was this removed?", "gold": "Please can you merge master in before making these changes. I just reinstated a bunch of BPF UTs. Possible that the UTs use this code."}
{"pred": "Why do we need this class?", "gold": "Do you want to add additional cases for `Bla.__b()` and `self.__c()`? (Just add additional classmethods `__b` and `__c` and the calls to `__init__`)"}
{"pred": "Should this be `len(recids.values())`?", "gold": "the recids is never changed after. So, it should contains the exact shown results, whatever are the rights for the user (admin or simple user, restricted collections...)"}
{"pred": "Why do we need this?", "gold": "Shouldn't the docstring mention that the MD5 checksum of `p` is computed each time and verified? Also, could there be use cases where a caller might not want such a check to happen because, eg, a blob storage solution doesn't provide MD5 verification or uses another hash algorithm such as SHA256?"}
{"pred": "nit: space after `=`", "gold": "focusRedirect is used in the powerpnt appModule. We might have to make sure that this does not break. Having said that, I really like this being handled on the events level!"}
{"pred": "nit: remove empty line", "gold": "You imports are out of order"}
{"pred": "Why does this need to be public?", "gold": "This should not be called Flow Trigger. FlowTrigger should has its own flowTrigger job name, for instance, \"flowtrigger\""}
{"pred": "Why is this needed?", "gold": "File is not `goimports`-ed (from `goimports`)"}
{"pred": "I don't think this should be a warning.", "gold": "Why do we need `\\n` if we already use `WriteLine`? (and `\\n` is not cross platform)"}
{"pred": "Why do we need both `instrumentationName` and `protocol`?", "gold": "What is instrumentation name used for? I'm not seeing other classes use it, only a getter, constructor, and builder."}
{"pred": "Why disable and restore 67?", "gold": "@kristofgazso could you review these warnings?"}
{"pred": "", "gold": "will delete this."}
{"pred": "Align the elements of a hash literal if they span more than one line.", "gold": "~~Indent 2 lines above~~ Disregard. My fault"}
{"pred": "Shouldn't this be `!item.getType().isRepeated()`?", "gold": "What was the bug that this is fixing?"}
{"pred": "`base64string = base64.b64encode('%s:%s' % (parsed_url.username, parsed_url.password))`", "gold": "This will always add the authorization header to the request object. Is this the right scope for these two lines? If username/password are not defined, it will encode 'Basic :'"}
{"pred": "Should this be `#ifdef BAZEL_TEST_DATA_PATH`?", "gold": "Is this always how Bazel does paths? Would it be nicer to do `-DBAZEL_TEST_DATA_PATH=../com_github_google_flatbuffers/tests/` so this string is not hardcoded in the the source?"}
{"pred": "E501 line too long (116 > 115 characters)", "gold": "Not an expert of ES, so not sure of the impact here."}
{"pred": "Shouldn't this be granteeList?", "gold": "Who deletes the memory for the granteeList? (or the roleList for that matter)"}
{"pred": "`for (auto & subscription : subscriptions)`", "gold": "This loop is missing a lock on subscriptions_mutex."}
{"pred": "Align the elements of a hash literal if they span more than one line.", "gold": "shouldn't clearance be setting these up for us?"}
{"pred": "`noOp` is unused (from `structcheck`)", "gold": "Need to update the doc for `TelemetrySDK` and `Host` structs deleting references from removed functions."}
{"pred": "Why is this removed?", "gold": "I think we should keep that here and add a new method `isSyntacticallyFinal` that returns `super.isFinal()` (and can be used in UnnecessaryModifier). Otherwise the contract of `isFinal` is not respected"}
{"pred": "Why do we need to account for scrollbarWidth and footerHeight here?", "gold": "Is there a reason why we wouldn't want to check this every time? Why are we only checking for the footer and scroll bar when enableCellEditOnFocus is true?"}
{"pred": "I don't think this is used.", "gold": "You need to create an API for this class. This class should follow roughly the same dependency structure than RemoteAvailableInstallersPlayOnLinuxImplementation / RemoteAvailableInstallers. Maybe we could use a inner class here?"}
{"pred": "Why do we need to change this?", "gold": "This should not be a case, right? If `run_id` is the same `workflow_id` can't be changed. Actually surprised that it is not part of a key."}
{"pred": "Should this be removed?", "gold": "How would AQR work for an INSERT/SELECT of one table into another where a LOB column is being copied?"}
{"pred": "Why do we need both v2 and v3?", "gold": "Since these are ultimately different endpoints, it would be nice if we could move them up one level and nuke the common `sds` directory in order to reduce path stutter"}
{"pred": "`beforeChangeResult.length === 0 || beforeChangeResult[0] === null`", "gold": "Please check also whether `null` occurs in the rest of `beforeChangeResult` array."}
{"pred": "nit: `UnaryFilter` -> `UnaryFilter`", "gold": "Outdated docs. There is no response, there's an ack."}
{"pred": "Why do we need to call `Exec` here?", "gold": "I'd rather have the container process remove the FIFO after it unblocks. Then `start` can always `Exec()`, and you can catch the \"FIFO does not exist\" error and translate it to a prettier \"someone must have already started the container\"."}
{"pred": "Why do we need this change?", "gold": "can you check if there's other similar cases to add nil-check like this?"}
{"pred": "I don't think you need the parentheses here.", "gold": "`<= 64`? I just picked up what you said in #3981 (\"the CN field is limited to 64 characters\") but maybe there's something I don't know where the 64th character is needed (trailing dot or whatever?) Also this sounds like something that could be beautifully unit tested. Sorry for bugging you :grin:"}
{"pred": "I don't think you need the `.limit(10)` here, you can just do `where(['lower(nice_name) LIKE ?', term.downcase])`", "gold": "I understand that this grabs a Licenses objects but what is the autocomplete method used for? What does this do in context of the auto_completes controller?"}
{"pred": "Why do we need this method? Can't we just use `blockchain.getTransactionLocation`?", "gold": "I don't really like that way of naming methods based on their arguments. But I can see that the other method names are the same ..."}
{"pred": "Why do we need this method?", "gold": "@sekmiller This method correctly strips the leading and trailing slashes (and also \".\" and \"-\"); But I thought the plan was also to replace any multiple slashes between nested folders with a single slash. For example, as implemented now, I can enter \"folder1///folder2\", and it gets saved and displayed like this, with the 3 slashes. I thought we wanted to sanitize it as \"folder1/folder2\"."}
{"pred": "Shouldn't this be `uint64_t`?", "gold": "Looks like the X86 inline assembly is not happy with this type. I will update that"}
{"pred": "This should be `&&` instead of `and`.", "gold": "Tabs and a space, again."}
{"pred": "I don't think this is the right place for this function. It should be in QuestManager.", "gold": "Please just enclose if blocks with brackets; this has created issues in the past so I'd prefer we don't use them"}
{"pred": "`approve_proposal_url(@proposal, version: @proposal.version)`", "gold": "`version` isn't need anymore because it's built into `approve_proposal_url`, yes?"}
{"pred": "Why do we need this import?", "gold": "Moved to the bottom of the file. `CtrlPDU` sits on `BTLE_DATA` so let's put it after"}
{"pred": "Why is this needed?", "gold": "This ends up requiring the `json` gem, right? Is there any way we can do this to be implementation agnostic (e.g. to let me use `yajl-ruby` for performance reasons (or because my app already brings in a JSON library)"}
{"pred": "I'm not sure this is the right way to do this. I think it would be better to just return `buf[0], nil` here.", "gold": "This seems dangerous. What circumstances lead to the need for a retry? Can that happen more than once? I'm concerned that if we hit the pathological state, this could turn into a CPU spinner. I wonder if we could get the same benefit from just \"trying again\" and failing if it fails the second time."}
{"pred": "`startingSnapshotId` is never used.", "gold": "If there is a reference to other fields or methods, please do the initialization in the constructor."}
{"pred": "Why are we disabling this rule?", "gold": "These should be importing from `pill-container`"}
{"pred": "Shouldn't this be `RETURNVALUE_NOTPOSSIBLE`?", "gold": "Why this change? It will now only show on the bottom of the screen as white text, is it correct behaviour?"}
{"pred": "Layout/EmptyLinesAroundMethodBody: Extra empty line detected at method body end.", "gold": "Does this need to allocate a string or would a nil value (indicating no header) be a better?"}
{"pred": "Why do we need this?", "gold": "Nit: Past tense of `reset` is also `reset`."}
{"pred": "This should be `get_fee_per_kb`", "gold": "Shouldn't this use `'n'` instead?"}
{"pred": "I think this should be `DecisionTaskTimeout`", "gold": "revert back to 'TASK_TYPE_ACTIVITY_TIMEOUT'"}
{"pred": "Why is this needed?", "gold": "Shouldn't we prefer passing a pointer by reference T*&, since these are C++ bindings?"}
{"pred": "nit: `iFromPeers := *n.toAntreaPeerForCRD(...)`", "gold": "nit: Personally I feel that it's cleaner to let `toAntreaPeerForCRD` to take `ingressRule` as a param instead of `ingressRule.From`. It can call `processRefCGs` inside the function and do the ipBlock/AG union within the function itself. It might not be worth the refactor though."}
{"pred": "Why do we need this?", "gold": "Pending has been set only for SPC.. why? for other CRs as well, this need to be done.. right?"}
{"pred": "`$options['allowfullscreen'] ? true : false`", "gold": "would use an empty string here as default and then check for emptiness in the twig template. I dont like mixing types @core23 what do you think?"}
{"pred": "Why do we need to lower case here?", "gold": "How come we need case manipulation for the nextPageToken and not for pageToken?"}
{"pred": "I think this should be `profile#show`", "gold": "why use these rather than regular named paths?"}
{"pred": "I don't think you need the `+ %w[format]` here.", "gold": "Hm, I don't think the extra flags are doing any harm here, but it does seem like `--help` is the only flag you could *actually* use with this command. We might eventually want to separate those out."}
{"pred": "This script is responsible to create candidate sets for all users.", "gold": "We should make this a docstring, so that editors are able to pick it up."}
{"pred": "I don't think you need the `with_properties` here.", "gold": "Put a comma after the last parameter of a multiline method call."}
{"pred": "Why was this removed?", "gold": "App cache size is now managed dynamically by the `WebView`. This statement has no effect in the new framework."}
{"pred": "Can we use `nodeName.toLowerCase()` here?", "gold": "VirtualNode has a `hasAttr` function, any reason why you're not using it?"}
{"pred": "Why was this removed?", "gold": "This now throws when running tests (maybe the move to java 11??). Do we want to keep it?"}
{"pred": "Why did you change this?", "gold": "We can allow 7-char SHA, does not mean we want to show with 7-char in default, please change to `if len() > 10`, then cut."}
{"pred": "\"Cannot add the duplicate file %{fileName}, it already exists\"", "gold": "this one should also have quotes i guess :)"}
{"pred": "why do we need to pin it?", "gold": "Using the variable on range scope `mock` in function literal (from `scopelint`)"}
{"pred": "Shouldn't this be `res.isCompleted()`?", "gold": "does this result in a 200 when the dataset is still inprogress/publishing not yet finalized? Seems like 202 is the right code for that (as it was) and the test should be watching for a 202?"}
{"pred": "Shouldn't this be `orderPath`?", "gold": "Previously you could only order by the field you were searching by. But for full-text search, you can search across all indexed fields, and it didn't make sense not to have a sorting. For backward compatibility, the javascript code uses indexPath as the orderPath when no orderPath is provided."}
{"pred": "Why the extra space?", "gold": "VIM didn't like your whitespace."}
{"pred": "Why is this needed?", "gold": "Are you sure the namespace should change?"}
{"pred": "Why is this change necessary?", "gold": "@martijn00 I'm not sure why we're keeping the object parameter and return type since this can be done by using MvxApplication<THint> with THint set to object"}
{"pred": "Why do we need this?", "gold": "why do we create a time type here?"}
{"pred": "`listViewStyle` is no longer used.", "gold": "Does this style actually need to get loaded in all of these components?"}
{"pred": "Why is this needed?", "gold": "import but not used so you did not resolve compile warnings?"}
{"pred": "I think this should be `(armor % 2 + 1) % 2`", "gold": "This is so much more concise and beautiful than the previous formula  "}
{"pred": "why do we need this?", "gold": "Is there any reason not to have the `static` modifier for the logger? _(that would be in keeping with the reference being uppercase)_"}
{"pred": "Why do we need this interface? Can't we just use `ConnectOptions`?", "gold": "It's not about session creation config. It's about passing consumer config parameters to underlying transport - nothing to do with session itself"}
{"pred": "nit: `overrideEnableDebug` -> `debugEnabled`", "gold": "Why is there an \"enable\" in the param name? Couldn't it just be `overrideDebug`? Here are everywhere else."}
{"pred": "Use nested module/class definitions instead of compact style.", "gold": "`published.recently_published_first` reads a little oddly to me. Is this the same thing as `Video.published.ordered`?"}
{"pred": "Why do we need this try/catch?", "gold": "Encountered this because I had a stray comma. Figured I'd tweak it a bit."}
{"pred": "Why do we need to wait for this to be empty?", "gold": "qq: Should this include the iptables6-save sim. to the inverse checks above?"}
{"pred": "Why not use `utils.ZeroOrNil` here?", "gold": "im open to explicitly checking NotSet value here but json logic already handles it so kept it this way."}
{"pred": "#include \"Lua.h\"", "gold": "The naming of the include file appears to be unlucky."}
{"pred": "I think this should be `self.legend_opts.update(leg_spec)`", "gold": "Bit worried about this. At minimum you should make a copy of the dict here to avoid modifying a user supplied variable."}
{"pred": "I'm not sure if this is the right place to do this. I think it would be better to do this in `CreateLaunchTemplateVersion` instead.", "gold": "Is it better to create one before pruning? In case creation fails we don't want to delete the previous one. We create a new one, it is tagged as latest, so the previous can be deleted. `CreateLaunchTemplateVersion` returns the version created, how about directly trying to delete the previous version? Assuming the numbering is strictly increasing."}
{"pred": "Is this TODO still relevant?", "gold": "Do we require the specific implementation information here?"}
{"pred": "I think this should be `email_address.split('@')&.last`", "gold": "How about `exists?(['domain ~* ?', domain.downcase])` ?"}
{"pred": "`newContextForBackground` is unused (from `deadcode`)", "gold": "Is this getting used in other places? Can we switch all the places to use the new API you added?"}
{"pred": "Why is this being removed?", "gold": "This need to be checked with linux. AFAIK, we have this file in our bin directory that is a link to the system file."}
{"pred": "`/* eslint-disable indent */` can be removed", "gold": "Shouldn't we import `default`? I can't get here to test."}
{"pred": "I think this should be `self.unix_socket`", "gold": "!!!!!!!!!!!!! @graingert, does this mean that tests haven't been running???"}
{"pred": "Why is this null check needed?", "gold": "I've already tried the null-coalescing operator here and got a strange error, so did this the old-fashioned way."}
{"pred": "I don't think you need the `|| ''` here.", "gold": "This doesn't follow our spacing convention. It's also a little hard to read. Can you reformat?"}
{"pred": "nit: this should be grouped with the other ecs-cli imports", "gold": "The deploy should come before template? EDIT: I see that in other files, we put a separate line and put deploy at the end. What is the reason for this?"}
{"pred": "Should this be `Aggregation.Drop`?", "gold": "Consider making a constant (e.g. `MetricStreamConfiguration.Drop`)."}
{"pred": "Why is this import needed?", "gold": "same question: why not just switch this to range too?"}
{"pred": "Why not `Type::Unknown`?", "gold": "@chuckatkins most places used an empty string for \"no type\", but a few used `\"unknown\"`. I've converted both cases to `Type::None`. Do you know why there was a distinction before?"}
{"pred": "nit: `static_cast<size_t>(num_data_)` -> `num_data_`", "gold": "should we assert for the type for `FeatureGroupData` ? I think it should be 1-Byte type."}
{"pred": "Why did this change?", "gold": "As long as you are sure this is definitely correct now... :-)"}
{"pred": "I think it would be better to use `System.lineSeparator()` instead of `\\n`.", "gold": "... so that all action buttons have the same height :-)"}
{"pred": "Why is this header needed?", "gold": "Use correct, alpha sorted, include order. Correct order means: 1. Header corresponding to this source (i.e. `\"LatencyTestPublisher.hpp\"`) 2. C system headers 3. C++ system headers 4. Alpha-sorted external libraries headers 5. Alpha-sorted public headers from this project 6. Alpha-sorted private headers"}
{"pred": "nit: typo in implemenation", "gold": "I hate this name, open to suggestions."}
{"pred": "I don't think this is the right place to store the metadata. I think it should be in `retrieveTargetMetadataFromCache`.", "gold": "Does this log line work? We need Warningf or just warning without the format string."}
{"pred": "Why do we need this?", "gold": "The pull controller would need similar updates."}
{"pred": "Why did you change the copyright year?", "gold": "ignore this.. just didn't want to litter with a commit update to satisfy license plugin"}
{"pred": "Why was this changed?", "gold": "Is this definition needed since it doesn't look like it's being used anywhere?"}
{"pred": "`descendants.length == 0` is always true.", "gold": "Can this condition be reworded using `if` please?"}
{"pred": "I think this should be `inputs != nullptr && !inputs->hasData()`", "gold": "after ||, no need inputs != nullptr"}
{"pred": "nit: `IntegTestBuildspecPath` -> `TestBuildspecPath`", "gold": "Is it just preference or on purpose that using slice of structs instead of slice of pointers?"}
{"pred": "`oldDom` can be `null` here.", "gold": "This line always confused me   anyway. Good catch!"}
{"pred": "Why do we need a context here?", "gold": "Should we add `ctx` to `BlockServer.Shutdown()` for this purpose? Would be nice, but I don't care too much."}
{"pred": "Shouldn't this be `period.nanosec`?", "gold": "Duration_t at RTPS level must be serialized using fractions."}
{"pred": "nit: `msgInboundDispatcherNotRunning` is unused (from `deadcode`)", "gold": "\"peer\" has its own meaning within YARPC with its own class of objects. This should probably be \"dispatcher\" too?"}
{"pred": "This should be `experimental-enable-ctu-analysis=false`", "gold": "I do not like this line break before `=true`. Maybe starting the list in the next line would help to reduce the indent? This way we could keep this string together."}
{"pred": "Why are these removed?", "gold": "_plugins should be removed too"}
{"pred": "Why do we need to check for `img` and `input`?", "gold": "The rule selector will not include `<input>` and `<area>` elements. Why not make this a new, separate rule altogether?"}
{"pred": "Shouldn't this be `except (userscripts.UnsupportedError, userscripts.NotFoundError)`?", "gold": "@The-Compiler Is this style okay or would you prefer a common userscript exception base?"}
{"pred": "Shouldn't this be `value.sub_type`?", "gold": "we'd need to return a MongooseBuffer here instead of the Binary. lets add the subtype option to the buffer schema type as referenced in #1000 instead."}
{"pred": "Why was this removed?", "gold": "Let's remove this change."}
{"pred": "E231 missing whitespace after ','", "gold": "Could you split this into multiple lines?"}
{"pred": "Should this be `currentEntityURL` instead of `currentEntityURL`?", "gold": "This technically works, however it may be safer to use both `getCurrentReferenceURL` and `getCurrentEntityURL` and then make this condition `currentReferenceURL === currentEntityURL`. Currently, this code only works based on the internals of `getCurrentReferenceURL`, so by checking both we would decouple that."}
{"pred": "Why do we need to change this?", "gold": "It does not recommend capitalization"}
{"pred": "Use the new Ruby 1.9 hash syntax.", "gold": "Minor thing, but can you use 1.9 hash syntax for this?"}
{"pred": "Why do we need to format windows path here?", "gold": "I tried to follow the code structure already present."}
{"pred": "nit: `of` -> `to`", "gold": "seems reasonable to also want to include the 'to' location?"}
{"pred": "`resource_filename(\"nupic\",\"\")` -> `resource_filename(\"nupic\", None)`", "gold": "Please leave 1 space char between commas here and other places in this PR."}
{"pred": "Shouldn't this be `&&`?", "gold": "hm is this really &&? Not ||? Was it initially correct if any of these things are not set that it needs to recreated?"}
{"pred": "Shouldn't this be `cli.hasOption(\"cluster\")`?", "gold": "Please don't use C-style array declarations. IMO our pre-commit ought to be enhanced to not allow this"}
{"pred": "`rc = (p->data.bo.size == p1->data.bo.size);`", "gold": "@rhc54 This doesn't look like a comprehensive comparison. For `PMIX_STRING` we seem to actually compare the content of the data while here we only compare meta-information which doesn't ensure that values are the same."}
{"pred": "`confirmed_frontiers` -> `confirmed_frontiers`", "gold": "I think `bypass_frontier_confirmation` conveys the intention better (default false as well)"}
{"pred": "Filecoin project imports should be grouped with other stdlib imports.", "gold": "This looks like it goes beyond the scope of removing `BlockHeight()`, in the future please do this in a separate commit at a minimum -- separate PR is fine too."}
{"pred": "I think this should be `self._tab = None`", "gold": "You'll also need to adjust `FakeWebTabAudio` in `tests/helpers/stubs.py`."}
{"pred": "Why are we deleting this file?", "gold": "@csrwng what should we do here? This one is from origin."}
{"pred": "Why is this header needed?", "gold": "Follow alphabetical order."}
{"pred": "Why do we need this interface?", "gold": "As far as I can tell, these always get and set the context as an `IReadOnlyDictionary<string, string>`. Can we use that here instead of `object` and get rid of the `as IReadOnlyDictionary<string, string>`?"}
{"pred": "Shouldn't this be `html.escape(self._opt.text)`?", "gold": "As you only have `{}` as the format string (without anything else in it), this is the same as doing `self._doc.setHtml(html.escape(self._opt.text))`"}
{"pred": "This should be `AZKABAN_SECURITY_CREDENTIAL_NAME`", "gold": "Where would this be configured? In azkaban.properties?"}
{"pred": "Shouldn't this be `if (err && typeof callback === 'function')`?", "gold": "1. Use `const` instead of `var` here. 2. Move the check to after the `if (update == null || typeof update !== 'object')`."}
{"pred": "Why do we need this? Isn't it enough to use `uv_async_t`?", "gold": "Let's assume that on Linux `eventfd` is always available as a wrapper of the eventfd2 system call. It is supported since linux 2.6.27 + glibc 2.9, as well as from the ancient versions of bionic. In other words, it would be fair to argue that the pair would be available on practically all platforms that provide `pipe2`. Therefore switching from using `pipe2` to `eventfd` on linux unconditionally would not cause issues on our users."}
{"pred": "Why do we need to create a new instance here?", "gold": "This field could be `final`."}
{"pred": "Shouldn't this be `@ssh = nil`?", "gold": "would be good to have a test for the case when `shutdown!` raises"}
{"pred": "Why do we need this?", "gold": "Does upsert pass this check also?"}
{"pred": "Should this be `Warn`?", "gold": "Apologies reviewers, I did end up pushing another change. I was starting to request SRE-P help to get the apiserver configs from some clusters before and after when I realized I can just log the stdout from the patch command to see if anything was changed or not. Much simpler to verify if my work did or did not make changes to the config during the transition. Also got the spacing issue you mentioned @abhinavdahiya Thanks all."}
{"pred": "Should this be `kbfsConfigNameTempTemp`?", "gold": "I'm not sure this naming is a good idea; that's the format for macOS xattr metadata files on unsupported filesystems."}
{"pred": "Line is too long. [81/80]", "gold": "Metrics/LineLength: Line is too long. [85/80]"}
{"pred": "Why do we need this import?", "gold": "Please remove these imports. The project's style is to use `Assert.assertEquals` and not import static methods in general. This also caused a lot of unnecessary changes."}
{"pred": "Shouldn't this be `return FLB_ERROR`?", "gold": "thanks. Note that returning at this point might leak memory from the allocations above, so the PR will need to take care of that too."}
{"pred": "`config.val.content.desktop_fullscreen is not None`", "gold": "If you really want to rename this, you'll also need to adjust the name in `__init__` and in other places it's used (`browser/commands.py`)."}
{"pred": "I don't understand why this doesn't work.", "gold": "As discussed at standup, I gave up on this. Calling `DeleteMapLayerMetadataCommand` felt cleaner anyway because there might be other cleanup that needs to happen. @scolapasta and @matthew-a-dunlap plan to discuss this."}
{"pred": "Is this leftover from debugging?", "gold": "Do we need these changes? If so, can you tidy up the messages? Looks like it might have been your testing/debugging changes  "}
{"pred": "I think this should be `LOG_DRIVER_CONTAINER`", "gold": "where is the default being set?"}
{"pred": "Shouldn't this be `matches[3].start`?", "gold": "these changes should likely be in the next commit instead"}
{"pred": "Why do we need this?", "gold": "Since you have defined this struct, I would suggest to replace all exist literal structs by this."}
{"pred": "Shouldn't this be false by default?", "gold": "The field name doesn't really capture what this option does. I think `mConfirmDiscardMessage` would be a better choice."}
{"pred": "should be `if (!is_string($media->getBinaryContent())) {`", "gold": "what if `$media->getBinaryContent() == Symfony\\Component\\HttpFoundation\\File\\File` does `is_string()` return `true`? ping @greg0ire"}
{"pred": "Nit: `nested->type.struct_def` -> `nested->type`", "gold": "maybe rather than `bool` make this field a `StructDef *` ?"}
{"pred": "`enqueueBlocksToDeleteAfterShortDelay` is unused (from `deadcode`)", "gold": "Shall we maybe put this in a `const` like `backgroundTaskTimeout`?"}
{"pred": "Why are we swallowing this exception?", "gold": "CI is complaining about this."}
{"pred": "Why do we need this method?", "gold": "Let's only change a file if it is really necessary. Such a change does not bring much value and makes it harder to find the original commit in which the method was introduced."}
{"pred": "`array_key_exists('class', $attributes) && $attributes['class'] !== ''`", "gold": "I would prefer to set up space between classes in format pattern, `%s %s` and then use `trim()` to remove unnecessary whitespaces. This will also solve stripping whitespaces from the beginning and end of a string `$attributes['class']`"}
{"pred": "nit: `optOpEnum` -> `optionalOpEnum`", "gold": "when Op is illegal should return here?"}
{"pred": "Why was this removed?", "gold": "don't we need to remove the project version from installedVersions?"}
{"pred": "`options[:page_ranges] ||= Array(options[:page_ranges])`", "gold": "the bridge here isn't defined as an accessor / reader to try mask it better. So you need to directly call the iVar `@bridge` here."}
{"pred": "Why do we need this?", "gold": "This is intended. Pls revert this."}
{"pred": "Why did you remove the `Serializable` cast?", "gold": "Something wrong with cast to `(Comparator<> & Serializable)`, need to be investigated"}
{"pred": "Why was this removed?", "gold": "I think we need this. Not sure, I'll test."}
{"pred": "Why was this removed?", "gold": "I'm going to need to check if google compute requires these steps in this order, or if you can disable iptables after the fact."}
{"pred": "Why is this needed?", "gold": "Did go change their tags with the new version?"}
{"pred": "Why do we need to merge the trust domain config sources?", "gold": "I don't recall what we decided here in terms of which source would get priority. As written, the static configuration will overwrite datastore results."}
{"pred": "Why this change?", "gold": "I think it should still panic for when there are no outputs; might be nice to special-case that though so the message is more explicit."}
{"pred": "Why do we need a new instance of `MetricsConfig` here?", "gold": "*NULL_DEREFERENCE:* object `null` is dereferenced by call to `meterSupplier(...)` at line 122."}
{"pred": "`readPreference && readPreference.mode !== 'primary'`", "gold": "switch over to .mode"}
{"pred": "Unexpected trailing comma comma-dangle", "gold": "I guess your IDE did some auto-fixing here  "}
{"pred": "why do we need this import?", "gold": "This is an unused import failing recommit still."}
{"pred": "Shouldn't this be `cur_path.gsub(/\\//,'\\\\')`?", "gold": "I'm concerned that we're conflating multiple things here. There are 2 things that Beaker should really care about: - Network transport - i.e. `ssh` vs `winrm` - Interpreter - i.e. `bash`, `cmd`, `powershell`, etc The problem is that @cowofevil is running Bitvise SSH, and he assumed we should be setting `is_cygwin: false` in node definitions. But that doesn't really accurately convey what we care about, and since Beaker doesn't appear to track network transport apart from interpreter, we end up in a strange state. `is_cygwin: false` appears to end up setting `is_powershell?` to `true`, which IMHO is not accurate or appropriate. Bitvise templates use `ssh` (like Cygwin), but the interpreter used is `cmd`, not `powershell`."}
{"pred": "`role=\"dialog\"` should be `role=\"dialog\"`", "gold": "I think this is ok for now. This ties into the larger issue of the site not having a consistent method for relaying form input errors. Please make sure the focus gets set on the close button when the dialog opens."}
{"pred": "The plugin uses GhostTable and SamplesGenerator for calculations.", "gold": "Should these link be removed?"}
{"pred": "`add_undo` should be `False` by default.", "gold": "Please make this a keyword-only argument by adding a `*` argument before `add_undo`."}
{"pred": "Why do we need this?", "gold": "didn't quite follow what this code block is doing."}
{"pred": "I don't think this is the right solution. The `onWindowKeyDown` handler should only be called when the keyboard is pressed.", "gold": "this doesn't sound pretty... I would rather we have a proper navigation for all modes - AFAIK TV remote navigation is very similar to normal keyboard, but maybe it just uses another key codes - those should be extracted in a single file and defined there depending on context then"}
{"pred": "Why do we need to check `dom._isControlled` here?", "gold": "After diffing the children we check whether the value got out of sync, if it did we update it. We also update the `_prevValue` to prepare for the next event hitting our controlled component"}
{"pred": "nit: `glue-code` -> `Glue code`", "gold": "It provides a type called Node which is a fully functional bee client. This package is where the dependencies are injected. It is not just a glue-code, it is concept of node."}
{"pred": "I don't think you need the `_get_value_transformer` here.", "gold": "I think this will change `''` to `'%'` unconditionally, i.e. there'll be no way to set `''` anymore. This should really only be used for values which make no sense anymore."}
{"pred": "nit: `rowKey` -> `rowKey`", "gold": "Nit: this table's row key map -> this table's row keys map"}
{"pred": "Shouldn't this be PJ_LOG_ERROR?", "gold": "this change should be reverted"}
{"pred": "Shouldn't this be `(1, 5, 0)`?", "gold": "I'm a bit confused about the `os.path.dirname(basedir)` here - is this just to get to the parent directory? Either way, I think I'd prefer just having this in `update_version.py` as it's not needed in qutebrowser itself."}
{"pred": "why did this change?", "gold": "Revert this change and see below why..."}
{"pred": "Why do we need this change?", "gold": "Should not switch to `lvis_v1_instance` here because that base config uses ClassBalancedDataset to oversample the data."}
{"pred": "nit: `LOG.finest(\"Adding {} {} times\", caps, info.getMaximumSimultaneousSessions());`", "gold": "This is an informational message that allows someone to read the console output and understand how the grid node is configured. Please leave."}
{"pred": "Why do we need this?", "gold": "This doesn't make sense to me. What does RaiseSingleton mean? To me it sounds like a single object is being.. raised? Not sure."}
{"pred": "`jobExecutorTests` -> `jobExecutor`", "gold": "What's the benefit of having jobExecutorTests as a member variable? What do you think about making the method static? Afterall, it is a stateless method."}
{"pred": "`Check metadata objects and their associated blocks for errors`", "gold": "This looks like it's only downloading things, not really checking their true validity. Especially for the MD object. Should we call `BareRootMetadata.IsValidAndSigned()` in `mdGet`?"}
{"pred": "`InputBuf_T` -> `InputBuf_T`", "gold": "Nikoli, I believe that this addresses your concern. One question for you or Jae-Seung is if any allocation from the clone is properly cleaned up when the vector is destroyed. I believe that it should."}
{"pred": "Should this be called `KindAWSEcsApp`?", "gold": "should be `ECSApp`  "}
{"pred": "Shouldn't this be `self.location.copy()`?", "gold": "flake8 is going to fail on this having 2 lines"}
{"pred": "Why was this removed?", "gold": "should we make a dir named controllers/scheduler/podchaos"}
{"pred": "I think this should be `KeyNodeHostname`", "gold": "there seems to be one KeyNode in kubernetes.go of PV.. would it make sense to use it?"}
{"pred": "nit: remove empty line", "gold": "Im gonna be a little annoying here but did you configure your linter correctly? This empty line should not be here. Maybe go to settings and check if `goimports` is enabled?"}
{"pred": "Why do we need this?", "gold": "Don't think this belongs in this pr"}
{"pred": "Why not just return `d.outbounds`?", "gold": "We can assert on the existence of Outbounds through ClientConfig calls right? Since this is only for tests, do we need this function?"}
{"pred": ">TResult [](start = 52, length = 5) Shouldn't this be TResult?", "gold": "@martijn00 so this PR introduces a new ViewModel lifecyle method? It isn't in the PR description/any new docs  "}
{"pred": "I think it would be better to use `img_meta['input_img_shape'] = tuple(img.size()[:-2])`", "gold": "Are these modification duplicate? Or should we move it into base detector."}
{"pred": "Why did you change this to private?", "gold": "Since this is private and single use it should be un-wrapped inside of the two-arg dagSeed method."}
{"pred": "I'm not sure if this is the best way to do this. I think it would be better to use `array_merge_recursive_overrule`", "gold": "why the order change? Also for the next chunk. (I understand the result will be the same though)"}
{"pred": "nit: `// allowed return types of the FuncDef`", "gold": "I wonder if this should just be a single `string`? We don't have any cases where we return different types and it would make the parser simpler to just read a single identifier."}
{"pred": "`getInputFile(task.file().path().toString())` -> `getInputFile(task.file().path())`", "gold": "I don't think this needs to change. Can you go back to the previous implementation?"}
{"pred": "Shouldn't this be `from molecule import core`?", "gold": "Bump it 2 lines higher, 'c' > 'u'."}
{"pred": "Why is this file needed?", "gold": "Please do not add author here"}
{"pred": "File is not `goimports`-ed (from `goimports`)", "gold": "Similarly, we should be able to persist action uniformly"}
{"pred": "Extra empty line detected at module body beginning.", "gold": "I think i'd prefer this override to be in the test helper instead, if that's possible?"}
{"pred": "Why do we need to do this?", "gold": "This would be better with context added via wrapping or fmt.errorf()"}
{"pred": "I don't think we need this package.", "gold": "What's the purpose of this file?"}
{"pred": "Shouldn't this be `||` instead of `&&`?", "gold": "@bhariharan Why was passcode length requirement allowed to be lowered?"}
{"pred": "Why are we removing these imports?", "gold": "This file needs a license header, too. Sorry I didn't catch that earlier."}
{"pred": "`genesisText[:]` should be `genesisText[:]`", "gold": "probably don't need `[:]` why not reference into `github.com/algorand/go-algorand/daemon/algod/api/server/lib` here and skip bouncing off daemon/algod/server.go ?"}
{"pred": "`abs_error` is not a good name for this function. Maybe `abs_error`?", "gold": "Why reference is converted to table?"}
{"pred": "I'm not sure if this is the right way to do this. I think it would be better to just return an empty response and let the caller decide what to do.", "gold": "should we implement pagination in the fake datastore so the server startup code that paginates entries for trust domain validation can be tested?"}
{"pred": "nit: `f.Vectorized = f.Vectorized || f`", "gold": "What mechanism will be exposed so the caller knows they're using the vectorized version?"}
{"pred": "Layout/SpaceInsideHashLiteralBraces: Space inside } missing.", "gold": "Can we remove respond_to block its not required here"}
{"pred": "`using namespace std;`", "gold": "Do not do that even in example, we demonstrate bad practice"}
{"pred": "This should be `self['is_cygwin'].to_s == 'true'`", "gold": "Hm, taking a second look over this, this is why we have the object inheritance structure that we do. This could be divided up by having a custom determine_if_x86_64 in the pswindows/exec hosts and then a default method in hosts.rb. That way all the custom ps windows work is in a single location."}
{"pred": "Why do we need to call Complete here?", "gold": "We have to `.Complete` now because of empty/null string test cases."}
{"pred": "Why did you remove the nil check?", "gold": "Is there still a way to specify no recursion?"}
{"pred": "Why do we need this?", "gold": "How is this name being URI safe and being used programmatically related?"}
{"pred": "`this.plugin.uppy.i18n('folderAdded', { smart_count: files.length, folder: folder.name })`", "gold": "I think we have to keep this as a fallback for now, else it's a small breaking change :("}
{"pred": "Why this change?", "gold": "nit: shouldn't be part of this PR."}
{"pred": "Should this be `MongoError`?", "gold": "this change looks wrong to me. I think the test is trying to signal that something went wrong by throwing the `Error` here, otherwise the `catch` below will swallow it."}
{"pred": "Why do we need this?", "gold": "I'm doubting if this should be `if (_layout.IsThreadAgnostic)`, as ThreadAgnostic stuff could be calculated on every thread. (and thus could be lazy). non-ThreadAgnostic should be calculated on the main thread."}
{"pred": "This is not used.", "gold": "Please use only `Logger` instead of `org.slf4j.Logger`"}
{"pred": "Shouldn't this be `!node.flags.disable_block_processor_republishing`?", "gold": "Should this be \"no limiter drop\", since this isn't an absolutely essential activity for the stability of the network?"}
{"pred": "Shouldn't this be `console.error`?", "gold": "I updated many of the success messages, because most of these operations don't return data if they succeed. This meant many of the operations would print: `Success null` if the script ran successfully."}
{"pred": "`fnfe` is not used.", "gold": "Could you simply add it to the previous clause ?"}
{"pred": "Shouldn't this be `localeCompare(procCodeA, undefined, { sensitivity: 'base' });`?", "gold": "@joshyrobot, I think you can just use localeCompare with only the first argument and leave the other arguments out (here and all the other lines changed). It seems to do the right thing, and then we don't have to worry about these extra options."}
{"pred": "Shouldn't this be `!= null`?", "gold": "@chengren311 : where does this logic move to?"}
{"pred": "I don't think we need to check for `AllowAdditionalRoles` here, since it's already checked in `EnsurePoliciesAttached`", "gold": "Can we have a `nil` exception check at `s.scope.ManagedMachinePool`"}
{"pred": "why did you remove this?", "gold": "Rather than deleting this, should you just reformat it so it's the `*` settings, so if nothing is configured in facets.ini, the existing default behavior continues to work?"}
{"pred": "Shouldn't this be `ucfirst($propety_label)`?", "gold": "wrap, single line"}
{"pred": "`return returnType == null ? \"Void\" : returnType;`", "gold": "always use brackets for if statements"}
{"pred": "Why do we need this?", "gold": "`NUnitIntegration` doesn't need to cache this anymore."}
{"pred": "Shouldn't this be `>= 2`?", "gold": "Why did you change it to `>=` here?"}
{"pred": "Why do we need this change?", "gold": "Looks like this needs to be updated. There is no need to remove `hadoop.` if Hadoop tables don't use this code path."}
{"pred": "require 'digest'", "gold": "This require isn't need anymore, right?"}
{"pred": "nit: remove empty line", "gold": "a bit weird to see payments crypto package inside connection manager. There probably will be services not having any relation with payments that will use connection manager. Thats why probably ping-ping by itself can be useful without any relation to payments.."}
{"pred": "Shouldn't this be `Bibliographic`?", "gold": "I like the overall idea here, but I wonder if it would be more clear to define the property in the trait, and then set it in the constructors of the classes using the trait. Alternatively, at a bare minimum, it may be a good idea to add `?? 'Bibliographic'` here, to account for the possibility of the trait being used in a class that does not define the property at all."}
{"pred": "nit: `// This makes sure that those packets can be retransmitted without splitting the contained StreamFrames`", "gold": "I would prefer to not have a magic number, but construct this value out of other constants we already have."}
{"pred": "I'm not sure this is the best way to do this, but I'm not sure if there's a better way to do this.", "gold": "The limitation is if somebody configure another policy with the same name, but it is an edge case we can ignore I guess."}
{"pred": "why did you remove hashivault?", "gold": "? The package is named `hashivault`."}
{"pred": "Shouldn't this be `config->xwayland_lazy = false`?", "gold": "I don't think this should enable xwayland, because it's convenient to toggle xwayland just by setting `xwayland` to `false`"}
{"pred": "Why was this removed?", "gold": "Remove this line by accident?"}
{"pred": "nit: `Collections.singletonList` instead of `Collections.singletonList`", "gold": "Calling `.stream()` on a `DomainObjectCollection` is pretty much always a bug, as it doesn't include objects added later (and encourages people to use afterEvaluate). I wonder if we should make this an error prone check?"}
{"pred": "This should be `return util.CheckErr(err)`", "gold": "Thanks for paying attention to other places this might happen. This one is particularly important; I probably never should have gotten in the habit of CheckErr(), since it does a log.Panic() explicitly, which looks like something else until you look closely. It's supposed to be used places where \"can't happen\" but Things Can Happen."}
{"pred": "nit: `nw_tos` -> `nw_tos`", "gold": "What is the different between nw_tos and ip_dscp? Only high 6 bits vs low 6 bits and supported version?"}
{"pred": "Shouldn't this be `MolToSmilesCX`?", "gold": "I'm assuming that asSmarts & cxSmiles == asSmarts"}
{"pred": "I don't think this is the right place to do this. It should be in the `__init__` method.", "gold": "Seems like an oversight but I don't think the super would do anything else in this case unless I'm mistaken."}
{"pred": "Why did you change these to readonly?", "gold": "Curious, do we consider this as pedantic for example code?"}
{"pred": "Shouldn't this be `strtolower($this->entity['name'])`?", "gold": "Should we convert the entity name to snake case using `Doctrine\\Common\\Inflector\\Inflector::tableize` or similar ? Should a `snaked_name` or whatever be part of the entity metadata in order to use it for form names, ids, & other html attributes ?"}
{"pred": "`ip` is unused (from `structcheck`)", "gold": "Should be `client.outboundIp`"}
{"pred": "Why is this needed?", "gold": "Must these `using` statements not go inside the `namespace` block?"}
{"pred": "Why did you change these?", "gold": "Why? I thought the previous way was idiomatic. (Same with the `MetadataVer` stuff above.)"}
{"pred": "Shouldn't this be `new Promise().reject()`?", "gold": "shouldn't we `reject` here instead?"}
{"pred": "why do we need to convert it to string?", "gold": "check err or use gasPriceUnitIOTX, _ := if we are sure action.Core.GasPrice is correct"}
{"pred": "`wait` is no longer used.", "gold": "Just curious, was wait not used at all before?"}
{"pred": "Is this intentional?", "gold": "nit: can we remove this?"}
{"pred": "Why is this synchronized?", "gold": "is it not a problem when one synchronized function is called by other?"}
{"pred": "Style/SymbolArray: Use %i or %I for an array of symbols.", "gold": "We (even as admins) shouldn't override the User Preference settings like `email_master`, `email_posts`, `email_kudos`, `email_new_followers`. These all would be set by the user of their choice. Please do remove these attributes from editing//updating. Thanks!"}
{"pred": "Shouldn't this be \"Este :attribute j\u00e1 est\u00e1 ligado.\"?", "gold": "\"Este :attribute j est anexado.\" sounds better."}
{"pred": "This file is missing a license header.", "gold": "This line should be repeated for every module that needs testing. One cannot rely on nosetest to automatically discover all the modules. On the bright side, there is no need to change any of the other files."}
{"pred": "Why are we removing this error?", "gold": "This error was unused"}
{"pred": "Why do we need this?", "gold": "Personally I wish we didn't have a proto for every single little thing we do. RequestShardAction with an enum for the action type would be a lot cleaner imo, but I'm pretty sure that ship has sailed :) Just kvetching."}
{"pred": "Shouldn't this be `completed_trails/trail`?", "gold": "Does this make more sense as `trails/_trail` now?"}
{"pred": "Should we return an error here?", "gold": "synced offline. let's move this to `agent_unix.go` to make the IMDS call, since this is not supported in Windows."}
{"pred": "Would it make sense to add these to `python.rb` as well?", "gold": "Too much indentation here. Should match the lines above, which have four spaces."}
{"pred": "Why was this test removed?", "gold": "Same here we still need this test to make sure the fallback works."}
{"pred": "Why do we need this interface?", "gold": "I'm wondering if we can actually base this on a `IMvxPresentationAttribute` instead of the base one."}
{"pred": "Shouldn't this be `r._component = vnode._component = null`?", "gold": "could we switch to `undefined` here?"}
{"pred": "Why do we need this?", "gold": "The cleanup call"}
{"pred": "Shouldn't this be `item.AlbumArtists.length > 1`?", "gold": "I think \"View artist\" is a bit more standard and expected. Or even \"Go to artist\" to take the Spotify terminology as-is."}
{"pred": "Why do we need to skip this if `Puppet::Pops::Types::PSensitiveType::Sensitive` isn't defined?", "gold": "It might make sense to refactor this later so that we use a Bolt-native type to hide sensitive values."}
{"pred": "Why is this needed?", "gold": "We were trying to move away from this to force people to always run tests under py.test."}
{"pred": "Why do we need this?", "gold": "1 - create browser specific options class: - chromeoptions - firefoxoptions - argsoptions"}
{"pred": "`response_content_str.startswith('<!doctype html')`", "gold": "should be a case insensitive match though no? DOCTYPE and doctype are both widely used"}
{"pred": "Layout/TrailingBlankLines: Final newline missing.", "gold": "We must have a `fail ParamNotFound` here for cases where `@account.nil?`."}
{"pred": "Why is this needed?", "gold": "How come this change was needed?"}
{"pred": "`ADC_PIN` is unused (from `deadcode`)", "gold": "Why are there only 6 pins here, while below it appears to have 8 ADC inputs? Are pin 2 and 5 used for something else on this board?"}
{"pred": "I think this should be `secpRoot`", "gold": "I think we need an issue to track that chain sync omits BLS messages, and then to fix and test it!"}
{"pred": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "gold": "what is this default about? I am not using ngrok atm so would prefer an env var."}
{"pred": "Shouldn't this be set to `false` by default?", "gold": "@Samuell1 Might be better to say \"Automatically check for plugin updates on login\"."}
{"pred": "Why is this needed?", "gold": "Thanks for the additional Process helper! Can we also cache the first `Process.GetCurrentProcess()` result in a static field so we don't have to repeatedly call it? It means we would also need to dispose it when the static `_runtimeMetricsWriter` instance is disposed"}
{"pred": "Why do we need this test?", "gold": "just wondering what is the result of breaking the logic we test here? it seems that in that case we will just not return immediately, but i'm not sure whether the test will fail?"}
{"pred": "Why is this needed?", "gold": "We should fail the test if this returns `err != nil`."}
{"pred": "I don't think we need this variable. We can just set `provisionFailedTerminal = true` in `SetClusterDeploymentConditionWithChangeCheck`", "gold": "What is the drawback of not having this flag as a gating condition to report the metric?"}
{"pred": "Why do we need this?", "gold": "`getProcessName()` will be less ambiguous, since Caddy has \"apps\" that it runs internally."}
{"pred": "Why is this hardcoded to 2 pointer sizes?", "gold": "Is there any way to not hardcode this given we know the size in bytes? The public API has the flexibility of being a Span. Should we maybe not do anything printing DML? The runtime allocates the buffer, but it's a \"scratch memory\" area, The delegate gets it passed in and they decide how to use it. Also, how is DML used if the feature is for macOS support?"}
{"pred": "Shouldn't this be `r.get_filter()`?", "gold": "How about just override the `buildFilter`? Passing another function here is a little weird."}
{"pred": "Is this just a TestRPM build with all RPMs hydrated?", "gold": "This should just be a `.Bool()` flag I think, we don't encode anything beyond y/n here. See `$(RUN_CHECK)` and `$(STOP_ON_PKG_FAIL)` for examples of how to pass those in."}
{"pred": "Why is this needed?", "gold": "Is this needed?"}
{"pred": "I think this should be `name: value.join(' ')`", "gold": "This code is passing a non localized string when it should be passing in a localized string or it should use the name of the item being deleted."}
{"pred": "Why is this needed?", "gold": "how about moving it under L26"}
{"pred": "`axe._memoizedFns = [];`", "gold": "I think this needs to be tested"}
{"pred": "I don't think we need the `DEFAULT_IMAGE_URL` constant.", "gold": "Style/MutableConstant: Freeze mutable objects assigned to constants."}
{"pred": "nit: `dictLength` -> `dictionaryLength`", "gold": "Just a thought, really. If it's a bug that can be probed for (and it can be - see Adrian's repro) then it could as well be a static initialization of a supplier of Deflater instances; if we probe for a buggy JVM, we return the wrapper. If we don't we return the Deflater. This way on non-affected JVMs nothing happens and if we do use the wrapper, we know the JVM is broken."}
{"pred": "why is this public?", "gold": "Looks like this should be publicly accessible for tests in any modules?"}
{"pred": "this should be reverted", "gold": "Allow putenv is necessary to be able to get environment variables with `getenv`?"}
{"pred": "Add a new line at the EOF", "gold": "use function to check it. - don't do everything in main"}
{"pred": "`global_configs` doesn't seem to be used.", "gold": "Sorry I'm confused. Why not kwarg this like the others?"}
{"pred": "Why did you change this?", "gold": "First, any changes here should be synchronized with instr_compute_VSIB_index(). Second, the original looks correct to me: the first letter of the opcode name suffix is the index size, while the second is the memory size. So \"vpgatherdq\" is a d-sized index and q-sized memory. The operand size we store for memory accesses is always the memory size, not the address size, and for VSIB we store a single memory element size. It looks like we have no inside-opnd_t storage of the index size: that's done by dispatch on opcode it seems. I have a bunch of notes of discussions on how to handle VSIB: we decided to bail on encoding too much inside the opnd_t I guess."}
{"pred": "`build_tracking_url` -> `tracking_url`", "gold": "Sorry for going back and forth. Adding docstring here would be very helpful for others to understand the need of this method."}
{"pred": "return canSeeInvisibility() && isInvisible();", "gold": "You introduced a bug here."}
{"pred": ">string.IsNullOrEmpty(oldValue) && !string.IsNullOrEmpty(newValue)) [](start = 16, length = 61) nit: `!string.IsNullOrEmpty(oldValue) && string.IsNullOrEmpty(newValue)`", "gold": "Should we log a warning/error if only one is specified and not the other?"}
{"pred": "nit: `GetLatestEvent` -> `GetLatestEvent`", "gold": "`ctx` is unused in GetLatestEvent"}
{"pred": "Shouldn't this be `config.node.peering_port = network_params.network.node_port`?", "gold": "This looks good to me. Personally, I would have the following for maximum flexibility: * convert peering_port from uint64_t to int. * Set the default value to \"-1\" to specify the value is not set * if the value is -1 then do `config.node.peering_port = network_params.network.default_node_port` That would allow for 0 to mean, select the port number yourself and be more consistent. But I am happy with the change as is, as well."}
{"pred": "Why did you remove this?", "gold": "The blank line between the summary and detailed description is better to be kept."}
{"pred": "nit: `if (!a.NoRemoveUnusedShapes)`", "gold": "Curiously, are these indents intended or should they be aligned?"}
{"pred": "`if roleText is None`", "gold": "What if we changed this to this? roleText=attrs.get('roleText', lambda:getSpeechTextForProperties(reason=reason,role=role)) That will prevent the function from ever needing called in the roletext case, and removes that if."}
{"pred": "I don't think we need to check `doing_detach` here. `get_thread_private_dcontext()` will return `NULL` if `doing_detach` is false.", "gold": "This will still result in a safe_read_tls_magic on AMD in tls_thread_preinit()."}
{"pred": "Why was this removed?", "gold": "Can you remove this change?"}
{"pred": "Shouldn't this be `crt.IsCA && crt.KeyAlgorithm != \"\"`?", "gold": "Oh, was that a bug in the validation?"}
{"pred": "Please use `StringUtils.isNotBlank` instead.", "gold": "Please use the Google java code style. Basically, add more space characters like in the statements below. Next to method arguments and curly braces. This is currently not checked on CI because it is too inconsistent in the code base but I would prefer new code to be consistent."}
{"pred": "Why do we need to delete these?", "gold": "Actually, I don't think we need to create object on heap."}
{"pred": "Why this change?", "gold": "this is a file we copy from gRPC, sp ideally it be fixed upstream as well.."}
{"pred": "Why was this removed?", "gold": "changes like this, just strangle guava usages to be replaced by DelayLimiter into one place"}
{"pred": "Why did you remove the type here?", "gold": "PropTypes need to be updated accordingly here. Note that the type also needs updating, not just the case. That is, these should both expect a `PropTypes.elementType` now instead of an `element`."}
{"pred": "Shouldn't this be `!= 0`?", "gold": "maybe extra paren around `strncmp(...) != 0`"}
{"pred": "Shouldn't this be `true` by default?", "gold": "We should call `Windows.onResume `: - When the app is launched for the first time - When the app is resumed after being paused (home button and resume or device goes to sleep) - After a permission prompt is displayed"}
{"pred": "Why this change?", "gold": "Rename to ForksSchedule? Maybe in separate PR."}
{"pred": "Why this change?", "gold": "Why a blank line here?"}
{"pred": "Should this be `deactivated_on.present?`?", "gold": "I have a sense that this will actually eventually change to check the actual date so that subscriptions can be deactivated in the future. But I mention that here just to keep you in the loop. We should not make that change now, because it's not needed functionality."}
{"pred": "Why do we need to skip default for positional params?", "gold": "What is the reasoning for using the negation of `isOption()` instead of simply using `isPositional()` to identify a positional param?"}
{"pred": "`player->getVocation()->getId() != VOCATION_NONE ? 0x01 : 0x00; // prey data`", "gold": "Why would you add those if client version min is set to 1100?"}
{"pred": "Why did you change these?", "gold": "You can delete this, it will now need to live in `gointerfaces` package"}
{"pred": "<%= render 'previous_next_doc' %>", "gold": "Okay, I still don't understand why you have to add `html_safe` here, and it still seems like a very bad idea. It will allow html tags in the title, and keep Rails from escaping literal greater-than or less-than chars not intended as HTML tags. It ought to work to just let Rails do HTML-escaing as normal, without any manual `html_safe` or `strip_tags` or whatever. I am not clear on what problem you are trying to solve, why the straightfoward approach does not work."}
{"pred": "Shouldn't this be `!= MessageView`?", "gold": "What is is subject when it's not the email subject. Why are we having to do this crap? What's calling this with an empty string?"}
{"pred": "Why did you change this?", "gold": "Could you also remove the `defaultSamplingProbability` constant from `sampling.go`? It seems to became unused with this change."}
{"pred": "Why is this empty?", "gold": "can you delete the `generateDeploymentStrategicPatch` function as well?"}
{"pred": "Why did you change this to `finest`?", "gold": "I'd keep this at `info` level..."}
{"pred": "Shouldn't this be `DCHECK(!limit->countExpr())`?", "gold": "Don't use DCHECK to debug your code if it's the regular branch you need to handle."}
{"pred": "Why was this removed?", "gold": "You should return null here instead. Null is an acceptable default value for the image attribute."}
{"pred": "Shouldn't this be `return false`?", "gold": "react bails as well?"}
{"pred": "Why was this removed?", "gold": "Can you please tell me why you did this?"}
{"pred": "`facingMode` is already part of `videoConstraints`", "gold": "Reading this again it should prob prefer the `videoConstraints.facingMode` value over `facingMode` if the former was already set"}
{"pred": "Shouldn't this be `slug: true`?", "gold": "There's a good bit of class-level stuff that's repeated in our various product types. Think it's worth extracting a...dare I say it...module?"}
{"pred": "Should this be `config.Target.WasmAbi == \"\"`?", "gold": "Please do not modify the `config.Target` field, it should contain exactly what is extracted from the JSON files. Instead, you can either: * Add a getter to the `config` variable (`*compileopts.Config`), so you can simply call `config.WasmAbi()` to get the value. * Use a local variable instead. The getter would be slightly cleaner, as it matches the pattern of other configurations (`CGO_ENABLED`, `GC`, `NeedsStackObjects`, etc)."}
{"pred": "Why do we need this?", "gold": "The nil check is not necessary for these. Append checks both sides for nil."}
{"pred": "Why do we need this?", "gold": "Shouldn't we instead have the SDK apply these, internally? I.e., I would expect to see the dctx entries included in the span as first-class distributed correlations, not as span attributes."}
{"pred": "Why not return an error here?", "gold": "nit: rename this in proto and update impl to `Search` to avoid stutter"}
{"pred": "Why is this needed?", "gold": "is it necessary to order by id as a second ordering? this will take place only when several new slider items are created without reordering (position is then null). Wouldn't be better to recalculate position after creating a new item? (right now items with null in position behave differently in administration and on frontend)"}
{"pred": "nit: typo in `intrinsic`", "gold": "`ClaimFromRewardingFundBaseGas` is a global variable (from `gochecknoglobals`)"}
{"pred": "Why do we need this?", "gold": "How about modifying the NOGIL definition so that it only does anything if the thread safety flag (RDK_BUILD_THREADSAFE_SSS) is set?"}
{"pred": "`BlockHeight` is unused (from `structcheck`)", "gold": "blockheighter would be more clear"}
{"pred": "I think it would be better to use `std::swap_if`", "gold": "This is so weird as a utility function."}
{"pred": "I'm not sure if this is the best way to do this. I'm not sure if there's a better way to do this.", "gold": "Why? What would happen if you did not?"}
{"pred": "Shouldn't this be `if (o instanceof JSONObject)`?", "gold": "Unrelated bugfix for NPE."}
{"pred": "`$propertyMetadata['canBeSet'] === true`", "gold": "What if some extended the `AdminController` and had a check for the old option name? Could that be a valid use case?"}
{"pred": "I think this should be `data-manager/event-segment`", "gold": "This will be only available when data-manager is enabled, is there a fallback in case data manager is disabled?"}
{"pred": "I don't think this change is necessary.", "gold": "Do you think we want to move the call to `generateWorkerServiceRecommendedActions` inside `RecommandedActions()`?"}
{"pred": "Why do we need to change this?", "gold": "The VUIDs in this area are not great, but I think `ValidateQueryPoolStride` should probably be skipped if the query pool was created with type `VK_QUERY_TYPE_PERFORMANCE_QUERY`. VUID-02828 might be a better fit, but again, the existing VUIDs step on each other so it requires a bit of interpretation."}
{"pred": "`ToDbKey(this Keccak key) => key.ToBigEndianByteArrayWithoutLeadingZeros();`", "gold": "Iguess you should use ToDbKey here"}
{"pred": "Why not use `x.tbk.Height()`?", "gold": "x.tbk is the \"index\" below, and is done in Start()"}
{"pred": "nit: `IsAppInsight` -> `IsAppInsight`", "gold": "Do we already have a convention for this? If not, would we consider \"DataDog.IsAppInsights\". And then use \"DataDog.\" prefix for all this settings, environment variables etc..? Such settings are, essentially, public APIs because they may conflict with customer data. Regardless of that , AppInsights has an s at the end :)"}
{"pred": "Shouldn't this be `ctx->log_key && ctx->time_key`?", "gold": "this assignment is not necessary if the offsetof() is used in the configmap"}
{"pred": "Why was this removed?", "gold": "I'd rather leave a TODO here at least."}
{"pred": "Why did you change this to `objects`?", "gold": "Shouldn't this be `resource`?"}
{"pred": "Why this change?", "gold": "Why does this become blocking for the CPU path? Shouldn't it remain independent of the GPU path?"}
{"pred": "Why was this changed?", "gold": "Do we need to change occurences where `setup` was called before?"}
{"pred": "I don't think this is the right place to put this.", "gold": "Is this TODO still valid? Or are we going to put this somewhere else later?"}
{"pred": "nit: space after `#`", "gold": "We generally don't do parantheses in if conditions in Python. :) this could be better written as `if from_ts is None`"}
{"pred": "Why is this needed?", "gold": "Odd that we'd set just element 299 of a 2000-byte buffer to null. But I see that this is the way it was before."}
{"pred": "I don't think this should be in the `swarm` package. It should be in the `swarm` package.", "gold": "ScoreFunc is not used in this PR. Maybe to add it later when needed?"}
{"pred": "Shouldn't this be `w.WriteHeader(http.StatusFound)`?", "gold": "super nit: I think this might be easier to read as `requestHeadersFromResponseWriter`"}
{"pred": "Why did you remove these headers?", "gold": "Need to include \"common/base/Base.h\" in front of this line"}
{"pred": "Can we rename this file to `get-element-spec.js`?", "gold": "Changes in this file should go into a separate PR."}
{"pred": "Why is this needed?", "gold": "Please ensure that this will not start putting single quotes where double quotes are expected."}
{"pred": "`ingerPort` is unused (from `structcheck`)", "gold": "`ProvideConfig` was changed, looks like it will not compile for windows, and should be changed too."}
{"pred": "`listUserRepos` is unused (from `deadcode`)", "gold": "This does not look right, you're listing all private repositories.."}
{"pred": "Use the new Ruby 1.9 hash syntax.", "gold": "An OPTIONS request should respond from _any_ path? Seems weird to me..."}
{"pred": "Why is this needed?", "gold": "you need to add the content type"}
{"pred": "Shouldn't this be `SafelyKillProcess`?", "gold": "Do we need to distinguish between these two processes? I'm thinking maybe we can have a list of processes and treat them all equally."}
{"pred": "This should be `#if defined(AARCH64) || defined(X64)`", "gold": "This is used only for out-of-line -- so yes this seems right to do for x64. Inlined is aligned separately at the end of prepare_for_clean_call(). There the ifdef is x86_64 or MACOS -- no ARM, why not? Also, please add || MACOS here to match the inlined."}
{"pred": "Shouldn't this be `TRACE_ID_LOW`?", "gold": "guess I'm wondering if this needs to be refactored to use Schema.joinCondition() or similar?"}
{"pred": "Use the new Ruby 1.9 hash syntax.", "gold": "Does it make sense to restrict this option to `exec` only? You could add it specific to that subcommand using the `method_option`...method. There's an example of it for hosts in the `init` function."}
{"pred": "`Uri.EscapeDataString` is not needed here.", "gold": "This is very expensive (lots of allocations, lots of data copying). Could we do something like check IndexOf('%') and bypass if no hit?"}
{"pred": "This should be `client.getWorldType().contains(WorldType.DEADMAN)`", "gold": "This should be `WorldType.isDeadmanWorld(client.getWorldType())` to be inline with the other WorldType calls."}
{"pred": "`confidences` -> `confidences`", "gold": "do we also need to change `mlvl_confid` -> `mlvl_confidences`>"}
{"pred": "Shouldn't this be `kube-ipvs0`?", "gold": "I feel slightly that InterfaceExclude is not a clear name - bearing in mind that our config names are, to some extent, an external API. From an external point of view, a clearer name might be IPVSInterfaces. Then it would obviously make sense for the value to be something like 'kube-ipvs0', and it would be a matter of Felix's internal implementation that we choose to exclude those interfaces from our monitoring. Alternatively, if we want to keep this at a level that is more general than just IPVS, perhaps 'UnmonitoredInterfaces'? WDYT?"}
{"pred": "I think this should be `re.matchall`", "gold": "This should be `re.search` with a `^` anchor added to the regex, as what we want here is really any path starting with something like `E:`."}
{"pred": "Why do we need both KindGateway and KindServiceEntry?", "gold": "Since `IsKubernetesBuiltInResource` at L69 returns false due to lack `networking.istio.io/v1alpha3` in `builtInApiVersions` within `pkg/app/piped/cloudprovider/kubernetes/resourcekey.go`, it will never reach this point."}
{"pred": "Why is this change necessary?", "gold": "Does codecov not run this test? Not sure how else it would not be covered."}
{"pred": "I think this should be `[command]`", "gold": "can we add some sample of JSON_DATA format in the usage?"}
{"pred": "Should this be `HttpHeaderNames.ParentSpanId`?", "gold": "Using `Tracer.Instance` in here is problematic for testing   It will likely cause some other tests to break I think - that's why we started passing in `IScopeManager` EDIT: I see you used `[TracerRestore]` - maybe that'll be enough!"}
{"pred": "Why do we need this?", "gold": "make all of these `static final` fields UPPER_SNAKE - they are constants."}
{"pred": "I don't think you need the aabonuses.MitigateDotRune[SBIndex::MITIGATION_RUNE_PERCENT]", "gold": "No possible chance for weird overflows here, right?"}
{"pred": "I don't think we need this anymore, right?", "gold": "Or we could use a Float object to more clearly show as user-settable via non-null?"}
{"pred": "Shouldn't this be `finalizedHeader`?", "gold": "finalizedHeader should be saved in FinalizationManager when we have FinalizationBlockHash != Keccak.Zero"}
{"pred": "This should be `disk-importer-scratch-%s-%v`", "gold": "Not using ExactName: true would remove the need for manually adding workflow ID as it would be added automatically by Daisy. E.g. 'disk-importer-2-import-ovf-7mn7h' was created from diskImporterDiskName above even though only 'disk-importer-2' was specified. ExactName: true should be used for resources that shouldn't include any temp prefix/suffix, such as disks that will be permanently attached to a created instance. Scratch disk is not one of them."}
{"pred": "I don't think we need `index_scols` here.", "gold": "If we support multi-index column later, we need to rename to fit the pandas' requirement."}
{"pred": "I think it would be better to use `map[string]interface{}` instead of `map[string]interface{}`", "gold": "I'm not sure this is really needed. JSONValue type can be used the same as a map as far as operators go, including range. I'd leave this out for now unless there is a strong reason to keep it."}
{"pred": "Why is this needed?", "gold": "sorry for nitpicking but I would love a new line under this line"}
{"pred": "`ChannelImplementation` -> `ChannelImplementationID`", "gold": "ChannelImplementation field naming is not clear, is it some kind of standard? Maybe it can be named ChannelID?"}
{"pred": "nit: \"Instantiates an action to remove all the files\"", "gold": "Looks like there is a typo: `expireSnapshots` -> `removeFiles` or whatever name we go with."}
{"pred": "Shouldn't this be `currentSortOrder == null && i < values.length`?", "gold": "Thanks for looking into this. I think it looks a bit strange to have this check inside the for loop. Wouldn't it also work to initialize `idxCurrentSort` with 0 instead?"}
{"pred": "I don't think these constants are used anywhere.", "gold": "Just a small ordering thing: Could you please bring `IMPORTANCE_HIGH` to the bottom and maybe even have one line between it and the Notification IDs?"}
{"pred": "Please don't change unrelated things.", "gold": "Should this be boost logged?"}
{"pred": "Why do we need to pass session here?", "gold": "What is the reason for doing expunge here? This method is purely for converting the timestamp."}
{"pred": "nit: space after `if`", "gold": "This calls sanitize twice if the name isn't valid."}
{"pred": "Layout/TrailingBlankLines: Final newline missing.", "gold": "Is there an equivalent that'd allow zero or one?"}
{"pred": "Why do we need to set `m.objectName`?", "gold": "Is it possible to update/re-evaluate entire metatask object for every repeat? If we decide/need to use a repeatWith resources in let us say labelSelector(bad example) then we would have to add another logic to update those properties."}
{"pred": "`syscall.Stdin` is already an `int`, no need to cast.", "gold": "unnecessary conversion (from `unconvert`)"}
{"pred": "why is this removed?", "gold": "typo in commit message `openening`"}
{"pred": "Why is this needed?", "gold": "User-code doesn't see the internal ADIOS headers anymore. This whole include block should just be `#include <adios2.h>`"}
{"pred": "E127 continuation line over-indented for visual indent", "gold": "nit: I guess we can omit this (unless you had a reason to specify it)"}
{"pred": "`isSpokeLeafNode` is unused (from `deadcode`)", "gold": "Why is Hub public?"}
{"pred": "Why was this removed?", "gold": "why is this deleted?"}
{"pred": "This should be `<p class=\"prerequisite\">Hey, before you start this...Have you done the Intro to Rails tutorial?</p>`", "gold": "Maybe move that into a partial"}
{"pred": "Error return value of `dao.Stop` is not checked", "gold": "Error return value of `dao.Stop` is not checked (from `errcheck`)"}
{"pred": "`Warning: the provided docroot at %s does not currently exist.`", "gold": "util.Warning()? Easier to say."}
{"pred": "why do we need this?", "gold": "this default is kinda superfluous (although i see it was already there before PR )"}
{"pred": "Why did you remove this constructor?", "gold": "How is this related?"}
{"pred": "This should be `@team_plans = TeamPlan.featured.ordered`", "gold": "I'm breaking one of the rules here, it feels like the right thing to do. Open to alternative suggestions."}
{"pred": "This should be `expect(sexp).not_to include_sexp`", "gold": "The use of `#should` was triggering an rspec depracation warning for me, which is why I switched this to the rspec 3 style."}
{"pred": "Why did you remove this check?", "gold": "Why are you setting the CacheChange as REQUESTED when it is not valid (it was erased from history)?"}
{"pred": "I don't think we need the `lodash` dependency here.", "gold": "`lodash` shouldn't be grouped under WordPress dependencies"}
{"pred": "Why did you remove the public keyword?", "gold": "This needs to be public so that Avro can call it."}
{"pred": "Why are we removing these hooks?", "gold": "`Google*` shouldn't be under External dependencies - seems like ESlint is not properly recognizing that these are aliases to internal dependencies."}
{"pred": "Why do we need this?", "gold": "I think he meant the docstring in this constructor. yea we should fix"}
{"pred": "nit: space after `switch`", "gold": "so .. this basically follows the pattern from JapaneseTokenizer, I think. .. but somehow I don't see where we defined ResourceScheme? We're not referencing the one in kuromoji, right?"}
{"pred": ">12288 [](start = 38, length = 5) Why is this hardcoded?", "gold": "It would probably be better to do: const SecurityProtocolType Tls13 = (SecurityProtocolType)12288"}
{"pred": "Why is this being removed?", "gold": "Similar to the above, put this setting back but keep the value as `'{}'`"}
{"pred": "I don't think this is the right place to log this. It should be at `debug` level.", "gold": "As discussed in chat - we should run this function within an app context which means that we'd already have a logger configured, and a connection to timescale set up"}
{"pred": "Why was this removed?", "gold": "I'm curious about why this needed to be removed."}
{"pred": "Why did you remove `filter`?", "gold": "why did you remove `zip`? It is used!"}
{"pred": "Why do we need this change?", "gold": "Is there any reason that we don't add a similar condition like `ChannelConditionTopic` to the channel?"}
{"pred": "Why did you change this?", "gold": "before php8 \"goto\" was a reserved word and was not allowed as part of the namespace. Now test checks for validity of plugin namespace according to PSR-4"}
{"pred": "// NewSingleOutbound returns a new Outbound for the given adrress.", "gold": "nit: I'm not sure it can be addressed in this diff, but it seems odd that NewOutbound supports TLS but NewSingleOutbound does not. As a somewhat naive user I would expect the only difference between these two APIs is how peers are chosen."}
{"pred": "Why do we need to close the response body here?", "gold": "I would advise to enhance the test for the method `CallOneway` - we should have a test very similar to `TestCallSuccess`. We should test: - Success with response (even if it is callOneway) - Success with no response and empty payload - Errors"}
{"pred": "Why is this change needed?", "gold": "We're already matching +. Not sure why this changed."}
{"pred": "Shouldn't this be `category_manager_class`?", "gold": "Please add line breaks, so the line doesn't exceed 80 chars."}
{"pred": "Why did you remove ActivitySourceAdapter?", "gold": "I initially thought (inccoreclty) this is a breaking change! The public api analyzer is a gift!"}
{"pred": "Why did you remove the `(GDestroyNotify)` cast here?", "gold": "I'm not sure how this one didn't segfault before."}
{"pred": "Why do we need these constants?", "gold": "Same points as in other test file."}
{"pred": "Please don't use wildcard imports.", "gold": "Did you run gradlew tidy? Wildcard imports shouldn't be there, hence the question."}
{"pred": "I don't think we need the double here.", "gold": "Put a comma after the last parameter of a multiline method call."}
{"pred": "This should be `res = fpgaPropertiesSetInterface(*filter, FPGA_IFC_DFL);`", "gold": "Is this going to restrict the output to *ONLY* ports that are bound to vfio-pci? That's not what we discussed yesterday."}
{"pred": "Why do we need to do id address to pubkey address lookup here?", "gold": "Intention is to do the lookup here, I believe (where we can cache it). This would make the call non-pure function though. I'll confirm with lotus. ID addresses are the *only* addresses I expect to actually see here."}
{"pred": "I think this should be `EMRFS`", "gold": "electronic medical record file system (EMRFS)"}
{"pred": "This should be `max-request-body`", "gold": "Put this higher in the list, like after \"bind\", since I guess we're considering the max request body size to be kind of a native/fundamental feature, built directly into the vhosts."}
{"pred": "`ErrDeviceNotFound` is unused (from `deadcode`)", "gold": "oh come on :("}
{"pred": "Why did you change this to `finest`?", "gold": "This is an incorrect change. The dialect spoken is an important part of the handshake and should be communicated to users."}
{"pred": "`bool: Whether or not authenticated user is a service account`", "gold": "Remove as this is not needed anymore."}
{"pred": "Why do we need this class?", "gold": "This new class is for checking that #4551 works correctly with PlantUML output too."}
{"pred": "I'm not sure if this is the right default for web facing certificates. The default for web facing certificates should be the same as the default for web facing certificates.", "gold": "Will this cause all certificates to be re-issued?"}
{"pred": "Shouldn't this be `free(tmp)`?", "gold": "I think tmp is also leaked at the end of this loop if no error cases are encountered."}
{"pred": "Why do we need this change?", "gold": "The previous version didn't use `keyProjection` because the entire key must be projected. If the key is a struct of multiple columns, then projecting a subset of those columns can easily introduce key collisions that aren't in the original data."}
{"pred": "Why did you remove this check?", "gold": "Why not use StatusOr ? We can't ensure spaceId is greater than zero, especially when AdHocSchemaManager is used."}
{"pred": "Why do we need this dependency?", "gold": "Does it seem we only use that as the json-rpc client? Do we have any other choice? It's a little weird."}
{"pred": "E231 missing whitespace after ','", "gold": "Could you split this into multiple lines?"}
{"pred": "Why was this removed?", "gold": "Doesn't the snapshot ID start off as null? It seems like we don't need to set it here."}
{"pred": "why is this change needed?", "gold": "I wondered why `buffer` was passed into `LookupPath`. What is happening here? Is `buffer[:0]` equivalent to `[]V4TrieEntry{}`, and hence `buffer` isn't needed any more?"}
{"pred": "`sigValidator` is unused (from `structcheck`)", "gold": "nit: Ideally we would would use this abstraction everywhere we need this translation. I believe it's needed in the mining worker and the storage and market connectors."}
{"pred": "I don't think we need to update the hash if the disk list is empty.", "gold": "need to fix the error message here"}
{"pred": ">CA1026 not fixed [](start = 12, length = 17) why? #Resolved", "gold": "Unsure of how to handle this one."}
{"pred": "Shouldn't this be `this.flowFinished`?", "gold": "Will this.flowFinished verify with every finished state stated in Status.isStatusFinished method? If so, no need to verify isKilled."}
{"pred": "nit: can we call this `DefaultRetrySettings`?", "gold": "replace \"Child Workflow\" with \"any workflow\""}
{"pred": "Shouldn't this be `link` instead of `symlink`?", "gold": "Instead of showing the words \"symbolic link\" under the \"Size\" column, how about we introduce new icons for symbolic link to file and symbolic link to directory?"}
{"pred": "shouldn't this be `@internal`?", "gold": "Please add back the description of the parameter"}
{"pred": "Unexpected trailing comma. (comma-dangle)", "gold": "Superfluous space inserted."}
{"pred": "Why do we need to check `ownerSVGElement`?", "gold": "Didn't fix the problem. `href=\"\"` for SVG will still result in `undefined` getting returned by this function."}
{"pred": "why did you change this?", "gold": "This seems like a strange change ... I wouldn't think that a change to access tags in the profiles would result in different bearings in this tests?"}
{"pred": "Why is this change needed?", "gold": "As isCaret is False by default, explicitly specifying isCaret=False here is not needed, and is perhaps a little confusing. I'd prefer that anywhere in the codebase that isCaret is only ever specified if it needs to be set to true. Mirroring that of isFocus for setNavigatorObject."}
{"pred": "Why do we need to freeze this?", "gold": "We can't freeze this and then add something to it in the next line. The `freeze` on line 43 is sufficient. If Rubocop flags this we need to exclude it."}
{"pred": "Why do we need this?", "gold": "Why is this needed?"}
{"pred": "Shouldn't this be `/orgs/:org/repos`?", "gold": "Why not put two other routes after this line (221)?"}
{"pred": "nit: `!addrs.ok() || addrs.value().empty()`", "gold": "If FLAGS_meta_server_addrs is not empty, in which case \"toHosts\" return empty array?"}
{"pred": "Why is this needed?", "gold": "There is a function to output a \"JSONBool\" string. That would be a good start for finding uses. But maybe just have a look at where we decide whether it is a numerical or not, thus wrapping quotes around its value. Then you have it all I guess."}
{"pred": "I think this should be `data._kdf.data_scols[0]`", "gold": "oops, it should be `data._scol` so that it respects the expression stored in Series. Let me fix it quick."}
{"pred": "This should be `administerable_by?(current_user)`", "gold": "Thanks for moving this up with the rest of the variables. Much tidier :)"}
{"pred": "Why do we need this?", "gold": "I think `Rate` is a more precise and concise term for `PaymentPerTime`."}
{"pred": "Why did you change this?", "gold": "I think this should maybe be: var limit = input.IndexOfAny(new[] { '+', '-', ']' }, **posNext**); You pretty much want to ignore any sign that is before the \"M\". But, if there is a sign somewhere before the M, and also after the M, you'd want to be able to find the sign after the M, right?"}
{"pred": "Please add a space after `if`.", "gold": "if `checkStockNotEmpty` returns a reponse, you must return it or your script will continue its execution."}
{"pred": "Why do we need this alias?", "gold": "Any specific reason for this change? klog should work correctly here."}
{"pred": "Line is too long. [81/80]", "gold": "we don't mention `last_modified` here?"}
{"pred": "Why do we need this?", "gold": "same deal about the global state maybe interfering as in ActionBrowseTagline"}
{"pred": "You can use `AssertExtensions.Throws<ArgumentOutOfRangeException>(() => { ... });`", "gold": "so sweet to see a test as the first thing"}
{"pred": "Shouldn't this be `strncmp`?", "gold": "usually when HTTP_PROXY=\"\" (empty), proxy should be disabled. could you set it to NULL when it's empty string?"}
{"pred": "Shouldn't this be `$settings['width'] = $size->getWidth()`?", "gold": "Can you throw an exception if width or height are both null"}
{"pred": "Why did you change this?", "gold": "This is a breaking change. I guess these might have been intentionally exported."}
{"pred": "nit: use `TableProperties.METADATA_SPLIT_SIZE.defaultValue()`", "gold": "I don't think this is necessary. When options are used to set the split size in the Spark reader, it uses `TableProperties.SPLIT_SIZE` to pass it here. That should work for metadata tables as well, right? The situation that we need to handle in this PR is setting the default, like you had before. We just want to use a metadata split size so you can set it and not have the same split size used (by default) for both metadata and data scans."}
{"pred": "Why do we need this?", "gold": "wait a sec, shouldn't this be `'*'`?"}
{"pred": "Shouldn't this be `if oi.params.ComputeServiceAccount != \"\"`?", "gold": "It think you'll want the var for GMI import as well: daisy_workflows/ovf_import/create_gmi.wf.json (Unfortunately there's duplication between the two :/ )"}
{"pred": "Why is this needed?", "gold": "Nit: Group this with the other commands by moving it down one line."}
{"pred": "nit: `Unsupported data encoding: 'PLAIN'`", "gold": "I would like to emphasize that a user can use non-vectorized reads to handle this file so maybe something like \"Cannot perform a vectorized read of ParquetV2 File with encoding %s, disable vectorized reading with $param to read this table/file\""}
{"pred": "I'm not sure if this is the best name for this parameter. Maybe `parameter_name`?", "gold": "Maybe add `positional=False`. It does not need it more than the other parameters, but one must start somewhere."}
{"pred": "Why this change?", "gold": "Since we're here, can we use a template?"}
{"pred": "I don't think this is a brutal hack.", "gold": "saw you're also doing this in `test_types.py`: `spark = _spark_context()['test'].resources['spark'].resource_fn(None)` since `_spark_context()` uses `spark_session_local` won't the above break the tests?"}
{"pred": "Why do we need this change?", "gold": "`has(default)` i think is the preferred way of doing this"}
{"pred": "PEP8: space after comma", "gold": "always put a space after a comma"}
{"pred": "Shouldn't this be `selectAllPhotosUpToFav`?", "gold": "@angmas1 move the else up, next to the closing bracket of the if block. Also, there is no need for the braces as your else statement contains only a single line. Make your if-else block similar to the block in lines 277-280."}
{"pred": "`options` should be `None` by default.", "gold": "@AutomatedTester @davehunt thoughts on a new keyword argument?"}
{"pred": "`maxSessionCount` should be `long`", "gold": "This change shouldn't be necessary for this PR. Please remove it."}
{"pred": "Why do we need this change?", "gold": "This variable is mostly unused, how about we make `NewTestCtx` return a pointer?"}
{"pred": "Why do we need this?", "gold": "What is the basis of this value?"}
{"pred": "#include \"gce_metadata.h\"", "gold": "Nit: was this extra blank line added intentionally?"}
{"pred": "Shouldn't this be `EXCEPTION_EXECUTE_FAULT`?", "gold": "nit: inconsistent spacing around ="}
{"pred": "Why did you remove this?", "gold": "We still need this import"}
{"pred": "Why do we need this change?", "gold": "We are pulling this because we removed \"groupID\" state and put it into the strategy implementations"}
{"pred": "compute.hpp  kmeans_init.hpp", "gold": "Is this file actually related to PCA?"}
{"pred": "Should this be `isOwner: true`?", "gold": "See above, this should probably remain `isFirstAdmin`."}
{"pred": "Why did you change this?", "gold": "Why the change to make it public? The expression interface has the `TypeOf` method?"}
{"pred": "Why did you remove the underscores?", "gold": "don't mind the snake cases in the test names. If there are in the test cases, it's fine IMO"}
{"pred": "Why do we need this?", "gold": "`Id` defines REST resource address and should not be in payload"}
{"pred": "`--class-wise` is a bit confusing. How about `--class-wise`?", "gold": "We can omit the underscore and just use `classwise`."}
{"pred": "`$rootCategoryId = $rootCategory ? $rootCategory->getId() : null`", "gold": "Why not throw an exception instead then?"}
{"pred": "`getInputFile` -> `getInputFile(task.file().path())`", "gold": "Looks like this doesn't need to change. Can you revert this?"}
{"pred": "This should be `from config import template`", "gold": "please import it like `from kinto.config import template`"}
{"pred": "Why this change?", "gold": "There are lots of default value changed, not sure if it break the old behavior."}
{"pred": "nit: remove empty line", "gold": "File is not `goimports`-ed (from `goimports`)"}
{"pred": "`addToStaticNodes` -> `addToStaticNodes`", "gold": "parameter should be called removeFromStaticNodes"}
{"pred": "I think this should be `override: bool = True`", "gold": "The handler will have an extra property in the marker to signal the implementation is in the provider, for the cases we want to add functionality, for example, custom implementations not in moto."}
{"pred": "Should this be `deactivated_at.nil?`?", "gold": "Is this method actually being used anywhere? If not, I think we should remove it."}
{"pred": ">p => !p.IsConstant && !p.IsReadOnly [](start = 44, length = 32) why is this needed?", "gold": "Thanks! I somehow lost this between my far too many branchs."}
{"pred": "This should be `from .webelement import FirefoxWebElement`", "gold": "i think this should get put into its own file. This could start to grow :)"}
{"pred": "I think this should be `~internal~ecs~pause`", "gold": "Can you add a TODO for loading the tarball of the pause image into Docker?"}
{"pred": "Why was this removed?", "gold": "Is there any value in setting the process to null like this?"}
{"pred": "`CHECK_EQ(outer_num_ * inner_num_, bottom[1]->count(softmax_axis_ + 1))`", "gold": "This could be a good time to add a check that the prediction and target dimensions (except channel) agree?"}
{"pred": "Shouldn't this be `OP_isb`?", "gold": "The requirement that OP_isb is bb-final needs to be a rule for clients, just like the rule that syscalls and interrupts must be bb-final: i.e., please add it to the dr_register_bb_event() docs."}
{"pred": "Hi! I've found a possible matching string that has already been translated **18** times: `translate(\"ListPaging\").replace(\"{0}\", (totalRecordCount ? startIndex + 1 : 0) + \"-\" + recordsEnd).replace(\"{1}\", totalRecordCount);` *ES Score: 7* Help me improve these suggestions: react with :thumbsdown: if the suggestion doesn't make any sense, or with :thumbsup: if it's a particularly good one (even if not implemented).", "gold": "The translate library has a method to replace the variables."}
{"pred": "use `assert_series_equal` instead of `assert_eq`", "gold": "i don't think this test case is correct. in both cases inpalce=True returns nothing. We need to compare the ks. Also we probably need to make a copy of it. Otherwise you pollute the following \"ks\" because ks has been changed."}
{"pred": "Why do we need this?", "gold": "Any proposals how to make the naming somehow include the \"completed\" idea of this hook? `TlsHandshakeCompletedHook` or similar? Or using the `...Start/End...` scheme?"}
{"pred": "Why is this needed?", "gold": "it introduces a lot of complexity to the state, can we flush straightaway or create a two level flush store where the questions are read form unflushed data?"}
{"pred": "Shouldn't this be `urlencode($node->id)`?", "gold": "There are two calls to getUrlFromRouteCache, but you're only urlencoding one of them. Is that intentional? Would it make more sense to do the url-encoding inside the getUrlFromRouteCache function?"}
{"pred": "Why do we need these lines?", "gold": "Maybe we can use `this.instance.getCell` with `topMost` flag to get `TD` element?"}
{"pred": "Do we need this log?", "gold": "Change this to Debug Level"}
{"pred": "`StackTraceUsage = _allLayouts.DefaultIfEmpty().Max(layout => layout?.StackTraceUsage ?? StackTraceUsage.None);`", "gold": "I refactored the Aggregate, those are hard to read"}
{"pred": "Why was this test removed?", "gold": "This is now done in the after method, so this test won't pass any more."}
{"pred": "Unnecessary spacing detected.", "gold": "What was the point of creating `user_block` if you're then not going to use it ;-)"}
{"pred": "Why are these removed?", "gold": "@ueshin, I thought we can remove this entire file. Does that require some more works?"}
{"pred": "This should be `six.text_type(tokens.string)`.", "gold": "Just `return tokens.string[1:-1]` is enough"}
{"pred": "resources :questions, only: [:show] do", "gold": "1 trailing blank lines detected."}
{"pred": "Shouldn't this be `setPrefWidth`?", "gold": "Isn't this the default max width? In any case I would prefer to see these definitions in the css files."}
{"pred": "Why do we need this change?", "gold": "Is this thread-safe? (If not, and if the solution is to introduce locking, let's reconsider how we do the scheme changing instead...)"}
{"pred": "Why this change?", "gold": "Looks like this file has tabs instead of spaces."}
{"pred": "nit: `task.Arn` is already in the format string, so you don't need to interpolate it", "gold": "Hmm should we clean up container resources before task resources here? or the order does not really matter here?"}
{"pred": "Why was this removed?", "gold": "Please undo this :wink:"}
{"pred": "Layout/TrailingBlankLines: Final newline missing.", "gold": "thanks for adding this missing association"}
{"pred": "Why do we need this overload?", "gold": "Should I remove this in favor of the HttpsConnectionFilterOptions overload?"}
{"pred": "Why do we need this method?", "gold": "This shode be nullable, there alway sholud be at least one status in system , if not exist that mean data problme"}
{"pred": "Why do we need to add this JS file?", "gold": "Spaces not tabs"}
{"pred": "Can we remove this?", "gold": "To get the files inside a directory, please use `readDirStats()`."}
{"pred": "I think this should be `ContainerImplementationNone`", "gold": "might be worth to call these `Isolation` instead of containers here and when presented to the user -- docker/rkt , in addition to cgroups and namespaces, also provide image discovery and filesystem preparation; there's also the security context and probably 1-2 other small things"}
{"pred": "Why do we need this file?", "gold": "File is empty, consider removing?"}
{"pred": "nit: `return url if url in _load_auth()`", "gold": "This seems to return the registry_url. The more meaningful URL is the catalog URL, which is the URL the user specifies in `quilt3.login`. The username might also be as useful here if not more useful."}
{"pred": "Why did you remove the L1ETHGatewayAddress?", "gold": "Was the addition of `GasPriceOracleAddress` here erroneous?"}
{"pred": "Align the elements of a hash literal if they span more than one line.", "gold": "I believe that you are going to have to do some work here to get the env var support for these values to still work correctly, otherwise they will get stored as :department instead of host_tags[:department]."}
{"pred": "nit: space between `i` and `<`", "gold": "How was this causing the exception?"}
{"pred": "I'm not sure if this is the best way to do this. I'm not sure what the best way to do this is.", "gold": "I still have issues with it loading Simplified Chinese by default over Japanese, since they also share characters and we're not sure if characters are different or not. As-is, this fixes Traditional Chinese and Simplified Chinese, but we're not sure if it'd still screw up Japanese text or not. I maintain that, in my opinion, Japanese should be the only script of this kind loaded by default (Because of Hiragana and Katakana, that aren't shared with any other script) and either variant of Chinese should be loaded only in their respective case."}
{"pred": "Why is this needed?", "gold": "Isn't it better to stub AtomatonQuery and yield it here. IIRC it resolves simplest MTQ highlighting cases as nobrainer."}
{"pred": "Line is too long. [81/80]", "gold": "Line is too long. [96/80]"}
{"pred": "Why do we need this?", "gold": "My only concern with changing the node selector here is that someone else _could_ have built their own images for other platforms and set them to be used using the flag override on the controller, which in turn this change would break. Perhaps not changing the selector for acmesolver pods makes most sense, and then working on actually having support for Windows? wdyt?"}
{"pred": "Why do we need this change?", "gold": "Why do we need interface `InnerObjectWithSelector`, I searched the usage with this field, it seems nowhere use `GetSelectorSpecs()` methods provided by `InnerObjectWithSelector`"}
{"pred": "Why do we need this init function?", "gold": "Do we need this `init` here? We have already called the `InitContext` in `StartModule` directly."}
{"pred": "This should be `self.execute(command, {\"windowHandle\": \"current\"})`", "gold": "This `if` is not necessary"}
{"pred": "Why do we need this?", "gold": "should we add a `mangle.json` mapping for this? We could reuse a property name that's only used on component or vnode objects right now, like `__s` (\"next state\")."}
{"pred": "Should this be `--modulepath #{opts[:modulepath]}`?", "gold": "Please update the yard docs to indicate this new option."}
{"pred": "nit: `Subnets` -> `Subnets`", "gold": "Can you provide an example in the godoc section on how to use this? From the implementation it looks like the AvailabilityZone field is required for example, otherwise it can fail / error, is that correct?"}
{"pred": "I think this should be `codeVersion.String()`", "gold": "It would be great if this could be captured by a test."}
{"pred": "Why do we need to change the bulk size?", "gold": "1000 -> 100 maybe too much, 200 ish to 500ish maybe a good option"}
{"pred": "Why do we need to change this?", "gold": "Any reason we need to keep this package's `ChecksumAddress` type or can we get rid of it too?"}
{"pred": ":ok: This change is safe, we'll keep the existing 19 translations.", "gold": "Above the one that was picked was the Button* prefix, and here it's the Header* prefix. Maybe the Button prefix is more general."}
{"pred": "Shouldn't this be `BestSuggestedHeaderHash`?", "gold": "I might prefer changing: public Block FindPendingBlock() => FindBlock(PendingHash, BlockTreeLookupOptions.None); public BlockHeader FindPendingHeader() => FindHeader(PendingHash, BlockTreeLookupOptions.None); in IBlockFinder, what do you think?"}
{"pred": "@deads2k @deads2k @deads2k @deads2k @deads2k @deads2k @deads2k @deads2k @deads2k @deads2k @deads2k @deads2k @kubernetes/sig-api-machinery-pr-reviews", "gold": "This is necessary due to a bug in 4.7. Follow HIVE-1561 for getting rid of it."}
{"pred": "Why is this needed?", "gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping."}
{"pred": "Why did you remove XKeysymToString?", "gold": "Some day (tm) I will also get rid of that one. But today is not that day..."}
{"pred": "Expected 1 space after IF keyword; 0 found", "gold": "Add a space between if and opening parenthesis please (i.e. `if (`)"}
{"pred": "Why this change?", "gold": "nit: `rename` instead of `alias`?"}
{"pred": "Why do we need to skip sda1?", "gold": "Per AWS docs EC instances have the root mounted at /dev/sda1. This label should be skipped."}
{"pred": "Why was this removed?", "gold": "I'm not sure it is a better way to address lose message, if wait here, edge controller cant process message, event from watching api-server will be lost yet, right?"}
{"pred": "`if p.len is not None and p.value_size is not None:`", "gold": "Please keep the correct alignment, it seems broken now (at least in Github). Can you reverse the test (`if p.value_size is None`)? Also, do you want `6` when `p.value_size is None` or `x + 6`? Maybe, in that case, something like `lambda p, x: x + 6 + (0 if p.value_size is None else p.value_size)` would be easier to read. Or even easier: `lambda p, x: x + 6 + (p.value_size or 0)`."}
{"pred": "Why is this a pointer?", "gold": "Can we make sure ECS service treats it as int64 as well?"}
{"pred": "blank line contains whitespace", "gold": "Please follow the naming convention for variables, i.e. `windowText`."}
{"pred": "Why do we need this alias?", "gold": "alias can be `cast`"}
{"pred": "Shouldn't this be `memory.mmap-errors`?", "gold": "Let's use `%zu` instead of casting to `uint64_t` and using `PRIu64`. The alternative is to change the type of `mmap_errors` to `uint64_t`, though I'd prefer not doing that because some 32-bit platforms might not provide atomic operation support for `uint64_t`."}
{"pred": "I think this should be `SUGGESTION` now.", "gold": "I recall there being a reason we had this one set only to suggeation. @carterkozak do you remember why? or is my memory getting corrupted?"}
{"pred": "Nit: `it->second` can be `const`.", "gold": "This should now be made into `if (it->second.empty())` ?"}
{"pred": "Please change this to `self.num_of_searches -= 1`", "gold": "Do we need to worry about a race condition on this decrement (@The-Compiler)? I'm not sure how the python callbacks work, so this might not need to be something to worry about."}
{"pred": "Why this change?", "gold": "Should these assert that the extracted `SpanContext` is remote?"}
{"pred": "I think this should be `match_low_quality_in_second_stage`", "gold": "typo: allow low quality matches."}
{"pred": "`cfg` is unused (from `structcheck`)", "gold": "At some point we need to condense down and refactor our \"configs\" as we have too many in too many places and we're starting to get more illegible code. No change necessary but calling out for future reference."}
{"pred": "Layout/AlignHash: Align the elements of a hash literal if they span more than one line.", "gold": "Can we add the `if label` conditional to this please?"}
{"pred": "Why do we need mlflow here?", "gold": "@thunterdb, can we increase the minimal version to almost the latest ones? I was thinking people will mostly use the latest version of mlflow"}
{"pred": "`hasFillDataChanged` -> `hasFillDataChanged`", "gold": "If the last argument is going to be removed, why would we add it to the API docs? Shouldn't it be private for internal use?"}
{"pred": "Why do we need this?", "gold": "`Intermediates` or `Intermediate`"}
{"pred": "I don't think this is the right exception to raise here. It should be `InvalidLocatorException`.", "gold": "This is not the right exception class. There is an InvalidSelectorException class that covers bad locators."}
{"pred": "Why remove this?", "gold": "If this code isn't needed, it should be removed."}
{"pred": "I don't think we need to pass `md.connection.cfg.RetrySettings` here.", "gold": "Should the `doRequest` func be a method on the `connection` type instead of passing state from the type?"}
{"pred": "Should this be `COPILOT_APP_NAME`?", "gold": "we'll probably tackle these e2e tests at the end"}
{"pred": "Why is this needed?", "gold": "what is this address pointing to? what are we measuring here? I want to have a better understanding."}
{"pred": "Why do we need to change this?", "gold": "Would it be better to pass the dependency status as the parameter into the SQL string? In case the enum value is changed in the future, we don't need to change the code here."}
{"pred": "This should be `// +build windows`", "gold": "Hah I had `gorename` failing without this too."}
{"pred": "Shouldn't this be `Security.Instance.DdlibWafVersion`?", "gold": "maybe prefix these with `appsec_` for consistency?"}
{"pred": "Why is this needed?", "gold": "nit: this should be down further with the other github imports"}
{"pred": "This should be `if ctypes.windll.kernel32.FreeConsole() != 0:`", "gold": "Why is this change necessary or related to the rest of the PR?"}
{"pred": "Why did you change this?", "gold": "Hm, I wonder if the `see:` prefix is even necessary?"}
{"pred": "I don't think you need the `|| 1` here. You can just use `Math.round(remainingMinutes)`", "gold": "This should be translated."}
{"pred": "nit: `new_config.num_class != config_.num_class`", "gold": "I originally had this PR only changing the R package, but then ran into this error > Error: [LightGBM] [Fatal] Cannot change metric during training This is thrown even if you aren't actually CHANGING `metric`. I think the change here in `c_api` is closer to the desired behavior, only throwing an error if the parameter is being changed."}
{"pred": "Why is this change necessary?", "gold": "These changes are just to make cli_spec a little more readable for VS Code users, as there's a bug with the Ruby plugin's syntax highlighting when you use multi-line regex literals."}
{"pred": "Why not use `constants.HiveNamespace`?", "gold": "Shouldn't the global pull secret by in the namespace of the hive-operator? It is part of the operand."}
{"pred": "Why is this needed?", "gold": "kinesis-mock applies KINESIS_LATENCY to RegisterStreamConsumer actions so I added a sleep here."}
{"pred": "Can't upgrade meta from V1 to V3?", "gold": "Only V1 or V3 is return from `getMetaVersionFromKV`. So where do we call `updateMetaV2ToV3`?"}
{"pred": "Should this be `nodeAttestorV2`?", "gold": "I think that V0 is missing here, which will prevent plugins that haven't been converted to work."}
{"pred": "Should this be removed?", "gold": "Should we remove this?"}
{"pred": "nit: remove empty line", "gold": "Put on top of the import."}
{"pred": "Why do we need this name?", "gold": "See above, this shouldn't be added."}
{"pred": "Why did you change the name of this item?", "gold": "This'll likely get fixed upstream, we should let them deal with it."}
{"pred": "`HostFactory` -> `HostFactory`", "gold": "Somehow, this field does not seems useful for the exposed package api, only for the tests. Would you consider having an unexported field in `hostFactory func(context.Context, ...libp2p.Option) (host.Host, error)` instead to be set only by a new helper function defined in export_test.go. This is just a suggestion, not a hard requirement for the PR approval."}
{"pred": "Why do we need this function? Can't we just use `moment().startOf(timeDuration)`?", "gold": "As a first argument to these function, please pass the date that should go forward/backward. Also please clarify what is \"n\" (possible values, unit) and what is timeDuration (possible values, unit, as from your code it seems to be \"day\", \"hours\", etc. but from your example it seems to be milliseconds)."}
{"pred": "Why do we need this import here?", "gold": "Are you sure you really need this code here? that script will be certainly run in NVDA's main thread, and core would have already called setLanguage."}
{"pred": "Why this change?", "gold": "why is this changed ?"}
{"pred": "I don't think we need to test that doc's revision field is updated.", "gold": "Should this be \"the new revision value\"?"}
{"pred": "Unnecessary spacing detected.", "gold": "You have deleted :attribute"}
{"pred": "Why did you remove the ASF license header?", "gold": "The license header should be updated to the Apache one."}
{"pred": "I don't think we need to check CoreCLR here.", "gold": "@zacharycmontoya Is there any way to distinguish a `SocketHttpHandler` from another `HttpMessageHandler` request?"}
{"pred": "Shouldn't this be `instr_is_scatter_gather`?", "gold": "Not sure about this one -- did you check somehow?"}
{"pred": "Should this be `@options['HOSTS'][name] || @options[:pe_dir]`?", "gold": "Is there a good reason to keep this at the `pe_ver_win` name now that it's per-host?"}
{"pred": "Why do we need to create a new fragment here?", "gold": "Not in the order of display : Front, Ingredient, Nutrition here (which is the right thing), Actually displayed: Front, Nutrition, Ingredients"}
{"pred": "Why is this being removed?", "gold": "Why delete `StartTime`? This `StartTime` was used to avoid the PID was reused."}
{"pred": "Does this need to be in a `rescue` block?", "gold": "My concern here, is that if the dump_puppet_log also throws then we will lose the data about the teardown_exception."}
{"pred": "shouldn't this be `size_t`?", "gold": "Should it be `int64_t`?"}
{"pred": "I think it's better to use `TimeUnit.MINUTES.toMillis(1)`", "gold": "is this value related to something ?"}
{"pred": "Why do we need this change?", "gold": "Add names to tuple elements ValueTask<(Keccak? Hash, AddTxResult? AddResult)>, should they both be nullable?"}
{"pred": "Why do we need to replace acronyms here?", "gold": "I think it might make more sense to do this in Name.upperCamel; it is the entry point for upper camel strings."}
{"pred": "Why is this cast needed?", "gold": "Huh? The point is that a cast isn't necessary"}
{"pred": "I think this should be `OPENEBS_IO_CREATE_DEFAULT_CRD`", "gold": "can we name it like `InstallV1Alpha1CRDs` ?"}
{"pred": "Should this be `hiveutil-created-once`?", "gold": "I need something to match when creating selectorsyncsets so added this label."}
{"pred": "Why is this needed?", "gold": "Isn't `nil` the default return value from an empty `rescue` clause? If that's correct, then we could just remove the `nil` line entirely as it doesn't serve a purpose."}
{"pred": "This should be `s3.s3_ruby_bucket_cors.rb`", "gold": "Simple Storage **Service**"}
{"pred": "Why do we need to do this? Can't we just call `PrepareCache` directly?", "gold": "Wouldn't that cause the obsolete indexes to be downloaded over and over again? After all these are still stored in the repository."}
{"pred": "I don't think you need the `!message.blank?` check here since `message` will be `nil` if the key doesn't exist.", "gold": "We might want to move this logic to a Plain Old Ruby Object down the road. Not a blocker."}
{"pred": "`this.toolbox_ && this.toolbox_.position()`", "gold": "move `this.toolbox_.position();` to just after line 1477. Context: the if statement on line 1472 checks whether this is a toolbox with categories, and if so it populates the toolbox. Positioning the toolbox is a reasonable followup to that, and means you don't need an extra if. You may also need to call `this.flyout_.position()` after line 1483, which is the equivalent for the non-category toolbox."}
{"pred": "why do we need this?", "gold": "Should the function above be .FirstOrDefault() instead? Otherwise, why check for null and tell ReSharper to ignore the fact that it can never be null?"}
{"pred": "`STATUS_MAP` is not used.", "gold": "Let's not create new connection, but rather user `common.db` one"}
{"pred": "Why do we need this helper?", "gold": "Can this use asset_path rather than defining an image_url helper?"}
{"pred": "Should this be `always('')`?", "gold": "Hindley-Milner signatures don't use literal types. They explusively use types. It's deal with that"}
{"pred": "struct field OFPolicyRule should be OFPolicyRule", "gold": "Could we just extend PolicyRule with more fields? It was originally designed as the struct required by openflow client, nested structs seem not helping. And for the name of the fields, initialism should be uppercase, OFID and NPName doesn't look good, then maybe FlowID, PolicyName.."}
{"pred": "Should be `opcache_is_script_cached`", "gold": "I really dislike this alignment approach, as it makes identifying individual functions quite hard, but I kept consistent with the previous style. Since no sorting was evident, I pushed it to the end of the block. Meanwhile, is this supposed to be tested or meaningfully testable somehow?"}
{"pred": "I don't think this is correct. The order of events is important here. During an interation, we call get_steps_to_execute, then get_steps_to_execute, and without it is_complete can return true when we're just between steps.", "gold": "Could also consider modifying the ActiveExecution..."}
{"pred": "I don't think this is the right place for this function. It should be in `subscript.py`.", "gold": "Does it make sense to change that to a custom error instead of `ValueError`?"}
{"pred": "Why do we need this change?", "gold": "I guess this will need to change soon."}
{"pred": "Why is this being removed?", "gold": "Restore this spacing - not sure why it has to be removed?"}
{"pred": "Shouldn't this be `#ifdef _WIN32`?", "gold": "These defines cause issues in base.h leading to failing android builds. Locale independency is now set in multiple spots, in cmake and in base.h. The base.h uses feature test macros wrong. Feature test macros can be used to indicate that a feature should be made available. They do not guarantee that it is available. On the cmake side this is done by the check symbol macros (similar to what autoconf does). On the android side not. I would suggest removing this from base.h and define locale independent in gradle. It is available since android 21 I believe. Is there a way in gradle to set locale independent only if android api >= 21?"}
{"pred": "Why do we need this change?", "gold": "Why not delete these codes?"}
{"pred": "`FLAGS_meta_client_retry_times` -> `FLAGS_meta_client_retry_time`", "gold": "If pull message failed after some reties, we should ensure the storaged exit, otherwise it has risk to loss data."}
{"pred": "F401 'first' imported but unused", "gold": "looks like you don't need to import first and count here anymore"}
{"pred": "why do we need this?", "gold": "FYI, visibility task processing is local only, meaning pushing something to local ES cluster / local archival endpoint"}
{"pred": "Why do we need this class?", "gold": "This import can be removed."}
{"pred": "I don't think we need to check for `-fips` here, since `fips-` and `-fips` are valid regions.", "gold": "1. Nit: We can have a general helper to identify if a region is pseudo region. We might already have one somewhere. 2. Does any type of ARN support FIPS? If not, we may just move this check in arn package?"}
{"pred": "Why do we need these imports?", "gold": "is this phrase completed in a next line? Or forgot to add... what?"}
{"pred": "why do we need this?", "gold": "`('train', 5)` and `('train', 1)` are actually the same."}
{"pred": "Why do we need this change?", "gold": "Would it be too complicated to refactor `currLimit` to be an `int64`?"}
{"pred": "I'm not sure if this is the best way to do this, but I don't have a better suggestion.", "gold": "Would it be more performant to just `include ::RSpec::Core::Pending` here? /cc @myronmarston"}
{"pred": "I don't think we need to add this field. We can just use `ChaosStatus.Instances`", "gold": "Should be podiochaos?"}
{"pred": "Why is this needed?", "gold": "Is the `codecs.register(lambda name: None)` gracefully handled by codecs? The lambda is expected to return a tuple of functions (encoder, decoder, stream_reader, stream_writer) (or a CodecInfo object), according to the docs. I've only checked python's built-in help, though."}
{"pred": "Nit: `The name` -> `The name`", "gold": "in this case, it could be either instrument name or the view name, which could be invalid. might be better if we can offer very specific message. (not blocking this, we can add this as a follow up,if needed)"}
{"pred": "Nit: `handle` -> `handleName`", "gold": "I'd rather just send the parameter twice than break encapsulation here. There's already precedence with webelement IDs"}
{"pred": "Why do we need this?", "gold": "You may put 'open-mmlab://res2net101_v1d_26w_4s' here. MMCV will be updated later."}
{"pred": "I don't think this is used anywhere.", "gold": "May be worth making this more specific, to avoid potential conflicts, maybe `pagespeedDashboardWidget`? Or `webVitalsDashboardWidget`?"}
{"pred": "`Failed because: ${err.message}` => `Failed because ${err.message}`", "gold": "I guess this assignment is now redundant?"}
{"pred": "nit: `blockNum` -> `blockNumber`", "gold": "See above note re: blockNum synchronization."}
{"pred": "I think this should be `spire_backoff`", "gold": "wonder if we could avoid doing named imports if we type aliased `backoff.Backoff` in the `.../agent/common/backoff` package?"}
{"pred": "Why was this removed?", "gold": "Or maybe put into alphabetical order with the other #includes."}
{"pred": "Why do we need a new ticker here?", "gold": "This runs the entire duration of the program; this change is not needed."}
{"pred": "Why do we need this?", "gold": "I don't feel well about the `ALWAYS_UPDATE` option   &nbsp; sounds like a workaround. I can imagine that some of the plugins want to observe all options. Maybe, in that case, we can reuse the `CONFIG_KEYS` that would return an empty array for observing all settings and `false` for disabling observing at all? I just thinking aloud - Like `CONFIG_KEYS` sounds reasonable. We could support and maintain it in the future, even after implementing the \"observability\" to the MetaManager then `ALWAYS_UPDATE` ... I don't know :)"}
{"pred": "I don't think this is the right place to fix this bug. I think it should be inside the `#ifndef UNIX`.", "gold": "A \"tab difference\"? As in, there are tab characters somewhere? This disabling of clang-format for all the code here seems like overkill. Are you sure there's not some other solution? I don't really understand the problem though. Do you mean clang-format-diff?"}
{"pred": "Don't use wildcard imports.", "gold": "Could you please leave the explicit imports?"}
{"pred": "Why do we need this check?", "gold": "Can we check for containsKey here?"}
{"pred": "Shouldn't this be `os.Args[1] == \"help\" || os.Args[1] == \"-h\"`?", "gold": "Exit successfully. We served the help the user wanted."}
{"pred": "I don't think this needs to be exported.", "gold": "Had to rename this because `InitialPackage()` already existed."}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.", "gold": "Can we put this in a different helper?"}
{"pred": "(style) space prohibited before that ',' (ctx:WxW)", "gold": "I'm not sure where your 31 comes from? I see 15 here and 2 above for pc and flags, for 17 total beyond the SIMD."}
{"pred": "Should this be `apiTermsOfUse`?", "gold": "If you want, you could change this to `allowCors(response` (like in \"version\", above) to allow Cross-Origin Resource Sharing. I'm sort of wondering what's returned if no API terms of use are set."}
{"pred": "Why is this needed?", "gold": "Why do we need to override this if all we're doing is passing it up?"}
{"pred": "`retCode` is not used.", "gold": "Just wondering whether it's safe to send all CQDs to the child compiler. As this missing CQD is causing trouble, maybe some other user CQDs that now get sent could also cause the statement to fail? Also, if I have a table with a nullable unique column, should I have to set this CQD to create another table like it, or should the CREATE TABLE LIKE work without the CQD?"}
{"pred": "This should be `packaging.version.parse`", "gold": "EARLIEST_TESTED_RELEASE might be slightly more clear"}
{"pred": "Why did you remove the `\\b`?", "gold": "I think replacing `.*` with `\\s*` from after the hash makes sense, but not the rest of the changes."}
{"pred": "I don't think we need to add a new field to the `secv1alpha1.RuleAction` struct.", "gold": "interesting .. did not know varint tag covered bool as well"}
{"pred": "Why do we need this?", "gold": "Could you please elaborate the reason for not using `gkc_summary` like the values above? I ask this, because I assume what we want to collect is a histogram of event loop latency, and we use `gkc_summary` for collecting histograms."}
{"pred": "why not `this.txs[t].getHash()`?", "gold": "getHash should be a public and without an `_` if used here."}
{"pred": "Why do we need this hack?", "gold": "Unrelated to these changes -- we will probably want some special handling for genesis block validation."}
{"pred": "Why do we need this interface?", "gold": "This is probably overkill since we don't actually need to pass this specific interface anywhere, but I don't mind it!"}
{"pred": "Why do we need this?", "gold": "@janos I moved this back here, to avoid having multiple add peer calls being handled. I think it's either this or a global lock across the whole function. I think this is a better approach, especially since `hive.Broadcast` is blocking . We can remove the map entry on errors if needed. LMKWYT?"}
{"pred": "Should this be `approve-link` instead of `reject-link`?", "gold": "Minor: can we put the conditional outside of the partial?"}
{"pred": "`isinstance(offline, (list, PacketList))`", "gold": "We need to find something more efficient than this. We can probably just check the first element and assume the type list is consistent.."}
{"pred": "`A %s is a task which can be programmatically run, either on a schedule or via service code in response to events.`", "gold": "How \" via service code in response to event.\"? I don't think we'll get in the no schedule option to the release. We should probably wait for some customer feedback first to make sure we're addressing different event-triggers the best way"}
{"pred": "Why is this removed?", "gold": "Please move unrelated formatting changes to their own PR (same with the resources.py file)."}
{"pred": "Shouldn't this be `window._state_before_fullscreen &= ~Qt.WindowFullScreen`?", "gold": "Make this a public attribute (remove the leading `_`) if you want to access it from the outside."}
{"pred": "Shouldn't this be `if (browser && browser.firefox)`?", "gold": "this conditional is useless now so it should be removed"}
{"pred": "`uoffset_t` should be `size_t`", "gold": "`vecofstructs->size()` already returns a `uoffset_t`. So if you just change the type of `i`, you don't need any casts."}
{"pred": "Is this TODO still relevant?", "gold": "Nit: Maybe merge this with the configProto check on line 208? Don't feel that strongly though, please keep separate if you prefer."}
{"pred": "Shouldn't this be `doc.hello || doc.ismaster`?", "gold": "I know we already did this in 4.0 so carry on, but I'm facepalming here we should've made an overrided setMessageHandler that sets ismaster to true when hello is present. Esp in 4.0 where we already have some overrides written. We can keep going here and maybe open a ticket to some effect of that solution"}
{"pred": "I think it would be better to use `<%= link_to t('blacklight.search.skip_links'), '#documents', class: 'element-invisible element-focusable', data: { turbolinks: false } %>`", "gold": "I believe we could use `link_to` here (although not super important). Also, we should internationalize this value. I'm not 100% sure what our process is for adding new UI strings these days (e.g. skip the specs that will fail if we add a new key to only one language, use Google Translate to translate the value for us, some other option)."}
{"pred": "`result == VK_SUCCESS || result == VK_INCOMPLETE`", "gold": "This was already in vkGetPhysicalDeviceDisplayProperties2KHR..."}
{"pred": "`IsDockerEngineRunning` is unused (from `deadcode`)", "gold": "nit: I'd expect a public method called IsDockerEngineRunning to return a boolean yes/no, not the error message. Can we change either the return value or the name? Something like `CallDockerEngine`"}
{"pred": "Why did you change this?", "gold": "If i remembered correctly, type_name is '{RESOURCE_TYPE}/{RESOURCE_NAME}', if type_name is 700 max then name cannot exceed that size"}
{"pred": "nit: space after `==`", "gold": "When calling functions with keyword arguments: please provide the arguments as keyword arguments, not positional arguments."}
{"pred": "act_cfg -> activation_cfg", "gold": "We may follow the argument order: conv_cfg, norm_cfg, act_cfg."}
{"pred": "Should this be `chrome_options=`?", "gold": "`options['binary'] = WebDriver::Chrome.path` if set?"}
{"pred": "Why is this needed?", "gold": "folly library should be put on the top."}
{"pred": "Why do we need to check for `xlink:?`?", "gold": "Do we have to restrict this to SVG elements? I think setting namespaced attributes on normal dom elements (while not as common) is still valid, so perhaps we can save some bytes by removing the `isSvg` check?"}
{"pred": "Why do we need to call `toPhysicalRow` here?", "gold": "Please add it to the `REMOVED_HOOKS` constant."}
{"pred": "`shadowSupport` is not used.", "gold": "This variable needs `.v1` at the end of it, or the tests below need it. There are some test failures as a result"}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.", "gold": "Is this access protected so that only admins can access this route?"}
{"pred": "Shouldn't this be `DBL_MAX - 1`?", "gold": "What happens if the minimum x coord is > 0? This will incorrectly set it as zero, right?"}
{"pred": "Why do we need to check `o.maxp > 0` here?", "gold": "I think you want to look at current pending + batchSize and if that is > o.maxp no?"}
{"pred": "Why is this change needed?", "gold": "Should this be `codes.Error`? `codes.Internal` was an error status before."}
{"pred": "Extra empty line detected at class body end.", "gold": "I don't think you need these lines."}
{"pred": "`diskLimiter` -> `diskLimiter`", "gold": "You didn't mean to export this, right?"}
{"pred": "Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "Simple Notification **Service** (singular)"}
{"pred": "`egressConfig` -> `egressConfig`", "gold": "Do we still need this?"}
{"pred": "Is this intentional?", "gold": "We do have a disconnect between the privateMarkerTransactionFactory.getSender() call and the createPrivateMarkerTransaction() call. When the plugin receives the call to create the PMT it does not know what the sender was returned by the other call. At a minimum we need to pass in the sender to the second call. I would prefer that the plugin does the locking if that is necessary. If you are using random keys you don't have to lock! Besu could signal to the plugin when a PMT was un- or successfully added to the pool using a callback. Callback could be null if this is not needed. The plugin would have to be able to get the nonce for a certain key from besu. What do you think?"}
{"pred": "Shouldn't this be `MessageDefaultError`?", "gold": "This is a bit inconsistent with the `ErrorStartHourGreaterThanEnd` in the previous file. Wouldn't `ErrorDefault``fit better here?"}
{"pred": "Why is this being removed?", "gold": "I think it will revert the change @antoninbas did on purpose 05eee251c9c53400277def576f92d614ca234898"}
{"pred": "Why do we need this?", "gold": "nit: a switch perhaps?"}
{"pred": "Why did you remove the `<link>` tag?", "gold": "Would it make sense for `opensearch_description_tag` to have default values for the title and href attributes?"}
{"pred": "Shouldn't this be `err != errTLFJournalDisabled`?", "gold": "Just noticed this while debugging -- it's unlikely to be causing issues in practice."}
{"pred": "Why do we need to wait for 750?", "gold": "That seems unrelated - did that fix a random test failure you noticed while working on this issue?"}
{"pred": "`base.file()` can be `null` here.", "gold": "This kind of concern should be handled in the `TableMetadata` update methods. This is similar to `metadata.rollbackTo`, which not only sets the current version, but also updates the table history. I think that all of those methods should add the current object's `file.location()` to the previous metadata location list, if it is non-null. That way, the caller never needs to remember to update it."}
{"pred": "nit: `mlvl_tensor_list` -> `mlvl_tensor_list`", "gold": "We need to know why all the tensors are detached in `get_bboxed`."}
{"pred": "Why is this needed?", "gold": "Unrelated but shouldn't this raise `attribute-defined-outside-init`?"}
{"pred": "`create_no_window` -> `no_window`", "gold": "I would rather no have this as a `kwarg` as it encourages \"growth\" which lead to an unweildy constructor in other classes. Let's add a method or property to take care of this instead as I think it's usage is going to be quite low."}
{"pred": "Layout/EmptyLinesAroundMethodBody: Extra empty line detected at method body beginning.", "gold": "You just changed my life :) I grew very attached to this safe nav approach when working with Groovy years ago `obj?.method`. Glad to see its now a part of Ruby!"}
{"pred": "I think this should be a `<div class=\"form-group\">`", "gold": "do you mean 'clearfix' class?"}
{"pred": "I think this should be `options.causalConsistency === true`", "gold": "`causalConsistency` is already defined on `SessionOptions`. We do not need to duplicate it here."}
{"pred": "Please don't use wildcard imports.", "gold": "This should not be included since there are no code changes."}
{"pred": "Why do we need this?", "gold": "If all we need just response 200, then we could use `c.Status(http.StatusOK)` here."}
{"pred": "Why do we need this?", "gold": "Should be checking for error here"}
{"pred": "`$this->config` is already an array.", "gold": "Put a space between `(array)` and `$this` and I'll merge it"}
{"pred": "Why do we need this?", "gold": "You could add this to stack.go, which has similar functions (to avoid yet another small file). None of these are likely to be implemented considering what TinyGo is designed for."}
{"pred": "Why do we need this class?", "gold": "the class names `NotificationHolder` and `NotificationsHolder` are fairly difficult to quickly tell apart, particularly since they are often used close to each other"}
{"pred": "Don't use star imports", "gold": "Avoid wildcard imports"}
{"pred": "Why this change?", "gold": "Need to do this to unblock mockgen. The interface method needs to be public to be visible in another package. The right fix is to delete this test only interface method"}
{"pred": "Why do we need to check the driver version here?", "gold": "same question here as I have on the other file regarding doing this check here vs L112 vs not at all"}
{"pred": "// +build !openbsd", "gold": "Adding `// +build !windows` (as a separate line) will do the same for Windows. So while you are at it we might add it as well."}
{"pred": "Why was this removed?", "gold": "this is used as important way of mocking for unit tests, FYI"}
{"pred": "Shouldn't this be muted_alpha=0.5?", "gold": "Sorry, should have been clearer, I meant adding this to the ``Histogram`` options one line above."}
{"pred": "Why did this change?", "gold": "Just ignorance on my part, but what is the significance of the change from C23NHe2 to C23NHx2?"}
{"pred": "I don't think this should be a class selector.", "gold": "What about tuples or pandas series? Do we want to support lots of different types or force a single type?"}
{"pred": "Why is this removed?", "gold": "Small thing, without the check above this will throw a NoNodeException if the path doesn't exist. Maybe this can be wrapped in a try/catch just for the NoNodeException, so that the more user-friendly message used above can be thrown instead: `throw new KeeperException.NoNodeException(\"No collection found at path: \" + path);` Just a thought, I'm not even sure it's worth it."}
{"pred": "Should this be `unless value.blank? || value.valid_http_url?`?", "gold": "I don't know why this worked before, but we should be explicit on not verifying that a blank string (allowed as a way to remove a url/download_url) is a valid url as it is not."}
{"pred": "\"PowerShell 2 is unsupported\"", "gold": "Do we want to raise an error here instead of warning? Or would it be better to just see if Bolt happens to succeed, and let it fail on it's own if it fails? I'd lean towards raising an error, but that's different from \"removing support\"."}
{"pred": "`unfiltered.reject { |k| options.include?(k) }`", "gold": "This is kind of confusing with the other `filter_options`."}
{"pred": "I don't think we need to check for `OpsCantHandleFavorite` here.", "gold": "Could the `deleteFromFavorites` happen when `head == nil` because it's not initialized yet somehow but not because TLF doesn't exist? I was concerned if this would make it possible in any way to have favorites seemingly deleted on a device while it's not actually happened on server."}
{"pred": "Shouldn't this be `UInt64`?", "gold": "It doesn't look like this particular \"rowCount\" variable is used anywhere. I suppose we could delete it. The code change is harmless though."}
{"pred": "Shouldn't this be `http.StatusNoContent`?", "gold": "Hmm, probably we should instead write whatever `status` is returned instead of coding a special case."}
{"pred": "Why do we need this?", "gold": "Could using the pointer-to-struct approach here cause confusion later? We've had several problems of that kind in the past. What does it mean if the struct is non-nil but its fields are nil? Is that even allowed? (libcalico-go question) Are there any validation requirements for this new rule addition; should it only be allowed if `Protocol == TCP`, for example?"}
{"pred": "has_many :observers, through: :observers", "gold": "why this recursive relationship definition?"}
{"pred": "`optional, used for introspection, and used for routing if present.`", "gold": "More sentence, less list please. > Encoding of the handler. This field is optional. We don't need to mention exactly what it's used for because that list can expand (as it has already in this change)."}
{"pred": "It also collects the following metrics:", "gold": "Not part of this PR, but should the section above say what the name of the metric is for each method?"}
{"pred": "Why do we need to cast here?", "gold": "there are changes that are upcoming to this section. For now, this works (to demo the usage of Gauge), and the changes to this section are coming as separate PRs."}
{"pred": "Why do we need this change?", "gold": "This is equivalent to stdout. Why not just replace stdin with stdout in `IsProcessBackground`?"}
{"pred": "This should be `if (p_jmsg[\"compress_method\"] != nullptr)`.", "gold": "Rather than test for nullptr, just treat the pointer as a bool, i.e. `if(p_jmsg[\"compress_method\"])`"}
{"pred": "I'm not sure if this is the right place to do this check. I think it would be better to move this check to the `createContainer` method.", "gold": "Can we move the remaining code of this method to a new method? I don't like the `return;` here, we could try to replace it with an `if ... else ...` syntax. What do you think?"}
{"pred": "This should be `kinto.core.events.ResourceChanged`", "gold": "nitpick: _and collections_"}
{"pred": "why is this needed?", "gold": "I believe these need to be explicitly initialized in `proxy_send_prepare`"}
{"pred": "`t0` is not used.", "gold": "This is unnecessary. The declaration of `t0` on line 179 is still in scope inside the `except` block."}
{"pred": "`@beautiful beautiful.border_color_marked` -> `@param color`", "gold": "The `border_color_`... properties don't support solid colors, not only this one. Maybe `@param solid_color` should be used instead of adding this note to every one of them?"}
{"pred": "Why is this needed?", "gold": "We don't need this file, we can use the one that is in the grid-ui directory"}
{"pred": "Why is this needed?", "gold": "FYI: inlined this method in the internal review."}
{"pred": "Why did you remove these imports?", "gold": "Werid, the checksum between this file and the one on branch `develop` is the same not sure why it's showing a diff"}
{"pred": "Shouldn't this be `metric.Meter.Name`?", "gold": "Prometheus doesn't have concept of Meter (like OTLP does).. Trying to see if this is a good approach to use the meter name as namespace, to avoid name collisions, when same instrument name is used across multiple instruments, from different Meter."}
{"pred": "I think it would be better to use `AuthManager::AUTH_METHOD_SHIBboleth` here.", "gold": "The formatting of this is a bit strange; I'd suggest collapsing this back to a single line, and moving the `&&` to the beginning of the second line to meet the line length restriction."}
{"pred": "`if (segments != NULL) {`", "gold": "One or the other should be non-NULL. If segments is NULL, the alloc above will have size zero, which we do not allow (there's no header): it should assert in debug build. So there should be asserts that one is non-NULL at the top, and if there really needs to be some kind of defensive check down here, it should cover the alloc too."}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.", "gold": "I'm surprised rubocop isn't picking up singe quotes?"}
{"pred": "I don't think we should ignore the error here.", "gold": "Is this line still needed?"}
{"pred": "Why is this 1 second?", "gold": "Maybe use specific values for all the watt.times fields? Even better, have a const for it at the top of the file?"}
{"pred": "This should be `os.path.join(TABLES_DIR, \"braille-patterns\")`", "gold": "nit: UNICODE_BRAILLE_TABLE or something might be a better name for this. IMO, braille-patterns.cti is a terrible name. This table allows Unicode braille characters to be used anywhere to produce raw dots."}
{"pred": "Why is this being removed?", "gold": "Why are we removing the option to skip machine pool generation?"}
{"pred": "Why do we need this interface?", "gold": "\"Request line\" here too."}
{"pred": "Shouldn't this be `ZONE_CONTROLLER_NPC_ID`?", "gold": "Please remove this."}
{"pred": "Layout/EmptyLinesAroundMethodBody: Extra empty line detected at method body beginning.", "gold": "Weird bug. Combining those joins and group calls was triggering AREL to generate the sql cache inside of will_paginate before the final call. This is a harmless workaround, but hints that will_paginate might becoming seriously deprecated."}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.", "gold": "This can be simplified as discussed before."}
{"pred": "nit: `NewProcessChunkMsg` -> `NewProcessChunk`", "gold": "Does `internal` or `test` in the file name actually do anything here? Or is that just to show these functions are only for tests?"}
{"pred": "Why do we need this change?", "gold": "does this boolean indicate unsafe serialization?"}
{"pred": "Why do we need this?", "gold": "Maybe rewrite to `Is only implemented for React Native`? (I assume that is the case)."}
{"pred": "Shouldn't this be `resourcesField != null && resourcesField.isMap()`?", "gold": "Do we not need this in Java because Java *is* handling map responses?"}
{"pred": "I don't think this should be a property.", "gold": "Maybe \"For configuring which scheduler messages can be received.\"?"}
{"pred": "Shouldn't this be `$this->getMediaManager()->getEntityManager()`?", "gold": "It will stop working with orm, so this is not a good fix, Try using some method in a common interface"}
{"pred": "I don't think we need the `Azure` prefix here.", "gold": "`s` is not necessarily the same as `sampler` - sampler could be null and this crazy lambda underneath falls back to something. So please use `s`"}
{"pred": "Why is this needed?", "gold": "This code is a bit confusing. Should HttpParameterType set to the original one or it is always BODY?"}
{"pred": "Should this be `!isTest && c.state.Config.Remote.VerifyOutputs`?", "gold": "Why did this change?"}
{"pred": "nit: `newProtoForTableStatus` -> `newProtoForTableStatus`", "gold": "nit: `status` collides with imported package named `status`"}
{"pred": "Why do we need a lock here?", "gold": "\"memory pressure could be decreased\" --> \"to avoid memory pressure\""}
{"pred": "Why do we need to create a new user here?", "gold": "I think it would make sense to fetch the cache values after deleting the listens and making sure they are what we expect."}
{"pred": "Why do we need this?", "gold": "I'm thinking about covering this change with the test. Can you do that?"}
{"pred": "nit: `cPorts, pPorts []int, proxyPort int`", "gold": "Not sure if it's a good idea to remove stop channel. If user cancels connection how will you stop pinger?"}
{"pred": "I think this should be `authConfig := docker.AuthConfiguration{`", "gold": "Could you please add a `TODO` here that we won't need `docker.AuthConfiguration` anymore when we migrate to SDK's pull image?"}
{"pred": "Why do we need this?", "gold": "Is there a scenario were we want to get an arbitrary set of blobs that don't share a common root?"}
{"pred": "Can we use `spec.description.includes('type=regex')` instead?", "gold": "Can you leave a note about why we are skipping regex tests?"}
{"pred": "Why do we need to call InitFSRepo here?", "gold": "This was the only caller of CreateRepo, so I inlined it."}
{"pred": "Why is this a string?", "gold": "As this is already a child of `auth`, I think we can shorten this to `path`"}
{"pred": "`element` is not used.", "gold": "This call should use element, not 0 I think."}
{"pred": "nit: `FetchUntilEmptyPage` -> `FetchUntilEmptyPageFetchThreshold`", "gold": "This is missing the definition of `fetch_until_empty_page` - it needs to go in the config section above."}
{"pred": "Should this be `File.expand_path`?", "gold": "I don't think this one needs to be changed since the only previous path is already an absolute one."}
{"pred": "nit: `this.table.locationProvider()` -> `table.locationProvider()`", "gold": "Since we kept the original constructor we might not need this change now."}
{"pred": "LOG.debug(\"Refreshed [{}]\", fullName);", "gold": "There is already a log in `BaseMetastoreTableOperations` for this. It has the location, but not the table name. Maybe just add table name to that one."}
{"pred": "nit: remove empty line", "gold": "This should be in the last group."}
{"pred": "Why do we need this?", "gold": "I believe you should either remove this or rename the PR. You can't change the behavior of the tracer (even to fix a bug) in a PR named \"unit test improvements\""}
{"pred": "Why do we need this?", "gold": "I've gone with this group name, however I'm open to suggestions on alternatives!"}
{"pred": "How about `QUORUM_RPC`?", "gold": "should this be GOQUORUM"}
{"pred": "`checkCoinbase` -> `checkCoinbase`", "gold": "I think checkCoinbase is not skipping checking coinbase. Instead, true-> checking num(coinbase tx) = 1, false -> checking num(coinbase tx) = 0."}
{"pred": "File is not `goimports`-ed (from `goimports`)", "gold": "same here, move it out"}
{"pred": "Why is this needed?", "gold": "Can you elaborate on why you need different behavior depending on Tools being built independently or not?"}
{"pred": "Style/ConditionalAssignment: Use the return of the conditional for variable assignment and comparison.", "gold": "because of the above if statement will requires both ex_save and guid_save to be true, this code will always return 'example answer'. This should be revised with `example_answer.present?` and `guidance.present?`"}
{"pred": "\"github.com/google/go-cmp/cmp\"", "gold": "why not context from stdlib?"}
{"pred": "Why do we need to change the flavor?", "gold": "Just saw this and wasn't able to hold myself from renaming :-)."}
{"pred": "`expect(core.plugins[Object.keys(core.plugins)[0]].length).toEqual(0)`", "gold": "Can we keep the other assertion too? I think it's helpful to ensure that the uninstall function was called too"}
{"pred": "Should this be `RSpec.warn_with`?", "gold": "`warn_with` prefixes the message with `WARNING:`, right? So this will put `WARNING:` twice. It would be good to verify all the warnings look good after this change, given how easy it is to make a simple mistake like this :(."}
{"pred": "Why do we need this?", "gold": "FYI In the message queue I use the term \"stamp\" to refer to the time-like mark associated with each message. It's opaque to the queue/pool and should make no difference if the stamps and age limit were converted to seconds. So this could then become `Stamper` with `CurrentStamp()` method, no reference to \"blocks\" or height etc. The wrapper struct could be `StampedMessage. The interpretation as block height is deferred to the user/constructor that hooks things up, the \"business logic\". This is just an observation, take or ignore as you wish."}
{"pred": "Why do we need to check if the bucket exists?", "gold": "Can we remove the `TODO` statement here? (as this is actually fixed in this PR)"}
{"pred": "Can we rename this to `mDisplayPreference`?", "gold": "m prefix no longer in code style"}
{"pred": "Why do we need this function? Can't we just call kvb.store.Filter directly?", "gold": "need to filter the entities in buffer as well"}
{"pred": "private static final long serialVersionUID = 1L;", "gold": "Please add spaces before and after the equals sign"}
{"pred": "Please remove this line.", "gold": "This file could also be cleaned up/deleted. But lets do this separately after ensuring all the event logging has been ported to the current logmxevent_traf.cpp file completely."}
{"pred": "Line is too long. [81/80]", "gold": ":thinking:, the line number here is the line of the example (`example.location`), that's probably why I finally chose to display the example title because it's what can be found on this line, and saying that the error is from there is confusing. But presenting the actual failures is indeed better, so maybe we can get the failure actual line number from the exception backtrace and then output two distinct lines for failures like this one?"}
{"pred": "`create_no_window` -> `no_window`", "gold": "We shouldn't add this as a new `kwarg` here. This should all be done on the options class"}
{"pred": "Should this be `|| false`?", "gold": "Should this be `OS_VOLUME_SUPPORT` to match the symbol key names?"}
{"pred": "Why do we need this?", "gold": "In C, file scope variables are already initialized to 0 so the \"= NULL\" is redundant. Not a big deal."}
{"pred": "Why not use `axe.commons.dom.getRootNode(node)` here?", "gold": "on line 40, the `relevantNode` can change and therefore the `doc` might change too for the lookup on line 43. I think this code should be moved to where the `doc` is actually being used"}
{"pred": "Why this change?", "gold": "nit: just to be similar to others, can you change to interpolation?"}
{"pred": "nit: space after `//`", "gold": "Would this make more sense as an option on an Issuer resource (specifically on the CA issuer) rather than as a flag? It's not ideal that we have a flag that _looks_ like it could be 'global' but is actually not IMO. Also, if Istio is reading the CSR object, is it possible for it to read the CA from the CSR itself too and append the two instead? Not sure if we ever decided whether to use annotations for this purpose @JoshVanL?"}
{"pred": "I don't think this is used anywhere.", "gold": "Because this acts as a coordination point between client and server, it should go in core.py instead of const.py (so eventually the server could use it to guarantee that it delivers dates in the expected format)."}
{"pred": "I don't think we should return an error here. If the object doesn't exist, we should create it.", "gold": "expected statement, found 'else' (and 1 more errors)"}
{"pred": "I don't think we want to panic here.", "gold": "IMO this doesn't need to be in the `kbfs` repo. And I don't like setting the byte. We can always compare with the randomly generated `TlfID`."}
{"pred": "Why do we need these constants? They are only used in one place.", "gold": "What's the difference from ModuleName in `pkg/apis/meta/v1alpha1/types.go`?"}
{"pred": "Why is this needed?", "gold": "We shouldn't be changing this task as we are trying to break our dependency on it and switch to using the shipped version."}
{"pred": "Shouldn't this be `cci->num_regs_skip >= 2`?", "gold": "Shouldn't we have a low bar for generating out-of-line context switch, i.e., if we need save more than n (3?) simd or m (4) gprs we should go out-of-line? And it should be || instead &&. It seems the bar is still very high after this change."}
{"pred": "Why do we need this?", "gold": "Should the API have a dependency on the SDK?"}
{"pred": "Why are we skipping this test?", "gold": "Is this a sometimes leaky test?"}
{"pred": "Why is this needed?", "gold": "It should be possible to create a test case that enter the loop. That would be a good enough test case for me. Have a look at the extern type inference test cases that already exist. Since you can just pick the type variables the extern type use, you should be able to create a conflict that requires this loop to fix."}
{"pred": "Shouldn't this be `wxLang=None`?", "gold": "It might make sense to log this."}
{"pred": "Style/RedundantSelf: Redundant self detected.", "gold": "Line is too long. [84/80]"}
{"pred": "KEY = \"goog:chromeOptions\"", "gold": "nice touch since Google likes to change things every now and then."}
{"pred": "I don't think you need the `to_sym` here.", "gold": "Thank you this is so much nicer than the old `Rails.configuration.branding['blah']['blah']['blah']` :)"}
{"pred": "`BACKEND_SERVICE = 'backend'`", "gold": "nit: Would you mind alpha-sorting this?"}
{"pred": "nit: \"cannot read a delete manifest with a ManifestReader\" -> \"cannot read a delete manifest with a ManifestReader\"", "gold": "For my understanding, the DATA manifest & DELETE manifest could share the same read / write path so I think we could use the common reader+writer. Is there any other reason that we need to make them separate paths ?"}
{"pred": "I think this should be `contact_us_url || contact_us_url`", "gold": "that change should be sufficient for avoiding the override of contact_us_url helper. The one defined at the .yml it is within a hash so no problem should arise."}
{"pred": "Shouldn't this be \"weiteres Element\"?", "gold": "We actually had a discussion about this exactly in #3470, some languages seem to go for one, some for the other  "}
{"pred": "public abstract List<GrpcStreamingDetailView> grpcStreamingDescriptors();", "gold": "Is PHP the first dynamic MVVM language with grpc streaming support?"}
{"pred": "Why is this needed?", "gold": "the `if` isn't necessary here; it's safe to call `delete` on `nullptr`"}
{"pred": "Why is this needed?", "gold": "Change if the method's name finally changes to `clear_history` as proposed elsewhere"}
{"pred": "I don't think this import is necessary.", "gold": "can this one also be moved to the top of the file?"}
{"pred": "nit: `GroupMembers` -> `GroupMembers`", "gold": "So if I understand this correctly the externalEntities should be computed and stored in GroupMember, while current code usage of GroupMemberPod will be migrated to GroupMember later?"}
{"pred": "Why do we need the `.name`?", "gold": "Don't we have tests to change after this breaking change? probably we're not using hard coded strings in our tests when we create a `Span`?"}
{"pred": "This should be `GOOGLE_CLOUD_APPLICATION_CREDENTIALS`", "gold": "will this fail if the env variable doesn't exist? Is this the preferred behaviour?"}
{"pred": "This should be `dtype=realDType`.", "gold": "bad line wrap"}
{"pred": "`sizeof (bulk_pull_blocks_mode) + sizeof (uint32_t)`", "gold": "What does the `8` here represent? Can you give it a name?"}
{"pred": "This file is missing a license header.", "gold": "`MPRester(os.environ[\"MP_API_KEY\"])` can be left simply as `MPRester()` and it will pick up the API key from the environment. What is the purpose of this file otherwise? Is it better suited for `dev_scripts`, or a test?"}
{"pred": "Use the new Ruby 1.9 hash syntax.", "gold": "Looks like there may be more changes to this file than intended?"}
{"pred": "Why is this change needed?", "gold": "when message type is not expected, contine to next loop instead of return to finish infinite loop"}
{"pred": "File is not `goimports`-ed (from `goimports`)", "gold": "This change was not really intended but made by the linter of VS Code. And looking at other packages this looks like a best practise to place interal packages on the top and gh imports afterwards."}
{"pred": "Why do we need to allow changes to instanceID?", "gold": "instanceID should stay the same for a AWSMachine?"}
{"pred": "Why is this needed?", "gold": "Since this is a dict don't you want `False` or do we clean that up elsewhere?"}
{"pred": "HOST = 'localhost'", "gold": "what's the reason you had to add the `host` argument to all `get_work` calls?"}
{"pred": "Why do we need this?", "gold": "This will never be a dataset so we can simplify the code here"}
{"pred": "Why do we need this constructor?", "gold": "This should be moved into the PrivacyBlockProcessor instead of adding the constructor here."}
{"pred": "`insightstore` is unused (from `deadcode`)", "gold": "nit: Remove \"insightfilestore\". I think \"insightstore\" is good enough and as I see we are using that name at other places too."}
{"pred": "I think this should be `@round_count`", "gold": "It looks like you've removed `bisect_round_finished` but kept `bisect_round_started`. Seems a little odd that they aren't paired. Not sure if there's anything to do about that though..."}
{"pred": "Why is this needed?", "gold": "I'm not sure how to fix the lint and mypy warnings on this line. I could just ignore them, but I feel like the linter should know this exists."}
{"pred": "Why this change?", "gold": "why remove `Symbol`?"}
{"pred": "`\u00a3\u00a2\u00a5\u00a7` -> `\u00a3\u00a2\u00a5\u00a7`", "gold": "Why are currency signs considered punctuation? They technically fall under the BMP range for Currency Symbols `\\u20A0-\\u20CF` (covered in `getUnicodeNonBmpRegExp`, which is itself a misnomer)"}
{"pred": "Maintainer email should be updated.", "gold": "You have forgotten a coma `,`"}
{"pred": "Why not `osp.basename(img_meta['filename'])`?", "gold": "For different datasets, we may want to save the images differently. Sometimes the datasets are categorized into several subfolders, and we want to keep it when saving visualization results, and sometimes we just want to save all images in `out_dir`. An argument may be added to control the behavior."}
{"pred": "`bb.get(ia) == '\\0'` is equivalent to `bb.get(ia) == '\\0'`.", "gold": "if `other` could have a guaranteed `0` byte in it, this whole `if` could be removed, and above you could just add `|| c2 == '\\0'` to get the same effect?"}
{"pred": "nit: `CachingCatalog(catalog, true)` -> `CachingCatalog(catalog, caseSensitive)`.", "gold": "nit: can this be a primitive value?"}
{"pred": "Shouldn't this be `strings.TrimSuffix(u.Path, \"/\")`?", "gold": "This maybe not what we want. If `rewrite` occurred before, `r.URL.Path` contains the result and we should use it. Otherwise `rewrite` middleware will disfunction when combining with `browser`."}
{"pred": "Why this change?", "gold": "Why change this?"}
{"pred": "Why this change?", "gold": "  _nitpick_ Isn't it now actually NotLogFakeHttpExceptions**Error**Listener ?"}
{"pred": ">resourceDefinition.ResourceType = resourceType; [](start = 12, length = 36) why is this needed?", "gold": "Why not just look for the \"type\" property instead of creating a ResourceType property?"}
{"pred": "Why do we need ChainID here?", "gold": "should use `bc.config.Blockchain.ChainID`"}
{"pred": "Shouldn't this be `ZipkinElasticsearchStorage.Builder`?", "gold": "this doesn't need to know about NativeClient"}
{"pred": "Shouldn't this be `resource_data` instead of `resource_name`?", "gold": "I know we discussed if we should add in the resource_name to the hash, and I actually don't think it's required. The violation hash was recently updated (not released) to include the violated rule, so when the next release goes out, user's findings will get updated. The resource name doesn't hurt to have here, but not required."}
{"pred": "`surface->texture->width_from_buffer = surface->texture->width / scale`", "gold": "The variable name is also misleading imo. The width from the buffer comes from `wl_shm_buffer_get_width` (or a similar EGL thing), which is what gets encoded into `surface->texture->width`."}
{"pred": "Should this be `self.data['artist_msid']`?", "gold": "Why are you using these tags to carry these msids?"}
{"pred": "Why the +1?", "gold": "flb_strdup() should do the work here. note: use Fluent Bit memory wrappers"}
{"pred": "Why do we need this file?", "gold": "This line should be separated from the package declaration by one line as it is not the package description."}
{"pred": "Why this change?", "gold": "shadow: declaration of \"err\" shadows declaration at line 410 (from `govet`)"}
{"pred": "Why is this removed?", "gold": "Maybe next time better to make separate PR?"}
{"pred": "Why do we need this check?", "gold": "line 316 also handles this case, need to simplify the logic."}
{"pred": "Should this be `gcsblob.OpenBucket: client is required`?", "gold": "We used to have a simple check for bucket and object names, we then decided to remove it and rely on the backend service to check for the name. Is there any reason to add an empty name check now?"}
{"pred": "`std::chrono::steady_clock::now() - std::chrono::steady_clock::now()`?", "gold": "Line too long"}
{"pred": "Why did you add these?", "gold": "This isn't aligned though."}
{"pred": "I don't think we need the \\ at the end of the line.", "gold": "it is mean -> it means PAAHead does not support test-time augmentation."}
{"pred": "Why do we need this import?", "gold": "@lnielsen-cern thanks. I missed it :("}
{"pred": "Should this be renamed to `content-drilldown`?", "gold": "@tofumatt, has it been changed intentionally? It doesn't seem to be required in IB, plus we haven't had `content-drilldown` before... If it has been changed intentionally, then should we update the `AnalyticsDashboardWidget` component to be use `content-drilldown` instead of `content-pages` as well?"}
{"pred": "Why is this import needed?", "gold": "nit: don't think an extra line is needed here; as retrying is an installed library and should be grouped with the rest of the installed library."}
{"pred": "I'm not sure if this is the right place to put this. I think it should be in `pkg/apis/prometheus/v1alpha1/types.go`", "gold": "This should be a bool"}
{"pred": "nit: `swift_typebase` -> `swift_type`", "gold": "`if (llvm::dyn_cast_or_null<swift::WeakStorageType>(GetSwiftType(compiler_type).getPointer())` ?"}
{"pred": "nit: `canaryConfigMaps` -> `duplicateConfigMaps`", "gold": "The `generateVariantWorkloadManifests` function below relies on the config manifests specified in Git, but it was passed with the newly created canary's manifests where their name was updated."}
{"pred": "should be reverted", "gold": "are this docs neccesary ?"}
{"pred": "Why do we need this change?", "gold": "Can you please revert changes to files in the `thoughtworks` package? This is legacy code and we will eventually phase out RC."}
{"pred": "Why do we need this?", "gold": "This change suppose to resolve issue #2968. `loss_weight` should be of length 2, the second entry is ignored."}
{"pred": "nit: `strings.HasPrefix(base, prefix)` is equivalent to `strings.HasPrefix(base, prefix)`.", "gold": "Is there an easy way to check for conflict suffix to avoid false positives here?"}
{"pred": "Should this be `@context.get_task(opts['task'], params)`?", "gold": "`apply_prep.run_task` also seems like it can just use `@context.run_task`"}
{"pred": "Why do we need this?", "gold": "do you have any idea on how to fix it?"}
{"pred": "Why do we need this?", "gold": "You don't need to fix this (you've done so many iterations). But for next time, you can make this into a docstring so it'll have a nicer descriptive name when the tests are running."}
{"pred": "I don't think this should be a method on the ENIAttachment since it's only used in one place.", "gold": "When does 'expiresAt' change? Do you need this?"}
{"pred": "`for (const Outfit& outfit : outfits)`", "gold": "There are enums for genders + `PLAYERSEX_LAST`."}
{"pred": "Why do we need this change?", "gold": "Should this use the constants as well? Or intentionally covering the fact that the constants may change"}
{"pred": "Why not just `return len(self.best)`?", "gold": "The case of a negative size (= keep all elements) was not handled in this function."}
{"pred": "Why is this removed?", "gold": "I think we should keep this dynamic config knob for operations purpose."}
{"pred": "Why was this removed?", "gold": "Was this intentional? Perhaps this could be replaced with another way to check the offsets?"}
{"pred": "Why do we need this?", "gold": "the buckets are created via the stackset, customers don't need to provide them"}
{"pred": "Space inside { missing.<br>Space inside } missing.", "gold": "This doesn't have the same behavior as before. Maybe you want `reverse_merge` (and it either just works or we implement it on `Blacklight::Solr::Request`)"}
{"pred": "Why do we need to export PATH here?", "gold": "This should be ` /$(ghc_find #{config[:ghc]})/ ` instead of ` /#{ghc_version}/ `, I think."}
{"pred": "I don't think we should change this.", "gold": "We should deprecate this at some point."}
{"pred": "`center_sampling` and `center_sample_radius` don't seem to be used.", "gold": "Move these two arguments before `loss_cls`."}
{"pred": "I don't think you need the `else` here, since the `if` is doing the same thing.", "gold": "[Super NIT]: i := serialNumber if i == 0 { i = mathrand.Int63n(...) }"}
{"pred": ">t [](start = 58, length = 1) typo #Resolved", "gold": "-f short form here collided with --force. :)"}
{"pred": "Why was this removed?", "gold": "I think it is better to describe in the release note that `rerender()` was removed."}
{"pred": "Why is this pragma needed?", "gold": "We could also test this easily with `runpy.run_module`, what do you think?"}
{"pred": "Shouldn't this be `v.Type()` instead of `val.Type()`?", "gold": "Is it OK to fall through if it's not assignable? I was kind of surprised when the tests passed. Maybe one of the options below ends up working? For the new tests, this panics because `**not assignable uuid.UUID to []uint8**`. `uuid.UUID` is an array, not a slice."}
{"pred": "`blockpAPI` -> `retrievalAPI`", "gold": "I know this is after the fact but imo blockAPI should be blockMiningAPI."}
{"pred": "Shouldn't this be `[^a-zA-Z0-9_]+`?", "gold": "it's just a pattern as it was. SystemAttributeCode should have it's own definition and validate by it"}
{"pred": "Why do we need this header?", "gold": "Similar to the code block when we use prefix, maybe we can unify them to base?"}
{"pred": "Why do we ignore the Duration property even user define it?", "gold": "I think `Duration` is useful for this action and we shouldn't ignore it."}
{"pred": "Shouldn't this be `err = s.err`?", "gold": "Everything below here can be replaced with `return s.err, len(p) - len(s.dataForWriting)`."}
{"pred": "Why do we need this?", "gold": "Again, we can also guard `g_host_hip_lock_arrays.atomic`, can't we?"}
{"pred": "Shouldn't it be `false` by default?", "gold": "Variable name should start from lowercase latter"}
{"pred": "Why was this changed?", "gold": "Why has this timeout doubled?"}
{"pred": "Why change this?", "gold": "Should IptablesPostWriteCheckIntervalSecs be set back to its previous smaller value, if use of the iptables lock is disabled?"}
{"pred": "I think this should be `if js_elem == \"selected\":`", "gold": "You're missing a `return` here, but I'll add it :smile:"}
{"pred": "Shouldn't this be gles2_get_texture_in_context()?", "gold": "Can you try adding back this assertion? I'd like to assert that the texture has been created in the same context as the renderer."}
{"pred": "Why do we need to decode here?", "gold": "This won't work with Python 3 because it will already be a string. In that case we need to use `decode_header` from utils."}
{"pred": "Why do we need this?", "gold": "Why is the respond_to check here?"}
{"pred": "Why did you remove `$chars[$i]`?", "gold": "@orklah are you sure it's the same as `$chars[$i]`? It looks like `$i` is changed above, after `$char` assignment."}
{"pred": "nit: `nullptr` -> `nullptr`", "gold": "I have a question? How do I construct a indexManager for testcase?"}
{"pred": "Shouldn't this be `return -1;`?", "gold": "These checks aren't needed. See pluginmgr.c : opae_plugin_mgr_load_dflt_plugins( )."}
{"pred": "Why did you remove the empty string check?", "gold": "Please take a care about prefixing."}
{"pred": "Why do we need this method? Can't we just use `createAccount`?", "gold": "this line doesn't match what the rest says"}
{"pred": "What's the reason for this change?", "gold": "Since it's not working for linux, maybe leave the !linux in there as well?"}
{"pred": "Why is this needed?", "gold": "Should we remove the key-value pair entirely? Same for workflows in general. We have a \"sourceExists\" method that checks if a key is there if I remember correctly."}
{"pred": "`getModificationDateFieldName()` can be `null`.", "gold": "Unrelated bug fix"}
{"pred": ":ok: This change will be queued for retranslation. We'll use the existing translations in the meantime.", "gold": "We probably want to let the translation library handle the string replacement for these as well."}
{"pred": "Why is this being removed?", "gold": "should combine these 2 list (list_gossip and list_db) into just one list command, and show the discrepancy between the 2 if any."}
{"pred": "Extra empty line detected at class body end.", "gold": "What do you think about prefixing the Policy method names with `can_`?"}
{"pred": "This should be `AWS_CREDENTIAL_RESPONSE_EXPIRATION`.", "gold": "Based on the docs, credential process can return a key `SessionToken`"}
{"pred": "Why do we need to set these to 0?", "gold": "I think this if should be removed (see issue)"}
{"pred": "import (", "gold": "I would avoid importing `felix/ipsets` package because this package is the windows equivalent and should be at the same level of `felix/ipsets`. We could add linux specific dependencies into `felix/ipsets` later and it will break Windows build."}
{"pred": "`from typing import List, Tuple`", "gold": "nitpick: Please move this down to the other imports, as it's a Python stdlib import."}
{"pred": "\"hereafter\" should be \"here\"", "gold": "\"for getting started guides\" reads a bit weird, like it's missing punctuation. Maybe just \"for a tutorial\"?"}
{"pred": "Shouldn't this be `use_captcha`?", "gold": "This looks like a dead parameter -- maybe a copy and paste error. If it's truly unused, maybe you can open a separate PR to simply delete it, and then it's one less detail to worry about here."}
{"pred": "Why do we need to change this?", "gold": "Nit: Should we add support for `int` and `uint` in the `values.New()` function? That would allow us to to handle all of these types in one case. Maybe there's a good reason why we don't do that already, but I'm not sure what it is."}
{"pred": "Why remove the `final`?", "gold": "if you are not dealing with cache now, please revert these changes. On their own they make little sense"}
{"pred": "Why this change?", "gold": "Wearing my extra-douche-bag hat I would say not spaces on a blank line. Maybe at some point we could have some automated process remove these things. For now I would not bother changing it."}
{"pred": "Why do we need this class?", "gold": "I think it would be better to use an `ItemUpdatedEvent` like for the \"prefer streaming\" preference. We already have a ton of events that need to be handled in all list fragments that just do the same everywhere. I think we could even remove some of the existing events in the future."}
{"pred": "Shouldn't this be `slug='#{product[\"name\"].parameterize}'`", "gold": "I think we have to manually write a down for this migration."}
{"pred": "`SPARK_INDEX_NAME_PATTERN` -> `SPARK_INDEX_NAME_FORMAT`", "gold": "I don't think we still need this check, but I'd leave it as an assertion for now."}
{"pred": "Extra empty line detected at class body end.", "gold": "Since this may be the case, wondering if we should call the param `updated_at_i` or something so that we don't run into a problem distinguishing them down the road?"}
{"pred": "Shouldn't this be `Path.Combine(workingDir, appExe)`?", "gold": "wondering why we need to join the paths here; seems evt.commandLine only takes whatever appExe is"}
{"pred": "Why do we need to delete whitespace here?", "gold": "1.not format code 2.failed but still continue? 3.\"UTF-8\" can changed to java.nio.charset.StandardCharsets.UTF_8.name()"}
{"pred": "`brain_dataclasses` -> `dataclasses`", "gold": "I'm wondering if we should add this to a `utils` module in `astroid`. Porting the util to `pylint` doesn't make sense as we would need to duplicate the globals that are being used in the function, but importing from `brain` also feels weird. @Pierre-Sassoulas Do you have an opinion?"}
{"pred": "Why do we need this?", "gold": "This seems different than what we do for corrupted request headers. I would like to determine the correct behavior and consolidate this logic."}
{"pred": "Should this be backend.get('resourceGroup')?", "gold": "Please make the change in the CAI inventory, rather than changing the scanner."}
{"pred": "Why does this need to be abstract?", "gold": "adding this `abstract` is a breaking API change. Even though I agree it makes perfect sense to have it, we can't break this API until PMD 7.0.0. We should revert this particular change. We could make a reminder ticket like we did with #463 for 6.0.0"}
{"pred": "Shouldn't this be `Purchaseable Plan`?", "gold": "This is following the existing convention, but I'm not sure the convention is a good one. I think it would be better to have one shared example group: - It means we don't need to add new example groups twice every time. - If the shared example group looks large, that makes it more obvious that our team models have too much shared behavior. I don't want to do anything about this right now (I'm pretty sure I can wipe out this shared example group when I change team plans), but it's good to keep in mind."}
{"pred": "If the address is IPv4 we don't check for a network limit, since its address space isn't big as IPv6 / 64.", "gold": "I do not think we need to do a source code change to handle this. We could set the subnetwork to default to /32 (/128 for ipv6 ipv4-mapped)"}
{"pred": "\"Remove one cookie from remote\"", "gold": "It looks good overall! The only issue I have is that the description string is now duplicated twice right? Once in the struct and once in the parameter string? Maybe let's pass the struct to the command so that `ostree_option_context_parse` can set it as the summary? Similar to what we do in rpm-ostree."}
{"pred": "Does this need to be public?", "gold": "This states very clearly that this is a derivative of Chrome and not Chromium. Do we need to extract an abstract `ChromiumCommandExecutor` and have both Edge and Chrome derive from that?"}
{"pred": "Shouldn't this be `type1.getType() == java.lang.Enum.class`?", "gold": "it seems to me, the issue lies on `isEnum()` itself, returning false for something that is an enum. I'd rather change it there than here."}
{"pred": "Why is this a classmethod?", "gold": "Please use `{}` instead of `dict()`"}
{"pred": "Why do we need `useEffect` here?", "gold": "I have concerns about using this in more places before #3278 - I'll take a look at that again shortly."}
{"pred": "Shouldn't this be `1`?", "gold": "new field needs to be asserted"}
{"pred": "Why do we need this?", "gold": "when send log failed, why update the last sent log id?"}
{"pred": "Why did you change this?", "gold": "what was the problem with the previous order? `prepend` comes conceptually before `append`, i.e. `insert before` should be before `insert after`, I think"}
{"pred": "I think this should be a `map[string]interface{}`", "gold": "Why is this necessary? Could you provide some context?"}
{"pred": "Why is this needed?", "gold": "Is there a recommended quote style for attributes? I see single and double here, double further down."}
{"pred": "Why do we need to wait for the run loop to be closed?", "gold": "Please use an atomic bool."}
{"pred": "Why do we need this?", "gold": "Consider naming this class `SpanExtensions` to follow C# conventions."}
{"pred": "Why was this removed?", "gold": "FYI @lucaspimentel and @colin-higgins since you have already approved, I wanted to point out this required change. By fixing `FrameworkDescription` to use the correct logger, it created a cycle between these two static constructors, so I'm removing this log line and delaying it to when it's actually constructed later in the Tracer. Let me know if you find that acceptable or have any suggestions."}
{"pred": "I'm not sure if this is the right place for this. I think it should be under `/blimper/`", "gold": "Ah, so we are going to need to update node/host files for this to work?"}
{"pred": "Why did you change this to `finest`?", "gold": "This code is new and not tested well. While we may drop the log level before we ship 4.0, right now this is extremely helpful to users."}
{"pred": "Style/RedundantSelf: Redundant self detected.", "gold": "used named path (`proposals_path`) instead?"}
{"pred": "Shouldn't this be `item_view.is_suppressed = true`?", "gold": "Am I misreading something, or is there a mismatched parenthesis here? Please let me know whether or not this is cause for concern -- just wanted to be totally sure before merging, since I can't test this from here. Thanks!"}
{"pred": "I don't think we need to return an error here. We can just return `transport.UpdateSpanWithErr(span, yarpcerrors.CodeInternal)`", "gold": "Might we want a hook to allow emitting metrics or logs in the case of a permitted empty service header response (or similar UpdateSpanWithErr on empty service header in response if strict enforcement is desired by the caller)?"}
{"pred": "Why do we need this?", "gold": "if using dict.get, this could just be `kwargs.get('protocol', 'https')`"}
{"pred": "`interfaze` is not used.", "gold": "Add docs to the new methods here"}
{"pred": "Why do we need this?", "gold": "what does it mean enabled?"}
{"pred": "Why this change?", "gold": "Getting an error when calling with db.execSQL (in sqlcipher 4.3.0, pragma returns ok)."}
{"pred": "Shouldn't this be `ctxUser.DisplayName()`?", "gold": "Maybe we could remove `\" \" + ctx.Tr(\"dashboard\")` completely?"}
{"pred": "I don't think this should be removed.", "gold": "Simple Storage **Service**"}
{"pred": "Why do we need this?", "gold": "Let's add some assertions here to ensure we don't panic. Length of results. Conditionally cast second result to error."}
{"pred": "Why 30 seconds?", "gold": "Where did we take this default from?"}
{"pred": "Why do we need both `startDate` and `endDate`?", "gold": "Let's move these down to be after all required arguments rather than in between."}
{"pred": ">_sharedStringMap.Clear(); [](start = 16, length = 22) I think this is not needed.", "gold": "Should we just null the Map and let the GC handle the memory? Clearing just removes items, but not capacity, so this would leave some memory on the table."}
{"pred": "Remove this line?", "gold": "did you mean to delete this line?"}
{"pred": "This should be removed.", "gold": "Should we use logger instead?"}
{"pred": "Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "I think it would be preferred to do `expect(helper).to be_analytics`"}
{"pred": "I think this should be `pd.Index`", "gold": "Actually, I think it's okay to just change to `if isinstance(key, (str)) or is_list_like(key):` and `key = list(key) if is_list_like(key) else key` for simplicity for now."}
{"pred": "Why is this change needed?", "gold": "If there any other tests, I would make it optional there also."}
{"pred": "match '/my-accounts' => 'high_voltage/pages#show', as: :my_accounts", "gold": "This can be removed too, right?"}
{"pred": "This should be `account.getTransportUri(0)`", "gold": "If you're going to allow people to specify multiple SMTP servers, you should also properly export/import them."}
{"pred": "Should these be `runtime.dotnet.aspnetcore.requests.queue_length`?", "gold": "nit: Can we prefix these variables with `AspNetCore`?"}
{"pred": "I think this should be `plan convert yaml::conversion -m #{modulepath}`", "gold": "Can this also include a quick test for transpiling by name?"}
{"pred": "Why do we need to remove this?", "gold": "This TODO can be removed"}
{"pred": "`tabAccessibilityIdentifier` -> `tabAccessibilityIdentifier`", "gold": "can we make tabAccessibilityIdentifier = null as default?"}
{"pred": "Why are we ignoring the error here?", "gold": "Should we print this error?"}
{"pred": "why not `int(multi_scores.size(1))`?", "gold": "For which reason do we need to convert this to int here?"}
{"pred": "Shouldn't this be `return errors.New(\"freezer not supported\")`?", "gold": "FWIW, wondering if the error is interesting here (I actually arrived at this code initially to change `supportsFreezer()` to return a `bool`"}
{"pred": "Why are we removing this?", "gold": "Does this still need to be a partial? is the intention down the line to move back towards a conditionally different title?"}
{"pred": "Why did you remove PublicLoadBalancer?", "gold": "seems like `RegistryURL` is missing? Same for a few other places that create `archer.Environment` below."}
{"pred": "Why do we need these imports?", "gold": "Are these imports needed?"}
{"pred": "Why do we need to ignore fallback inputs?", "gold": "I think you can remove the `(isIE11 ? it.skip : it)(` above, if you're going to skip the test this way."}
{"pred": "Why do we need to reverse bytes here?", "gold": "IMO we should instead fix the above call to do `long actualChecksumIn = Long.reverseBytes(in.readLong());` to get the actual checksum value? This way the below error message would also be correct?"}
{"pred": "nit: typo `superseded`", "gold": "I think we also need something similar for `rebuild-index`?"}
{"pred": "Why do we need this port?", "gold": "I think convention is snake case for import naming?"}
{"pred": "Why do we need to add columns for common handle column?", "gold": "i think haspk is false?"}
{"pred": "This should be `plz-out/surefire-reports`", "gold": "you should add this to the cover command too (but let's have a more general convo about whether it's a flag or config option)"}
{"pred": "Why do we need a new client here?", "gold": "instead of passing in pointer to empty struct, we should make it optional and support passing nil and use default cfg if it is nil."}
{"pred": "why do we need to change this?", "gold": "A fair bit faster, although still not great, hence also adding a hashkey."}
{"pred": "I think this should be `<%= trail.name %> remaining`", "gold": "If we're going to leave this in here, how about we at least pull it into partial?"}
{"pred": "Why was this changed?", "gold": "This `context` is used correctly, there is nothing left TO DO."}
{"pred": "Shouldn't this be `docs.length ? docs[0].n : 0`?", "gold": "If `docs` is an empty array there will be an error"}
{"pred": "Why do we need to check for `quic:`?", "gold": "Is it really necessary to have the user specify this, or can the reverse proxy infer QUIC from the upstream's Alt-Svc headers?"}
{"pred": "Why is this needed?", "gold": "just remove the entire variable."}
{"pred": "Should this be `File.expand_path(File.expand_path(moduledir))`?", "gold": "Maybe we should put that in the option description?"}
{"pred": "Why do we need this change?", "gold": "Why do we need to make this optional? Isn't the idea of the builder that if you don't need this value you just don't call the `keyFilePath ` method?"}
{"pred": "nit: `forTable(Table table, MetricsConfig metricsConfig)`", "gold": "Shall we do the same for ORC and Avro?"}
{"pred": "Why is this needed?", "gold": "Should be a space between line"}
{"pred": "nit: typo in `lenght`", "gold": "if not behind interface then equally we can use SecureRandom.GetBytes directly, otherwise let us push it behind ISecureRandom so we can test with this class wherever used"}
{"pred": "Shouldn't this be `video_tutorial_tile`?", "gold": "Probably will undo this change for now, as I'm just targeting Weekly Iteration in this PR."}
{"pred": "Why is this removed?", "gold": "Unused parameter warning? How comes we did not catch that before? In any case please open another PR for this."}
{"pred": "`ioa_thr` -> `ioa_thr`", "gold": "I recommend move all openimage related logic to a new function"}
{"pred": "nit: `// indicates that this is an externally passed, fully created cgroup`", "gold": "We shouldn't have a bool for this. If there is a path passed, then we use it. Resource may or may not be empty."}
{"pred": "Use 1 space before `%>` instead of 0 space.", "gold": "I like how you used the count on the translate call to handle this."}
{"pred": "Shouldn't this be `prepareDismaxQueryString`?", "gold": "Do we need to do this from the outside, or is there a spot in the handler code where we can do this automatically? (I haven't studied it closely yet... just wondering if you've already thought it through or if it's worth taking a closer look)."}
{"pred": "Missing license header.", "gold": "[Checkstyle] INFO: Using the '._' form of import should be avoided - java.util._."}
{"pred": "Why do we need these settings?", "gold": "So, why everything is in memory but the permission backend?"}
{"pred": "`copiedAllowedExtensions` -> `copyAllowedExtensions`", "gold": "Are you sure it should be null and not an empty List?"}
{"pred": "> Frameworks [](start = 24, length = 6) Frameworks section #Resolved", "gold": "Unfortunately I think the assumption of \"empty\" means the default dependency section is not correct. For a project.json file the default dependencies section is a shared section between all the different target frameworks and our TargetGroup being empty may map to many different target frameworks so they aren't really equated."}
{"pred": "Why do we need this change?", "gold": "This test was verifying the wrong thing."}
{"pred": "should this be `brave`?", "gold": "pls pr a name change fro muon here too separately."}
{"pred": "Why do we need to create the environment here?", "gold": "nit: we can use `defer opts.spinner.Stop(\"Error!\")` after l.180 to make it slightly neater"}
{"pred": "is_allocated_mem -> allocated_mem", "gold": "This is declared in the wrong block"}
{"pred": "I don't think this is the right place to do this. We should be able to get the sync-msg from beehive.", "gold": "In fact it would be useful for debug, i prefer combine them into one debug level log."}
{"pred": "Shouldn't this be `Fatal crash per session`?", "gold": "We would need to localize them eventually too, just FYI"}
{"pred": "Why is this change needed?", "gold": "It looks like the proto code needs to change the function name from set_name to set_type to be consistent."}
{"pred": "Why do we need this file?", "gold": "I think we can avoid using this pattern for this use case."}
{"pred": "This should be `#ifdef __ANDROID__`", "gold": "Could you please change this to `#ifndef __linux__`? That's when we use our own implementation instead of `posix_spawnp`."}
{"pred": "I think it would be better to use `slots.stream().filter(slot -> slot.getSession() != null).count() < maxSessionCount`", "gold": "Nit: put the `&&` on the previous line so that a reader knows that there's more to the statement at a casual glance."}
{"pred": "I don't think this should be exported.", "gold": "Technically the \"right\" variables to use would be the ones in `libgit/autogit_node_wrappers.go\", which define how the tlf types map to subdirs for autogit specifically. (They would have to be exported.) But this is fine too I guess, just a little dirtier."}
{"pred": "Layout/EmptyLinesAroundMethodBody: Extra empty line detected at method body beginning.", "gold": "Should there be a template or something associated with this email? Right now it's identical to `notification_for_approver`"}
{"pred": "Should be `$em->getRepository(SliderItem::class)`", "gold": "i hope there is some extension in phpstan for this"}
{"pred": "Shouldn't this be `return 0;`?", "gold": "We don't store empty dictionary entries anymore: they bring no benefits, only trouble."}
{"pred": "nit: `const Type& type`", "gold": "Optional: This function is C++ specific and could be declared as `static`."}
{"pred": "Why do we need tagKey and tagValue? Can't we just use members?", "gold": "we can't remove functions as that would introduce backward compatibility issues in our java client. So we should also have a function with the original arguments: ` public Roles getRoles(String domainName, Boolean members) { return getRoles(domainName, members, null, null); } ` For the Go client we don't have a wrapper so no option but to update your client code as necessary, but for java we have the wrapper thus we always maintain backward compatibility"}
{"pred": "Should this be `RSpec.deprecation_io.warn`?", "gold": "I'd recommend keeping this in `warn_deprecation` and not adding an override of `warn`."}
{"pred": "Why do we need this?", "gold": "I think we should use a `blitz` bin instead"}
{"pred": "I think this should be `dataset.dimensions('key', label='name')`", "gold": "Why not make the ``derived_vdims`` flag (or similar, ``validate_vdims`` maybe?) an explicit argument to ``validate``?"}
{"pred": "Why do we need to create a snapshot for a Pure FA volume?", "gold": "was it not possible to do this at the filter or porx driver layer? We typically try to avoid driver-specific things in the SDK layer"}
{"pred": "Why do we need this file?", "gold": "please update the year. it can be setup in intellij template."}
{"pred": "Shouldn't this be `log.trace(message, arg1);`?", "gold": "what's the use-case for this?"}
{"pred": "`as_index must be a boolean; however, got [%s]`", "gold": "nit: `as_index must be an boolean` -> `as_index must be a boolean`"}
{"pred": "Why do we need this method?", "gold": "What is the goal of that method ? And what are `$currentVersion` and `$newVersion` ? Are they Thelia or Module version ? :)"}
{"pred": "Why do we need this?", "gold": "Is there an advantage to this vs setting `this.version` in the constructor? Cleaner this way, at the top?"}
{"pred": "Why do we need to trim here?", "gold": "Fix for URISyntaxException."}
{"pred": "Shouldn't this be `logrus.WithField(\"route\", routeUpd)`", "gold": "Would be good to UT this case"}
{"pred": "Why is this needed?", "gold": "Why we need to add this?"}
{"pred": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping."}
{"pred": "I think this should be `CurrentApiCalls`", "gold": "This is ok to change since I believe that these were added just in main and not in public release."}
{"pred": "nit: `pubsubServiceAccount string` -> `pubsubServiceAccountID`", "gold": "Not needed in this PR, just want to make sure people think about this (maybe make an issue)? This is a lot of strings in a row. It will be hard/impossible for someone reading the code to see that everything is in the correct position. I recommend creating a struct instead of passing seven strings in a row. A similar problem exists on most of the `MakeFoo(...)` style methods in this change."}
{"pred": "Shouldn't this be `_run?.Invocation?.EndTime`?", "gold": "_jaw drops_ I would have sworn I wrote those lines. Good catch."}
{"pred": "Why do we need to clear memoizedFns?", "gold": "This needs to be tested."}
{"pred": "I think it would be better to use `expect(building.building_address).to be_nil` here.", "gold": "I believe you're missing the comparison after 'be'"}
{"pred": "why not use `errors.Cause(err)`?", "gold": "move 103~105 to in front of 97?"}
{"pred": "Why do we need these imports?", "gold": "Lots of unnecessary imports left in this file."}
{"pred": "Shouldn't this be `descriptor_class`?", "gold": "Does this actually produce different code?"}
{"pred": "`return node.getAttribute('onFocus') === 'this.blur()';`", "gold": "This should account for whitespace. Simply putting `.trim()` on the attribute value should do."}
{"pred": "why do we need both noencTarget and bhTarget?", "gold": "I don't think we need these. Simpler just to put `routetable.TargetType...` inline below."}
{"pred": "`stripped and '/' in stripped` -> `stripped and '/' in stripped`", "gold": "Nested if statement. You can merge both statements nested together to create one"}
{"pred": "Shouldn't this be `isJava10`?", "gold": "Nitpick: add a space after the comma. Also, we should consider that the format of the version could change in the future so we could get something that is not a parsable integer."}
{"pred": "Why this change?", "gold": "For your reference in future, I sugguest to use the `ASSERT_*` family."}
{"pred": "Why is this needed?", "gold": "no need to import `fmt/format.h` here since the `KimInit` class is derived from `Pointers`. Any class derived from `Pointers` can assumed that `lmptype.h`, `mpi.h`, `cstddef`, `cstdio`, `string`, `utils.h` and `fmt/format.h` are already included through `pointers.h`."}
{"pred": "nit: remove empty line", "gold": "Can we have prefix of `OPENEBS_IO` e.g.: `OPENEBS_IO_INSTANCE_NAME`"}
{"pred": "`GetRootNode is not supported by folderBranchOps`", "gold": "Might as well fix these bare returns by making them `return errors.New(...` directly."}
{"pred": "`org.hyperledger.besu.datatypes.Hash.EMPTY` should be imported.", "gold": "we can use import here"}
{"pred": "Is this TODO still relevant?", "gold": "thx for removing these"}
{"pred": "Wouldn't it be better to return an empty list here?", "gold": "I snuck this one in as well as checkstyle crashing (on files from resources) caused an unfinished xml to be written, and it wasn't obvious where that XML was"}
{"pred": "shouldn't this be `good case2`?", "gold": "How is this different than \"good case\"?"}
{"pred": "Why do we need to change this?", "gold": "the last parameter name should be `serviceName` as is in the implementation  "}
{"pred": "Why did you remove the space?", "gold": "@ftomassetti - okay, this is a little meh."}
{"pred": "Should this be `os.NotImplemented`?", "gold": "Note, changed initial capitalisation of this for consistency. Can do it the other way around too if that'd be better. :wink:"}
{"pred": "`typeof window === \"object\" ? window : this`", "gold": "hey, aren't we supposed to be passing in two parameters here?"}
{"pred": "Why is this needed?", "gold": "please keep alphabetical ordering :)"}
{"pred": "Why is this needed?", "gold": "Selenium must compile against Java 6. Revert this line."}
{"pred": "Why is the `\"\"` here needed?", "gold": "what is that `\"\"`, the adapterType? can you add `\"\" /* adapterType */`... in other places as well... might be cleaner if it's a pointer or some varargs at the end but don't have any strong preference.."}
{"pred": "Shouldn't this be `!_this.getValue(path)`?", "gold": "This check is a little odd, and will still mess up with empty strings `''` because empty string is falsy. Can we change this to `|| _this.getValue(path) == null`?"}
{"pred": "`parseInt(tabIndex, 10)` should be `parseInt(tabIndex, 10)`", "gold": "Just a minor suggestion: If you `parseInt` when you access the attribute then you shouldn't have to do it twice in the ternary."}
{"pred": "Why do we need this?", "gold": "This change in particular is strange. I'm not sure why it would now be necessary. The previous default would've been true, and the default behavior without a new net-ssh version should be unchanged."}
{"pred": "should be `bool|null`", "gold": "Why is that? Should be redundant as the default value exists."}
{"pred": "Why do we need this?", "gold": "Are all fields beginning with \"Debug\" automatically `;local` ? (I guess so, but just checking.)"}
{"pred": "nit: `Create a new {@link UpdateNameMapping}`", "gold": "While I think it makes sense to update the mapping programmatically, I don't see much value in exposing it as part of the table API. We want to keep the Table API small, so if we can handle this by using a separate API that consumes and produces JSON, then that is preferred. Also, we may have more than one mapping in the future, so keeping this decoupled also helps out for those use cases. For now, let's build a utility class to perform these updates. We can always add this to the public API later if we choose to."}
{"pred": "Why this change?", "gold": "We would want ssmp to wake up every 3 seconds if there are no other requests to it and do some cleanup tasks. So, it is not clear why do you want to set this to 0."}
{"pred": "Why do we need to preload these types?", "gold": "Is this really necessary? I would expect these types to be included with the loop below."}
{"pred": "Why do we need to reverse the bytes here?", "gold": "You could do span<byte> and it's magic of typecast to int for better efficiency"}
{"pred": "Shouldn't this be `|| cssRule.style.webkitTransform`?", "gold": "Looks like you've covered `-webkit-transform`, but what about `-ms-transform`?"}
{"pred": "Shouldn't this be `MvxBindingLog.Warning`?", "gold": "Is there something missing from the message here?"}
{"pred": "I don't think we need `__all__` anymore.", "gold": "Hmm, what does this syntax mean?"}
{"pred": "why do we need to pass callerTypeAPI here?", "gold": "should this be callerTypeTask?"}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.", "gold": "Currently update is set as @plan.editable_by?(@user.id) Which one is the correct behavior? I can see a case for only owners/co-owners to be able to set visibility, test status, and other plan details"}
{"pred": "What is the reason for this change?", "gold": "Maybe make it configurable? Or store the actual level index in DB, making this binary search obsolete?"}
{"pred": "nit: remove empty line", "gold": "Nit: this file doesn't need to change. Can you revert this to avoid git conflicts?"}
{"pred": "What's the reason for this change?", "gold": "There's no reason for this to be a callback now technically but as per our tech decision, we want all handlers to use `useCallback` now"}
{"pred": "Why do we need this?", "gold": "This isn't strictly part of this PR, but could you move `multiSigString` from `crypto/multisig.go` into this list of `HashID` values? Now that we have other things being hashed into addresses (specifically, these new logic addresses), it's important that the hash input for multisig addrs is domain-separated from logic addresses."}
{"pred": "`BaseTestCase` doesn't seem to be used anywhere.", "gold": "nit: you could have named it just \"TestCase\" (if django's TestCase was imported differently)"}
{"pred": "`options[:page_ranges] ||= Array(options[:page_ranges])`", "gold": "the bridge here isn't defined as an accessor / reader to try mask it better. So you need to directly call the iVar `@bridge` here."}
{"pred": "Why was this removed?", "gold": "All the callers of `ExtractSomeIfAny`, always pass `true` to `synthetic_value`. Can we get rid of the extra argument?"}
{"pred": "why do we need this?", "gold": "Better to use the absolute path."}
{"pred": "`ChannelExpiryInterval` -> `ChannelExpiryIntervalMs`", "gold": "this is 16 hours, is that enough?"}
{"pred": "nit: `if err is not nil`", "gold": "  removing boilerplate. You could also add a `StartSpan` with varargs to inline string attributes."}
{"pred": "`v` is not used?", "gold": "Can you replace these single letter variables with full names?"}
{"pred": "Why do we need this?", "gold": "At first I wasn't sure, but now I think I'm sold on making PrepareRequest an action over adding a state object to the context."}
{"pred": "Shouldn't this be `\\d+\\.?\\d+`?", "gold": "Would it be too greedy to preg_replace `VuFind (\\d+\\.?)+` with `'VuFind ' . $this->to` anywhere in the string? This would update something like 'Finna (VuFind 7.1.0)' as well. Just a thought, please disregard if you'd like to keep it as is."}
{"pred": "Shouldn't this be `getCollectionConfigName`?", "gold": "BTW for brevity, you can remove `getZkStateReader().` here and elsewhere since ZkController has a convenience method for the cluster state."}
{"pred": "nit: `manifests` -> `manifests`", "gold": "If there are no manifests, then entries should be `CloseableIterable.empty()`, not the manifest iterable. That doesn't need to be closeable."}
{"pred": "Why is this class needed?", "gold": "this class should be named `ArrayInitializationVerbosenessTest` to work"}
{"pred": "Line is too long. [81/80]", "gold": "Do we want to allow users to disable `console` as well? The schema currently says that it only permits a hash for `console`."}
{"pred": "Why is this skipped?", "gold": "It would be very helpful to describe succinctly either inline or by linking to an issue going into depth why each test is not working. If we merge like this your knowledge of what is going on is lost and other people in the code need to do a ton of reading before understanding when/how/if we should unskip."}
{"pred": "`handleDataError` and `handleDataSuccess` don't seem to be used.", "gold": "As this is a `useEffect` this could be a cause for concern! Note that `useEffect` re-runs when a dependency changes **not** when a dependency is truthy (the previous code does look a bit like it's expecting that)"}
{"pred": "`world_comm_ptr{new lbann_comm(0)}` ?", "gold": "Should we be doing this with `make_unique` or something?"}
{"pred": "Layout/SpaceAfterComma: Space missing after comma.", "gold": "we don't want to set default values for this. Since it is the actual email, we want to make sure we are always passing in the `user` and `proposal` . we have a default value of `nil` for modifier because sometimes will update a proposal via `rails console` in which case there will be no recorded modifier."}
{"pred": "nit: remove empty line", "gold": "Yes this import was in the wrong place, but should ideally be in the first list of imports (among `go/build`, `go/token`, etc.). You may move it there, or just revert this change as it's actually unrelated."}
{"pred": "I think this should be `StrictUnusedVariable`.", "gold": "It's unnecessary to duplicate the `name`."}
{"pred": "`null === $event->getForm()->get('unlink')->getData()`", "gold": "this was a mistake when adding phpstan strict plugin"}
{"pred": "Why do we need to check for `parentDom` here?", "gold": "Nit: I think it should be `to handle` here."}
{"pred": "Why this change?", "gold": "Please don't make unrelated changes or let your tools make unrelated changes."}
{"pred": "Why do we need to change this?", "gold": "`numAccounts` is a global variable (from `gochecknoglobals`)"}
{"pred": "`unset($this->plugins[$id], true);` ?", "gold": "Is the ID correctly normalized at this point?"}
{"pred": "`0` should be a constant.", "gold": "if 0 is a special constant meaning \"no limit\" let's make it a constant and name it correctly :)"}
{"pred": "why this change?", "gold": "Curious about the reason behind this change"}
{"pred": "`cborStore` -> `cborStore`", "gold": "wait, i thought the cborstore was for state tree?"}
{"pred": "I think it would be better to use `os.path.isdir` instead of `os.path.isdir`.", "gold": "This logic is now duplicated here and in `_delete_temporary_files`... Maybe do it all at once - find temp files, delete them, and fix the logical keys?"}
{"pred": "Why do we need this?", "gold": "How about name it with NullResponseTypeProcessor"}
{"pred": "nit: `CHECK(config_.monotone_constraints.empty() || config_.monotone_constraints[i] == 0);`", "gold": "Maybe `Log::Fatal` here? `[LightGBM] [Fatal] Check failed: feat_is_unconstrained at ...` (and kernel death in case of Jupyter Notebook) seems to be not so informative and user-friendly."}
{"pred": "Why this change?", "gold": "Not sure I like the name ``_apply``. Even though ``_process`` is supposed to process elements already, how about ``_process_element`` which processes elements, *excluding* Overlays/NdOverlays."}
{"pred": "nit: `NodeRoleTagValue is the value for the node role.`", "gold": "Let's use this constant when ASG is created as well (currently hardcoded)."}
{"pred": "E501 line too long (116 > 115 characters)", "gold": "Oh is `bucket` actually higher cardinality than `eventname`?"}
{"pred": "Why do we need this import?", "gold": "You can't rely on QtWebEngine being available - but why do you need to import this here at all?"}
{"pred": "I don't think we need to add these to the `packages` dict.", "gold": "How did you determine these - and how can we be confident that nothing is missing?"}
{"pred": "This should be `Workshops` not `Workshops`.", "gold": "What is this page going to do that is different than the products index we already have?"}
{"pred": "Should this be `manifest['application'].key?('gecko') && manifest['application']['gecko']['id']`?", "gold": "Couldn't you just write this as an if/else or a guard clause like on line 87? Just seems a bit weird doing this conditional assignment for essentially an if/else."}
{"pred": "I think this should be `:go, :s3_options`", "gold": "Is this intended to be here? Seems it belongs to a different PR."}
{"pred": "`SetConsoleForegroundColor(ConsoleColor.White);` should be removed.", "gold": "These changes, while harmless, were no longer needed with newer versions of System.Console thanks to @ianhays"}
{"pred": "This should be `logger.warning('boto3 is not installed. ECSTasks require boto3')`", "gold": "Umm... this isn't relevant to this PR"}
{"pred": "Should this be `All = ~0`?", "gold": "While All make some sense here it doesn't make a lot of sense in the SkipOnFramework context. I wonder if we really need to expose anything more here. You can just blindly use 0."}
{"pred": "nit: `bee` -> `be`", "gold": "Actually, this is not correct. Package `cmd/bee` doe snot have any notion of commands or even libraries used for them. It is as simple as possible, just calling the function from `cmd/bee/cmd` which actually implements commands."}
{"pred": "Why did you remove the resetNamespace option?", "gold": "This change is causing tests to fail because users sits at `/app/users`, not `/app/admin/users`"}
{"pred": "Shouldn't this be `lax`?", "gold": "Could you provide more information on what exactly each of those three options do?"}
{"pred": "Why this change?", "gold": "Why this line break?"}
{"pred": "`apiextensionsv1` is unused (from `deadcode`)", "gold": "We're importing this twice with different aliases."}
{"pred": "This should be `pandera>=0.8.0`", "gold": "We should avoid adding a pandera dependency to Dagster itself."}
{"pred": "`this.permissions = new ObjectPermission[this.permissions.length+1];`", "gold": "Can be replaced with `org.jkiss.utils.ArrayUtils#add`."}
{"pred": "Why do we need a synchronized block here?", "gold": "While we're here, this line (and a few others) should be `customThreadPool.submit(() -> IOUtils.closeQuietly(overseer);` I have no idea why we're creating a collection and a stream for a single object."}
{"pred": "`managed identity can not be used at the same time as clientID, tenantID or clientSecret`", "gold": "Should these restrictions also be reflected in the API docs?"}
{"pred": "Why do we need to clone the URL?", "gold": "What about the request headers if someone uses `request_header`? :thinking:"}
{"pred": "Why is this needed?", "gold": "Verify that external-dns allows setting this parameter multiple times (that it's not \"last one wins\")."}
{"pred": "This should be `10.3.1.5`", "gold": "Maybe 2 host/ip values could be used in the example?"}
{"pred": "Why do we need this change?", "gold": "We're only testing `RateLimiter.Allowed(Span)`, so I think we can use a mock `ITraceContext` instead of a real `Tracer` or `TraceContext`."}
{"pred": "`trainer->get_name()` and `trainer->get_callbacks()` can be `const`", "gold": "IMO, this is the wrong way to associate a model with a trainer... Why the string when you actually have a trainer object?"}
{"pred": "Why do we need `block_a.type ()`?", "gold": "Wondering if we can directly put types here & for other similar ledger_processor items like rai::block_type::state"}
{"pred": "I think this should be `Verbosef(\"remove %d old packs\\n\", len(removePacks))`", "gold": "As `DeleteFiles` is not only used for prune this function deserves its own file. Maybe something like `delete_files.go` or `parallel.go`?"}
{"pred": "What is the reason for this change?", "gold": "It should be simplified character. `` -> ``"}
{"pred": "Why do we need this?", "gold": "I am pretty sure it breaks the visitor pattern, visitor should have no knowledge about the structure of what it is visiting or control over visiting mechanism"}
{"pred": "I think this should be `TreeMap`.", "gold": "'A' instead of 'An' here"}
{"pred": "Why this change?", "gold": "Can you flip it back (here and in other places)? It is more natural to represent \"10 seconds\" as `10 * time.Second`."}
{"pred": "why do you need this?", "gold": "Why was this necessary? You should just use the `dask_classifier` defined below this. With this change, you'd only be doing the local predict on arrays each time, but we want to test on all of DataFrame, Array, and sparse matrix."}
{"pred": "I don't think you need the `<div>` here.", "gold": "To me, this is sort of weird to have a completely separate page for this. Can we extract the different stuff (github, videos, downloads) presentation from the top of `app/views/purchases/show.html.erb` and reuse it on this page. I worry that we'll change things with fulfillment or copy and have to change it in multiple places."}
{"pred": "Why is this import needed?", "gold": "Please revert the lines above. Not touching unrelated code keeps the git history clean."}
{"pred": "", "gold": "`short_version` and `version_info`"}
{"pred": "I don't think this should be changed.", "gold": "This is supposed to be `status`. Why did you change this?"}
{"pred": "Why do we need these copyrights?", "gold": "I will change all of these at some point next week."}
{"pred": "Why is this change needed?", "gold": "I made this change because, while trying to debug, in Visual Studio, the `IntegrationSignatureTests`, this property getter was hit and interfered with my ability to complete the debugging."}
{"pred": "Shouldn't this be `KubernetesResourceState_FAILED`?", "gold": "nit: `\"Unexpected error while calculating: unable to convert %T to %T: %v\"`"}
{"pred": "Why do we need this?", "gold": "I'd actually recommend not putting this in the `SampleConfig`, it's intended more for properties that are inherent of the discovery format. Add a method `getSampleAppName(String apiTypeName)` to `SampleNamer` and override it in the language specific `SampleNamer`s if needed. Then assign it in the transformer."}
{"pred": "Why do we need to export these?", "gold": "Do we need to export these new functions? I thought the plan going forward was to keep util imports separated to make circular imports less likely and possibly do better chunk splitting. Since only new code references these files, we can scope the import to the specific files."}
{"pred": "Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "Rails will autorequire `acts_as_editable` once it encounters the constant `ActsAsEditable`. Thus if we move `ActiveRecord::Base.send :include, ActsAsEditable` from _acts_as_editable.rb_ to this file, the require line will not be needed anymore. Instead of requiring the file ourselves, we will let Rails do it for us. This fix will also remove the need to explicitly require `acts_as_editable` in _mock_active_record_base.rb_."}
{"pred": "nit: `upperCamelMethodName` -> `camelMethodName`", "gold": "I think we should name this `grpcMethodName` or similar. That is what this refers to, right? The fact that it is upper camel is an implementation."}
{"pred": "I think this should be `FPGA_MSG(\"%s is not a valid input\", _N);`", "gold": "What if .. appears, but not as the first character, eg \"errors/../../../../../../../../../../../\"?"}
{"pred": "\"owned by the default orgs\"", "gold": "Thanks, this should make things a bit easier for people who pick up the codebase but aren't a `curation center`"}
{"pred": "Why do we need to deprecate this?", "gold": "why not removing it?"}
{"pred": "whether to validate hostname of temporal cluster against server certificate", "gold": "same nit here: maybe word as - \"disables validation of the temporal cluster's server certificate\""}
{"pred": "Why is this needed?", "gold": "Nit: other statements use all caps for SQL reserved words. Should this be `SHOW TABLES`?"}
{"pred": "Shouldn't it be `c == '.' || c == ':'`?", "gold": "Do we need this? isLuaIdentifier() is used not only in extract_next_token() but also in extract_prev_toke(). I wonder whether the change for isLuaIdentifier() has an impact on extract_prev_toke() or not. If you are not sure, keep isLuaIdentifier() as is. If you are sure, could you write your conviction to the commit log."}
{"pred": "Why do we need to remove this check?", "gold": "This line should actually be: `if c.KubernetesProvider == config.ProviderAKS && c.Wireguard.EncryptHostTraffic {` because we only need to tweak the MTU like this on AKS."}
{"pred": "I don't think we should change the name of the flag.", "gold": "Do we need to change this flag as well?"}
{"pred": "This should be `exports.source = module.exports.source`", "gold": "Including the source twice here makes the filesize jump to 432kb. Is there any way to minimize repeating it?"}
{"pred": "`nameOrHandle` -> `windowHandle`?", "gold": "This should only be sent if the driver is speaking to a W3C conformant remote, so we need an if-condition check like we have in the Python bindings."}
{"pred": "I'm not sure if this is the best way to do this, but I'm not sure what the best way to do it is.", "gold": "Only one line of code? What a simple issue!"}
{"pred": "I think this should be `NewDefaultDynamicRateLimiter`", "gold": "Conceptual question: why do history and matching need throttler at all? Shouldn't throttling to be handled on FE only?"}
{"pred": "nit: \"may be impacted by\" -> \"may be impacted by\"", "gold": "Would this be possible: `addCNP` has already processed the CNP to an internalNP, just hasn't added this internalNP to the `internalNetworkPolicyStore`. In this case, `reprocessCNP` will skip processing this CNP and `addCNP` will just add the \"old\" internalNP to `internalNetworkPolicyStore`."}
{"pred": "I don't think this is the right place to put this method. I think it should be in the `NcrController` instead.", "gold": "Minor: you can access `current_user` in here directly - don't need to pass it in. Unless you prefer passing it explicitly?"}
{"pred": "Shouldn't this be `attributes&.keys`?", "gold": "What is the purpose of `&` on this line?"}
{"pred": "I think this should be `^[a-zA-Z0-9]+$/`", "gold": "See above, the `isValidWebDataStreamID` implementation from before is actually correct. What we need here instead is a new `isValidMeasurementID` function."}
{"pred": "Why do we need to close the connection here?", "gold": "Should be an error... it is important for the admin of the server attempting to create the leafnode connection to see the error asap."}
{"pred": "missing whitespace around operator", "gold": "Could you split these conditions up over multiple lines please."}
{"pred": "Why do we need to change this?", "gold": "I think we can just change this to `Split` instead of `SplitN`. I don't think we need to limit the number of parts in the tag."}
{"pred": "Shouldn't this be `{{ $port }}:{{ $port }}`?", "gold": "So this is actually a mistake that I introduced without realizing it, and have known would need to be fixed when we get here  . The format of the ports directive is \"host:container\". We only want the host port to change, not the internal container ports. The ports variable probably needs to be a map which maps external -> internal ports."}
{"pred": "why is this needed?", "gold": "An alternate approach would be to always initialize shardInfo with a dummy (non-nil) value, which could protect against other uses before it's initialized (I couldn't find any though). But I can change it to do it that way instead."}
{"pred": "Why do we need this?", "gold": "Maybe we can just put the entire `DirEntry` in here? I can imagine it might be useful for debugging to get the block ID/refnonce, encrypted size, key gen, data version, etc. What do you think?"}
{"pred": "Shouldn't this be `|| c->maximized_vertical`?", "gold": "For the commit message: The paragraphs seem to be out of order? The `Would not work because` refers to the stuff before, but there is a `This may seem pointless, but` in-between."}
{"pred": "Why are these removed?", "gold": "Why did you remove these packages from the prelude, will your new functions not work without this change?"}
{"pred": "nit: `kvKeys = std::move(kvKeys)`", "gold": "We'd better reserve enough space before using kvKeys to avoid extra malloc."}
{"pred": "Why not just return n.Labels[KeyNodeHostname]?", "gold": "would it make sense to return empty or error if label doesn't exists?"}
{"pred": "I think this should be `maxAttempts - 1`", "gold": "Don't penalize everyone with 250ms delay b/c some machines have problems."}
{"pred": "nit: `String returns a string listing the cids in the set.`", "gold": "Probably want a space after the second %s?"}
{"pred": "Shouldn't this be `ServiceUnavailable`?", "gold": "This seems like an internal error still?"}
{"pred": "Line is too long. [81/80]", "gold": "Line is too long. [94/80]"}
{"pred": "Why do we need to return the time at which the identity was created?", "gold": "out of curiosity, why creating another struct to wrap it?"}
{"pred": "`remaining_time` -> `remaining_time_in_seconds`", "gold": "discipline vs. Discipline? Not sure of which is correct. Also not sure if there is already an existing string const."}
{"pred": "Why do we need this?", "gold": "I believe this will break common resources, as they are defined in a common file, but must generate classes in service-specific namespace, so using protoFile to determine package of the generated class would not work, because common_resources namespace does not match service namespace."}
{"pred": "W292 no newline at end of file", "gold": "How about `SPARK_DEFAULT_SERIES_NAME`?"}
{"pred": "`commit.status-check.total-timeout-ms` -> `commit.status-check.timeout-ms`", "gold": "The other properties are in `commit.status-check`, not `commit.status-checks`. Could you remove the extra `s`?"}
{"pred": "Why do we need to skip this test?", "gold": "Side note: I'd love to see more of these fields exposed on configuration."}
{"pred": "`@resource.is_a?(User)` can be removed as well.", "gold": "In the case of accounts generated by API clients, what name gets put for the `inviter_name` or `invited_by` record?"}
{"pred": "Why do we need to implement getStartBlock?", "gold": "I think this class is only relevant for updating the QbftConfigOptions based on the transitions config, so probably not."}
{"pred": ">TracerTimeout [](start = 24, length = 11) Should this be `TracerTimeoutLimit`?", "gold": "what is the number thrown by Geth?"}
{"pred": "Why do we need to split on `?`?", "gold": "This would still crash on malformed database connection string like \"test\""}
{"pred": "Why do we need `pluginNameKey`?", "gold": "it is not an interface, maybe we can move to another package?"}
{"pred": "`priv` -> `tableMeta`", "gold": "Same here. Can we use `this.instance.getSettings()` to get `tableMeta`?"}
{"pred": "Shouldn't this be `!isCpuSet(cgroup)`?", "gold": "Not sure whether this validation is useful."}
{"pred": "`s` should be a string, not a unicode string.", "gold": "Various things to note here: - Why would `question` ever be falsey (or `None`) here, i.e. why the `if question`? - Why would `question` ever not have that attribute? You set it in `Question.__init__`, so that check does nothing at all (and generally, `hasattr()` should be avoided if possible). - Why do you want to yank `None` (what does that do?) rather than e.g. show an error if there's nothing to yank?"}
{"pred": "Is this intentional?", "gold": "If this is needed for testing, you should use `pytest --log-cli-level=INFO` instead."}
{"pred": "Why was this changed?", "gold": "We should drop ipify in all places i guess"}
{"pred": "nit: rename to `AgreementFilterTimeoutDuration0`", "gold": "Add explanations around these variables - what do they mean, how they should be configured, etc."}
{"pred": "I don't think this should be called on app init.", "gold": "One thing tho - I would really appreciate any advice on where to move this to, so that it's called on initialisation of the website."}
{"pred": "I think this should be called `showGatheredResources`", "gold": "To much tabs here (1 tab)"}
{"pred": "`DELETE FROM execution_logs WHERE upload_time < ? AND upload_time < ? LIMIT ?`", "gold": "This is not maintaining retention time for logs as we are deleting only 1000 entries and we might end up with huge number of rows spanning over multiple months over a period of time if the cluster generates more rows as we are restricting ourselves to delete only 24k rows/day. Like I pointed out earlier a better would be to probably run this clean up every hour with some batch_size in a loop while there are records to be deleted(i.e older than 12 weeks) and committing each batch."}
{"pred": "Why do we need this change?", "gold": "I don't like this helper func :-). Yeah, definitely don't like."}
{"pred": "Why was this removed?", "gold": "Same here. This should remain unchanged. Please, add it back."}
{"pred": "Why do we need this?", "gold": "@kvwalker should this method have `ignoreUndefined` supported as an `option`?"}
{"pred": "why do we need a new sugared logger?", "gold": "we dont use a `sugaredlogger` anywhere else in clutch, just curious why were using it here?"}
{"pred": "Why was this removed?", "gold": "Not evident from looking at this diff but the queue is already being cleared four lines below."}
{"pred": "nit: `pays no fee` -> `pays no fee`", "gold": "Why is this a 'transaction' and not in the block header?"}
{"pred": "Why do we need this?", "gold": "This doesn't fit the abstraction level. Should we have a property bag for extra stuff?"}
{"pred": "Why do we need this?", "gold": "Looks like it is pretty easy to miss it when adding new files under `ci`. Hopefully, this doesn't happen too often."}
{"pred": "Shouldn't this be in the `if !o.Standalone` block?", "gold": "do we really need the `Ready` call if startup fails midway?"}
{"pred": "Why do we need this change?", "gold": "You can avoid changing the code if there are parameter defaults. right ?"}
{"pred": "Why did this change?", "gold": "I wonder why the newline disappeared here? I guess we'll merge and see how SauceLabs fares across the supported browsers."}
{"pred": "This should be `if (world_repop == 1)`.", "gold": "I know this is legal, but I prefer we put brackets on our calls"}
{"pred": "//snippet-keyword:[AWS SDK for Java v2]", "gold": "AWS Identity and Access Management (IAM)"}
{"pred": "Why do we need this class?", "gold": "We keep who wrote the code anonymous."}
{"pred": "Why do we need to check for `isUndefined` here?", "gold": "Two things to make the code more error-proof and simplify it: 1. To be safe, this should be: `! isUndefined( decimal ) && ! isUndefined( decimal.value )` 2. The other clause that you changed below can be combined with that since `decimal` isn't used anywhere else, and so there's no point to re-check whether it's not undefined. In other words, this should become: `! isUndefined( decimal ) && ! isUndefined( decimal.value ) && 1000 > number`, and then you can remove the `decimal = decimal.value` assignment and replace it with line 146 (assignment of `readableNumber`)."}
{"pred": "nit: `Transports returns the transports that used by this outbound.`", "gold": "Wouldn't composite outbounds compose the transport, such that it would still be represented as a single transport?"}
{"pred": "Why is this needed?", "gold": "nit: there is no need for a new line here, usually we tend to put an object creation and its deferred deletion next to each other. It helps not forgetting about the cleanup."}
{"pred": "Why do we need this class?", "gold": "Feel free to use the full notation with my email address: `Maxime Steinhausser <maxime.steinhausser@gmail.com>` :smile:"}
{"pred": "Why did you remove this?", "gold": "This was unused across the codebase"}
{"pred": "Do we need to unlock here?", "gold": "Should we put in which account we were trying to look up?"}
{"pred": "Why is this needed?", "gold": "either SUPPORTED_TYPECLASS or supported_typeclass. Camelcase only for class names."}
{"pred": "Shouldn't this be `pinned_at`?", "gold": "This is not going to work. You need to add a migration to the database."}
{"pred": "Why do we need to rename this method?", "gold": "Should these methods be renamed in this PR?"}
{"pred": "Nit: `The name` -> `The name`", "gold": "we need to include the `metricStreamName` which is invalid, so users know whats causing the issue."}
{"pred": "Why do we need to query for a reference to find the types and cache the symbol information?", "gold": "Please run Platform tests `DiaSessionTests`."}
{"pred": "SYSLOG_INTERNAL_WARNING_ONCE(MSG_AVX_512_SUPPORT_INCOMPLETE_STRING \" @\" PFX, pc);", "gold": "This is debug-build-only: we want a release-build notice. SYSLOG takes the name w/o the MSG and no _STRING. Args are via events.mc specifiers."}
{"pred": "Shouldn't this be `||` instead of `||`?", "gold": "is it possible to have both forms here? I was hoping we wouldn't be introducing more cases where we had to check the upper and lowercase version of URI options."}
{"pred": "This should be `int64.histogram.name`", "gold": "Does the name suffix hardcode something? Not clear how changing the name fixes this."}
{"pred": "I think it would be better to use a boolean instead of a string.", "gold": "Is undispatched same as queued? getQueuedFlows?"}
{"pred": "Why is this being changed?", "gold": "See above, same for all similar cases below."}
{"pred": "nit: `traceLogs = append(traceLogs, traceLogs...)`", "gold": "Why is this done twice?"}
{"pred": "Shouldn't this be `ConditionEqualsTo` instead of `ConditionTrue`?", "gold": "This sync can ensure that the condition of the child node is consistent with the parent node, but I still don't understand when the child will be overwritten, and this behavior is not what we expected?"}
{"pred": "Should this be `DEBUG_FAILING_TESTS`?", "gold": "This was renamed to avoid any confusion with the more general case of debugging via `plz debug`"}
{"pred": "Why do we need `Math.min` here?", "gold": "String valStr = (String)val; valStr.substring(0, Math.min(valStr.length(), prefixLength)) Make it clean."}
{"pred": "nit: space between `if` and `(`", "gold": "Sorry, this still makes no sense.. the value of any union or enum is simply a name integer constant, it has nothing to do with the `BASE_TYPE_` enum. This value should be `0`. In particular: `Every union has the NONE field, which always has value 0`."}
{"pred": "Why do we need this method?", "gold": "Looks like getAzkabanURL() is added after concrete Alerter (Emailer)::getAzkabanURL(), so that Override annotation is needed."}
{"pred": "`mask = np.array(mask, dtype=bool)`", "gold": "The above 3 lines can be written as: `mask = segms[i].astype(bool)`"}
{"pred": "nit: remove empty line", "gold": "File is not `gofmt`-ed with `-s` (from `gofmt`)"}
{"pred": "Shouldn't this be `logger.always_log (boost::str (\"Node started with peering port `%1%`.\") % network.port);`?", "gold": "Thought it's good to have this logged down so that we can check the used value in the logs."}
{"pred": "Why did you remove the `omitempty` here?", "gold": "I don't think you can call this optional unless it's a pointer - remove this?"}
{"pred": "You can use `ListUtils.isEmpty` here.", "gold": "@naofum please use `isEmpty`method instead"}
{"pred": "Shouldn't this be `nullable_handle.get()`?", "gold": "i think this is unrelated and needs to be reverted. need to discuss at sync."}
{"pred": "Why is this needed?", "gold": "Are we eventually moving those type interfaces from plugin project to datatype project? If not, then we'd have a dependency from core onto plugins, which seems a little counter-intuitive to me."}
{"pred": "Why not just `return this.model(...).syncIndexes()`?", "gold": "Love how we can finally use async/await in the codebase."}
{"pred": "I think this should be `update_existing_accounts`.", "gold": "Very minor: this line could be moved to a more narrow scope, inside `if (!representative.decode_account (representative_text))` Other than that, LGTM"}
{"pred": "`conntrack table` -> `conntrack table`", "gold": "when is this consumed? I'm probably missing it but I can't find it right now"}
{"pred": "Shouldn't this be `if (grpExpr->isRollup())`?", "gold": "I think we also need to add the rollupGroupExprList() to the cache key. If we rebuild the list above from a ValueIdSet on line 418 above, it is probably going to be in the same order, regardless whether it was ROLLUP(a,b) or ROLLUP(b,a)."}
{"pred": "Why is this needed?", "gold": "can use `getParamTypeName` instead"}
{"pred": "`ajaxEdit` is no longer used.", "gold": "Why send the parameters? They're accessible directly from `$this->request` so there's no need to inject them in the method"}
{"pred": "Please use `if handler == \"default\":` instead.", "gold": "Tiny nit: I would prefer `not selected_file` or `len(selected_file) == 0`, as if choose_file starts returning, for example, tuples instead of lists, this won't break."}
{"pred": "why do we need to remove the name file?", "gold": "How will this code behave with hostnames that contain hyphens?"}
{"pred": ">kegg = NullForEmpty(row.GetCell(keggCol)); [](start = 12, length = 36) I don't think you need this line.", "gold": "I think this is redundant since \"NullForEmpty\" already calls \"Trim()\"."}
{"pred": "nit: can we call this `CloudBackupGroupID`?", "gold": "Change this to IDs too?"}
{"pred": "Why do we need this list?", "gold": "private static final, and it should be located in raidsoverlay, as it's not needed in the plugin. also the name could be a bit better, DC_SCOUT_RAIDS or similiar."}
{"pred": "Why is this change needed?", "gold": "attr_value is 128 bytes?"}
{"pred": "Shouldn't this be `self.method.lower()`?", "gold": "if it's unpredictable - why uppercase it at all?"}
{"pred": "Can we remove this?", "gold": "Please remove all these debug prints. It doesn't look good."}
{"pred": "`SampleChainRandomness` is unused (from `deadcode`)", "gold": "Consumers of this interface should not be required to provide `sampleHeight`. This should be an expected consensus parameter."}
{"pred": "Why do we need this?", "gold": "I don't believe this is the right fix. If startTime comes after closeTime, then it means some other event triggered invocation of this code path like workflow timeout. In this case we should still try to fire the cron on previous value so we should just return start the delta between startTime and closeTime immediately."}
{"pred": "`StatusFilter` is unused (from `structcheck`)", "gold": "Not sure if we need tag here, it is an implementation detail in portworx that isn't exposed in openstorage"}
{"pred": "`$extended` should be `true` by default.", "gold": "I wonder if it would be cleaner to refactor all of this similar to the SolrMarc driver, so we have a property with Summon field names associated with types, and we iterate through it in a loop... that way we don't have to repeat the loop code four times with different variable names."}
{"pred": "Why do we need to get the solr client cache here?", "gold": "Need the `solrClientCache.close();` further down in the method be removed since a shared cache is now used?"}
{"pred": "Why is Version an int64?", "gold": "according to the PR (schema changes?) these 2 field should be removed?"}
{"pred": "Why is this being removed?", "gold": "Panic here if `exp.Target.StressChaos.CintainerName` is nil."}
{"pred": "I wonder if it would make sense to move this method to `Scorer` and have it return `ScorerIterator` instead of `DocIdSetIterator`?", "gold": "This allows for some hacks like returning an iterator that matches more docs than the scorer. I liked the previous approach that returned an iterator better."}
{"pred": "Should this be `LOG.trace`?", "gold": "Aren't there already logs for this from the underlying file system implementation?"}
{"pred": "Shouldn't this be `CustomMunge`?", "gold": "It would be good to have a test in here that demonstrates the new munge functionality; I can help set that up if you're not sure how."}
{"pred": "nit: typo: retrials -> retrials", "gold": "`retrials` isn't the word you intend. I think you mean `retries` and to that end, can the var name just be `max_retries`?"}
{"pred": "\"Value in product it should contain 255 characters or less.\"", "gold": "Value in product should contain 255 characters or less."}
{"pred": "File is not `goimports`-ed (from `goimports`)", "gold": "line is 133 characters (from `lll`)"}
{"pred": "Style/TernaryParentheses: Use parentheses for ternary conditions.", "gold": "since we're calling the file .rspec-local, I think we should rename local_options to project_options and use local_options for .rspec-local - WDYT?"}
{"pred": "`connection_config.merge(http_adapter: connection_config[:http_adapter])`", "gold": "Will we want to refactor this when we drop rsolr 1.x support?"}
{"pred": "`nodeIP` is unused (from `deadcode`)", "gold": "should this really be multiple IPs?"}
{"pred": "<%= render partial: \"proposal\", locals: { proposal: proposal } %>", "gold": "Hmm, is that partial used in multiple places? Maybe we can just move that file in here."}
{"pred": "Why do we need this file?", "gold": "Should be 2014-2016"}
{"pred": ">value.StartsWith(quote) && value.EndsWith(quote) [](start = 16, length = 44) I think this is not needed.", "gold": "Looks like my fault for sure in trying to handle international inputs regardless of locale. I think the correct fix is actually to get rid of TrySplitColumns and use ParseDsvFields instead. It is what gets used in the end, and it already has logic for dealing with quoted fields."}
{"pred": "Why is this needed?", "gold": "similarly here, are the these cursors not being closed when the client is closed?"}
{"pred": "Why do we need this change?", "gold": "Or maybe `func(args ...string) Policy` to make it dynamic in case of any future policy that may require more than one args."}
{"pred": "Why do we need this?", "gold": "Should this happen even if the above failed?"}
{"pred": "Why did you change the copyright year?", "gold": "Please dont change this ."}
{"pred": "`confirmed: %2$b` -> `%2$s`", "gold": "There is a strange $b that looks wrong."}
{"pred": "Why did you remove the roleText?", "gold": "Is it still important to have `speakEntry` here? It is checked before this value `containerContainsText` is used in the \"General\" section."}
{"pred": "Why is this needed?", "gold": "It is `$JAVA_HOME/bin`, not `$JAVA_HOME`, which should be added."}
{"pred": "Why is this needed?", "gold": "Should move this to within the `#else` block as it's only used there."}
{"pred": "Why do we need this?", "gold": "is this a common rule to wait one extra second after ajax? I'm thinking about moving this extra wait into waitForAjax method."}
{"pred": "Shouldn't this be `$properties['site']['logger']`?", "gold": "Maybe you can correct the typo \"if\" too :)"}
{"pred": "`IdentifyForChat` is unused (from `deadcode`)", "gold": "I'd prefer a name less chat-specific, since later on we could have other app types that want the same behavior. Maybe `IdentifyAndAllowTrackBreaks`?"}
{"pred": "I don't think this is the right way to do this. If we don't have a MPI_Comm, we should throw an error.", "gold": "I think I was involved in writing that caster, but I never fully understood the `import_mpi4py` thing. Why is importing mpi4py still necessary at that point? I would think if the user is passing a communicator from python code, they must already have imported mpi4py themselves, or does that not propagate through into the wrapping layer?"}
{"pred": "Why do we need to close the body here?", "gold": "This seems like a more interesting change. Maybe we should re-name the PR"}
{"pred": "Why are these added here?", "gold": "Nit: implement the methods for these interfaces explicitly in this file for consistency. It can be passthrough."}
{"pred": "Why is this needed?", "gold": "Not directly related to your PR, but I think here we should create a Type enum (MAP, ARRAY, PRIMITIVE) instead of having 3 flags."}
{"pred": "`NABoolean isFirstBatch = false;`", "gold": "Do you want this to be a stack variable? The work method might return at any time (example: when the parent queue fills up) and then get called again, which would cause this variable to become false again. I'm wondering if this variable should be a member instead?"}
{"pred": "nit: you can use `sizeof(GraphSpaceID)`", "gold": "You could reserve a const space to save the extra computation."}
{"pred": "Why do we need this?", "gold": "Did you consider adding rooted paths like `C:\\ProgramData` and paths with flipped separators?"}
{"pred": "Why do we need this change?", "gold": "does this line cause a panic if it is above the if condition ?"}
{"pred": "Shouldn't this be `LibraryDetailsPanel`?", "gold": "Maybe `LibraryDetailsPanelType` would be clearer."}
{"pred": "Why did you remove this?", "gold": "minor nit - add \"persist-filesystem\" and \"persist-directory\" into commit message, as its something people may search on (maybe applies to a few other commit messages)"}
{"pred": "Why was this removed?", "gold": "I verified offline with @jeremyg-lunarg this should be removed."}
{"pred": "Is this leftover from debugging?", "gold": "This should be removed? If not, typo in incldued_wf"}
{"pred": "Shouldn't this be `buttonStyles`?", "gold": "Sorry for the delay on this! It looks like Circle CI isn't running tests on some of the PRs, but this doesn't look like it would work   I might be missing something, but are the tests all passing locally?"}
{"pred": "`SplitPath` -> `SplitPaths`", "gold": "Do you think the godoc should mention that all delimiters will be suffixed with `/`?"}
{"pred": "Shouldn't this be `aURL.startsWith(\"data:\")`?", "gold": "what if I want to load my own, a different, data URI in Private Browsing mode? I do this often on desktop (e.g., `data:text/html,&times;`). admittedly, I wouldn't expect this to be done by a non-developer, but this will certainly cause a minor bug."}
{"pred": "`minSequenceNumber` -> `minSequenceNumber`", "gold": "I remember the sequence number 0 is kept for the data files for iceberg v1, so in theory the sequence number from delete files should start from 1. So setting it to 0 as the default value sounds correct."}
{"pred": "Why do we need to change this?", "gold": "For all these MYSQL queries unsigned is required. I have tested again and without unsigned these queries are failing."}
{"pred": "Why do we need this?", "gold": "Are there tests for this? What happens when you get to limit?"}
{"pred": "Why was this removed?", "gold": "Whole thing could be collapsed to `data['config']['transport'] ||= 'local' if target.name == 'localhost'`."}
{"pred": "Why do we need this check?", "gold": "maybe throw in `&& mServiceConnection.isBound()`, there are cases where the connection might die"}
{"pred": "public bool IsEip1344Enabled => true;", "gold": "Can we add Istanbul with this first EIP please? (or as a separate issue)"}
{"pred": "Shouldn't this be `sn.Username = usr.Username`?", "gold": "I don't understand this change"}
{"pred": "\"Invalid public key\" -> \"Invalid public key\"", "gold": "Let's allow translators for this string to be translated: `self.show_warning(_('Invalid Public key'))`"}
{"pred": "I don't think you need the `toLowerCase()` here.", "gold": "This needs to work with `role=form` too."}
{"pred": "Why is this needed?", "gold": "This should be before the if on line 1028, which should turn into an else if"}
{"pred": "Why is this a pointer?", "gold": "Not really introduced by this PR, but I don't recall why these have to be pointers, while `PodSelector` / `NSSelector` do not. Do you know the reason?"}
{"pred": "nit: `sample-r.minRTT >= ackDelay`", "gold": "Is there a reason why we are ignoring the ackDelay if it would result in a value smaller than the min? Why not `max(sample - ackDelay, minRTT)`?"}
{"pred": "Why do we need to change this?", "gold": "Here's an example of how the files in the `NotYetGenerated` directory drifted out of sync from the generated files. When we made the equality comparers internal, we neglected to fix this one."}
{"pred": "Should this be `admin_index?`?", "gold": "nice. we should do this elsewhere too. We have a lot of repeated stuff in the policies"}
{"pred": "I don't think you need this test, it's already covered by the previous test.", "gold": "Small formatting thing, but can you remove the space before the semicolon?"}
{"pred": "Why this change?", "gold": "Not new, but nit: _writeLeng*th*."}
{"pred": "Why do we need this test?", "gold": "Our habit is to go ahead and put a description line (or more) in front of every function, not just non-test or exported functions."}
{"pred": "nit: remove empty line", "gold": "Remove this file from the PR"}
{"pred": "Why did you change this?", "gold": "I think that for cloud variables, the default value in the prompt should be the variable name without the cloud prefix; this is slightly different from the scratch 2.0 behavior, but I think would ultimately lead to less confusion. Proposing code changes below:"}
{"pred": "Shouldn't this be `!= 0`?", "gold": "I think I would rather fish this interface through than use it as the basis for heuristics."}
{"pred": "nit: unnecessary whitespace change", "gold": "Probably not worth making this line-ending change, since it is the only change to this file."}
{"pred": "Shouldn't this be `OPSZ_CACHE_LINE != 64`?", "gold": "Is this the correct place for this assert? Does this routine rely on it being 64, or was this only for testing?"}
{"pred": "Why do we need this change?", "gold": "No pb please"}
{"pred": "Line is too long. [81/80]", "gold": "We need to add indexes here on both `subscriber_id` and `changeset_id` or things will quickly collapse as we build up subscribers ;-) What I would suggest is a unique index on `[:subscriber_id, :changeset_id]` which will also make duplicate entries impossible, and an ordinary index on `[:changeset_id]` for finding the subscribers to a changeset."}
{"pred": "Why do we need this function?", "gold": "use the context versions of everything, e.g. `PostMessageContext` and thread it through the functions. will save you a bunch of refactoring trouble later on."}
{"pred": "This should be `Returns whether the given object (maybe an instance or class) implements the interface.`", "gold": "\"not to be used elsewhere other than\""}
{"pred": "Why is this needed?", "gold": "Thanks for the contribution, @coolderli ! I also think the newPosDeleteWriter need the properties setting ..."}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.", "gold": "These additions seem unrelated to this change?"}
{"pred": "Should this be `iceberg.engine.hive.enabled`?", "gold": "Could we move this to a class for Hadoop configuration properties, like `org.apache.iceberg.hadoop.ConfigProperties`?"}
{"pred": "why is this deleted?", "gold": "The related statements should also be deleted."}
{"pred": "Why do we need this?", "gold": "Shouldn't this line be removed?"}
{"pred": "Would it make sense to use a set here instead of a set?", "gold": "Just move this into `const.py`. It already has similar stuff. Also, make it uppercase since it's a const."}
{"pred": ">newMode = PasscodeMode.Check; [](start = 12, length = 36) why not just set mode to Check?", "gold": "Issue is that `currentMode = newMode;` is called at the end of the method. Passcode screen will come up, but since the activity thinks current mode is biometric check we don't check passcode when submitted."}
{"pred": "Why this change?", "gold": "Need change it back?"}
{"pred": "Use 2 (not 4) spaces for indentation.", "gold": "Didn't we delete this file a while back because it isn't used but people think that it's a security vulnerability that it's checked in?"}
{"pred": "Why is this needed?", "gold": "nit: Looks like this can be removed now"}
{"pred": "Why is this removed?", "gold": "Can probably remove the lines above it too (L60-62), since ProvisionDefaultCA() makes sure the map isn't nil."}
{"pred": "I don't think this is a good idea. If the status handler is not registered, it will be registered twice.", "gold": "Do you think it's worth erroring out? It's likely that this is a configuration error that the user might want to know about?"}
{"pred": "# FIXME: this is broken", "gold": "I think the functional test should not change here, this is probably a test in itself :)"}
{"pred": "Why is this needed?", "gold": "Why this to be a public function?"}
{"pred": "I think this should be `options.merge(timing: false)`", "gold": "I think we can remove the timing for export env vars"}
{"pred": "Why is this needed?", "gold": "wrong import grouping"}
{"pred": "Shouldn't this be `getStringArray`?", "gold": "There is a doubled semicolon ;)"}
{"pred": "Why is this needed?", "gold": "I'm wondering why this isn't <openssl/md5.h>. Seems like one would have to copy the md5.h file into the source tree somewhere for this to compile cleanly. Maybe you meant to use angle brackets instead of quotes?"}
{"pred": "Why did you change this?", "gold": "shouldn't **call** return a boolean?"}
{"pred": "why do you need this check?", "gold": "We don't need to cast to client here. (well, from spell gem not AA etc) We should also make sure the charm is a casted spell before calling SendSpellBarEnable."}
{"pred": "Shouldn't this be `String(256)`?", "gold": "This is not an `id`. This should either be `invocation_time` or `invocated_at` to be consistent with what we are using elsewhere, and also to better rerflect the column's DateTime type. Also, within the context of this table, there is no idea of what `invocation` is. I know that `scanner` may not be future-proof, but we need to find something more descriptive. Perhaps one possibility is to call this `audit_time`."}
{"pred": "Why not just return `tx.GetReceiverAddress()`?", "gold": "should the 'Receiver' be the clawback address in case of clawback transaction?"}
{"pred": "I don't think this should be a constant. It's only used once.", "gold": "@ashishranjan738 -- Where are these consts used? in which pkg?"}
{"pred": "Why did you remove this?", "gold": "The only change I would suggest is moving these lines back below the `templates_path` variable to keep the diffs smaller."}
{"pred": "Why this change?", "gold": "Having it above kept the block info in the cached changes, which could end up confusing things quite a bit."}
{"pred": "Why did you remove the `input_method` option?", "gold": "If the execute_task returns an `ExecutionResult`, the passing of a block would be unnecessary. Instead, the `ExecutionResult` could be presented to the user in some standardized way (iterating over the result of each node, etc.)."}
{"pred": "Why do we need a channel here?", "gold": "Not sure why we make a new channel here. If we don't use this channel, how about creating it inside the `Connect`?"}
{"pred": "Why do we need this lock?", "gold": "There are two question here: 1. If you only modify lastLogId, but the `iter` is not modified, I really don't know whether we can succeed. 2. We will check the if the term has changed in `replicateLogs` (if rollback really happen, the term must have been updated), so I really doubt whether the problem should be fixed in this way. Or you could describe it in more details."}
{"pred": "Shouldn't this be `$step->getFormType()`?", "gold": "Hello @jDolba, I have reviewed your PR and I found one problem. `$step->getFormType()` can return `FormTypeInterface`. You cannot use interface as key for an array. Can you find some better way to fix this? Thank you."}
{"pred": "Why do we need this sleep?", "gold": "i was confused by keyword \"inventory\" here. my understanding is this starts the osconfig-agent which covers inventory lookup and package-management(correct me if i am wrong)."}
{"pred": "I don't think this is used anywhere.", "gold": "These are really meant to be the keys in the capabilities, not the keys of values within the capabilities"}
{"pred": "Why do we need this?", "gold": "This breaks tests on IE because this will import an `esm` bundle. For that reason `sinon` is available as a global in our test suite and never imported. The global is aliased to the proper `es5` file."}
{"pred": "Why do we need this constant?", "gold": "Maybe move all the Loss Recovery constants to a separate file."}
{"pred": "Why do we need this?", "gold": "this field is added so that we can find disk name by device name from attachments"}
{"pred": "import android.app.Activity;", "gold": "Unnecessary new line"}
{"pred": "Why this change?", "gold": "First determine if the namespace already exists, so it's clearer that it's handling namespaces that aren't included in the `c.config.Namespaces`"}
{"pred": "Shouldn't this be `download-links`?", "gold": "What changed in the styles that means we don't need this?"}
{"pred": "Why do we need to cast here?", "gold": "This pattern should be applied to the other instance where NewtonsoftEscapeJProperty is used and you can remove the NewtonsoftEscapeJProperty method."}
{"pred": "\"passing the edges will be deprecated in holoviews 2.0.\"", "gold": "Something to mention in the next changelog/release notes. It will be good to get histogram working consistently with everything else."}
{"pred": "Shouldn't this be `{{.Volume.namespace}}`?", "gold": "What does this contain? Is it PVC namespace or is it openebs?"}
{"pred": "Why is this an interface?", "gold": "Design note: Using local concrete data types on a feature abstraction makes it hard to generalize / replace. This is tolerable so long as this remains a kestrel exclusive feature, but we'd need a different design if this were ever moved to HttpAbstractions."}
{"pred": "Shouldn't this be `R_AS_INT(data_idx)`?", "gold": "this will break R package, you should update the R files accordingly. BTW, the call state should be in the last argument."}
{"pred": "`if (null !== $mediaContext)`", "gold": "Shouldn't we throw an exception if the context is null instead ?"}
{"pred": "This should be `1.10.0-ce`", "gold": "These should both be const, not var right?"}
{"pred": "`default_args` is not used.", "gold": "Rename the directory, match_costers -> match_costs"}
{"pred": "`self.assertEqual(int(count), 2)`?", "gold": "I don't think this should go in the model tests, since it is done in the resource. `PaginatedDeleteTest` seems more appropriate"}
{"pred": "`Using WebDriver after calling quit()` -> `Using WebDriver after calling quit()`", "gold": "It would be better to just change RWD to throw IllegalStateException if you attempt to execute a command after quit (unless it's a second call to quit())"}
{"pred": "Why do we need to stop the exporter here?", "gold": "Could we move this to an example test to allow the compiler to help us ensure it stays up-to-date in the future?"}
{"pred": "Why was this test removed?", "gold": "Maybe we could update these to use $future and then check on stderr? that way when we deprecate stdout we can not have to delete tests."}
{"pred": "Why do we need this cast?", "gold": "Remove this since it always has to be set afterwards."}
{"pred": "Why do we need this change?", "gold": "These two tests were causing us to use too many goroutines with `-race` using the default block change size, I think due to prefetching."}
{"pred": "I don't think you need to pass `requestContext` here. You can just use `self.reader.fetch(startTime, endTime)`", "gold": "Is that `try..except` block really needed? I mean, when it could fail?"}
{"pred": "{ pattern: config.grep || '{debug,hooks,compat,test-utils,}/**.test.js', watched: false },", "gold": "If you only want to run a specific group of tests you can always use `.only` like `it.only()` or `describe.only()`. It may not speed up the globbing process as much as this change here :)"}
{"pred": "nit: `INVALID_PARAMETER_VALUE_EXCEPTION = 'InvalidParameterValueException'`", "gold": "nit: I'd probably rename this to `BATCH_SIZE_RANGES`, to use a slightly more descriptive name."}
{"pred": "Why do we need to set the priority to 90 and 100?", "gold": "aren't these the wrong way around?"}
{"pred": "Why do we need this method?", "gold": "Lets call this getConfigSetService and maybe rename the field now (or later)"}
{"pred": "I think this should be `klogv2`", "gold": "Could / should we make these constants and give them a type?"}
{"pred": "I don't think this is used anywhere.", "gold": "lets stick with lowercase for consistency."}
{"pred": "nit: remove empty line", "gold": "ordering of imports went wrong"}
{"pred": "I think this should be `MetadataTableType.ALL_DATA_FILES`.", "gold": "I think these can all be .name() to get the value we are looking for"}
{"pred": "Why do we need this test case?", "gold": "Is this a good place for these test cases?"}
{"pred": "Is this for debugging?", "gold": "Did you mean to leave the print statement?"}
{"pred": "Why is this necessary?", "gold": "I would do `new BN(Interpreter.LOCKTIME_THRESHOLD)`"}
{"pred": "Please don't use wildcard imports.", "gold": "@ftomassetti I turned the tree walking algorithms into iterators so you don't have to visit every node when you only wanted a few, like for a `findFirst`."}
{"pred": "nit: `TimeoutType` -> `TimeoutType`", "gold": "Need to add type name here to be compatible with proto string representation."}
{"pred": "Why not `log.info(\"Building {} ...\", target);`?", "gold": "This is to let people know that the tooling is doing something during a build. Please leave."}
{"pred": "E127 continuation line over-indented for visual indent", "gold": "Why is the principal changing here?"}
{"pred": "nit: \"an Azure Environment\" -> \"an Azure Cloud Environment\"", "gold": "Naming nit: let's use `AZURE_STORAGE_` prefix for consistency with the other ones."}
{"pred": "`uppy` -> `options`", "gold": "I'm a bit confused. We have an actual `ProgressBar` Uppy React wrapper component that we are testing. Why do we need a mock for it?"}
{"pred": "nit: remove empty line", "gold": "can we use `github.com/pkg/errors`?"}
{"pred": "nit: `actualType` -> `actualType`", "gold": "I changed the name of the arguments here just to help make the code clearer."}
{"pred": "nit: \"and the state of all streams on its inputs, avoiding calling the function unncessarily\"", "gold": "I think either 'avoiding calls to the function' or 'to avoid calling the function ...' would be read better."}
{"pred": "Why this change?", "gold": "@sfricke-samsung -- thanks. saves a few atomic ops which is always good :) The TODO is there to track that this object is storing *both* vectors of shared_ptr and plain pointers to the same data. The shared are to ensure scope, and the plain are for backwards compatibility with existing code that consumed a plain pointer vector (and some code that still does). That should be cleaned up."}
{"pred": "Why is this needed?", "gold": "minor: typo (knowMetricsTypes -> knownMetricsTypes)"}
{"pred": "I don't think this is the right place to put this code. It should be in `QRDescGenerator::typeSupported`.", "gold": "This adds a case-insensitive flag to the type in the RangeSpec, but I don't think RangeSpecs are written to handle case-insensitive comparisons. Take a look at the methods that deal with comparisons when building RangeSpecs, in file Range.cpp. So, I think you would have to do one of two things: a) disable the RangeSpec transformation for case-insensitive comparison operators (the easy way) or b) change the RangeSpec methods to handle case-insensitive comparisons."}
{"pred": "Why do we need this method? Can't we just call `solveMethodInType` directly?", "gold": "I would throw an exception if the type is not solved"}
{"pred": "Why are these being removed?", "gold": "if remove `dt.skipLoad` - then this tests will run. You probably mean opposite?"}
{"pred": "Extra empty line detected at module body beginning.", "gold": "I feel like we do this in a lot of places should we move that out into its own PR?"}
{"pred": "Why remove the `async` keyword?", "gold": "Already asked you in Matrix, but I'll do it here again so it can be discussed publicly. Why?"}
{"pred": "\"remove it and de-indent all the code inside it\" -> \"remove the code inside it\"", "gold": "I think here should be a comma before remove, in all the cases"}
{"pred": "Why do we need to check `hasattr` here?", "gold": "Single quote is used by default in this project."}
{"pred": "Why do we need to reconcile on spc?", "gold": "S1023: redundant `return` statement (from `gosimple`)"}
{"pred": "Why do we need this?", "gold": "`ctx` is unused in Close"}
{"pred": "Missing license header.", "gold": "I'm confused. This exception is thrown when `HeurekaCategory` is not found in database. But this exception extends Http exception. Why? What has database search common with http? If the only reason is that it is the same in the whole project, then fine. But then we have even bigger problem - we don't know how to use exceptions."}
{"pred": "E501 line too long (116 > 115 characters)", "gold": "Is it necessary to add the suffix `on_head`, because it belongs to` bbox_head`?"}
{"pred": "This should be `WITH_MODERN_GRUB`", "gold": "Hmm, I wonder if this should just be e.g. `--with-grub-2.02` instead. (Not sure Autoconf supports periods in these switches.) Today's modern GRUB is tomorrow's ancient GRUB. :) Or maybe we should be specific about the feature this is enabling, which might be safer given that each distro carries so many patches. E.g. `--without-grub-efi-16-suffixes`?"}
{"pred": "Why do we need this change?", "gold": "Add a GetSerialPortOutput method to Instance that way you don't need to access the client, also it makes the call cleaner as you don't have the odd i.Client and path.Base(i.Project), path.Base(i.Zone)"}
{"pred": "Line is too long. [81/80]", "gold": "Line is too long. [104/80]"}
{"pred": "`expectedAssignedCDs` is unused (from `structcheck`)", "gold": "Since CD updates (assignment & power state) are now done in this controller..."}
{"pred": "`opts && opts.parentStack && opts.parentStack.length > 0`", "gold": "Hmm I'd rather not support this option going forward - it seems like a one-off just to work around this particular issue. Would it be fine to just remove the `deepStackTrace` option? The rest of the PR looks great - I love the idea of switching to sets."}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.", "gold": "on the one hand I like how little this is doing. On the other hand, `inbound_mail_parser` is doing most of the work here so maybe it's not as helpful as I originally thought"}
{"pred": "Why is history_depth 10?", "gold": "This line is too long"}
{"pred": "Why this change?", "gold": "This isn't a fatal error, we don't want to crash just because we can't set configs, we have sane defaults set"}
{"pred": "why is this change needed?", "gold": "I wondered why `buffer` was passed into `LookupPath`. What is happening here? Is `buffer[:0]` equivalent to `[]V4TrieEntry{}`, and hence `buffer` isn't needed any more?"}
{"pred": "This should be `user_url(@user_message_author, :host => SERVER_URL)`", "gold": "I don't really like the name of this file, especially the encoding of an implementation detail (the fact that it's a table) in the name. Can we just use `_message_body.html.erb` instead maybe?"}
{"pred": "I don't think we need to add a new field to the `secv1alpha1.Rule` struct.", "gold": "Feel better not to expose our internal implementation in API/CRD, so no need to mention agent here. Consider: EnableLogging indicates whether or not to generate logs when rules are matched. Default to false."}
{"pred": "nit: `spaceId_ != 0 /* only for storage*/`", "gold": "use `NebulaKeyUtilsV3::dataVersionValue()` to replace the literal value?"}
{"pred": "Should this be `log.url.error`?", "gold": "No need for the `\\` here, inside parentheses whitespace is ignored by Python."}
{"pred": "Why is this an empty string?", "gold": "This doesn't seem like the right expected result... it should be the same as the `clientCert` var defined above."}
{"pred": "Why was this removed?", "gold": "need to rename this now."}
{"pred": "I don't think we should ignore blockHash, blockNumber, logsBloom, and transactionIndex.", "gold": "NIT: This shouldn't be a TODO. It is just a note isn't it?"}
{"pred": "Shouldn't this be `message.warning(e)`?", "gold": "I changed this to an error, that seems more appropriate than a warning here."}
{"pred": "Shouldn't this be `!l.IsSystemLog()`?", "gold": "This change could mute unit test failure, but it is better to update unit tests"}
{"pred": "Why do we need to delete here?", "gold": "All other places that access `notificationIdsInUse` are in methods with descriptive names. We should do the same here. Maybe `markNotificationIdAsFree()`?"}
{"pred": "Why do we need this type?", "gold": "keep as `ErrNotFound`, it is the same convention as in other packages"}
{"pred": "`offlineMode` -> `offlineMode`", "gold": "Same here, we need to call `callback` in else branch"}
{"pred": "Why did you remove the null check?", "gold": "At this point we already check that the record is valid and so it could never be nulll"}
{"pred": "Use 2 (not 0) spaces for indenting an expression spanning multiple lines.", "gold": "Would it not be more sensible just to move setting of the title to later in the method rather than duplicating it here?"}
{"pred": "Why do we need this?", "gold": "why not do it in `reclaimExpiredSessions`? and `pushSessionToCache` can delete"}
{"pred": "why do we need this?", "gold": "out_channels/num_outs/type are unnecessary"}
{"pred": "I don't think this is the right way to do this. I think it would be better to use `verify_object_fields` instead.", "gold": "You can create an issue for it and put it on the backlog so we don't forget it."}
{"pred": "Shouldn't this be `--net=none`?", "gold": "So now we are checking twice, both here and in `weaveCIDRsFromConfig`. Not great. I suggest changing the `ok` return of `weaveCIDRsFromConfig` to a messsage (or error?) instead, which we can then log."}
{"pred": "Why did you remove this?", "gold": "An alternative to setting format to the default in Package.__init__ would be to set it in create_package. I think we can assume all packages are created by create_package, but not necessarily by build_package."}
{"pred": "Why do we need this?", "gold": "Let's add fee recipient as well."}
{"pred": "Why is this needed?", "gold": "No need for those with `super-init-not-called`, as pylint already only turns things off for this function and it's needed for the entire function."}
{"pred": "Why do we need this?", "gold": "I think there's another spot for this in DefaultCapabilityMatcher"}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.", "gold": "this name seems pretty vague -- thoughts on a more descriptive method name?"}
{"pred": "This should be reverted.", "gold": "what changed in this line?"}
{"pred": "Why do we need to declare this here?", "gold": "Instead of doing this let's add another function similar to `hasZeroData` for selecting the `reportArgs` since this is all sourced from selected values. Then `hasZeroData` can use this internally, as well as the component itself. Since this function would be internal just for the purpose of avoiding duplication, we don't need to expose it on the component the same way though."}
{"pred": "Why did you remove this?", "gold": "This line was useful for auto-completion, I think it should be re-added with specifying the var name (`$exception`) and simplifying the FQCN."}
{"pred": "Why do we need a goroutine here?", "gold": "This looks like you're not collecting everything from the error channel."}
{"pred": "Indent the first parameter one step more than checkout.", "gold": "This currently violates the Law of Demeter. Using `checkout.plan_name` is the quick resolution."}
{"pred": "should be reverted", "gold": "is there any scenario when `$temporaryFilename` can be null?"}
{"pred": "Why is this needed?", "gold": "this is for the `boolean isRoot = root == rowType` check, which seems to be on purpose, but maybe you could double check whether using ref. equality here is still wanted? Same for `SparkTypeToType`"}
{"pred": "Why do we need to call `roots_drag_icon_update_position`?", "gold": "No need to damage after `roots_drag_icon_update_position`, this is already done in `roots_drag_icon_update_position`"}
{"pred": "nit: `<class 'torch.device'>` -> `torch.device`", "gold": "Have you tested exporting to ONNX with `device=cuda`?"}
{"pred": "Shouldn't this be `if o.jobName != \"\"`?", "gold": "Do we also need to validate `envName` flag then? `appName` and `envName` are used in `initLogsSvc` which are called by `svc logs` from within `Execute()`"}
{"pred": "Shouldn't this be `!empty($url)`?", "gold": "@LukeTowers I think I would prefer that we don't force it, on the basis that: a) some people would be opting to configure their web server to protect against this kind of attack and would disable this feature in October CMS to get a small performance increase. b) it might be a bit misleading to say that `app.trustedHosts` set to `false` disables the feature entirely, just to have it be overridden here regardless."}
{"pred": "Why do we need to change this?", "gold": "i like that you are trying to correct the naming, but its making the PR longer :( i guess in future we can do such changes in separate PRs"}
{"pred": "I'm not sure about this one. I think it should be `This is ARIA Label`", "gold": "Are we marking what the browser's accessibility tree says or what screen readers with those browsers say?"}
{"pred": "Why do we need this?", "gold": "This method should behave as intended, to block until it reads an EOF from the other side."}
{"pred": "\"Health check failed on repository '%s': %v\"", "gold": "I prefer starts with `Failed to xxx`, how about `Failed to perform health check on xxx`?"}
{"pred": "Why do we need these tags?", "gold": "All these calls make me think we should refactor how traces are started and allow \"source tags\" that we initialize a trace with. I'd like to do this in a follow up."}
{"pred": "Why this change?", "gold": "This file shouldn't be in this PR"}
{"pred": "This should be LessSpecificReturnStatement.", "gold": "This now causes `LessSpecificReturnStatement - src/somefile.php:9:32 - The type 'non-empty-list<5|string>' is more general than the declared return type 'non-empty-list<string>' for takesList`, which seems correct to me. The type `non-empty-list<5|string>` contains the type `non-empty-list<string>`. Thoughts?"}
{"pred": "Why change this to info?", "gold": "Are you going to change that back?"}
{"pred": "`use += llvm_link_static`", "gold": "we have a standard format for putting these together elsewhere, it does the filter check first and errors out and then sets based on the value. i think this should be adjusted to do that. there's no logical change, just an approach change."}
{"pred": "\"Please enter the number of steps to delay\" -> \"Please enter the number of steps to delay\"", "gold": "Note this should be `delay` instead of `scale` here. I'll fix this in my branch."}
{"pred": "Why was this removed?", "gold": "`on` likely still needs a bind, similar to `this.resetProgress = this.resetProgress.bind(this)` correct?"}
{"pred": "Why do we need these imports?", "gold": "Considering the trade-off between training speed and accuracy, multi-scale training is temporarily kept. More elegant implementation will be adopted in the future."}
{"pred": "\"time\"", "gold": "Can you move this up along with the other builtin libraries?"}
{"pred": "This should be `config.conf[\"update\"][\"allowUsageStats\"]`", "gold": "I actually think it makes sense to reposition this checkbox after the notifyForPendingUpdateCheckBox. The current order of check boxes is a bit arbitrary now."}
{"pred": "This should be `positional-arg-name`", "gold": "Why do we have both `before` and `after`? Naively I would expect this to work as follows: `plz query changed` with no arguments compares the current working directory state to the last commit (i.e. HEAD, i.e. a noop when directly on a git commit). `plz query changed --since [reflike]` compare the current working directory state to the given reflike. So for CI I would expect to run something like `plz query changed --since @{upstream} (or origin/master I guess)`. And on merge I'd either run everything or just `plz query changed --since HEAD^` (given our workflow) - I don't think I'd ever want to do anything else. Either way I think before and after are slightly confusing terms here."}
{"pred": "E302 expected 2 blank lines, found 1", "gold": "Is there a reason why we can't use `~dst`? It feels like that could be good enough.I would like to avoid extending the filter syntax unless there's an urgent need. :)"}
{"pred": "Should this be `DateTimeOffset.FromUnixTimeSeconds((long) Timestamp).UtcDateTime`?", "gold": "Why local and not UTC?"}
{"pred": "Shouldn't this be `if (diagArea_ && diagArea_->contains(-2013))`?", "gold": "2012 is a retryable error. Will avoiding rgenerating it here cause a difference in behavior in createServer() ?"}
{"pred": "File is not `goimports`-ed (from `goimports`)", "gold": "move to line 14 below"}
{"pred": "\"crosses\" -> \"intersects\"", "gold": "the method name should match teh docs"}
{"pred": "TODO: Test MDv2.", "gold": "Won't this happen automatically when we flip the default version in the config?"}
{"pred": "Why did this change?", "gold": "This would also change back to /var/www/html/docroot if we go that way."}
{"pred": "Nit: `hasImplicitRoleMatches` -> `hasImplicitRole`", "gold": "This still needs to use the new option. We'll need tests for it too."}
{"pred": "This should be `obj.shouldAllowIAccessibleFocusEvent = True`", "gold": "We are no longer including file name in the source files."}
{"pred": "Extra empty line detected at class body beginning.", "gold": "no need for this. Devise provides us with `current_user` and `user_signed_in?` helpers."}
{"pred": "nit: `isEth66Compatible` -> `isEth66Compatible`", "gold": "Would `Object.equals(capability.getName(), NAME)` would be safer, as you wouldn't have to do null checks?"}
{"pred": "Why is this needed?", "gold": "Hmm, I wonder if we should revert #1862 instead? BTW, what failure do you get w/o this line?"}
{"pred": "nit: `invalid 'apiURL' %s in slack config`", "gold": "since there are several places where we do 1) get secret key ref and 2) validate URL, maybe it's worth having a common method? it could also trim spaces as done here (but not at the other places currently)."}
{"pred": "`normalizeToPartialURL` is unused (from `deadcode`)", "gold": "TestNormalize... I would also split them"}
{"pred": "E225 missing whitespace around operator", "gold": "All changes to this file are going to conflict with #7599. Please revert these as well. They will be addressed during the Python 3 transition."}
{"pred": "why not use a RWMutex?", "gold": "Just thought, using spinlock (busy wait with compare and swap) that generates 2 random numbers inside rlock. We know that collisions are rare and we don't need that \"large\" write lock really but lock namely for \"rand\". Or least use a separate Lock (Mutex), namely for \"rand\" (wrap it into method). Mutex will use some sort of spinlock as well but it may use some linked list to make it more fair."}
{"pred": "Why do we need these imports?", "gold": "Can we grab it directly from `__pkginfo__` as that is the source of truth for the version?"}
{"pred": "import graphql.schema.Query;", "gold": "We can revert this to reduce the diff of the PR."}
{"pred": "Shouldn't this be `protoPkg.contains(\"cloud\")`?", "gold": "This looks weird. `isCloud` should define if it is a cloud or no. Here it does it partially, and it can be overriden by protoPkg value (which also an argument to this function). Please make sure that isCloud completely defines the cloud thing. (i.e. it an be as straightforward as moving `protoPkg.contains(\"cloud\")` from here to the place where `assembleGoImportPath` is called."}
{"pred": "Shouldn't this be `fileflags == Lob_Error_Or_Create`?", "gold": "Declaring fileflags to be of type LobTgtFileFlags would eliminate the need for all this casting. And would be safer. (Not a show-stopper though.)"}
{"pred": "Why did you change this to `finest`?", "gold": "This change prevents a user understanding how their server is configured. Best to leave at `info` level."}
{"pred": "This should be `#if defined(SSL_set_tlsext_host_name)`", "gold": "Typically we would add something to the build system environment to differentiate this; also is there an alternative that can be used with older OpenSSL? Other folks who are committers will need to decide if it is worth supporting an older and likely quite vulnerable (to hacks) OpenSSL library."}
{"pred": "`readBlockProducersByHeightTests` is unused (from `deadcode`)", "gold": "`readActiveBlockProducersByHeightTests` is a global variable (from `gochecknoglobals`)"}
{"pred": "I think this should be `sync.getTarget().getIdField()`", "gold": "Falls back on `Constants.ID` if there's no custom field set."}
{"pred": "Why is this needed?", "gold": "I believe this is what we want to rearrange: this in.skip() should not be happening here, in the open method, but in the setOffset() method itself. Because we want to be able to change that offset after the initial open. The setOffset() method will need to throw an IOException, if it's called while the InputStream is still null; or if the skip() call itself results in an IOException()"}
{"pred": "Shouldn't this be `getMethodNameDeclaratorNode().getParent()`?", "gold": "In case the method is `void`, there won't be any children and `getChild(0)` throws. We'll need to check with `isVoid()` for that case. I'll update this when I merge."}
{"pred": "Why do we need this?", "gold": "If the yarpc.Interceptors wrapper will be added to any user interceptor, why not do it transitively. Can save one step for users. Same apply to filter."}
{"pred": "Why do we need this?", "gold": "Is there anything we should do in the event we're unable to renaming the directory?"}
{"pred": "nit: \"it listens on port 8080\"", "gold": "How is this env var populated? Can this be retrieved from cluster metadata?"}
{"pred": "Should this be `FailedTagManagedInternetGateway`?", "gold": "Should probably skip the success event here, since it could be a noop."}
{"pred": "`imageBlurhashes` -> `imageBlurHashes`", "gold": "I added this here because people cards (which depends on cardBuilder) had this added in blurhash. Not sure when this is used though cc @JustAMan"}
{"pred": "Why is this being removed?", "gold": "Let's keep this line in the docstring, to let end users know they shouldn't be using this directly."}
{"pred": "Why do we need to check for self check here?", "gold": "can do the same for other validateXXX()"}
{"pred": "Shouldn't this be const_cast?", "gold": "Why is this necessary?"}
{"pred": "Why do we need this import?", "gold": "Please move this import upper to other similar imports"}
{"pred": "I don't think this is the right way to do this. The problem is that `arch_mcontext_reset_stolen_reg` is called in `arch_mcontext_reset_stolen_reg` which is called in `arch_mcontext_reset_stolen_reg` which is called in `arch_mcontext_reset_stolen_reg`.", "gold": "Include the key word \"translated\". Otherwise the reader will find this confusing."}
{"pred": "Why do we need to memoize this?", "gold": "why. is this called per request? if so this also adds a lock internally. can we not add this at the moment until analyzed as this assumption isnt carried to the several other impls. the only other consumer of this is the http api and that isnt hit often enough for specializations."}
{"pred": "`option.hasAttr('selected')` should be `option.actualNode.selected`", "gold": "I believe this means dependent checks can no longer operate on virtual nodes, which is something we've been pushing for lately. We may need to find a different way to solve this issue, as I don't think we want to cause a regression while fixing a bug."}
{"pred": "Why do we need this?", "gold": "ditto about use of `abspath`"}
{"pred": "nit: `pow(a, p)` -> `pow(a, p)`", "gold": "this reduces the runtime by 50 times"}
{"pred": "Missing license header.", "gold": "Probably best not to have an empty test...."}
{"pred": "Why is this change necessary?", "gold": "direct `newInstance` call is also deprecated now"}
{"pred": "nit: remove empty line", "gold": "We have a bit of a convention where imports are split into three blocks: first Go standard library, then imports from outside the repo, then imports from inside the repo."}
{"pred": "Why do we need this change?", "gold": "Why was this change needed?"}
{"pred": "Shouldn't this be a `ScapyWarning`?", "gold": "can you use this opportunity to remove `.readlines()` useless list creation? (`addresses = [l for l in fd if l.find(\"netmask\") >= 0]`)"}
{"pred": "Space missing after comma.<br>Space missing inside }.", "gold": "Why does this check differ from `plan_ssh.rb`?"}
{"pred": "nit: remove empty line", "gold": "File is not `goimports`-ed (from `goimports`)"}
{"pred": "Why was this removed?", "gold": "It was @lodejard who initially suggested this pattern. I think that it had something to do about prioritizing future writes even if there was a pending write operation ready to handle the newly requested write. I'm not sure I fully understood the explanation for having up to 3 pending write requests, because only having one queued write at a time still makes sense to me. I'll talk to him about it."}
{"pred": "I think it would be better to call it `debug_clear_online_weights` and `debug_dump_online_weights`", "gold": "We have cli --online_weight_clear in cli.cpp"}
{"pred": "Shouldn't this be `if len(addresses) > 0`?", "gold": "So the request.Headers is a map of []string. Are you sure that the HTTP library doesn't already do this split for us?"}
{"pred": "nit: \"Execution stopped, crashed executor/container\"", "gold": "How is this message used? Can we remove the \"crashed executor/container\" part which is an implementation detail?"}
{"pred": "Shouldn't this be `/chromium/heap_snapshot`?", "gold": "Instead of building in routing for a browser-specific command, could you refactor the HttpCommandExecutor to allow arbitrary commands to be registered?"}
{"pred": "Shouldn't this be `watch_video` instead of `watch_video`?", "gold": "Space after `=`."}
{"pred": "Why is this needed?", "gold": "if just need to do something after createInvocation just override and call super first is enough?"}
{"pred": "Should this be `jvm build`?", "gold": "By the way, I fixed `announce` method (missing `super` call to announce JDK version)"}
{"pred": "Why is this needed?", "gold": "I'm not sure about that... This line can produce <code>ClassCastException</code> if <code>Comparator</code> do not check this."}
{"pred": "Why was this changed to return a pointer?", "gold": "There wasn't any special reason for this to return a pointer, right?"}
{"pred": "Why do we need a concurrent hash map?", "gold": "Why the need for a `ConcurrentHashMap`?"}
{"pred": "Shouldn't this be `Setting.value('titleNaturalSort')`?", "gold": "New code should use strict equality `===`"}
{"pred": "I'm not sure if this is the best way to test this, but I don't have a better suggestion.", "gold": "`expect(resources['Notify[local pid]']['events'][0]['desired_value']).to match(/(\\d+)/)` seems clearer."}
{"pred": "why remove changeMd?", "gold": "Removed now-unneeded param."}
{"pred": "I don't think we need to add this to `NETWORK COMMANDS`.", "gold": "(NON-blocking, this can be tracked in follow up issue) @anorth @mishmosh is the toplevel getting too crowded? Should we have a `network` grandparent command, or maybe a `stats` command?"}
{"pred": "Should this be `_x( 'Analytics Service Name', 'Google Analytics' )`?", "gold": "The `_x` function needs to be imported at the top of the file (in addition to `__`)"}
{"pred": "Why do we need this?", "gold": "This is functionally equivalent to the code it replaces."}
{"pred": "Why do we need an ENIType field? Can't we just use the ID?", "gold": "can you change the field name here to \"InterfaceAssociationProtocol\"? same for the Config struct in agent/ecscni/types.go. i think it's better to keep the field name consistent between agent and acs payload"}
{"pred": "Shouldn't this be `Widgets`?", "gold": "See above, same for the other cases."}
{"pred": "Shouldn't this be `4.3`?", "gold": "Shouldn't line 313 be public \\<T\\> SettableGauge\\<T\\> **settable**Gauge(String name) { ? It would also be good to call it a few times and with differnet types (Long, Integer, String) in the test as well."}
{"pred": "# pylint: disable=invalid-name", "gold": "I would prefer to just fix the occurences of this new check rather than disable them"}
{"pred": "Shouldn't this be `https://news.google.com/news/rss`?", "gold": "The tests should be fixed in #4841, so this is no longer needed"}
{"pred": "Why do we need this exception?", "gold": "I think it should been in `SharedKernel` module."}
{"pred": "I don't think we need the `omitempty` here.", "gold": "Can we add some description for this field?  "}
{"pred": ".put(DurationType.class, \"Duration\")", "gold": "Should its name be Time or Duration? I can see them both."}
{"pred": "nit: rename to `toGRPCOptions`?", "gold": "Is this used anywhere?"}
{"pred": "Why do we need this test?", "gold": "I believe that you can use `assert` instead of `require` here and in the following lines"}
{"pred": "Shouldn't this be `&PaymentChannel{}`?", "gold": "In `storagemarket.go` you used `nil` for an unwanted out parameter. Do something consistent (nil seems fine if supported)."}
{"pred": "Why do we need this file?", "gold": "is this a new pattern we use in bee? interesting"}
{"pred": "I don't think we should be returning BucketAlreadyOwnedByYou here. We should be returning BucketAlreadyExists if it's already owned by you.", "gold": "If you think this PR works, i'll clean this up before resubmitting."}
{"pred": "I think this should be `io.servicecomb`", "gold": "are you sure you can read version by this artifactid?"}
{"pred": "Why did you remove the static imports?", "gold": "We can get rid of this import then."}
{"pred": "Shouldn't this be `case GATEWAY`?", "gold": "Should we do our own vtable?"}
{"pred": "Why was this removed?", "gold": "This is the actual fix."}
{"pred": "Why this change?", "gold": "If sync has really a negative impact, this is just moving the issue from 10sec to 60sec. Wonder if you should not expose the (auto)sync params so users can decide."}
{"pred": "nit: `a Decoder for the field value, a bool to indicate whether or not to use exact match for the field names.`", "gold": "should be called => will be called"}
{"pred": "`lastBlock` can be `nil` here.", "gold": "not sure whether we should do this. It may cause problem that delegates upgrade their nodes at different time, that they will have different \"last block time\", some use \"commit time\", some use \"block time\". Potential solution: Only use block time after berling, and then delete it in the next version after berling. Open to discussion."}
{"pred": "Why are we swallowing the exception here?", "gold": "So one question I have is why is the error coming back from `buildReplicaPositions` not an `Assign.AssignmentException`? Is it because it is wrapped in a `SolrException` from the remote node?"}
{"pred": "Shouldn't this be `datatable.rbind([])`?", "gold": "`dt` won't work for some reason?"}
{"pred": "Why not `is not None`?", "gold": "Is this because \"KOALAS_USAGE_LOGGER\" can be `None` ??"}
{"pred": "Why do we need this?", "gold": "I like it but maybe the better name will be EthGasPriceConstants or EthGasPriceEstimatorConstants? but Constants not Config"}
{"pred": "nit: `ctor` -> `ctor`", "gold": "I would inline the constructor as well"}
{"pred": "Why did you change this?", "gold": "I'm not confident about this..."}
{"pred": "nit: `certificateRequestGvk` is unused", "gold": "There is also `v1alpha1.CertificateRequestKind` I think?"}
{"pred": "Why do we need this function?", "gold": "Can we rename it to make it less confusing? Instead of \"sender-gcpbroker\", maybe name it to \"retryable-sender\""}
{"pred": "Why did you remove the format call?", "gold": "So looking at the definition of the `literal()` function in this class, it seems it's possible for it to return null. I guess it's not a concern as we would get NPE on the above call at line 136 when trying to call `.to` if `literal()` returned `null` before even getting to this part that calls `literal().value()`, but something I thought I'd bring up. Perhaps something we might follow up on in another issue or possibly I just missed the workflow that makes `literal()`'s result non-null by the time this `bindLiteralOperration` is called."}
{"pred": "nrmse.addInstance(gt[i], p[i])", "gold": "Why did you break the line? It looks like it is under 80 characters without the break and it is inside parens so no need for backslash anyway"}
{"pred": "why do we need this?", "gold": "@guolinke Don't you mind to rename this variable to `DATATABLE_INSTALLED`, for the consistency with other variables (for example, there are `PANDAS_INSTALLED` but not `PD_INSTALLED`). Also, `DT` is a little bit confusing: sometimes `dt` is used for `datetime`."}
{"pred": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "gold": "We're fine with double quotes here. Just for future reference."}
{"pred": "Why did you remove this?", "gold": "can we keep this around? We should make sure we can distinguish between properly wrapped errors and \"unwrapped\" errors"}
{"pred": "I think it would be better to initialize the topology_at_rasterizer in the constructor of graphicsPipelineCI.", "gold": "`RecordPipelineShaderStage()` might change `topology_at_rasterizer `, according to shader code, so we should check `pInputAssemblyState `first."}
{"pred": "Why do we need `assets.js`?", "gold": "Should we just inline the assets here? I can't think of an advantage to having them in a separate file."}
{"pred": "nit: `detectStale` -> `detectStaleEndpoints`", "gold": "detectStaleEndpoints to be more specific?"}
{"pred": "Why is this test disabled?", "gold": "Please create a new issue for addressing this (if there isn't one already), so it doesn't get lost."}
{"pred": "`heaviestTipSetCh` can be `context.Context`", "gold": "Nothing was ever coming out of this channel because its already being consumed. Create a new channel here and feed it in HandleNewHead method."}
{"pred": "//snippet-sourcedescription:GetPolicy.java demonstrates how to get the details for an AWS Identity and Access Management policy.", "gold": "AWS Identity and Access Management (IAM)"}
{"pred": "Why change to `fine`?", "gold": "This is deliberately at this level."}
{"pred": "I think this should be `output.ConvertError`", "gold": "payload entered on command line is in hex-encoded format should use same processing as in ioctl/cmd/action/actiontransfer.go"}
{"pred": "`$alreadyCreatedDemoPricingGroupsByDomain` -> `$alreadyCreatedPricingGroupsByDomain`", "gold": "should this be kept in the `else` branch?"}
{"pred": "nit: remove empty line", "gold": "Why not put this below \"strings\"?"}
{"pred": "Why do we need this?", "gold": "Make it `internal` if it's just for testing."}
{"pred": "logical-tautology in [1, 2, 3]", "gold": "What is triggering this message in this file?"}
{"pred": "Why this change?", "gold": "Are you sure this should be removed?"}
{"pred": "Shouldn't this be `null`?", "gold": "What's that good for? The field is initialized in the constructor."}
{"pred": "`if self.wfile and self.rfile`?", "gold": "This shouldn't be necessary (same below). Do you have a traceback for me?"}
{"pred": "nit: remove empty line", "gold": "No newline needed here."}
{"pred": "This should be in the second block of imports.", "gold": "Why a separate block?"}
{"pred": "Shouldn't this be `return OPSZ_SCALABLE_PRED;`?", "gold": "Probably better to ask @AssadHashmi or another AArch64 expert for a review rather than me -- @AssadHashmi if you could confirm that these status registers are 64-bit despite having only a few fields?"}
{"pred": "`bip` and `coin` don't seem to be used anywhere.", "gold": "`purpose` and `coin_type` and `account` would mimic the BIP-0044 wording, but it's up to you."}
{"pred": "Why did you change this?", "gold": "Is this the critical change? It does seem wrong to use Select() instead of Checked = true. Not sure why that would pass sometimes and not others, though."}
{"pred": "Why do we need this?", "gold": "Seems a little low, but is this an installer default?"}
{"pred": "I'm not sure if this is the best way to do this, but I'm not sure if there's a better way.", "gold": "Maybe we could provide our own `configure` function that includes `logger._logger = None` because I don't see a use case in kinto for using `reset_logger` besides configuring the logger."}
{"pred": "Why do we need to change this?", "gold": "This will cause the same breakage that was caused when we added Proof to Block. Be sure to let people (infra?) know ahead of time"}
{"pred": "`require.Len(t, ncs.nodes, 2)`", "gold": "Fixed the test; @strib want to validate that this is okay? Seems to be consistent new GC behavior."}
{"pred": "This should be `subdoom`", "gold": "Afaict, nothing cares"}
{"pred": "Why do we need to do this in minimal mode?", "gold": "I must be missing something, but why does not having a node cache imply not neededing to re-embed the block changes, in particular? Isn't it just the fact that we don't do any writes?"}
{"pred": "Why do we need this change?", "gold": "Are these changes from `class` to `struct` breaking if called from an older version of `Datadog.Trace.ClrProfiler.Managed`?"}
{"pred": "Why do we need this import?", "gold": "These are just aliases now"}
{"pred": "<%= @video.title.html_safe %>", "gold": "Does this mean we can remove `raw` from `_head_contents` partial?"}
{"pred": "`this.splashWindow && this.splashWindow.isDestroyed`", "gold": "`isDestroyed` is a function, not a property. This condition will always return false."}
{"pred": "I don't think we need this anymore.", "gold": "Why are we adding these versions?"}
{"pred": "This should be `logger.info('imported %d listens for %s', len(listens), str(user))`", "gold": "fyi, you can do this by doing `.info(\"string %s %s\", formatparam, formatparam2)` instead of doing a string format with `\"str\" % (params)` the idea is that it'll only do the string interpolation if logging is enabled for this level, which theoretically is an optimisation, but in this case probably isn't important"}
{"pred": "I don't think you need the `content_for :javascript do` here.", "gold": "Would this work, as a one liner? `setTimeout(window.location.reload, 5000);`"}
{"pred": "nit: remove empty line", "gold": "Can you move `crypto/tls` into the block at the top with all the other stdlib imports?"}
{"pred": "Why do we need to change this?", "gold": "What is the motivation for this change?"}
{"pred": "If there is a transient failure, this method should return a nil slice and an error. The concrete API will take care of retry logic.", "gold": "OK, so the concrete implementation will loop? But then it's important that this method waits for a while before it returns no messages. To be specific, a GCP implementation that set `ReturnImmediately` to true or false would both satisfy this requirement, but the first would cause busy-waiting."}
{"pred": "I think it would be better to use `NG_RETURN_IF_ERROR` here.", "gold": "The data structure of `MatchClauseContext` may need to be redesigned."}
{"pred": "Why do we need a separate channel here? Can't we just use `gotChan`?", "gold": "You say on the issue that something has to be receiving while the messages are being published. But here it's possible that the publish goroutine starts, and maybe even completes, before Receive is ever called."}
{"pred": "Metrics/LineLength: Line is too long. [82/80]", "gold": "how do we know that the step in question is an approval type step?"}
{"pred": "Why is this import needed?", "gold": "JMX offers normal APIs for this. I don't think you want the glassfish one."}
{"pred": "Why is this needed?", "gold": "Is this still Java 8 compatible? @danieldietrich do we need a separate, modularized Java 9 release also?"}
{"pred": "Shouldn't this be `hipResourceTypeLinear == pTexDesc->resType`?", "gold": "Should update the user input address and filter modes and pass those in fillSamplerDescriptor ?"}
{"pred": "Layout/TrailingBlankLines: Final newline missing.", "gold": "This object should be in `lib/music/show.rb` and you should also wrap this object in the `Faker::Music::Show`."}
{"pred": "Should this be `use_args['_noop'] = executor.noop`?", "gold": "I think logic will have to move to bolt since the vague discussions around bolt run plan --noop is that it would just skip any tasks that don't support_noop rather than error. This is fine until we actually elaborate that though."}
{"pred": "\"github.com/pkg/errors\"", "gold": "File is not `goimports`-ed"}
{"pred": "Why did you change the 404 to 403?", "gold": "why should unknown raise a 403?"}
{"pred": "`c._nextState = assign({}, c.state);`", "gold": "The true clause of your condition, can't this just be c._nextState since `assign({}, c._nextState)` is equal to returning c._nextState, or am I misunderstanding something here?"}
{"pred": "I think this should be `max_results_admin_api`", "gold": "nit: align the leftmost quotes"}
{"pred": "nit: `ClusterMembershipPort is the server port used by the ...`", "gold": "Probably \"server port\" -> \"TCP port\""}
{"pred": "Why do we need this constructor?", "gold": "can you use FilterCodec instead?"}
{"pred": "Shouldn't this be `export.pdfPageSize`?", "gold": "I know there's only two values but I find it a bit confusing that it's true/false. Could you change it to a string enum with values \"portrait\" and \"landscape\"? Then when calling printToPdf you can just do `landscape: Setting.value('export.pdfPageOrientation') === 'landscape'`"}
{"pred": "Why do we need this migration?", "gold": "I think this migration should fail for MDBX if it uses old table names"}
{"pred": "Shouldn't this be `||` instead of `||`?", "gold": "Should this be negated? `!@options[:hosts_file].nil?` Otherwise it'll enter the `if` statement and `nil` will be passed to `HostsFileParser.parse_hosts_file`, which I'm assuming is bad."}
{"pred": "`applyOnReload` -> `reloadOnReload`", "gold": "I'm doubting if adding a bool here is a good idea. Maybe it should be an option object? Otherwise it's hard to extend. But an option object is a bit strange in a fluent API? What do you think @snakefoot ?"}
{"pred": "why is this public?", "gold": "This is used in o.a.l.sandbox.search.PhraseWildcardQuery."}
{"pred": "struct field protocolView should be protocolView", "gold": "view should be loaded on start for both statedb and factory"}
{"pred": "nit: rename to `_readInputTask`", "gold": "Why rename? Just curious..."}
{"pred": "Shouldn't this be `GONE`?", "gold": "Is this needed? I think it calls the super function that already does that."}
{"pred": "Why do we need to repeat here?", "gold": "This might slow down the inference time, are we sure we need to do that?"}
{"pred": "This example is used in https://gocloud.dev/howto/sql/#aws", "gold": "This would read better if you add \"Skip code/lines\" or (exclude/hide code if you follow my earlier suggestion\")"}
{"pred": "why do we need these imports?", "gold": "Looks like glassfish went a bit nuts doing a refactor"}
{"pred": "Why do we need this?", "gold": "nit: allocate the list using the number of processors."}
{"pred": "`javaClasses` -> `initializedClasses`", "gold": "Was this change triggered by baseline?"}
{"pred": "Why was this removed?", "gold": "This code was doing nothing as far as I can tell and was making the SQL find nothing with the new version of Rails. Remove it unless someone can explain why it is there."}
{"pred": "Why is this needed?", "gold": "Setting browser based login as the default for `RestAPIExplorer`."}
{"pred": "Why do we need to resize here?", "gold": "maybe we can do this in Init function?"}
{"pred": "Do we need to check the request ID is not empty?", "gold": "How about if request ID not set, service should generate a random uuid?"}
{"pred": "Why do we need this change?", "gold": "minor: this is an opportunity for you to split these long lines into multiple lines :)"}
{"pred": "Shouldn't this be a `TaurusConfigError`?", "gold": "It would be nice to have exception dumped somewhere (debug logs, info logs)."}
{"pred": "nit: `As allows providers to expose provider-specific types.`", "gold": "So I don't think this is right, as discussed on #657."}
{"pred": "`member_status = \"ACTIVE\" and member_type = \"USER\"`", "gold": "should the group_id = \"{0}\" be group_id = %s You'd still keep the {} for the group_members_{} for the tablename but make the filter clause parameterized."}
{"pred": "Shouldn't this be `if not path.startswith('$'):`?", "gold": "Path can contain variable pattern in the middle. Also, `$` is not enough to tell if this is JMeter variable. We have correct variable detecting somewhere in our code."}
{"pred": "Why do we need this method?", "gold": "@bennothommo can you revert this section? It shouldn't be required."}
{"pred": "Redundant `self` detected.<br>Operator `+=` should be surrounded with a single space.", "gold": "Minor: maybe move the above to a `#fiscal_year` method?"}
{"pred": "Why do we need to remove the build file?", "gold": "You should use the current directory instead - it's a temporary directory that will get removed when the test is done."}
{"pred": "Why do we need to change this?", "gold": "I think we don't need synchronization here."}
{"pred": "nit: \"request\" -> \"request\"", "gold": "I don't think this should be changed since on the reactive side we don't support anonymous users."}
{"pred": "Why do we need to do this?", "gold": "Maybe this `if` should be on line 118?"}
{"pred": "Why do we need this change?", "gold": "Cool. (I thought I had fixed this already in #812.)"}
{"pred": "`interpreters` -> `interpreter`?", "gold": "I intend to do this as soon as I have tests passing."}
{"pred": "Why is this needed?", "gold": "Please remove the `test_*` from the filename - otherwise pytest will try to collect tests from it."}
{"pred": "Shouldn't this be `/dev/drm/1`?", "gold": "Did you file a bug to follow up on this?"}
{"pred": "`read.parquet.vectorization.enabled` -> `read.parquet.vectorization.enabled`", "gold": "Looks like these 4 lines didn't actually change. Can you revert the whitespace changes here?"}
{"pred": "Why is this needed?", "gold": "This can't be merged with any usage of `require 'pathname'` in lib, it's not always available and we don't want false positives for people (where they don't realise they needed to requite it). Its also unnecessary, no other formatter uses it to look up failure locations. See the exception presenter etc for how we format lines."}
{"pred": "nit: extra space after `dataverseAlias`", "gold": "It would be nice to fix the indentation above."}
{"pred": "Shouldn't this be `string|resource`?", "gold": "`short_names` is still optional, so `=` that indicates it has to stay there."}
{"pred": "Why is this needed?", "gold": "missing calling of this method"}
{"pred": "This should be `archerCfn`", "gold": "We could get rid of this dependency being forced on clients by changing the `StackConfiguration` interface abstraction to deal with strings instead of `cloudformation.Parameters` and `cloudformation.Tags`, and internally to the `cloudformation` package translate the input strings into the `service/cloudformation` package specific values hiding that from consumers. I don't think that should be taken on as part of this PR, but I think we should consider doing it at some point."}
{"pred": "Why do we need this?", "gold": "`StressChaos` does not contains a field .spec.action"}
{"pred": "Why do we need this function?", "gold": "Non-int literal strings are no longer coercible to int, I think this is an improvement. Without this change it now reports `InvalidArgument`."}
{"pred": "`sizeof(a) / sizeof(a[0])`", "gold": "I this used anyplace?"}
{"pred": "Why this change?", "gold": "Why was this change required?"}
{"pred": "nit: `missingAdminRole` -> `hasAdminRole`", "gold": "I like that we have this attribute here. However, I think the way we use it right now might be confusing in the future. For example, when only camunda admin is checked, this exception will be instantiated with a message and `missingAdminRole` is `false`. I think that is counter-intuitive. I would expect this exception to have `missingAdminRole` set to `true`. With this explicit information, the exception message could now be generated inside this exception class with the text block that is currently used in the authorization manager. We could maybe generally reuse that text block then also for the case where a user is no admin and also has none of the required permissions. I haven't tried it myself but I think it would be great if we could streamline those things a bit more if we're working on it now. Let me know what you think.  "}
{"pred": "`_psbb` -> `_bb`", "gold": "Not sure why we're creating a new `ByteBuffer` here, ideally this refers to the existing one?"}
{"pred": "Why do we need `DATE_RANGE_OFFSET`?", "gold": "Same here re: `STORE_NAME` to `MODULES_SEARCH_CONSOLE`."}
{"pred": "Should this be `UA-999-10`?", "gold": "I could've sworn I got a `403` myself when I got that response locally. Is `200` what the API would send back for a `permission: false` tag?"}
{"pred": "Why is this public?", "gold": "This attribute was intentionally private. - lets force usage of factory `NewIdentityManager()` - lets ramake to `NewIdentityManager(keydir string)` -> `NewIdentityManager(keystore keystoreManager)`"}
{"pred": "nit: `connectRetryDelay` is unused (from `deadcode`)", "gold": "Is this too frequent?"}
{"pred": "Why is this needed?", "gold": "will this not make it possible to use a zip file, e.g. on other importers who do not have to support it ?"}
{"pred": "`from .socks_client import SocksClientLayer`", "gold": "Needs to be mentioned in `__all__` below."}
{"pred": "`is_repeat_handle_pre_extended_syscall_sigmasks` -> `is_pre_extended_syscall_sigmasks`", "gold": "What if the app's signal handler, executed at pre-syscall for epoll_pwait, executes its own epoll_pwait? For that matter: what happens natively if that happens? I would not expect the kernel to keep a stack -- does that clobber the kernel's stored pre-syscall mask?"}
{"pred": "It is important that the returned list is sorted in ascending order.", "gold": "Nit: missing a space. I think we should phrase the new content a little differently. \"It is important\" isn't very clear. I think it should be \"offsets will be returned in sorted order.\""}
{"pred": "Why is this needed?", "gold": "Can you remove this blank line and put the added import in sorted order (likely your editor will do this)"}
{"pred": "please use LOG_ERR instead of fprintf", "gold": "Even if `pthread_create()` for `ocsp_updater_thread()` fails, `h2o` can continue to serve. But I'm a little worried whether `h2o` should continue to serve in this case. How about you?"}
{"pred": "I think these should be moved to `@wordpress/hooks`", "gold": "I like introduction of these constants for account/container creation, but the `ACCOUNT_CHOOSE` one isn't needed I think. This should instead be an \"empty\" value (either `''` or `0`), to indicate more clearly that this field is not filled. It should be the same for choosing a container."}
{"pred": "Should this be `str1.localeCompare(str2, undefined)`?", "gold": "I noticed that passing in `[]` for the locales argument instead of 'undefined' seems to have the same effect. I think that's preferred over passing in `undefined` as a value, and unfortunately passing in `null` seems to throw an error."}
{"pred": "Shouldn't this be `!strings.HasSuffix(DbCfg.Host, \"]\")`?", "gold": "1. `0` is redundant. 2. We should save result of `strings.LastIndex(DbCfg.Host, \":\")` to a variable and reuse."}
{"pred": "Why do we need this?", "gold": "Do you envision \"new\" servers not supporting header, or is it more a way to test mix of old and new? If so, we could make it a \"private\" (non exported) option."}
{"pred": "Why not just `errors.Wrap(err, \"failed to unmarshal connection config\")`?", "gold": "For future reference. Try not to do refactoring in the same PR which solves some bug or implements some feature. Not to clutter reading. Do it in separate PR."}
{"pred": "Why change this?", "gold": "I'm not sure about changing the flag name. unit is more accurate, but for I think for most people asset is also a fine name to use."}
{"pred": "I think this should be called `ShowConsole`", "gold": "Which windows gets activated? A random other window?"}
{"pred": "Shouldn't this be `event.Context = event.Context.AsV03()`?", "gold": "Just to make sure, this is totally lossless? If I put a v2 there, then it gets upgraded to v3, but my function expects v2, then this is fine and nothing is lost?"}
{"pred": "This should be `write.watermark.field.name`", "gold": "In the past, we have 3 Flink streaming jobs (1 for each AWS region) writing to the same table. We need to write to 3 different watermark table properties (1 for each region). Watermark consumer then use the min value to determine the overall table watermark. A provider pattern similar to `WRITE_LOCATION_PROVIDER_IMPL` can work. A default impl could be a single property name. not sure if there is a simpler way to achieve this."}
{"pred": "Does this need to be exported? I don't see it being used outside this package.", "gold": "Can you change this to `ResolvedUsersMap` and build a new map with both readers/writers? That way, we get the nice side effect of not exposing the internal map of the handle, and simplifying the callers a bit."}
{"pred": "`mongoClient.s.options.cryptdConnectionString !== null`", "gold": "I typically try to avoid nested ternary expressions. Can we rewrite this as if statements? Worst case, can we break it out into its own function?"}
{"pred": "Why do we need to encode here?", "gold": "Do we still support handshakes without SNI present?"}
{"pred": "Line is too long. [81/80]<br>Prefer to_s over string interpolation.", "gold": "Maybe it's because I work too much on a centralized logging system but it could be great to add a \"category\" like \"attribute\", \"substitution\", \"include directive\", \"macro\", \"extension\"..."}
{"pred": "Why this change?", "gold": "it have no sense in python -> it makes no sense in python"}
{"pred": "`openvpnPort` is unused (from `structcheck`)", "gold": "maybe just do a separate implementation of the pool for openvpn case? It's a bit confusing having two methods here."}
{"pred": "`if (topology) topology.close();`", "gold": "how is it possible to have a `topology` that is falsey when we had to call `topology.connect` in order to get here?"}
{"pred": "Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.", "gold": "Do we need this expectation? If we don't call this method on `PlanFinder` there's no way for the `10` to be returned. Seems somewhat redundant. What do you think?"}
{"pred": "Why are we removing these?", "gold": "We need to do the same for edgecore"}
{"pred": "Why do we need the `AutoResetEvent`?", "gold": "This fix has nothing to do with the product change. Just a fix I am making for the test issue."}
{"pred": "Do we still need this TODO?", "gold": "Don't know what should be the default. Lets keep BatchingProcessor for now. And revisit the area after beta."}
{"pred": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "gold": "Ah that's how it's happening, it's probably using the `require_relative` in the optimised one and that counts as a different require to the bare one."}
{"pred": "Why do we need to register nib for cell reuse here?", "gold": "What happens if there is no NIB/XIB with that name?"}
{"pred": "Why this change?", "gold": "this is not necessary?"}
{"pred": "I think this should be `asmsecretres`", "gold": "typo: `asmsecrets \"github...`"}
{"pred": "Shouldn't this be `wp_json_decode`?", "gold": "I think that the JSON encoding should be handled by the control itself, not the sanitization function. This should only confirm that the input is correct, not reformat it  "}
{"pred": "Why do we need this TODO?", "gold": "Should we put a TODO here to route the http.Transport through here?"}
{"pred": "Why do we need to change this?", "gold": "Sorry, could you explain more about the issue? Doesn't ComputerName already default to local computer? > -ComputerName Specifies one or more Hyper-V hosts on which the virtual switch is to be configured. NetBIOS names, IP addresses, and fully qualified domain names are allowable. The default is the local computer. Use localhost or a dot (.) to specify the local computer explicitly."}
{"pred": "I think it would be better to use `log.WithError(err).Infof` here.", "gold": "`allowError` is a big vague. Does this mean the test case is asserting that an error should occur? If it means \"maybe an error can occur, and that's okay\" -- what's an example of this?"}
{"pred": "Shouldn't this be `output.FlagError`?", "gold": "return statements should not be cuddled if block has more than two lines (from `wsl`)"}
{"pred": "Why do we need this?", "gold": "Why does VirtualMachineMetrics have to implement Metric?"}
{"pred": "Why was this removed?", "gold": "line is 121 characters"}
{"pred": "Why not `name.slice(0, 2) === 'on'`?", "gold": "How's that linked esbench looking with slice?"}
{"pred": "Shouldn't this be `os.path.dirname(dirname)`?", "gold": "The split and join was probably done to ensure that this still works on Windows because os.path.dirname works differently depending on the os you're running under :(. It would probably be a little better to do `dirname, _, fn = path.rpartition('/')` if you want something cleaner than the split/join."}
{"pred": "Why is this needed?", "gold": "This is not the right approach. The `Distributor` maintains a model of the current state of the Grid. That model already contains the information about every active session. We don't need to modify `SessionMap` to expose it further."}
{"pred": "Why do we need to reset the timer here?", "gold": "Can you make this a member var as all the other deadlines? Then you can drop the param to resetTimer() and simplify some of the code below iiuc."}
{"pred": "This should be `ROMOL_SPTR res{te.canonicalize(*mol)};`", "gold": "I don't understand the reason for the changes from unique_ptr to ROMOL_SPTR that you made in this file. The pointers aren't being shared or used elsewhere so I don't think there's any reason to make them shared. Did I miss something?"}
{"pred": "Should this be `PLUGINS`?", "gold": "why change the variable name at all?"}
{"pred": "Why do we need this?", "gold": "Since I'm still trying to keep these straight in my head, can you elaborate on what problem this solves?"}
{"pred": "Should we log the exception here?", "gold": "Prefer TextUtils.isEmpty() which handles getReportSpamRecipient() being null"}
{"pred": "Should this be `manifest['application'].key?('gecko') && manifest['application']['gecko']['id']`?", "gold": "Couldn't you just write this as an if/else or a guard clause like on line 87? Just seems a bit weird doing this conditional assignment for essentially an if/else."}
{"pred": ">Include [](start = 16, length = 4) Include and Exclude should be required. #Resolved", "gold": "Do we actually use Include anywhere yet or is this just for completion?"}
{"pred": "I think the default should be `same-domain`.", "gold": "It still bugs me this was misspelled in the standard and now the wrong spelling is the commonly used one :wink:"}
{"pred": "Why did you change md-icon to material-icons?", "gold": "seems we missed de-uglifying this one"}
{"pred": "`NewWorkflowType` is unused (from `deadcode`)", "gold": "i guess these types & cron / retry specific belong to a dedicated util / struct"}
{"pred": "`keys.then(keys => keys.join(''))`", "gold": "Also update line 2205 below"}
{"pred": "Why is this a string and not a number?", "gold": "`direction` is referenced nowhere. Do I miss something?"}
{"pred": "Why was this removed?", "gold": "The two places this was used have been removed so we can fully remove this dependency."}
{"pred": "Why did you remove this?", "gold": "This is a duplicate generation of the same file as below."}
{"pred": "I think this should be `range(cfg.gpus, len(gpu_ids))`", "gold": "We may deprecate `gpus` if `gpu_ids` is specified."}
{"pred": "What is the reason for this change?", "gold": "Right now this is experimental and deeply flaky. We left this at `info` to make debugging user reports a lot easier."}
{"pred": "Why do we need this?", "gold": "unnecessary spaces here are doubling the size of this otherwise extremely useful addition"}
{"pred": "Should this be `OverwriteIfNewer`?", "gold": "I think we should use `FileExistsPolicy.Overwrite` instead. Files _should_ always be newer, but in the unlikely case they wouldn't be, I'm afraid some files would be overwritten and other not, leading to inconsistencies that will be hard to figure out."}
{"pred": "This should be removed.", "gold": "this should probably be removed"}
{"pred": "Why was this changed?", "gold": "Nit: I would actually prefer that pretty JSON is the default, with a flag for compressed JSON. Can we acheive that easily?"}
{"pred": "Nit: `AdditionalIngressRules` -> `AdditionalIngressRules`", "gold": "Will need to think about this one. `additionalIngressRules` feels a bit opaque in terms of eventual outcome."}
{"pred": "Why did you make this public?", "gold": "Can we avoid making this public with the other updates?"}
{"pred": "\"must be equal to\" -> \"must be equal to\"", "gold": "Why did you change this equal instead of less or equal?"}
{"pred": "I don't think we need to add the `blockHash` to the `WorldStateArchive` interface. We can just use the `rootHash` directly.", "gold": "missing final for the blockHash field"}
{"pred": "Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.", "gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping."}
{"pred": "Why do we need to convert to FP32 here?", "gold": "`x_float` instead of `float_x`."}
{"pred": "Why do we need to disable this rule?", "gold": "Is this for `No Babel config ...` from ESLint? If so, it will be fixed in my ES6 PR."}
{"pred": "I think this should be `t.Fatalf`", "gold": "Not important, but the code used to keep checking other cases even after one of them failed, and now it's not. Fine either way for me, just noticing."}
{"pred": "nit: remove empty line", "gold": "I think I saw this line in last PR, you can update your base branch and rebase to avoid this. And it would be awesome if you can rebase instead of merge each time you push PR to the `moby` branch, that will make the commits history clearer."}
{"pred": "Shouldn't this be `if (get_thread_id() != tid)`?", "gold": "If this can change the PC of this thread, it requires handling: we can't blindly execute the syscall and lose control of the thread when the flags include CONTEXT_CONTROL. (Note that most docs imply that setting your own context this way is not supported or has undefined or unpredictable results: any idea how often that's the case, or does it generally work?) We need to handle in a similar fashion to NtContinue or setting another thread's context to ensure we retain control."}
{"pred": "Why do we need this?", "gold": "@huzaifaiftikhar Changed the endpoint as suggested by Stephane in the latest commit."}
{"pred": "I don't think this is the right place to put this. It should be in `types.go`.", "gold": "There's no core.Number yet. ;)"}
{"pred": "This should be `mayactl snapshot revert --volname <vol>`", "gold": "..., ...will be posted."}
{"pred": "Shouldn't this be `block`?", "gold": "Can you update this function to be `ShowHeader`? There is only one use of it at the moment in `tools/fast/series/get_head_block_height.go`."}
{"pred": "This should be `os.getenv('QUILT_USE_TQDM', 'false').lower() != 'true'`", "gold": "@akarve, this disables `tqdm` by default, is it intended? Also name `QUILT_USE_TQDM` might be too specific, IMHO `QUILT_INTERACTIVE` or `QUILT_PROGRESS_BARS` or something might be better."}
{"pred": "`time.Duration(waitTimeoutMillis) * time.Second`", "gold": "unrelated but just changing for consistency with code below it"}
{"pred": "Why did you remove the `else`?", "gold": "This will call `componentWillUpdate()` for mounts because the else clause is removed. It should only be called for updates."}
{"pred": "I think this should be `write` instead of `read`", "gold": "We should add write inheritance too."}
{"pred": "Why do we need to strip here?", "gold": "Please rename this to `LAMBDA_JAVA_OPTS`, and add a short description to the README."}
{"pred": "nit: remove empty line", "gold": "Should be in the same import group."}
{"pred": "`hasattr(pkt, \"type\") and pkt.type == 23`", "gold": "Operator precedence is very confusing here. Care to add parentheses? ` ((version or 0x0303) >= 0x0200)` Same below."}
{"pred": "Please don't change unrelated things.", "gold": "javaparser-core has no dependencies and it should stay that way. So no log4j. And even then there would have been a preference for slf4j."}
{"pred": "Why do we need to re-identify DTA here?", "gold": "Why not just retest all? it's not expensive (I think)."}
{"pred": "Why did you change this?", "gold": "ecr and ecr0 aren't deterministically named here. This change will just cause confusion in the git history. Could you either: a) fix this and make it deterministic b) regenerate the mock until it doesn't flip definitions for ecr and ecr0"}
{"pred": "Why do we need to install `gdebi-core` here?", "gold": "This looks like bash... does this work in ruby? Or is the idea to inject the entire script into the subsequent commands?"}
{"pred": "`traceparentCollection` can be null here.", "gold": "I don't understand why this change is in this PR?"}
{"pred": "Should this be `8.0`?", "gold": "It's a little hard to tell from the diff, but as a result of this PR, the only non-deprecated helpers are: - `has_facet_values?` (probably not long for this world) - `render_facet_partials` (perhaps part of a future component) - `render_facet_limit` (possibly obsolete once components get traction) - `facet_field_in_params` (a little tricky to deprecate at the moment) - `facet_field_presenter`"}
{"pred": "I don't think this is the right way to do it.", "gold": "The right-hand part shouldn't use `__proto__`. Should be just `PersonObject.__proto__ = Realm.Object`."}
{"pred": "Why do we need to panic here?", "gold": "the == case might be legit, or not? If there is no task written since last read, but we trigger a new read, would the min == max? Or should the upper layer handle that case?"}
{"pred": "This should be `new_size - old_size`.", "gold": "Good catch! But is it guaranteed that `old_size < new_size` here? If not, wouldn't we want to take `min(old_size, new_size)` as the copy length?"}
{"pred": "Why is this needed?", "gold": "This is the only one that worries me a bit. It would be good if Brendan signed off on it."}
{"pred": "`hasLongRunningReturnValue` -> `hasLongRunningReturnValue`", "gold": "`LongRunningOperationDetailView` already has `isEmptyOperation`."}
{"pred": "`base64string = base64.b64encode('%s:%s' % (parsed_url.username, parsed_url.password))`", "gold": "This will always add the authorization header to the request object. Is this the right scope for these two lines? If username/password are not defined, it will encode 'Basic :'"}
{"pred": "`self.all.order(updated_at: 'DESC')` -> `self.order(:updated_at)`", "gold": "Don't think a scope adds much value for us here. Also, for future reference, you don't need to use the `self.all` it is implied. Could just be: `scope :updated_at_desc, -> { order(updated_at: :desc) }` No need to change this one now though, it works."}
{"pred": "`Base.rand(0..9).round if digits == 1`", "gold": "I believe `Base.` is unnecessary in this case, as the class already extends `Base`."}
{"pred": "`fillWidth` and `fillHeight` should be `width` and `height`", "gold": "Couldn't this result in images being scaled too small when the width is less than the height assuming the width is still what is being passed here?"}
{"pred": "This should be `offlineMode = plugins.getConfig(\"api\").offline_mode`", "gold": "Here also, let's not cache value on top of file, but use `plugins.getConfig(\"api\").offline_mode` directly where it is needed"}
{"pred": "Shouldn't this be `$config->Catalog->shibboleth_library_cards`?", "gold": "You can combine the two checks into a single `!empty()` check."}
{"pred": "Should this be `>=`?", "gold": "Should we add a warning for anything over say 8M? Just suggesting that is not recommended?"}
{"pred": "`currentUID` is unused (from `deadcode`)", "gold": "Looks like there are no callers left of this function."}
{"pred": "`attachStdin` is unused (from `deadcode`)", "gold": "Should there still be a ` bool` trailing `showOutput`?"}
{"pred": "Please remove this empty line.", "gold": "Did we can change to v1"}
{"pred": "Why do we need to pass `ancestorComponent` here?", "gold": "Can you please double check that this won't break anything?"}
{"pred": "Why is this `null`?", "gold": "optionals, shouldn't need to be stated explicitly"}
{"pred": "This should be `maxGquicVersion = 0x51303439`", "gold": "That seems quite low - why not just 0x5130ffff?"}
{"pred": "Why is this needed?", "gold": "Why is this needed ?"}
{"pred": "Should this be `Bolt::Config.user_path`?", "gold": "`Bolt::Config.user_path` returns `nil` if there's no homedir, so this will still error in that case."}
{"pred": "Shouldn't this be `a.Tag == protocol.ProposalPayloadTag`?", "gold": "nit: use %s for strings and %v for objects."}
{"pred": "Why did you remove these?", "gold": "Same as before, the properties already exists in parent"}
{"pred": "`datetime.datetime.now().year` -> `datetime.datetime.now().year`", "gold": "This fix is not quite correct. The `%s` should be replaced with `version` and the `%d` on line 39 should be replaced with `datetime.datetime.now().year`."}
{"pred": "This should be `strcmp(type, \"gone\") != 0`.", "gold": "Maybe we should only set active = false if `strcmp(type, \"pause\") == 0`?"}
{"pred": "Style/AndOr: Use && instead of and.", "gold": "Same here. and all others."}
{"pred": "Why is this needed?", "gold": "Intentionally committed? I'm not against it, we already have a way to get goroutines without killing the process: `/keybase/.kbfs_profiles/goroutine`."}
{"pred": "Why did you remove this check?", "gold": "I think this blank line may be removed"}
{"pred": "I don't think you need the `toggle` argument here. You can just do `self.marks.pop(url)`.", "gold": "I think this should be a keyword-only argument, i.e. do `def add(self, url, title, *, toggle=False):` and adjust the caller to do `toggle=toggle`."}
{"pred": "Shouldn't this be `UINT8`?", "gold": "@aimanrosli23 Judging from the commit description, I do not know why this file got changed so much. Could you help to double confirm if you do not revert the changes brought by commits: SHA-1: 643623147a1feaddd734ddd84604e1d8e9dcebee * MdeModulePkg/SdMmcPciHcDxe: Send SEND_STATUS at lower frequency SHA-1: 49accdedf956f175041040e677163b7cbb746283 * MdeModulePkg/SdMmcPciHcDxe: Hook SwitchClockFreq after SD clock start"}
{"pred": "Layout/TrailingBlankLines: Final newline missing.", "gold": "How about YAML.load_file()"}
{"pred": "nit: `isInitialized` -> `isInitialized`", "gold": "Maybe make this `volatile` or atomic as this can be set/read from different threads? Also, separately you may want to check if some of the methods here need to be `synchronized`."}
{"pred": "Shouldn't this be `tls_idx`?", "gold": "Check the return value of the drmgr ones."}
{"pred": "Why is this needed?", "gold": "This should be `'cache'`"}
{"pred": "Why do we need this change?", "gold": "The name \"old\" might cause confusion here. After installation, the \"old\" repo is at an archived path, and the new migrated repo is at the old path. Maybe something like \"target\" or \"canonical\"?"}
{"pred": "Why do we need this?", "gold": "I think this is somewhat definitive proof that this error exists in `core` rather than `native`. We are correctly resolving the `readPreference` in the previous line, but you are able to identify that eventually the command generated in `core` is not decorated with the passed `readPreference`. Did you try to solve this there already?"}
{"pred": "I think this should be `to - s.BlockNumber`", "gold": "During genesis sync it can unwind 5M blocks?"}
{"pred": "Why are we skipping this test?", "gold": "was it caused by the removal of removeTaskQueueManager() from this test?"}
{"pred": "Use the new Ruby 1.9 hash syntax.", "gold": "Wouldn't it just be easier to force search_session to return `with_indifferent_access`? Since you've done the hard work already, I don't think there's a problem doing it this way, but.."}
{"pred": "Shouldn't this be `rp->schedule_backoff > gstate.now`?", "gold": "So, such tasks that could possibly not meet the deadline will never have a chance to run? I think this is not nice behavior, especially for those projects who has sometimes some very small tasks after the big one."}
{"pred": "`if (id < 0) {`", "gold": "You should add the check above this line instead. If string is empty, don't even call the function."}
{"pred": "please use LOGGER.warn(\"clientCert for item doesn't exist. Will set it to false.\", ex);", "gold": "If clientCert attribute doesn't exist for some reason I set it to false."}
{"pred": "Why do we need to add `-k` here?", "gold": "Do we need `app_host_flags` variable? We can directly concat with `flags`. `sh.cmd curl_cmd(unless Travis::Build.config&.ssl&.verify ? flags + ' -k' : flags, location, static_file_location), cmd_opts` right?"}
{"pred": "Why do we need to call `stopEventWalk` here?", "gold": "Walk should actually be completed (`onWalkCompleted`) after the event is stopped.   This also makes it possible for monster to walk by smaller paths."}
{"pred": "nit: `weather` -> `whether`", "gold": "typo in `weather` (should be `whether`)"}
{"pred": "This flag is for testing only. Set to true to upgrade with staging windows install media.", "gold": "Thoughts on having the URI as the param, instead of a boolean? The default value would be the normal prod image, and then your test would override with the staging image."}
{"pred": "Shouldn't this be `RDUNUSED_PARAM(n)`?", "gold": "I'm surprised this is needed, but we should probably assert num_scan == 1 at least, otherwise I expect the file is pretty broken."}
{"pred": "Why do we need this change?", "gold": "Could we set a default value for `partitions` and `{0, network::NetworkUtils::getAvailablePort()}` ?"}
{"pred": "Should this be `TimeSpan?`?", "gold": "Needs xml docs. The API names alone don't provide enough explanation about what these mean and how to set them. Also, we should provide some validation of inputs, such as MaxTime must be > MinTime, MinimumRate must be >= 0, etc. Consider making the properties readonly and adding a constructor that does these validations."}
{"pred": "File is not `goimports`-ed (from `goimports`)", "gold": "Would it make sense to create an empty file here, perhaps in a tmp dir, instead of checking empty files into Git?"}
{"pred": "Why this change?", "gold": "This change is due to `clang_format` and is not related to this PR."}
{"pred": "Shouldn't this be `sigprocmask_syscall` instead of `kernel_sigdelset`?", "gold": "Why did you not add the signals to the call of block_all_signals_except() and instead baked them into the function? Ok, if you had a good reason for it, otherwise I would add it to the except list of the function call, since that's what it was meant for."}
{"pred": "Should this be `@NonNull`?", "gold": "Could this be done by mocking objects instead? I feel like this is changing too much of the actual logic just for the tests."}
{"pred": "Why do we need this field?", "gold": "why not just use `ManifestContent` instead of `Integer`?"}
{"pred": "Why do we need to check for EIP2930 here?", "gold": "can we do that in TxValidator?"}
{"pred": "Why is this a string?", "gold": "We definitely want some detailed and thoughtful docs being added to this type."}
{"pred": "Why do we need to check `config.XDPEnabled` here?", "gold": "We would like this code to run, even when `config.XDPEnabled` is false, so that Felix can clean up its own XDP state after a restart."}
{"pred": "Why do we need this?", "gold": "If the status is `ERR_SPACE_NOT_FOUND` why return `SUCCEEDED` ?"}
{"pred": "Why do we need this?", "gold": "It is is more appropriate to use `downsample_first`. If `downsample_first=True`, the downsample block is the first block and it is used for ResNet. If `downsample_first=False`, the downsample block is the last block, which is used by Hourglass network."}
{"pred": "Why do we need this?", "gold": "Would you mind removing the default parameter above? (I doubt I'll ever use defaults again since you still have to protect against callers explicitly passing `null` or `undefined`)"}
{"pred": "This should be `R1723`, not `R1722`.", "gold": "I don't know if there are strict conventions about this, but I think the name of the warning should be the diagnosis, not the suggested course of action. In this case, that would mean changing the name of the warning to `interactive-exit` or something like that."}
{"pred": "Shouldn't this be `crt.GetCommonName()`?", "gold": "If `crt.Spec.CommonName` is not set, and `cert.Subject.CommonName` *is* set, we are not correctly handling it here."}
{"pred": "Why do we need this fixture?", "gold": "This isn't a test, so it shouldn't be named `test_init`. You could name it `cmdhistory_init` or so."}
{"pred": "Why do we need this?", "gold": "why is this pulling from `self.spark_version` config section rather than the `spark` config section (`py-packages` appears to pull from a config section called `spark`)"}
{"pred": "nit: `expected: 0\\ngot: 0\\n`", "gold": "nit: Think it can be one line.."}
{"pred": "Don't use star imports.", "gold": "please inline imports"}
{"pred": "Shouldn't this be `if !p.config.Rootless && len(p.cgroupPaths) > 0`?", "gold": "This check is still correct in some cases, but I guess erroring out is acceptable if someone explicitly asked for an impossible cgroup configuration (now that we could in principle nest things). I would like to see a test for this though."}
{"pred": "\"aggregates changed to operate on just a single column\"", "gold": "Should we update integral to operate on a single column as well?"}
{"pred": "`cudaStream_t s = cuda_get_deep_copy_stream();`", "gold": "Doesn't belong to this PR"}
{"pred": "nit: `registrationToken` -> `registrationTokenID`", "gold": "Just for my own understanding, does aws ecs API take this token as a new input attribute? Which version of the aws sdk? I did not find it in the official aws sdk doc."}
{"pred": "This should be `SF_APP_FEATURE_CODE`", "gold": "Could we shorten this constant to maybe `FEATURE_USER_AUTH`?"}
{"pred": "nit: can we call this `rekeyWorkers`?", "gold": "Any particular reason for 8? I feel like we could probably handle more..."}
{"pred": "Use keyword arguments instead of positional arguments for http call: put.", "gold": "Try to use factory association declaration for default values, so it could minimal the line length. You may write in fetch_job factory like association :repository, factory: :repository."}
{"pred": "I don't think this is the right place to show the cancel button. I think it should be at the bottom of the table.", "gold": "Should the \"cancelled\" class be added regardless of the proposal's state?"}
{"pred": "Why was this removed?", "gold": "nit: random whitespace change, let's try to keep these out of commits unless there are other useful changes."}
{"pred": "`if (models && i < models.length)`", "gold": "Seems kinda dangerous - what if models length is different from paths length?"}
{"pred": "`prune.Mode{}` is the default value, so you can remove this line.", "gold": "set real one plz (get it from DB)."}
{"pred": "Shouldn't this be `sizeof(uafu_irq_buf)`?", "gold": "Should this be initialized to zeroes?"}
{"pred": "Shouldn't this be `fcontext.base.isEmpty()`?", "gold": "The query is already built at this point, so I don't think this particular change actually helps wrt SOLR-10732? (and the `base.size()==0` case is already trivially optimized in `SolrIndexSearcher.numDocs(Query, DocSet)`)"}
{"pred": "Remove unused imports", "gold": "re-add the type in the annotation here"}
{"pred": "I think this should be `fmt.Errorf(\"%v\", err)`", "gold": "Could we simpify it as `cmd.Stderr = &bytes.Buffer{}`?"}
{"pred": "Why not just `return cert.NotAfter.After(now)`?", "gold": "there's enough \"nots\" in here that while it's correct by my review, I'd like to see a small unit test (just passing in an expired and non-expired cert)"}
{"pred": "why this change?", "gold": "File is not `goimports`-ed (from `goimports`)"}
{"pred": "I don't think we need to mention gridded here.", "gold": "The config option should probably have a more specific name. Also it's not for all gridded data but specifically for Images (and its subclasses)."}
{"pred": "Shouldn't this be `clickPreference(otherTheme)`?", "gold": "Be careful. This is not a preference but an option in a dialog."}
{"pred": "Shouldn't this be `if deployment.ClusterName == \"\"`?", "gold": "this will modify the incoming object, which may not be desirable in some cases. i think we should stick with the local var, override it with deployment.ClusterName if deployment.ClusterName not empty"}
{"pred": "Why was this removed?", "gold": "Is this not required?"}
{"pred": "nit: \"Input shapes\" -> \"Input shapes\"", "gold": "You're using scare quotes on these terms instead of defining them."}
{"pred": "This should be `1.10.0-ce`", "gold": "These should both be const, not var right?"}
{"pred": "Why not use try-with-resources here?", "gold": "Can you catch a more specific exception here? Thanks :-)"}
{"pred": "Why do we return an empty result here?", "gold": "This is a bug during handling the recover logic in `common chaos` controller, I fixed in this request when I found it."}
{"pred": "`score_thr` -> `score_ratio`", "gold": "During testing, we adopt the score threshold specified in the config file. Here the threshold is only used for visualization, and the variable name `score_thr` can be misleading. Renaming it to `show_score_thr` would be better."}
{"pred": "Shouldn't this be `site-navigation`?", "gold": "can you make this `nav-primary` please? i'd like to roll with this since the `<ul>` class is `nav`, and primary is the name of the navigation menu"}
{"pred": "I'm not sure if this is the best way to do this, but I'm not sure if there's a better way.", "gold": "@georgehrke Just out of curiosity. Couldn't you combine at least the combine the regex for '-' and '' with groups?"}
{"pred": "Shouldn't this be `AnyObjectType`?", "gold": "I think this is objectively better than looking up the object by name. As a follow-up, I'm going to see whether we do this name-based lookup somewhere else and switch to your method."}
{"pred": "Nit: `(marginX - this.flyoutWidth_ + statusButtonWidth) / this.workspace_.scale`", "gold": "Why are you dividing by scale in the LTR case but not the RTL case?"}
{"pred": "Should this be `POST` instead of `POST`?", "gold": "Update after command rename"}
{"pred": "Shouldn't this be `ModuleSettingsLegacy`?", "gold": "I added this change to fix a bug with the legacy settings wrapper which was preventing it from working properly with the other modules  "}
{"pred": "Why do we need this change?", "gold": "isn't AZKABAN_FLOW_VERSION_2_0 more explicit?"}
{"pred": "Why is this change needed?", "gold": "Please don't leave an empty default"}
{"pred": "Why was this added?", "gold": "This isn't directly related, but the `import React from 'react';` below should be removed. We never import this directly and any modules from it we need are imported through `@wordpress/element`. This was probably added automatically at some point, but we also provide this automatically via `ProvidePlugin`."}
{"pred": "I think this should be `> /dev/null`", "gold": "You can also use `echo: false` instead. Either is fine; I'm just pointing it out."}
{"pred": ">if (!WithHeader) [](start = 16, length = 16) why remove this?", "gold": "what's the reason for this moved line?"}
{"pred": "Shouldn't this be `options.overlayText`?", "gold": "I don't really follow what is happening here, but it looks like this _could_ conflict with the logic on the lines above... should this be an `else if`?"}
{"pred": ">s => s.IsHidden == false [](start = 16, length = 25) I think it's better to use `s.IsHidden` instead of `s.IsHidden == false`", "gold": "`s => s.IsHidden == false` What's the purpose of adding this?"}
{"pred": "`optionNameClefSignerAddress` is unused (from `deadcode`)", "gold": "I would name this `clef-ethereum-address`. We already have a bunch of addresses in Bee, and people might wrongly think that this is yet another address"}
{"pred": "Why is this test skipped?", "gold": "you can just remove this"}
{"pred": "I think this should be `upgrade-cstor-storage-pool-spc`", "gold": "I think we should avoid creating a dummy CR in the case of SPC. Please see if we can avoid this since we will not be patching anything in this CR."}
{"pred": "I don't think you need the `.any?` here.", "gold": "Honestly not sure myself, but do you think it makes sense to move this conditional into the partial?"}
{"pred": "`prefix='qutebrowser-prefix-'` -> `prefix='quitter-prefix-'`", "gold": "As discussed in IRC (just so it doesn't get lost): This probably should be `-basedir-`, not `-prefix-`"}
{"pred": "Why not use `Path.GetDirectoryName`?", "gold": "basepath can be absoluta path and this needs to be supported"}
{"pred": "`QVariant::fromValue(ScreenPosition{screen, position})` -> `ScreenPosition{screen, position}`", "gold": "Didn't get to the commit message"}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.", "gold": "What about raising `ActionView::MissingTemplate` instead? That's what HighVoltage does."}
{"pred": "Shouldn't this be `receivable`?", "gold": "Is it kept for compatibility?"}
{"pred": "nit: `failed to lookup signing address for worker address: %s`", "gold": "I would find it pretty reasonable to add a MinerSigner method on the state view that puts these together."}
{"pred": "Shouldn't this be `<=`?", "gold": "It's stored in `PodDBAdapter.VERSION`. I usually use the expected release version code for that change. As this will be released in AntennaPod 2.2.0, the code would be `2020000`."}
{"pred": "Why this change?", "gold": "What about method name itself? Do we run this for SQL too?"}
{"pred": "Why is this change needed?", "gold": "`instanceUrl` should be `cs1.salesforce.com`. `communityUrl` would be `mobilesdk.cs1.my.salesforce.com`."}
{"pred": "Why is this needed?", "gold": "Let's use `if(name != nullptr)` to remove ambiguity"}
{"pred": "Why are these not implemented?", "gold": "I wonder if it would make sense to have a separate namer for metadata? Metadata files tend to be expressed in a different language from the repo language, and have mutually exclusive concepts. So, `PackageMetadataNamer`."}
{"pred": "Why do we need this constructor?", "gold": "This rule is quite specific to qbft and so I don't think it should be part of the common rules. Would rather the common bft code didn't know anything about contract based voting/validator governance."}
{"pred": "Why not throw an `UnsupportedOperationException` here?", "gold": "This makes our life harder than it needs to be. A Set is unordered by definition. Please remove this method from Set and add it to SortedSet, but with no default implementation. We need to duplicate it then to LinkedHashSet but that's ok, it is the best we can do. Could you please add it also to SortedMap and LinkedHashMap? We are then able to close the original issue."}
{"pred": "Should this be `if response_headers is not None`?", "gold": "we can replace `for` with `params.update(response_headers)`"}
{"pred": "Why is this being removed?", "gold": "Any chance this is available in .NET Core 2.0 now?"}
{"pred": "nit: remove empty line", "gold": "I wonder if it's necessary to let app pass in the context. What app level context should be sent? If no, is it enough for p2p agent to compose a context with network info there?"}
{"pred": "Why is this header needed?", "gold": "Why do we need both includes here?"}
{"pred": "Why do we need to change this?", "gold": "SmartStoreInspectorTest expected results in a certain order"}
{"pred": "I don't think this is the right place to put this check. It should be in the constructor of `data_reader_jag_conduit`.", "gold": "I think that you need something like `m_using_random_node.emplace(m_io_thread_pool->get_local_thread_id());`"}
{"pred": "I think it would be better to move this check into `isUsedLocalVarWithoutInitializer`", "gold": "I don't think we need to maintain a separate set. The problem here is that the \"assignment\" that is killed for this variable is not really an assignment. If we just don't `assign` the variable with the non-existent value, it will not be reported. I pushed a fix."}
{"pred": "nit: `Returns the target split size for this scan.`", "gold": "Let me know if this is too pervasive. It is currently a private method in `BaseTableScan`. It seems both `SparkBatchQueryScan` and `SparkMergeScan` need to know the scan-specific split size when planning tasks. Therefore, I made it open. Another approach is to move all the `planTasks` logic to scan implementations, but for the combine tasks by partition feature, it requires grouping scan tasks by partition first, instead of returning them in an iterator fashion. I'm not sure if this is OK. `SparkMergeScan` also seems to re-implemented its own plan tasks logic."}
{"pred": "`tm[1:maxTrace+1]` is the same as `msg[:maxTrace]`", "gold": "Not sure what is this change doing?"}
{"pred": "I don't think you need the `if mins is not None` here.", "gold": "this is funky. either don't take` minutes` as keyword arg or take both `minutes` and `days` and pass all of them on to `timedelta`. i'm guessing you're aiming for backwards compatibility, but i don't think it's worth it given how confusing this is. atlernatively, make `mins=60*24*30` the default. and that brings me to another issue, `mins=None` is not a very useful default."}
{"pred": "Shouldn't this be `rememberMeServices instanceof RememberMeServices`?", "gold": "Please use a tab for indentation instead of spaces."}
{"pred": "Why this change?", "gold": "I can't believe we didn't see this typo before :))"}
{"pred": "Is this used anywhere?", "gold": "If the logger isn't used, it probably doesn't need to be added."}
{"pred": "Why do we need this?", "gold": "These files should in `/javascript/brython`"}
{"pred": "`imageAlpha.Deprecated != nil && imageAlpha.Deprecated.StateOverride != nil`", "gold": "minor, you can squash these into one `if`"}
{"pred": "Why do we need this change?", "gold": "Used regexes to do most of this, hence different methods of string creation of UUIDs. I plan to follow up with an additional change to remove direct references to google/pborman UUID so `uuid.New()` and `uuid.NewRandom()` will instead use our `primitives.UUID`."}
{"pred": "Why is this needed?", "gold": "Add a TODO here to revisit if this was problematic."}
{"pred": "I think it would be clearer to say that it should be set to `True` when using `IoULoss`, `GIoULoss`, or `DIoULoss` in the bbox head.", "gold": "Note generally it -> It"}
{"pred": "Why is this disabled?", "gold": "Is this relevant to this PR?"}
{"pred": "`opts[:run_in_parallel] == true`", "gold": "Can we instead ensure that `opts[:run_in_parellel]` will always be a boolean? Otherwise we'll have to account for the case when it's a non-boolean value in multiple places, such as any/every other `if` statement."}
{"pred": "Why do we need this?", "gold": "Is this just moved out of the other files? It doesn't seem like this was generated like the other files."}
{"pred": "Why do we need this interface?", "gold": "I started out doing everything `async`, but it was getting in the way of debugging, so I switched back to all synchronous until I got things working. We should probably move everything back to `async` and remove the synchronous versions."}
{"pred": "Why do we need this factory?", "gold": "this looks already too complicated..."}
{"pred": "nit: `for (int32_t i = 0; i < 8; i++)`", "gold": "As for the testings, we better to verify the actual effects of the compaction. Of course, you could do it in future."}
{"pred": "Why do we need this change?", "gold": "should we add a TODO here?"}
{"pred": "Why did you remove the ErrorHandler component?", "gold": "This can be inlined below as `GoogleSitekitDashboardDetails` is an unnecessary wrapper now."}
{"pred": "why do we need to change this?", "gold": "NewVHS -> NewVersionHistories this one looks better"}
{"pred": "Why is this needed?", "gold": "Is this `@missing_text` ?"}
{"pred": "I don't think you need the `(?:/(.+))?` part.", "gold": "Minor suggestion, but wouldn't it be cleaner to simply replace PACKAGE_NAME_FORMAT to all the optional path, then check that the path is empty in validate_package_name? We might also want a helper function to pull out the package name and sub-package path."}
{"pred": "I think this should be `{this.props.i18n('finishEditingFile')}`", "gold": "we should have a way to insert components into a i18n string. so that we could define a translation string like `'%{filename} is being edited'`, and inject the filename `<span/>` at the right place. I imagine there must be a language where the `Editing` text should come after the file name. we can think about that later tho."}
{"pred": "Shouldn't this be `if (!pglob.gl_pathv)`?", "gold": "Probably want break instead of continue."}
{"pred": "Why was this changed?", "gold": "This was on purpose that I would set logging (NoLog=false) and a dummy logger below. The idea is to have better code coverage and test of debug/trace statements. Any reason you have removed this?"}
{"pred": "Why this change?", "gold": "does adding a `Stream.<String>empty()` help here?"}
{"pred": "I think this should be `False` by default.", "gold": "This is not being used anymore, so can be removed."}
{"pred": "nit: `res := fmt.Sprintf(\"IPv4: %s, \", p.ipv4.String())`", "gold": "Is it called some where?"}
{"pred": "Why is this needed?", "gold": "Please remove this extra blank line."}
{"pred": "Shouldn't this be InputFiles?", "gold": "this is really the key, if you don't set this then gradle doesn't wire up the tasks that produce various files inside these configurations as inputs... I think we were just getting lucky before."}
{"pred": "Shouldn't this be `rtest.Error(t, err)`?", "gold": "Sorry if I'm missing something here, but shouldn't this message be about failing to match with an *empty* selector, and/or perhaps even an empty *tag* instead of selector? The message seems a bit disconnected from what we're testing?"}
{"pred": "Why is this needed?", "gold": "nit: please move these inside namespace."}
{"pred": "nit: \"Set debug mode for payments made during a VPN session\"", "gold": "may users try to abuse it?"}
{"pred": "Shouldn't this be `new_buf_size - old_buf_size`?", "gold": "why is this space removed?"}
{"pred": "//go:build !windows", "gold": "Can we remove this other line now then?"}
{"pred": "Please remove this empty line.", "gold": "There's a comma missing here at the end :wink:"}
{"pred": "Why are these removed?", "gold": "Why is this not required any longer?"}
{"pred": "This import should be grouped with the other gogs imports.", "gold": "Indentation seems a bit fucked up here. Run `go fmt`."}
{"pred": "Why do we need this check?", "gold": "any chance in == nil? same below"}
{"pred": "Shouldn't this be `h2o_sysfn(bind, listen_fd, ...)`?", "gold": "We would change the source code of h2o so that certain syscalls will be invoked through the `h2o_sysfn` macro."}
{"pred": "I think it would be better to use `core->device_extensions.vk_khr_timeline_semaphore` instead of `core->device_extensions`.", "gold": "the name kTimelineCannotBeSignalled is confusing. It's not that a TimelineSemphore cannot be signaled... it's the \"VK_KHR_timeline_semaphore is enabled *variant* of the \"binary cannot be signaled\" message. We should probably have a consistent naming scheme to clarify. kBinaryCannotBeSignalledAltTimeline or hide the complexity in Get*VUID functions as needed somehow (pass in the extension structure?)"}
{"pred": "I don't think we need the `percentiles=None` here.", "gold": "Could you add a type hint? `percentiles: Optional[List[float]] = None`"}
{"pred": "Is there a better order? maybe by current_user's use?", "gold": "Maybe putting ones they've used before first would be good, but this is fine for now."}
{"pred": "why do we need both noencTarget and bhTarget?", "gold": "I don't think we need these. Simpler just to put `routetable.TargetType...` inline below."}
{"pred": "I think this should be `cart.proposal.client_data.client == \"ncr\"`", "gold": "Why this instead of the old way?"}
{"pred": "`invisible_animals` and `invisible_undead` can be `const`", "gold": "Just combining the inner if/else blocks like this is what I originally meant (I didn't mean replacing all the invisible checks in the outer if, I realize that would have been a functionality change regarding the rule) This should now be equivalent to `if (RuleB(Pets, LivelikeBreakCharmOnInvis) || IsInvisible(formerpet))` (the second check for the rule being false after the `||` would be implied, anything after the `||` would only be evaluated if the rule was false)"}
{"pred": "Why do we need this?", "gold": "We don't want to write this back to the definition do we? Probably just want to create a local variable for it."}
{"pred": "Shouldn't this be in `onPlaybackEnded`?", "gold": "Good catch! Could you please move this to `PlaybackService.this.onPlaybackEnded`? I think it's more clean if everything is in one single place."}
{"pred": "Why is this needed?", "gold": "We're trying to avoid X.org specific code. So I'm not a fan of this. Can't this be achieved in display server agnostic way?"}
{"pred": "Why do we need this?", "gold": "This class can be removed?"}
{"pred": "nit: remove empty line", "gold": "File is not `goimports`-ed (from `goimports`)"}
{"pred": "Do we still need this TODO?", "gold": "To minimize the possibility of regret, perhaps we name this `ZapLogger`."}
{"pred": "Layout/AlignHash: Align the elements of a hash literal if they span more than one line.", "gold": "This looks a little weird, but it's a feature of the gem we're using. You can give it a symbol representing the method you want called on current_user."}
{"pred": "This should be `nupic.algorithms.anomaly`", "gold": "`Anomaly` imported here, but not used. Please run the changed files through pylint with nupic pylint config and fix pylint findings related to your changes."}
{"pred": "Why do we need to check for `instanceof Node` here?", "gold": "We needed this testutils file after all  "}
{"pred": "Why did this change?", "gold": "line is 161 characters (from `lll`)"}
{"pred": "nit: remove empty line", "gold": "Please re-format/groupimport this line. You might need a little manual work."}
{"pred": "Why do we need to apply customizations here?", "gold": "minor, you can just use `wf` instead of `worker.wf`"}
{"pred": "Why did you change this?", "gold": "I would suggest putting this in the resources directory with the same package as of this test class. Then you can utilize the method azkaban.utils.TestUtils#readResource to read it as string."}
{"pred": "Why do we need this alias?", "gold": "could not import github.com/openebs/maya/pkg/upgrade/templates (invalid package name: \"\") (from `typecheck`)"}
{"pred": "Why is this change needed?", "gold": "a official -> an official"}
{"pred": "Why do we need to check for `config.KINESIS_PROVIDER`?", "gold": "I only want the proxy request for this to run for kinesalite."}
{"pred": "Why did you change this?", "gold": "White space boya?"}
{"pred": "Why do we need this?", "gold": "Maybe ditch these since `StackSummary` is not used anymore."}
{"pred": "Why this change?", "gold": "suggest to indicate the value range & meaning in docstring"}
{"pred": "Why this change?", "gold": "not sure if it works with prometheus by default, otherwise we will have to add this into prometheus config also"}
{"pred": "Why do we need this function?", "gold": "The rule renderer isn't meant to be stateful so probably best to move this out of here"}
{"pred": "Why do we need to pass nil here?", "gold": "passing in a `nil` here just so that the tests can pass in an alternative implementation seems weird, but I don't know what the convention is for doing something like this - @briandowns?"}
{"pred": "`doTRegex` -> `doTRegex`", "gold": "IMO `dot` should be preferred. Remember `aXe`?"}
{"pred": "Why is this needed?", "gold": "Not a huge deal but this will block tests, also, don't they stay open by default now?"}
{"pred": "Why do we need to change this?", "gold": "Could you make it a local constant for now ?"}
{"pred": "Shouldn't this be `if isinstance(value, (int, str)):`?", "gold": "What is this `collection_id` field here?"}
{"pred": "Why is this print statement here?", "gold": "Is there a reason why we don't use logging for this?"}
{"pred": "`DenoralizationException` -> `NormalizerException`", "gold": "Exceptions should be placed in application layer -> infrastructure is aware of application - not the other way around"}
{"pred": "`message-id` should be `message_id`", "gold": "IIRC issue mentioned reporting _symbolic message_ - so in this case it would be `line-too-long`."}
{"pred": "Shouldn't this be `feedbackable_reflectable`?", "gold": "Is this intended to be `spells[spell_id].reflectable` here? Edit: Should be `spells[spell_id].feedbackable`, right?"}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.", "gold": "How should we set this for existing teams?"}
{"pred": "shouldn't this be `false`?", "gold": "It would be nice if we could verify that this is in fact the error we expected. But that's a latent issue, something for the backlog."}
{"pred": "nit: remove empty line", "gold": "I hate then some internal process specific middleware leaks into connection manager :( todo later."}
{"pred": "Why do we need this?", "gold": "Reflects where these files were moved for `pkg_resources`."}
{"pred": "Why is this needed?", "gold": "This should be computed('i18n.locale'...."}
{"pred": "Why do we need to do this?", "gold": "Can you explain to me what goes wrong here? Can the test be adjusted to set up working routing instead?"}
{"pred": "Why did you remove the static imports?", "gold": "We can get rid of this import then."}
{"pred": "Why do we need the id here?", "gold": "Not sure how useful is unlock event."}
{"pred": "Why do we need to pass `lowercaseFields` to `encodeDoc`?", "gold": "Consider make the second argument a `encoderOptions` which includes the `lowercaseFields` just like opening a collection."}
{"pred": "`enrichContextWithAttemptWrapper` -> `enrichTaskAttemptContext`", "gold": "What is the value of renaming this to `ctx`? We generally prefer the longer names because they are easier to read and to type."}
{"pred": "I don't think this is the right place to do this. I think it should be at the end of the function.", "gold": "Hm. This could be a case of left-sided driving, having u-turn lanes on the right side. Good catch, but looks good to me."}
{"pred": ">new() [](start = 16, length = 4) new() #Resolved", "gold": "There was a [JsonPropertyName(\"success\")] here it did serialize fine for me, so I am not sure what was the matter? Also maybe uppercase?"}
{"pred": "`ReadOnlyTransactionProcessorFactory` -> `ReadOnlyTransactionProcessorFactoryFactory`", "gold": "we can just use read env here, pretty sure"}
{"pred": "Shouldn't this be `this.hot.selection.transform`?", "gold": "Could you replace local hook with global hook `afterModifyTransformStart`?"}
{"pred": "`self._files` is a dict, not a list.", "gold": "You seem to be basing your PRs off an commit, which keeps reintroducing these changes, which makes it harder to review your PRs."}
{"pred": "I think this should be `typeof opt_port === 'function'`.", "gold": "Maybe it would simpler to ignore opt_port if type !== 'number'?"}
{"pred": "Should this be `IReadOnlyDictionary<string, object>`?", "gold": "As far as I can tell, `IDictionary<string, object>` implements `IEnumerable<KeyValuePair,string, object>>` so we are just making it more generic. From the issue, I understood that we want to maintain sequence/order. I believe `IEnumerable<>` won't fix the issue."}
{"pred": "Why did you change this to `finest`?", "gold": "This change prevents a user understanding how their server is configured. Best to leave at `info` level."}
{"pred": "nit: `ephemeralDenyList` is unused (from `deadcode`)", "gold": "I will add the following to the list: - api.SpecScale - api.SpecSticky"}
{"pred": "TODO Create transport?", "gold": "As defaultSendPort is being removed, and I don't like TODOs on examples, please remove the whole line"}
{"pred": "Why was this removed?", "gold": "since we are now no longer expecting an input of float to return an empty string, i have removed this test case."}
{"pred": "Why do we need this?", "gold": "It would be cleaner if you were to pack the name&desc in a `MetricName` and pass it to `MakeCounter`"}
{"pred": "Why is this needed?", "gold": "Do you know why do we need this?"}
{"pred": "Do we need this namespace?", "gold": "I guess this using is what causes the build to fail"}
{"pred": "Why is this needed?", "gold": "I like the explicit unregister approach."}
{"pred": "Shouldn't this be `HistogramWithMinMax`?", "gold": "We should able to use 0x30 as summary, and make 0x80 reserved for future."}
{"pred": "Shouldn't this be `tracer.ActiveScope != null`?", "gold": "This allows strategic exclusion of http spans."}
{"pred": "`array $strictTextSearchFields = null`", "gold": "why not just `string[]` instead of nullable"}
{"pred": "Why this change?", "gold": "How does this work? Why isn't each tag after the first picked up as a new arg/flag?"}
{"pred": "Should this be `Datadog-AzureAppServices-ID`?", "gold": "This key is actually yet to be determined. Meeting with the backend team and Garner to discuss."}
{"pred": "Why did you remove this check?", "gold": "Why remove the crash protection? We're just going to get a bug filed on it."}
{"pred": "Should this be `X-XSS-Protection`?", "gold": "Maybe be consistent and name it `FRAME_OPTIONS`."}
{"pred": "Why was this removed?", "gold": "This check/exception is a guard for the next few lines of code. It shouldn't be necessary now. In fact, I don't think you need the if (parentConnection.type == Blockly.INPUT_VALUE) branch at all."}
{"pred": "Why did you remove these tests?", "gold": "Could probably move these constants too?"}
{"pred": "I don't think we should stop the server on missing ping to discovery. We should stop the server on missing ping to discovery.", "gold": "Maybe 'failed' instead of 'missing'. Also do we really need to write ticket numbers here?"}
{"pred": "Why was this removed?", "gold": "Test used to use old bouncycastle dependency which isn't needed anymore from Hadoop. Switched to use builtin Java split."}
{"pred": "Why do we need to decode here?", "gold": "nit: I think this would be more readable as \"Some language names contain Unicode characters\"."}
{"pred": "Why do we need this file?", "gold": "Thanks for adding the header, but I don't think 2017 is a very accurate guess here. Could you do a quick search with git blame and change this accordingly?"}
{"pred": "Why was this removed?", "gold": "Oh interesting - does web-test-runner not resolve package.json files?"}
{"pred": "`ariaDayPrefix=\"P\u00e4iv\u00e4\"` -> `ariaDayPrefix=\"P\"`.", "gold": "Is there a way to derive this value from the locale itself? I feel hardcoding the prefix in the props isn't the right approach, but I'm not sure what the locale file contains exactly."}
{"pred": "Shouldn't this be `componentWillReceiveProps`?", "gold": "I'd much rather see these warnings in our devtools (`debug/index.js`). Strings contribute quite a bit to our file size and moving them there would prevent bloating core."}
{"pred": "I think it would be better to use `String.format(\"select %s, %s from %s\", SmartStore.SOUP_NAME_COL, SmartStore.PATH_COL, SmartStore.COLUMN_TYPE_COL, SmartStore.SOUP_INDEX_MAP_TABLE)`", "gold": "Use `String.format(Locale.US, ...) to avoid the `Lint` warning."}
{"pred": "Why is this a v1.Service?", "gold": "nit: ServiceReference represents a reference to a v1.Service."}
{"pred": "Why do we need to change this?", "gold": "since it changes to the array, how about change the name to `DeviceNames`"}
{"pred": "nit: `RuntimeTLP` -> `RuntimePolicy`", "gold": "Can we avoid this. upgrade engine code should take care of this."}
{"pred": "E225 missing whitespace around operator", "gold": "should also be alphabetized or at least grouped and alphabetized within group"}
{"pred": "# pylint: enable=unused-variable", "gold": "No need for this, as pylint already only turns things off for this function and it's needed for the entire function."}
{"pred": "`can't unmarshal count field into task count or auto scaling config`", "gold": "nit: can we remove \"can't\" from the error message?"}
{"pred": "Shouldn't this be `CVRStatusRecreate`?", "gold": "instead of modifying 'Status' which impacts the state diagram, how about using some annotations on CVR? This can probably help for our upgrade as well. Is this possible? cc: @AmitKumarDas"}
{"pred": "nit: `kubernetes-el7-x86_64` -> `kubernetes-el7`", "gold": "Rename this as KubernetesGPGURL - >KubernetesUbuntuGPGURL , Modify it where ever it is used."}
{"pred": "Why do we need this?", "gold": "I'm not totally sure I like the idea of putting a default fee here, but I guess so long as we make sure to track the default fee of bitcoin core, we're good. We should really also take a look at the byte size of the transaction, and use that to determine what the fee should be. But that could also be a different PR."}
{"pred": "Why did you remove the `em` here?", "gold": "oh yeah, `tail`, `update`, `prepend`, `append`, `subSequence`, `trim` just became effectively constant (without memory leak) :)"}
{"pred": "Why did you remove this check?", "gold": "Can you add back a deprecated `destroyLinks` method for backward compatibility? It can simply proxy `destroyResourceLinks`, and we can remove it in the next major release."}
{"pred": "`parseServerOptions` is unused (from `deadcode`)", "gold": "A reminder that we should discuss whether to rename this to \"sockets\" or \"listeners\"."}
{"pred": "Why is this needed?", "gold": "Why do you need to include this using declaration?"}
{"pred": "Why this change?", "gold": "@halter73 where is this file generated from?"}
{"pred": "Why is this needed?", "gold": "What do these `#if TRUE` accomplish?"}
{"pred": "Why do we need to suppress instrumentation here?", "gold": "Probably a good optimization to have this, but I don't think it's strictly required. For \"legacy\" Activity flows we pass them through an ActivitySource for sampling. So the logic below should also catch these?"}
{"pred": "This should be `view_request_cta_text`", "gold": "@jessieay Intentionally moving away from passing a param?"}
{"pred": "Why did you change this?", "gold": "I think you could condense this code considerably by getting rid of the initialization and foreach loop and simply saying: `$firstname = trim(implode(' ', $nameArr));` What do you think?"}
{"pred": "// eslint-disable-next-line global-require", "gold": "hmm, we actually should _add_ `'use strict'` everywhere  "}
{"pred": "Why did you change this to debug?", "gold": "it's not just fetching override properties here, right?"}
{"pred": "Should this be a `Warn` instead?", "gold": "Is it worth logging the error?"}
{"pred": "Why do we need this class?", "gold": "What's the point of this class?"}
{"pred": "`contentType !== 'mixed' && contentType !== 'movies'`", "gold": "I'm being picky here, but I think I would prefer `toggle` to be kept here and just change the condition to `contentType !== 'movies' && contentType !== 'mixed'` or `!['movies', 'mixed'].includes(contentType)`."}
{"pred": "This import should be grouped with other stdlib imports.", "gold": "Please put this down with the other \"github.com\" imports."}
{"pred": "`push_front_preference` is not used.", "gold": "Minor but probably want `push_front_preference` to have a trailing `_a` to be consistent with the other parameter"}
{"pred": "nit: `caseSensitive` -> `caseSensitiveOnly`", "gold": "Nit: the formatting is a bit off. I would expect this to be 2 indentations from `this.expr = ...` but this is 8 spaces, not 4. Also, most places leave the `);` on the last line of the method arguments."}
{"pred": "Why is this change needed?", "gold": "Ack, @chrisdunelm snuck this class extension past me. This is not a pattern I want to have used..."}
{"pred": "Shouldn't this be `kinto.views.flush`?", "gold": "nitpick: I wonder if we should name it `flush` only (?)"}
{"pred": "I think this should be `sonm_tasks_total`", "gold": "Why gauges, not counters?"}
{"pred": "Why this change?", "gold": "Just making a note here that this may break pre GWs between pre 2.2.0 and 2.2.0 servers. Not sure, will have to experiment/dig a bit more."}
{"pred": "nit: \"Pod Failure\" -> \"Pod Failure\"", "gold": "Shall we rename this status to CONTAINER_FAILED? ^^ cc: @sshardool"}
{"pred": "nit: `FetchTipSets` -> `FetchTipSets`", "gold": "Thinking out loud here: I believe the only reason we need `peer.ID` as a parameter to this method is because we are not persisting blocks from pubsub (instead we are refetching them). If nodes persist the blocks they received over pubsub then I think we can guarantee peers we share a connection with (i.e. that are in the peer tracker) will always have the blocks we are fetching (else how would have we gotten the pubsub message). I imagine the concept of an `initialPeer` can go away once #2962 lands since the peers in the tracker will have the block. Although I don't think that covers the case of fetching blocks our peers have deemed semantically invalid and thus not stored..."}
{"pred": "The standard definitions of CEL functions and operators can be found [here]", "gold": "I know it has no effect but my eyes can't help. Is that line not too long?"}
{"pred": "Why is this being removed?", "gold": "Does that mean we disable service loop prevention for packet generated by local host?"}
{"pred": "I think this should be `raise RuntimeError, \"cygwin is not installed on #{host}\" if host.cygwin_installed? and host.is_cygwin?`", "gold": "It seems a little odd to have both `host.is_cygwin?` *and* `host.cygwin_installed?` defined (with a possibility of having `is_cygwin?` be `true`, but `cygwin_installed?` returning `false`). Do the docs clearly explain the difference?"}
{"pred": "Why do we need to preserve sequence numbers?", "gold": "Does this mean manifests will be written with the v2 schema (i.e. with sequence numbers) even though `TableMetadata` is v1 and the manifest list is written with v1? And this should work because we do a projection on read and sequence number is optional?"}
{"pred": "Rename to `REWRITTEN_FILE_SCAN_TASK_SET_ID`", "gold": "Should we be sharing this property key with the read? Maybe it should be belong to the file-scan-task object itself?"}
{"pred": "I think this should be a `map[string][]BuildInput`", "gold": "Nice! Good idea to move these out of the main struct."}
{"pred": "This should be `return util.CheckErr(err)`", "gold": "Thanks for paying attention to other places this might happen. This one is particularly important; I probably never should have gotten in the habit of CheckErr(), since it does a log.Panic() explicitly, which looks like something else until you look closely. It's supposed to be used places where \"can't happen\" but Things Can Happen."}
{"pred": "Why do we need this enum?", "gold": "Converting this to an enum makes it obvious that I combined things that don't really belong together. It would probably be better to create two enums `StoreType` and `TransportType` (in more appropriate locations). That also makes it necessary to have (at least) two `ServerSettings` classes. `IncomingServerSettings` and `OutgoingServerSettings`. Also, the naming is inconsistent. Maybe it would be better to make the string that is used for import/export explicit, e.g. WEBDAV(\"WebDAV\")."}
{"pred": "`space delimited token list` -> `space delimited token list`", "gold": "It's out of scope for this PR, but I don't find this utility's name to be particularly intuitive. It speaks to nothing of what it does. Does it create a token list? Process one? Get one? `tokenListToArray` would be nice."}
{"pred": "Shouldn't this be `has-value`?", "gold": "The message for this check used the existence of a label to determine the output, which doesn't work with the current schema. So I updated it since the data only needed to know a label was present and not what it was."}
{"pred": "Why do we need this check?", "gold": "nit: \"The current project does not have requested application\""}
{"pred": "Why do we need this?", "gold": "Extend Unit test for this class"}
{"pred": "Should this be `DD_APPSEC_EXTRA_IP_HEADER`?", "gold": "This is this a copy / paste error from above."}
{"pred": "Why do we need this class?", "gold": "this package has to be renamed to `typeinference`"}
{"pred": "Shouldn't this be `anonUser`?", "gold": "This cancels the above null-check I guess."}
{"pred": "Should this be `PROP_TIMER_INTERVAL_IN_MILLIS`?", "gold": "change to timerIntervalInMillis"}
{"pred": "Shouldn't this be `role_none_comment`?", "gold": "`any rules` should be `any roles`"}
{"pred": "This should be `getRecentlyPublishedEpisodesFiltered(page * EPISODES_PER_PAGE, feedItemFilter);`", "gold": "Why does the method need to be renamed? I would just keep the old name and update the other uses (which are only tests). That way, we can reduce code duplication."}
{"pred": "Shouldn't this be `None` instead of `None`?", "gold": "I'm not sure if this is going to work - I think it's fine to keep them hardcoded here, as the statusbar can still show `:`, `/` and `?` even if the key is rebound."}
{"pred": "Why was this removed?", "gold": "@tmetzke shouldn't we replace this library with the `2.12.1` instead of removing it?"}
{"pred": "nit: `NumCommittedSectors` -> `NumSectorSize`", "gold": "uint64 seems excessive here. Should we reduce to a uint32 @whyrusleeping ?"}
{"pred": "Why was this removed?", "gold": "Hmm, I thought this was getting used. These are used elsewhere as a cached value (in `svc deploy` it's `o.targetApp`) but I guess since storage doesn't actually need to validate that the app exists, just that there are local services, we never used it."}
{"pred": "Should we log the error here?", "gold": "To keep it simple, how would you feel about just using r.RemoteAddr? Since every request comes through here I want it to be as lean as possible. Frankly I'm OK with the port showing up in the log; maybe it'd even be useful to someone."}
{"pred": "I think it would be better to move this logic into `grantFoundationBonus`", "gold": "grant bonus depends on both `admin{}` stored in statedb, and `P2Start/End` in local struct, which is kind of weird at Kamchatka height, we add the bonus Start/End epoch into `admin{}`, so it solely depends on `admin{}` stored in statedb"}
{"pred": "This should be `f'Invalid flipping direction {direction!r}'`", "gold": "Use single quote to wrap the str."}
{"pred": "Typo: `allowlist` -> `whitelist`", "gold": "Is the plan to rename this later?"}
{"pred": "Shouldn't this be `Email`?", "gold": "Is there a reason why we need a special case for Email at this point? Is the idea that other methods can turn into Email even if it's not configured as a top-level option?"}
{"pred": "Why panic instead of returning an error?", "gold": "This wording is a bit ambiguos, I first thought it meant the directory has no entries in it. maybe \"dir\" -> \"dir string\"?"}
{"pred": "`m_was_initialized` and `m_was_finalized` are not used.", "gold": "Why do we need both `HPX::m_hpx_initialized` and `HPX:: m_was_initialized`?"}
{"pred": "`rpc name / address` -> `rpc address`", "gold": "also check RPCName?"}
{"pred": "I think this import is unused.", "gold": "Remove unused import"}
{"pred": "why is this `false`?", "gold": "I assume there will never be a scenario where justValidate is expected to be true on a restart"}
{"pred": "Why do we need this?", "gold": "Report listeners are synchronized, even 'though the cache is thread-safe... I've not profiled it, but it may be a cause of contingency. Any better way around this? Also, do listeners **really** need to be synchronized? Can't we just make them thread-safe?"}
{"pred": "Why this change?", "gold": "I don't think this is correct. When `compiler` is not given in `.travis.yml`, the announcement will be `--version`, which results in \"`command not found`\" (though not critical), and the cache slug will lack this information (also not critical)."}
{"pred": "Shouldn't this be `args = []`?", "gold": "Why do this rather than `args = []` in the function signature?"}
{"pred": "Why do we need to freeze this?", "gold": "I think we probably *should* do validation of whether there is a suitable implementation if local-validation is true. I'm not sure how useful that actually is though"}
{"pred": "I don't think this is the right way to do this. I think it should be done in `DatasetAddFeaturesFrom`.", "gold": "@StrikerRUS here may need to concat two data by col."}
{"pred": "Why do we need this change?", "gold": "Why the space?"}
{"pred": "This should be reverted.", "gold": "please resolve the extra indentation"}
{"pred": "why do we need to check the Id here?", "gold": "More proof that this check is needed always."}
{"pred": "Why do we need to clear here?", "gold": "`m_al_comms` now contains smart pointers."}
{"pred": "Why is this needed?", "gold": "Did you do a test run with the compare script? I'm nervous about what happens on all the generators..."}
{"pred": "Why do we need this lock?", "gold": "For a client, we store host, as string c.host. That is what we use for monitoring and statsz. Not sure if its useful here or not. Looks like probably not."}
{"pred": "Why did this change?", "gold": "This change is suspicious. Why did the number of partitions increase?"}
{"pred": "Should this be `@user.admin? || slug_matches?`?", "gold": "I'm still new to this area, so please forgive what may be a stupid question: When would this be false? And do we have a test for that situation?"}
{"pred": "I don't think this is the right place to do this. It should be done when we add a column selection.", "gold": "Should there be any changes to this file at all?"}
{"pred": "nit: `automationPolicy` -> `automationPolicy`", "gold": "The only field being used is the KeyType; Instead, we can probably just make a `keyType` variable here."}
{"pred": "`options.credentials = options.credentials || {}`", "gold": "This should be done by code-gen change happening in the hydra repo. I am tweaking it just to get CI into a 'passing' state"}
{"pred": "Shouldn't this be 1.25.0?", "gold": "Cleaned up when I originally added support for passing `screenContext` here (and later `viewContext`) but that was removed."}
{"pred": "Why did you change this?", "gold": "This looks like a bunch of whitespace fixing that's unrelated. Can you revert?"}
{"pred": "should be removed", "gold": "should be removed instead"}
{"pred": "Why do we need this?", "gold": "should use randomization ?"}
{"pred": "Shouldn't this be `return err`?", "gold": "returning nil because we want to mayactl to exit with 0 status code."}
{"pred": "Shouldn't this be `application/json`?", "gold": "Is this change relevant to the PR? (and I believe we should use `text/plain` considering the fact that it can be displayed using web browsers...)"}
{"pred": "Why did you change this?", "gold": "`[Flags]` is now auto-generated by an argument to the `EnumHint`. (The attributes happen to come out in this order. I don't think it's worth controlling the order.) #Resolved"}
{"pred": "Why do we need this?", "gold": "I think same here - in general we don't need to use Setters / Getters since configParams isn't a public API."}
{"pred": "please use `fmt.Sprintf(\"%s\", programstr)`", "gold": "Why using `fmt.Sprintf` where `fmt.Sprint` would do the work (notice no `f` in function name)?"}
{"pred": "E225 missing whitespace around operator", "gold": "Extraneous blank line."}
{"pred": "I don't think we should change the error message here.", "gold": "nit: syntax : neither -> nor"}
{"pred": "Should this be `HttpHeaderNames.ParentId`?", "gold": "Is it safe to assume that these two keys are always present? `this[string]` will throw a `KeyNotFoundException` if they are not."}
{"pred": "I think this should be \"Execution not created\" instead of \"Execution not created.\"", "gold": "Is the `flowDefinitionId` sufficient to uniquely identify the flow or does it need to be the tuple `<flowId,flowDefinitionId>` ?"}
{"pred": "Shouldn't this be `static|false`?", "gold": "Shouldn't it be in the reverse order? `DateTime::createFromInterface()` returns `self` and accepts `DateTimeInterface`."}
{"pred": "Why was this removed?", "gold": "this check is now redundant. The rest of the function downwards basically does the same thing but with safer checks."}
{"pred": "Why did you add the comma here?", "gold": "Please could you remove the useless space."}
{"pred": "`assert(arc.target >= 0 && arc.target <= Integer.MAX_VALUE);`", "gold": "What's the point of this block (and isn't it effectively dead code)?"}
{"pred": "Should this be `ENV.fetch(\"DISCOURSE_SSO_SECRET\", \"\")`?", "gold": "Put a comma after the last parameter of a multiline method call."}
{"pred": "Why do we need this file?", "gold": "Newline at end of file plz"}
{"pred": "This should be `clusterv1alpha3`", "gold": "Can this be refactored to avoid including the aws sdk in the types that we expose? I know it's not being exposed directly through the types we expose, but I do worry that it might make it easier to accidentally do that in the future and not realize it as easily."}
{"pred": "I don't think you need the `(int)` cast here.", "gold": "Hi thomas, i would propose to indicate in the name, that only the indextime is updated, otherwise somebody might think the whole items is getting updated. I would propose something like \"updateIndexTimeByItem(Item $item)\""}
{"pred": "I don't think this is the right exception to raise here. It should be `InvalidLocatorException`.", "gold": "This is not the right exception class. There is an InvalidSelectorException class that covers bad locators."}
{"pred": "Why is this needed?", "gold": "I assume this came from format?"}
{"pred": "Why do we need this property?", "gold": "I'd suggest a default value of `false` just to make sure existing tasks are ok when they get deserialized after an update to a version containing this code."}
{"pred": "Should this be `km.log.CDebugf(ctx, \"Trying to decrypt with keys = %s\", keys)`?", "gold": "Do we really need this? Seems like it would pollute the logs pretty badly."}
{"pred": "Why is this static?", "gold": "`Vector<byte>.Count` should Jit to const when intrinsic; not sure when `Vector.IsHardwareAccelerated == false` ; however we know `readonly static int` does Jit to const."}
{"pred": "Why do we need this?", "gold": "Can we use a skipIf decorator instead?"}
{"pred": "I think this should be `@return [Integer]`.", "gold": "Missing version tags"}
{"pred": "Why is this needed?", "gold": "I think this should also filter out `validate_resolve_reference` hooks."}
{"pred": "Why is this needed?", "gold": "unrelated, but required fix as metrics branch got broken with the latest main->metrics merge and conflict resolution."}
{"pred": "Why are you removing the copyright?", "gold": "Feel free to remove this line"}
{"pred": "Should this be `I18n.t(\"shared.subscriptions.upcase_user\")`?", "gold": "~~Should this match the key updated above?~~ :+1:"}
{"pred": "Shouldn't this be `defer f.Close()`?", "gold": "`gofmt` allows a more compact form `defer func() { _ = f.Close() }()` or just add `// nolint:errcheck` before `defer`."}
{"pred": "`collateral` is unused (from `structcheck`)", "gold": "collateral is in FIL"}
{"pred": "Why do we need to create a new channel here?", "gold": "We should not create channel of node which are not connected."}
{"pred": "Should this be `database` instead of `db`?", "gold": "I think the docstring should say something like \"Alias for the `source` option\" or something similar."}
{"pred": "I don't think you need the `_fr` at the end.", "gold": "Please use properties without suffix `_fr` so they can work across different languages as @teolemon mentioned"}
{"pred": "Why do we need this?", "gold": "Declaration here is `static` but the definition at the bottom is non-static?"}
{"pred": "I think this should be a `md5.Sum` instead of a string.", "gold": "Hi @myml, thanks for the contribution! `blob` and `blob/driver` are both in the same module, so you shouldn't need to split this change up into multiple Pull Requests. Also, I'd like to see it working, including the implementation for `s3blob` and `gcsblob` (these should be easy, just pass-through to the provider) and `fileblob` (might be trickier...), and a test in `drivertest/drivertest.go`."}
{"pred": "Shouldn't this be `NodeTransportIPv4Addr`?", "gold": "Was it a bug?"}
{"pred": "`attr_value['string'] is not None` -> `attr_value['string'] is not None`", "gold": "# `attr_value['string'] is not None` probably not required as `attr_value['string'] == value` check is already being done"}
{"pred": "`link_hovered` doesn't seem to be used anywhere.", "gold": "You're accessing private variables here - `last_hovered_link` should be public in `TabData`. As for `tabbed_browser._now_focused`, I think you can use `tabbed_browser.widget.currentWidget()` instead."}
{"pred": "Extra empty line detected at body beginning.", "gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping."}
{"pred": "Why do we need this file?", "gold": "We should file a bug for this - we don't need the extensions class if there are no operations on the client"}
{"pred": "Why do we need to set the metrics provider here?", "gold": "Is it possible to import from k8s instead of copy in? :)"}
{"pred": "`$start_time` should be `int`", "gold": "`@param float` can be dropped here."}
{"pred": "Why remove `final`?", "gold": "maybe we can leave this change un-reverted."}
{"pred": "`AbstractJavaAccessNode` extends `AbstractJavaNode`", "gold": "I wouldn't make MethodDeclarator an AccessNode, nor an Annotatable. It's the MethodDeclaration that can be annotated, and has info about the modifiers, and is already an AccessNode"}
{"pred": "Missing license header", "gold": "delete this class"}
{"pred": "Shouldn't this be `[0-9]+`?", "gold": "Replacing `+` (1 or more) with `*` (0 or more) would've also done the trick."}
{"pred": "Why did you remove the throw?", "gold": "I've been meaning to fix this for a while. Thanks."}
{"pred": "I don't think it's buggy if you remove A and B here, MyActivityProcessor.OnEnd is not called.", "gold": "This is adding multiple processor pipelines. I guess you wanted to add multiple processors to the same, single pipeline?"}
{"pred": "Why is this needed?", "gold": "If you need str(x[0]) here, you'll probably need str(x) the line after that I suppose. Also, shouldn't we use `raw()` here instead of `str()`?"}
{"pred": "Why do we need this change?", "gold": "3.6 seconds? what does it stand for?"}
{"pred": "This should be `result.stdout.chomp`", "gold": "If the command fails, is stdout nil or \"\"?"}
{"pred": "Why did you remove the `?api-version` part?", "gold": "Why is api-version now removed in the generated code?"}
{"pred": "from mmdet.utils import Registry", "gold": "We may register all built-in optimizers of PyTorch here to simplify the builder."}
{"pred": "Shouldn't this be `const auto &`?", "gold": "No need for this new variable."}
{"pred": "nit: space after `==`", "gold": "doesn't this enqueue a double render or is that safeguarded somehow"}
{"pred": "Why is this needed?", "gold": "But now you may get DATA RACE reports because c.acc is sometimes changed. I wonder if we should not rework that whole sending subs through route."}
{"pred": "Shouldn't this be `#if !defined(ADIOS_HAVE_PHDF5)`?", "gold": "Use `ADIADIOS2_HAVE_HDF5`, not `ADIOS_HAVE_PHDF5`"}
{"pred": "Why is this change needed?", "gold": "Would be nice to put this in a separate context named `\"with a string and a non-string\"` (since that's what it is -- it's definitely not a non-string and a string!)."}
{"pred": "Why did you change this?", "gold": "Should MAX_PERTABLE_ENTRY here be 10 ?"}
{"pred": "nit: `_bytesEndHeaders = Encoding.ASCII.GetBytes(\"\\r\\n\\r\\n\");`", "gold": "Should move these out of frame into a static class? Similar to reason phrases?"}
{"pred": "Shouldn't this be `instruction.type == TurnType::Lane`?", "gold": "That means we still create `UseLane` instructions but threat them like `Suppressed`? Can we maybe change this in the pre-processing so that we will just emit `Suppress` instructions in these cases?"}
{"pred": "nit: remove empty line", "gold": "no need to move here, iotex-proto is outside of iotex-core and considered same as iotex-address, go-pkgs"}
{"pred": "This should be `#if defined(LINUX) && defined(X86_64)`", "gold": "Looks like a clang-format style violation: should turn Travis red."}
{"pred": "Style/TrailingCommaInHashLiteral: Put a comma after the last item of a multiline hash.", "gold": "I think we need some YARD docs here, particularly to list all the color symbols that are valid. Otherwise users will have to look at the source to discover that."}
{"pred": "I don't think we need the `|| {}` here.", "gold": "Not sure if this needs a doc block or not since it's completely internal, but   for cleaning this up. (@felixarntz docs?)"}
{"pred": "Why did you remove this?", "gold": "The change here is to address what exactly?"}
{"pred": "Why do we need this?", "gold": "Is this really an Option? IIUC, you compute it automatically for the URLOpener case, why would we require a user to fill it in when using the constructor? I.e., can't we drop this and use `adal.MSIAvailable` instead? If that call is expensive, cache it on `bucket`, not `Options`."}
{"pred": "Shouldn't this be initialized to nullptr?", "gold": "Was this done automatically or by hand?"}
{"pred": "Why do we need to check if target was in current group?", "gold": "This looks like it will only work for the first child, since after that we've overridden `desired_group`. Should we have a separate variable for this?"}
{"pred": "\"UNASSIGNED-cache-file-error\" -> \"UNASSIGNED-cache-file-error\"", "gold": "Should this be a constant somewhere?"}
{"pred": "Why do we need these?", "gold": "nit: sort alphabetically."}
{"pred": "Why do we need this?", "gold": "Now, It's redundant, I suppose."}
{"pred": "I don't think we need to deprecate this.", "gold": "nit: The format recognized by tooling is `// Deprecated: [..]` so you likely want this to be, // Deprecated: Use \"go.uber.org/yarpc/peer/peerlist/v2\".Implementation instead."}
{"pred": "Why change this to Info?", "gold": "nit: 1. when formatting input strings, make sure to place them in quotes so we could identify white space issues. i.e. '%s' 2. If there is untyped, non-nil error, you want to log the error string as well."}
{"pred": "Why do we need this?", "gold": "I believe this can be fixed with the original code if you just omit the \".dll\" file extension so it reads `[DllImport(\"Datadog.Trace.ClrProfiler.Native\")]`. On Windows it would look for `Datadog.Trace.ClrProfiler.Native.dll` and Linux/Mac it would look for `Datadog.Trace.ClrProfiler.Native.so`."}
{"pred": "This should be `prefs.edit().putBoolean(UserPreferences.PREF_MOBILE_UPDATE_OLD, prefs.getBoolean(UserPreferences.PREF_MOBILE_UPDATE_OLD, false));`", "gold": "couldn't we just read the boolean as a string (I would assume that this return \"true\" or \"false\"), migrate if to its new value and keep using the same pref key?"}
{"pred": "static char *json_context = NULL;", "gold": "If these variables are only used in main function, move these to the beginning of that function. If there is a foreseeable reason to have them as global statics just let me know."}
{"pred": "`location` -> `location`", "gold": "This one was wrong."}
{"pred": "`allAffectedNodeIDs` is a list of all the nodes that had their underlying data changed, even if it wasn't a user-visible change.", "gold": "What happens if nodes throughout a hierarchy are modified (as they would be)? It looks like we're going to `Reset` once for each `NodeID` affected."}
{"pred": "Why is this removed?", "gold": "> Note that allocation of vmheap fails upon initializing dynamoRIO 64 on WoW64 processes. Thus, we need to pass -reachable_heap to avoid having to make this allocation. This should be solved by changing the default `vmheap_size` to be much smaller than 8GB for x64 DR inside WOW64."}
{"pred": "I think this should be `@exception_presenter.lines(failure_number, colorizer)`", "gold": "Is it really worth expanding our public API for this? After all, isn't calling this the same as calling `notification.fully_formatted(...).lines`? If so, I'd rather not widen our API (and thus, increase our maintenance burden) when it's so simple to get all the lines already."}
{"pred": "Why is this no longer an interface?", "gold": "Is it necessary to keep this class around just to define this constant? Or can we place it somewhere else?"}
{"pred": "Why do we need both `PolicyName` and `PolicyNamespace`?", "gold": "Question - do we cache NetworkPolicy itself? If so, here we can point to NetworkPolicy?"}
{"pred": "Why was this removed?", "gold": "For my view, `Register` means the process of **insert node resource to etcd through api-server**, which is called by upstream rather than here, how about changing the func name to `OnConnected`?"}
{"pred": "`telemetryInitialized` -> `telemetryEnabled`", "gold": "I would prefer an active verb for this property, e.g. `initializeTelemetry`. The reason is that this property refers to something the engine does once on startup. Other properties that use passive voice (e.g. `authorizationEnabled`) refer to a state of the engine during its lifetime."}
{"pred": "Why do we need this property? Can't we just use `this.Methods.Any()`?", "gold": "please use new line to maintain reasonable line width"}
{"pred": "Why do we need this?", "gold": "I would skip this check or add an internal server error response."}
{"pred": "`notary_user` and `notary_password` don't seem to be used", "gold": "missing `{` here (and then `}` after `notary_password = config.notary_password`); it's only going to do the first one"}
{"pred": "Why was this changed?", "gold": "This is odd because it's actually in our generated SiteSettingsPath, not in the SiteLocalSettingsPath (wp-config-ddev.php). Are these two files swapped somehow? I'd expect SiteSettingsPath to be wp-config.php and SiteLocalSettingsPath to be wp-config-ddev.php. BTW, I'm *way* ok with renaming that to SiteDdevSettingsPath."}
{"pred": "`defaultConfigDir` is unused (from `deadcode`)", "gold": "It seems like this must necessarily be a stopgap. Can you please add a TODO(#xyz) to point to the appropriate issue?"}
{"pred": "Shouldn't this be `return startKubeProxy(config)`?", "gold": "Is the return signature necessary since we never actually return if there is a problem (I'm referring to the call to `logrus.Fatalf`). Let's pick a pattern and stick with it."}
{"pred": "Why is this needed?", "gold": "@btecu why is this override needed here? I'm not seeing a `new` being used here."}
{"pred": "Do we need to close the connection here?", "gold": "Should it not be more something like: `MaxAccountConnectionsExceeded` here?"}
{"pred": "nit: space after `default`", "gold": "minor: use a non-default CE service account for testing (since default is handled in a specific way in the code)"}
{"pred": "Can we remove these lines?", "gold": "This is how I ran the 512MiB test. It's probably too much data for a fixture, and makes for longer functional tests (although still less than a minute on my laptop)."}
{"pred": "Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "So we weren't able to hide the fact that the file wasn't pre-generated and had to introduce this \"option\" to detect that?"}
{"pred": "nit: `Codes` -> `Codes`", "gold": "Agree that exporting these maps is the best tradeoff, just registering my ongoing discontent with the lack of `const` collections."}
{"pred": "Please add a docstring to this method.", "gold": "This could probably use `const` as well?"}
{"pred": "Why do we need this change?", "gold": "it doesn't look like these need to be exported?"}
{"pred": "Why do we need this?", "gold": "I think you should remove \"fmt\" here. And change `fmt.Errorf` to `errors.Errorf`."}
{"pred": "Line is too long. [81/80]", "gold": "Here's the `resources` attribute @jferris. I'm not against renaming `Product` to `Resource`, and this one... something else."}
{"pred": "Why are we ignoring the error here?", "gold": "If the context is unused, this is equivalent to `var wg errgroup.Group`."}
{"pred": "`FRAGALIGNRATIO` -> `FRAGALIGN_RATIO`", "gold": "very minor: I'd prefer these two added rows are switched so that fragsizeIsMinimum directly follows fragsize"}
{"pred": "Shouldn't this be `if not host or host.startswith('127.')`?", "gold": "Given that 115 returns `True`, why would this be `False` here?"}
{"pred": "Shouldn't this be `/oauth2/login`?", "gold": "Please move this test method just below `oauth2LoginWithOneClientConfiguredThenRedirectForAuthorization()`"}
{"pred": "Shouldn't this be `c_TimeInfinite`?", "gold": "Why this new configuration?"}
{"pred": "`dupe.array()` -> `dupe.array()`", "gold": "I don't think that we need to check `hasArray` here. I think the reason why this didn't previously check `hasArray` is that the array passed to `DataByteArray` must start at offset 0 and be valid through the array length, so a copy was needed in almost every case. It may be simpler to change this to use `ByteBuffers.toByteArray` and pass the result to create `DataByteArray`."}
{"pred": "Should this be `Baggage` instead of `SpanReference`?", "gold": "`spanReference` -> `baggage`  "}
{"pred": "Shouldn't this be `/-/static/logo.png`?", "gold": "Why the `/-/verdaccio/` ?"}
{"pred": "Why was this removed?", "gold": "Has been waiting for a million years "}
{"pred": "This should be `msg.Date.enum = \"`{VALUE}` is not a valid date value for path `{PATH}`.\";`", "gold": "Minor grammar detail: the 'than' is unnecessary"}
{"pred": "@HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon", "gold": "I think you can just simply fix this line to `self[:2].to_pandas()`"}
{"pred": "I'm not sure if this is the best way to do this. I think it would be better to use `debuggerAddress.startsWith('ws:')`", "gold": "if we are returning the `ws` here when passing in `se:cdp` we can just return it straight or do we have to make a request to get the `ws` address?"}
{"pred": "Should this be `import { registerStore } from './...`?", "gold": "I could add a resolver for this (like above) but it seems more sensible to just change the one reference!"}
{"pred": "nit: `timestamp {} is only {} seconds newer than parent timestamp {}. Minimum {} seconds`", "gold": "not sure \"actual\" adds value - secondsSinceParent is probably closer."}
{"pred": "Metrics/CyclomaticComplexity: Cyclomatic complexity for get_facet_field_response is too high. [8/6]", "gold": "Line is too long. [94/80]"}
{"pred": "`You cannot delete any item. You should modify the existing.`", "gold": "The error should be `At least :number items are required`"}
{"pred": "Why do we need to handle the consensus msg here?", "gold": "singleCaseSwitch: should rewrite switch statement to if statement (from `gocritic`)"}
{"pred": "I don't think this needs to be exported.", "gold": "Could combine this with `encryptionKeyGetter` to have a single `keyGetter` interface. I'm not sure which way is better."}
{"pred": "why do we need this?", "gold": "Is there any security issue here? If we integrate with Hive security (and I don't know if we have or not) is there some notion of re-authentication at connection time?"}
{"pred": "Shouldn't this be `readConcern`?", "gold": "Does this mean we do not support writeConcern on `createCollection`?"}
{"pred": "Same as above RE: segfault possibility", "gold": "I guess `sid` was for `sessionID`, but now it looks strange: `sid.ID`."}
{"pred": "Why do we need to set `SourceSecurityGroupIDs` here?", "gold": "We'll need `infrav1.SecurityGroupBastion` as well"}
{"pred": "I don't think we need this function. We can just call `f.Features().PublicLink` directly.", "gold": "This `fileName` should probably be `remote` and be relative to the Fs root as per normal rclone usage."}
{"pred": "Why did you remove the `k_3` index?", "gold": "That way we are back to having just one index on k_0 So we can really compare the execution times with and without re-indexing"}
{"pred": "Wouldn't it be better to use `Regex` instead of `String`?", "gold": "Expression that uses a negation pattern to exclude all characters that aren't in the expression."}
{"pred": "nit: `RespondServiceHeader` is unused (from `deadcode`)", "gold": "Similar to my suggestion for HTTP, let's remove this and use `ServiceHeader` instead."}
{"pred": "Shouldn't this be `commandSet == globalCommandPath`?", "gold": "The serviceDirOnHost[0:1] was completely wrong. It wasn't just Windows, glad you got this fixed!"}
{"pred": "Why was this changed?", "gold": "Would membership take 10+ seconds to detect the failed node?"}
{"pred": "Should this be a `RuntimeError`?", "gold": "hmm, in this case perhaps the whole try-except could be removed altogether? because if the file does not exist, it's already returning `None`. In any other case it should actually probably fail with the exception, no?"}
{"pred": "I don't think we should ignore the error here.", "gold": "This function does not need to be public"}
{"pred": "Should this be `marginBottom: 0`?", "gold": "  Any chance we can get a CSS class for this? I know it's just in one place but feels like a dangerous precedent to set."}
{"pred": "Why do we need to check for nextMethodName?", "gold": "> && this.Extensions.ContainsKey(\"nextMethodName\") [](start = 96, length = 48) From line 124, looks like we don't need `&& this.Extensions.ContainsKey(\"nextMethodName\")` condition or we don't need line 124 #Closed"}
{"pred": "Why was this removed?", "gold": "Moving this code from compat to core shaves 47 bytes out of compat and only adds 6 bytes to core so I thought it was worth it."}
{"pred": "Why did you remove this?", "gold": "Please use \".NET Core 3\" - i'm trying hard to use one form, and this is the one MS advices"}
{"pred": "Shouldn't we return an error here?", "gold": "Unrelated to this change, but this is a fix for when TestDoStartCgroupInitHappyPath has a failure after the test goroutine has already exited."}
{"pred": "W1618 import missing `from __future__ import absolute_import`", "gold": "Hmm, I'd really expect this to work, and yet it doesn't. I'll investigate later, though it might get Monday until I get the time."}
{"pred": "Why not `std::size_t`?", "gold": "Does this changes affect process building dynamic libraries anyhow?"}
{"pred": "Why is this import needed?", "gold": "Could you limit what is imported here?"}
{"pred": "Why do we need to do this?", "gold": "just to clarify - on line 1074 we update `zip_file_content` for non-local lambdas, but never store it, which means lambda never picks it up"}
{"pred": "`icmpPkt_with_type_code` is unused (from `deadcode`)", "gold": "Golang naming convention is to use camel case `icmpPktWithTypeCode` Often the linter will complain"}
{"pred": "Why is this being disposed?", "gold": "We can do away with assigning the response here too."}
{"pred": "Why did you change this?", "gold": "Bumping the newViewportHeight"}
{"pred": "I think this should be `secondaryy-hll`", "gold": "Is this change correct? Looks like a typo and not sure this should be changed?"}
{"pred": "Why do we need this function?", "gold": "I checked the tests coverage and strangely it look like those three lines are not covered (?!). Do you have the same result on your side ?"}
{"pred": "} <e1> }", "gold": "nit: please try to avoid changing end of the file (it adds a noise to the code review, but does not provide too much value)"}
{"pred": "Why do we need to do this? Can't we just return the `modelsAllOfOnXmsAzureResources`?", "gold": "I don't see the \"only\" part reflected in the code but maybe I'm missing it. Also, the indentation is misleading: the `.SelectMany` calls are perfectly aligned but are *not* operating on the same \"level\". I'd expect the second `SelectMany` to be on the same height as the inner `Where`, just break `pathObj => pathObj<HERE>.Where` and lines won't be that long."}
{"pred": "Should this be `given_or_derived`?", "gold": "It seems like most of these will never be nil, are they optional just in case?"}
{"pred": "Why this change?", "gold": "`.addColumn(\"c1\", IntegerType.INT, true)` means `PkHandle=true`, maybe should add `.setPkHandle(true)` in line 31"}
{"pred": "Why do we need to change this?", "gold": "how about `Cannot encode row key with non-integer type` directly?"}
{"pred": "`fetchUnfinishedExecutions` -> `fetchUnfinishedExecutionsByExecId`", "gold": "The method names `fetchUnfinishedExecutions` and `fetchUnfinishedFlows` are too similar to each other. Would it be better to use the name `fetchUnfinishedFlowsMetadata` since you are only fetching metadata info about the flow?"}
{"pred": "Why do we need to checkout 2.4.0?", "gold": "Note that `sudo` is not available by default on BSDs; there are a few places in the codebase here where that's explicitly worked around by using `su`."}
{"pred": "Why do we need this?", "gold": "ultra nit: missing Oxford comma :P"}
{"pred": "Why is this skipped?", "gold": "This is not supported in Spark 3.0.0-rc2 yet. I'd skip this for now."}
{"pred": "Why do we need to return a slice of `[]byte`?", "gold": "BLOCKING: Why does `Query` return an `*exec.FunctionSignature`?"}
{"pred": "nit: rename to `resetCachesWithoutShutdown`?", "gold": "please move this down to immediately above the assignment to `c.dirtyBcache`"}
{"pred": "I don't think you need this line.", "gold": "Don't need the `, err` part since you've already handled it."}
{"pred": "I don't think you need the `REQUIRE` here.", "gold": "Please add two additional SECTIONs that show that this also works if the dative bond is in the reactant (reaction SMARTS `[O:1]->[H+]>>[O:1].[H+]`) or in the agents (reaction SMARTS `[O:1][H]>N->[Cu]>[O:1].[H]`)"}
{"pred": "nit: `return os.IsNotExist(err)`", "gold": "What happens if the certificate rotation fails and we are prematurely removing this file?"}
{"pred": "I don't think we need the `once.IsRunning()` check here. If `s.once` is not running, then `s.p.Status()` will return `uninitialized`.", "gold": "does this change belong here?"}
{"pred": "I think this should be `CWD` not `CWD`", "gold": "This returns an error"}
{"pred": "Why do we need this?", "gold": "If we think we might someday write a native nftables backend, do you think it would make sense to just use generic dataplane configuration? e.g, `dataplane = iptables | ebpf | nftables`, but for now selecting `nftables` uses iptables in nft compat mode?"}
{"pred": "You can use `headTipSetAndState.Head`", "gold": "Looks like that helper function is general enough that it should reside in testhelpers"}
{"pred": "Why do we need to ignore this?", "gold": "This isn't incorrect IMO, but I think it would be better to fix this in drupal7PostStartAction and also in drupal6PostStartAction. It seems to me like those were both somehow neglected on this. Use drupal8PostStartAction as example. Congrats on your first golang PR! Please make sure to test it manually."}
{"pred": "Why did you remove this?", "gold": "I'd like to ensure that the error message at least has some reference to the flag that is not allowed. Something like `/ERROR(.+)--hosts/` would work."}
{"pred": "\"If you proceed without specifying public subnets\"", "gold": "Should we say \"specifying two public subnets\"?"}
{"pred": "Why do we need to revisit this?", "gold": "Issue number? When? Why?"}
{"pred": "Why do we need this import?", "gold": "You should not rely on `PitchCommand` being imported into speech. Please import it from `speech.commands`."}
{"pred": "Why did you change this?", "gold": "Is this a constant used in the Nessie project itself? If so, perhaps you might consider a follow up for adding `NessieCatalogProperties` class at some point, to help make them more clear to users looking to adopt Nessie coming from the Iceberg repo itself  "}
{"pred": "I think this should be `ReadLevel` and `MaxReadLevel`", "gold": "maybe we should rename: MinTaskID -> MinTaskIDExclusive, MaxTaskID -> MaxTaskIDInclusive,"}
{"pred": "Why do we need to change this?", "gold": "You may need to make this configurable if we expect people to be able to use the normal Nvidia runtime on other Linux distributions like Ubuntu or Debian."}
{"pred": "Shouldn't this be `Subscribe`?", "gold": "Originally the DenyExport was a subscribe permission because it meant that if on this LN connection, if we deny export of \"foo\" it means that it would reject a subscription (hence subscribe permission) on \"foo\" from the other side. Now you are changing to simply not allowing this server to publish on \"foo\". I am not saying this is wrong, but we completely flip the meaning."}
{"pred": "`opmask_with_dsts` -> `disasm_mask_with_dsts`", "gold": "> k1 src0 src2 -> dst s/src2/src1/ nit: k1 is actually src0 according to instr_get_src(instr, 0) which makes this a little confusing"}
{"pred": "Why do we need to change this?", "gold": "I believe that you meant to have the following on the second one, right ? `dataDirStat.Mode()^0077`"}
{"pred": "`offset` should be a `uint64`", "gold": "The reason a `ByteCount` is used here, is that the H2 mapping in gQUIC requires this layer violation, which is why `CloseRemote` is not part of the public API. This layer violation will be resolved in IETF QUIC"}
{"pred": "return IsEffectInSpell(...) ?", "gold": "I dig the helper function!"}
{"pred": "// package samples contains sample programs using the pubsub API", "gold": "Please add the Copyright header."}
{"pred": "Why do we need this import?", "gold": "Is this the best way to import `FileSystemTarget`?"}
{"pred": "Why not use `thread_id_t`?", "gold": "Wait -- os_local_state_t.tid is thread_id_t though, so we need to read a pointer-sized value via READ_TLS_SLOT_IMM, rather than changing these locals to ints. Maybe have a READ_TLS_TIDSZ_SLOT_IMM or sthg."}
{"pred": "Shouldn't this be `clrstack -i`?", "gold": "Don't use ! in the messages because it isn't used on xplat. There is a SOSPrefix define that can be used (blank on xplat and ! on Windows). Do we really need 3 newlines?"}
{"pred": "Why do we need this check?", "gold": "print out what we got here in the error"}
{"pred": "`select_expr` is not used in this function.", "gold": "Does this need to be global?"}
{"pred": "Why is this change needed?", "gold": "Yep, could be simplified. Now looks like other *Map.values() impls"}
{"pred": "Why do we need this step?", "gold": "This method will be for debug?"}
{"pred": "`// ErrInvalidPassword is returned when the password for decrypting content where private key is stored`", "gold": "// Key returns the private key for a specified name that was encrypted with the // provided password. If the private key does not exists it creates a new one // with a name and the password, and returns with `created` set to true."}
{"pred": "Why is this needed?", "gold": "Adding the type hints revealed that it was necessary to distinguish between a ``PackageEntity`` and a ``ClassEntity``, because the ``ClassEntity`` has additional attributes that were dynamically added in the previous code, which confused ``mypy``."}
{"pred": "I think this should be `unsupported_property('add_prefix', deprecated=True)`", "gold": "These two functions should be available now."}
{"pred": "error strings should not be capitalized or end with punctuation or a newline", "gold": "`fi` is what the result of Stat is called elsewhere in this file not `finfo`"}
{"pred": "Why was this test removed?", "gold": "I'm confused; are we just dropping these methods without deprecation?"}
{"pred": "I don't think this should be VLOG(4).", "gold": "can we use PC's time to version in Distributed Systems?"}
{"pred": "I think this should be `c.user&.full_name`", "gold": "is this \"unless\" actually needed?"}
{"pred": "Shouldn't this be `return Collections.emptyList()`?", "gold": "We don't accept empty words for lookup anymore, again"}
{"pred": "This should be `const installTime = Number(installTimeString)`", "gold": "We'll have to account for CI installations being faster than local ones. Do y'all think we should leave it at < 30 green / < 50 orange | >= 50 red or lower our thresholds?"}
{"pred": "nit: W3C_MINIMIZE_WINDOW -> windowMinimize", "gold": "No need for this to be `W3C_` since there is no JWP equivalent"}
{"pred": "I think this should be `RSpec::Backports::Random`", "gold": "As far as I can tell, there's nothing that creates an instance of `Random` or that calls `rand` or `seed`. Am I missing it? If not, let's remove the `Random` class since we don't really need it and we can move the definitions of `shuffle` into `RSpec::Core::Ordering`. One less type :)."}
{"pred": "Why do we need this lock?", "gold": "Is this ever actually used?"}
{"pred": "Why do we need a new default processor here?", "gold": "this section of the codebase should be noted as a candidate for caching, and as a place where multiple tipsets is making things extra tricky"}
{"pred": "Shouldn't this be `ASSERT_NOT_TESTED()`?", "gold": "Do we need to save the existing value of the stolen reg somehow?"}
{"pred": "Why do we need to set this to 500?", "gold": "maxResults should come from FLAGS once #244 is submitted."}
{"pred": "Why is this needed?", "gold": "is this wanted?"}
{"pred": "Why do we need this?", "gold": "What exception is actually happening here? AFAIK `pytest.importorskip` with just return `None` if there's nothing to import. Which means that this check'd always return `True`. `pytest.importorskip` is specifically designed to trigger skipping the current test anyway so I don't know why you would wrap it like this."}
{"pred": "Why do we need this?", "gold": "Does it send requests with urlencoded bodies anywhere? I thought it sends only json. Maybe content-type should be `application/json` by default?"}
{"pred": "`--ignore-chromium` instead of `--ignore_chromium`", "gold": "I'm not sure about adding more flags here when we're trying to simplify things, I thought we were going to check for patches changes to decide if we needed to update or not?"}
{"pred": "`testTransferHash` is unused (from `deadcode`)", "gold": "`testExecutionPb` is a global variable (from `gochecknoglobals`)"}
{"pred": "Why did you remove this method?", "gold": "~Method is public and removing it would be a BC Break, you can deprecate it if you want.~"}
{"pred": "I think this should be `log.Error` instead of `log.Debug`", "gold": "this got me a little confused when reading `build.log`. The err is printed with a log.Error later on but that ends up after the stack trace."}
{"pred": "`--keep-prefix` and `--keep-namespaces` should be mutually exclusive.", "gold": "Can we make these more explicitly for Rust only? It seems like JS and Go use flags with their name in them."}
{"pred": "nit: `open bucket %q: invalid query parameter %q`", "gold": "Should unsupported query parameters just be ignored? I think that's more common than error out."}
{"pred": "I don't think this is correct. It should be `register._UNSET_NAMESPACE`.", "gold": "Actually can we avoid mentioning `Register._UNSET_NAMESPACE`. I thought of it as an implementation detail of the simpler concept of \"being unset\". Perhaps the docs become more natural if we remove the \"If called without arguments or with ...\" part and just say \"you have to call this function without arguments at the end of any file it has been used. That is to ensure blah blah\". Something like that. Just a suggestion."}
{"pred": "`log.debugWarning(message, exc_info=True)`", "gold": "I assume it raises COMError? If so perhaps best to just catch that specifically, so as to not hide other more critical errors."}
{"pred": "Why do we need this?", "gold": "Since minify can generate errors, it should at least go after the errors middleware. And you definitely don't want to be minifying after the gzip writer has closed."}
{"pred": "nit: `provider` -> `tracerProvider`", "gold": "nit: we could remove the `config` field as it is a duplicate of the `provider.config` field."}
{"pred": "Why do we need this change?", "gold": "Nit: from the Internet."}
{"pred": "nit: remove empty line", "gold": "this is internal package, move to bottom and run 'make fmt'"}
{"pred": "Why do we need this interface?", "gold": "Why is this better than ApplicationStopping?"}
{"pred": "nit: \"One of http-01\" or \"dns-01\"", "gold": "Maybe worth expanding that these 2 are supported by cert-manager but other values exist"}
{"pred": "Shouldn't this be `$options['src']`?", "gold": "Why was this merged? It should have raised some questions IMO @core23 @OskarStark . It's already in 3 releases now, so we can't revert it can we? How can we fix this? Please have a look at #1065"}
{"pred": "Shouldn't this be `--rpc-http-authentication-public-key-file`?", "gold": "What if `node.jsonRpcConfiguration().getAuthenticationPublicKeyFile()` is empty string, would that cause a problem here?"}
{"pred": "I don't think we need the `omitempty` here.", "gold": "The `omitempty` struct tag does not do anything for non-pointer structs. I think we may need to consider making both of these fields pointers, so that they are excluded from output when not set, and also to make it easier to compare to the zero value. That said, I'm happy to merge this now and open an issue to verify the behaviour is as we want ahead of cutting v0.6.0."}
{"pred": "Why do we need this change?", "gold": "I think this is should absolutely be `==`, as the interface cannot control the implementation of equals (and it's part of the contract of the enclosing function). Can we add this interface to the exceptions of the rule?"}
{"pred": "`namespaceUID` is unused (from `structcheck`)", "gold": "It looks like the UID is the only other thing that we use from `namespace`, so I suggest to copy that out and lose `namespace`, so we don't have to worry about setting it to nil."}
{"pred": "Why do we need this?", "gold": "Can we define this constant in the`deploy` pkg instead? this would allow us to keep it private"}
{"pred": "Shouldn't this be `\"mydir/toto\"`?", "gold": "I don't like this fixture name, should be a noun like `initialized_linter` ? But it's outside of the scope of this MR."}
{"pred": "Why do we need to pass the settingsService into the JsonPrinter? Can't we just pass the JsonPrinter directly?", "gold": "Could we keep this as a static reference (JsonPrinter.jsonAsDatasetDto(releasedVersion); and perhaps change the constructor line to just be a static set method and use that here instead? (I suspect it was the warning that 'static methods should be accessed in a static manner' from my IDE that caused me to make this change in the first place...) (I can make a PR to your branch if you want.)"}
{"pred": "Shouldn't this be `Keys#COMMAND`?", "gold": "Keys.COMMAND seems to be an alias to Keys.META. That isn't mentioned?"}
{"pred": "Why do we need this interface?", "gold": "This should go in `ConfigLocal` (and then re-generate the mocks)."}
{"pred": "`release_msid` and `release_mbid` should never be `None`.", "gold": "Nitty but entry.get for the same thing"}
{"pred": "Why do we need this?", "gold": "Might not hurt to mention the function never returns (since this all ends in `execve`) so `main` never actually runs."}
{"pred": "I don't think this should be a warning. It should be an error.", "gold": "nit: add new line after this block"}
{"pred": "Why did you change this?", "gold": "I believe there is some javascript that also uses this 60px number for calculations. I think I'd rather keep the number in px instead of rem to make that correspondence easier to see. If 3.25rem != 60px, can you also change the other place where `60` is used to in the JS?"}
{"pred": "Why is this change needed?", "gold": "retrying is an installed 3rd party library just like jinja and sendgrid; perhaps try grouping all of them together?"}
{"pred": "Shouldn't this be `List<T>`?", "gold": "you could always use List.listIterator with previous() and hasPrevious() to traverse all kinds of j.u.List backwards. No need for special cases for ArrayList and Vector."}
{"pred": "Why do we need to remove the last edited step?", "gold": "remove the bitmap of index 1 from the list not the 0th one. because when we keep on undoing, it would be better if we end up with the original image rather than some randomly edited image. I am not sure whether only just removing bitmap from the list would clear memory. I think you should call bitmap.recycle before removing that bitmap from the list."}
{"pred": "This should be 2019-2020.", "gold": "this is a existing file so let's keep 2019"}
{"pred": "Shouldn't this be `type.getBitMask()`?", "gold": "can you change this instead to just `type.toString()` and then you wouldn't have to expose the getBitMask in the enum. (Alternatively you could have used `type.hashCode()` but that doesn't feel as nice)"}
{"pred": "Why do we need this change?", "gold": "AsReadOnly() would be better here"}
{"pred": "`newModifications` and `oldModifications` are indices into the new version of the collection before the change happened.", "gold": "I suggest that we use `query_based_sync` instead of `partial_sync`."}
{"pred": "nit: `SignedURLs for PUT created with this package`", "gold": "How does the user use this? By converting the type using `As` function and add the header? Maybe add an example on how."}
{"pred": "Do we need this constructor? Can't we just use the one in the constructor?", "gold": "I'm trying to understand the effects of this change. Is setting this to something other than the old default (that is, `initCodeTransformer = new InitCodeTransformer()`) generally necessary, or are we doing this only to support Python?"}
{"pred": "Docstore doesn't take zero-value key.", "gold": "\"Constructor\" isn't a standard term in Go or this project, although we use it informally amongst ourselves. And I think it will confuse people coming from languages like Java. So can we leave this as it was?"}
{"pred": "Why this change?", "gold": "Why do we have to change the test dir?"}
{"pred": "Why do we need this?", "gold": "This should test the flattened tree instead. details > summary works across shadow tree boundaries."}
{"pred": "Why do we need this?", "gold": "Not sure I am a big fan of these duplicated Log classes."}
{"pred": "nit: `CleanUp` -> `CleanUp`", "gold": "It's long-winded, but the convention is to give constants a common prefix which, see `reasonDomainVerified` ."}
{"pred": "What's the reason for this change?", "gold": "Using lanes later down, this threshold could be reduced for similar effects. Otherwise we look a bit to far."}
{"pred": "Why is this a struct? It seems to be only used in one place.", "gold": "Let's get more verbose about names. struct `wq_conda_environment`: if it can really only be used for conda. struct `wq_software_environment`: if it has potential use outside of conda."}
{"pred": "Why do we need this variable?", "gold": "Should we set this back to `false` inside each `t.Run`? so that we can have more than one testcase that can have paginated responses"}
{"pred": "Shouldn't this be `||`?", "gold": "What about using `dataManifests == null || deleteManifests == null`?"}
{"pred": "nit: `new GlobalHitsThresholdChecker(TOTAL_HITS_THRESHOLD, cappedNumHits)`", "gold": "The `HitsThresholdChecker` should be created once and shared within the collectors ? We also don't need to use the `GlobalHitsThresholdChecker` if the executor is null or if there is a single slice."}
{"pred": "This import should be grouped with the otherantrea imports.", "gold": "move this to below `antrea.io` import section"}
{"pred": "Nit: \"predate\" => \"pre-date\"", "gold": "Seems likely to confuse people. What if we moved it into ActivitySourceAdapter and made it private?"}
{"pred": "Shouldn't this be `signedTx.Value().Cmp(common.Big0)`?", "gold": "gas price don't need to be a multiple cuz we support allll gas prices now"}
{"pred": "Why do we need this?", "gold": "We are exposing implementation details in the interface. What if there is no processes involved in an implementation of `ITestRequestSender`?"}
{"pred": "This should be `except Exception as e:`", "gold": "It would be awesome not to handle the broad exception here. Instead, raise a custom exception, something like `ModelNotSetException`, from the `require_model()`, and then handle it here with a nicer message to tell the user to set the model first."}
{"pred": "Shouldn't this be `Customize Theme`?", "gold": "This already exists under the `theme` lang key, please remove this."}
{"pred": "Why do we need to render the HelpMenu here?", "gold": "Let's add a simple inline HOC around the default export below to provide the value as a prop (no need to introduce a reusable function for this yet)."}
{"pred": "`host['netmask'] ||= \"255.255.0.0\"`", "gold": "I believe that you end up printing out the result of the assignment here instead of the netmask."}
{"pred": "Why do we need this?", "gold": "We have to update the filename here."}
{"pred": "I think this should be `--cpp-field-case STYLE Generate C++ fields using selected case style`", "gold": "The `--cpp-field-case` looks like `--cpp-field-style` instead of `-case`. - 'unchanged' - leave unchanged (default); - 'upper_camel' -upper camel case; - 'lower_camel' - lower camel case."}
{"pred": "Why is this being removed?", "gold": "I haven't thought about this a lot yet, but if we were to try this change, we'd still need to keep the code to delete it from the `.origin` file for backcompat."}
{"pred": "why do we need this import?", "gold": "In my opinion I think it is possible to add `private final` here"}
{"pred": "Why do we need to change this?", "gold": "Feel like \"exit\" doesn't convey that the packet will be dropped. \"drop-and-exit\" or \"error-exit\" maybe?"}
{"pred": "\"A Main actor must have a create constructor\"", "gold": "How do you feel about \"The Main actor\" instead of \"A Main actor\", while we're already here changing the message?"}
{"pred": "Shouldn't this be `zk-read`?", "gold": "I cannot see that this new permission is used anywhere? And if the new zk handler is covered by `zk-read`, should not also existing `ZookeeperInfoHandler` handler implement PermissionNameProvider and declare the same permission, for consistency?"}
{"pred": "Why do we need this change?", "gold": "Is this reasonable?"}
{"pred": "I don't think this should be here.", "gold": "We may move this TODO to Line15."}
{"pred": "Expected 1 space after IF keyword; 0 found", "gold": "You have to verify the return type. If it's a reponse, return it. Otherwise do nothing."}
{"pred": "Why did you remove the benchmarks?", "gold": "No. Keep the header include and do `extern template ...` to skip the instantiation from that compile unit. (I pushed a fix directly to your branch)"}
{"pred": "Why is this needed?", "gold": "these tests are currently somewhat nonsensical. This code expands to `a, b = {}.keys` when it really should be expanding to `a, b = {}.keys()` -- though fixing this causes the test to fail so I suspect something worse is going on here that I don't quite understand?"}
{"pred": "Why was this changed?", "gold": "Why did this need to change?"}
{"pred": "Why do we need this interface?", "gold": "/go/pkg/mod/golang.org/x/xerrors@v0.0.0-20190410155217-1f06c39b4373/adaptor_go1_13.go:16:21: Frame not declared by package errors (from `typecheck`)"}
{"pred": "`COLLECTION_CONFIG_PROP` -> `COLLECTION_CONFIG_NAME`", "gold": "Probably doesn't go here because I think it's specific to the HTTP API layer. This class is too internal to declare such a name."}
{"pred": "I don't think you need the `InMemoryStorage{}` here.", "gold": "in preparation of directly writing the /health endpoint one day.. we should have content checks."}
{"pred": "`prefix` is a string, not a string.", "gold": "question (non-blocking): Is there a benefit from using `%q` instead of `%s`?"}
{"pred": "Why is this removed?", "gold": "I would suggest to keep two empty lines between functions in cpp files"}
{"pred": "Why this change?", "gold": "This change causes the test to fail on both rocm-1.9.x and rocm-head."}
{"pred": "Why do we need this interface? Can't we just use `RuleViolation`?", "gold": "I'd consider moving all fix related stuff to a distinct package to avoid contaminating the base package"}
{"pred": "I don't think you need the `\\` at the end of the line.", "gold": "Use `os.path.join` for path concatenation."}
{"pred": "I don't think you need to add these to __all__", "gold": "Use upper case: YOLACTHead, YOLACTProtonet, YOLACTSegmHead"}
{"pred": "Why do we need this change?", "gold": "The driver tests should be updated to use the concrete type instead of the driver directly; right now your test coverage of the concrete type is 0%."}
{"pred": "Shouldn't this be `@param` instead of `@method`?", "gold": "I would prefer the message to be more actionable. Like 'There should be no space between & and the variable name' or something similar."}
{"pred": "Why do we need this method? Can't we just call `getText()`?", "gold": "The image attribute is not supposed to be the text of the node. I'd rather keep it separate (the previous `@Text` attribute was fine). A practical reason for that is in the future, other languages may have a way to get the text of their node, in which case that wouldn't be fetched with `getImage`, for compatibility, but probably with a `getText` method, or `getSourceCode` like in #1728. Also we *may* deprecate or otherwise put `getImage` out of use as soon as 7.0, given its contract is super loose."}
{"pred": "I think this should be `@exclusion_patterns += @system_exclusion_patterns`", "gold": "The `[] +` seems weird to me. Why is it there?"}
{"pred": "Style/MutableConstant: Freeze mutable objects assigned to constants.", "gold": "Not sure if this constant is defined at the right place style-wise. Maybe move it up to before 'belongs_to' like DISCOUNT_TYPES in coupon.rb?"}
{"pred": "nit: `strings.HasPrefix(k, []byte(\"#\")) && string(k) != \"\"`", "gold": "What about a line with just spaces/tabs? Or a line with a couple spaces followed by a `#`?"}
{"pred": "Style/IfUnlessModifier: Favor modifier unless usage when having a single-line body. Another good alternative is the usage of control flow &&/||.", "gold": "if funder_is is not blank (L375) there is not need to check if org_id is not blank (L379) since you will never enter in the if (L374)."}
{"pred": "`auto_attack = false;` ?", "gold": "Don't need this-> here."}
{"pred": "Why do we need this import?", "gold": "I'm a little concerned about relying on a private module, as they could change the implementation at some point, I'd like to have some test to validate this is working as intended."}
{"pred": "Shouldn't this be `isinstance(value, (list, tuple))`?", "gold": "There might other values that we don't support here (eg. `[]`). So it might be safer to check for the supported types instead (string or number)."}
{"pred": "Why do we need to split `near` here?", "gold": "FYI, It won't have any benefit to move from trivial types."}
{"pred": "Should this be `secretsmanager-environment-variables`?", "gold": "i missed these discussions- but ` \"secrets-ssm-environment-variables\"` is what was agreed upon with cp?"}
{"pred": "nit: this import should be grouped with the other grpc imports", "gold": "whats the difference between this package and `github.com/golang/protobuf` ? or did vscode just decided this was the package it wanted to used?"}
{"pred": "Why is this needed?", "gold": "Just asking: What does this line do? Does it add the stylesheet from the parent to the dialog?"}
{"pred": "why is this needed?", "gold": "Including the scikit-learn dependency here would pull in scikit-learn for everyone who depends on Dagster. If you put it in the setup.py under docs_snippets, we'd avoid that problem (although I think it's already there)."}
{"pred": "Why is this removed?", "gold": "Why remove this?"}
{"pred": "Why was this test removed?", "gold": "Why remove this? It seems like we should keep this around as a regression test, unless we can guarantee this will never be called without a model set (does your new code guarantee that?)"}
{"pred": "Why do we need this?", "gold": "Because this defaults to `{}` if `global._googlesitekitUserData?.permissions` is `false`-y, the checks below around `state.capabilities` always result in the `!! capabilities === true` path. This shouldn't have a default value of `{}` if there's the possibility that `global._googlesitekitUserData?.permissions` can be `undefined`/`false`/`null` legitimately."}
{"pred": "nit: space after comma", "gold": "Please add a space after the comma here (generally, with arguments there's always a space after commas)."}
{"pred": "Typo: `caution` -> `critical`", "gold": "From the context, should it say \"Flags defined in this class must be used with caution...\" ?"}
{"pred": "Why is this needed?", "gold": "We don't need this file, we can use the one that is in the grid-ui directory"}
{"pred": "\"Imported key for account %s\" -> \"Imported key for account %s\"", "gold": "\"Exported key for account\"?"}
{"pred": "> public const string CRLF = \"\\r\\n\"; // Not L10N #Resolved", "gold": "Normally we use Environment.NewLine unless you really want it to always be \\r\\n"}
{"pred": "Why was this removed?", "gold": "why did you remove `verifyHeaders`?"}
{"pred": "Should this be `deliver_now`?", "gold": "Thanks for cleaning up these deprecated calls"}
{"pred": "Shouldn't this be `Invalid email address.`?", "gold": "@akarve this breaks error catching logic on the front end, I'll fix this. That's why I prefer to use some machine-friendly error codes that won't change frequently."}
{"pred": "Why do we need to change this?", "gold": "We support process remoteQuery for Service. Why are we removing it ?"}
{"pred": "I think this should be `raise 'Unexpected error' if show_exceptions`", "gold": "This is specifically for testing?"}
{"pred": "Why did you remove this?", "gold": "I think this is related to the social stats and probably does not need to be removed."}
{"pred": "Why do we need to disable this?", "gold": "Yep, jsdoc again .. It seems that when the plugin description is wrapped within `eslint-disable/enable` expression it's not generated at all. After adding the `@class AutoColumnSize` tag right after the `@plugin` tag the plugin appears in the docs. Please review the other plugins."}
{"pred": "Why do we need this?", "gold": "This usage of the result doesn't look quite right. I would not expect the first page of values to be empty if there were multiple pages of results. This also obscures the error case when no values are returned (handled in the next `if` block) by returning a more generic error from the Azure SDK from `result.NextWithContext()`."}
{"pred": "Shouldn't we return an error here?", "gold": "unknown field AddressDetails in struct literal (from `typecheck`)"}
{"pred": "I'm not sure if this is the right way to do it, but I'm not sure if this is the right way to do it.", "gold": "Just noticed, are we specifically missing the addition of `SharedConfigState: session.SharedConfigEnable` ?"}
{"pred": "`oldTimeIntensities != null && oldTimeIntensities.NumPoints > 0`", "gold": "Not sure what this is. Bad merge?"}
{"pred": "Why do we need a lock here?", "gold": "I think this may be a RW lock."}
{"pred": "Why did you change this?", "gold": "Perhaps we should tuck this away into a dedicated subdir and name it `config` or something similar? Or maybe it would be happy living in `common`?"}
{"pred": "Shouldn't this be `&& !spec.has_learnt`?", "gold": "Doing a select query inside of a loop like this is not ideal. We should fetch recipes once and then loop through it in memory to perform this check"}
{"pred": "I think this should be `copy=False`", "gold": "too long here. (104 > 100)"}
{"pred": "Shouldn't this be a `Logger.Error`?", "gold": "Use TryGetValue instead of catching exception"}
{"pred": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping."}
{"pred": "I don't think this is the right place to put this function. It should be in `rtps.cpp`.", "gold": "I think this method should be either: - a static method of `RTPSWriter` to avoid a StatelessWriter redefinition of the function. - a setter in the `CacheChange_t` struct."}
{"pred": "Why do we need to reset the stream here?", "gold": "You add a stream back reference for trailers, and all of the sudden we have tight coupling!  "}
{"pred": "Why is this needed?", "gold": "I don't think we use `AspNetAmbientContext` anymore since . We can probably delete this file."}
{"pred": "Why this change?", "gold": "Please avoid committing build artifacts, as they produce unnecessary conflicts and noise."}
{"pred": "Why not just `callable(x)`?", "gold": "this is vendored code so i would hesitate to make random changes to it"}
{"pred": "struct field EthAddress should be EthAddress", "gold": "We are using a different style for JSON tags. `ethAddress` - camalCase `referral_code` - snake_case"}
{"pred": ">DefaultHttpContextTypeName [](start = 27, length = 22) I think this should be `DefaultHttpContextTypeName`", "gold": "Should this be `\"Microsoft.AspNetCore.Http.DefaultHttpContext\"`?"}
{"pred": "Why was this assert removed?", "gold": "removed asserts from `Vector` as it's stable enough and it may hinder inlining, even if turned off :/"}
{"pred": "Why do we disable the message here?", "gold": "Do we want to raise on the function or on the decorator?"}
{"pred": "E501 line too long (116 > 115 characters)", "gold": "How complex is to to replace `album_*` with `release_*` everywhere in the `Listen` class and places that use it?"}
{"pred": "I think this should be `return i == -1`", "gold": "You haven't changed any of the callers of `.Add` to check the return value, so we're now ignoring duplicates. Please fix that."}
{"pred": "Why not just `return vNode._isHiddenWithCSS`", "gold": "@straker should this not push to `vnode._cache.isHiddenWithCSS`?"}
{"pred": "\"Package driver defines an interface that the runtimevar package uses to\"", "gold": "\"an interface\" in conceptual sense vs \"interfaces\" or \"set of interfaces\", referring to the Go interfaces - database/sql uses the latter, should we?"}
{"pred": "`ioError` and `connectError` don't seem to be used.", "gold": "This now checks nearly all errors that can occur. How about explicitly listing cases where we want it to retry? I think there are not many cases where we want that, as the many added conditions in the last years show :)"}
{"pred": "`doSync` is unused (from `structcheck`)", "gold": "Can you make this accept an action instead?"}
{"pred": "Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "Tab inconsistency here (3 spaces instead of 2 spaces)"}
{"pred": "why this change?", "gold": "these change means we are changing epoch to 1 hour?"}
{"pred": "`PANEL_DESCRIPTION_WIDTH` -> `PANEL_DESCRIPTION_WIDTH`", "gold": "Why this is defined in the middle of imports?"}
{"pred": "Why do we need this?", "gold": "Could you move this to the original position?"}
{"pred": "Should this be `oAndR.owner`?", "gold": "Is there a test that'd have caught this?"}
{"pred": "why do we need this change?", "gold": "ListWorkflowExecutionsRequest <- this can be nil?"}
{"pred": "Should this be `forgeapi.puppetlabs.com`?", "gold": "Do we need to continue to support the old link, or is it dead dead dead?"}
{"pred": "Why do we need a new ConcurrentDictionary here?", "gold": "Do we need `ConcurrentDictionary`? `Dictionary` can be safely read from multiple threads. See `GlobalTags`."}
{"pred": "This should be `seelog.Debugf(\"Server OSFamily string: %s\", osFamilyStr)`", "gold": "this seems like more of a Debugf statement"}
{"pred": "Why do we need to pass `device_data` and `queue_state`?", "gold": "We're capturing cb_state non-const, but the function is const so, safe enough, but after going to reader/writer locks we're all going to have to key a careful eye on anything in this pattern."}
{"pred": "Why do we need to skip the endpoint discovery workflow?", "gold": "Probably want to wrap the endpoint discovery work that follows in this `if` statement instead of returning early. This will make it easier to add additional request code generation logic in the future. e.g. if we add any code generation after the endpoint discovery block this check will cause it to be skipped."}
{"pred": "Why was this changed?", "gold": "This test was giving a false positive because my change caused it to throw a different error that contained `createElement` when it should've been throwing this error. Caught this by looking at the code coverage and noticing that the line under the condition I changed was no longer covered lol."}
{"pred": "Why not return an error here?", "gold": "I think this is added to wrong file. You wanted to add to cmd/agent/, right?"}
{"pred": "`elementText` can be final.", "gold": "Each `ExpectedCondition` implements `java.util.Function` These are expected to be stateless. This condition will leak previous `elementText` on the second usage, which doesn't seem ideal."}
{"pred": "Why do we need this?", "gold": "Could we consider a more explicit name, like `devicePciAddress`?"}
{"pred": "Shouldn't this be `(\\\\.exe)(\\\\.exe)?`?", "gold": "Why change this from a foreach? I can't see it gaining anything here and code styles shouldn't change just for the sake of it."}
{"pred": "Expected 1 space after closing parenthesis; found 0", "gold": "Is this supposed to be part of this PR?"}
{"pred": "Why do we need this function? Can't we just use `getIsHidden` directly?", "gold": "DRY, worth extracting this method to axe.utils"}
{"pred": "Why do we need this?", "gold": "I think there's another spot for this in DefaultCapabilityMatcher"}
{"pred": "Please use `message.critical` instead of `message.error`.", "gold": "`QtOSError` inherits `OSError`, so I don't think it's needed to list them both here."}
{"pred": "Why was this removed?", "gold": "Instead of patching vendor, let's update the version of sdk-go to a more recent one that doesn't have this line."}
{"pred": "Why is this needed?", "gold": "Don't think this should be here. The default is set somewhere else."}
{"pred": "Shouldn't this be `self._last_status[\"progress\"] < 100`?", "gold": "Not really important in this PR, but does BlazeMeter describe \"progress\" values anywhere? It might be nice to have a set of constants like `PROGRESS_DOWNLOADING_IMAGE`, `PROGRESS_BOOTING`, `PROGRESS_RUNNING_TEST`, etc in our BZA client."}
{"pred": "Why do we need a default implementation here?", "gold": "nit: `<p>` after the line"}
{"pred": "I think this should be `fonts/*.ttf`", "gold": "Should we include the files with otf extension here, too? If not, I wonder why we do allow them in the source but we don't include them as per the setup"}
{"pred": "why is this removed?", "gold": "i think it's OK to leave this?"}
{"pred": "Why do we need to make this public?", "gold": "Does this need to be public? The only reference to `FlinkTypeVisitor` that I see in this PR is here, so I'm not sure why this is needed."}
{"pred": "I don't think you need the \\n here.", "gold": "No line at end of file warning"}
{"pred": "Why do we need this?", "gold": "This looks unused, shouldn't it point to inner processor in any way?"}
{"pred": "Why is this removed?", "gold": "There may be a few isolated cases where the FirstN node is added during preCodeGen. Please see GenPreCode.cpp RelRoot::preCodeGen(). The example given there about Order by where sort is added in optimizer, or a FirstN where the N value is to be specified with a param seem to be cases where we would add the FirstN later. Will current change cause such views to marked as updateable? This is minor and could be resolved later, if any change is necessary."}
{"pred": "Why do we need this method? Can't we just use `getGrpcClientTypeName(service)`?", "gold": "I think you should compose the %sClient part using the Name class, and then do the remaining composition with plain concatenation. Side question: why does the return type name look like it is a client type name?"}
{"pred": "Why do we need this?", "gold": "All stories in this file also need the default padding."}
{"pred": "Why this change?", "gold": "Curious - what would be the actual value?  "}
{"pred": "why do we need this?", "gold": "Is it necessary to record the palette in the checkpoint? Any reason?"}
{"pred": "F401 'listenbrainz.webserver.views.api_tools.LISTEN_TYPE_IMPORT' imported but unused", "gold": "Not sure how to best do this without creating a new connection to the server everytime. Do this in another thread?"}
{"pred": "`to_a` is unnecessary, `to_not_include` is enough.", "gold": "should we have a similar test for gsa18f procurements?"}
{"pred": "Why this change?", "gold": "change `v.recipient` to address.Address, so can use `AccountState(v,recipient)`"}
{"pred": "Use 2 (not 1) spaces for indentation.", "gold": "Open to doing away with this altogether and maybe injecting this logic somehow into `requires_approval_notice?` in LinearDispatcher."}
{"pred": "Nit: \"JSON RPC tracers' timeout value given in seconds.\"", "gold": "remove this and always enable tracer, just set the default timeout to something higher (20 seconds)"}
{"pred": "I don't think this should be a URI, it should be a String.", "gold": "Can we give this field a more descriptive name? When I use a variable named `icon` I normally expect an `Image` object."}
{"pred": "I think this should be `filter` instead of `filter`", "gold": "can't these just use the global `include` and `exclude` flags?"}
{"pred": "Why is this necessary?", "gold": "Is this still necessary?"}
{"pred": "Why do we need to change this?", "gold": "Interesting! Happen to catch an exception message or anything I can look into?"}
{"pred": "Why was this removed?", "gold": "did this get moved to mpromise? I don't recall if it's in that lib or not."}
{"pred": "Shouldn't this be `[]int`?", "gold": "json objects should be `camelCase`"}
{"pred": "Nit: `OneKiBSectorSize` -> `OneKiBectorSize`", "gold": "QuarterGiBSectorSize? SectorSize265MiB? Spelling out 256 seems overly verbose."}
{"pred": "Why this change?", "gold": "Maybe with this change we can remove `using OpenTelemetry.Logs`."}
{"pred": "I think this should be `r.FormValue(\"ViewerRoleAsDefault\") != \"\"`", "gold": "Fix this name too."}
{"pred": "Shouldn't this be `long`?", "gold": "why this is an issue?"}
{"pred": "`$was_static` doesn't seem to be used anywhere?", "gold": "The condition should be inverse?"}
{"pred": "Why Double instead of String?", "gold": "this seems to be a property key name, so should it be a inside configurationkey.java?"}
{"pred": "Why is this change needed?", "gold": "G204: Subprocess launching should be audited (from `gosec`)"}
{"pred": "Why is this needed?", "gold": "Please add docs here. And also warn users that this mode should be avoided whenever possible, because any blocking IO will make the keep-alive-thread not run."}
{"pred": "I think this should be `isValidDimensionFilters( dimensionFilters ) {`", "gold": "We shouldn't require dimension values to be a string. They just need to be scalar values (probably we could check whether it's either a string or a number). Something more important to cover in the validation here though is to ensure that a map of `dimensionName => dimensionValue` is passed. The keys here actually need to be strings. For example someone shouldn't be able to pass an array of values."}
{"pred": "Why do we need this?", "gold": "let's do a pointer cast of nil, similar to the `MapRouter` above"}
{"pred": "Shouldn't this be `neve_add_settings_to_hfg_rows`?", "gold": "action should use a prefix of `hfg` rather than `neve` as we plan to bootstrap this as a standalone library. Moreover, previously filter/actions used in this library was using the same pattern."}
{"pred": "Why do we need this?", "gold": "I'm halfway tempted to disable this for all https connections. Do you know of any clients that actually renegotiate for any reason?"}
{"pred": "Why did you change this?", "gold": "shouldn't **call** return a boolean?"}
{"pred": "This example is used in https://gocloud.dev/howto/docstore-ctor.", "gold": "I don't think you need the blank import here. This one uses awsdynamodb directly."}
{"pred": "`isDeleted` -> `isDeletedPredicate`", "gold": "I think this should be initialized to `null` instead of a predicate. There is no need to run an extra predicate (with an extra method dispatch for each row in a data file. That's a tight loop so we should do more work here to avoid it. Instead of using `isDeleted.or`, this should test whether `isDeleted` is `null` and either initialize `isDeleted` or call `isDeleted.or`."}
{"pred": "This should be `args.ctu_phases`.", "gold": "What is this and the next entry in config_handler used for?"}
{"pred": "Why do we need this function?", "gold": "will your editor integrate `gofmt`, `goimports`, etc...?"}
{"pred": "`intent != null && intent.getExtras() != null && intent.getExtras().getSerializable(\"state\") != null`", "gold": "looks like the code is not properly formatted. for example here are some missing spaces in **if** command. please take care and reformat the code using default android formatting."}
{"pred": "I think it would be better to use `argparse.SUPPRESS` instead of `argparse.SUPPRESS`.", "gold": "Please add some valid examples to help message like `\"4:10\"`, `\"4:\"`, `\":10\"`"}
{"pred": "Why is this needed?", "gold": "Is it only Symbols we're worried about converting? Is it not safe to just call `to_s` anyway?"}
{"pred": "Why is this being removed?", "gold": "Note for those who come across this later: It was moved to `testhelpers.mining.go` so that `testhelpers.NewDaemon` and the `mining/worker_test.go` can share it."}
{"pred": "Why do we need to flatten here?", "gold": "What about `sort_by(&:in_progress?)`? Maybe with a `.reverse` thrown in?"}
{"pred": "Why is this removed?", "gold": "Flag is removed because it is only gRPC now."}
{"pred": "I think it would be good to mention that this is similar to an ``ansible-galaxy init`` skeleton.", "gold": "Might be better to rephrase to: Please refer to the ``init scenario`` command in order to generate a custom ``molecule`` scenario. Since you aren't customizing the default scenario since it already exists, right?"}
{"pred": "Why do we need to special case `write_text` here?", "gold": "Shall we merge these `if` for `path lib` and then do the `attrname` one. I'm trying to count `if`-calls and its getting late but I think we can reduce the number checks needed to get into L648 from 3 to 2 if you understand what I mean  "}
{"pred": "Please remove this empty line.", "gold": "why depend on recovery???"}
{"pred": "why change this to interface{}?", "gold": "the done channel only aims to be closed, so `chan struct{}` is better then `chan interface{}`"}
{"pred": "Why not just `wrapErr(err, \"error creating contract binding\")`?", "gold": "Do you mean to have gas_oracle changes in this PR?"}
{"pred": "I don't think you need the `target=\"main-flashes\"`", "gold": "Is this effectively requiring browsers support javascript?"}
{"pred": "Shouldn't this be `isDarkTheme ? R.style.SalesforceSDK_Dialog_Dark : R.style.SalesforceSDK_Dialog`?", "gold": "Lowercase `boolean` - use the primitive type."}
{"pred": "Shouldn't this be `Log.Error`?", "gold": "This isn't the correct logic. if allowOverride == true and !blobExists then upload. Just don't do the exist check if allowOverride is set to true."}
{"pred": "This should be `} else {`", "gold": "Can you replace these by `else if` please?"}
{"pred": "Should this be `.mdc-menu-surface--open .mdc-list-item`?", "gold": "Would be nice if the field had a unique class name that could be used to target it, instead of `fromRange`   But doesn't seem to be a common thing in the code base."}
{"pred": "Why do we need to check for `getAttribute('id')` here?", "gold": "Does this code fit on one line under 80 characters? It would be more consistent with our existing style."}
{"pred": "I don't think we need to keep this at the top of the list. The CRDs have to be installed first. Keep this at the top of the list.", "gold": "Not a requirement here. But i see a change in naming convention. We can rename the function to `CstorSparsePoolArtifactsFor070`."}
{"pred": "Why do we need this file?", "gold": "Why do you configure the UART like this? It's already configured by default."}
{"pred": "Why is this header needed?", "gold": "Wow. Good catch. \"This `#include` was brought to you by the department of redundancy department.\" ;)"}
{"pred": "nit: `logf` -> `log`", "gold": "Well it's actually calling `AuthorizeOrder` and this seems like a DebugLevel message to me, maybe it should be dropped entirely."}
{"pred": "Shouldn't this be `if (ptr == nullptr || bytes == 0)`?", "gold": "Should this be using the `CUDA_SAFE_CALL` macro here?"}
{"pred": "Why did you change this?", "gold": "What cases do you see as being valid for not having any tests to run? If a test project doesn't have any tests to run we should avoid running it at the project level."}
{"pred": "Why do we need this lock?", "gold": "and is it possible that mset.mirror.msgs be nil? because if so, then you would get a panic also because of that."}
{"pred": "Why do we need a copy here?", "gold": "`next->opaque` should not be cleared."}
{"pred": "// this only executes IF there's an issuer on the Juc - otherwise the account is already", "gold": "already what? I know what, but seems like smth. is missing in this sentence"}
{"pred": "Why not use `activityCardController.update`?", "gold": "Can you put spaces after the `{`and before the `}`"}
{"pred": "Why do we need this change?", "gold": "We said we would put `[ ]` around the version. `[forseti-security] [v2.3.0]`"}
{"pred": "`n >= int64(len(cnb[0]))`?", "gold": "Seems len(cnb[0]) will be the length after the write since of the *v thing we saw no?"}
{"pred": "Why do we need this?", "gold": "can we make use of storagepoolclaim type rather than the generic interface{} type?"}
{"pred": "Why do we need to add peers here?", "gold": "this should happen before the `go k.manage()`, otherwise the node will always try the bootnodes first"}
{"pred": "Nit: Unrelated whitespace change.", "gold": "Is this actually a lint related change?"}
{"pred": "Should this be `cache_key`?", "gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping."}
{"pred": "I don't think we need to check for `obj is None` here. `obj == ''` should be enough.", "gold": "what does this do that str_param does not?"}
{"pred": "Why do we need this function?", "gold": "For GCP we included the API name (see below) so you can distinguish between uses other than `blob` once they exist, WDYT?"}
{"pred": "Why do we need this?", "gold": "what would you think about doing this include on-demand within S3ObjectStore methods and then failing in a loud way?"}
{"pred": "Why do we need to lock here?", "gold": "May be better make `stopped` atomic, then it can be just `for (auto i (node.store.latest_begin (transaction_a, next_frontier_account)), n (node.store.latest_end ()); i != n && && !stopped && elections_count < max_elections; ++i)`"}
{"pred": "Shouldn't this be `future_chainAddEdgesAtomic`?", "gold": "In `src/storage/InternalStorageServiceHandler.h ` file, the client in `client->future_chainAddEdges ` should be InterStorageServiceAsyncClient?"}
{"pred": "Why do we need this import?", "gold": "`go.sum` needs to be updated for this. Please run `go mod tidy`"}
{"pred": "I don't think this is used anywhere.", "gold": "Not sure if this was discussed previously, but is there a specific use case in mind for having this as an API field rather than a configuration option on the controller manager? Is there a specific use case in mind where one would want to choose different backends for individual Clusters/Machines vs having it a global configuration for an instance of the infrastructure provider?"}
{"pred": "Is this intentional?", "gold": "Same thing with the OtlpExporter"}
{"pred": "Why was this removed?", "gold": "Should not be removed."}
{"pred": "I don't think this is needed anymore.", "gold": "Not a blocker for anything, but should this be moved to beaker-pe? Is that ticketed anywhere?"}
{"pred": "Why do we need this?", "gold": "this shouldn't be beforeClickOn, but rather beforeSubmit? and added to WebDriverEventListener. Since submit does not synthesize the 'click' events, this isn't accurate."}
{"pred": "`self.system_approver_emails.first || self.approving_official.email_address`", "gold": "this ternary operator is hiding an `if/else` within an `if/else` - any chance we could move the logic ELSEwhere? (see what I did there -- ?? :100: )"}
{"pred": "Why are we deprecating this?", "gold": "Is this really internal? Or will the API be different in PMD 7.0.0? Well, the interface doesn't offer much functionality anyway..."}
{"pred": "How about `allow_multiple_arrays`?", "gold": "Does it have to be arrays? Isn't it ragged 'data' (i.e multiple elements of different lengths)?"}
{"pred": "Why do we need this?", "gold": "Per my understanding, this flag only impacts \"NoCleanup\" disk. If so, we may name it more clear. The reason of this ask is because I plan to add some other flag to force cleanup for other non-NoCleanup disks."}
{"pred": "Why do we need this change?", "gold": "In my changes for `RequiresDistributionAndOrdering`, this class went away and is replaced by an inner class. I think that pattern worked well. Maybe we could do that before this one to reduce the number of changes here."}
{"pred": "Why did you change the names of these?", "gold": "Shouldn't this be called `hp` instead of `life`?"}
{"pred": "Why do we need to change this?", "gold": "Because the default value of allowedOrigins is * (all origins), so it isn't necessary to set again at all."}
{"pred": "return false;", "gold": "Undo this modification"}
{"pred": "Why did this change?", "gold": "Please check my thoughts here... I changed the test to not `ToString()` attribute values. This was important to test things when `net.peer.port` was both an int or a string, but I was unsure if Zipkin supported non-string attributes."}
{"pred": "Shouldn't this be `returnBase64NoMetadata(call, exif)`?", "gold": "Looks like you made changes on `CameraResultType` class, but didn't commit them. And you also have to do the changes on the types in @capacitor/core"}
{"pred": "Why do we need to change this?", "gold": "Can you explain the history of the bug a bit, and why this fixes it?"}
{"pred": "Align the parameters of a method call if they span more than one line.", "gold": "What do you think about `mentor_mail_to` or `mentor_mail_to_link` in order to match Rails' `mail_to` method, which is what this calls? I'm not sure about this suggestion..."}
{"pred": "`metricPoint.Keys == null ? 0 : metricPoint.Keys.Length`", "gold": "Looks like this will make the check in every loop. Consider extracting the null check."}
{"pred": "I think it would be better to use `expect(Registry.clear).to raise_error`", "gold": "Maybe `it \"can safely be reset when there are not yet any shared example groups\"`? That's the edge case that wasn't working, right?"}
{"pred": "I think this should be `ssmfactory`", "gold": "naming: please use `asmfactory`"}
{"pred": "I think it would be better to use `filepath.Join` here.", "gold": "FYI you could use a raw string for this which removes the need for escaping the inner quotes."}
{"pred": "I don't think you need the parametrize here.", "gold": "2 blank lines here (between functions)"}
{"pred": "Why do we need this constructor?", "gold": "Nit: we try to avoid whitespace changes because they can easily cause unnecessary commit conflicts."}
{"pred": "`substr($file_contents, $end_pos, 2)` => `substr($file_contents, $end_pos, 2)`", "gold": "As mentioned below, I'm not sure why this is only allowing refs that are tagged with `*` at the start!"}
{"pred": "Shouldn't this be `that.delegatedRepository == null`?", "gold": "Don't forget the {} symbols, and please use EqualsBuilder and HashcodeBuilder as possible"}
{"pred": "`ch` is unused (from `structcheck`)", "gold": "Allocate buffer once outside loop."}
{"pred": "`ASSERT_TRUE (target[2].port () == system.nodes[1]->network.port);`", "gold": "It would be better to check that system.nodes[1]->network.port is somewhere in the target without specifying its exact position. But it is a very minor point and I have no string opinion on it just thought I'd mention it because our tests in general have too implementation detail."}
{"pred": "I don't think you need the extra brackets around `ex.getMessage() + \"\"`.", "gold": "Should this be in a bundle?"}
{"pred": "Why was this assert removed?", "gold": "When Activity is lost (more precisely, ExecutionContext is lost) in the HttpModule we restore the root (HttpIn) Activity. That makes this assert invalid. I tried to fix the HttpModule so that it restores the Activity that was last running, but it is impossible to retrieve do to the way ExecutionContext works. It isn't an issue to remove the assert, but it is unnerving. Any instrumentation running in IIS reliant on Activity.Current could run into trouble."}
{"pred": "Why do we need this?", "gold": "what was the point in moving handlers registration into a separate method?"}
{"pred": "Why do we need this?", "gold": "At this point we probably want to ensure there's a store command set."}
{"pred": "I don't think you need the `+` here.", "gold": "This code is way too complicated for what it does. I don't want to be a PITA, but what can you consider rewriting it in a simpler way? I'm talking about the whole `_getDerivationIndexes` function"}
{"pred": "Why do we need this check?", "gold": "Don't throw base exception, specify more precise type"}
{"pred": "nit: add period at the end of the sentence.", "gold": "Recursive -> Recursively converted -> convert"}
{"pred": "Why do we need to check for `opts.generate_object_based_api` here?", "gold": "why is this object API only? I think the reason why we didn't do this before was because this code was shared with Java which doesn't have value structs."}
{"pred": "Why do we need to change this?", "gold": "just to confirm, so backend will deal with both old format and new format?"}
{"pred": ">Enum [](start = 51, length = 6) I think this should be `Enum<T>`", "gold": "huh, look at that, I wasn't aware you could constrain a type by Enum"}
{"pred": "This should be `configFile`, not `configFile`.", "gold": "Even though the debug parameter is effectively ignored, should this default to `false` instead of `true`?"}
{"pred": "Why is this an empty interface?", "gold": "What is the purpose of this interface? Unlike ParamDocView, it doesn't seem to be used anywhere to enable polymorphism"}
{"pred": "nit: remove empty line", "gold": "We added a library to generate a UUID for the request_id directive \"github.com/nu7hatch/gouuid\" can we uses the same one for what you want rather than add another dependency? Or if the google one is better can we remove the nu7hatch library?"}
{"pred": "I think it would be better to use `time.Duration(i)*p.pingConfig.Interval` here.", "gold": "Shouldn't this be `i * Interval`? You're multiplying nanos with a Duration, I'm not sure what's the result :)"}
{"pred": "Shouldn't this be `MEMPROT_WRITE`?", "gold": "I guess it's not no-access to match Windows where guard pages are readable."}
{"pred": "Style/RedundantSelf: Redundant self detected.", "gold": "Not a blocker, but would probably be useful to have a `scope :non_pending_approvers` on the `Proposal` model."}
{"pred": "nit: `GetWorkResponse` -> `GetWorkResponse`", "gold": "Add trailing comma"}
{"pred": "Why this change?", "gold": "I see someone say SIGKILL can not be caught by process. The original code here about `SIGKILL` is useless?"}
{"pred": "Shouldn't this be `OLED light`?", "gold": "As it is a mobile only theme, please make sure the option appears only on mobile"}
{"pred": "`param_list` -> `params_list`", "gold": "Would like a docstring and type annotations here"}
{"pred": "Why do we need this change?", "gold": "This is an API change. Why was it made?"}
{"pred": "Why is this needed?", "gold": "Please move using inside namespace."}
{"pred": "`poSEnabled` -> `usePoS`", "gold": "shall we create some enum flags for setasmain shouldprocess and pos?"}
{"pred": "Should this be `findstr Automatic` instead of `findstr Auto`?", "gold": "Should this `PUPPET_AGENT_STARTUP_MODE` have a corresponding yardoc change?"}
{"pred": "Why is this removed?", "gold": "Why not simply remove the `pytest` import now that it's not needed anymore? :wink:"}
{"pred": "Why do we need this?", "gold": "Yeah, not filled in yet."}
{"pred": "I don't think you need the `style: 'width: auto'`", "gold": "don't use style. Use a class instead. reducing `col-xs-12` down to 8 or 6 or whatever should do the trick"}
{"pred": "Why do we need to reload the cache here?", "gold": "should we also do `reloadCache` when database is null?"}
{"pred": "Why do you need this?", "gold": "Why not just return QueryMol directly? Why require the copy?"}
{"pred": "Why not use `os.path.abspath`?", "gold": "Could you add a docstring?"}
{"pred": "Extra empty line detected at class body end.", "gold": "looks like you added newlines after blocks in a few files - I generally like newlines before/after multi-line blocks _except_ when the end the block is directly nested inside another block (eg: two `end`s next to each other) what do you think?"}
{"pred": "Please revert this change.", "gold": "@jlerbsc 's fix in #2918 in action - thanks! :smiling_face_with_three_hearts:"}
{"pred": "Shouldn't this be `if zero_count and not count:`?", "gold": "nitpick: Please lower-case `Zero_count` (as it's a literal argument name) and `Argument` here."}
{"pred": "I think this should be `a.Name == issuer`", "gold": "change the name of the function to match its functionality? account IsIssuing?"}
{"pred": "Why do we need this?", "gold": "for later: add docstring (can just copy paste Pandas')"}
{"pred": "nit: `archerMocks` is unused (from `deadcode`)", "gold": "nit: @sonofachamp pointed out to me that the idiomatic way is \"archermocks\" (lowercase for package names)"}
{"pred": "`errRouterHasNoProcedures` is no longer used", "gold": "Ugh I'm stupid, can you change this to `yarpc.InternalErrorf`?"}
{"pred": "`table.name() + \".all_data_files\"` -> `table.getName()`", "gold": "We instantiate some metadata tables in tests so I kept the old constructor too. Won't harm if someone is using it directly too."}
{"pred": "Shouldn't this be `queryOptions.limit === queryOptions.perDocumentLimit`?", "gold": "I think the better place to put this might be `lib/options/PopulateOptions.js`. That should make it easier - checking options in `populate()` can get confusing."}
{"pred": "`params` is unused (from `structcheck`)", "gold": "Lets have simple function arguments here, because now struct `traversal.Params` started to have 2 purposes: 1. used as contract in DTO between consumer-provider 2. as function parameters for internal code calls"}
{"pred": "Missing license header.", "gold": "Probably best not to have an empty test...."}
{"pred": "I don't think we need the `<blockquote>` here.", "gold": "`image_tag` in the `testimonials` files?"}
{"pred": "If this action fails, the execution must be failed.", "gold": "I believe flow.toObject() method is throwing NPE if SLA option list (i.e. this.executionOptions.getSlaOptions()) is null or one of the value in the list (i.e. this.executionOptions.getSlaOptions()) is null. If that is the case we could fix root cause of NPE in the ExecutableFlow.toObject() method. The corresponding code to populate SLA options can be modified as follows. final List<Map<String, Object>> slaOptions = Optional.ofNullable(this.executionOptions.getSlaOptions()).orElse(Collections.emptyList()).stream() .filter(Objects::nonNull) .map(slaOption -> slaOption.toObject()) .collect(Collectors.toList());"}
{"pred": "Why do we need this change?", "gold": "So I haven't tested this - but since the icon location is just directly dumped into the img _src_ attribute, won't this cause issues with Ghost blogs in a subdirectory? If I'm misunderstanding what the purpose of the default is then let me know  "}
{"pred": "Shouldn't this be `result = 1;`?", "gold": "Why swallow the exception here rather than propagate it?"}
{"pred": "nit: `column_names: Optional[List[str]] = None`", "gold": "How about `column_index_names`? `column_names` sounds ambiguous."}
{"pred": "I think this should be `write.metadata.metrics.column.`", "gold": "+1 on this. Do we want to have it as `WRITE_METRICS_MODE_COLUMN_CONF_PREFIX` to be consistent with defaults? Is there a possibility we will have `READ_METRICS_MODE_COLUMN_CONF_PREFIX`? Not sure."}
{"pred": "Why did you change this?", "gold": "Shall we use different inputs for `PySpark < 2.4` where `transpose` won't work with different data types."}
{"pred": "Why do we need this import?", "gold": "we should sort the headers like in spark: public packages, then pyspark, then internal"}
{"pred": "I don't think this is correct. If `t.options.clientTLSConfig` is `nil`, then `t.options.clientTLSConfig` will be `nil`.", "gold": "looks like we should drop this var from the transport options struct"}
{"pred": "Why is this test being removed?", "gold": "Ah, yeah, this is the test for the validation that I mentioned in a remark above about relaxing the validation."}
{"pred": "`flat_anchors` -> `flattened_anchors`", "gold": "For tensors, it is better to illustrate the shape."}
{"pred": "Should this be `google-site-kit/v2/data/`?", "gold": "This was removed in a recent PR for the admin bar, but should have been kept. It's been restored in the other admin bar PR but I've added it here to for completeness."}
{"pred": "Nit: typo \"it is always ignored\"", "gold": "nit: probably swap the if condition and `if/else` and check `NETCOREAPP2_1` which looks more natural."}
{"pred": "`defer a.mu.RUnlock()` is missing here.", "gold": "for the tag, should it be `requestor_rtt` since the other is `responder_rtt`?"}
{"pred": "Shouldn't this be `flatbuffers.UOffsetT(j*1)`?", "gold": "The one sad part of this is that is will generate a lot of overhead if you loop through a vector, since it obtains the vector every time. But with the current API there is no alternative I guess, and it is better to have the option than not."}
{"pred": "`files` is unused (from `deadcode`)", "gold": "nit: there should be a newline between `types` and `go-ipfs-files`."}
{"pred": "`retryAfterDuration` -> `retryAfter`", "gold": "would be nice to have this as a parameter (Options), re: technical debt discussions"}
{"pred": "Why is this needed?", "gold": "complete ignorance here  but is it ok to import this from `com.sun`? can it break under non-oracle JREs?"}
{"pred": "Why do we need to check for `IsRecordingEvents` here?", "gold": "Is this some way of saying that the span is going to be sampled? I'm basing this question on the condition I saw for the `OnEnd` to be called - `mustExport := s.spanContext.IsSampled() &&  )`. Shouldn't the condition be `s.spanContext.IsSampled()` to match the condition for calling the `OnEnd`?"}
{"pred": "nit: `Unable to update snapshot list details in cvr %s status: %v`", "gold": "just calling UpdateSnapshotInfo() should be fine"}
{"pred": ">0 [](start = 16, length = 1) 0?", "gold": "Was `DefaultLogMessageRateLimit` not configurable anywhere?"}
{"pred": "Why do we need to mock the docker client here?", "gold": "Please use the `assert` instead. Same below."}
{"pred": "\"A name suche as Europe or Overseas\" -> \"A name such as Europe or Overseas\"", "gold": "Owww, I think I found a typo. `suche`"}
{"pred": "Why did you remove these asserts?", "gold": "This can happen because we could get `PhantomNodes` that are not admissible as source/target right?"}
{"pred": "Should this be `structsEqual(a, b)`?", "gold": "Should we add a note here to file a bug if this ever happens?"}
{"pred": "I don't think this is the right error message. It should be something like \"benchmarks quantity overflows int64\"", "gold": "overflow is still possible, isn't it?"}
{"pred": "Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "This seems more like a personal preference, so maybe this should be in your `~/.rspec`?"}
{"pred": "This should be `from scapy.error import Scapy_Exception`", "gold": "To avoid a circular import between pcapdnet and automaton"}
{"pred": "Why did you remove this?", "gold": "Please remove this blank line."}
{"pred": "Why do we need to call this here?", "gold": "it feels that the WorkloadIdentityCondition should be added to this Status... And if you have workload identity enabled, but not working, then you can mark that condition failed, and also Mark the ready false... not entirely sure though"}
{"pred": "Shouldn't this be `VUID-VkPipelineRasterizationProvokingVertexStateCreateInfoEXT-provokingVertexMode-04883`", "gold": "I think these got refactored to `LvlFindInChain` to better conform with the coding guidelines. I think MarkL left these in for backwards compatibility."}
{"pred": "why is this needed?", "gold": "It's fine for this PR, but in the future try to minimize unrelated changes."}
{"pred": "Should this be `$HOME/.ansible/roles:/usr/share/ansible/roles`?", "gold": "The library -> modules and filters -> filter path changes are breaking changes or?"}
{"pred": "Why do we need this import?", "gold": "Can we encapsulate this check (`os.environ.get(\"TEST_TARGET\") == \"AWS_CLOUD\"`) into a small config/util function? (and also use it in `integration/conftest.py`) (I'd generally try to avoid accessing `os.environ` directly across the codebase. I'm aware that we're already doing this in a few places, but maybe we can start pulling things out - this will also help us create more systematic config/environment abstractions as we go...)"}
{"pred": "Why not just `child.reverse()`?", "gold": "An `if` statement would be better here. Functions, concat and reverse are all very expensive."}
{"pred": "`chainID` is unused (from `structcheck`)", "gold": "`Log here: connect to default factory for goerli network <address>`"}
{"pred": "Shouldn't this be `v.Slack`?", "gold": "nits, should add `break` to avoid redundant iterations."}
{"pred": "You can use `Assert.False(provider.AccountExists(_address1));`", "gold": "I think we want an exception here, there should never be a transfer to a nonexisting account."}
{"pred": "Why did you change this to `finest`?", "gold": "This code is new and not tested well. While we may drop the log level before we ship 4.0, right now this is extremely helpful to users."}
{"pred": "Why did you change this?", "gold": "Can we make these asserts more strict/precise? I remember this test helped to spot the issue of inconsistent results on different platforms due to using `sort` instead of `stable_sort`."}
{"pred": "Should this be `Pathname(executable).basename`?", "gold": "I thought about adjusting for case here as well? For example `.rb,rb,.RB,.rb` would all map to ruby interpreter specified? Is that too much \"magic\"? Is there a sane workflow that someone would choose to map `.rb` to one interpreter and `.RB` to another?"}
{"pred": "Shouldn't this be `g_return_val_if_fail`?", "gold": "In this and the one below, should we assert `self != NULL` first?"}
{"pred": "Why did you change this?", "gold": "Why this is needed?"}
{"pred": "`self.meta or None`", "gold": "we already have .meta() so I don't think we want get_meta() for PackageEntry"}
{"pred": "Why do we need to pass startTs here?", "gold": "question: can we always get the startts from dagrequest?"}
{"pred": "Why do we need to pass `accountID` and `propertyID`?", "gold": "Nit-picking, but this can be simplified to reference `properties[ 0 ]` since that is already retrieved 2 lines above."}
{"pred": "Why do we need this method?", "gold": "This technically works because we call `get_targets` before we remove the target, so it's bound to have been resolved. But I'm not sure I would like to rely on that assumption. Should we also remove it from `@unresolved_targets` to be safe?"}
{"pred": "Shouldn't this be `frame.getWorldState().getContract(contract).orElseThrow()`?", "gold": "So what happens if I try to get code on a EOA?"}
{"pred": "I think this should be `if values is not None and len(targets) != len(values)`", "gold": "Can't we return an empty list and then just compare the lengths? Thereby removing this `if`."}
{"pred": "`passesRestrictions` -> `passesRestrictions`", "gold": "Mb change it to 'doesPassRestrictions()'? Doesn't sound enough like a boolean-returning method to me."}
{"pred": "`err` is unused (from `structcheck`)", "gold": "TODO: in fact At when used with noncurrent time should not return a next index. only latest should.."}
{"pred": "`Array.isArray(tmp) ? tmp : [tmp];`", "gold": "There are scenario's where we skip an update with a placeholder, in this case tmp returns null with render, this is not an array so we `[null]` it"}
{"pred": "Shouldn't this be `List<T>`?", "gold": "@danieldietrich, this wasn't tested so I presumed it wasn't working before either :p"}
{"pred": "Why do we need this change?", "gold": "Please leave two empty lines after the `use` statement"}
{"pred": "nit: this import should be grouped with other k8s imports", "gold": "Please move this import in the 3rd group which is for external dependencies"}
{"pred": "`is_leaf = not node or node.get(RESERVED['file']) is None`", "gold": "So what exactly is this fixing? The unit test is passing with or without this change."}
{"pred": "`std::string(it->second->path()) + std::string(it->second->path()).rfind('/') + 1`", "gold": "auto targetFile = fs::FileUtils::joinPath(newPath, folly::stringPrintf(\"%019ld.wal\", it->first));"}
{"pred": "nit: `snapshotIdsBetween` -> `snapshotIdsBetween`", "gold": "I don't see any place that checks whether the from snapshot is an ancestor of the to snapshot. That seems like a requirement for this to work correctly to me."}
{"pred": "`$response['updateHelpText'] = $this->getHelpText($functionConfig['updateHelpText'] ?? '');`", "gold": "Other calls to getHelpText() are wrapped in an `isset()` check. Would it make sense to be consistent, and either restore that here or remove it elsewhere?"}
{"pred": "Why this change?", "gold": "Why the change? If `output_stream` is set to something non-nil, it seems odd (and potentially wrong) to overwrite it...."}
{"pred": "belongs_to :flow, polymorphic: true", "gold": "Thinking this should have an underscore."}
{"pred": "This should be `_get_message_state_scope`", "gold": "To accommodate the change to the method being private."}
{"pred": "Why is this needed?", "gold": "Shouldn't we traverse all definitions and apply this rule over all model definitions in the doc"}
{"pred": "Why do we need this class?", "gold": "Please rename this class that it ends with the suffix \"Test\" - otherwise the tests won't be executed."}
{"pred": "Why do we need this file?", "gold": "As a JS file, this should also receive our standard file header."}
{"pred": "Shouldn't this be `lng32_t` instead of `Lng32`?", "gold": "I take it memQuotaRatio is an \"out\" parameter at line 1810? Also, why use MIN_QUOTA in both the cases of memQuota being too low and too high? Contrast this code with RelRoot::codeGen where we set MIN_QUOTA only in the too low case."}
{"pred": "Why was this removed?", "gold": "It looks like for newpullsubscription, we have two functions. One for pullsubscription with default, one for pullsubscription without default. If you remove setdefault here, then there is no differences between these two functions."}
{"pred": "I think this should be `uint32` instead of `uint32`", "gold": "not dramatic, but why 32bits if we allow a range that is smaller than 8?"}
{"pred": "Why do we need this?", "gold": "- Use type from `service_discovery/dto/price.go` - Rename `Price` -> `Money`"}
{"pred": "I don't think you need the `@code` tag here.", "gold": "one space missing at the beginning"}
{"pred": "Why is this a pointer?", "gold": "I worry that having `Platform` as `string` instead of `*string` would result in it getting overriden with `\"\"` if the environment manifest config doesn't specify `platform`   . If it gets overridden as `\"\"`, that could be a problem for users that are not using `linux/amd64` right? If this indeed is a potential impact, could we double check in `ApplyEnv`'s unit test? Same with the `Platform` in `TaskConfig`. Sorry for not seeing this in my previous review!!!  "}
{"pred": "Shouldn't this be `http://' + host`?", "gold": "I like the new directory `/api`, what is the thinking behind `/external`?"}
{"pred": "Why do we need to sort here?", "gold": "staticcheck flags this: replace with `for k := ..`"}
{"pred": "I think this should be `sr1(p, timeout=0.001)`", "gold": "There's already a sleep right above"}
{"pred": "Shouldn't this be `self::` instead of `self::`?", "gold": "This feels hacky, is there a better way?"}
{"pred": "`from collections import OrderedDict`", "gold": "Can we move this logic into the `boto.compat` module? Then it's just `from boto.compat import OrderedDict` instead. Also, this is introducing a new dependency. What about users on 2.6.x that don't have the OrderedDict module installed? We may need to fall back to an ordinary `dict` so that existing code in the wild does not break."}
{"pred": "Should this be `JsonDeserializationSettings`?", "gold": "\"Gets the JSON serialization settings.\" would be better?"}
{"pred": "Shouldn't this be `/file/{addr}`?", "gold": "The endpoint should be in plural `/files`."}
{"pred": "why do these need to be empty?", "gold": "??? Why do we need to have a different API in Python? Oh, wait, I see what you did. It's to fake the namespaces. Given that I don't think the namespaces are necessary, and that less of these should be exposed anyway, I think these should go."}
{"pred": "Why this change?", "gold": "I think this line is gofmt issue? @daixiang0"}
{"pred": "nit: `targetNewSyntax` -> `targetNewSyntax`", "gold": "probably better to assert the values directly; technically you could pass this test with an implementation that always returned \"\" for the subrepo for example."}
{"pred": "Why did this change?", "gold": "line is 161 characters (from `lll`)"}
{"pred": "Why is this needed?", "gold": "Are these changes needed?"}
{"pred": "Why is this change necessary?", "gold": "It seems like reducing the sensitivity would make the test failure less likely to occur, but not fix the issue?"}
{"pred": "Why is this needed?", "gold": "missing use statement for importing the full namespace"}
{"pred": "error var ErrIncorrectAddressFormat should be ErrIncorrectAddressFormat", "gold": "Generally error messages in Go shouldn't start with capital letter. I see this rule is broken in many places here. Why?"}
{"pred": "Why did this change?", "gold": "These test checks if selection coordinates don't return negative values in that edge cases. Please revert the changes and set `autoWrapCol` and `autoWrapRow` to `false` to the Handsontable instance. This change applies to the entire Core_selection.spec.js file."}
{"pred": "Why 4? Shouldn't it be 4?", "gold": "I would prefer flag SkipGasPricingValidation"}
{"pred": "Why not `return exists != blocks.end()`?", "gold": "could be `const &` ?"}
{"pred": "Why do we need this?", "gold": "The docs should also be updated with the new option."}
{"pred": "I don't think you need the `[:100]` here.", "gold": "Name is _way_ to generic for this patch to be accepted I think. Can you rename it to maybe `send_sns_notification` or something else you find suitable?"}
{"pred": "Why do we need to change this?", "gold": "Out of the scope."}
{"pred": "Why do we need this?", "gold": "I think we need an if block to check that if this API is really missing. We wouldn't want to override the browser's implementation."}
{"pred": "Why do we need this check?", "gold": "I was wondering, things like EDITOR_TYPE, VALIDATOR_TYPE, RENDERER_TYPE are not obligatory. Therefore if the custom editor will be registered with this method, `name` will be set to `undefined`. Should we handle this scenario?"}
{"pred": "Why did you remove this?", "gold": "This line should not be removed, as it is not the description of the package, but a copyright header."}
{"pred": "I'm not sure if this is the best name for this field. Maybe `LastTag`?", "gold": "Wouldn't it be more space efficient to make this a `byte` enum or bitfield?"}
{"pred": "E501 line too long (116 > 115 characters)", "gold": "Flake8 doesn't like the assignment, but non-use of `e` here. I think we can just remove the try/except here for `cursor.execute(sql)`."}
{"pred": "What is the purpose of this interface?", "gold": "Maybe add short example list: .... type body declarations, such as AnnotationMembers, Methods, Fields"}
{"pred": "I don't think this is used anywhere.", "gold": "These are really meant to be the keys in the capabilities, not the keys of values within the capabilities"}
{"pred": "Why do we need this method?", "gold": "It is debatable whether we have to default this. I did this to avoid breaking custom implementations."}
{"pred": "`attr_value['string'] is not None` -> `attr_value['string'] is not None`", "gold": "# `attr_value['string'] is not None` probably not required as `attr_value['string'] == value` check is already being done"}
{"pred": "I think this should be `addons`", "gold": "we shouldn't need the \"addon\" rename"}
{"pred": "Extra empty line detected at class body beginning.", "gold": "These are covered by routing constraints."}
{"pred": "`aws.StringSlice([]string{aws.String(*instanceID)})`", "gold": "Could we use just a normal string here?"}
{"pred": "Can we use `Symbol.iterator` instead?", "gold": "`isFunction(Symbol)` triggers a `ReferenceError` if Symbol is undefined. Using `typeof Symbol === 'function'` is OK however."}
{"pred": "Shouldn't this be `lock.unlock ();`?", "gold": "Is there an else clause (with a lock.unlock ()) missing here as well? If we think we do not need an else clause then lets add an else clause containing assert zero."}
{"pred": "Shouldn't this be `[32]byte{}`?", "gold": "do we foresee `32` ever changing? (as well as its use in error checking in `clerk.go`) if \"no\" this is fine, if \"yes\" it's probably still fine"}
{"pred": "Why this change?", "gold": "you don't need to create a enum for this, java allows you to switch on a string ;) (since java 7?)"}
{"pred": "Why do we need to load the roles into ember cache?", "gold": "This should be `modelPromises.roles = this.get('store').query('role', ...` and the promise body should just `return roles;`. This is because the `model()` hook will pause for the returned promises to be resolved before continuing so when returning `RSVP.hash` you end up with a hash containing the values returned from the promises so the controller and everything else relying on the `model` object doesn't need to worry about things being async."}
{"pred": "Why do we need to check for `form` here?", "gold": "This is basically a repeat of `main-is-top-level.js`. I suggest having these 3 checks point to the same evaluate file. You can change what element they test through the rule selector as well as the check.json options property. So you would have `main-is-top-level.json`, `banner-is-top-level.json` and `contentinfo-is-top-level.json` each point to `landmark-is-top-level.js`, and pass in a different `options` object which tells it what element you're trying to test."}
{"pred": "`MDCLoggingContext.setCore(core == null ? null : core);`", "gold": "Why do we need this check? setCore already handles nulls."}
{"pred": "Shouldn't this be `__dir__`?", "gold": "good catch, thanks. This is going to make the user experience much better."}
{"pred": "Why do we need this change?", "gold": "TODO: remove this unused import"}
{"pred": "nit: `square/go-jose: compact JWS format must have three parts`", "gold": "Hmm leaking the library name out in the Workload API doesn't seem great. Do we want to catch these errors and return a canned \"could not parse token\" or something instead?"}
{"pred": "Why is `gradlew assemble` needed here?", "gold": "I think `-f gradlew` is better for code unity"}
{"pred": "This should be `source.iceberg.reader.fetch-record-batch-size`", "gold": "Is there precedent for this config key? What other keys are similar? The others in this file start with `table.exec.iceberg`. Is there a reason for not continuing with that convention?"}
{"pred": "This file should be reverted.", "gold": "Can we avoid no-change changes being committed - they make it harder to distinguish actual changes from code editor changes"}
{"pred": "//snippet-keyword:[AWS SDK for Java v2]", "gold": "AWS Identity and Access Management (IAM)"}
{"pred": "Why did you remove the `NewHandler`?", "gold": "You dont use this dependency anymore"}
{"pred": "Shouldn't this be `ENABLE_JSON2`?", "gold": "Here is the test that checks that the sqlcipher in use was compiled with the right flags"}
{"pred": "Why do we need this change?", "gold": "Turns out that if the hosts are not in an `array`, an `Exception` is not thrown anymore :-( It simply returns `null`. So, we need to attempt to parse a `string` outside the `catch` block for it to work."}
{"pred": "Why do we need this class?", "gold": "this test only covers the happy path. what about no acceptable rest template found?"}
{"pred": "Why are we changing this to `finer`?", "gold": "Since this is in a test, I imagine that the choice of `info` level was deliberate."}
{"pred": "Why this change?", "gold": "this should probably be named somewhere if you want to reuse it."}
{"pred": "I think this should be `aws-bound-service-account-signing-key`", "gold": "needs a rename to not include AWS"}
{"pred": "#include \"oneapi/dal/backend/primitives/blas.hpp\" #include \"oneapi/dal/backend/math.hpp\" #include \"oneapi/dal/backend/math.hpp\"", "gold": "Isn't sigma have `double` type?"}
{"pred": "Why is this needed?", "gold": "May be better use nano::keypair that generates ramdom value?"}
{"pred": "Why do we need to ignoreUndefined here?", "gold": "I think the more complete solution will save off a `ignoreUndefined` in the base class for the bulk operation (with a default of `false`), and use that for calculations. Was there a reason you didn't want to support the option from the operation level?"}
{"pred": "Shouldn't this be `logger.warn` instead of `logger.e`?", "gold": "The catch (Exception e) block that follows does an updateSync, which will get a SmartStore instance (while logging out is taking place) - and then terrible things will happen - a database gets created for the outgoing user that won't be openable by the returning user causing the app to crash at logout. This is a somewhat superficial fix - SmartStore should not return an instance for an outgoing user."}
{"pred": "Why do we need this?", "gold": "huh does this work without a `Return`?"}
{"pred": "Do we still need the `pending?` check?", "gold": "Don't think we want this line, right? (Plus \"failing\" is spelled wrong)."}
{"pred": "Shouldn't this be `true` instead of `false`?", "gold": "I think it would be more clear to have local-feed-hiding all in one place (bottom of this method?). Further up the method, there already is some code that hides the website icon, for example."}
{"pred": "Why did you remove this?", "gold": "Why remove this one? It doesn't work yet, but we'll add it sooner or later."}
{"pred": "Why did you remove the `docstore` prefix?", "gold": "Why did you remove the struct tags?"}
{"pred": "This should be `BlazeMeterReport` not `BlazeMeterReport`.", "gold": "Let's be neutral with tag names. Let's just have \"ReportURL\""}
{"pred": "Why do we need to change this?", "gold": "Use an explicit time to ensure conversion is not copy-paste and wrong."}
{"pred": "Shouldn't this be `if (!q) q = \"<account_out/>\\n\";`?", "gold": "The logic now is to look for `<account_out` if that is present return the string starting from there. If it is not present look for `<error` and return the string from there (which can produce malformed XML because you do not check if the closing tag matches). If this is also not found return an empty `<account_out/>`. This `<error>` output is also not consistent with the other two functions you mentioned. Do the other two RPCs not report an error?"}
{"pred": "Use nested module/class definitions instead of compact style.", "gold": "Use nested module/class definitions instead of compact style."}
{"pred": "Is this intentional?", "gold": "Do you think we need to keep this in, or is it just leftover personal debugging? Seems like it wouldn't be too useful most of the time, but I don't care too much if you want to keep it."}
{"pred": "Why did you remove the TB?", "gold": "showNPCs is not needed"}
{"pred": "Why do we need this type?", "gold": "Docstring for public function pls"}
{"pred": "nit: `expectedFilteredErr1` -> `expectedFilteredErr`", "gold": "This should use `t.Errorf` instead. You want the second part of the test to run even when the first part fails."}
{"pred": "Shouldn't this be `>=`?", "gold": "Should this if block better be changed to `#if H2O_USE_LIBUV \\n #else ... #endif`? The reason I wonder is because that's the way the QUIC context is being initilaized at the beginning of this function. Though I would not expect practical difference between the two approaches, because ATM the only case where we create QUIC connections is when the protocol selector is set to non-zero, and because when it is set to non-zero `h2o_quiy_close_all_connections` becomes a no-op."}
{"pred": "Why do we need to check for `Object.is`?", "gold": "`Object.is` is an ES6 feature of JS so I don't think we can use it here (or we have to change our browser support matrix or specify that an Object.is polyfill is pre-req of `preact/hooks`). Should we just do an `===` check in `preact/hooks` and provide a `Object.is` polyfill and version of `useReducer` in `preact/compat`?"}
{"pred": "Shouldn't this be `Array.isArray(options.roles || [])`?", "gold": "This was a bug I picked up by using the TS interface as a guide, this seems like it was / is the intention, also is a bug in master (needs port)"}
{"pred": "`COLOCATED_WITH` -> `COLOCATED_WITH`", "gold": "It would be helpful to explicit here what this really means and assumes."}
{"pred": "`// ExpectedBalances records expectd balances of admins and delegates`", "gold": "`ExpectedBalances` is a global variable (from `gochecknoglobals`)"}
{"pred": "This class extracts code snippets by looking at the backtrace of the passed error and applies synax highlighting.", "gold": "This is another place where I'd feel more comfortable with declaring the class private. We can always make it public in the future if someone makes a case for that, but I prefer to err on the side of privateness for things like this that 99% of RSpec users won't have a reason to use."}
{"pred": "`optIssuerAccount` is unused (from `deadcode`)", "gold": "Feels like this should be left as is and add a new createClientWithIssuers or something like that. Avoid all the \"\""}
{"pred": "`authCallback` can be `null` here.", "gold": "Minor unrelated bug in the IDP flow where the error wasn't getting displayed as a `Toast`."}
{"pred": "'const' is not defined no-undef", "gold": "I thought we got rid of this thing?"}
{"pred": "Why are these removed?", "gold": "Please convert int params as well."}
{"pred": "Why is this change needed?", "gold": "Fixed bug in implementation. Now I can run the validator from the VS Tools menu, double-click on an output line, and navigate to the site of the issue."}
{"pred": "Should this be `DD_HTTP_CLIENT_SERVER_ERROR_STATUSES`?", "gold": "Can we rename this field to `HttpServerErrorCodes` or `HttpServerErrorStatuses`? It will contain a list of status _codes_, not a list of _errors_. (Personally I prefer \"codes\" over \"statuses\", but we can't change `DD_HTTP_SERVER_ERROR_CODES`.)"}
{"pred": "`strcasecmp(tmp, \"true\") == 0` -> `strcasecmp(tmp, \"true\") == 0`", "gold": "would you please use: flb_utils_bool(...) here ?, that function wraps the on/off/true/false stuff."}
{"pred": "Why are we passing `null` here?", "gold": "`invocationInfoTokensToRedact: null` (I really like the convention of using a named parameter whenever the value doesn't communicate the meaning, such as for literal values.)"}
{"pred": "Why do we need this?", "gold": "maybe renamed to `async_simple_test` if we consider supporting aug test later on?"}
{"pred": "Metrics/LineLength: Line is too long. [82/80]", "gold": "So where is default_attributes now? Is it used anywhere else still? If not, can it be removed along with any tests of it?"}
{"pred": "Shouldn't this be `DateTimeKind.Utc`?", "gold": "We could move this to the base class and remove all these changes. What do you think?"}
{"pred": "Line is too long. [81/80]", "gold": "While we're doing some translation work, could you extract this button text and the other static text from the view?"}
{"pred": "nit: space after `if`", "gold": "Nit: Please fix indentation (note: Azkaban uses 2 spaces and not tabs)."}
{"pred": "Why is this needed?", "gold": "This change is necessary because the schema version is ignored unless a schema is specified. I think that has always been the intent."}
{"pred": "Shouldn't this be `DR_WINDOWS_VERSION_10_1803`?", "gold": "The api/docs/release.dox changelog message is missing: maybe you planned to add it once NtAllocateVirtualMemoryEx and NtMapViewOfSectionEx support is in? I would say, add it here in the same diff that raises max_supported_os_version."}
{"pred": "This should be `return node && node.hasAttribute(aria);`", "gold": "Just do: `return node.hasAttribute('aria-hidden')`"}
{"pred": "Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.", "gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping."}
{"pred": "Why do we need these two fields?", "gold": "Do we need `_processDataPoisoned`? Can the name or the id of the current process ever change? Or the machine name?"}
{"pred": "Why do we need to do this?", "gold": "Did it not work out to wait until after containerd and kubelet are started?"}
{"pred": "I don't think this is a good name for this. It's not a cooldownreduction.", "gold": "variable names suggestions from me: - damageboost, ITEM_PARSE_DAMAGEBOOST, \"damage boost +x%\" - healingboost, ITEM_PARSE_HEALINGBOOST, \"healing power +y%\" - managainboost, ITEM_PARSE_MANAGAINBOOST, \"mana restoration +z%\" alternatively the other names can stay, because \"increase\" convention isn't that bad, just change mana values to: - \"increasemanarestored\", ITEM_PARSE_INCREASEMANARESTORED, \"mana restoration +z%\""}
{"pred": "`has_all_data` -> `has_all_data`", "gold": "Why can't this be determined by 'PARTIAL_SUCCESS' in the `status` field?"}
{"pred": "Shouldn't we throw an exception here?", "gold": "Does it make sense to generate a Exception here? Maybe yes, because it wouldn't make sense to generate a path without the id of the media right?"}
{"pred": "Why do we need this?", "gold": "This should be made private."}
{"pred": "Should this be `a.config.SVIDPath`?", "gold": "perhaps this is better modeled as a pkg-level var?"}
{"pred": "Why do we need these defines?", "gold": "I don't think there is a maximum scale, neither for Hive nor for Trafodion. The only condition right now is that the scale can't exceed the precision. Example of a valid scale: DECIMAL(18,18). The maximum of 6 digits applies only to TIMESTAMP columns, where we don't support resolution below microseconds."}
{"pred": "Why is this not implemented?", "gold": "`ctx` is unused in UpdateProjectStaticUser"}
{"pred": "Why do we need this method?", "gold": "Why is this not the default, and why only for JS?"}
{"pred": "Layout/TrailingBlankLines: Final newline missing.", "gold": "A repository has many badges so we should also add type column in scope."}
{"pred": ">Locations.ToArray().Should().Equal(new[] []{new AnnotatedCodeLocation {PhysicalLocation = new PhysicalLocation {Location = new AnnotatedCodeLocation {Location = new PhysicalLocation {PhysicalLocation = new PhysicalLocation {Location = new AnnotatedCodeLocation {Location = new PhysicalLocation {PhysicalLocation = new PhysicalLocation {Location = new PhysicalLocation {PhysicalLocation = new PhysicalLocation {Location = new PhysicalLocation {Location = new PhysicalLocation {Location = new PhysicalLocation {Location = new PhysicalLocation {Location = new PhysicalLocation {Location = new PhysicalLocation {Location = new PhysicalLocation {Location = new PhysicalLocation {", "gold": "Now a hash set, so can't index into it."}
{"pred": "Should this be `ENV['PSModulePath'].present?`?", "gold": "@jpogran Does this seem like a reasonable way to know if we're in powershell vs. CMD or *sh?"}
{"pred": "Why do we need to lower case here?", "gold": "1.toLowerCase(Locale.US)? 2.where is accept bug fix?"}
{"pred": "Why was this test removed?", "gold": "We should still be providing something to the user in the case of a `KeyError` instead of a stack trace!?"}
{"pred": "`onBehalfOf` => `onBehalfOf`", "gold": "check Lukasz's fix with NonceReserving - is that not better?"}
{"pred": "nit: `// Set the primary, secondary and tertiary colour to this value.`", "gold": "Would you explain why here please? E.g. from the PR description > the renderer expects to be able to use the secondary color as the fill for a shadow."}
{"pred": "Why do we need a lock here?", "gold": "Lock needs to go to `RecoverFromDb` instead. Here it may cause deadlocks. My convention was that un-exported functions do not lock, only exported ones (with name starting with a capital letter)"}
{"pred": "Why is this needed?", "gold": "German keyboard would also be used in Austria and Switzerland, so this should have included `.at` and `.ch`."}
{"pred": "Why is this being removed?", "gold": "since this makes the indexer thing really only used for a single table, now, you can put in a TODO for me to cleanup and simplify this"}
{"pred": "This should be `/var/run/nscd/socket`", "gold": "Should we have this path passed from the Azkaban properties? If this is the standard path for nscd even outside LinkedIn, then we can keep it."}
{"pred": "Why do we need to revisit this?", "gold": "Could be a non-public field. `allowNoSubject`"}
{"pred": "I don't think you need to pass `skipCacheLookup` to `reallyExecute`. You can just check `c.state.Config.Remote.DisplayURL != \"\"`.", "gold": "Don't think this is quite right - think the build one also needs an `IsOriginalTarget` (c.f. code in `src/build`)"}
{"pred": "Should be `array $results`", "gold": "what about adding typehints instead? I don't think we need to add docblocks for every private methods."}
{"pred": "Why is this needed?", "gold": "Is it fine to pass the \"-o compression=on\" in the middle instead of at the end ?"}
{"pred": "Is there a better way to do this?", "gold": "Probably make them all keyword arguments."}
{"pred": "Why was this removed?", "gold": "Why not just check the backdrop setting here as well for the time being? We can combine the code later but at least then it would be configurable if people like the backgrounds."}
{"pred": "Why are we changing this?", "gold": "why are we turning this one into a Warning?"}
{"pred": "Why not use `String.valueOf(sourceIDs.size())`?", "gold": "Wouldn't it be better to use double quotes for the opening parenthesis ?"}
{"pred": "`blessings` should be a `uint64_t`", "gold": "Remove the cast"}
{"pred": "Why did you change this?", "gold": "What criteria do we use to bump the copyright years? An update to the module?"}
{"pred": "This should be `results[key] = gt_seg`", "gold": "should we rm line 269?"}
{"pred": "I don't think this is the right place to do this. I think it should be in the `_onNvdaSpeech` callback.", "gold": "Perhaps the code at `source/core.py:564: postNvdaStartup.notify()` should be queued instead? If we are saying the loop must have started before NVDA's startup is complete, then the `postNvdaStartup` action is incorrect."}
{"pred": "Space missing inside {.<br>Space missing inside }.", "gold": "Needed this for testing locally with mail view but not used for any tests. Might be nice to have some seed scripts at some point."}
{"pred": "Shouldn't this be `ApplicationErrorStatus`?", "gold": "wait, if we only do this for successful status codes won't we miss a whole slew of responses? We should be checking this for all codes right?"}
{"pred": "Why do we need this change?", "gold": "Adding in the service yaml `library.yaml` here."}
{"pred": "Shouldn't this be `r = *r`?", "gold": "Why is this dereference needed?"}
{"pred": "I don't think this is the right place to put this. I think it should be in `RemoveDir` instead.", "gold": "Might want to add that this only happens if you have write permissions to the folder."}
{"pred": "Why do we need this? Shouldn't we always call ShouldRetry?", "gold": "Adding a small blurb about why someone would want to enable this flag would help clarify what it is for. Such as something about when providing a custom retry handler and how`ShouldRetry` will be handled with and without the flag enabled."}
{"pred": "Why is this change needed?", "gold": "assume the user will be able to register for a custom service name in future?"}
{"pred": "Why this change?", "gold": "The extra two empty lines seem unnecessary. Please review your diffs more carefully."}
{"pred": "Why was this removed?", "gold": "What the reason to embed the Oracle?"}
{"pred": "I think this should be `pages/new-topics/show`", "gold": "Shouldn't this happen automatically with High Voltage?"}
{"pred": "Why this change?", "gold": "This is changed because we need `projectId` to be printed as `$projectId` in PHP."}
{"pred": "`templates.first.customization_of || _('Template Customisation History')`", "gold": "This title change seems more accurate to me however not sure if this will confuse users."}
{"pred": "I think this should be `/^(?:.*:)*wikipedia$/i`", "gold": "Here (and on line 158 as well), would it be more efficient to use the String end_with() method? Not tested"}
{"pred": "`ram_handler` is not used.", "gold": "Why are you creating a new (second) `RAMHandler` here? Is this just an oversight from deleting the previous code?"}
{"pred": "nit: `resp_.set_code(cpp2::ErrorCode::SUCCEEDED);`", "gold": "Move the line 27 to line 31 is better?"}
{"pred": "Why do we need this event?", "gold": "In slack I mentioned we should only do this if the update is from some other device, to make sure our own updates don't cause issues. Maybe the revision check above is good enough to prevent this, but I just want to make sure you thought about it."}
{"pred": "Why is this being removed?", "gold": "I would instead explain that random is the default, but you can switch back to defined, or another ordering scheme."}
{"pred": "Shouldn't this be `style.getPropertyValue('overflow') === 'hidden'`?", "gold": "Is there a reason you left this at 0?"}
{"pred": "Shouldn't this be `rememberMeServices instanceof RememberMeServices`?", "gold": "The value of `key` will never be `null` at this point, because `getKey()` will generate a value if it is `null`."}
{"pred": "I'm not sure if this is the right place to do this check. I think it should be in the `GetDbType` method.", "gold": "NIT: You should first check if AdoNetExcludedTypes.Count is greater than 0 before calling Contains (fast-path)"}
{"pred": "nit: remove empty line", "gold": "should rearrange so as to follow import ordering."}
{"pred": "Why is this change needed?", "gold": "what is the use case for create workflow with completed state?"}
{"pred": "Missing license header.", "gold": "Probably best not to have an empty test...."}
{"pred": "I don't think this is the right place to put this. I think it would be better to put this in the main() function.", "gold": "Missing the license"}
{"pred": "why remove this?", "gold": "Looks like this was previously guarded by `EnableCleanupReplicationTask` flag. Now looks like this is always needed. Just want to confirm the intention is if `GlobalNamespace` is enabled then we want run cleanupReplicationTasks in all cases?"}
{"pred": "Why is this header removed?", "gold": "Potentially it'll be good to remove all of them excluding \"tbb/tbb.h\" But let's do it next time  "}
{"pred": "I don't think you need the `invert` variable.", "gold": "I would just mention which tolerance - namely as reported by ``sys.float_info``"}
{"pred": "Shouldn't this be `approved.alter_query`?", "gold": ":+1: Ideally this'll become something you could pass in to the config"}
{"pred": "Why this change?", "gold": "Should using `thenValue` to replace `then` ?"}
{"pred": "Why do we need this?", "gold": "This follows the convention of each callback starting with the `IsIntegrationEnabled` check."}
{"pred": "nit: `this.isMonotonicValue = isMonotonicValue;`", "gold": "this is not required to be part of this PR right? (With UpDownCounter being absent in .NET, we can make this hardcoded for now, i think)"}
{"pred": "Why do we need this interface?", "gold": "Add the PipeFactory here"}
{"pred": "Why was this removed?", "gold": "please add `var _ impltypes.ChaosImpl = (*Delegate)(nil)`"}
{"pred": "nit: `clean` -> `skipClean`", "gold": "nit: is this added deliberately?"}
{"pred": "This should be `stub_request(:get, \"http://api.hostip.info?ip=0.0.0.0\")`", "gold": "Given the number of tests which need this (I think I counted seven) should we maybe just install this one globally? Is there even a place to do that? Something in `test_helper` maybe?"}
{"pred": "`typeof maybePromise.then === 'function'`", "gold": "we don't use this anymore, so we can delete it."}
{"pred": "nit: \"algoh telemetry configured from file:\"", "gold": "nit: change to \"Telemetry configuration loaded from '%s'\""}
{"pred": "Why did this change?", "gold": "Why did this value change?"}
{"pred": "gcpduckv1beta1 \"github.com/google/knative-gcp/pkg/apis/duck/v1beta1\"", "gold": "maybe `duckpubsubv1alpha1` ?"}
{"pred": "I'm not sure if this is the right place for this function. I think it should be in the `webextensions` module.", "gold": "The id is not mandatory for web extensions. Could you update this to support a web extension without an id?"}
{"pred": "Why is this being removed?", "gold": "I actually prefer them to be defined here. Client who calls `lib` should define the args, not `lib` itself."}
{"pred": "Why do we need to call Close here?", "gold": "I think this should've been done with the `defer`-named-return trick. I'll submit a PR for it."}
{"pred": "`std::make_shared<nano::websocket::listener> (*this, nano::tcp_endpoint (boost::asio::ip::address_v6::any (), config.websocket_config.port));`", "gold": "The bind address should be configurable."}
{"pred": "Why do we need this?", "gold": "Maybe the empty `delete()` should be implemented as default in the interface."}
{"pred": "Why do we need this change?", "gold": "How to ensure CMAKE_SOURCE_DIR is set correctly?"}
{"pred": "Why do we need this change?", "gold": "safer to make a copy of incoming *big.Int"}
{"pred": "I don't think we need this anymore.", "gold": "how did we choose this value? does this hold good for Windows too?"}
{"pred": "Why do we need this file?", "gold": "To follow the other build tags, maybe we can call it `criu`?"}
{"pred": "I think this should be `connect_timeout: 10.seconds`", "gold": "Should we load this from the config file too?"}
{"pred": "I think this should be validated in webhook instead of throwing error at runtime. User can give a cron with interval shorter than duration.", "gold": "Can you file an issue for this?"}
{"pred": "`beforeHandshake: this[kIsMaster] === true`", "gold": "@nbbeeken what were the cases where `!!this[kIsMaster]` was yielding an incorrect value? we should try to cover them in the tests"}
{"pred": "Why do we need to collect groups here?", "gold": "This whole function feels messy. I don't have a better idea at the moment though."}
{"pred": "`bitmask` -> `bitMask`", "gold": "should use Number instead of Long"}
{"pred": "Why do we need this?", "gold": "Can you rename this and the file `InfluxDBProvider` and `influxdb_provider.go` respectively?"}
{"pred": "Expected '===' and instead saw '==' eqeqeq", "gold": "This is the real culprit, as now vlen will always be a Number (and known to the compiler as such). You could probably go one step further and avoid the ToBoolean on `vchildren` as well by writing something like `vlen = (vchildren !== undefined) ? vchildren.length : 0` if that matches the contract."}
{"pred": "Please use `R.id.textNoDataString` instead of `txtNoDataString`", "gold": "missing space before `TextView`"}
{"pred": "I don't think this is the right place to put this code. It should be in the base class, not here.", "gold": "so this attribute is used as u8 in code, but saves as int32? Why?"}
{"pred": "Why this change?", "gold": "can RDSE be added to the list? It has its capnp files."}
{"pred": "Why do we need to change the signature of this function?", "gold": "These functions only ever read from the API and should always be reading from a cache, so I have made that explicit by expecting a Reader here and supplying a `cache.Cache` as the client."}
{"pred": "I don't think this is the right place to do this. I think it should be at the end of the function.", "gold": "No, we can't skip any of the mangling after the suspend point: this should follow the other mangling and undo its push."}
{"pred": "F401 'TableInCT' imported but unused", "gold": "this is generated code.. these changes will need to be made in the code generator to have them stick."}
{"pred": "`shadowSupport` doesn't seem to be used.", "gold": "Should we abstract this into a reusable utility so it doesn't have to get repeated in every test file needing Shadow DOM support?"}
{"pred": "nit: `runUnifiedTest` -> `runUnifiedTest`", "gold": "Maybe we rename this to `command_monitoring.test.js` to match the directory name change? Or would you rather do that as part of the greater test cleanup? I'm fine either way."}
{"pred": "Shouldn't this be `: string`?", "gold": "Why is this change necessary? `handleSingle()` will cast it to a string, no?"}
{"pred": "Why do we need `hashCode()`?", "gold": "This newly added method should be well defined, should it return `TableIdentifier` or just `String`?"}
{"pred": "`has %count% relations with some products`", "gold": "have a relation with a product"}
{"pred": "Why do we need to check if the pod exists?", "gold": "I guess that there is still a window here, because the GC could happen between the `PodExist` and `Delete` calls. Would it be better instead to check `err` and allow it if it says \"pod has already been deleted\"?"}
{"pred": "Shouldn't this be `with session.transaction`?", "gold": "SQLAlchemy's session management does magic to make sure that if the rollback fails you still get the original exception that caused the rollback. Also it looks nicer."}
{"pred": "Why do we need to convert from action here?", "gold": "This switch statement can be removed. Just return q.items[act.Nonce] != nil"}
{"pred": "`n.equals(n.getParent().getChild(1))` should be enough", "gold": "I think `==` for nodes is more readable than equals. An equals calls looks like it could be recursing, because intuitively two nodes are equal if their subtree are the equal. But everywhere you replaced, we don't want to test whether the subtrees are structurally equal, we want to know whether they're the same. Only `==` captures this intent, using equals obscures this. Not to mention that equals may NPE and is in that sense less ergonomic. I think we should enhance the rule with a list of types for which `==` is correct. Edit: in the meantime i think we could suppress those new violations..."}
{"pred": "nit: \"Filter the benchmarks by name using glob pattern(s). Optional.\"", "gold": "What's the scenario for passing multiple filters?"}
{"pred": "nit: `std::get<0>(logEntry)` -> `std::get<0>(logEntry)`", "gold": "move to after check log.empty()"}
{"pred": "Why do we need this import?", "gold": "This line needs to be removed"}
{"pred": "Should this be v1.build.statusChanged?", "gold": "Can we delete such const like `CloudBuildSourceEvent` and `CloudBuildSourceBuildId` since all those are contained under schemas/v1?"}
{"pred": "Why do we need this?", "gold": "This is unused."}
{"pred": "nit: `new System.Collections.Generic.List<T>()`", "gold": "Any reason not to put `using System.Collections.Generic` (guess there shouldn't be naming conflicts)?"}
{"pred": "Extra empty line detected at class body beginning.", "gold": "Could the name of this controller just be shortened to `TwitterCardsController`? Is the `Player` there adding information?"}
{"pred": "Shouldn't this be `uh.Dynamic && uh.MaxFails != 0`?", "gold": "Backends with hostnames that depend on the request are always up?"}
{"pred": "This should be `from jsonpointer import JsonPointerException`", "gold": "I'd rather catch those to `utils.py` and raise a simple ValueError from them. From the resource point of view, these are details of implementation"}
{"pred": "Why was this removed?", "gold": "make this 1.0 ? I don't think all that many people do `language: julia` without any `julia:` specifiers, but may as well keep that possible?"}
{"pred": "I don't think this is the right way to do this. The default URL opener will use Dial, which gets default credentials from the environment.", "gold": "nit: `AZURE_KEYVAULT_AUTH_VIA_CLI` is defined by us, so it might be helpful to differentiate it from azure's env names. Maybe starts with `GOCDK`."}
{"pred": "`extractor` is unused (from `structcheck`)", "gold": "Depend on interfaces not on structures"}
{"pred": "Shouldn't this be `notifyStop()`?", "gold": "This fix looks good. My concern, don't forget to fix metad too!"}
{"pred": "Why do we need to check for LocalSquash branch here?", "gold": "Just noticed this nil context. Perhaps plumb through ctx too, or change to `Debug`?"}
{"pred": "Why do we need this?", "gold": "Does it send requests with urlencoded bodies anywhere? I thought it sends only json. Maybe content-type should be `application/json` by default?"}
{"pred": "Shouldn't this be `constexpr`?", "gold": "Again use of `constexpr` is recomended."}
{"pred": "Why do we need this?", "gold": "Minor point but I would call this ``redim_graph`` instead."}
{"pred": "nit: group with other k8s.io imports", "gold": "As I was trying to figure out how the error messages are written out, since they are returned from `getOrCreate` and `reconcile`, it looks like we are using plain `klog` to write them out instead of using the logger from the scope above"}
{"pred": "Shouldn't this be an error?", "gold": "Now it's double logging, is not it? Because `service.ipForward.Enable()` logs extra `warning`"}
{"pred": "Use the new Ruby 1.9 hash syntax.", "gold": "Whatever the decision is about the request type to use, this should only match what is needed and not the other one."}
{"pred": "Why do we need to update previews for output connections?", "gold": "...and in turn, this should probably be var updatePreviews = true; if (!(localConnection && localConnection.type == Blockly.OUTPUT_VALUE) && (Blockly.localConnection_ && Blockly.highlightedConnection_)) { since the first clause is a no-op. If you want to leave it this way for clarity, that's fine too."}
{"pred": "Why did you change the name of this function?", "gold": "Please remove this TODO, since they will not apply anymore after you are done. :) Can you please remove this everywhere else in this PR?"}
{"pred": "Why is this test case duplicated?", "gold": "This seems like an incomplete schema definition. will that have any effect on the tests?"}
{"pred": "I don't think this check is necessary. `CheckCanLoadFromBin` should only be called when loading from binary.", "gold": "The testing cases are failing because `SetHeader` does not only handle cases where input are from files. It also reads categorical feature indices from the config parameters (see the part outside the `if (filename != nullptr) { ... }`). Skipping `SetHeader` directly here will cause errors when we load data from numpy or pandas arrays (where `filename == nullptr`) and use categorical features. So I think we should move the the check `filename != nullptr && CheckCanLoadFromBin(filename) == \"\"` into `SetHeader`. That is, we change `if (filename != nullptr) { ... }` into `if (filename != nullptr && CheckCanLoadFromBin(filename) == \"\") { ... }`"}
{"pred": "Why this change?", "gold": "I think we should change the variable name of `err` in `if err, ok := err.(*exec.ExitError); ok `, this re-assignment of `err` still affects the next `else` branch"}
{"pred": "Why do we need a separate function for this?", "gold": "`Status` has identical semantics with `StatusOr<bool>`."}
{"pred": "I think this should be `/mutate/labels`", "gold": "why is this named in a different style from other paths?"}
{"pred": "I think this should be `util.IsPaused`", "gold": "Swapped these to ensure that we aren't passing a nil cluster in to util.IsPaused"}
{"pred": "nit: `platformPkgManagerTuple` -> `platformPkgManager`", "gold": "I don't see pkgManager used anywhere, is there a reason we need this?"}
{"pred": "Why do we need this change?", "gold": "A bit late, but I don't think this is necessary, as all callers will send absolute paths. And if you ever get a relative path, resolving it with `toAbsolutePath()` leads to it being relative to whatever CWD the app is started with, while the typical resolving of relative `instanceDir` is to resolve it relative to CoreContainer#coreRootDirectory."}
{"pred": "`localFieldPathType === 'real' ? modelSchema.paths[localField] : modelSchema.schema`", "gold": "There's an awful lot of test failures here because `localFieldPathType.schema` may not contain a `getters` array."}
{"pred": "Shouldn't this be `||` instead of `||`?", "gold": "Mysql allows for `||` concatenation (e.g. `firstname||' '||surname`) if you enable it: `set sql_mode=PIPES_AS_CONCAT;`. I think this check is safer though"}
{"pred": "Why this change?", "gold": "NOTE: this is the default ENS registry address. If the ENS suite is deployed from the current builds to any chain, it will always be found at this address."}
{"pred": "Why do we need this?", "gold": "I'm curious why you are using `draw` in this route file?"}
{"pred": "Why not just `ctx.Handle(200, diff)`?", "gold": "Those variables are only been used once, I think we don't need to create them at all, just pass values to the `GetRawDiff` directly."}
{"pred": "Why was this removed?", "gold": "I like the idea of replacing all the `#if NET461` with `#if NETFRAMEWORK`... is that worth doing now? Means fewer changes if we go to 4.7.2 at some point  "}
{"pred": "Why do we need this?", "gold": "to fix the docs build failure, make this const var named without the suffix `Name`"}
{"pred": "Why is this needed?", "gold": "This bugfix also included, in case a subjectAlternativeName was present in the cert, then URIs (e.g SVID SPIFFE auth) would not have been attempted."}
{"pred": "Why do we need this interface?", "gold": "Same here. Feels like the wrong location."}
{"pred": "Why is this import needed?", "gold": "Please make `_path_suggestion` public (i.e. remove the `_`) in `downloads.py`."}
{"pred": "I think this should be `external-port-443-is-local-port`", "gold": "Woah, these flag names gotta get shorter. (Edit: I'll try to suggest some if needed, will think on it.)"}
{"pred": "Extra empty line detected at block body beginning.", "gold": "Is this the code that's supposed to use the Rails app's only when in Rails4? What's the point of the first `if app.respond_to?(:secrets)`, both the `if` and the `elsif` have the same body, is only the second one needed? If `app.config` has a `secret_key_base`, then use it, the end. Is there a need for first checking if `app.respond_to?(:secrets)`?"}
{"pred": "`m_is_objc_enum = enum_decl->isObjC()`", "gold": "Does this not apply to C enums on Linux?"}
{"pred": "Why do we need to check for `isRetryableWriteError` here?", "gold": "Should this check if the error is `RetryableWriteError` before adding the label?"}
{"pred": "I'm not sure if this is the best way to do this. I'm not sure if there's a better way to do this.", "gold": "Oh wow, that's one complicated require :)"}
{"pred": "`usie` should be `using`", "gold": "do you mean how to \"use\""}
{"pred": "I don't think this is the right way to do it.", "gold": "We can't really test this anymore since ref and props.ref are at the backing node level now"}
{"pred": "`currentTask` -> `currentScanTask`", "gold": "Did you intend to set this in the constructor?"}
{"pred": "I think this should be `18.04`", "gold": "This looks fine as a first approach, and can we put a TODO here about ubuntu 18.04 being hardcoded?"}
{"pred": "Why is this needed?", "gold": "This isn't strictly needed since lmdb / leveldb data that is unencoded does not require OpenCV IO. I think `DataLayer` should only require lmdb / leveldb. If one tries to use encoded data without OpenCV the `DataTransformer` guards will report the dependency failure."}
{"pred": "Why not return the error here?", "gold": "Should we take out this change? This was only in there to try to brute force the start of the apiserver yesterday."}
{"pred": "Shouldn't this be `through: :completers, source: :user`?", "gold": "I worry that this association name is a bit confusing. Yoz was asking me about the concept of completion yesterday, which is why I think of it. It wasn't clear to him exactly what it was. what about calling this a `step_completer` ? we know that a proposal has many steps, so I think that might be clearer. in the future, we also might want the rename the `approver` relation because a step is not always an approval these days."}
{"pred": "Why was this removed?", "gold": "Just add a to-do saying we need to add api-version in the check some time in the future when we enable the single-swagger spec mode for validation."}
{"pred": "Why is this needed?", "gold": "@lunika Please see this. It allows us to do `Propel::getConnection()` easily, as we have only one database."}
{"pred": "Why do we need to cast here? Isn't `scope.Span` a `Span`?", "gold": "Not related to this particular cast but I wonder if we shouldn't have a cast helper that would log if null to gain visibility."}
{"pred": "I don't think we need `ownedByMe` and `permissions(role,emailAddress)`", "gold": "why do we need to explicitly declare these fields?"}
{"pred": "`$serverClass` is no longer used.", "gold": "Note that there are multiple OAI servers -- that's why `$serverClass` is a variable here. You'll want to fetch `$serverClass` from the service manager rather than a hard-coded value, and also set up a module.config.php for the authority record version, `VuFind\\OAI\\Server\\Auth`. Should be easy enough since it can share the same factory."}
{"pred": "Why is this needed?", "gold": "This is no longer needed and should be removed."}
{"pred": "Why do we need this check?", "gold": "could use named return params here to avoid declaring the opts, and using naked returns instead."}
{"pred": "I think this should be `if (!item.images.thumbnail)`", "gold": "this is an unrelated fix. I noticed when an instagram carousel post is mixed with images and videos, the videos don't come with thumbnails, so I am adding a fallback thumbnail for this case."}
{"pred": "`parentWeight` is unused (from `structcheck`)", "gold": "\"... after protocol version 1\"?"}
{"pred": "What is the reason for this change?", "gold": "Is there a unit test that covers this regexp? I am afraid that changing it might break things =/"}
{"pred": "Why is this change needed?", "gold": "This change is okay IMO because an `@` variable in Ruby is not a reference -- `@` variables are instance variables. Also, it's never used by the Ruby transformers."}
{"pred": "Shouldn't it be `{{ name }}`?", "gold": "Why this change was needed? Because in `po` files it's with curly braces?"}
{"pred": "Shouldn't this be `off + 0x10000 < 0x10000`?", "gold": "Wait -- where did this change come from? This seems unrelated to trace building and seems like it could affect basic execution, unlike the rest of this PR which is all under the off-by-default trace option. Please separate this into its own PR and probably ask @AssadHashmi to review."}
{"pred": "", "gold": "seems to be redundant (mention `docusaurus`   )"}
{"pred": "What is the purpose of this method?", "gold": "Can we combine this with the Rollback API? We could still support the `rollback` method here, but combine `Rollback` and `CherryPick` into something like `ManageSnapshots`. Then we could reuse logic for enforcing checks of the current snapshot. What do you think?"}
{"pred": "Shouldn't this be master_env_prefix?", "gold": "Maybe just `env_prefix`, I don't think this is referring to the WQ manager."}
{"pred": "Why did you remove this?", "gold": "Unrelated line change :)"}
{"pred": "nit: remove empty line", "gold": "I raised an eyebrow at making `net` depend on `k8s.io`, but it seems we're already doing that."}
{"pred": "Why do we need to replace the company?", "gold": "I think ticket meant, not applying replacement in this method, but rather applying encodeSomeHtml to each and every localization string"}
{"pred": "Shouldn't this be `|| error === null`?", "gold": "ticket for the 4.0 epic?"}
{"pred": "why do we need to check for `pretrained`?", "gold": "`cfg.model.get('neck')` will return None if neck does not exist, thus we can omit the default value."}
{"pred": "Style/MutableConstant: Freeze mutable objects assigned to constants.", "gold": "Trailing whitespace detected."}
{"pred": "Should this be `CXXFlags`?", "gold": "I don't see why a `cxxflags` key is necessary? C flags are important in the target file because they define things like the float ABI. But these flags are also used for C++. I can't think of a reason why you would want to configure C++ flags in a target file."}
{"pred": "Please don't change unrelated code.", "gold": "Update year range in Copyright notice, and elsewhere too."}
{"pred": "I think this should be `AccessKeyIDRef`", "gold": "Can we update this PR to not be a breaking change? i.e. if a user specifies `accessKeyID`, it is still used. But if a user specifies `accessKeyIDSecretRef`, it takes precedence?"}
{"pred": "Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "You don't actually need both tests here as \"truthiness\" means that `\"0\"` is false and hence the first test will be true..."}
{"pred": "This should be `I18n.t('subscriptions.flashes.cancel.success')`", "gold": "Everything else in here is using `I18n`. Should we do that here to be consistent?"}
{"pred": "why do we need to change this?", "gold": "What do you think about changing the ordering to be `<protocol>:<cidr>:<port>`? I think it matches the most with what we previously had so that it doesn't change too much for our users."}
{"pred": "Why did you remove the < 0 check?", "gold": "I'm fairly sure this precondition is always true due to the mod (%)"}
{"pred": "nit: space after `:`", "gold": "I love seeing diffs like this one, adding a `String` message to an otherwise cryptic `assert`! It makes me realize you must have had a hellacious debugging session!"}
{"pred": "Shouldn't this be `if c.Version == 0`?", "gold": "1. No logger exists to produce a message 2. Can't assume the latest version because missed version means 0."}
{"pred": "Why do we need this method?", "gold": "I saw a wrong reuse of the cache between a partial analysis of a single file and a full run where errors due to lack of context on the first partial run was reported on the full run. Shouldn't we use a hash that is composer.lock + psalm.xml + command line to be safe?"}
{"pred": "Shouldn't this be `ks.DatetimeIndex`?", "gold": "Could you also update it in `at_time`?"}
{"pred": "I'm not sure if this is the right way to do this. I think it should be `LOCALITY_WHITELIST_FS.getOrDefault(scheme, LOCALITY_WHITELIST_FS)`", "gold": "Because schema is non-final we can't just switch this to a lambda"}
{"pred": "`While resolving function '{0}' follwing exception occured: {1}`", "gold": "proposal: **always** add the exception to the end of the message. So no need to to pass exception twice (implicit and explicit). Need a lot of changes."}
{"pred": "Why do we need to set the invocation type here?", "gold": "why? event.getInvocationType is not you want?"}
{"pred": "Why do we need this?", "gold": "nit: how about `GitSHA`?"}
{"pred": "#define FAIL_DIR \"makeflow.abort.%d\"", "gold": "If you move the other functions, this should also be moved to `makeflow_gc.h`."}
{"pred": "line too long (81 > 79 characters)", "gold": "This whole block bugs me. Expire_time to me suggest that an absolute time of when something happens and duration is an interval of time. While the code looks correct, it feels awkward to read."}
{"pred": "Why do we need to do this?", "gold": "Can we add `_dom` as an argument to createVNode here? I think it might be shorter (could totally be wrong!)"}
{"pred": "Shouldn't this be `PRE(ilist, instr, popf)`?", "gold": "I think that the iret handling is not yet good."}
{"pred": "Why is this change needed?", "gold": "Huh, that's kinda weird. I get it, but it's unexpected to me..."}
{"pred": "Why was this removed?", "gold": "why is this removed? it is important when you upload from stream of unknown size"}
{"pred": "Rails/InverseOf: Specify an :inverse_of option.", "gold": "Out of curiosity, why is this needed? Does it enforce what class can be assigned?"}
{"pred": "Why do we need this?", "gold": "non-blocking: Now that we have a handful of statements which deal with creating a listener, it may make sense to introduce a `createListener` method or something similar"}
{"pred": "Why do we need this?", "gold": "factory should be stateless if possible, looks like much complexity added"}
{"pred": "Why do we need this property?", "gold": "Could you please add short description for the default value as well?"}
{"pred": "Why not return the error here?", "gold": "Leave a TODO message to say we will fix the log level in the future, once committing the block and the state become a transaction"}
{"pred": "I think this should be `write.delete.parquet.row-group-check-min-record-count`", "gold": "this can be integer"}
{"pred": "Shouldn't this be `font-weight: bold`?", "gold": "nitpick: Please remove the blank line here"}
{"pred": "set_table_name 'changesets'", "gold": "What is this for? The only methods I can see by that name in the rails doc are generating a foreign key name from a model class name but you seem to be giving a key name as argument?"}
{"pred": "Shouldn't this be `/authentication/pki`?", "gold": "Is this second check necessary? we know that just after the plugin was created its metricRegistry is null, it's set only after `initializeMetrics` has been called."}
{"pred": "Shouldn't this be `<` instead of `<`?", "gold": "shouldn't this be `return TALKACTION_BREAK;` as the player does not meet the required group access?"}
{"pred": "Why do we need to wait for peer count to be 0?", "gold": "does this still work if minerNode1 has already proposed a block before 2 & 3 are stopped?"}
{"pred": "Why do we need to desugar this?", "gold": "I am wondering if we can either make this a feature or have a way to turn it off in production. My concern is that we might be adding more of these kind of code in the future."}
{"pred": "Why is this needed?", "gold": "We can just use `.stack()` here? Then I guess we can reuse when supporting multi-index columns."}
{"pred": "I think this should be `return !string.Equals(setting, bool.FalseString, StringComparison.OrdinalIgnoreCase);`", "gold": "What are the possibilities here? Since we plan on supporting .net standard 2.0 from day 1, we might as well tackle that now."}
{"pred": "Shouldn't this be `SpanReference`?", "gold": "should the parameters be called reference or context?"}
{"pred": "Why not `in_buffer.slice(index..-1)`?", "gold": "Do we need to also change `length` here (and below) to `bytesize`? Perhaps we ought to make a copy of `in_buffer` encoded as binary and then the existing algorithm should work."}
{"pred": "`yank_text` should be `yank_url`", "gold": "This should be `toDisplayString()` to not contain e.g. passwords."}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.", "gold": "Can we just say that having a non-nil `autocomplete_path` implies that autocomplete is enabled?"}
{"pred": "Why is this change needed?", "gold": "Note that the package github.com/golang/protobuf/proto is deprecated. We're instructed to use the \"google.golang.org/protobuf/proto\" package instead. I didn't want to change it now to avoid intrusive changes whose consequences are, currently, unknown."}
{"pred": "Why are we removing these?", "gold": "Are these gone routes? Do we need to 301 them?"}
{"pred": "nit: remove empty line", "gold": "move them to internal group of imports"}
{"pred": "glog.Errorf(\"Please handle cStorPool '%s' event on '%s'\", string(operation), string(cStorPoolGot.ObjectMeta.Name))", "gold": "can we rewrite this as: `ignored event '%s' for cstor pool '%s'`"}
{"pred": "I think this should be `approval_official`", "gold": "not all client data types have an approving official (eg: 18F does not). do we still want to include the relation here?"}
{"pred": "Why do we need this change?", "gold": "This change should also probably go into the corresponding method of the abstract By class?"}
{"pred": "Why was this removed?", "gold": "why this remove?"}
{"pred": "Why do we need this change?", "gold": "As the test failures indicate, making this change is going to mean changing everything which currently implements this interface."}
{"pred": "I think this should be `/forum.upcase.com`", "gold": "Do we want to redirect this to the forum or something in case people have it linked/bookmarked?"}
{"pred": "Why do we need this change?", "gold": "@peterzimon came up with this 'NM' piece as a placeholder for New Member initials, without this the screen looks broken. It changes to normal initials calculation once email or name is entered. Lmk if you'd like to put something different here ;)"}
{"pred": "Shouldn't this be `memberSubscription`?", "gold": "@kevinansfield Would be cool if you can take a   if this is the best way to add `subscriptions` info on member model. This uses the transform + separate model definition way which seemed to be the right way from other references in Admin  "}
{"pred": "I'm not sure this is the right way to do this. I think it would be better to do this in `__init__` instead of `__init__`.", "gold": "This is the common way of dealing with optional dependencies"}
{"pred": "Why do we need this change?", "gold": "nit: we can replace all `kr` in this file with like `src`."}
{"pred": "Why did you remove the `||` here?", "gold": "same concern here as above"}
{"pred": "`criteria.options.fetch(:read) if criteria.options[:read]`", "gold": "Thank you for this, I gather this repairs failures that I've seen in another PR."}
{"pred": "why do we need to distinct here?", "gold": "This place probably makes sense to me. We can consider exposing an argument to make the dedup step optional (I am not sure it is a good idea but I want to think this through together). The dedup step we are adding is going to trigger a shuffle. Technically, we are fine in the existing expire snapshots action as it does the dedup in `except`. The question is what kind of performance impact deduplicating here will have. We only have duplicates if multiple manifests reference the same files. In `rewrite_manifests` procedure, we rewrite all manifests, meaning we produce a snapshot with new manifests where entries are old data files. Also, there are updates and deletes that may rewrite manifests. I think deduplicating here makes sense to me in all cases. Thoughts, @rdblue @flyrain @RussellSpitzer @karuppayya?"}
{"pred": "Why do we need to remove it from etcd?", "gold": "can we move the code before deleteNodeFromDB ? this way even if the node crashes after remove config we can still re-run decommission again ?"}
{"pred": "why did you change this?", "gold": "Seems the default value of `melt`'s `var_name` at namespace.py should be changed as well."}
{"pred": "I don't think you need the `_botocore_parser_integration_test` here.", "gold": "I think botocore's serializer should already create the correct headers. However, they are currently not used in `_botocore_parser_integration_test`(line #217). Maybe we could remove the headers here and just use a fallback in the `_botocore_parser_integration_test` (i.e. use the given headers if they are set, otherwise use the headers generated by botocore's serializer)?"}
{"pred": "Shouldn't this be `delete_singular`?", "gold": "This code is passing a non localized string when it should be passing in a localized string or it should use the name of the item being deleted."}
{"pred": "`this.id = opts.id || this.provider`", "gold": "in case you want to rename one of the plugins when instantiating, from options?"}
{"pred": "`CTU_FUNC_MAP_CMD = 'clang-func-mapping'`", "gold": "This default variable should be moved into a config variable, created by `package_context`, and read from `config\\package_layout.json`."}
{"pred": "I think it would be good to have a test for the case where the width returned from the function is not a number.", "gold": "Can I ask you to add a new line after `const` assignment? I believe that this increases the code readability by encapsulating assignment and logic (expecting) blocks."}
{"pred": "Why do we need this guard?", "gold": "So the intention is you configure with `-CMAKE_CXX_FLAGS=\"-D KOKKOS_IMPL_TURN_OFF_CUDA_HOST_INIT_CHECK\"`?"}
{"pred": "Shouldn't this be `1.0f`?", "gold": "This was a bug."}
{"pred": "`array_key_exists('class', $attributes) && $attributes['class'] !== ''`", "gold": "Is OK that we don't have some placeholder?"}
{"pred": "Why this change?", "gold": "Sectorbuilder behaves differently depending on whether it's given 1 or more threads. It won't seal if only given 1."}
{"pred": "Why is this needed?", "gold": "Sort of believe We should put MetricManager in constructor parameter given this case."}
{"pred": "Why do we need a new field for a partition field?", "gold": "Do we need to check `fieldId` is larger than 1000?"}
{"pred": "Shouldn't this be `check_acked_status`?", "gold": "I think this should be called after the if below (the one for disable positive acks)"}
{"pred": "Shouldn't this be `List<DataFile>`?", "gold": "I'd like to avoid changing this method since it is public and using a URI will probably change behavior for users passing strings (String -> URI -> Path instead of String -> Path)."}
{"pred": "Why do we need to stash env here?", "gold": "Should these restore the stashed env after the test runs?"}
{"pred": "Why not just `for default_node in scope.args.kw_defaults`?", "gold": "We're calculating the full list of kwargs here (even if the first element of the list would return True) so we could improve performance by using a generator line 408 in ``for default_node in all_defaults:``."}
{"pred": "nit: `execlusively` -> `usually`", "gold": "Can ndelta differ depending on when the deltas are compacted? That is, when intermediate updates are dropped?"}
{"pred": "Shouldn't this be `XPathRule`?", "gold": "Our checkstyle config likes it better when the `<p>` is before the first word of the next paragraph, and not on a blank line"}
{"pred": "Why do we need to close it here?", "gold": "This looks to be the only place where we return early before the close below, so if the \"double close\" is bothering people, closing manually here (and removing the `defer`) could be an option"}
{"pred": "I think this should be `npm run test:jest`", "gold": "This task can probably be deleted since we don't need gulp to run Jest."}
{"pred": "Why do we need to check for cygwin here?", "gold": "Doesn't this need to include `Errno::ECONNRESET` to fix the issue?"}
{"pred": "Should this be `@faker.version next`?", "gold": "never heard of a qirector... what's their role again? (also should be 'for a movie')"}
{"pred": "nit: `if (tagContexts_.empty() && onlyVertexProps_) {`", "gold": "Implement the \"collect all props for one vertex\" logic inside QueryVertexPropsProcessor"}
{"pred": "Why not just `result = stream.eof()`?", "gold": "This is to prevent parsing things like \"1.1\" as \"1\" until we implement it properly."}
{"pred": "`_getCheckpointParentDir` doesn't seem to be used.", "gold": "Can we change `_getCheckpointParentDir` to be a public function explicitly? It seems like something that clients of experiment runner may wish to use."}
{"pred": "This should be \"UI Automation to access the Windows Console\"", "gold": "Why is a restart necessary?"}
{"pred": "Why do we need this check?", "gold": "Should setting the task runtime also go under the above if condition?"}
{"pred": "I don't think this is used anywhere.", "gold": "SPIRE uses the leadingLowerCase convention for unexported constants"}
{"pred": "Why is this needed?", "gold": "The newest JSchema code generator orders `System` usings first."}
{"pred": "Why do we need to check if `selectedColumns.length > 0`?", "gold": "I understand that we want to have a possibility to configure the IcebergInputFormat to be case sensitive or case insensitive since it can be used by other MR jobs as well. Do we want to allow the users of Hive to shot themselves on the foot and enable case sensitivity? My first guess would be that we should not use the configuration here, just go with `false`, but if you have some specific use-case in your mind I can be easily convinced  "}
{"pred": "Why do we need to set it to true here?", "gold": "Will the above call to cStorPoolAddEventHandler() get executed in the same thread as this line?"}
{"pred": "Shouldn't this be `!fn.fn.IsAAllocaInst().IsNil()`?", "gold": "I don't think alloca instructions are always at the start of the entry block. I think it would be safer to check the entire entry block for alloca instructions, just in case some are not the first instruction. (Technically they can be anywhere in the function but we check in other places that this isn't possible)."}
{"pred": "Why do we need these constants?", "gold": "Why isn't this 4789 (which I think is the Felix default)?"}
{"pred": "`Import failure` -> `Import operation failed`", "gold": "Can this be `Import operations failure`? In addition, is this the right time to change the variable names? e.g. `ReasonImportOperationsFailure`, `ReasonImportFailure`, `ReasonImportSuccessful`, `ReasonCreateResourceFailure`, `ReasonImportResourceSuccessful` Naming convention that i have assumed here is as follows: `Reason<Action><Entity/Adjective of the Entity><Sucess/Failure>`"}
{"pred": "`rbuf_ivar_id = rb_intern(\"@rbuf\");`", "gold": "I suspect this isn't needed because I think `rb_intern` gets marked already."}
{"pred": "Why is this being changed to `finest`?", "gold": "This change is incorrect: the current log level is correct."}
{"pred": "nit: space after `=`", "gold": "Can you add a space before the equal sign? There are a couple other places where spaces are missing in this PR."}
{"pred": "Shouldn't this be `>=` instead of `<`?", "gold": "Please follow the todo naming convention."}
{"pred": "`CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value.`", "gold": "These are no longer used and changes should instead be made directly to the files in `deploy/chart/crds`   /assign @JoshVanL /unassign"}
{"pred": "nit: `xywh` -> `xy_weights`", "gold": "Is this really necessary to work around this way? The old version works fine with me when converting to ONNX."}
{"pred": "I don't think this should be changed.", "gold": "Same as above: don't start error strings with a capital letter, and don't fix unneeded things in an unrelated commit ;)"}
{"pred": "@logger.debug \"going to upload! #{source} to #{@hostname}:#{target}\"", "gold": "Is this a testing debug statement?"}
{"pred": "I don't think we want to log the error here.", "gold": "you'll need to wrap the _whole thing_ within this async call (or refactor it so everything below is in a new temporary function). The code below this section depends on a value for `object` after the parsing occurs, but what you're doing here is kicking off a race condition where `object` is null, but _might_ parse quickly enough to assign it the parsed parts. Instead, you need to do everything that depends on the parsed object in the callback of `parse`."}
{"pred": "`std::lock_guard<std::mutex> lk (mutex);` ?", "gold": "This is now going to be protecting `stopped` when it doesn't need to. If you are going to do this then can you make `stopped` non-atomic and protect it in `stop`. It's cheap to make a `unique_lock` fyi, it's just a pointer to a mutex and a `bool`. The `lk.lock ()` in the loop is superfluous so probably shouldn't have been there to begin with."}
{"pred": "Why do we need this alias?", "gold": "Lets not give packages names if we dont have to. If a package requires a rename, we should change the actual name while/if we can."}
{"pred": "Shouldn't this be `TEST(1U << 31, enc) || TEST(1U << 15, enc)`?", "gold": "Not sure I see where this is coming from. This is a bug fix? Should be mentioned in the commit message? Same below."}
{"pred": "Why was this removed?", "gold": "I reverted this change in the last commit, I think we should revert it here. I know this leads to confusing test output for skipped tests, but I would prefer to tackle that in a separate PR specifically focused on that problem. In fact, I think the issue might really be with the leak checker, and not how this test runner is defined. Please make a ticket for this (if it doesn't already exist) and revert this change"}
{"pred": "Can you add a note that this is only used in OpenImage Dataset?", "gold": "Can this part be done in `dataset.get_ann_info`? Just like CocoDataset converts xywh to xyxy in `_parse_ann_info`"}
{"pred": "Why do we need this change?", "gold": "Should we change the name of this test struct to be `testTracerProvider` as well?"}
{"pred": "nit: remove empty line", "gold": "\"google.golang.org/grpc\" should be together with \"go.uber.org/zap\" all \"\"github.com/iotexproject/iotex-core/*\" stay together"}
{"pred": "Why do we need this?", "gold": "No need for a separate variable here - just call `utils.read_file` directly below."}
{"pred": "why do we need a new timer here?", "gold": "Thanks for the fixing, small question, Here the message just be written to the channel, will it be blocked?"}
{"pred": "nit: `re-written` -> `rewritten`", "gold": "maybe we will have something like `Bodies []byte(\"bodies\")` instead of them being a number? with numbers we are making it harder to insert stages mid-process."}
{"pred": "Why did this change?", "gold": "out of curiosity, why making this change? If no real reason, could you restore to avoid unnecessary changes of several generated files?"}
{"pred": "Why do we need to publish this event?", "gold": "Could we public events if `manager.serStatus()`?"}
{"pred": "I don't think we need the `<script>` tag in the error message.", "gold": "could be misread as `<body>`, maybe something redundant but very clear like \"before the closing `</body>` tag\"?"}
{"pred": "Shouldn't this be `WriteAsync`?", "gold": "This test is specifically checking behavior on sync I/O (note there are tests with Write in the name, and other tests with WriteAsync). Enable sync I/O here."}
{"pred": "Layout/TrailingBlankLines: Final newline missing.", "gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping."}
{"pred": "nit: `CstorVolumeVolumeSource` -> `CstorVolumeSpec`", "gold": "nit: Should we have something like `volumeName@snapShotname` and this will be filled only if it is a clone creation"}
{"pred": "Shouldn't this be `MkdirAll`?", "gold": "This seems like an improved pattern :)"}
{"pred": "I don't think this is the right way to do this. The default should be `cdh4`", "gold": "I think it would be better to have a separate configuration option for specifying which HDFS interaction layer to use instead of using the existing hadoop version option. I think there are still cases where things might have to rely on Hadoop version for other things, and overwriting that information with \"snakebite\" would make that difficult. The existing hadoop version option could still be used to distinguish the different HDFS CLI flavours."}
{"pred": "Layout/SpaceAfterComma: Space missing after comma.", "gold": "Why are we filtering content twice? It seems like just filtering it in PAL should work."}
{"pred": "Why was this changed?", "gold": "These should probably move to `constants.js`"}
{"pred": "Why is this import needed?", "gold": "Again, you don't want to depend on glassfish."}
{"pred": "This should be `Faker::Space.launch_vehicule`", "gold": "it should be `Faker::Space.launch_vehicle`, otherwise it will crash"}
{"pred": "nit: `this.ArchiveEvery != FileArchivePeriod.None`", "gold": "Isn't it quite expensive to check whether the file exists on every write?"}
{"pred": "Why do we need to check if CORS is available?", "gold": "Please hide this behind a flag and add a setter function to the builder."}
{"pred": "Shouldn't this be `DELETE /all`?", "gold": "old api should be deprecated if we don't intend on using it anymore. Again this should happen through swagger api and then removed from next release. We should also release not this as a breaking change. (same with all the other cloudsnap api renames."}
{"pred": "\"may have been occupied\" -> \"may have been occupied\"", "gold": "so strange...... canTcpListen is to detect, if this transport can init when customers deployed vertx and servlet rest transport, we must detect which one will be used only both of them refused to init is a problem. we have already print that......"}
{"pred": "`SELECT_COUNT_FORM` -> `SELECT_COUNT_WITH_JOIN`?", "gold": "Did you mean for this to be `FORM`, instead of `FROM`?"}
{"pred": "I don't think we need to add a new field to the `CloudInit` struct.", "gold": "What are your thoughts on the long term solution for the naming of this variable? Do you think we should revert the logic when we are ready to make the next set of breaking API changes?"}
{"pred": "Space inside { missing.<br>Space inside } missing.", "gold": "There's a syntax error on this line."}
{"pred": "Why is this change needed?", "gold": "You lose the value of `result` when you `goto out`"}
{"pred": "nit: `var ratio = this.ratio_ === undefined ? 0 : this.ratio_`", "gold": "Just a style thing, why not `this.ratio_ || 0`?"}
{"pred": "Why do we need to mask the IP here?", "gold": "I think the stdlib's `net.IP` has a `Mask()` method, does that do what we need?"}
{"pred": "`Substitute` is unused (from `deadcode`)", "gold": "Why does substitute need to be public? Are we allowing/encouraging variable usage when using Daisy as a library?"}
{"pred": "I think this should be `if js_elem == \"selected\":`", "gold": "We should probably use ctrl-enter if `tab` is given, just like in `follow_selected`?"}
{"pred": "Should this be `CreateTChannelDispatcher`?", "gold": "This file looks like anti pattern `ServiceLocator` and lucky it's not used anywhere. Can I remove it? (in separate PR)."}
{"pred": "nit: rename to `getDownloadSizeBytes`", "gold": "we can just have this method call the next, passing in the file metadatas (deduplication of logic)"}
{"pred": "Please remove this blank line.", "gold": "What happens here if you send the `wheelEvent` directly to the `tabbed_browser` and let it take care of propagating it to its children (i.e. the focused tab)? If that works, I guess that'd be cleaner."}
{"pred": "Why do we need this function?", "gold": "it seems python 2 don't support `end=''`. @StrikerRUS @henry0312 any better solution? or we drop the support of python 2?"}
{"pred": "Shouldn't this be `VUID-VkImageViewCreateInfo-image-parameter`?", "gold": "This test already exists in the object_tracker layer."}
{"pred": "nit: `isGoQuorumCompatibilityMode` -> `goQuorumCompatibilityMode`", "gold": "Same here, can we presume if `privacyParameters` is set we need goQuorum handling? Or is there a goQuorum sub option in `privacyParametes`?"}
{"pred": "nit: `newManifests` -> `manifestsToDelete`", "gold": "The addition of delete files in `newManifests` far above the addition of data files threw me a bit. Is it intentional to ensure the delete files are at the front of the list?"}
{"pred": "I think this should be `raise ValidationError.new(\"Groups must be an Array\") unless groups.is_a?(Array)`", "gold": "Interesting. The call to `Array(groups)` below this would seem to indicate this doesn't _have_ to be an array. I think the problem is actually that passing a hash to `Array()` actually converts the hash to an array of key/value pairs rather than wrapping it in an array. So maybe `Array(groups)` should be `groups = [groups] unless groups.is_a?(Array)`."}
{"pred": "I think this should be `history.expire.max-retain-min-num-snapshots`", "gold": "This is not a particularly good default but we need it to keep the old behavior."}
{"pred": "Why was this test removed?", "gold": "We have other tests to assert all properties of a condition are valid. It's enough to assert the condition is not nil here."}
{"pred": "Should this be `crdv1alpha1`?", "gold": "shouldn't the import be renamed `crdv1alpha1` by convention? It seems that you took care of renaming everywhere else..."}
{"pred": "nit: `pauseContainerImageName` is unused (from `deadcode`)", "gold": "nit: Can Linux-specific paths be moved to a conditionally-compiled file for Linux?"}
{"pred": "Why is this needed?", "gold": "This is not the right approach. The `Distributor` maintains a model of the current state of the Grid. That model already contains the information about every active session. We don't need to modify `SessionMap` to expose it further."}
{"pred": "I think this should be a warning instead of an error.", "gold": "Git doc seems to suggest `for-push` is a optimization. Do we have a plan/ticket for treating them differently?"}
{"pred": "I don't think we want to add `bp` to the list.", "gold": "This not necessary since you moved the layers to `contrib/`."}
{"pred": "Shouldn't this be `any`?", "gold": "I think this also needs to be removed from `resources/bolt_bash_completion.sh`, `rakelib/pwsh.rake`, `lib/bolt_spec/plans.rb`, and `lib/bolt/config/options.rb`."}
{"pred": "Space inside { missing.<br>Space inside } missing.", "gold": "I fixed this today with a direct push to master. My build was failing otherwise."}
{"pred": "Why do we need this class?", "gold": "not sure why this is in a \"rule\" child package from the interface..."}
{"pred": "Why do we need this?", "gold": "Not needed, please remove."}
{"pred": "Shouldn't this be `!h2o_url_compare_hosts(loc_parsed.host, match->host)`?", "gold": "Shouldn't the logic be: * the result is a mismatch if either is a unix path but the other is not * if both are unix paths, then perform case-sensitive comparison * if both are not unix paths, then perform case-insensitive comparison"}
{"pred": "Why this change?", "gold": "This is just rearranging it alphabetically"}
{"pred": "Why do we need to disable this?", "gold": "I think this disables it for the rest of the file - you should be able to use it inside of the function instead."}
{"pred": "Shouldn't it be `string|int`?", "gold": "this could receive the MediaInterface directly or an identifier, it is correct to type it with int|string? or just use mixed?"}
{"pred": "nit: `valuesArray` -> `leafValues`", "gold": "Why not return `Object[]`?"}
{"pred": "Should these be `Integer` and `Long`?", "gold": "Looks like we are trying to match the new ordering of fields in `ManifestFile`. Earlier, we co-located `...FilesCount` with `...RowsCount` to match the ordering of methods in `ManifestFile` and args in constructors. Is this change intentional?"}
{"pred": "Shouldn't this be `summon->setMaster(this);`?", "gold": "You're already setting drop loot to false just above."}
{"pred": "Why do we need this?", "gold": "`once` is very generic and doesn't specify it's purpose - `closeOnce`?"}
{"pred": "Why is this change needed?", "gold": "Why did this need to change from `private`? Oh for the test below. And this is only a test class too.  "}
{"pred": "Extra empty line detected at class body beginning.", "gold": "Should test the `has?` method here"}
{"pred": "`$this->assertNotNull($link);` can be removed.", "gold": "I think you want to be asserting/clicking $saveLink, not $link."}
{"pred": "I think this should be `target_pipeline_name`", "gold": "We don't have `target_name` on `@sensor` - why introduce it for `@asset_sensor`? If we do want to introduce it everywhere, can we just call it `job_name` to avoid introducing a new term?"}
{"pred": "Why do we need this?", "gold": "Missing copyright header (+other new files)."}
{"pred": "Why remove this check?", "gold": "Could we do the flag check here as well to check whether or not we have enabled the \"Handle without timezone\" flag here as well? We may be using this not on the read path (like in the migrate/snapshot code) and it would be good to catch it here as well and make sure users know what is happening."}
{"pred": "Shouldn't this be `pipeline_definition_sensor`?", "gold": "why is the file named `pipeline_definition_definition_sensor`?"}
{"pred": "Why do we need this check?", "gold": "None not needed, can just be `return`. not important for this release"}
{"pred": "I don't think we should be showing the dispense button here. We should be showing the dispense button in the frontend.", "gold": "I think it's missing closing `</p>` tags in line 108 and 109 unless they don't matter..."}
{"pred": "Should this default to true?", "gold": "So it seems that loading a script file from the classpath needs to be enabled explicitly now since this is `false` by default. Is it possible to enable this via the YAML config file in a Camunda Platform Run distribution?"}
{"pred": "Why was this removed?", "gold": "can we delete any code in the provider implementation? i imagine the entire thing is unused now?"}
{"pred": "This function is not used anymore.", "gold": "I suggest we remove all these unused functions. I don't expect any external projects to be importing packages from `cert-manager/test/...`"}
{"pred": "Shouldn't this be `!request`?", "gold": "Looks like the template argument doesn't resolve by default so you need `std::lock_guard<std::mutex> lck`"}
{"pred": "Why was this removed?", "gold": "Are we removing this public method? Could it be useful to someone? Maybe we could implement it once in Node using the metamodel"}
{"pred": "Should this be `!=`?", "gold": "I think this method is unused now?"}
{"pred": "I don't think we need to create a new controller if the feature gate is disabled.", "gold": "I know we discussed this before and decided to reuse the AntreaPolicy gate. But do you think realization status will introduce much overhead or not?"}
{"pred": "I don't think we need the `sudo nohup`", "gold": "please add a blank line at the end of this file. Applicable to similar cases below"}
{"pred": "Shouldn't this be `remoteHost` instead of `remoteHost`?", "gold": "This is not really needed, the line added in `GridNodeConfiguration.java` is what really fixes the `remoteHost` regression."}
{"pred": "Shouldn't this be `toSearcher.getFilterCache().isAsync()`?", "gold": "filterCache can be null"}
{"pred": "File is not `gofmt`-ed with -s", "gold": "File is not `goimports`-ed (from `goimports`)"}
{"pred": "`SET_PARAM_CMD_FAIL_RSP` -> `SET_PARAM_CMD_FAIL`", "gold": "If strstr returns NULL, the check on 378 won't fire, because param_name will be at least SET_PARAM_CMD_LEN."}
{"pred": "\"sum_singlesubgroup\" -> \"sum_singlesubgroup\"?", "gold": "Does this change affect the performance of other algorithms, except KMeans?"}
{"pred": "Why was this changed?", "gold": "What do these changes have to do with the request ID?"}
{"pred": "Why did you change these to using statements?", "gold": "I'm kind of surprised this doesn't require `typename`?"}
{"pred": "nit: remove empty line", "gold": "nit: move this one down."}
{"pred": "\"within 1.5 IQR of the lower quartile\" -> \"within 1.5 IQR of the lower quartile\"", "gold": "maybe 'standard Tukey boxplot definition' if it is standard? Otherwise sounds like it is just *a* definition for boxplots..."}
{"pred": "I don't think we need this anymore, right?", "gold": "I feel we should not fix this."}
{"pred": "Why is this header needed?", "gold": "I think these are not necessary"}
{"pred": "The flag will be removed. The flag will be removed in a future release.", "gold": "Please update the user guide too."}
{"pred": "Shouldn't this be `$code ?? $location->code`?", "gold": "If you use `compact('name', 'code')` here, you'll get an associative array, which might make the rest of the code more readable (instead of using hard-coded 0/1 indexes)."}
{"pred": "Why did you change the year?", "gold": "Should it be 2011-14 instead ;-)"}
{"pred": "Why do we need this?", "gold": "I want to write some type of test for this but there are not Getter methods to assert this value. I tried to extract the value via the stats that are exposed without luck."}
{"pred": "Why do we need this abstractmethod?", "gold": "This needs to take the group id, not the gsuite id."}
{"pred": "Why do we need to change this?", "gold": "These should use the constants defined in JsonTests.cs"}
{"pred": "I don't think we need the `error.message` anymore.", "gold": "Kind of unrelated to this PR, but let's update this to `getDataErrorComponent( 'search-console', error.message, false, false, false, error )` so that everything is passed as expected."}
{"pred": "I don't think we need to mention dataset here.", "gold": ":obj:\\`dataset\\` cannot be correctly rendered"}
{"pred": "Should this be `to_s`?", "gold": "I think `email` is something we get from devise, and I think the goal of putting it in the generator was not to tie others to that particular implementation?"}
{"pred": "nit: `make([]*export.SpanData, bsp.o.MaxExportBatchSize)`", "gold": "If the span producers pushing to the queue do so faster than the this can drain, it will cause this to hang. I'm guessing we can update the `enqueue` method to check if the `stopCh` is closed and not send any more spans while this flushes what has already been pushed."}
{"pred": "`setGalleryItems(iterable $items): void`", "gold": "Not sure about that, an array is iterable right? But if I pass array, that clear method wont work"}
{"pred": "Why do we need this alias?", "gold": "make sure the config changes stuck. are there any invalid config values? maybe write tests around empty `trust_domain`, negative/missing `ttl`, invalid `key_size`, etc..."}
{"pred": "I think this should be `window.__mochaResult__`", "gold": "Why are you changing this?"}
{"pred": "I don't think you need the `allow_blank` here.", "gold": "@phirefly Can we look at a list of RWAs, or ask someone to double-check that this format is correct? Otherwise :shipit:"}
{"pred": "Why is this `none`?", "gold": "Still request a local sort for bin-packing based on the defined table sort order."}
{"pred": "nit: \"Generate candidate set for given users. Generate for all users by default.\"", "gold": "As with the other PR, user name is better."}
{"pred": "Shouldn't this be `s.metrics.TotalSent.Add(float64(amount))`?", "gold": "a peer's accounting lock is held during `Pay`. we should avoid adding additional blockchain calls here if possible."}
{"pred": "Why do we need this?", "gold": "Maybe wording could be improved. Is this \"not enabled\" or it is \"not available\". Not sure about that."}
{"pred": "I don't think we should return an error here. If the conditional branch is not evaluated, we should not update the status.", "gold": "I looked at the new `conditionalBranchesEvaluated` function and it looks like the part added is a duplicate of the line above?"}
{"pred": "\"present of this file indicates the block has been successfully flushed to the server.\"", "gold": "can you put this flag in `blockRefInfo` instead? It would be a shame to add one more file per block, especially since we've run into inode limits. I guess `blockRefInfo` should maybe then be renamed to `blockInfo` or something. But we're stuck with the filename."}
{"pred": "Why do we need to check for nil here?", "gold": "Shouldn't we keep other parameters if only IP is empty? Or maybe return an error if it's a mandatory argument?"}
{"pred": "E127 continuation line over-indented for visual indent", "gold": "Was this just wrong before? The names indicated types but type wasn't specified. I guess the tests passed as comparison worked with ``type=None``?"}
{"pred": "nit: `columnName` -> `columnName`", "gold": "icebergCol.name() is the unqualified column name"}
{"pred": "`insufficient_data_actions` -> `insufficient_data_actions`", "gold": "It's generally a bad idea to use mutable types like lists as default values for parameters. Lots of strange, difficult to debug side effects can occur. I see that there was already one example of this prior to this commit which probably explains why it seemed innocuous to add more but I'm going to rework this before committing to master."}
{"pred": "Why do we need this?", "gold": "We run prettier as an eslint plugin, so this harmful"}
{"pred": "`DynamicType_ptr(nullptr)` -> `nullptr`", "gold": "Check if the TypeDescriptor and MemberDescriptor includes are necessary"}
{"pred": "nit: remove empty line", "gold": "delete the empty line here."}
{"pred": "Why do we need to reload the subscription here?", "gold": "Line is too long. [89/80]"}
{"pred": "Why do we need this change?", "gold": "You don't need to expose this method to do what you want. There are already public addNewGetMapping, addNewPostMapping, and addNewDeleteMapping methods."}
{"pred": "Why did you change this test?", "gold": "This test passes in `dev`. Why wouldn't this work?"}
{"pred": "I don't think we need this snippet.", "gold": "ARN -> Amazon Resource Number (ARN)"}
{"pred": "Why did you remove the ConfigureServices?", "gold": "Why not use the overload that takes an instance?"}
{"pred": "nit: remove empty line", "gold": "`Blockchian` is a misspelling of `Blockchain` (from `misspell`)"}
{"pred": "Why remove the json tag?", "gold": "`agent/gpu/nvidia_gpu_manager_unix.go:47: struct field lock has json tag but is not exported`"}
{"pred": "Why do we need this?", "gold": "nit: better rename to `TEST_QUEUE_ARN` or `TEST_EVENT_SOURCE_ARN`"}
{"pred": "I don't think we need to check for `p.Spec.ServiceMonitorSelector != nil || p.Spec.AdditionalScrapeConfigs != nil`. We can just check `p.Spec.AdditionalScrapeConfigs != nil`.", "gold": "Would this mean that podMonitorSelectors suffer from the same issue if they are the only configuration set?"}
{"pred": "nit: `GetEnvironment finds and returns the specified environment`", "gold": "`ctx` is unused in GetEnvironment"}
{"pred": ">OKDialog [](start = 24, length = 9) I think this should be named DialogResultOKDialog", "gold": "We usually use OkDialog()"}
{"pred": "I think this should be `--privacy-unrestricted-enabled`", "gold": "could we please change that to something that indicates that this feature is not \"production\" ready!"}
{"pred": "why do we need this file?", "gold": "swim -> swin. Other configs and file names also should be modified."}
{"pred": "I think this should be `key=PROJECTS`", "gold": "nit: arg description for \"key\"?"}
{"pred": "Does this need to be exported?", "gold": "If we don't have a `dir` yet, we wouldn't need to do a sync right? If so, perhaps we can just `getStoredDir()` like `Attr()`?"}
{"pred": "Shouldn't this be `IF_HOST_X86_ELSE`?", "gold": "I still don't seem to fully understand this. Why are we testing the host if DR_HOST_NOT_TARGET is not set?"}
{"pred": "Why do we need to change this?", "gold": "in the current implementation, both schemes are supported (you can call either `/bzz` or `/v1/bzz`). i would suggest to keep it this way"}
{"pred": "This should be `error.details += ' ' + assembly.assembly_id`", "gold": "hmm, I think we can just do `new Error(assembly.error)` and that should set `error.message` correctly too. I don't know why it was done this way with a separate `.message` assignment before :sweat_smile: Should we do `error.assembly = assembly` so the template editor can access it that way, rather than parsing `error.details`?"}
{"pred": "`if (trim($access) !== \"\") {`", "gold": "This should never be empty. The access field always needs a value of at least `c:0` or `r:0`"}
{"pred": "Why do we need to check this here?", "gold": "Another question is, do we want to call `os.Getenv()` every time we parse a file? That seems a lot."}
{"pred": "Why is this needed?", "gold": "minor: please rename all occurrences of `A` to `T`. please also rename `v` to `value`."}
{"pred": "`FastSyncLag => (Current & SyncMode.Beam) == SyncMode.Beam`", "gold": "Do we want it to be so dynamic? My first idea was to base it on SyncConfig.BeamSync ."}
{"pred": "Shouldn't this be `type.getBitMask()`?", "gold": "can you change this instead to just `type.toString()` and then you wouldn't have to expose the getBitMask in the enum. (Alternatively you could have used `type.hashCode()` but that doesn't feel as nice)"}
{"pred": "I think this should be `ax3.set_xlabel('x split')`", "gold": "I'm confused by these tests. Shouldn't the template string `@importance_type@` have been replaced with the actual value of `importance_type`?"}
{"pred": "Why do we need this change?", "gold": "Let's keep using NewKeeper so that it got covered by tests."}
{"pred": "I don't think this import is needed.", "gold": "I only see new imports. Is there any functional change in this file?"}
{"pred": "Why do we need to create a memorial transfer here?", "gold": "ineffectual assignment to `err` (from `ineffassign`)"}
{"pred": "Why do we need this?", "gold": "Would you mind removing the default parameter above? (I doubt I'll ever use defaults again since you still have to protect against callers explicitly passing `null` or `undefined`)"}
{"pred": "I don't think we want to deprecate this.", "gold": "Make sure the old logging functions still work, but add deprecation warnings (unfortunately Python suppresses deprecation warnings by default, so I'm not sure if anyone'll notice)."}
{"pred": "Why do we need to disable authorization here?", "gold": "Not directly related to the topic of this ticket: I think this API design is a bit confusing. To disable delemetry, I would write `managementService.enableTelemetry(false)` which is not intuitive to read. Maybe `toggleTelemetry` instead of `enableTelemetry` is more clear."}
{"pred": "`CreateAnnotationsFromStacks` returns an `IEnumerable<IEnumerable<AnnotatedCodeLocation>>`, but `CreateAnnotationsFromStacks` returns an `IEnumerable<IEnumerable<AnnotatedCodeLocation>>`.", "gold": "Again I suggest returning `AnnotatedCodeLocation[][]`."}
{"pred": "I think this should be `V(3)`", "gold": "We should probably require an increased verbosity to output for anything below the cluster itself to avoid spamming the logs. It would also be good to give additional context as to what we are attempting to reconcile since the controller has multiple workers."}
{"pred": "Why do we need this?", "gold": "Not needed anymore"}
{"pred": "Should this be `Log.Error`?", "gold": "Am I right in thinking this completely avoids the situation where `enable_calltarget_state_by_ref` is `true`, but the managed integrations don't expect a by ref argument? For example, if there's an exception here, that seems like a fatal problem, as we would have a mismatch for jit rewriting? We should disable instrumentation entirely in that case shouldn't we? i.e. if this (or the existing `EnableByRefInstrumentation`) calls fail, should we bail out of this method entirely as we can't safely instrument?"}
{"pred": "Should this be `ResourceTypesUnknown`?", "gold": "nit: spaces seem off"}
{"pred": "`externalMemory(NULL)` is no longer needed.", "gold": "shouldn't the em parameter be called ec?"}
{"pred": "Shouldn't this be `opc.Issuer`?", "gold": "Please change this to use o.DidSign(o) as implements this logic without performing any of these checks that duplicate something that JWT can do correctly. If the JWT deserialized properly, and DidSign returns true, the JWT was signed by one of the listed operator keys."}
{"pred": "Why do we need this class?", "gold": "Talking about style, IMO extracting either `getComponent()` or `getPubDate()` to variables would make this line easier to read."}
{"pred": "`Option defines a function that can be executed in some task API methods`", "gold": "package header missing"}
{"pred": "Shouldn't this be `oldVNode && oldVNode._hydrating`?", "gold": "Just a thought (doesn't change the output or anything) - do you think we'll ever want to access the other properties of `oldVNode` from within `_childDidSuspend`? If so we could pass `oldVNode` here and then check these properties in the _childDidSuspend implementation. I don't have strong feelings either way, just occurred to me."}
{"pred": "Missing license header.", "gold": "We should be configuring the base paths somewhere.."}
{"pred": "Why do we need this?", "gold": "May also need to test the normal functionality with min/max_sizes"}
{"pred": "Shouldn't this be `ethereum2.mysterium.network/`?", "gold": "We can remove this one. It's just a random one I got for free for testing."}
{"pred": "\"github.com/pkg/errors\"", "gold": "File is not `goimports`-ed (from `goimports`)"}
{"pred": "Why do we need this?", "gold": "(maybe this should be MyDevice or just removed entirely?)"}
{"pred": "Why do we need to send an empty task if the task is nil?", "gold": "Can you do a nil check here, as the task isn't always nil here?"}
{"pred": "This should be `import { Component } from '@wordpress/element';`", "gold": "`lodash` shouldn't be grouped under WordPress dependencies"}
{"pred": "Why did this change?", "gold": "Does order matter? Should we sort by enode key to make duplication checking easier?"}
{"pred": "Is this TODO still relevant?", "gold": "Can you explain this too? This seems to go beyond linting."}
{"pred": "Why was this test removed?", "gold": "I just moved this into the render.js UT file since this test doesn't actually use an components"}
{"pred": "Error return value of `app.CreateSettingsFile` is not checked", "gold": "We do have to capture and check the err here right? I don't think we need to capture the location of the file though for this context."}
{"pred": "Why was this removed?", "gold": "an unused import"}
{"pred": "Why do we need this cast?", "gold": "If this value doesn't exist (do an `, ok := ...` check), we should initialize and store it"}
{"pred": "This should be `Number.MIN_SAFE_INTEGER || -2 ** 53 - 1`", "gold": "Would use parenthesis to explicitly state the associations of operands ```js const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || (-(2 ** 53) - 1)"}
{"pred": "Shouldn't this be `self._ser._port`?", "gold": "This handle is now private to pyserial, but if there is no public function to retrieve it I guess this is the best we can do."}
{"pred": "Shouldn't this be `wlr_xdg_toplevel_schedule_configure`?", "gold": "This function is what **the compositor** calls when it wants to fullscreen a client, not what the client calls."}
{"pred": "Why was this changed?", "gold": "s/not existed Pod/non-existing Pod"}
{"pred": "`svcDescriber` is unused (from `structcheck`)", "gold": "Why did we not leave this as just `svcDescriber`?"}
{"pred": "Why do we need this import?", "gold": "nit: I think we've been (in)consistent in leaving a blank line here."}
{"pred": "`inventory_index_id` -> `inventory_index`", "gold": "Maybe we can change it to a more generic name like source_id."}
{"pred": "Why this change?", "gold": "What's the theory on why this could fix the hang? It seems like the call to `GetRootNodeForTest` will always need to call into the crypto object before returning an error, and so it should block on that `c` receive, after which the test immediately drains `errCh`. So I don't quite see how buffering would help..."}
{"pred": "This assumes that the register ranges of DR_REG_XMM, DR_REG_YMM and DR_REG_ZMM are contiguous.", "gold": "Maybe add an assert in arch_init or somewhere?"}
{"pred": "Why do we need this?", "gold": "I wonder what does this `// nolint` ignore? And what are the standards that you choose which error to fix and which to ignore?"}
{"pred": "nit: space after `if`", "gold": "what about the line below, forceUpdateCollection?"}
{"pred": "Wouldn't it be better to use `cmd.gsub!('\"') { '\\\\\"' }`?", "gold": "Doesn't this go in the opposite direction of #1051 / #1062 by putting platform-specific logic back into this module?"}
{"pred": "Shouldn't this be `response.isAuthenticated`?", "gold": "I think this is the only line in JS legacy code that should be updated based on the renaming. `global.googlesitekit.setup.isAuthenticated = response.authenticated;` would be sufficient to keep the old name for the legacy JS data (which will be phased out in the long term) while supporting the new name in the API route. All updates to the JS components above wouldn't be necessary."}
{"pred": "`parameters.options?.pingWaitTime ?? 500`", "gold": "Technically, this would allow `pingWaitTime` to be `false`. I don't know if it matters here."}
{"pred": "Why do we need this?", "gold": "I only want the proxy request for this to run for kinesalite. So this just returns true if the KINESIS_PROVIDER is kinesis-mock"}
{"pred": "Why did you change the copyright year?", "gold": "Please add your name to the list of copyright holders."}
{"pred": "Why do we need this?", "gold": "Maybe maxRetryTimes should be bigger than 2. Return Max(maxRestryTime, 2)?"}
{"pred": "`signedUserName` is unused (from `structcheck`)", "gold": "Call `userName` is good enough, `signedUserName` is narrowing the actual usage of this method."}
{"pred": "Why do we need to create a new subscriber here?", "gold": "How would you feel about a static method to express intent?"}
{"pred": "Shouldn't this be `false`?", "gold": "Do we know for sure that no other code changed its value? (Maybe some weird testing use case or something) Why not just use the actual value instead of risk lying?"}
{"pred": "Why did you remove the part install script?", "gold": "the partInstall.go isn't an auto-generated file, and the part.sql doesn't exists either."}
{"pred": "Shouldn't this return an error?", "gold": "`k` is unused in PutHash"}
{"pred": "Why do we need this method?", "gold": "Use IOUtils instead"}
{"pred": "nit: `TODO each caller should use it's own mocked manager part instead of global one`", "gold": "It's not related to the line of code, but I don't know how to write it in a more proper place. Looks like `e2e/myst-provider/db/myst.db` should be in `.gitignore` file and should not be commited."}
{"pred": "KEY = \"goog:chromeOptions\"", "gold": "nice touch since Google likes to change things every now and then."}
{"pred": "Shouldn't this be `info.circuitBreakerManager`?", "gold": "Make `CircuitBreakerManager` implement `PluginInfoInitialized`"}
{"pred": "Shouldn't this be `QVariant.Type.UInt.value`?", "gold": "This is extra awkward, QVariant.convert() takes a QMetaType which takes the value of a QMetaType.Type."}
{"pred": "Why do we need to pass ctx here?", "gold": "Nit: finished -> finish, \"done passing it\" -> \"passed it\"."}
{"pred": "Style/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.", "gold": "Maybe mention that it will be saved to the filesystem otherwise?"}
{"pred": "I don't think you need the `+ (i+1).ToString()` here.", "gold": "Probably cleaner and more general to do this: string,Format(\"Column {0}\", i+1) That way if the local language has a convention like \"3 column, this is\" it still works."}
{"pred": "Why do we need to do this?", "gold": "This can be uniformed too"}
{"pred": "nit: rename to `WithAddPeersErr`", "gold": "It looks to me that this does not have to be exported."}
{"pred": "Why do we need this?", "gold": "It looks like this is only used in order to extract the snippet file names from GapicProviderFactory. I wonder if it would be better expose the snippet file names directly, without exposing a test-only function in non-test code."}
{"pred": "Why is this removed?", "gold": "Another question: this is being removed, but I don't see a corresponding removal if it being called? Was it never used (or am I just missing it)? (is it related to what was in the onclick that got removed, i.e. was that supposed to call this and not something in the backing bean?)"}
{"pred": "I don't think we need to check for Approved condition here. If the certificate is not approved, we should return an error.", "gold": "Suggestion: `.. does not have an Approved condition set to true`"}
{"pred": "Why do we need this?", "gold": "I would say that client class should have default of False and Cloud prov should enable deleting."}
{"pred": "Why this change?", "gold": "Did this remove the BOM or something?"}
{"pred": "Why do we need this?", "gold": "This makes the BlockHeaderValidator mutable, and IMHO should not be done. Note we have a builder that has the exact same method, so instead of mutating a produced BlockHeaderValidator we should hook into wherever the builder is being created."}
{"pred": "Why did you change this?", "gold": "May be add information about parameters to the doc string while at it?"}
{"pred": "This should be renamed to `priv_getTransactionCountLegacy`", "gold": "Naming of this sounds a bit awkward. Perhaps priv_legacy_getTransactionCount or priv_legacyGetTransactionCount?"}
{"pred": "Why was this removed?", "gold": "This one should probably be added to the list in #24 . It's possibly indicative of an issue, but there isn't a VUID for it."}
{"pred": "Why did you change the indentation here?", "gold": "Why this indentation change? Seems the original indentation would be fine, and leaves more room."}
{"pred": "E501 line too long (116 > 115 characters)", "gold": "Would be nice to know what the `update` argument does in the docstring."}
{"pred": "`cStringIO` is not available in Python 3.", "gold": "I think we can just use `io.BytesIO` here."}
{"pred": "Why do we need this header?", "gold": "This ensures that the User-Agent header matches during replay."}
{"pred": "Should this be 1.4?", "gold": "What units are used for this default?"}
{"pred": "Why is this needed?", "gold": "I am wondering if it makes sense to make this a flag to `flatc` rather than a preprocessor flag, since this is generated code, it would make more sense to simply omit this code completely if the flag is not specified"}
{"pred": "line too long (80 > 79 characters)", "gold": "Doesn't this change the behavior (edit: oh, I see, never mind)."}
{"pred": "Shouldn't this be `||` instead of `||`?", "gold": "I think you need a `do` at the end of this line."}
{"pred": "`params.merge(:sort => sort_key)` -> `params.merge(:sort => sort_key)`", "gold": "Not passing in a `:params` key here."}
{"pred": "Why do we need to set this here?", "gold": "Feels like this should be an option and not the default. Leaving them running would give you immediate response to claims, which might be what some people would want. Hibernation is AWS only right now and probably other clouds will just disregard the setting but arguably validation should be rejecting attempts to create / update powerstate on gcp/azure/etc. I'd pitch we put this onto the pool spec and make you opt in."}
{"pred": "Why is this needed?", "gold": "I think I saw somewhere that it has been fixed and that you can use #NETCOREAPP3_0_OR_GREATER but I may be wrong."}
{"pred": "Why do we need this? Can't we just call `r.ctx.Active()`?", "gold": "what's the second part for?"}
{"pred": "Why did you change this?", "gold": "It's not clear to me what the \"super\" test above is for. As far as I can see, the test runs a spellcheck for \"super\" but then uses \"fob\" as the index into suggestions, which will never find an entry."}
{"pred": "File is not `goimports`-ed (from `goimports`)", "gold": "revert this file change"}
{"pred": "Why is this needed?", "gold": "I think this is the most elegant way to allow us to still fail on `I`."}
{"pred": "Shouldn't this be `$metadata['fieldType'] === 'text'`?", "gold": "Wouldn't it be better to use a sql `IN ( :exact_value )` ?"}
{"pred": "`then` is not needed here.", "gold": "So far this is not working as expected... working to further investigate WinRM protocol and the gems behavior."}
{"pred": "This should be `self.scenario.get_requests()`.", "gold": "So now there're two ways to get requests: `ScenarioExecutor.get_requests()` and `Scenario.get_requests()`. To avoid confusion we should probably make `Scenario.get_requests()` method private, or hide it in some other way."}
{"pred": "`connection->remote_node_id = std::move(node_id);`", "gold": "This existed already, but seeing as you are changing the variable to have an explicit type it could be made a const reference to remove a copy."}
{"pred": "Extra empty line detected at class body beginning.", "gold": "I don't think this code is being tested; this method can be removed without the test failing"}
{"pred": "missing space after `=`", "gold": "@codepoet2017390 You have already initialized this ArrayList in the onPreExecute method then why do it here too?"}
{"pred": "Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.", "gold": "This covers the `RESTRICT_ACCESS=true` x non-gsa pair, but we probably want to test the three other permutations: (`RA=true`, gsa), (`RA=false`, non-gsa), (`RA=false`, gsa)"}
{"pred": "Why do we need this?", "gold": "Please don't do this - if you want to disable code permanently delete the code, if you need to disable it to test don't commit. Such sections are very poorly highlighted during review and can cause unspotted issues slipping through the process..."}
{"pred": "nit: `ConnTrackInterfacer` -> `ConnTrackDumper`", "gold": "I'm starting too feel we have too much abstraction and too many interfaces here. But this method is definitely the most confusing IMO. For one, it's called \"Get*\" but it does not return anything... I don't have a good understanding of what's going on anymore, so it's hard for me to suggest an alternative, but it's pretty clear to me that this interface needs to be rethought. An interface where all the parameters are themselves arbitrary objects (`interface{}`), whose actual type depends on the specific interface implementation, is not a helpful abstraction"}
{"pred": "Why is this import needed?", "gold": "It fills me with endless sadness that we can't use Selenium's own `SessionId` here."}
{"pred": "I think this should be `stat.getVersion() >= aliases.getZNodeVersion()`", "gold": "Interesting. So you've found that it's faster to request only the \"Stat\" without the data so long as this is the typical path?"}
{"pred": "nit: \"package function from within a row function\" -> \"package function within a row function\"", "gold": "Is this a future fix? I thought the local identifier scope and the package issue were the same one."}
{"pred": "nit: space after `,`", "gold": "Not super important, but this line could be split up."}
{"pred": "Shouldn't this be `free(ctx->storage.entries)`?", "gold": "Maybe we should better call the dispose function without checking the value of `item.data` (since the dispose function is setup before `data` is set up)."}
{"pred": "Why is this needed?", "gold": "Why set to GPU, is it CPU?"}
{"pred": "Why do we need this?", "gold": "This should be `computed('i18n.locale'....`"}
{"pred": "`done` is unused (from `structcheck`)", "gold": "can we not expose the channel directly? or at least expose it as a read only channel?"}
{"pred": "I don't think you need the `AS_IF` here.", "gold": "Can we add a `--with-bashcompdir` here to override this? I'd like to be able to do unprivileged builds."}
{"pred": "Why do we need this?", "gold": "We will be removing this maya/volume package completely. Do not use this."}
{"pred": "(style) code indent should use tabs where possible (style) please, no space before tabs", "gold": "Why you think that `model_ptr` will be `nullptr` when memory allocation is failed? I think `new daal_knn::Model(column_count)` would throw `std::bad_alloc` if `operator new` is not overloaded. Is it overloaded by DAAL in the way it simply returns `nullptr` in case of bad allocation?"}
{"pred": "\"will not be able to\" -> \"will be able to\"", "gold": "Where does this 0.001 come from? Is this from the network collateral cost function, which happens to be hardcoded right now? I think it's going to rot very quickly: it depends on sector size and (probably) block height."}
{"pred": "Do we need this file?", "gold": "Please update the license header in each source file. For more information see: #2697"}
{"pred": "nit: `retries` -> `retriesCount`", "gold": "!numbers -> numbers"}
{"pred": "Why this change?", "gold": "so we don't have universal rules afterwards? In that case I'd remove this entirely (and maybe some places where it's used get cleaner) since we shouldn't ever add a universal rule. Not only because it's way simpler in TS, I'm also just super skeptical about \"universal\". In case of this rule, even control characters may have their place in Swaggers, e.g. in `examples` sections where you can have raw response bodies where control characters are perfectly valid."}
{"pred": "Why do we need to set detached to true?", "gold": "You're welcome to surface this option through the API, but I'm not going to make this the default behavior."}
{"pred": "`buildStatic` is unused (from `deadcode`)", "gold": "Just a thought that any further extensions of `buildBinaryFor` signature could be done as `buildBinaryFor(..., opts... BuildOptions)` for better readability."}
{"pred": "Is this intentional?", "gold": "I'll fix the InMemoryExporter right after this PR lands"}
{"pred": "Shouldn't this be `ERROR_BIT_EXT`?", "gold": "Good call, none of these are technically invalid"}
{"pred": "Why was this changed?", "gold": "this one should be updated too"}
{"pred": "invocation.addContext(Const.SRC_INSTANCE, getInstanceId());", "gold": "maybe need to add microserviceId too."}
{"pred": "Why do we need to disable these?", "gold": "I'm curious, do you create this commit at the very end by rebasing and taking the value you had after moving everything ?"}
{"pred": "Why did you remove this hook?", "gold": "It's no longer possible to use `modifyRow` to trim rows and that's ok to use TrimRows instead. But I think we should move this test to TrimRows plugin tests as `trimRows` setting is not a part of the `core`."}
{"pred": "Shouldn't this be `node->data.scalar[0]`?", "gold": "The function seems to either return \"default\" or return the extension stripping the preceding dot. Does the fact mean that we can no longer register `.default` as an extension?"}
{"pred": "Why do we need this?", "gold": "this may require a statefile version update"}
{"pred": "Shouldn't it be `SplFileObject::getcsv()`?", "gold": "I like when `@deprecated` contains how to resolve it - eg. \"use `SplFileObject::fgetcsv()` instead\". The information in upgrade notes is usefull only during upgrade."}
{"pred": "Why do we need to rename these?", "gold": "Nice to see that your local environment is up-to-date now for these changes."}
{"pred": "Use `Backbone.history.fragment` instead of `#`.", "gold": "Instead of setting it to null, i think lets set it to {}"}
{"pred": "Why do we need to change this?", "gold": "We should bump this before releasing and remove all legacy fields that are safe to do so. Since we cannot have multiple versions anyway there's little value in walking around with the \"alpha\" stamp."}
{"pred": "please use `!=` instead of `!test`", "gold": "I might suggest a different name for the `DEEPBIND` config.h macro. Perhaps `FLUX_DEEPBIND` to give a hint in the code that we're using a locally provided define."}
{"pred": "Why is this change needed?", "gold": "Code generated by protoc-gen-go. **DO NOT EDIT.**. The correct way to fix `deprecated` in this file may be updating the protoc / protobuf / grpc and regenerate this file."}
{"pred": "Why do we need to deprecate this test?", "gold": "We should make sure that we cover the testcases in a new unit test class."}
{"pred": "Shouldn't this be `uint64(numFromC)`?", "gold": "Is this only used in test code? Is there future utility in it for production code? If not, it would be nice if this could be moved into a test package. I'm not sure how hard that would be. CC @laser"}
{"pred": "Should this be `config.APIServiceLabel != \"\" && config.WebhookLabel != \"\"`?", "gold": "Super curious how you noticed this, as SPIRE itself currently only configures once...?"}
{"pred": "Shouldn't this be `outputMessage = exMessage.replace(\"Datafile\", \"\")`?", "gold": "This `startsWith` seems a bit brittle because in the code base we'll occasionally spell it \"DataFile\"."}
{"pred": "Why do we need to change this?", "gold": "if it keeps reconnecting for too long, how should we get alerted?"}
{"pred": "Shouldn't this be `srvrGlobal->clientKeepaliveIntervaltime`?", "gold": "it's better to use single name style in one name."}
{"pred": "TODO Create transport?", "gold": "As defaultSendPort is being removed, and I don't like TODOs on examples, please remove the whole line"}
{"pred": "I don't think we want to swallow the error here. We want to return an error if there were no updates needed.", "gold": "Should we return `nil` when `err == errChangeSetEmpty` instead of calling l.103 `WaitUntilStackUpdateCompleteWithContext`?"}
{"pred": "why remove final?", "gold": "Hmmm I thought spotless would wrap this line, but it doesn't seem to complain about it"}
{"pred": "`FederatesWith` -> `FederatedWith`", "gold": "I think this will require updating the api version. we are planning to do this anyways, so perhaps we can lump this in so we don't have to update too many times?"}
{"pred": "Why did you remove this line?", "gold": "revert this for parity"}
{"pred": "Why do these need to be here?", "gold": "INCR_BATCH and DECR_BATCH could be exposed as tuneable command line options but that might be too low level to expose. I think keeping private for now where \"in the know\" folks could use to try and tune makes sense. These values were choosen mostly \"at random\" and have worked out for us thus far."}
{"pred": "`setCustomTagWriter` -> `setTagWriter`", "gold": "Currently this isn't very clean because we have to re-use some of the predefined parser types - the demo uses WRITER_U_CTAGS but there should be some support for custom writer type."}
{"pred": "Should this be removed?", "gold": "I think this was left it accidentally :)"}
{"pred": "Shouldn't this be `NEWNS`?", "gold": "Can you finish re-ordering this list to match the one that was deleted?"}
{"pred": "Why do we need this?", "gold": "Do we need to check if `exp.Target.StressChaos` is `nil`?"}
{"pred": "//snippet-keyword:AWS SDK for Java v2", "gold": "AWS Identity and Access Management (IAM)"}
{"pred": "Why was this removed?", "gold": "not calling this is going to impact current functionality which depends on PVC.. let us still call this and set the values to default as 'none' (or empty) by handling the error from 'get' operation"}
{"pred": "This should be `FPGA_ERR(\"IRQ write < 8 bytes\");`", "gold": "`!=` is no the same as `<`"}
{"pred": "I don't think we need this anymore.", "gold": "No need to create a dir for transformer. Simply move transformer.py into mmdet/models/utils/"}
{"pred": "Shouldn't this be `ACTION_CREATE_SHORTCUT`?", "gold": "Can't you just add `SelectSubscriptionActivity` directly to the manifest instead of opening `MainActivity` that then starts it?"}
{"pred": "nit: `Run the check during package build` -> `Run the check during build`", "gold": "Maybe say \"the spec's %check section\" so it's clearer what we mean."}
{"pred": "Why do we need `this.isSorted()`?", "gold": "I think after change this check `rowInMapper === null` is always false, so it's useless."}
{"pred": "Why did you change this?", "gold": "ClockIpLpi2c4.Enable() is required. The same change is required for enablePeripheralClocks()."}
{"pred": "Why do we need this? Can't we just use the tag?", "gold": "nit: this should be `SHA` since it is an acronym for `Secure Hash Algorithm`, no?"}
{"pred": "Shouldn't this be `window.Intl.DateTimeFormat`?", "gold": "Not sure if Intl can be defined but not `Intl.DateTimeFormat`. Both seem to have the same percentage on CanIUse."}
{"pred": "Why do we need `pvc.Name` here?", "gold": "PTAL, looks like the order of PVC & PV is reversed for different storage-engine types, for Jiva/CStor the args sent to sendEventOrIgnore are `PV, PVCName`."}
{"pred": "Please revert this change.", "gold": "Remove the trailing white space"}
{"pred": "Shouldn't this be `<=`?", "gold": "No need to modify this."}
{"pred": "`stopped` is unused (from `deadcode`)", "gold": "would be nice at some point to clean this signature up... not relevant for this PR"}
{"pred": "`if (null === $normalizedConfiguration['type']) {`", "gold": "Here, is it `null` because it is `null` in `$fieldConfiguration`, or because it has been set to `null` above in the `array_replace` ? If it doesn't exists at all in `$fieldConfiguration`, I think you should add `type => 'text'` above in the `array_replace`."}
{"pred": "Shouldn't this be `endsWith`?", "gold": "I was thinking about this for #2928 too, which also uses `endsWith`... Presumably `SomeOtherObject` would match `endsWith(\"Object\")`, meaning that something more sophisticated like splitting it then iterating right to left would be needed in order to do this robustly?"}
{"pred": "nit: typo `get or sets`", "gold": "I think this name is a bit confusing because if you asked someone what type of exporter they were using they would probably say Zipkin or Jaeger, etc. How about `ProcessorType` with `Simple` and `Batch` definitions?"}
{"pred": "Why do we need this?", "gold": "`req` is unused in RecreatePipedKey"}
{"pred": ":warning: This change will be queued for retranslation. We'll display the English text until then.", "gold": "The \"Adsense\" term needs to be capitalized - I just noticed this was wrong through ACs and IB, so not a problem of the PR itself really. I'll quickly fix it."}
{"pred": "nodeToReverseEdges -> nodeToReverseEdges", "gold": "do which methods need to be registered? is it basically just the ones that are directly referenced in ParDo calls? (The Beam GoDoc doesn't say anything about it. :/ )"}
{"pred": "Why is this needed?", "gold": "@bmckinney does this mean that the bibtex citation will be available via API?"}
{"pred": "Why do we need to bump this?", "gold": "We should probably tag the cliquet-fxa version as well."}
{"pred": "Why do we need this change?", "gold": "IIRC we need to use memset, because an empty brace is not C99 comformant, and because we cannot use `{0}` because how the struct is organized is not defined in POSIX (the initializer cannot be `{0}` if the first property of the struct is a struct)."}
{"pred": "nit: `// +optional` is not needed.", "gold": "Will we be adding this to `AppliedTo` as well? If not, any reason why not?"}
{"pred": "I think this should be `shouldAcceptShowHideCaretEvent`", "gold": "Just a note that this feels weird being on the base NVDAObject rather than IAccessible, but right now, I understand that's how it has to be because we fire MSAA caret events on the focus object regardless of whether it's IAccessible. I think we should consider restricting these caret events to focus objects that are IAccessible subclasses in future, but that change is probably too risky for this PR. CC @MichaelDCurran for his thoughts."}
{"pred": "Shouldn't it be `null` by default?", "gold": "This change and other similar ones should not be part of this commit. This commit is about adding a ImageUploadType not fixing controllers and stuff."}
{"pred": "Why do we need this?", "gold": "I am a bit confused about PING here. Ping is implied and it overlaps with \"$SYS.REQ.ACCOUNT.%s.%s\" where the last token is what is requested (CONNZ) and the one before is the requested account id."}
{"pred": "nit: typo `Du` -> `To`", "gold": "nit: use the OptSubFolder constants. Also in the client you are using \"maxdepth\" but in the server the constant for \"depth\" is being used."}
{"pred": "Why do we need this change?", "gold": "I also moved this to `/verdaccio/storage` since it's written in runtime, and the approach here is to make the configuration by default read-only."}
{"pred": "\"cancel method which cancels the ongoing API call\"", "gold": "nit: s/has cancel method/has a cancel method"}
{"pred": "Extra empty line detected at block body end.", "gold": "Useless assignment to variable - `second_quiz`. Use `_` or `_second_quiz` as a variable name to indicate that it won't be used."}
{"pred": "Why do we need this?", "gold": "Is this still needed since there's the `GzipPrecompressed` type?"}
{"pred": "Why do we need these?", "gold": "this is spelled wrong and also not used so remove it"}
{"pred": "Why is this needed?", "gold": "It might be right here that's the issue ^"}
{"pred": "Shouldn't this be `SortedMap#keyComparator()`?", "gold": "@danieldietrich let's leave existing extension. Here we just mark `keyComparator()` with `@Deprecated` annotation"}
{"pred": "Why is this needed?", "gold": "This breaks CI. I am not sure why you need to include io.h in this file especially on linux."}
{"pred": "Why do we need this change?", "gold": "this seems equivalent"}
{"pred": "Why are we changing these limits?", "gold": "change size to 50MB criticial, 10MB warn... change count to 50k critical, 5k warn..."}
{"pred": "Why do we need to rename the masterPivotFacet to primaryPivotFacet?", "gold": "This has nothing to do with master/slave replication. Is this something we want to change too? If so, I guess this is an aggregation?"}
{"pred": "Why do we need to detach the process here?", "gold": "Maybe it makes sense to mention that those zombies are not forever, but only up to the moment when the parent process exits? Is that correct according to your observations, @benoittgt ? Please disregard this note if zombies remain after."}
{"pred": "Why do we need to start the moto server here?", "gold": "moto mock setup needs to happen before boto usage."}
{"pred": "I think this should be `LightGBMError(\"first_metric_only and feval are not available at the same time.\")`", "gold": "`hasattr(cb, 'first_metric_only') and cb.first_metric_only` -> `getattr(cb, 'first_metric_only', False)`"}
{"pred": "nit: `newStreamHandler` -> `newHandler`", "gold": "no newline for function"}
{"pred": "`wl_fixed_to_double` returns a `double`, not a `float`.", "gold": "This makes me feel icky. We could also go the route of making `wlr_output.scale` a double instead of a float, but that would be a more widely reaching change."}
{"pred": "Why is this change needed?", "gold": "Again, would be awesome if you could remove the tabs in these 3-4 lines as well."}
{"pred": "shouldn't this be `way_name`?", "gold": "You're moving multiple times from `step.name`; you're not allowed to do that. Instead you have to copy the `step.name` string and (if you want to) move once at the very last."}
{"pred": "\"The event can not end before it starts.\"", "gold": "What about `may not end`? @jancborchardt"}
{"pred": "You can't approve this deployment because you (%s) are not in the approver list: %v", "gold": "If you think about it, the status should be PermissionDenied?"}
{"pred": "Should this be `stats[\"listens_matched_p\"] * 100.0`?", "gold": "Calculation looks good but don't know what format etc grafana expects this to be in."}
{"pred": "I don't think you need the `decode` here.", "gold": "nit: We could use the `to_str(..)` util here. (let's not bother changing for this PR..   )"}
{"pred": "\"github.com/sirupsen/logrus\"", "gold": "Can you rename alias to `executiongenpb`. The rule is package+\"pb\" for `temporal-proto` and package+\"genpb\" for server protos."}
{"pred": "Why do we need a copy here?", "gold": "Any noticeable performance hit? Any other way to avoid the allocation and copy even of the array?"}
{"pred": "Why this change?", "gold": "What if you remove this line entirely from here?"}
{"pred": "I think this should be `elif` instead of `elif`.", "gold": "`on_lateral` can also be implemented"}
{"pred": "`podcast.author != null && ! podcast.author.trim().isEmpty()`", "gold": "Please add a space between `if` and `(`."}
{"pred": "I don't think these should be in the `zpool` package.", "gold": "This statuses might have been better off with some custom status type. However, good for now."}
{"pred": "Shouldn't this be `v6IPNet = ipNet`?", "gold": "Thanks for catching the bug. Here your change lets `v4IPNet` and `v6IPNet` take the first IPv4/IPv6 address in `addrList`. Maybe choose the last one also works and makes code simpler? What's your idea? @tnqn"}
{"pred": "I think this should be `record_id` instead of `record_id`", "gold": "nitpick: you can name this variable just `details`"}
{"pred": "This should be `static const char*`", "gold": "The character class in the regex should probably be \"[a-zA-Z0-9_]\"."}
{"pred": "Why did you remove these settings?", "gold": "Please also increment `Settings.VERSION` and update `AccountSettings`."}
{"pred": "`builddate` is unused (from `deadcode`)", "gold": "I think this should just say \"build <date>\". And when builddate wasn't set, e.g. somebody built weave with 'go build' or some other way, this should return \"unknown\"."}
{"pred": "\"Rewriting manifests (staging location=%s) of table %s\"", "gold": "Can we move this into a separate var and call it `desc` like below?"}
{"pred": "Please remove unused imports.", "gold": "why RpcSchema need this annotations?"}
{"pred": "`s.sys != nil && s.sys.replies != nil`", "gold": "Not sure it makes sense to send the reply if we did not delete from the map, but I guess it does not hurt.."}
{"pred": "`continueProcess` doesn't seem to be used.", "gold": "Most of these variables can be moved after `return` or to the body of `if` statement."}
{"pred": "I think this should be `PRIVACY_MULTI_TENANCY_NO_ENCLAVE_PRIVATE_KEY`", "gold": "nit: Is this actually just a http \"unauthorised\" response? Or is that too vague? If this is the right way to go ... is \"token\" the right word\" Or do we want to say something else?"}
{"pred": "Shouldn't this be `config.boltdir`?", "gold": "We check for `$future` in PuppetDB::Config, so this won't change behavior if you don't have `future` set."}
{"pred": "I don't think this is the right place for this check. I think it should be in `_resolve_col`", "gold": "I think you should remove `if isinstance(by, str):`,. We also should fix the error message `raise ValueError('Not a valid index: TODO')` to match with pandas'"}
{"pred": "Why do we need this?", "gold": "Curious - do we want this to be `OTel.GrpcHandler.Request`? For example, if someone is debugging a crash dump, they would get some hint that it was added by OpenTelemetry."}
{"pred": "If the state is unknown, it is not safe to remove any files.", "gold": "nit: unnecessary `</p>`"}
{"pred": "I don't think you need the `defined(ADIOS_HAVE_PHDF5) && defined(ADIOS_HAVE_MPI)` here.", "gold": "Should just be `#ifdef ADIOS2_HAVE_HDF5`"}
{"pred": "I don't think you need the `len(random_id_part)` here.", "gold": "FYI: I deployed a stack with multiple lengths for the stack name and resource id to cloudformation, to see how it truncates the parts for the final FunctionName"}
{"pred": "Why is this removed?", "gold": "Did we not use this field @_@"}
{"pred": "Shouldn't this be `|| ''`?", "gold": "shouldn't this be `android_keystore_name`?"}
{"pred": "Shouldn't this be `iss.Spec.Vault.Auth.Kubernetes.SecretRef.Name == secret.Name`?", "gold": "Double check the issuers package too :)"}
{"pred": "Shouldn't this be `VariableCheckConsumerAction`?", "gold": "This is out of date right? Now that `_is_first_level_self_reference` uses it as well? Perhaps we should make the docstring more general and not refer to method names that could change."}
{"pred": "Why is this needed?", "gold": "This test alone takes around 10-12 minutes to run. It has 20 subtests each of which takes around one minute. We should see if we there are redundant subtests that we can remove, or look for a way to optimize them."}
{"pred": "`Object.keys(newProps).sort().forEach(k => {`", "gold": "Good call, we need to keep that check :+1:"}
{"pred": "nit: `ref BufferReader<byte> reader;`", "gold": "Should the interface have 2 `ParseHeaders` methods?"}
{"pred": "I think this should be `iceberg.hive.metadata-refresh-max-retries`", "gold": "Nit: Does this make more sense as `iceberg.hive.metadata...`? The rest of the configs seem to start with `iceberg.hive`."}
{"pred": "Shouldn't this be a field required?", "gold": "Is `baseURL` not required?"}
{"pred": "# TODO: is right ?", "gold": "Just delete it, `embedding_rpn_head` is not a `Detector` which should have `show_result`."}
{"pred": "nit: `GetAbsoluteUrl(this ISpan span)`", "gold": "Where do we _get_ tag values? edit: I mean, where are these `GetFoo()` methods called from? It just seems weird to me that we are getting tag values from spans. I thought we only ever _set_ tags on spans."}
{"pred": "Should this be `log.Debug`?", "gold": "This seems like log spam. Maybe expose the encoding as a method and log at the point of interest?"}
{"pred": "I don't think this should be changed.", "gold": "I looked up that one, and it seems correct: Authentification is French, Authentication seems to be correct"}
{"pred": "Why do we need this?", "gold": "Can we print a more human-friendly warning here, saying that plotting won't work or something along those lines?"}
{"pred": "`context` is not used.", "gold": "@mhils didn't we try to get rid of these (now empty) wrapper classes?"}
{"pred": "import (", "gold": "I would avoid importing `felix/ipsets` package because this package is the windows equivalent and should be at the same level of `felix/ipsets`. We could add linux specific dependencies into `felix/ipsets` later and it will break Windows build."}
{"pred": "Why do we need this method?", "gold": "Maybe, `import` would be a better name."}
{"pred": "`max_results` -> `max_results`", "gold": "Wouldn't we want `PARAMETER_MAX_RESULTS` in here as well? (I might be miunderstanding how this is used)"}
{"pred": "Extra empty line detected at block body beginning.", "gold": "We can re-use the config in our tests."}
{"pred": "Shouldn't this be `!= \"cobuild\"`?", "gold": "Wouldn't we have the same issue with the internal libevent? IIRC, the integration is pretty close to an exact duplicate. Or does the libevent m4 code already take that into account when setting this variable? PMIx _requires_ libevent, so it isn't like pmix_libevent_support can be anything other than 1. I'm okay with leaving this question for separate resolution - just wondering why we don't have the same issue here."}
{"pred": "I don't think this is the right place for this check. It should be in the `else if` below.", "gold": "The actual User-Agent string uses \"CriOS\" not \"CRiOS\""}
{"pred": ">byte[]? [](start = 16, length = 6) remove?", "gold": "Unused code deletion. Is that a desired thing? No implementation of this actually used this indexer, so removing it seemed reasonable (and was suggested by the compiler). Maybe this had an indexer so plugins could use it? This change is definitely pushing the limits of what is appropriate in a \"cleanup\" as it is changing public API surface area."}
{"pred": "I don't think this is the right place to do this. It should be in the `ensure` block.", "gold": "We'd lose the data here from the original teardown_exception and only get the dump_exception - I fear that that could make the actual error difficult to track if it cascades."}
{"pred": "Why do we need to check for `newVNode.type` here?", "gold": "At this point in `diff()` we should know if we're dealing with a `component` or a native `html` element. We can reuse that information in this if-statement here :+1:"}
{"pred": "I think this should be `epochNum >= a.foundationBonusP2StartEpoch && epochNum <= a.foundationBonusP2EndEpoch`", "gold": "somewhere in reward protocol, we need to do if epoch is Fairbank { a.foundationBonusP2StartEpoch = genesis.xxx a.foundationBonusP2EndEpoch = genesis.yyy p.state(sm, adminKey, &a) } that is to write the 2 new values at Fairbank height then this logic can follow"}
{"pred": "E302 expected 2 blank lines, found 1", "gold": "Dropping and recreating would delete all t he previous records, are they any important?"}
{"pred": "Why not just `return err == nil`?", "gold": "While it is technically OK to use `m.GetPaths()` here, and it's a mock code so it doesn't really matter, I'd still like to have `m.Path(\"devices\")` used here, because since commit 714c91e9f73a1512808476eb532b4aa36bbb7530 we're not supposed to use GetPaths() for anything other than state save/restore."}
{"pred": "I think this should be `logger.Logf(\"HidepidDisable is %v.\", systemConfig.HidepidDisable)`", "gold": "Let's be consistent everywhere: either \"Disable\"/\"Enable\" or \"Disabled\"/\"Enabled\". I'm voting for the latter.:)"}
{"pred": "nit: `GoQuorum mode` -> `GoQuorum compatibility mode`", "gold": "this works and is the smallest possible change but we could definitely fail earlier"}
{"pred": "//go:build !arm64", "gold": "Should not have snuck in here right? This is a golang 1.17 feature, wii definitely want to update these"}
{"pred": "nit: `this.prevFolderId_ = null;`", "gold": "Could you explain the logic with prevFolderId?"}
{"pred": "Why do we need this function?", "gold": "Please add license header"}
{"pred": "Why do we need `finalize` here?", "gold": "It bothers me that the user calls `initialize` without also calling `finalize`. It seems to me that we're essentially making `lbann_comm` a singleton object. Going further down this path, we would put `initialize` inside `lbann_comm`'s constructor and `finalize` in the destructor. This has it's own weirdness - the user must make sure it's lifespan matches the beginning and end of the program. We may also run into the case where someone might want multiple instances of `lbann_comm`, but this is not too important."}
{"pred": "Why is this needed?", "gold": "We should probably make a unique_ptr<ROMol> typedef in ROMol.h and start using that liberally."}
{"pred": "This should be `fillHandle: { autoInsertRow: false }`", "gold": "Can you add missing asterisk?"}
{"pred": "I don't think this method needs to be public.", "gold": "late to the party, but I bet it meant to be `capitalizeLettersAfterNumbers` :)"}
{"pred": "I think this should be false by default.", "gold": "The Activity is recreated on configuration changes and the value of the field is lost. So, e.g. pressing 'send' once will display the error message. If you rotate the device and press 'send' again, the message will show another time. Use `onSaveInstanceState()` and `onRetainInstanceState()` to save and restore the value of the field."}
{"pred": "Why this change?", "gold": "Looks like a \"find and replace\" unintended change here"}
{"pred": "Why do we need to strip unlearned columns if learning is off?", "gold": "haven't we got rid off `randomSP` recently? (I think `not learn` implied that)"}
{"pred": "Shouldn't this be `in.GetStatus().Experiment.Phase`?", "gold": "Why we need use `in.GetStatus()` function here? Can we use `in.Status.xxxx` directly?"}
{"pred": "I don't think this is the right place to do this. I think it would be better to move this logic into the `RenewCert` function and have it return an error if the renewal fails.", "gold": "@cretz Just a thought: what if another renewal process updates the certificate between the beginning of this for loop (above on line 67) and actually calling RenewCert? Even though we have a read lock on the certCache, something else could have renewed it by now, and finished, which would cause this certificate to be renewed twice. Could you double-check my thinking here and see if that's a plausible 'race' condition? I wonder if the lock needs to be put over this whole function. (It's still early here; I could be wrong...)"}
{"pred": "Why this change?", "gold": "We don't need this for the PInvoke?"}
{"pred": "Shouldn't we return an error here?", "gold": "nits, I think add a log (using s.logger) to show why does this return with no error is better."}
{"pred": "I don't think this is the right error message. It should be something like \"Requested piped doesn't belong to the project you logged in\".", "gold": "Btw, It would be nice if we have some tests for those validation functions."}
{"pred": "`methodName()` -> `methodName()`", "gold": "Should this be called something that indicates its function, rather than its content? validationMessagePrefix, or similar?"}
{"pred": "Copyright (C) 2010-2019 NV Access Limited", "gold": "Please remove this line"}
{"pred": "Shouldn't this be \"Don't run the client\"?", "gold": "You could change the name of the command line switch too. Short options are typically one character after hyphen. wxWidgets' command line parser seems to handle `-nd` without confusing it with `-n` or `-d` but I'm not sure if that's by design or by accident. I'd remove the short option. `--no-daemon` is with hyphen but the rest of Manager and client uses underscore. Please change that."}
{"pred": "nit: `Implies --compare-dest but also copies files from path into destination.`", "gold": "File is not `goimports`-ed (from `goimports`)"}
{"pred": "Why is this change needed?", "gold": "Why are we mentioning toybox in this message? AND it still says \"tdnf error\". What's the actual error? Should it be resolved instead of flagged?"}
{"pred": "Why do we need to replace this with a new error?", "gold": "You can remove these if they've been resolved in NODE-3405 and this isn't depending on it"}
{"pred": "Shouldn't this be `class=\"\"`?", "gold": "don't need the class here if its empty"}
{"pred": "Why do we need this computed?", "gold": "This should be computed('i18n.locale'...."}
{"pred": "Why do we need to return job_id here?", "gold": "Please add return and return type description to docstring of this method."}
{"pred": "Layout/EmptyLinesAroundMethodBody: Extra empty line detected at method body beginning.", "gold": "What does 1 << 32 do? In irb typing this yields 4294967296. I didn't find the append operator in Numeric or Integer."}
{"pred": "Should this be `@succeeded ||=`?", "gold": "We generally use metadata for this sort of thing, indeed there is a `metadata[:execution_result]`."}
{"pred": "Why do we need this?", "gold": "This was very confusing until I realized this might refer to the *bokeh* use of the word 'streaming'."}
{"pred": "`batchMap` is unused (from `structcheck`)", "gold": "Can you rename this as `tasksToContainerStates` ? If you do that, you can rename the lock as well"}
{"pred": "`accounts` can be `null`.", "gold": "Fixing `lint` warnings that have existed for a while."}
{"pred": "nit: `times the given element`", "gold": "An iterator **of {\\@code n} sequential elements,** where each element ~are~ **is the** given {\\@code element}."}
{"pred": "I think this should be `nameof(MySqlCommand)`", "gold": "If all of the `SqlCommandIntegrationName` values are the same, can we just remove it from `IAdoNetClientData` entirely and put the constant there?"}
{"pred": "nit: remove empty line", "gold": "Maybe regroup this import with the other cert-manager packages."}
{"pred": "There should be a space between `)` and `{`", "gold": "There are spaces missing ;) Just have a look at the code style of the `if` statement above"}
{"pred": "Shouldn't this be `len(candidateMsgs) < block.BlockMessageLimit`?", "gold": "We should pass the size limit as a parameter to Drain so that we don't take messages out of the pool and then drop them. It's ok to merge as is, I will file an issue."}
{"pred": "Shouldn't this be `len = (int)(nxt_pc - pc) + AARCH64_INSTR_SIZE`?", "gold": "Patch lists are used in many places so this is going to break other updates. This should just be a local change in emit_special_ibl_xfer() to pass the second-to-last instruction instead of the last instruction."}
{"pred": "Why did this change?", "gold": "@argakiig previous work was above live threshold, causing the high difficulty to bleed into other blocks when genesis open was processed in tests."}
{"pred": "Line is too long. [81/80]", "gold": "Metrics/LineLength: Line is too long. [89/80]"}
{"pred": "nit: `HidepidDisable` -> `HidePIDDisable`", "gold": "Please also extend the config tests now to include the new field."}
{"pred": "Why do we need this?", "gold": "I think it's wise to keep the behavior backwards-compatible (so `false` as default)"}
{"pred": "Should this be `sameSite` instead of `sameSite`?", "gold": "We don't need this line, do we?"}
{"pred": "Style/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.", "gold": "I don't know if we've actually had this problem on Upcase. I'd lean towards having a blank file unless (like on robots) we see multiple errors per week from this crawler."}
{"pred": "Shouldn't this be `wlr_render_colored_quad`?", "gold": "I'm not good at picking colors, if anyone else has a preference."}
{"pred": "nit: `cancelTimers` -> `cancelTimers`", "gold": "Note that even if you cancel the timer, the refreshFolders function might still be running since it's async. Could that be a problem for the test units? One big issue I had with tests is they sometimes would work and sometimes fail randomly, and that's because there are still code running in the background. One example was the ItemChange class, which saves data asynchronously. So I've implemented a waitForAllSaved(), which can be used for test units, to make sure nothing is running once the test ends. So just wondering if we might end up with this issue here."}
{"pred": "`expect.fail('\\n' + messages);`", "gold": "can we make this something more descriptive? like... types should compile? I'm still not sure exactly what this is testing... this says \"Exported types\" - but what does tsd actually look at?"}
{"pred": "Why did you remove this?", "gold": "this method is need for full screen video button to appear in players"}
{"pred": "`increment` is unused (from `structcheck`)", "gold": "Why is this a pointer?"}
{"pred": "nit: space after comma", "gold": "nit: Space after comma"}
{"pred": "Why is this needed?", "gold": "A similar field is already define in `scapy/layers/bluetooth.py`. Can you merge both definitions ?"}
{"pred": "nit: space after `if`", "gold": "`std::strtok` isn't necessary. The `std::string::find_first_of` is better C++ alternative to `std::strtok`. For example, see `CheckedError Parser::ParseEnumFromString` method."}
{"pred": "Why did you remove this?", "gold": "This property is already declared in a parent with the same visibility/type/value. This one is redundant."}
{"pred": "Why is this needed?", "gold": "This is required, otherwise multiprocessing will (for some reason) crash"}
{"pred": "File is not `goimports`-ed", "gold": "Please put in a separate line-separated block"}
{"pred": "Shouldn't this be `return err`?", "gold": "Should error be eaten? If so, not clear why"}
{"pred": "`self.force_empty_list = not self.on_collection`", "gold": "This attribute is not defined if the condition is not met. Instead, you could define another RouteFactory (e.g. `BucketRouteFactory` with a class attribute like `allow_empty_list`)"}
{"pred": "nit: `WithInstalledTimestamp` -> `WithInstalledTimestamp`", "gold": "Can we use the existing `InstalledTimestamp` function?"}
{"pred": "If there are any invalid fields and there is nutrition data, scroll to the nutrition fragmento", "gold": "weird naming: `is` but `fields` (plural or singular ?) . If the method checks if the fragment has an invalid value, then \"hasInvalidValue\" or \"containsInvalidValue\" is fine no ?"}
{"pred": "Should this be `/<user_name>/`?", "gold": "Does this mean that `listenbrainz.org/user/iliekcomputers` will start getting 404s?"}
{"pred": "Layout/AlignArray: Align the elements of an array literal if they span more than one line.", "gold": "Line is too long. [82/80]"}
{"pred": "Why is this needed?", "gold": "That's a strange name =)"}
{"pred": "Extra empty line detected at block body end.", "gold": "Thoughts on this? I'm not crazy about the brittleness of this but haven't found a good way to test more generically that a specific (custom) template has been rendered."}
{"pred": "Why do we need this?", "gold": "Have we reached binding-level agreement on the `subscribe` terminology? My only concern is that it doesn't seem descriptive enough and may be confused with subscribing for notifications."}
{"pred": "Why do we need this check?", "gold": "would it not be safer to move this condition to the `addLink` method?"}
{"pred": "I don't think this is the right place to do this. I think it should be in `copyResponse` instead.", "gold": "I think this might read better: > some apps need the response headers before starting to stream content with http2, so it's important to explicitly flush the headers to the client before streaming the data."}
{"pred": "Why do we need a `StructLike` here?", "gold": "What does this return if there is no partition? I think that we should consider adding a struct type that describes this tuple. That way, we can use an empty struct for unpartitioned and a non-empty struct for tasks that are combined by partition. We could also support more combinations, like combining across day partitions by not across bucket partitions or similar."}
{"pred": "I don't think this is the right error type to use here. It should be `libkbfs.RepoDoesntExistError`.", "gold": "Also, it might be worth returning this for the above lookup on `kbfsRepoDir` as well, which could happen if someone tries to delete a repo in a TLF that has never had any repos at all."}
{"pred": "I think this should be `tequilapi.allowed-hosts`", "gold": "Can this be `Hidden: true` as we already have a bunch of flags that are printed on `--help` and this seems like an average person should not care about it."}
{"pred": "`?: $isDebugMode` -> `?: null`", "gold": "Wouldn't this set $strictVariables = true when Config::get returns false?"}
{"pred": "Why is this ignored?", "gold": "was this meant to be checked in?"}
{"pred": "I don't think we want this to be configurable.", "gold": "check spaces after const name..."}
{"pred": "Should this be `if driverVersion != \"\" {`?", "gold": "If the GPU setting is enabled, resourceFields.NvidiaGPUManager will be nil, right?"}
{"pred": "`unless file_exist?(script)` -> `unless file_exist?(script)`", "gold": "We should probably verify that it's readable too"}
{"pred": ">string value = xmlReader.ReadElementContentAsString(); [](start = 12, length = 54) This is not needed.", "gold": "See, here's an example where you removed the variable but kept the call, which makes sense."}
{"pred": "Shouldn't this be `request.isInitiatedByUser()`?", "gold": "Please use `request.getTitle()` instead of `feed.getHumanReadableIdentifier()`: In this case, `feed` does not have a human readable title yet"}
{"pred": "I don't think this should be a warning.", "gold": "I think the wording on the left is better"}
{"pred": "Shouldn't this be `i.addInterceptor(interceptor)`?", "gold": "Please update the method described to point out that it maintains a chain of interceptors and they will be called in the same order passed in the options."}
{"pred": "Should this be `args.Name != AssemblyName`?", "gold": "Is this case purely hypothetical or did it solve an issue that occurred in your testing? I'm trying to understand this change a little better"}
{"pred": "Why do we need this change?", "gold": "Use instead `convert.Int32ToString` that was added in #762 for this purpose."}
{"pred": "Why do we need the `contains` check?", "gold": "If key is present, tree.put(k,v) needs to return a new instance for Maps and the same instance for Sets. Therefore we currently perform an additional 'contains' check for Sets. A future optimization may add an additional flag `replace` to the backing HAMT.put() / RedBlackTree.insert() methods. Sets set it to replace=false, Maps set it to replace=true. But for now this solution is working for us."}
{"pred": "why do we need this?", "gold": "This is a regression test for code I found while working on this."}
{"pred": "`op_data[2]` can be `nullptr` here.", "gold": "I'm wondering if we need to delete jsonStr and jsonAttr after the json_extract_path_text call to avoid unnecessary heap pressure. Though if json_extract_path_text itself does new's on the same heap, we'd get heap fragmentation. Another approach would be to allocate these on the stack instead, avoiding both concerns: char jsonStr[len1+1]; char jsonAttr[len2+1]; ..."}
{"pred": "Shouldn't this be `if user_from < 0`?", "gold": "Does it come as `str`?"}
{"pred": "Why this change?", "gold": "This should actually read as the following `for (int i = 0; i < allergens.size(); i++)`"}
{"pred": "How about `return b.AppendNull(j)`?", "gold": "This is so useful and safety, I want to propose making AppendBool, AppendInt, etc. all private functions, and forcing us to use AppendValue(j, values.New(false)), etc."}
{"pred": "Shouldn't this be `ref.current = null`?", "gold": "Really, really small nit   I believe there's 3x tabs in here? And should it be just 2x?"}
{"pred": "I'm not sure if this is the best name for this option. Maybe something like `abort_upload`?", "gold": "Perhaps note that rclone can't do this yet?"}
{"pred": "nit: `ConfigureTransports` -> `ConfigureTransport`", "gold": "You probably don't need to set an empty config here."}
{"pred": "Would it make sense to move this into `util.datetime_types`?", "gold": "I think you are missing `cftime.DatetimeAllLeap` here. That said, all of these are subclasses of `cftime.datetime`, so I think you could get away with just using `cftime.datetime` here, rather than enumerating all of the different subclasses (since `cftime_types` is only used for instance checks)."}
{"pred": "nit: `PredecessorBlockDeviceCPK` -> `PredecessorBlockDeviceLabel`", "gold": "don't we need to set this label on pool pods? I don't see them being set"}
{"pred": "Why this change?", "gold": "can remove, it isn't reachable."}
{"pred": "Metrics/LineLength: Line is too long. [82/80]", "gold": "`expect(cancellation).to be_can_downgrade_instead` would be preferred :rainbow: :rainbow:"}
{"pred": "Shouldn't this be `result.IsCancelled`?", "gold": "Gross. The OS should timeout writes for completely unresponsive clients to begin with. Long term, the better solution is to enforce a minimum minimum data rate for responses. This might require a way to cancel LibuvAwaitables, but it definitely not OK to immediately kill the socket and any ongoing writes just because the request processing loop completed. You could consider doing that after some kind of timeout, but at that point you might as well just enforce a minimum rate."}
{"pred": "Remove unused code.", "gold": "If this is not used, we should just delete the line."}
{"pred": "Why is this being removed?", "gold": "Are there other callers to this function. How will they be impacted."}
{"pred": "Why this change?", "gold": "Let's be consistent. The majority of boto code does not use relative imports. Let's just stick to the existing standard of \"from boto.package.subpackage import Thing\"."}
{"pred": "I think it would be better to use `Optional<String>`.", "gold": "Suggestion: specify `arity` for this option."}
{"pred": "`show_legend` should be `True` by default.", "gold": "This is a parameter available for the matplotlib backend IIRC. In which case, it is good to see this support added to the Bokeh backend."}
{"pred": "Why do we need to trim here?", "gold": "trim has performance impact and this is the lowest level library... seems the trim if occurs should happen in the UI or Query controller instead.."}
{"pred": "Why is this needed?", "gold": "Probably also needed for the `http.client.FOUND` below?"}
{"pred": "Should this be `es6-js-export`?", "gold": "Can you also add this to Compiler.md ?"}
{"pred": "nit: `retries` -> `retriesCount`", "gold": "!numbers -> numbers"}
{"pred": "\"artifact.name\" could be empty.", "gold": "This description doesn't seem quite right for the longrunning case - `longrunning` isn't an orgname."}
{"pred": "Why do we need this method?", "gold": "maybe give it a more descriptive name, e.g. `competitiveFilter`"}
{"pred": "I don't think this should be changed.", "gold": "This occurrence of \"master\" is unrelated to master/slave replication. Maybe simply remove the word \"master\" or replace it with \"reference\" but \"primary\" doesn't really make sense."}
{"pred": "This import should be grouped with the other filecoin imports.", "gold": "BLOCKING: This is a problem. We shouldn't be introducing new dependencies on proofs into actors. The miner has some dependencies that should be removed (#2555). This could be accomplished either by moving `proofs.Mode` to `types.ProofsMode` or by forgoing a new type altogether and replacing it with a boolean. The later would have the additional advantage of reducing the number of types we have to export through ABI. I get why `proofs.Mode` has value as a type over a boolean, but I'm not sure it's worth it here."}
{"pred": "Why do we need to check for nil here?", "gold": "We probably want to log the fact that a `MessageId` was not present in the response. In addition the `RequestID` from `request.Request` should be included in the message so that the user is aware of the issue."}
{"pred": "Why do we need to pass `webPropertyId` here?", "gold": "It feels a bit strange to re-assign that here, as that line itself has no context on why it's reassigned. I'd prefer if we could pass `{ propertyID: webPropertyId }` below instead (that's how we do that elsewhere too). This also applies to other similar re-assignments below - let's rather pass the values within the objects as applicable, since then there is more clear context on why this \"rename\" / \"reassignment\" is necessary (because of an object expecting specific properties)."}
{"pred": "I think this should be `countly.compare.views.js`", "gold": "remove this in the new pr aswell when moving compare to plugins as discussed."}
{"pred": "nit: `inputs` -> `inputs`", "gold": "check varHolder is nullptr is redundant, ExecutionContext ensure"}
{"pred": "Should this be `UNSUBSCRIBE_SECRET_BASE`?", "gold": "Make these frozen constants?"}
{"pred": "Shouldn't this be `title = title.replace('<', '&lt;')`?", "gold": "Please use something like html.escape() to ensure that the text is totally safe to include within html. &lt; is not enough."}
{"pred": "What is the reason for this change?", "gold": "why is a buffered channel larger than 1 needed here? the separate goroutines can just try to write to the channel with a select-default block, and then it is not needed. i find the current implementation a bit convoluted, maybe we could simplify it a bit? not sure why it is needed for example to communicate an empty result. these patterns can be simplified using waitgroups"}
{"pred": "This should be `20150415145819`", "gold": "There seem to be more changes in here than I'd expect (mostly `limit: 255` additions)."}
{"pred": "I don't think these need to be public.", "gold": "I'm not sure, but I think it's `Tenant`"}
{"pred": ">bool allowOptionalMappings = false [](start = 12, length = 36) This is a breaking change. Can we keep the old signature and mark it as obsolete?", "gold": "Not sure if it's an issue, but this is a breaking change in a public API. Maybe we should add as an overload without optional parameter instead and delegate the existing call to this one?"}
{"pred": "Why do we need this?", "gold": "as opposed to exposing the chooser function and increasing our API exposure for the purpose of tests, can we move the HTTP transport config test into this package?"}
{"pred": "Shouldn't this be `< 0`?", "gold": "This is using the legacy DRM interface. DPMS levels have been removed from the atomic interface IIRC. Should we handle DPMS levels at all?"}
{"pred": "I think this should be `<` instead of `<=`", "gold": "I think this was correct before. The nonce passed in here is the nonce at a block (which is the next nonce not yet used, e.g. 0 if the account was never used, 1 if only the tx with nonce 0 has been sent). So if the in-block nonce is 12, then a transaction with nonce 12 cannot have been included yet."}
{"pred": "`Platform.OS === 'android' && NativeModules.ShareExtension`", "gold": "Please name the file ShareExtension.js, as you import it under this name (also could you convert it to TypeScript please?)"}
{"pred": "`TLSInsecure` is unused (from `deadcode`)", "gold": "Not sure if we need it, but if we set it, be sure to add `,omitempty`."}
{"pred": "nit: add period at end of sentence.", "gold": "It's the whole `PublicHeader` that will change soon, and we should state that here, not in the member functions. If Jana's proposal for a new header is accepted, we might also want to rename the fields here. For example, there won't be a dedicated version flag anymore, so a more appropriate name might be `ContainsVersion` instead of `VersionFlag`."}
{"pred": "Why is this change needed?", "gold": "I think `element` can stay of type `Character` because `Character` is a final class. The we do not need the cast in the line below."}
{"pred": "Shouldn't this be `isInterface()`?", "gold": "Not sure, if we should do it the other way round. If you ask be in the middle of the night, whether Interface should return true as \"isInterface\" and what Annotation would return. I'd tell you, Annotations should return false.... I want to say, on first glance, I'd say, it's easier to have \"isInterface\" and \"isAnnotation\" rather than \"isInterface\", \"isAnnotation\" and \"isRegularInterface\"... But I see, we also have \"isRegularClass\".... We still have the possibility to change the semantics of those APIs in PMD 7 *Update:* Or in other words: What is less surprising? That isInterface returns true for annotations or that it returns false?"}
{"pred": "Why was this removed?", "gold": "This will potentially skip package results. Do we really want that?"}
{"pred": "Shouldn't this be \"no analogue\"?", "gold": "Please remove `HIP_UNSUPPORTED`"}
{"pred": "nit: rename to NewMutableStateStatus?", "gold": "if this is a \"Status\" type then the variable name \"Stats\" (which implies \"statistics\") seems wrong (or at least confusing to me)"}
{"pred": "`leakedInsecureKey` is unused (from `deadcode`)", "gold": "maybe will be better to put it into the default worker's config rather than hardcoding the address?"}
{"pred": "`raw` should be of type boolean, but is of type string.`", "gold": "It seems like this is not meant to test the option failure, but rather that `raw` can be set. This may be a superfluous test now, and we might want to delete it."}
{"pred": "`view_set_fullscreen(output->fullscreen_view, false, output->wlr_output);`", "gold": "This is already done by `view_set_fullscreen`"}
{"pred": "Why not just `return pr.peerToNode`?", "gold": "mmm I followed the convention of this collection. It has Add, Remove, RemoveAll, so All sounds reasonable. Else It would likely be AddPeer, RemovePeer, RemovePeers and Peers."}
{"pred": "`getByUuid(string $uuid): Flag`", "gold": "_nitpick_ I'm thinking about whether this method should be in the previous commit or not. I know it's not yet used there, but in theory, neither do UUID itself."}
{"pred": "Should this be `VLOG(1) << idStr_ << \"Term has been updated, previous \" << currTerm << \", current \" << term_`?", "gold": "\"break\" is right? You skip the line 768."}
{"pred": "Use the new Ruby 1.9 hash syntax.", "gold": "Can this use the route helper instead?"}
{"pred": "Why do we need this?", "gold": "Why is this field exported and others aren't?"}
{"pred": "Why do we need this file?", "gold": "should we rename this like `mongodb_srv_tests.js`?"}
{"pred": "Shouldn't this be `pageTitle && googlesitekit.pageTitle.length`?", "gold": "This should still have a value when there is no page title, e.g. just `__( 'Search Traffic Summary', 'google-site-kit' )`."}
{"pred": "`@link` should be `@link`.", "gold": "Oops.. meant to link to SplitOp here. I'll clean up in my next commit"}
{"pred": "This import is unused.", "gold": "Remove these unnecessary imports that you've added."}
{"pred": "I don't think we need `success_https` here.", "gold": "That space shouldn't be here :wink: This lead to an exception whenever a page with an error was loaded, e.g. an inexistent host - I just fixed that :smile:"}
{"pred": "Shouldn't this be `self.local_port`?", "gold": "It seems this is not the way to fix issue #505."}
{"pred": "Why did you remove `pos_weight`?", "gold": "Please take a look at the docstring of `F.binary_cross_entropy_with_logits`. `weight` should be a tensor that matches the input tensor shape. It is Not the class-aware weight. `pos_weight` should be a vector with a length equal to the number of classes."}
{"pred": "nit: \"Import with network tags\" -> \"Import with network tags\"", "gold": "Same here, merge with an existing test."}
{"pred": "{0, UnknownSlot, 0, 0, 0,\\", "gold": "@aimanrosli23 Could you help to confirm if you do not revert the change in below commit: SHA-1: 643623147a1feaddd734ddd84604e1d8e9dcebee * MdeModulePkg/SdMmcPciHcDxe: Send SEND_STATUS at lower frequency"}
{"pred": "Why is this needed?", "gold": "Can we do this without a breaking API change? What about adding a different name to convert directly to a Schema?"}
{"pred": "Why are we using bluebird here?", "gold": "Why do we need to pull bluebird in here?"}
{"pred": "Why do we need this finally block?", "gold": "If *two* threads successfully download the same project into two different temp dirs, and one of them successfully renames one to its final destination, the `if`on line 102 will be false _in the other thread_, and it would leave its temp dir behind."}
{"pred": "target_link -> target_linklist", "gold": "I would appreciate it if you could rename `link` to `all_link` so that the roles of the two links (the other is `target_link`) become clearer."}
{"pred": "Why did you remove the `expectedToBecomeIndex`?", "gold": "Is there a reason not to use `smi.create_expectedIndex` here (and in other places)? The `smi.create_expectedIndex` function will also check to make sure that you don't accidentally skip or duplicate any indexes. With the goal of avoiding errors in the test. It does mean that you have to be diligent with how the expected indexes are created, which can be annoying too. My logic was that it is better to be annoyed by constraints during development time than to find out some time later that the test didn't do what I thought."}
{"pred": "Align the parameters of a method call if they span more than one line.", "gold": "Put a comma after the last parameter of a multiline method call."}
{"pred": "Why do we need a pointer here?", "gold": "I don't know if we even need this parameter."}
{"pred": "# pylint: disable=arguments-renamed", "gold": "What is the new result of this file if we keep it the same than before? It's just to picture easily what changed in this MR :) (thinking is hard)"}
{"pred": "Why do we need this change?", "gold": "This needs to be synchronous for the timeout to work."}
{"pred": "I don't think we should remove the reminder email.", "gold": "Can you break this onto multiple lines?"}
{"pred": "Shouldn't this be 0xf3800010?", "gold": "OK, it looks like all children have bit 4 set, but it doesn't really matter at this split point: just informative, nothing reads it."}
{"pred": "I don't think we need to add the `omitempty` here.", "gold": "Sorry for the very basic question but why do we still have a DNSZone CRD in light of the DNSEndpoint, I don't fully understand the differences."}
{"pred": "I think you can use `require.Len` here.", "gold": "Looks like loop with overhead. You can: - create SID - test private function `sessionIsUnique()`"}
{"pred": "This should be `prefQueueSortOrder`", "gold": "In my opinion, it would be better to have two separate settings. One that stores if sorting is enabled and one that stores the order. That allows to toggle automatic sort without having to re-select the order."}
{"pred": "Why this change?", "gold": "/me can't wait to rename this repo :)"}
{"pred": "Why do we need `makeLazyLoader` here?", "gold": "nit: maybe call these `loadCollection()/loadDb()`"}
{"pred": "I don't think this is the right place to put this. I think it should be in `luigi.task.Task`.", "gold": "Did you consider just do `return Task is an external data dependency and data does not exist (yet?).'`? Less `None`'s and `ifs`."}
{"pred": "I don't think you need the `<% if defined? BlacklightMarc %>` here", "gold": "Some day, we really need to make these toolbars pluggable.."}
{"pred": "Please remove this blank line.", "gold": "This should be `pygment=False` like in `browsertab.py`"}
{"pred": "Should this be `c.msubs = opts.MaxSubs + 1`?", "gold": "Should this be moved down (or up) to under the client lock instead of server lock?"}
{"pred": "Why was this removed?", "gold": "Why are we removing this?"}
{"pred": "Redundant `self` detected.<br>Space inside { missing.<br>Space inside } missing.", "gold": "What do you think about using `self.id` ?"}
{"pred": "Shouldn't this be `<= 10`?", "gold": "Please log once here at Error level \"Failed to connect to Typha, will retry...\""}
{"pred": "This should be `2.18.2`", "gold": "Can you revert this change? The `VERSION` value will be updated after maintainer determines the version at release."}
{"pred": "Why do we need to change these names?", "gold": "It could be better if we use the up case letter to specify the constant string name. Such as QUALIFIED_SERVICE_NAME_KEY can let the user know it's a constant string."}
{"pred": "Should this be `examples_count.zero?`?", "gold": "This should be `@configuration.failure_exit_code`, we don't want to hard code 1."}
{"pred": "Overrides referencesVariables(), indicating this field refers to a variable.", "gold": "Changed per review in Blockly."}
{"pred": "Why do we need to set the dstMAC here?", "gold": "Hi @wenyingd . so what's the original dst MAC of the reply packet from kube-proxy?"}
{"pred": "\"List of qualified class names to ignore when counting public methods (see R0903)\"", "gold": "Note: I wasn't sure what the right wording would be for this, so I used existing language from elsewhere in the codebase."}
{"pred": "Should this be called `populate_instance_names`?", "gold": "Docstring for `platform`."}
{"pred": "Why do we need to do this?", "gold": "This should be called before any `os.Exit` otherwise it could still mess up things."}
{"pred": "Why did you change this from byte to int?", "gold": "shouldn't this be `short` ?"}
{"pred": "Shouldn't this be capacities?", "gold": "Can you please paste the output of `volume list` command which will show capacity of a openebs volume."}
{"pred": "I think it would be better to use `Objects.requireNonNull` here.", "gold": "I'd make this a `throw new NullPointerException(\"metric == null\");` instead"}
{"pred": "#include \"LuaUtil.h\"", "gold": "Include should be order lexicographically."}
{"pred": "`changeRequired` -> `changeRequired`", "gold": "We need to pass in the Activity context here, so that LoginActivity is used, and so that LoginActivity can get onActivityResult from the PasscodeActivity. Without this, the application context is used, and we don't get a callback when the passcode is done."}
{"pred": "I think it would be better to use `order(\"gps_points.latitude DESC, gps_points.longitude ASC\")` instead of `order(\"gps_points.latitude\")`", "gold": "Can you move these to the top please, for consistency with other models - normally we put scopes immediately after the associations at the top of the model. As to names I agree with @gravitystorm that these names may be confusing but I'm not sure the ones I suggested are perfect either so I'm not really sure what's best. The goal of my names was just to separate point which could be ordered (as `ordered`) from those which can't (as `unordered`) but I realise that may not be very clear from the names."}
{"pred": "Shouldn't this be `!shouldRepeat`?", "gold": "Looks like the episode should also not be deleted when repeating"}
{"pred": "File is not `goimports`-ed (from `goimports`)", "gold": "I feel like goimports would move this import line by the other non-std packages... can you double-check that? Run goimports or set up your editor to run it on save. :+1:"}
{"pred": "Should this be `chrome_options=`?", "gold": "`options['binary'] = WebDriver::Chrome.path` if set?"}
{"pred": "Why is this needed?", "gold": "File is not `goimports`-ed (from `goimports`)"}
{"pred": "Should this be `Microsoft.AspNetCore.Server`?", "gold": "Nit: Supported -> Enabled."}
{"pred": "This should be `csv.at[0, 'Int0'] = 42`", "gold": "Yay! I was too lazy to fix this."}
{"pred": "`pkg_errors` is unused (from `deadcode`)", "gold": "other declaration of errors (from `typecheck`)"}
{"pred": "nit: `githubRepoExp` -> `githubRepoRegex`", "gold": "nit: error starts with capital letter"}
{"pred": "Why not use `Flag.valueOfByRealName(flags.getString(i))`?", "gold": "the original code ignores \\Draft and \\Recent, whereas your change will not. what this matters, i'm not sure."}
{"pred": "Why do we need this?", "gold": "Why was this necessary?"}
{"pred": "How about `ForceRerun` instead of `Rerun`?", "gold": "Can you also do this for Cover?"}
{"pred": "`VUID-VkImageSubresourceRange-aspectMask-01670` -> `VUID-VkImageSubresourceRange`", "gold": "So I tried adding this VU a long time ago, thought it would be this simple of a check, but turns out there were other validation in the way for getting here in `ValidateImageAspectMask` I assume that is what is failing CI here, realized it would require some more refactoring"}
{"pred": "`coalesce_and_sum` -> `sum`?", "gold": "This method is not needed for postgresql, by default sum function omits null values so we can remove this file"}
{"pred": "This should be `systemdsystemgeneratordir=systemd`", "gold": "Can you provide a `--with-systemdsystemgeneratordir` option here? So that I can do unprivileged installs without completely turning off systemd. I can add it as a follow-up PR too."}
{"pred": "I don't think this is correct. The classifcation model is a classification model, not an anomaly.", "gold": "`classification` is misspelled"}
{"pred": "Why is this change needed?", "gold": "Can you change this to `sampleInitCode`?"}
{"pred": "sb.append(\", startTs: \").append(startTs.toString());", "gold": "I added a startTs information in `TiDagRequest` output. Not really sure if it is useful? @zhexuany"}
{"pred": "Why do we need to convert `width` and `height`?", "gold": "This prevents margin/border/padding CSS from affecting the width/height (otherwise in Chrome a width and height of 1 would result in a rect size of 5x5)."}
{"pred": "Missing space after #.", "gold": "prefer to just add this to the `verify_authorized` exception list above since we're already making exceptions."}
{"pred": "Shouldn't this be `$used_trait_lc`?", "gold": "was there a reason to not loop over parent classes here?"}
{"pred": "Why is this needed?", "gold": "@billybonks Why move `import Ember from 'ember';` to the top?"}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.", "gold": "Everything's so simple (a `ThreeStateWorkflow`) until it isn't :smirk:"}
{"pred": "`np.nan` and `np.nan` are the same thing.", "gold": "I don't quite understand where the NaNs come from..."}
{"pred": "Why this change?", "gold": "File is not `goimports`-ed"}
{"pred": "This should be `//_please:please_wheel_resolver`", "gold": "I wonder if we should look at moving the Python stuff to a plugin and doing this there rather than adding to core plz at this point?"}
{"pred": "This should be `ansible_playbook.add_cli_arg('inventory_file', 'localhost,')`", "gold": "This is the actual bug fix. I prob should have broken this out into two PRs."}
{"pred": "Should this be `IsEip3529Enabled`?", "gold": "I am not sure if we need this, we already have DifficultyBombDelays"}
{"pred": "Why do these need to be disposed?", "gold": "move to finally - I can see at least one return that would omit it, also any exception and so on"}
{"pred": "why do we need to check for stakingV2?", "gold": "remove `genesisConfig.GravityChainStartHeight == 0`"}
{"pred": "Shouldn't this be `../vendor/symfony/var-dumper`?", "gold": "this might kill whole application if `var-dumper` will not be installed. What about two separate file_exists conditions (monorepo/project)?"}
{"pred": "I think this should be `util.Failed(\"Could not create settings file\")`", "gold": "Hrm. Maybe this isn't the correct spot to run this? Because it errors if the app type doesn't support settings. But we want to check that before running it."}
{"pred": "`pretty_list` -> `pretty_routes`", "gold": "Why are you changing this name ?"}
{"pred": "Why do we need to check for `USER` here?", "gold": "as we discussed, maybe it would be better to - [ ] set OVERRIDE_IN_DOCKER=1 in the Dockerfile - [ ] replace the if statement with `os.path.exists(\"/run/.containerenv\")` as @dfangl suggested"}
{"pred": "why not just `isinstance(node.parent, astroid.Call)`?", "gold": "I like this style of doing things better than having super big conditional without explanation. Even though I know this won't be re-used it's nice to have a function if only for clarity."}
{"pred": "Why do we need this?", "gold": "Our preference here is to either have inline statements e.g. `@group_level -= 1 if @group_level > 0` but stylistically here I think `return @group_level if @group_level == 0` might be nicer. As it stands however our rubocop is picking this up as a fail :("}
{"pred": "Why is it failing for Spark3?", "gold": "Spark3 Is supported in OSS Iceberg, Do you mean this particular function is not supported in Spark3? If so I think we should have a more clear reason why"}
{"pred": "`check.is_file(notebook_path, \"notebook_path\")`", "gold": "something about the arbitrary file access part here makes me nervous. Can we keep the `if not path.endswith(\".ipynb\")` check from before here as well? Just imagining a weird attack scenario where somebody somehow uses this to get access to confidental files or something"}
{"pred": "Why do we need this method?", "gold": "I wonder if we should push this and the search_params_logic into the blacklight config."}
{"pred": "Why is this needed?", "gold": "don't need this line, since it is not tested here?"}
{"pred": "Should this be `None`?", "gold": "I wonder if adding this new param in the middle of the param list might screw up some existing code that is depending on the old parameter order. Might be better to add it to the end of the parameter list?"}
{"pred": "Shouldn't this be `src/generated/.*`?", "gold": "I wonder if this absolute path is gonna affect the build-cache relocatability of these compile tasks??"}
{"pred": "Shouldn't this be `this.writeConcern = undefined;`?", "gold": "possible bug if `fullResponse` is false"}
{"pred": "Why is this needed?", "gold": "nitpick: Please only `import string` here and use `string.ascii_lowercase` - I really like to see what module stuff is coming from without looking at the imports."}
{"pred": "Shouldn't this be `console.error(err)`?", "gold": "nitpick: the only reason we have a catch for every one of these promises is because the test isn't properly chaining promises (returning them within each `then`). We could reduce the `catch` with `console.dir` to a single instance if that was done"}
{"pred": "Why this change?", "gold": "why do this?"}
{"pred": "Shouldn't it be `MediaLibraryInterface`?", "gold": "For consistency, would it not be best to also replace the first class name? `traceLog('Class ' . static::class . ' has been deprecated, use ' . SystemMediaLibrary::class . ' instead.')`"}
{"pred": "nit: `omitempty` is not needed.", "gold": "this should be `EnabledAdminAPI` and the json string should then be `enableAdminAPI`"}
{"pred": "F401 'time.sleep' imported but unused", "gold": "Noticed some missing imports in manage.py so thought I'd add them"}
{"pred": "Why do we need to set this flag?", "gold": "as a future improvement, maybe we should just change `ForAllFlowRecordsDo` so that `updateOrSendFlowRecord` uses a flow record pointer instead of a copy of stored flow record. This whole code is executed with the lock any way."}
{"pred": "This should be `\\u2122`.", "gold": "I am not sure what GitHub wants to tell me with this icon here :)"}
{"pred": "Why did you change this?", "gold": "can we also check for smaller zoom levels returning valid error codes?"}
{"pred": "I think this should be `LogVerbose`", "gold": "1) These names are not great, doesn't help explain what they do. 2) Instead of methods like this that hard code some number of = and *, why not a method that takes the string, defaults to a char to surround with, and a width? 3) Do we really even need headers like this in the output? Maybe we ditch them."}
{"pred": "What's the reason for this change?", "gold": "The autocomplete editor shouldn't change its own behavior, I assume that `autoWrapCol` and `autoWrapRow` options should be set to `false` in handsontable editor."}
{"pred": "Why do we need to pass `true` here?", "gold": "out of curiosity, with IPv6 introduced, why there's no change to the expected output of openflow in the test?"}
{"pred": "(style) code indent should use tabs where possible", "gold": "nit: grammar: instruction"}
{"pred": "import graphql.schema.Query;", "gold": "We can revert this to reduce the diff of the PR."}
{"pred": "Why do we need this change?", "gold": "i think this missed the reconciler to callsite change"}
{"pred": "Why is this not implemented?", "gold": "Please reuse `getClientConfigPath`."}
{"pred": "Why this change?", "gold": "Should we use the shared chai-addon.js file here? Actually we should consolidate any `chai.use` calls, I see 20 instances, quick win?"}
{"pred": "Why do we need to sort here?", "gold": "Maybe move _agreedCapabilities and _availableCapabilities from List to SortedSet ? We could order them by code and then by version already."}
{"pred": "`o.lss != nil && o.sseq < o.lss.resume`?", "gold": "I see the `+1` issue, but we used to check if `o.lss != nil` and we don't anymore, so we are sure that it won't be nil here, right?"}
{"pred": "This should be `export_as_preferred_citation_txt.html_safe`", "gold": "why is the `send` needed?"}
{"pred": "Why is this needed?", "gold": "Is this necessary? If so, we need to update the docstring."}
{"pred": "Style/RedundantSelf: Redundant self detected.", "gold": "Checking for actionable here instead of grabbing the first pending approval. I tested this with proposal ID 265 on staging."}
{"pred": "Why is this necessary?", "gold": "I made this change because I wasn't getting printouts of the 'result' value when the assert was inlined for some reason. I think it's related to creating new CallbackCheckers maybe?"}
{"pred": "Why do we need this interface?", "gold": "nit: the correct name is \"request line\", so let's use the right one here :)"}
{"pred": "Why do we need to check for `https` here?", "gold": "This should now use `[]`, so it crashes if the var is missing"}
{"pred": "Shouldn't this be `CALI_ERROR`?", "gold": "you could use `bpf_map_update_elem` with `BPF_EXIST`"}
{"pred": "`Failed to create` -> `Failed to create`", "gold": "thanks for noticing this! But I think we should not have it in this PR."}
{"pred": "`for (var i = 0; i < this.inputs.length; i++) {`", "gold": "A few things: - This may not serialize because I think the property for the sequence number on an input is `.sequenceNumber`. - There should be tests to cover these statements - Indentation is incorrect (should be two spaces, as similar to the statements above)"}
{"pred": "nit: `data_format` -> `data_format`", "gold": "If this is a base method that could be used by others, should you hardcode 'GCS uploader' here?"}
{"pred": "nit: space after `if`", "gold": "just a little thing: let's introduce a `final int bound = length - back.length();` that saves us calculating the bound each time checking the loop condition."}
{"pred": "This should be `/settlements/pay/{peer}`", "gold": "I think that this should be a POST method, as it changes the state. Get requests should not change the state. With different method, I would suggest to have the handler under `\"/settlements/{peer}\"` path."}
{"pred": "This should be `0x420000000000000000000000000000000000000F`", "gold": "This is the default value?"}
{"pred": "`from kinto import __version__`", "gold": "The spaces are actually legitimate here: in python, you: - first import standard library modules (hint: time is one) - then import 3rd party library modules - then import the modules from you project (here kinto). Between each block you need an empty line."}
{"pred": "Why was this removed?", "gold": "Haha, whoa, I'm not sure how I let that one go by. :)"}
{"pred": "Is there a JIRA for this?", "gold": "FWIW: We have FileUtil.generateOriginalExtension for tabular files but it uses a hardcoded list rather than the properties file."}
{"pred": "I think this should be `configParams.KubernetesProvider() == config.ProviderAKS || configParams.WireguardHostEncryptionEnabled`", "gold": "I would consider extracting this logic in to a helper function to make it a bit more readable, but that's just my opinion."}
{"pred": "Why do we need this?", "gold": "Are all fields beginning with \"Debug\" automatically `;local` ? (I guess so, but just checking.)"}
{"pred": "I don't think it's a good idea to warn users if they use `EvalHook` or `DistEvalHook`", "gold": "We should let this module inherits from the EvalHook supported in MMCV, and only override the `__init__` function by adding the warnings. The other functions can use those in MMCV."}
{"pred": "I think it would be better to use `getQuotedIdentifier` instead of `getQuotedIdentifier`.", "gold": "Let's use prepared statements here instead  "}
{"pred": "This should be `import { Button } from 'storiesOf';`", "gold": "Just leaving this in one place but thanks so much for re-organising all these imports.  "}
{"pred": "Why is this needed?", "gold": "Ditto, here and below"}
{"pred": "`typeof vnode.type!=='function' && typeof vnode.type !== 'undefined'`", "gold": "Let's move the check outside the `for`-loop so that we don't have to do it for every prop. If we change it to check for `vnode.type === 'string'` we can automatically skip checking text nodes which don't have props  "}
{"pred": "I don't think we need to deprecate this. I think we can just remove it.", "gold": "Seems like the docstring here should simply be \"Deprecated; use `hooks` instead.\"."}
{"pred": "Please add a space between `if` and `(`.", "gold": "It would be nice to have an `attr` in `styles.xml` for this, so we don't need the same `if` statement in multiple places"}
{"pred": "Do we need a unique index on teachers?", "gold": "How about `null: false` on these two lines? Also `t.timestamps null: false`?"}
{"pred": "Why do we need this check?", "gold": "This recommendation isn't very helpful because it isn't clear what \"the metastore\" is. How about this instead: \"To fix this, use an alternative metastore\"."}
{"pred": "nit: `isSymbolUsed` -> `isSymbolUsed`", "gold": "The `SymbolTable` deals only with symbols, I think we can just call this `isUsed` here."}
{"pred": "Why do we need to check if CORS is available?", "gold": "Please hide this behind a flag and add a setter function to the builder."}
{"pred": "Why do we need to skip the main association?", "gold": "Just a side-node, no need to change it here: The term \"recent\" might be confusing at a later point in time."}
{"pred": "`val1.keys !== undefined ? val1.keys() : Object.keys`", "gold": "When can it be undefined? Wouldn't that be a bug?"}
{"pred": "Why is this import needed?", "gold": "JMX offers normal APIs for this. I don't think you want the glassfish one."}
{"pred": "Why this change?", "gold": "Could you remove `,' at the end?"}
{"pred": "I think this should be `typeof opt_port === 'function'`.", "gold": "Maybe it would simpler to ignore opt_port if type !== 'number'?"}
{"pred": "Should this be `Address`?", "gold": "do you want to rename the codec tag here too?"}
{"pred": "Why do we need these?", "gold": "These command names are specific to Chromium-based browsers. Please move to `ChromiumDriverCommand`"}
{"pred": "Why do we need this?", "gold": "Hm.. should we auto-patch? I am less sure on this yet as `percentile_approx` seems a Spark function and auto-patching it in Koalas seems a bit counterintuitive."}
{"pred": "`FunctionalTestCase` should implement `ServiceContainerTestCase`", "gold": "I found domain use in `AllFeedsTest::getAllFeedExportCreationData` and class AllFeedsTest is descendant of `FunctionalTestCase`. I think so we can rewrite this too.."}
{"pred": "`iceberg-flink-job-id` -> `iceberg-flink-job-id`", "gold": "I am wondering if it is better to consolidate all committer checkpoint states into a single structure, e.g. Pojo class or Avro record which are Flink supported state types for schema evolution."}
{"pred": "I don't think you need to pass `log_signal` to `_filter_signals`.", "gold": "I assume this is a performance optimization to only check this once when creating the signal filter? While you're at it, maybe make `BLACKLIST` a set instead?"}
{"pred": "Why do we need to return a promise here?", "gold": "Please use async/await and try/catch"}
{"pred": "Nit: `nested_flatbuffer` -> `nested_flatbuffer`", "gold": "Like I said, this code looks incorrect. Why is it still looking up the attribute? Why is it getting the type from `nested->type.struct_def` instead of `field.nested_flatbuffer`? Are you running `generate_code.sh`, because I think `nested->type.struct_def` would be null?"}
{"pred": "Why is this needed?", "gold": "Actually, I'm not sure why lines 1663-1668 are here. Looks like Push descriptors aren't used in the test at all. @ziga-lunarg?"}
{"pred": "Shouldn't this be `lowerCamelCase`?", "gold": "Don't we still want to check it it's a keyword?"}
{"pred": "Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "this can just me `link_text` :tomato:"}
{"pred": "use `assert_eq` instead of `assert_eq`", "gold": "What if the Series contains null values?"}
{"pred": "Why was this changed?", "gold": "Every place you see a change like this, it's because `PhysicalLocation` is now its own object, not an array of `PhysicalLocationComponent` objects. The `Uri` is the key into the `FileInfo` dictionary."}
{"pred": "why did you change this?", "gold": "Like in atss_head"}
{"pred": "Why do we need to do this in a loop? Can't we just do `feePerByte *= pool.expFeeFactor`?", "gold": "nit : I think it would be better to have the multiplier being calculated along with `pool.numPendingWholeBlocks`, so that we could always multiply the feePerByte with that multiplier. Not only that it would be faster, but it would also have constant time. btw - Correct me if I'm wrong, but with this change, you're practically rolling back your previous change while making it `pool.expFeeFactor` adjustable, right ?"}
{"pred": "Extra empty line detected at class body beginning.", "gold": "Is there a reason we _wouldn't_ want to do this? A bit of a security hole :grimacing:"}
{"pred": "Why do we need this class?", "gold": "Please add a copyright notice to all new files. Is there a tool to check and auto update copyright notices?"}
{"pred": "Shouldn't this be `E-mail`?", "gold": "A new translation dump should be made after this change (removing the \"Email\" message)"}
{"pred": "I don't think you need the `+ ':not([role])'`", "gold": "CI is failing saying `expected [TypeError: null is not an object (evaluating 'implicitNodes(role).map')] to equal null`."}
{"pred": "Why do we need this?", "gold": "@JoviDeCroock I replaced the refs here with simple assignments."}
{"pred": "Why is this exposed for testing?", "gold": "nit: Could we use VisibleForTesting annotation here?"}
{"pred": "I don't think you need the `.joins(:topic)` here.", "gold": "Can we create some post records to assert sort_by"}
{"pred": "Why is this needed?", "gold": "is this necessary?"}
{"pred": "Why do we need this?", "gold": "What is the purpose of this? It seems like it is used to indicate whether there is a filter on a span. But what filter? Could there eventually be multiple filters per span? Just not understanding."}
{"pred": "I don't think this is used anywhere.", "gold": "using a certain type instead of using string directly."}
{"pred": "I don't think this change is necessary.", "gold": "fix trailing ,"}
{"pred": "`:mlat => \"#{trace.latitude}\", :mlon => \"#{trace.longitude}\"`", "gold": "I've fixed it for this change but for future reference there's no point doing string substitution for a single value like that - it will just slow things down. Just use `:mlat => trace.latitude` etc instead."}
{"pred": "Why did you remove this?", "gold": "The form no logger needs validation?"}
{"pred": "`metricsToExport != null && metricsToExport.Metrics != null`", "gold": "there'd be more changes in the area, when we implement \"clean-up\" of aggregators if no new updates. (i think we currently send metricitem to exporters with zero as value)"}
{"pred": "I'm not sure if this is the best way to test this, but I'm not sure how to test it.", "gold": "Usually we only keep the assertions that are relevant to the specification (ie. the test title). For example, the test on the values of id and details is not properly relevant for the spec _collections are isolated by bucket_. I suggest that you only keep the assertions regarding `details` in dedicated tests similar to `test_unknown_collection_raises_404` from `test_views_records.py`, but for each of bucket, group, collection and record in the other `test_views_` files."}
{"pred": "typo: dependant -> dependant", "gold": "The test sources are ok though, you don't need to remove those changes"}
{"pred": "Why do we need to multiply by 2 here?", "gold": "`maxWidth: width * 2,` Potentially, this will be the same as `getImageUrl`: 80px or 500px. I can't verify this - need for normal LiveTV tuner."}
{"pred": "Why do we need to lower case here?", "gold": "Not really related to this issue but should we use fuzzy search here as well (like for apps)?"}
{"pred": "I'm not sure if this is the best way to do this, but I'm not sure what the best way is.", "gold": "isn't the usual capitalization for subcommands force-qr? (don't care too much about it)"}
{"pred": "I think we should keep this as `SUGGESTION` for now.", "gold": "Do you know how many repos have hit this?"}
{"pred": "I think this should be `<p>` instead of `<p>`", "gold": "I'll be interested to see if our gettext rake tasks will pick up on this text to translate"}
{"pred": "Shouldn't this be `hasParam`?", "gold": "I think you need to change line 928 value from 6 to 7 too, since now table will have 7 values"}
{"pred": "`assert f1[:, [\"cat\", \"dog\", \"mouse\"]].to_list() == [[1], [1]]`", "gold": "Does `f0[::-1, :]` mean all the rows taken in a reverse order?"}
{"pred": "I don't think this should be changed.", "gold": "Looks like there are strange characters here."}
{"pred": "Should this be `!= \"\"`?", "gold": "It is better to have a check to ensure the format is valid."}
{"pred": "Why do we need this?", "gold": "How about `nextAlreadyDefined` variable name in method signature?"}
{"pred": "Why this change?", "gold": "In older SDK versions the data converter was called 3 times but now it is 2. This is because logic was changed deep in the interceptor chains on when values are serialized and encoded and such. Previously we invoked the data converter on results _even if there was an error_ (and most of the time they were nil). Now we don't do such a thing, resulting in fewer calls."}
{"pred": "Why do we need this?", "gold": "formatting... can this import go next to the other sources ones?"}
{"pred": "Why did you change the indentation here?", "gold": "I don't understand why anyone would pass 0? If you don't want to attach to an existing process you just wouldn't pass -attach. I would remove that sentence and make 0 an invalid argument."}
{"pred": "Why did you remove this?", "gold": "This change is responsible for #2775"}
{"pred": "nit: `new[] { \"exception_type:CustomException1\" }`", "gold": "Should we add this to the other \"never\" verification in lines 71-73 above, too?"}
{"pred": "Why did you remove the `list`?", "gold": "Fixed this since it no longer needed to be switched from a generator to a list, this was missed when I cleaned up the dataset code in an earlier PR."}
{"pred": "nit: `LOG.finest(\"Adding {} {} times\", caps, info.getMaximumSimultaneousSessions());`", "gold": "This is an informational message that allows someone to read the console output and understand how the grid node is configured. Please leave."}
{"pred": "Layout/EmptyLinesAroundMethodBody: Extra empty line detected at method body beginning.", "gold": "Can we convert this to an arel as below ContributorFact .joins(:project).where(projects: { id: project_id}) .where('name_id = ? or name_id in (?)', name_id, AnalysisAlias.select(:preferred_name_id) .joins(:project) .where(commit_name_id: name_id) )"}
{"pred": "Why do we need this?", "gold": "Does this cause issues if you have lots of load on the machine? Having a global variable for this seems like a bad idea IMO."}
{"pred": "Why are we swallowing the exception here?", "gold": "We probably don't need to print the msg with e.getMessage(). It will be printed by the logger since we are passing the exception as a parameter."}
{"pred": "Why was this removed?", "gold": "Can we get a test with multiple directories as per the initial example?"}
{"pred": "Please use spaces around the `<` operator.", "gold": "I assume this is because you were seeing cases where left was a negative number? When?"}
{"pred": "Why is this header needed?", "gold": "this is undoing recent changes for increased consistency of include file statements. please restore to the original."}
{"pred": "Why is this change needed?", "gold": "If these are applied in order, should `LambdaMethoReference` come after `OptionalOrElseMethodInvocation`"}
{"pred": ">IList<FileData> filesDictionary [](start = 28, length = 36) This is a breaking change. Please revert this change. #Resolved", "gold": "Why this rename?"}
{"pred": "This should be `<=`, not `<`.", "gold": "Why do we do this check here? `sys.version_info` cannot be less than 3.3 as pylint does not support older versions. I think we should avoid popping `__main__` altogether."}
{"pred": "Please remove this line.", "gold": "This can be removed too."}
{"pred": "Shouldn't this be `MakeMdID(head.MD)`?", "gold": "I'm a little worried about the new extra calls to `MakeMdId`, since in most local-server KBFS profiles, hashing is the biggest CPU user, and not re-using the value calculated by the client will result in even more hashing. That said, I understand why you did it this way, and I don't have a concrete suggestion on how to make it better. Just something to keep in mind; plus it might be worth comparing the test speed before and after this change to make sure it didn't slow things down too much."}
{"pred": "Do we still need `lodash` here?", "gold": "`lodash` shouldn't be grouped under WordPress dependencies"}
{"pred": "Why are you changing the copyright?", "gold": "Just curious, but how did you work out that Aleksey Sadovoy, Peter Vgner and Joseph Lee contributed to this file? Did you look at the repository history?"}
{"pred": "Why do we need to call `Dispose` here?", "gold": "You could call OnStopRude() directly here to do the same thing."}
{"pred": "I'm not sure if this is the right place to do this. I think the right place to do this would be in the `ListUnregisteredApplications` function.", "gold": "This TODO and this `sort` depend on how the UI looks like. So I think we should fix the UI before continuing on updating this web API. For example, in case the UI flow is as below, this API will receive a Piped ID and then return just ones belonging to that Piped. - User picks where they want to deploy first (select one Piped and one cloud provider) - Then API will be called to show the list of suggested apps for that Piped and cloud provider - User picks app they want to create"}
{"pred": "`mayactl snapshot revert <volname> <snapname>`", "gold": "This command rolls back the volume data to the specified snapshot. Once the roll back to snapshot is successful, all the data changes made after the snapshot was taken will be post. This command should be used cautiously and only when there is an issue with the current state of the data."}
{"pred": "nit: `taskId := strings.TrimSuffix(*testTask.TaskArn, \"/\")`", "gold": "should this be a separate/new functional test?"}
{"pred": "typo: colleciton -> column", "gold": "Can these also assert at least the length of arrays returned and ideally contents?"}
{"pred": "`getattr(task, 'param_visibilities', None)` can be removed.", "gold": "`hasattr(task, 'param_visibilities')` is more concise with the same effect, but either one works."}
{"pred": "\"Attributes given to a function call have are being passed in a different order\"", "gold": "I would hedge this a little, maybe `Positional arguments appear to be out of order`. After all, it's just a guess."}
{"pred": "Why do we need this change?", "gold": "you can directly call show() method from **SnackBarHandler.show(coordinatorLayout, getString(no_account_signed_in)).show();** no need to create an extra object and then call the show method."}
{"pred": "nit: `std::string hostsString(hosts.size() - 2);`", "gold": "concatHosts may be a better func name to explain this?"}
{"pred": "Should this be `always('')`?", "gold": "A function that returns empty string."}
{"pred": "Shouldn't this be `packageName != \"\" || state.Config.FeatureFlags.RemovePleasings`?", "gold": "If it's not the root package, or if it is the root package but we don't add the psudo :pleasings rule there, print an error."}
{"pred": "Why is this needed?", "gold": "can delete this line"}
{"pred": "Shouldn't this be `m_comm->get_num_models() > 1`?", "gold": "Will it still be an issue if all the models use the same data set?"}
{"pred": "`fail ParamRecordNotFound unless @parent`", "gold": "How does this controller_name method work? Does this method grab the context of the url request? Wouldn't this always result in 'widget'?"}
{"pred": "This should be `op->name`, not `%s`.", "gold": "Let's get rid of these for the final version and if you get rid of the macro I left last time I'd be more than grateful."}
{"pred": "\"Delete mark denotes whether a row is deleted or not\"", "gold": "Instead of `DELETE_MARK`, how about `IS_DELETED`? I don't think that \"mark\" is clear enough to describe what this is. Similarly, I think the docs should be \"Whether the row has been deleted\". There's no need to include \"delete mark\" because that's identifying something that is not defined (this column is _deleted and \"mark\" is not introduced), and \"or not\" is unnecessary because it is implied by \"whether\"."}
{"pred": "I don't think this is the right place for this function. It should be in the `clang` module.", "gold": "Does it make sense to have this very thin wrapper that only calls `create_dependencies`? And maybe having `create_dependencies` return a set would be better than convert here?"}
{"pred": "(style) line over 80 characters", "gold": "How about renaming `escape` to `use_path_normalized` or something to better indicate that it is a selection between `path` and `path_normalized`?"}
{"pred": "nit: `NULL_ACCOUNTABLE` would be a better name.", "gold": "Interface members are always `static final` right?"}
{"pred": "`// +build nintendoswitch`", "gold": "It seems to me that this could be in the runtime_nintendoswitch.go file, or is there a reason to keep it separate?"}
{"pred": "Why is this removed?", "gold": "I was actually looking at this code over the weekend and wondering whether we were trying to link here. I assume it's been cargo culted from something else in the compiler."}
{"pred": "I don't think you need the `raw` here.", "gold": "nice extraction of the form for being used at new/edit. We should have more of these"}
{"pred": "Why did you change this?", "gold": "Are the coefficients the actual bug fix?"}
{"pred": "Shouldn't this be `e.pgcode in [...]`?", "gold": "Why are the error code options in a list and not a tuple?"}
{"pred": "Why was this changed?", "gold": "Need alignment with the preceding line."}
{"pred": "Why do we need this change?", "gold": "Changing from a static method to a constant is inessential to Type Transactions and has a long reach, adding many unneeded files and diff lines."}
{"pred": "Why is this needed?", "gold": "There is one caveat: javaslang.collection.Iterator is Iterable. With Iterator it does not work. Let's revert this line. Does this happen elsewhere, too? I will double-check the code..."}
{"pred": "`add_thousands_sep` -> `add_decimal_sep`", "gold": "Why change the default value of `is_diff`?"}
{"pred": "I don't think we need the `tenacity` dependency here.", "gold": "I think tacking on `,<7` would be a wise precaution in case of future incompatible changes in tenacity."}
{"pred": "Why did you remove the return type?", "gold": "I don't think is necessary to remove the return type"}
{"pred": "Shouldn't this be `clientSecret = forceApp.decryptWithPasscode(encClientSecret, passcodeHash);`?", "gold": "Also added this check, since client secret is not used except in the IP bypass scenario."}
{"pred": "Why do we need to clear the profile ID here?", "gold": "That's unrelated, but shouldn't there also be a call to `setInternalWebPropertyID`, making it empty, for this case? Otherwise, when selecting to create a new property, any previous internal web property ID will still be in state, potentially causing problems."}
{"pred": "Why was this removed?", "gold": "I wonder if we should trigger a PHP error and ensure it ends up in the log?"}
{"pred": "This test is off, verify the behavior", "gold": "The `move_topic` action be a `post` request since it changes the state of the object."}
{"pred": "Why do we need this?", "gold": "Should we just return a non-nil metadata from `Test`?"}
{"pred": "Extra empty line detected at class body end.", "gold": "Noticing this is really just the same as cart_notification_email. Would be nice to be able to view custom templates. I may update this with some set up that will make viewing specific custom emails easily."}
{"pred": "Please don't use wildcard imports.", "gold": "please don't use wildcard imports"}
{"pred": "Why do we need this?", "gold": "Should we even fix this test? IMO it should be refactored to check that values are recalculated after `setSourceDataAtCell` and `setSourceDataAtRowProp` calls. This will be the correct way to alter the data since now and we're not testing this use case."}
{"pred": "Why did you remove this?", "gold": "I'm not sure if this is standard practice, but I would prefer to leave this initialization here, if only to show that such a variable exists in this file (instead of inferring it from the globals). It can also cause weird issues if, for example, `init` isn't run before other methods."}
{"pred": "Shouldn't this be an assert instead of a throw?", "gold": "This isn't how you throw an exception in C++. I'd suggest you take a look elsewhere in the RDKit C++ codebase and see how ValueError exceptions are thrown. Hint: there's a function called `throw_value_error()` that you may find useful."}
{"pred": "Shouldn't this be `tx_begin_write`?", "gold": "Was changing this to a write transaction required?"}
{"pred": "Shouldn't this be `[]byte`?", "gold": "nit: I think \"They\"?"}
{"pred": "Shouldn't this be `ValidatorRegistryLimit`?", "gold": "is it a result of some multiplication or some other meaningful number? would be nice to display as a power of something or the mult"}
{"pred": "I don't think we need this anymore, right?", "gold": "I think this class is a good example of where Payload could significantly improve things. I'm okay with this class as it stands. If you merge this in, I'd like to have a go at refactoring it after introducing Payload."}
{"pred": "W1618 import missing `from __future__ import absolute_import`", "gold": "Just a small tip: I think you don't need to include pytest here. You can run tests using: - `pytest tests/path/to/my/test` under the virtualenv to run a single test. - `pytest tests/` under the virtualenv to run all the tests. - `make tests` to run all the tests for all python versions, like travis do. Hope this helps! :)"}
{"pred": "I don't think this is the right place for this function. It should be in the `util` module.", "gold": "Might be worth sorting the replacement items so this is deterministic."}
{"pred": "nit: `ClusterScoped means control chaos object in cluster level(all namespace)`", "gold": "Should we set the default `TargetNamespace ` to `chaos-testing`? I noticed that the installation script defaults to chaos-testing."}
{"pred": "Why was this removed?", "gold": "Why was this `Task.Yield` removed? It was added in purpose."}
{"pred": "Why do we need `defaultResourceNameTreatment` and `fieldNamePatterns` and `resourceNameConfigs`?", "gold": "You'll also want to do this below, for the `optionalFieldConfigs`. See `GapicMethodConfig.java:180`."}
{"pred": "Shouldn't this be `ectx()->session()`?", "gold": "We'd better use \"spaceId\" as variable name here. Because i can't figure out the really type for \"space\" at the first glimpse due to \"auto\" used."}
{"pred": "Should this be `packages/libsqreen.1.1.2.2`?", "gold": "I assume we have a package reference somewhere that pulls down the nuget package?"}
{"pred": "Why do we need this change?", "gold": "But why introduce publish on `accConnsEventSubjNew` subject if we never subscribe on that subject. What is the plan then? Replace subscription on \"old\" with \"new\" at one point? Not sure about all that.."}
{"pred": "Why do we need this change?", "gold": "can we use `nullptr` for consistency?"}
{"pred": "Why do we need this change?", "gold": "strange, for templating\\EngineBundle it was `\\Symfony\\Bundle\\FrameworkBundle\\`"}
{"pred": "`is_merge_or_booted` -> `is_booted`", "gold": "But if we're on the merge deployment, and the next one is the booted deployment, we'll still be inserting between the merge and booted deployment, right? It seems like we would need e.g. `met_merge` and `met_booted` vars to keep track."}
{"pred": "You can use `axe.utils.tokenList(virtualNode.attr('role'))`", "gold": "Can you put the output of this into data, and list which roles are invalid? Same thing with abstract role. I know that's not strictly part of this PR, but it'd make the messaging about this a bunch better."}
{"pred": "Can we rename this class to `ExpectBFTTransactions`?", "gold": "rename ibftTwo arg to bft"}
{"pred": "Should this be `|| skip_session_tracking?`?", "gold": "Should we go ahead and push `agent_is_crawler?` into the `skip_session_tracking?` method?"}
{"pred": "I don't think this should be an `AttributeError`, it should be an `AttributeError`.", "gold": "How about we raise a warning here and simply change to use self.data_infos = self.load_annotations(self.ann_file)"}
{"pred": "Why did you change the copyright year?", "gold": "Please remove this line to comply with the standard for copyright headers."}
{"pred": "`twoThirds ? validators.Count * 2 / 3 : validators.Count`", "gold": "seems incorrect - for 5 validators it will tell that 3 is enough to seal and you need 4 2/3 * 5 is 3.3"}
{"pred": "nit: import order", "gold": "Nit: please remove unnecessary whitespace changes."}
{"pred": "Why do we need this change?", "gold": "Is this captured in a test?"}
{"pred": "why do we need this?", "gold": "This is used in o.a.l.sandbox.search.LargeNumHitsTopDocsCollector."}
{"pred": "why did you change this?", "gold": "We may also do the same for `schedule_2x.py` and `schedule_20e.py`."}
{"pred": "Use the new Ruby 1.9 hash syntax.", "gold": "Should foreign key here be something like `diary_entry_id`? Or above, in `diary_entry.rb`, it should be `diary_entry_id`?"}
{"pred": "nit: `initiatedChildExecutionsInSession` -> `initiatedChildExecutions`", "gold": "session is a new term. Should we call more like currentCommandBatch or something else?"}
{"pred": "Why is this change needed?", "gold": "Will go fmt before squash."}
{"pred": "Why do we need this?", "gold": "Setting this to `true` means that it will always get merged in. The way merging is done here is that if a value is its zero value (`false` for `bool`), the value is considered unchanged. In order for this to work, you'll need to change this to be a `*bool` type instead."}
{"pred": "Why was this removed?", "gold": "It was decided that blockSignerAddress is not only redundant (use the miner owner public key instead which is already stored), but does not belong in config."}
{"pred": "I don't think this is needed.", "gold": "are we not asking for trouble here by not pinning this? or does 3.* imply all of the draft versions we'd try to validate?"}
{"pred": "Why do we need to change this?", "gold": "No, we want to compare `tm_py` and `tm_cpp` in this test."}
{"pred": "Why do we need this?", "gold": "Let me know if we'd rather have this as an env variable."}
{"pred": "I think this should be `auth-delegator:%s:%s`", "gold": "question: what is happening here?"}
{"pred": "abstract protected <T> Set<T> emptyWithNull();", "gold": "\\[Checkstyle\\] ERROR: 'protected' modifier out of order with the JLS suggestions\\."}
{"pred": "Why do we need this?", "gold": "Can we use EJSON from bson here? and in doing so avoid bringing in the deprecated `mongodb-extjson` lib `const { EJSON } = require('bson')`"}
{"pred": "Why was this removed?", "gold": "So this parameter is now deprecated?"}
{"pred": "#endif // HAVE_RSEQ", "gold": "Actually, it looks like HAVE_RSEQ is only used to determine whether the rseq.h header is around, which then only determines whether the regression test is built: it does not affect whether the core handles an application using rseq. The core rseq mangling code and all the code in rseq_linux.c is always enabled. I believe the idea is that we want DR built on one machine to work on as many others as possible, rather than requiring a custom build for every variant of kernel feature or whatnot. What is the top-level problem being solved here? If it requires disabling or enabling the core handling rseq, probably a separate option should be put in place and maybe HAVE_RSEQ renamed to make it clearer what its consequences are."}
{"pred": "File is not `goimports`-ed (from `goimports`)", "gold": "I don't see a corresponding call to freeSelectorSet... am I missing something?"}
{"pred": "Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.", "gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping."}
{"pred": "Shouldn't this be DatabaseStatementTypeKey?", "gold": "Is this part of spec?"}
{"pred": "I don't understand why we need to wait for dynamo_thread_init to be called before dynamo_thread_init is called.", "gold": "Hmm, do we need to do this for Windows too? It won't have this private loader TLS issue but it will run DR code in a separate thread before DR init is fully done which I think violates some assumptions. For Windows we would move this wait from win32/os.c to win32/callback.s intercept_new_thread where it checks whether it's a client thread right before calling dynamo_thread_init. If you do not want to deal with Windows you could bail on my suggestion and leave the issue open (or maybe file a new issue) for Windows, or if you want to put the suggested core/win32/ change in place and your new test passes on Appveyor we could then claim to have fully solved this related issue too for all platforms."}
{"pred": "nit: `return attributes[-1] if attributes else None`", "gold": "We can remove this function and use `lambda_function_name(..)` in this file instead."}
{"pred": "`applicationVersion` can be `\"\"`", "gold": "nitpick: `ApplicationVersion` could be `AppVersion`. It's smaller but gives the same understanding for purposes of the field."}
{"pred": "Why do we need this?", "gold": "nit: maybe prefer `resp = &workflowservice.PollWorkflowTaskQueueResponse{}` over adding another function exit points especially for non-error cases?"}
{"pred": "This should be `client_options.merge(read: {mode: client_options[:read]})`", "gold": "Do we specifically need to keep the read preference as a symbol for use elsewhere? If not, I think it would be cleaner to just modify the options before caching them in the `client_options` method so that we don't do this check every time. If we do need it a a symbol elsewhere, I'd suggest either putting `return @client if @client` at the top of the method (and changing the assignment below from `||=` to `=`) or moving this within the parenthetical block in the last assignment so that we don't repeat this work."}
{"pred": "This should be `preferredMimeType: 'image/png'`", "gold": "Since this is for video only, should it be called `preferredVideoMimeType`? If we add it for pictures later, it will likely need to be a different option."}
{"pred": "These should be moved to the header.", "gold": "That doesn't make sense. LayoutEntry doesn't match the generator concept."}
{"pred": "`Load Balanced Web App`", "gold": "I think the customer visible strings should be \"Service\" instead of \"Svc\" to make it obvious to them"}
{"pred": "Why do we need this change?", "gold": "Explain why this property is necessary?"}
{"pred": "Why do we need to classify actions here?", "gold": "It should accept executions as the input"}
{"pred": "`assert batch_size == 1, ...`", "gold": "Is this limitation necessary?"}
{"pred": "Why do we need this?", "gold": ":question: Should there be validation to ensure that only one of these attributes is used?"}
{"pred": "Why did you remove the service locator?", "gold": "I would recommend using Psr\\Container\\ContainerInterface here instead of Interop\\Container\\ContainerInterface; both currently work, but the Interop version is deprecated and will eventually be removed, so using the Psr version will save us time in the future."}
{"pred": "Why did this change?", "gold": "This would also change back to /var/www/html/docroot if we go that way."}
{"pred": "Why does this need to be public?", "gold": "Does this need to be public? Can't one of the helper functions below pass the data? If it really needs to be public, could it be write-protected?"}
{"pred": "Why was this removed?", "gold": "Thanks. Now that you've improved this we should just init and expose the StorageAPI on the node, like the other.s"}
{"pred": "nit: `nextPrefix` -> `nextPrefix`", "gold": "it will be better if you can provide some examples"}
{"pred": "Should this be `longRunningOperationReturnType`?", "gold": "\"return type\" and \"response type\" have never really been contrasted before, and it's unclear what their meaning is here. Could you clarify?"}
{"pred": "Why is this needed?", "gold": "Import order has been violated here."}
{"pred": "Why is this being deleted?", "gold": "Are you suggesting deleting the concept of message querying from plumbing (sounds like more trouble than its worth) or suggesting deleting the snapshot based implementation?"}
{"pred": "nit: use this key to set the customized labels for node. You can input customized labels like {\"key1\":\"value1\", \"key2\":\"value2\"}", "gold": "I recommend using StringSliceVarP to resolve the label flag, like `-l key1=value1,key2=value2`. What do you think?"}
{"pred": "Why do we need this method?", "gold": "@Samuell1 Will assigning the same icons array to all the tabs result in, for example, a primary tab called \"Colours\" and secondary tab called \"Colours\" having the same icon?"}
{"pred": "Why do we need this function?", "gold": "A docstring for this function please."}
{"pred": "Why do we need this?", "gold": "heads up @JunTaoLuo"}
{"pred": "Why is this needed?", "gold": ".GetMethod() cannot return null now, correct?"}
{"pred": "Why did you remove volume_up?", "gold": "Same thing here, I think the proper fix is elsewhere."}
{"pred": "Wouldn't it be better to set `step_ = HANDLE_ERROR_AND_DONE;` here?", "gold": "errno is a global variable that might be set by any system library call. It is dangerous to rely on it except right after the system call where it is set. But in this code, it looks like the library call is buried inside ExpLOBInterfaceSelectCursor. It would be safer if the latter function saved errno after whatever system library call it calls, and returns that as an \"out\" parameter, which this code could then check."}
{"pred": "I don't think you need the `if hasattr(self, '_keys')` check.", "gold": "`hasattr` is kinda terrible; just append extra info in the subclass."}
{"pred": "E231 missing whitespace after ','", "gold": "Fair warning, the way that exception block is written won't work in python3 Python 3.2.3 (default, Jun 8 2012, 05:36:09) [GCC 4.7.0 20120507 (Red Hat 4.7.0-5)] on linux2 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. > > > try: > > > ... raise ValueError(\"foo\") > > > ... except ValueError,e: > > > File \"<stdin>\", line 3 > > > except ValueError, e: > > > ^ > > > SyntaxError: invalid syntax"}
{"pred": "Why do we need this?", "gold": "This only updates the metadata and not the actual thing you are trying to solve for the docker hypervisor."}
{"pred": "Why do we need this package?", "gold": "should this package be internal? don't we want to use it e.g. in go-contrib?"}
{"pred": "Why this change?", "gold": "Just curious, why did you make this change?"}
{"pred": "Why do we need this?", "gold": "Can you handle error cases such as `pd.get_dummies(pdf, prefix={\"A\": \"foo\"})`?"}
{"pred": "I think this should be `ECS_FTEST_FORCE_NET_HOST=1`", "gold": "Where is this environment variable being set?"}
{"pred": "`type(module_class)` is not needed anymore.", "gold": "`module_class ` is already a class and `type(module_class)` always returns `<class 'type'>`"}
{"pred": "Why do we need this?", "gold": "Nit: The lambda can be replaced with a method reference: `SparkOrcWriter::new` I think."}
{"pred": "I think it would be better to use `isinstance(obj, int)` instead of `isinstance(obj, int)`", "gold": "It would be nice to have a docstring that says what range of integer-like objects will be accepted, as well as what the int_like argument is meant for."}
{"pred": "Should this be `create_licenses_view`?", "gold": "How do we manage updates to this view down the road?"}
{"pred": "import graphql.schema.Query;", "gold": "We can revert this to reduce the diff of the PR."}
{"pred": "nit: can we use `assertThrows` here?", "gold": "I think we should refactor or drop this test, as it is not testing the points format now, but IndexingChain/FieldsInfos' logic. Maybe we could rename the test `testMergeMissing` and configure the first segment to not have the `id` field at all."}
{"pred": "Why is this being removed?", "gold": "not sure I follow why all this goes away?"}
{"pred": "I think this should be `:insert-text {clipboard}`.", "gold": "Is this `{clipboard}` or `{primary}`, as the deprecation message for `:paste-primary` says?"}
{"pred": "Why do we need a separate flag for this?", "gold": "Human unreadable. IMHO user should input MYST value: 0.0006 @chompomonim, opinions?"}
{"pred": "Why is this removed?", "gold": "May be you could elaborate on why you removed this? I see some of this logic has been moved to ia2Web, but couldn't there be cases outside ia2Web (i.e. UIA) in which case ROLE_TABLEROW and ROLE_TABLECOLUMN are mapped to objects, in which case these objects will be of presentation type content erroneously?"}
{"pred": "`playerTradeItem` and `tradePartnerItem` can be const.", "gold": "This is not consistent. Either rename the first to `tradePlayerItem` (which is ugly) or the second to `partnerTradeItem` (:+1:)"}
{"pred": "Why is this needed?", "gold": "is there a reason we don't want to gx this dependency?"}
{"pred": "I don't think this function is used anywhere.", "gold": "I'd suggest to add \"ATI \" and \"Intel(R) \" to this list"}
{"pred": "`foreach ($missingPlugins as $plugin) {`", "gold": "This is using a different lang key, we should switch it to using the new key and remove the old key if it is no longer used."}
{"pred": "Can we remove this line?", "gold": "shouldn't this work? nodesRegex = regexp.MustCompile(api.SpecNodes + \"=(('[0-9A-Za-z,_-]+')|([0-9A-Za-z_-]+)),?\")"}
{"pred": "`return unless account.new_record?`", "gold": "You mentioned this change was prompted because the `before_create` action was actually a defect. This will be done only for a new record; why is `before_validation`, which will be called repeatedly as accounts get updated and saved, correct whereas `before_create` is not? It looks like one would want to assign and activation code, etc., only once."}
{"pred": "Should this be a `Log.Warning`?", "gold": "What's the rationale for a default setting to not use a GlobalSamplingRate of 1? I don't know much about the sampling rate stuff"}
{"pred": "I think this should be `echo \"/cygdrive/c/Program Files (x86)\"`", "gold": "Don't we know if it's 64 by this point? Do we have to test for the directory on every call, or can't we just split the value based on the platform?"}
{"pred": "I don't think we need the `async` here.", "gold": "It's not async"}
{"pred": "nit: `(exporterOptions, metricReaderOptions)`", "gold": "Maybe we could add some use of `exporterOptions` in this example, otherwise the proper code would replace this variable name with an underscore?"}
{"pred": "`$everykey` -> `$everyKey`", "gold": "Maybe would be better to rename it to \"onEveryKey\" or \"fireOnEveryKey\"."}
{"pred": "Shouldn't this method be renamed to `isPreviewAllowed`?", "gold": "if we're switching to calling FileDownloadHelper, we can just call that directly from the xhtml (see line 357 for example) and then remove this method completely. This is because the other thing it does is check PrivateURLUser, but the FileDownloadHelper method already does that. (and while we're at it, we can remove the method from FileUtil as this is the only place that method is called)"}
{"pred": "Why did you remove this check?", "gold": "is `fullName` still required as a parameter?"}
{"pred": "Why did you change this to finest?", "gold": "This informational message is important to users. Please leave."}
{"pred": "Why is this removed?", "gold": "Why do we want to remove this one? Are we planning to substitute it?"}
{"pred": "Why is this needed?", "gold": "We may create an issue to track this so we don't forget?"}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.", "gold": "This file has the executable bit set."}
{"pred": "Should this be `db.capacity = defaultCapacity`?", "gold": "Improve the formatting of the message `.Infof(\"setting db capacity to: %v\", db.capacity)` There is a space before `:` and this way it is easier to see the formatting."}
{"pred": "why do you need a lock here?", "gold": "This lock cannot be released here, as it is protecting m_RTPSParticipants and the participant reference."}
{"pred": "Why do we need this?", "gold": "we'll need this in `_findAndModify` too"}
{"pred": "Shouldn't this be `bundle.getString(DB_NAME)`?", "gold": "This is the fix for the crash. The function to create the intent to launch this activity requires `dbName`, so it has to be set to `null`. In such cases, the value for `dbName` will be set to `null` and cause issues throughout this activity. This adds a default value if the explicitly assigned value in `null`."}
{"pred": "Why do we need this?", "gold": "Shouldn't we also trigger vision update here, so that if someone has caret highlighting enabled the correct character is highlighted?"}
{"pred": "Why do we need the local package name here?", "gold": "Woah, how does this change, which includes semicolons, result in the baseline change? Are the semicolon chars just part of the internal representation of the import type?"}
{"pred": "Why this change?", "gold": "Can't you just use runnvda.bat here?"}
{"pred": "Why is this being removed?", "gold": "these definitions of UNUSED aren't the same as the one you imported, so callers should be fixed (if any)"}
{"pred": "Why do we need this?", "gold": "is type a free string too?"}
{"pred": "Why do we need to wrap the model?", "gold": "here input could be a normal function or an instance of torch.nn.Module."}
{"pred": "I think this should be `nix-instantiate --eval`", "gold": "Example output: \"19.03.git.a7f4a860d0c\" At some point `nixpkgsVersion` was renamed to `version` since someone may use an old channel we fallback to `nixpkgsVersion` for backwards compatibility."}
{"pred": "Why did you remove this?", "gold": "Class import is therefore redundant I guess :)"}
{"pred": "errorNodeCreationIPFailure -> errorNodeCreationIPFailure", "gold": "If parsing fails, don't act as no IP specified. Error out."}
{"pred": "nit: unnecessary semicolon", "gold": "... here the semicolon wanted to run away from the enum ;)"}
{"pred": "Why do we need to change the name?", "gold": "Note that this is in the context of SolrCloud, so \"secondary\" doesn't apply and should be instead follower"}
{"pred": "Use the new Ruby 1.9 hash syntax.", "gold": "This one is a query parameter and probably really should be ID and in fact I'm mystified as to how this is working because the controller code definitely wants a number for that parameter so the test framework must be converting it back to an ID as best I can tell."}
{"pred": "Why is this change needed?", "gold": "Need to ensure this is set to TRU for LOB datatype access too not just for hive ."}
{"pred": "`numeric_only` doesn't seem to be used?", "gold": "You're using the Sphinx docstring style here (maybe because it's the default in PyCharm?). Instead, you should use the NumPy style (that you've also used in other places) to be more consistent with the rest of the project."}
{"pred": "Shouldn't this be `ServerAddress.LocalHost`?", "gold": "Don't really need this since the rest of the method will no-op but it's also safe to return early."}
{"pred": "Why is this needed?", "gold": "Don't use relative paths. src directory is already on the include search path"}
{"pred": "Why is this needed?", "gold": "this file can be removed"}
{"pred": "Why is this required?", "gold": "Do we have test cases that name is null?"}
{"pred": "`l` is unused (from `unparam`)", "gold": "in a separate PR, I'll check for a table that is empty/all-null and skip this function call completely."}
{"pred": "Why is this change needed?", "gold": "We really, really want to catch _everything_ here. It is safe to leave `azkabanEventReporter` set to null."}
{"pred": "nit: space after `!==`", "gold": "Can't we add the check here?"}
{"pred": "Shouldn't this be `method in ('POST', 'PUT')`?", "gold": "body is being used here for the first time without every being populated. This will error. To run tests do `./go clean test_py` and that will run the Firefox tests"}
{"pred": "Why is this a pointer?", "gold": "Tell me if you have a better field name for this."}
{"pred": "Why was this changed?", "gold": "FYI, I have a branch I started to improve this. Nuke can read the target frameworks from the project files, so we don't have to do this mess. Ran into some other issues so it didn't take priority"}
{"pred": "Shouldn't this be `bi`?", "gold": "This is just `mol->atomNeightors()`, is it?"}
{"pred": "Why do we need `using` here?", "gold": "This alias is just for a single occurrence. Maybe it ins't necessary?"}
{"pred": "Why did you change this?", "gold": "You can delete this `NONE` case."}
{"pred": "nit: \"as two color attachments with different layouts\"", "gold": "@cnorthrop -- here is a test with a name change. Is this going to affect your internal CI?"}
{"pred": "I think this should be called `sendCommandsForDownloadChromeHeadLess`", "gold": "Nit: `Headless` is one word, not two, and so doesn't need camelcasing in this way."}
{"pred": "continuation line under-indented for visual indent", "gold": "I think this will cause a warning, can you set the default to zero (`0`)?"}
{"pred": "Why do we need the alias here?", "gold": "confusing naming. Identity from \"id\" package :/ why we need alias here? (and in other imports)"}
{"pred": "I don't think you need the `\\n` here.", "gold": "It'd be nice to fix up existing configs with the change - that'd mean adding the option to `RENAMED_OPTIONS` in `config.py` and adding something like `_get_value_transformer({'true': '', 'false': '*'})` to `CHANGED_OPTIONS`. I think I never tried adding an option to both, but it should work."}
{"pred": "`Object.getPrototypeOf(prim) === Object.prototype`", "gold": "Perhaps use the new `.keys()` method here instead?"}
{"pred": "Why was this removed?", "gold": "We don't need this option because plan-preview is comparing between 2 commits, not using the live state."}
{"pred": "Should this be `step_name`?", "gold": "I'm not sure about putting this in the options. I would see it living in an object and then being queried on through a class - a more object oriented, ruby solution."}
{"pred": "Why do we need to change the name of this method?", "gold": "So `Status` returns metrics?"}
{"pred": "Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "Can we make a generic method say, `set_infographic_view` and in that method we can check the 4 values (outside_committers, portfolio_projects, outside_projects, affiliated_committers) and check against params[:action] and params[:view] and then trigger the respective method dynamically as it takes the standard argument(s) for all the four methods. What do you think?"}
{"pred": "Why not just `return o instanceof Date ? (Date) o : o`?", "gold": "Why would this be called to copy a non-Date object?"}
{"pred": "Shouldn't this be `unix.NLA_HDRLEN + 2`?", "gold": "This alignment issue had not appear because no multiple `Boolmsg`s had been serialized at once."}
{"pred": "Why not `BooleanDefaultTrue{Value: DefaultEnabled}`?", "gold": "Why are we not implementing a BooleanDefaultFalse struct and replacing all of these config vars that default to false with that? Are \"default false\" config vars not affected by this bug?"}
{"pred": "Line is too long. [81/80]", "gold": "Replaced this method with a ruby idiomatic setter."}
{"pred": "This should be `tisoftware`.", "gold": "wrong place hehe"}
{"pred": "I'm not sure if this is the best way to do this, but I'm not sure what the best way to do this is.", "gold": "Can this be `test -e /var/run/mysqld/mysqld.sock` instead of `ls`? Using `ls` for noninteractive stuff is a recipe for sadness, IMHO. /cc @tianon"}
{"pred": "Shouldn't this be `dependent: :destroy`?", "gold": "Are these `dependent: destroy` attributes intended to implement cascading deletes? I had assumed they were added because of the `paranoia` gem, but since that is no longer part of this PR, are they here as a best practice?"}
{"pred": "Why do we need to destroy the tunnel here?", "gold": "This approach would work only if there's a guarantee that the stream does not get freed before `establish_tunnel` is called, even though it _may_ enter CLOSE_WAIT state (at which point `stream->tunnel` is set to NULL). I do not think that assumption holds. Hence the alternate approach."}
{"pred": "Why not `\\n`?", "gold": "Did you mean to remove the periods here while newly adding to other locations?"}
{"pred": "Why this change?", "gold": "the check can now be `if newLen < 0`"}
{"pred": "nit: remove empty line", "gold": "If we're going to clean up this package, can we also remove those two `_` imports that appear to serve no purpose? (FWIW, they're also in the manager package too...)"}
{"pred": "Shouldn't this be `if (mmffArom)`?", "gold": "Won't this leak like a sieve? The caller can't delete this as one is a unique_ptr and one is not."}
{"pred": "Why do we need to check if `data.versions[version]` exists?", "gold": "form => from"}
{"pred": "This should be 7.0.0, right?", "gold": "Ok, we can't switch it now, because the properties are a field of the interface Rule - which makes it public API. Maybe we should remove it here in the (Java) API in 7.0.0? The only API left would be, when using a rule and setting the properties in the ruleset xml. There the type doesn't matter - since the String is then automatically converted into a Pattern."}
{"pred": "Why do we need this change?", "gold": "Pass in null here, instead of a value? Maaaaybe we should add an overload for `GapicProductConfig.create` that matches the original signature and passes through null? I don't feel strongly about that though, so happy to leave asis if you prefer."}
{"pred": "Why not use `word.chars.substring(word.offset, breakPos)`?", "gold": "Include all compounds parts from the very beginning for the case check to work later"}
{"pred": "Shouldn't this be `unix://`?", "gold": "if the user specifies a url scheme on the cli this is going to cause problems, no?"}
{"pred": "What's the reason for this change?", "gold": "How about that `scaleFactor`?"}
{"pred": "Why not use `Type::getInt`?", "gold": "`assert(is_int($result));` would be preferable I think, even if we know it can't ever be false"}
{"pred": "`$quantifiedProducts` -> `$quantifiedProducts`", "gold": "I'm unfortunately unable to review whether you've changed everything that used to use cartIds"}
{"pred": "Please don't change unrelated things.", "gold": "Please don't touch unrelated files to keep the git history clean"}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.", "gold": "Per our style guide, I don't think we indent `private` keyword. Would you mind fixing that?"}
{"pred": "Why did this change?", "gold": "Will this change the input `heatmap`? Is this behavior expected or not?"}
{"pred": "Why do we need this change?", "gold": "If I'm reading this right, this changes the parameter name so it'd constitute a breaking change :cold_sweat: Are we missing a test that should have been failing up until now?"}
{"pred": "Why did you remove this file?", "gold": "Need copyright/license info."}
{"pred": "Why is this removed?", "gold": "Is this `info log` necessary? If it is not useful, can you consider deleting it?"}
{"pred": "Why did this change?", "gold": "Unrelated change, but seems to be the correct purpose of the test."}
{"pred": "Why do we need this?", "gold": "Should it be `'uppy-input-`?"}
{"pred": "Why is this change needed?", "gold": "what's the reasoning to keep these always true or dead-code blocks?"}
{"pred": "Expected indentation of 2 spaces but found 4. (indent)", "gold": "It would be a good practice to do `.off('click', '.tab-buttons > div').on('click', '.tab-buttons > div', function() {`"}
{"pred": "@jakexks / code reviewer: should this be enabled or disabled based on discovering the gateway api or a flag?", "gold": "I suggest that we rely on `--controllers='*,gateway-shim'` for now, and we can then move from `--controllers='*,gateway-shim'` to automatically enabling the Gateway API support on startup using the discovery API in 1.6 or 1.7, what do you think? Note that the logic I wrote in e5436df521015057e77de3fe02c174ea8a863b93 should also use this `GatewaySolverEnabled` flag I think."}
{"pred": "Why do we need to instantiate the algorithm factory here?", "gold": "I moved the instantiation of the signature algorithm here, to execute it before the native libraries are configured. Otherwise the wrong signature algorithm could be configured in a future release when more than one is supported in Besu."}
{"pred": "Why is this needed?", "gold": "Why remove this?"}
{"pred": "nit: `this.ieService_ = service;`", "gold": "`this.ieService_` should be initialized to null in the constructor."}
{"pred": "This should be `unique_ptr<ebpf::BPF> bpf(new ebpf::BPF());`", "gold": "Why not `ebpf::BPF bpf;`? Assuming that the instance is not huge, I do not think there is a good reason to use a pointer when it can be retained as a value."}
{"pred": "This import should be grouped with the rest of the standard library imports.", "gold": "nit: move to last block"}
{"pred": "This should be moved to `pkg/common/logger`", "gold": "nit: I'm under the impression that `log` is the convention for golang, and that the `er` suffix is usually reserved for interfaces"}
{"pred": "Why is this nullable?", "gold": "Why is IsolationLevel fully qualified? System.Data is already in scope? What do I miss?"}
{"pred": "Why is this removed?", "gold": "do we still need SanityCheck()? seems they all return nil now"}
{"pred": "Why is this removed?", "gold": "What I am missing in this PR, and I think we discussed that on the weekly meeting, is that all the code snippets that advise using `loadData` should be changed to one of the two new methods. Otherwise we send confusing mixed signals by promoting `loadData` everywhere in the guides. `loadData` is not deprecated, but is legacy."}
{"pred": "Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "Line is too long. [100/80]"}
{"pred": "I think it would be better to use `p.P(\"no parent snapshot found, will read all files\\n\")`", "gold": "I suggest \"no parent snapshot found, will read all data\\n\"."}
{"pred": "Why did you remove this line?", "gold": "`LogManager.ThrowExceptions = true` has very special meaning when unit-testing. Why the change to `LogFactory.ThrowExceptions = true` and enabling after the config-load?"}
{"pred": "Why did you remove the quotes?", "gold": "It should be return \"''\"; I will fix it"}
{"pred": "You can use `entry.getValue()` here.", "gold": "This is wrong, should be `entry.getValue()`"}
{"pred": "Why is this change needed?", "gold": "nit: why can't we combine the two add operations into one so that we add `{\"nameCertificates\": []}` to `/spec/servingCerts` ?"}
{"pred": "Why is this needed?", "gold": "These whitespace only changes make it very difficult to review this change. Is there any way you could separate just the code changes into one PR and the whitespace only fixes into another? Or are they sufficiently merged together at this point? Chrome is having a real tough time rendering these large diffs."}
{"pred": "Why is this needed?", "gold": "why does this suddenly need a config ref"}
{"pred": "I'm not sure if this is the best way to do this, but I'm not sure if there's a better way to do this.", "gold": "Unfortunately, I couldn't find a way to get karma to conditionally load stuff from a CDN, so I had to include it."}
{"pred": "Why do we need this?", "gold": "Those functions are not currently wrapped, so I don't think it is necessary to exclude them (at least for now)."}
{"pred": "Why this change?", "gold": "Nit: since this is now a private function rather than a variable, would it make sense to move it after the public functions in this file for readability?"}
{"pred": "QColor this_col(col.r, int(255.0 * col.g), int(255.0 * col.b));", "gold": "I'm assuming that MolDraw2Qt drops the alpha channel?"}
{"pred": "Why is this needed?", "gold": "the code looks good to me, but I just wonder if it is a real use case: (de)serializing a single integer."}
{"pred": "Please remove these print statements.", "gold": "Pls remove the print statements. Also, you do not need the if statement."}
{"pred": "I think this should be `CDATA` instead of `CDATA`", "gold": "Thanks for this fix @eltone !   Wondering if we should make this a bit more resilient to upstream changes, e.g., via a regex replacement. Not critical, though - we can pick that up in a follow-up PR.. Thanks"}
{"pred": "Why is this needed?", "gold": "Should this be instead a configurable option?"}
{"pred": "I don't think we need to check if the source snapshot exists here. If the source snapshot doesn't exist, we should fallback to pd-standard.", "gold": "unit test needs an update?"}
{"pred": "Why was this removed?", "gold": "I realised that this is not used anywhere"}
{"pred": "Why is this needed?", "gold": "why add the default branch? this may cause there exist multiple configWatchers that notify the eventsCh at the same time?"}
{"pred": "Shouldn't this be `sendZlp(0)`?", "gold": "This line appears to have caused the regression. What is it supposed to be doing?"}
{"pred": "`attr_value['string'] is not None` -> `attr_value['string'] is not None`", "gold": "# `attr_value['string'] is not None` probably not required as `attr_value['string'] == value` check is already being done"}
{"pred": "Why did you remove this?", "gold": "@alanwest I noticed this while changing the code. I think we _might_ run into some race condition - if a scraper happens to hit the HTTP server before we could add the reader, what would happen (I guess we will hit exception, which turns into HTTP 500)? I haven't looked into the HTTP server logic. I think it _might_ be OKAY. A better version could be - we only start the HTTP server once the exporter/reader are fully ready and both are hooked up to the provider."}
{"pred": "Why do we need to wait 5 seconds here?", "gold": "As for Owin, I think we should exclude this URL in `IsNotServerLifeCheck` too?"}
{"pred": "Should this be `IHttpClientFactory`?", "gold": "Does it make sense to just fold these options back into the exporter options? My thinking is that this option is unlike the processor/metric reader options in that it actually is about the exporter itself."}
{"pred": "Why did you remove the `:seconds` here?", "gold": "here is `:seconds` missing"}
{"pred": "func3 = lambda arg=arg: arg * arg", "gold": "change of name is not needed"}
{"pred": "why are these tests disabled?", "gold": "Hm .. so this case doesn't work anymore?"}
{"pred": "I don't think this is needed anymore.", "gold": "Please indent this so it lines up with the `(`"}
{"pred": "I'm not sure if this is the right place to put this code. I think it would be better to put it in a separate file.", "gold": "We should still register the script. Just not enqueue it."}
{"pred": "Style/RedundantSelf: Redundant self detected.", "gold": "I think this can stay as a method. And we can write our own attribute_change(name) as required."}
{"pred": "Shouldn't this be `layoutId` instead of `viewType`?", "gold": "@alexshikov @Cheesebaron I might be missing something but isn't the viewType parameter here the actual layout resource id? Why would the GetItemLayoutId method need to be called again? On line 127, the exact same method is called except this time passing in the index of the object in the backing data source, which makes sense - the template selector can return the layout id based on the index of the item in the list."}
{"pred": "Why do we need this?", "gold": "Can you change this to use `.format()`?"}
{"pred": "Should this be `&&` instead of `&&`?", "gold": "Maybe the parameter should be consulted higher up the stack so that we only set dropEncap if we're rendering a workload egress chain and the flag is set?"}
{"pred": "Why did you change this?", "gold": "new casing is less ELiTE"}
{"pred": "nit: `return r->impl->renderbuffer_from_image(image);`", "gold": "This leaks EGL/GL implementation details into the generic renderer interface."}
{"pred": "I think this should be `DeployConditionConfigError`", "gold": "Maybe add *key* i.e. `\"The \\\\`deploy.on\\\\` key should be a hash (dictionary).`"}
{"pred": "Shouldn't this be `$status['code']`?", "gold": "its be good also change $code na $id, actual name is misleading and that was probably actual error generator"}
{"pred": "Why do we need to change this?", "gold": "I changed the name of the key, to make deployment easier."}
{"pred": "I think this should be `ECS_DISABLE_SPOT_INSTANCE_DRAINING`", "gold": "isn't this going to be true by default? if yes, then let's have the env var named `ECS_DISABLE_SPOT_INSTANCE_DRAINING` and have default as false."}
{"pred": "F401 're' imported but unused", "gold": "Do you think we might need this anywhere else in HoloViews?"}
{"pred": "Shouldn't this be `session.TranscodingInfo.IsAudioDirect`?", "gold": "@MrTimscampi don't we want to remove this term entirely? Might as well do it now if that's the case."}
{"pred": "Line is too long. [81/80]", "gold": "I have followed the convention of `cp`"}
{"pred": "Shouldn't this be `?string`?", "gold": "The docs say it's `false|null`"}
{"pred": "I don't think we need the `json` tag here.", "gold": "Thinking on it more, I actually really like your idea to rename `type` to `factor`."}
{"pred": "Should this be `Timber.e` instead of `Timber.e`?", "gold": "This error message is redundant. All of this information is included in the stack trace. In general it's a good idea to avoid using method names in error messages. Chances are the method will be renamed at some point, but the string won't be updated accordingly. Then you'll end up with a very confusing error message. I suggest changing the message to: \"Failed to unblock network loads. Missing INTERNET permission?\""}
{"pred": "I don't think you need the r here.", "gold": "Feel free to add your own name while at it."}
{"pred": "`signer` -> `signerAddress`", "gold": "`signer` is a global variable (from `gochecknoglobals`)"}
{"pred": "Extra empty line detected at method body end.", "gold": "shouldn't this be `&& opts[:localize]` (i.e. both nil and false skip localization?)"}
{"pred": "Why is this needed?", "gold": "This can also be removed."}
{"pred": "nit: `const char *ns, const char *target);`", "gold": "Not critical but \"common\" is not that helpful in the commit title. Maybe go with \"libkvs/txn:\" for this one?"}
{"pred": "Shouldn't this be `scrolling.bar.show`?", "gold": "It's been a while, but I just noticed this was wrong: It migrated `True` to `when-searching` (so people with `scrolling.bar = True` suddenly didn't have scrollbars anymore) and `False` to never. Instead, it should migrate `True` to `always` (no behavior change) and `False` to `when-searching` (so people notice the new feature). I fixed this in cc0f5fc6d400e12833ba729049e31d16cf836d53."}
{"pred": "Why do we need to decode here?", "gold": ".decode(sys.getfilesystemencoding()) will be better. Although I think rrdtool should accept bytes.."}
{"pred": "Why do we need this interface?", "gold": "An interface call per header might be more expensive than we want to pay. Do we really need this to be abstracted? I think a parser abstraction makes sense, but it seems to me like a separate abstraction for handling headers (one by one) might be an overkill."}
{"pred": "Why did you remove the null check?", "gold": "Resharper annotations, always +1"}
{"pred": "Why do we need to hide this flag?", "gold": "same here, CryptoSm2 won't be changed once command is compiled"}
{"pred": "Why do we need this?", "gold": "Loading the login page after the certificate has been loaded. Views can only be loaded from UI thread."}
{"pred": "I think this should be `Warnf`", "gold": "Technically it doesn't belong here; let me remove it."}
{"pred": "Why is this change needed?", "gold": "remember to update the hash once the upstream PR is merged  "}
{"pred": "`PushNotificationDecryptor.getInstance()` can be `null`.", "gold": "Sends the incoming message to the decryptor, which will then forward it to the interface once processing is complete."}
{"pred": "Why do we need to remove these?", "gold": "FYI This will go the other way, with nil being the correct value for \"no params\""}
{"pred": "why do we need this?", "gold": "Is this necessary? Are there duplicates in your LibKeyIndex?"}
{"pred": "Why is this needed?", "gold": "Why will the gomock files be regenerated? It seems to be irrelevant"}
{"pred": "Why do we need this channel?", "gold": "I'm very curious about why using buffered-channel. Is there something wrong to use an unbuffered channel with zero capacity?"}
{"pred": "Why is this needed?", "gold": "It seems like you accidentally pulled some unrelated changes to util_test into this."}
{"pred": "Why is this needed?", "gold": "do not toucm NDM please - there will be lots of conflicts"}
{"pred": "Shouldn't this be `val`?", "gold": "This looks legitimate - Would cause a classCastException. But have we ever seen it in the wild?"}
{"pred": "I think this should be `setup-show: False`", "gold": "This looks out of scope for this particular PR."}
{"pred": "nit: `leafFirstPingInterval = time.Second * 2`", "gold": "Don't need () if only one."}
{"pred": "private String mailPort;", "gold": "Why not have mailPort as int since your are already parsing while calling t.connect ?"}
{"pred": "Why this change?", "gold": "In the future, do not remove these trailing commas as they have the purpose of making append-diffs easier to read. :)"}
{"pred": "`$raw = (array) $raw;`", "gold": "Was this added by accident? It doesn't seem related to Syndetics, and I don't think it should be necessary in core VuFind (but maybe it's related to one of your local customizations)."}
{"pred": "struct field AllowedForeignJWTClaims should be AllowedForeignJWTClaims", "gold": "i know the ergonomics are a little nicer with map[string]bool, but I prefer map[string]struct{} for sets for a few reasons: 1 - optimized storage (not very relevant here) 2 - don't have to think about the conditions where the key exists in the map or if the value could somehow be false"}
{"pred": "nit: remove empty line", "gold": "This is very unclear what Server means. We need a better name, maybe ServerExtension?"}
{"pred": "Why was this removed?", "gold": "I wonder if we should trigger a PHP error and ensure it ends up in the log?"}
{"pred": "Why do we need to create a textarea here?", "gold": "Hmmm not sure about this. Is it fine @ar2rsawseen?"}
{"pred": "Why did you change this?", "gold": "Why do you prefer `go` over `run`?"}
{"pred": "Why this change?", "gold": "Unintentional, please remove"}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.", "gold": "What was the reason behind moving this?"}
{"pred": "Shouldn't this be `trace_name = tag.strong(@trace_name)`?", "gold": "Did you mean to put that `join` after the `map` rather than inside it? Also should it be `safe_join` or is interpolating it into an `_html` resource going to have much the same effect>"}
{"pred": "Shouldn't this be `2.2.0`?", "gold": "`Indicates if this Realm has been closed.`?"}
{"pred": "Why did you remove this?", "gold": "how is this change adding corr to Series? Do all the methods that are added to Frame automatically get added to Series?"}
{"pred": "`GetTipSetAndState` -> `GetTipSetStateRoot`", "gold": "Just a heads up for anyone else reviewing this, this logic and all the repetitions of it should be greatly simplified by subsequent work relating to issue #2552."}
{"pred": "Why do we need this?", "gold": "@billwert I have kept the `1000` InvocationsPerIteration, but do note this is very small for the small types."}
{"pred": "Why was this removed?", "gold": "Unrelated whitespace change."}
{"pred": "`std::unique_ptr<rai::transaction> transaction_a = *transaction_p;`", "gold": "Slight formatting issue here. There should be a space after the asterisk."}
{"pred": "`isHidden` is not used in this function.", "gold": "Slight preference for declaring variables inline rather than at the top of the function. That way you can use const for both of these."}
{"pred": "Why do we need this change?", "gold": "this is a duplicate file of the one in demo-schema. please remove this file."}
{"pred": "Why is this flag added here?", "gold": "Nit: unified names between geth and contracts"}
{"pred": "Why do we need to set this to 5?", "gold": "Necessary? Could you just use DefaultBuildState here?"}
{"pred": "Why is this change needed?", "gold": "linked hashmap retains order"}
{"pred": "Why do we need these externs?", "gold": "And the old names for these variables made more sense imo."}
{"pred": "Shouldn't this be `<=`?", "gold": "Are you sure this change is correct?"}
{"pred": "Why did you remove this?", "gold": "The previously linked bug does not apply anymore? If so, this is LGTM!"}
{"pred": "Why this change?", "gold": "Why are we renaming all of the tests?"}
{"pred": "Why do we need to trim spaces here?", "gold": "Instead of having this logic, would it make sense to require *users* to encompass the specified IPv6 address within `[` and `]`? Why the magic handling here?"}
{"pred": "I think it would be better to use `python::bad_any_cast` here.", "gold": "Why not also replace this one with calls to `GetProp<ROMol,T>`?"}
{"pred": "Why this change?", "gold": "Still need to remove trailing spaces on this line"}
{"pred": "Why do we need this interface? Can't we just use `ApexNode`?", "gold": "Please use the `@Experimental` annotation on this"}
{"pred": "I think this should be `recieved`.", "gold": "I found ~10 more instances of this typo. we can fix those in subsequent PRs."}
{"pred": "`metricNamespace` is unused (from `structcheck`)", "gold": "How about making metricNamespace an option, and by default it's the same as `component`? e.g.m Init(component, WithMetricNamespace(\"trigger\"))"}
{"pred": "Shouldn't this be `nextPageTokenName(fieldInfo.name())`?", "gold": "Just checking: no need for case manipulation?"}
{"pred": "`configs` -> `apiConfigs`", "gold": "Same as above, not that descriptive"}
{"pred": "`ibl_unlinked_tgt` -> `ibl_linked_tgt`", "gold": "> i#4670 signl-interrupted special ibl xfer frag: Unlink if signal pending nit: This looks like one of many commits with the text before the colon. nit: On the long side: 56 or 60 chars is what some views show Spelling error."}
{"pred": "Why do we need to cancel the tid here?", "gold": "Should we need to invoke pthread_cancel ?"}
{"pred": "I think this should be `userDomainPrefix + name + \":\" + detail.getName()`", "gold": "this is auto generated file so no changes are allowed here"}
{"pred": "`return node.querySelectorAll(':not(textarea)').length;`", "gold": "All buttons are submit buttons, except if they are `type=reset` or `type=button`. I suggest you do an exclude of those, rather than only include `button[type=submit]`."}
{"pred": "I think this should be 5.2, not 5.20", "gold": "can you please make this multi line, this version is hard to read."}
{"pred": "`typeof xyRatio.x === 'number'`", "gold": "For consistency, it's best to either always use strict equality (`===`) or loose equality (`==`) in `typeof` checks, and to not mix them."}
{"pred": "Extra empty line detected at block body end.", "gold": "Work Orders would never have only one approver, right?"}
{"pred": "Shouldn't this be `COUNTER_1`?", "gold": "`code` is written to the message as a `byte`, so I think it's better to declare it in the enum as `byte` as well to avoid a narrowing primitive conversion from `int` to `byte` in runtime."}
{"pred": "Should this be `metrics.0.values.1`?", "gold": "This is the only \"extra\" change here."}
{"pred": "Why do we need this?", "gold": "Please TODO and link to an issue for changing this."}
{"pred": "Why do we need to disable this?", "gold": "Can we make the script output trailing commas?"}
{"pred": "Should this be `development`?", "gold": "This file should get a file header  "}
{"pred": "Why did you remove this?", "gold": "maybe we need process the os error more safely and friendly when open file failed, because this error is very common when cpu has a high pressure, crash directly is danger."}
{"pred": "Why do we need this?", "gold": "we need to pay attention not to use this flag everywhere."}
{"pred": "Why is this removed?", "gold": "curious about this change, since it is not mentioned in the commit message and now we have `uint8` all over the place"}
{"pred": "Why do we need stamp here?", "gold": "wait, are we not mising `WithStamp` here?"}
{"pred": "Shouldn't this be `stages.Finish`?", "gold": "oh. didn't know we store this stage progress."}
{"pred": "This should be `'\\uE000-\\uF8FF'`.", "gold": "Going with definition from here: > Does Unicode have private-use characters? > A: Yes. There are three ranges of private-use characters in the standard. The main range in the BMP is U+E000..U+F8FF, containing 6,400 private-use characters. That range is often referred to as the Private Use Area (PUA). But there are also two large ranges of supplementary private-use characters, consisting of most of the code points on Planes 15 and 16: U+F0000..U+FFFFD and U+100000..U+10FFFD. Together those ranges allocate another 131,068 private-use characters. Altogether, then, there are 137,468 private-use characters in Unicode. It looks like we are only ignoring ones in BMP and not the supplementary private-use characters. Shouldn't we consider the supplementary ones too?"}
{"pred": "This should be `new Type\\Atomic\\TInt`", "gold": "This change is un-tested and requires testing"}
{"pred": "This should be `param.String(default='default', doc=\"\"\"Whether to render output in Jupyter with the default Jupyter extension or use the jupyter_bokeh ipywidget model.\"\"\")`", "gold": "Should the docstring mention the vscode option?"}
{"pred": "Why do we need the `_gapic.yaml` suffix?", "gold": "ISTM that since `artman` know the \"real\" value of the GAPIC config name, it should pass that value to toolkit, rather than toolkit guessing the name based on a heuristic. Then again, I don't know what this value actually does for Java codegen..."}
{"pred": "Why did you change this?", "gold": "Please back out the import changes in files you haven't touched. I think these happen if you run goimports without having the vendor directory populated"}
{"pred": "Why is this needed?", "gold": "Should this be `ISocketOutput<T> where T : struct`?"}
{"pred": "I think this should be `long sequenceNumber();`", "gold": "In which case will this actually return 0? If there is no snapshot, then there is no `Snapshot` object, right?"}
{"pred": "I think it would be better to use `isinstance(dataset.CLASSES, tuple)` here.", "gold": "This part of code is valuable and necessary. Can we move it to another place for a more clear logic and only check it once? For example, move it to line 133 before delving into each module."}
{"pred": "Why is this being removed?", "gold": "Are we at all worried that changing pins will cause release hiccups? I think we've decided that relaxing pins should be safe but adding pins has caused us build issues in the past - so I think we're fine?"}
{"pred": "This should be `EncryptedSectionSize * 2`", "gold": "could you please explain a bit where these numbers come from? for example: why is there no `swarm.EncryptedSectionSize`?"}
{"pred": "Why do we need this?", "gold": "s/object content/blob object/ (for consistency with the `Size` docs)"}
{"pred": "Why are we removing this check?", "gold": "Rather than deleting this entirely, could we just emit it as a `warn` or `info` log line?"}
{"pred": "Why do we need to change this?", "gold": "Is there a chance of this being a BC break of somekind? I.e. what if an old instance of Caddy is running in a cluster with a newer one?"}
{"pred": "Why do we need this?", "gold": "Thanks for this... is this the only place where the rollback is needed? Are there others?"}
{"pred": "why this change?", "gold": "Should this also be a pointer? What happens if there are no BLS messages? I guess that's what this test is exercising, and Lotus also uses a non-pointer here."}
{"pred": "I think this should be `perr.Error()`", "gold": "This was definitely a subtle bug right here."}
{"pred": "I don't think you need the `compact` here.", "gold": "If this method gets all the emails, it should be named appropriately. **all_emails** or just **emails**."}
{"pred": "why did you change this?", "gold": "Can we still random, but if we randomly get a port is used before, we randomly pick again?"}
{"pred": "`create_no_window` -> `no_window`", "gold": "I would rather no have this as a `kwarg` as it encourages \"growth\" which lead to an unweildy constructor in other classes. Let's add a method or property to take care of this instead as I think it's usage is going to be quite low."}
{"pred": "Should this be `@procurement.purchaser == @user`?", "gold": "what if a purchaser is also an approver? or would that not happen?"}
{"pred": "Shouldn't this be `config.has_fee_estimates()`?", "gold": "Not sure why this change. You forgot to handle the case where the user has dynamic fees disabled and there are no fee estimates available. He should be able to sweep none-the-less (as he is using static fees anyway). The line with `config.fee_per_kb()` below, that you have deleted, handled that."}
{"pred": "Why do we need this?", "gold": "sorry, I wasn't familiar with this TopLevelCondition... What it would be in this case? The AuditsLogReady condition?"}
{"pred": "Why do we need this?", "gold": "Where does the `alloc` field get set?"}
{"pred": "`countQuery` is unused (from `deadcode`)", "gold": "looks expensive to do it on each query"}
{"pred": "Why did you change the file name?", "gold": "@rhyolight -- but weren't we supposed to be standardizing on using underscores in file names (versus camelcase)?"}
{"pred": "Shouldn't this be `in_memory.empty?`?", "gold": "Can this simply call `in_memory.empty?` ?"}
{"pred": "I don't think this should be a warning. If the user has asked us to skip settings file manipulation, then just bail out early.", "gold": "The styling/wording here probably needs some thought. It's more of a placeholder."}
{"pred": "I think this should be `post :reset`", "gold": "Using a plural route helps in detecting the path automatically for `= form_for @password_reset`."}
{"pred": "Why was this removed?", "gold": "Is `metadata` required on all tests? I actually just removed the metadata field entirely from a few tests in my PR."}
{"pred": "nit: `of` -> `to`", "gold": "seems reasonable to also want to include the 'to' location?"}
{"pred": "Why do we need to remove shutdown hook here?", "gold": "I don't think we need to necessarily check if that returned true or not, we should just remove the shutdown hook. Since nothing would check or do anything with this flag anyways."}
{"pred": "I don't think this is the right place to do this. We should be able to get the cstorvolume policy from the annotation.", "gold": "Better to push getting policy details into a func we can reuse later."}
{"pred": "why do we need these?", "gold": "optional: while there's nothing to do, a good way to catch bugs (where we use an outbound without calling `Start`) might be to have this outbound verify that `Start` is called before `Call` or `Stop`"}
{"pred": "I don't think this import is needed.", "gold": "Not a blocker by any means, but I think there is value in keeping the local imports in a separate group."}
{"pred": "Why is this a panic?", "gold": "nit - I would test the error message as well. For panic, you might need to see if the stack contains the error message, instead of equaling."}
{"pred": "Why do we need to do this?", "gold": "Didn't we have specific logic for handling slices vs structs?"}
{"pred": "I don't think you need the c_str() here.", "gold": "`c_str()` is not needed."}
{"pred": "Shouldn't this be `||` instead of `||`?", "gold": "The handler will be installed twice if you don't remove the below one."}
{"pred": "`getEpochLengthActivationBlock` -> `getEpochLengthActivation`", "gold": "How about putting `epochLength` (or something like that) in place of `a` just to make it easier to read"}
{"pred": "I don't think this should be a warning.", "gold": "Wouldn't this still fire afterwards if you created one called `pleasings`? or am I missing something?"}
{"pred": "I think this should be `kbp_root_path`", "gold": "I don't love this syntax; it doesn't match anything we're currently doing and it's not obvious. Why isn't this `/keybase/private/jzila,kb_bot/.kbfs_autogit/public/jzila/kbp.git`?"}
{"pred": "Shouldn't this be `mapper.apply(that)`?", "gold": "Does a type-hint work instead of casting? `return ofAll(toList().<U> zipWith(that, mapper));` (Probably not, just a question.)"}
{"pred": "Why did you change this?", "gold": "Are these required?"}
{"pred": "Should this be `opts.MaxControlLine > 0`?", "gold": "This is consistent for all clients that we will check yes? Seems like we should just use the singleton, maybe pass it to the parse function or since clients have a server pointer set it at server start and just access that way without locks?"}
{"pred": "Why do we need to change this?", "gold": "Note that this is a bug, that should be fixed on master. `DECIMAL_LITERAL` cannot match any token, because it's declared with a `#`."}
{"pred": "\"github.com/pkg/errors\"", "gold": "Don't need extra line here."}
{"pred": "Why was this test removed?", "gold": "For the first look, this change is strange. Were we passing these tests before?"}
{"pred": "Why do we need to print this?", "gold": "On Windows, doesn't `os.Args[0]` include the `.exe`? What if you run the program like `caddy.exe`?"}
{"pred": "Why did you remove this?", "gold": "I don't see anywhere where `ServiceConfiguration` interface implementation would return any kind of error. Not sure if its needed, but we could ALWAYS return a valid 'pseudo' configuration without possibility of error."}
{"pred": "nit: `containsExactly(\"a\", \"b\", \"c\")`", "gold": "Do we actually want to split on `\\r`? I thought that the \"newline sequence\" was only `\\r\\n` on windows."}
{"pred": "Shouldn't this be `ttype->is_set()`?", "gold": "Nit: these lines are duplicated from above. They can be refactored by setting etype in a conditional and putting 282 and 283 below that."}
{"pred": "Should this be `s.Noticef(\"Server shutting down...\")`?", "gold": "I would do an s.Notice(\"Initiating Shutdown...\") then after Shutdown() do the original Server Exiting."}
{"pred": "Shouldn't this be `> 0`?", "gold": "Not sure with how many seconds on average are we dealing with but maybe it's better to have hh:mm:ss format in logs - you can make it with `TimeSpan.FromSeconds(seconds).ToString()`"}
{"pred": "Shouldn't this be `mp.Platform.AWS == nil`?", "gold": "Why is this required? The user should be able to omit it and use the defaults."}
{"pred": "I don't think this should be translated.", "gold": "I don't think the naming of this setting conveys what it does. Maybe something like \"Ignore mouse movement triggered by other applications\""}
{"pred": "nit: `rawCollectorUri` -> `rawCollectorUri`", "gold": "Didn't went with backwards compatibility since it's still in beta"}
{"pred": "`throw_value_error(\"invalid value for bondsToCut\");` -> `throw ValueError(\"invalid value for bondsToCut\");`", "gold": "Perhaps bondsToCut must be None or non empty."}
{"pred": "Why do we need this?", "gold": "See above, we could avoid adding that (same applies below)."}
{"pred": "`bitmask` -> `bitMask`", "gold": "should use Number instead of Long"}
{"pred": "Unexpected var, use let or const instead.<br>Extra semicolon.", "gold": "Should the rest of the file be updated to use `expect` or should this test use the same format as the rest of the tests?"}
{"pred": "Why do we need to update the status after refresh?", "gold": "How would you feel about a different approach where the `DeleteAWSRecordSets` gets passed the zone ID and zone name rather than the `DNSZone`?"}
{"pred": "`random.uniform(0, 1) > self.prob`", "gold": "it seems `random.uniform(0, 1)` similar to `random.randint(2)`, all have 1/2 probabilities."}
{"pred": "Shouldn't this be `if isinstance(v, list):`?", "gold": "Added to support EBS volume creation, used like this: blockDeviceMap = [] blockDeviceMap.append( {'DeviceName':'/dev/sdc', 'VirtualName' : 'ephemeral0'}) blockDeviceMap.append( {'DeviceName':'/dev/sdh', 'Ebs': {'VolumeSize' : '100'} })"}
{"pred": "Why do we need this?", "gold": "We shouldn't depend that url is `mysterium` - it can be just `testRequestURL`. Also, `URL` has to be upper-case."}
{"pred": "Why do you need a lock here?", "gold": "We could delay this look-up now and only do it in the non-skip case. I suspect this is true for (almost) all of the top-level refactored functions."}
{"pred": "Why do we need the reinterpret_cast here?", "gold": "Typically, to be simple, we could reserve a const length space."}
{"pred": "from .reader import *", "gold": "Need to add a license and copyright header to each file."}
{"pred": "This should be `coupon_id`, not `coupon_id`.", "gold": "If I'm not mistaken, this line is now outside of the `if signed_out?` block, right? Any concerns about that? Seems odd that we wouldn't accept coupons for signed in users, but I want to make sure we understand the ramifications of this change."}
{"pred": "Why this change?", "gold": "Please remove the unused import of DBPDataSource."}
{"pred": "Should this be `LogWarning`?", "gold": "I think you should add some extra message here saying it was originally sent as an error, for diagnosability."}
{"pred": "Why this change?", "gold": "I believe that all the changes in this file are not valid for v1.2 of the Avalon toolkit."}
{"pred": "Why do we need this?", "gold": "we cannot change the behavior of the processRole - that method is used in lots of places. this call must be done only in the method where templates are being handled."}
{"pred": "nit: `ExecAgentLogConfigFile` -> `ExecAgentLogConfigFile`", "gold": "I think we probably want to follow the same naming convention that we do with `execAgentConfigFileNameTemplate` (using the SHA in the name of the file). This file might be confgurable in the future and when that happens we will be ready. Plus it's pretty much the same code that we already use for the config file."}
{"pred": "space between `if` and `(`", "gold": "If following above, this would be: end_time = time(0) + manual_wall_time_option, which is simpler. Also, make the check manual_wall_time_option > 0, otherwise negative times would terminate the worker right away."}
{"pred": "Why do we need this?", "gold": "If we aren't using `errors.Is` we don't need the `Unwrap` as we have `Cause` which is what pkg/errors uses."}
{"pred": "nit: remove empty line", "gold": "redundant empty line"}
{"pred": "Shouldn't this be false by default?", "gold": "The config.lua.dist still shows `houseAccountOwner`"}
{"pred": "Why did you remove this?", "gold": "I think we can leave this import and use non FQNs in the code."}
{"pred": "Nit: `handle` -> `handleName`", "gold": "I'd rather just send the parameter twice than break encapsulation here. There's already precedence with webelement IDs"}
{"pred": "Why are we removing this?", "gold": "We should probably exit early if there are no items in the list."}
{"pred": "This should be `missing-any-param-doc`", "gold": "As we can't use old names we should warn in whats new for 2.12 that this can happen."}
{"pred": "Why do we need this file?", "gold": "good job finding this package, I hope it's actively maintained"}
{"pred": "Why is this removed?", "gold": "same changes as in hipEnvVar.cpp"}
{"pred": "This should be `#include <wayland-util.h>`", "gold": "NULL check should be before this line"}
{"pred": "`client.getLocalPlayer().getWorldLocation()` can return null.", "gold": "Seems like client.getlocalplayer is being called a lot, would it be worth it to do final Player player = client.getlocalplayer?"}
{"pred": "Why this change?", "gold": "this change is not correct. 3-valued boolean logic requires that comparison of null to another value during intermediate operations should make the result null and not false. The place where null becomes false is at the very end of that expression. As an example, with the changed logic, this expression will return incorrect result. select * from t where not (a = 1); if a is null, the where predicate will become true which is incorrect. With the original 3-valued result, the where pred will become false and not return any result."}
{"pred": "Should this be `r.URL.Query().Get(\"Detected-Locale\")`?", "gold": "This can already be done with `{>Detected-Locale}`, why make another way to do it?"}
{"pred": "`if (fmd.isRestricted() == true)`", "gold": "These changes just match the logic update in the next method that was done previously - to assure the whole set of files is valid rather than that there is at least one that would be changed."}
{"pred": "Shouldn't this be `w.WriteHeader`?", "gold": "Why setting the status to Continue as at the end it is written OK? Status should be written only once."}
{"pred": "Why do we need to hydrate the param cache?", "gold": "Howdy! You'll want to do this same thing (replace `hydrateParamCache` with `proofs/bin/paramcache` and then do the copy) in `smartdeps`, too."}
{"pred": "I think this should be `mayactl snapshot create --volname <vol>`", "gold": "nit : Remove the extra lines"}
{"pred": "Why do we need this?", "gold": "Instead of adding a new option, I wonder if we could decide on a port that would disable listening. For instance, port set to 0 means that we use default port 4222. Setting to -1 means that we let OS pick a random free port. We could say anything negative lower than -1 (say -2) means disabled? You don't have to update the PR for that, just wondering if that would be better or not and let's see what others think."}
{"pred": "Should this be `clang-tidy-diagnostic`?", "gold": "Should we add some default case if non of the above return some analyzer name? Something like `unknown analyzer`?"}
{"pred": "Should this be `min_length.positive? ? 2 : 0`?", "gold": "Nvm. The original version is best... *hides from the angry rubocop*"}
{"pred": "Why do we need to call `Bytes()` here?", "gold": "we can drop this and use the returned body above, right?"}
{"pred": "Why is this change needed?", "gold": "Is echoing enabled on purpose here or it's a remainder of your tests?"}
{"pred": "Should this be `info` or `warn`?", "gold": "I think this should just be worked into the next message and follow the verbosity of it."}
{"pred": "`urlParams` -> `urlParams`", "gold": "This also needs to be reverted."}
{"pred": "nit: `journalPausedFromConflict` -> `journalPausedFromConflictType`", "gold": "`FromCommand` seems to fit better, since with my suggestion below, all pauses will raise a signal on `needPause`. Also maybe the format `journalPauseConflict` and `journalPauseCommand` is better, since the journal isn't necessarily paused yet once we raise a pause signal."}
{"pred": "Why do we need this change?", "gold": "This is fix from another PR #120."}
{"pred": "Why is this needed?", "gold": "I *think* it makes sense to try the more general dictionary (i.e standard python literals) format first. Might be other implications I haven't figured out yet. Then again, ``MultiInterface`` is pretty new so it probably doesn't matter wrt backwards compatibility."}
{"pred": "`$categoryManager` -> `$categoryManager`", "gold": "lol that variable name"}
{"pred": "Why do we need to change this?", "gold": "Upper case is reserved for our versions of top-level chains i.e. the `FORWARD` chain jumps to `cali-FORWARD`."}
{"pred": "`wallet->store.representative(node.wallets.tx_begin_read ());` -> `wallet->store.tx_begin_read()`", "gold": "json_handler::receive () has already started a read tx that can be used here right?"}
{"pred": "Why do we need this?", "gold": "We should add the definition to `.storybook/config.js` as well."}
{"pred": "Shouldn't this be `*(Lng32 *)op_data[1] == -1`?", "gold": "I don't believe this is correct. Consider the query, \"select a from t1x where not(b = 0 and c = 0)\". When B and C are both null, both equal predicates evaluate to null, and the AND evaluates to null. The NOT then also evaluates to null. The WHERE clause should treat the result of the NOT as false. But with this fix, the result of the AND will be false, making the NOT true. There needs to be three cases here for ITM_AND: If the first operand is false, then the AND is false. If the first operand is true, then the result is the second operand. If the first operand is null, then if the second operand is false, the result is false otherwise the result is null. Similar logic needs to be added to the ITM_OR case."}
{"pred": "nit: space after `while`", "gold": "`bound/2` is generally the previous bound that we tested, except when `bound` is equal to 1. It won't break in that case since callers are not supposed to call advance on a target that is lte the current doc ID, but this might still make room for bugs?"}
{"pred": "Shouldn't this be `options.session`?", "gold": "Can we remove `raw`, `fullResult`, and `serializeFunctions`?"}
{"pred": "Why do we need this?", "gold": "[Nit] I don't have a proposed suggestion, but security seems too generic of a name here."}
{"pred": "Why do we need to remove the dist dir?", "gold": "do we need to force a buildConfig here? I know it's in muon, but that might actually be making things harder for people"}
{"pred": "Shouldn't this be `this->GetTarget() == this`?", "gold": "Shouldn't need this-> here."}
{"pred": "# -*- coding: utf-8 -*-", "gold": "Why delete this?"}
{"pred": "Nit: space after `if`", "gold": "This line is here to be compatible with the current way `refs` work, right?"}
{"pred": "Shouldn't this be `value.is_a?(Number)`?", "gold": "Hmm, I wonder if we can safely assume all decimals should be displayed as $$...ok for now I suppose."}
{"pred": "I think it would be better to use `expect(current_examples).to eq([example1, example2])`", "gold": "Good spec :). Very clear and easy to see what it's doing."}
{"pred": "I don't think you need the `.limit(3)` here.", "gold": "Shouldn't we need to sanitize the `params[:filter]` from a defined expected values?"}
{"pred": "Why do we need this?", "gold": "Should we bite the bullet and poll for the full 5 minutes that AWS recommends? If we do that, we'll probably want to leave some kind of breadcrumb in the event log to let users know why it's taking so long to launch."}
{"pred": "I don't think this change is needed.", "gold": "Guava changed `Objects` -> `MoreObjects`"}
{"pred": "Why do we need this change?", "gold": "All these hand generated mocks can be deleted. I think we already moved everything to gomocks."}
{"pred": "`doc.get('_id') === this.get('_id')`", "gold": "what about string/number etc _ids? this will fail."}
{"pred": "Why did this change?", "gold": "Looks like the test had a bug prior to this."}
{"pred": "Shouldn't this be `electronApp.platform === 'win32'`?", "gold": "Should start with joplin://x-callback-url/. Also maybe create a helper function to check if a url is valid?"}
{"pred": "Use underscores(_) as decimal mark and separate every 3 digits with them.", "gold": "PR works great. Just out of curiosity: why all the id changes?  "}
{"pred": "This should be `FLB_CONF_STR_BACKOFF_MAX`", "gold": "config map first value is wrong, it aims to define the \"value type\", that value will lead to an undefined behavior."}
{"pred": "Why do we need to change this?", "gold": "This doesn't make sense. The thing being constructed is a blob.Bucket. \"Constructing\" the pointer is trivial."}
{"pred": "Why do we need to disable this?", "gold": "Outch. A configuration/parsing refactor is on the radar but this seems more pressing."}
{"pred": "`moment(new Date()).add(-this.membersStats.days + 1, 'days').format(DATE_FORMAT)`", "gold": "Unfortunately this won't work when the \"All time\" range is chosen because `memberStats.days` will be `\"all-time\"` and not a number. What you could do instead is to use `memberStats.stats` as the dependent key and use `Object.keys(memberStats.stats.total_on_date)[0]` to grab the first date in the range and build the label from there."}
{"pred": "Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping."}
{"pred": "Why was this removed?", "gold": "We need this left in as `axe.configure` is for the top-level page `axe` and we still need to configure the axe script inside the iframe as well (so both have to be configured),"}
{"pred": "What kind of change implementing this rule can cause?", "gold": "is this rule serviceimpacting? I'm thinking it's mostly around the modeling of pageable in the swagger, thoughts?"}
{"pred": "Why do we need to change this?", "gold": "same here, replace `ks` and `kc` to something more related to Source."}
{"pred": "Why do we need this converter? Isn't `MvxValueConverter` enough?", "gold": "We should probably ask here if `dict` contains a key with the appropiate value, and leave a trace in case it doesn't, to make it easier to debug for developers."}
{"pred": "I think this should be `auth_home_123`", "gold": "this should only be indented 2 spaces"}
{"pred": "nit: `t.Errorf(\"failed to load env config, %v\", err)`", "gold": "Nit, these Err not nils should be `t.Fatalf` not error. We want to the test to stop if this error occurs."}
{"pred": "`hasTabular` -> `hasTabularDownloadOriginalTracker`", "gold": "shouldn't every `Boolean` in this pr be `boolean`?"}
{"pred": "This should be `self.execute(command, {\"windowHandle\": \"current\"})`", "gold": "This `if` is not necessary"}
{"pred": "Nit: `HttpConfigurationAction` -> `HttpConfigurationAction`", "gold": "Are you using this anywhere? (I couldn't find it.)"}
{"pred": "Why do we need this?", "gold": "Can be inlined"}
{"pred": "Line is too long. [81/80]", "gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping."}
{"pred": "Why do we need this?", "gold": "Please use `kinto.core.utils.json`"}
{"pred": "Shouldn't this be `upstream.Dial`?", "gold": "Since we're returning the error with the same content, we don't need to log it here; it will get bubbled up and emitted that way."}
{"pred": "Why do we need to disable this?", "gold": "What happens if someone import `typing` and thus uses `@typing.final` instead?"}
{"pred": "Why this change?", "gold": "Better remove this dependency altogether"}
{"pred": "Why is this needed?", "gold": "Could you please move the declaration to httpclient.h? I think we have a consistent pattern in declaring global variables in header files."}
{"pred": "Why do we need to add a new field here?", "gold": "We will also need to add this to the spec."}
{"pred": "Why do we need this change?", "gold": "In startEvaluator, we have the paysetHint; we should use it to preinitialize the state delta allocation. The number of transactions and the deltas are typically growing in a linear fashion, so preallocating twice as much in the array initializer would be a good idea."}
{"pred": "Do we need this static block? Can't we just call `scheduleIpHostResolving()` directly?", "gold": "we shouldn't add a bunch of static initializers 'everywhere' in the code. Probably just one would be good, during the construction of the 'RemoteWebDriver' class."}
{"pred": "Why do we need a benchmark for this?", "gold": "Would it be possible to move the creation of the `new { Prop = (object)_value }` out of the benchmark? In the current version, the benchmark includes the cost of creating and serializing the object, while if possible it should be the cost of serialization only."}
{"pred": "Should be `Symfony\\Http\\HttplugBundle\\HttplugBundle`", "gold": "only dev and local"}
{"pred": "Shouldn't this be `null`?", "gold": "This should not be nullable, instead it should be `->default(0);`"}
{"pred": "`selectColumns` -> `selectColumns`", "gold": "What about `selectedColumns`? I believe it is frequently used throughout the project."}
{"pred": "Can we rename this to `useSynonymBoost`?", "gold": "I thought we switched the approach from a payload to boost attribute? Besides; it's not clear we need this toggle at all since the user could arrange for this behavior simply by having the new DelimitedBoost filter thing in the chain."}
{"pred": "Shouldn't this be `#{environment_string}`?", "gold": "the previous code used 'export' when platform is cisco-5, presumably because 'env' cannot be used to load variables? I have no idea if that's the case but this env vs export logic is not here"}
{"pred": "Why is this a `int32` and not a `string`?", "gold": "I'm wondering if we need to add some type of validation here that the SecretCount != 0... Or do we think it would be valid to have a SecretCount of 0?"}
{"pred": "Shouldn't this be `slaveOk`?", "gold": "This test is being skipped. I unskipped it, and it failed in the same way for both `slaveOk: false` and `secondaryOk: false`. I'm not sure how else to test this broken test."}
{"pred": "why do we need both to and from?", "gold": "I don't believe that we need a pointer to an interface for the `to` side of this since we're just assigning a value to the to field."}
{"pred": "I don't think you need the `count=True` here.", "gold": "No blank line after the docstring."}
{"pred": "File is not goimports-ed", "gold": "nit: move this to the group below."}
{"pred": "`bufferSize_as_ulong` -> `bufferSize`", "gold": "This is fine, but maybe we should change the variable name to \"bufferSize_as_uint\"? Or \"...uint32\"?"}
{"pred": "I think this should be `suggestion.first.is_a?(Hash)`", "gold": "Use snake_case for variable names."}
{"pred": "Is this intentional?", "gold": "Obviously, don't merge this to master."}
{"pred": "`expect(reporter).to have_received(:report).with(0)`", "gold": "Nearly there! This should assert on the output, take the result of \"start\" and \"finish\" as an example :)"}
{"pred": "`maxMessages` is unused (from `structcheck`)", "gold": "This loop is going to burn CPU if len(s.q) == 0. Maybe a small sleep?"}
{"pred": "why change this?", "gold": "can you give a reason why session should be contained in RegionManager?"}
{"pred": "Why do we need to create a new extractor here?", "gold": "You are comparing two signerIDs here, error message should be \"Signers should match\""}
{"pred": "Why do we need a lock here?", "gold": "Who's acquiring this lock for writes?"}
{"pred": "Why did you remove the `compressed` param?", "gold": "This throws a linter error, don't use object creation for side effects. I feel like it's kinda messed up that the errors are thrown by the constructor and not that the constructor will throw them"}
{"pred": "I think you can use `expect(result).to eq %w(A B C)` here.", "gold": "Should there be a `trail.topic_name` method so we don't annoy Demeter?"}
{"pred": "`team` is not used in this function", "gold": "instead of passing \"None\" it would be more readable to create a constant e.g. TEAM_PUBLIC = None and then call build_package(TEAM_PUBLIC, ...)"}
{"pred": "Why do we need this?", "gold": "Would it make sense to include this file via composer files-autoloading instead?"}
{"pred": "`elementText` can be final.", "gold": "Each `ExpectedCondition` implements `java.util.Function` These are expected to be stateless. This condition will leak previous `elementText` on the second usage, which doesn't seem ideal."}
{"pred": "Why this change?", "gold": "Extra newline here. Thanks for moving it under the `testing` import though. This just needs to be grouped with the other imports below it."}
{"pred": "I think it would be better to use `MimeHeader.HEADER_CONTENT_ENCODING_8BIT` here.", "gold": "Should we ignore case when doing the comparison?"}
{"pred": "This should be `#if defined(WLR_HAS_X11_BACKEND)`", "gold": "The same `ifdef` should apply to `#include <wlr/backend/x11.h>` line 14"}
{"pred": "Should this be `DiagnosticSource?.GetType().AssemblyQualifiedName`?", "gold": "We're instrumenting a static method, so there's no instance in this case. `diagnosticSource` is the first argument."}
{"pred": "`isHighPriority` -> `isHighPriority`", "gold": "I feel like this belongs in `RecipientPresenter` (which should really be `MetadataPresenter`), but I suppose having it next to requestReadReceipt makes sense as well. feel free to leave as is."}
{"pred": "This should be 1.4.2", "gold": "Let's go back to 1.4.0 until the release is being prepared."}
{"pred": "`errno_val` is not used.", "gold": "I would avoid the term \"errno\" as it implies the glibc variable. Use error_code or status or something."}
{"pred": "`d` is unused (from `structcheck`)", "gold": "@abhinav @kriskowal what do you think about putting the handler on `d`?"}
{"pred": "`restic.TagList` should be `restic.TagList`", "gold": "Why `restic.TagLists` and no `restic.TagList` ? Because I'm using `restic.TagList` here and using `restic.TagLists` is a lot of changes"}
{"pred": "Should this be `1 * time.Second`?", "gold": "An hour seems a significant amount of time to wait for within a test, does it need to be that long?"}
{"pred": "Do we need to pass `false` here?", "gold": "Nit: (newish to golang, don't hesitate to tell me I'm wrong here, but ...) I'd have written this code, just for readability: keepAlive := false return d.dial(hostName, tlsClientConfig, keepAlive) ... or even return d.dial(hostName, tlsClientConfig, false) // keepAlive=false Personally I think Golang should have included named args; I think it's one of the things python got right."}
{"pred": "Why is this needed?", "gold": "I don't think it would cause any version conflict, but I'd feel safer if you declared it last, so that the numerical id of the existing integrations don't change"}
{"pred": "nit: \"The CertificateRequest %q is an invalid request\" -> \"The CertificateRequest %q is an invalid request\"", "gold": "Can we provide some more useful actionable info here? `fmt.Sprintf(\"The certificate request could not be completed due to invalid request options: %s\", req.Status.Conditions[InvalidRequestCondition].Message)`"}
{"pred": "Why is this port 15014?", "gold": "yeah, can change to 8545"}
{"pred": "Why do we need this class?", "gold": "As far as I can see you're not rollbacking transaction anywhere. This could potentially cause further issues(and very hard to debug ones) with not synchronized transactions between message handling. Is the transaction required in this place anyway? You seem only to be fetching data here. ack method is performing some updates so it makes sense"}
{"pred": "Please remove unused imports.", "gold": "What's the meaning of null URIEndpointObject?"}
{"pred": "Shouldn't this be `logging.DEBUG`?", "gold": "Why did you remove the time? It can be useful if some actions are ran in jobs?"}
{"pred": "Why this change?", "gold": "File is not `goimports`-ed (from `goimports`)"}
{"pred": "Why did you change these imports?", "gold": "What the reason to change imports?"}
{"pred": "Why do we need this check?", "gold": "Nit: continuation indents are 2 indents / 4 spaces."}
{"pred": "I think this should be `netloc[index:index+1]`", "gold": "You can use `netloc.rsplit(\":\")` for that."}
{"pred": "Why this change?", "gold": "nits, I don't get the point of this change  "}
{"pred": "I don't think we need the `!windows` here.", "gold": "`warningPrefix` looks the same on both platforms, we could move it up to `log.go`."}
{"pred": "Nit: `Filters` and `Interceptors` should be capitalized.", "gold": "What's the motivation behind switching to plural here? I think we want singular cc @abhinav"}
{"pred": "Why do we need this wrapper? Can't we just return `err`?", "gold": "What do you think about renaming this method `FromErrorAndCode(code Code, err error) *Status`? One of the benefits is that it will be consistent with the naming of `func FromError(err error) *Status {` which does something almost similar."}
{"pred": "Why this change?", "gold": "we cannot state that by default the same value is used if we stopped using null - it would suggest that when you change JSON RPC and leave WS port default then they would be same."}
{"pred": "Why do we need to pass nil here?", "gold": "I'm still not convinced dropping Chrome logs is the right thing to do, but if you insist "}
{"pred": "\"Unable to get the name\" -> \"Unable to get the name\"", "gold": "It would be helpful to include some reasoning here. With the reflection model, it is often the case that names are not available."}
{"pred": "Why do we need to set this here?", "gold": "Instead of setting this here, why not have the flag call in the init function set `caddy.LogDestination` directly, and switch on that?"}
{"pred": "This should be imported from the `i18n` package", "gold": "This belongs under \"WordPress dependencies\"."}
{"pred": "Why is this needed?", "gold": "Was there an issue on `net452`?"}
{"pred": "Why not use `StringComparison.OrdinalIgnoreCase`?", "gold": "Another option is to always write it without quotes. I always have to use SR. And why not?"}
{"pred": "Why do we need this?", "gold": "This should use the `merge` function added in #473 instead of introducing a new dependency"}
{"pred": "Shouldn't this be `VUID-VkDescriptorUpdateTemplateCreateInfo-templateType-04615`?", "gold": "Shouldn't this say \"a binding with descriptor type VK_DESCRIPTOR_TYPE_MUTABLE_VALVE\""}
{"pred": "Why do we need this?", "gold": "This variable name should probably contain `grab`"}
{"pred": "Style/MutableConstant: Freeze mutable objects assigned to constants.", "gold": "Which initializer should we be using for open_aire? The one in `external_apis` or this one in `initializers`?"}
{"pred": "I don't think this is used anywhere.", "gold": "remove todo on line 28?"}
{"pred": "why do we need this?", "gold": "clean unnecessary arguments."}
{"pred": "Should this be `EXECUTION_TERMINATED`?", "gold": "Could the name of the status be confusing to users? It says the execution stopped but is it a temporary stop? Will it continue to run at some point? To me the name does not suggest a final status but a transition one. WDYT @sshardool @jakhani @djaiswal83 @aditya1105"}
{"pred": "Shouldn't this be `from molecule import DockerProvisioner`?", "gold": "Since we created a Provisioners directory, can we do the same with the tests, and follow the same structure as the code?"}
{"pred": "Why is this a slice?", "gold": "We don't need that one anymore?"}
{"pred": "Why do we need this import?", "gold": "Since we're determining the local node's host info in the `Store()` init, we need to import the `STORE` object here. Is this OK, or should I be determining the host info earlier. (When parsing settings?)"}
{"pred": "`as a cue` -> `a cue`", "gold": "I think, there is no `#getKind()` method anymore, is it? The approach would now be testing with instanceof. Or could we return a more specific type than JavaNode now?"}
{"pred": "I think this should be `UppyButton--done`", "gold": "can we localise these? not sure if we have easy access to a translator instance from `generic-provider-views`"}
{"pred": "These should be `const`s.", "gold": "This is the VID from Adafruit. Doesn't Particle have a different VID? (CC @suda)."}
{"pred": "Shouldn't this be `vStringTruncate(scope, old_len)`?", "gold": "The function is only used once, and this body is now only 1 call with the same args (e.g. basically an alias for `vStringTruncate`), it could probably be simply removed. But if you wanna keep the naming for clarity, it also sounds reasonable."}
{"pred": "Shouldn't this be a warning?", "gold": "please change to `could not connect to peer: %s`. it is not relevant to say \"from kademlia\" in a warning"}
{"pred": "`rmDateTimeStrMs(date.toString())` -> `rmDateTimeStrMs(date.getMillis())`", "gold": "Why need to remove this? Datetime has microseconds in fact."}
{"pred": "Why not use `require` here?", "gold": "What's up with this, isn't it nil? Why not use the real T value from the test function? @elcore @wmark"}
{"pred": "`@psalm-mutation-free` should be removed.", "gold": "this feels weird"}
{"pred": "Why do we need this?", "gold": "I don't think this is the type of network we should be putting in our named networks."}
{"pred": "I think it would be better to use `get_rank()` here instead of `get_rank()`.", "gold": "debug? I suspect this will be removed before merge?"}
{"pred": "I think we can remove this line.", "gold": "should this be here twice?"}
{"pred": "Why did you remove this check?", "gold": "`generate_special` - a meaningless name for me. Can we provide more detailed naming?"}
{"pred": "Space inside { missing.<br>Space inside } missing.", "gold": "This isn't something you introduced in your changes, but the change makes more obvious to me that this test would be better as a unit test of some kind (probably a controller test). Testing a 404 is an edge case that probably doesn't need to be tested with all components in integration."}
{"pred": "Why did you change this to `finest`?", "gold": "We chose `info` in the test code for obvious reasons. Changing to `finest` makes debugging harder and noisier."}
{"pred": "Shouldn't this be `remoteHost.getProtocol()`?", "gold": "any reason you're assigning to the local variable 'id' too?"}
{"pred": "Why do we need this?", "gold": "Need to fix this import :)"}
{"pred": "Why do we need this?", "gold": "sorry these tests suck so much we are working to kill them"}
{"pred": "Why are we multiplying by 10000 here?", "gold": "Why not adjust `currentTime` to be in ms directly?"}
{"pred": "`check_disp != TLS_DCONTEXT_SLOT` -> `check_disp != TLS_DCONTEXT_SLOT`", "gold": "> restore, we find the matching spill for that restore which uses the same slot nit: Two separate sentences: separate with `.` or something besides `,`."}
{"pred": "why is this removed?", "gold": "this flag not used"}
{"pred": "Shouldn't this be `Y-m-d H:i`?", "gold": "I don't think `?? null` works here... that's to ensure PHP doesn't throw an \"undefined\" error about `$profile->expirationDate`, but now the code is assuming that `$profile->expirationDate` will be set. Might be cleaner to do: <pre> $expiration = isset($profile->expirationDate) ? $this->dateConverter->convertToDisplayDate(\"Y-m-d H:i\", $profile->expirationDate) : null; </pre> And then assigning the `$expiration` value in the return array..."}
{"pred": "Why is this needed?", "gold": "An ENV should be used? Are you sure that the Vue examples are built in the production mode?"}
{"pred": "Should this be `Optional[Union[float,int]]`?", "gold": "Nit: this should actually always be float since we convert it before we construct the namedtuple."}
{"pred": "Shouldn't this be `!FileUtils::fileType(path.c_str())`?", "gold": "The result of `FileUtils::fileType` could be saved, instead of calling twice."}
{"pred": "Shouldn't we log something here?", "gold": "Can you log the exception ?"}
{"pred": "`flb_debug(\"[http_client] proxy host: %s port: %i\", c->proxy.host, c->proxy.port);`", "gold": "since this debug message is inside a plugin code, it should use flb_plg_debug(ctx->ins, \"...\"), on this case don't need the component prefix since the API will put it there automatically"}
{"pred": "Why this change?", "gold": "I also took advantage of the changes to change the Timestamps used in this notification from \"java.sql.Timestamp\" to \"com.yahoo.rdl.Timestamp\"."}
{"pred": "Why do we need this change?", "gold": "It would be nice all these tweaks to be configurable from cmd line, with sensible defaults"}
{"pred": "Black would make changes.", "gold": "Why do we need this `check_same_thead` to be false? I feel a bit uncomfortable about this."}
{"pred": "You can use `assert.sameValue(customCreated, 2);`", "gold": "We should probably test with constructors which aren't in the schema, and functions which aren't constructors."}
{"pred": "I don't think we need the `[unlabeled]` here.", "gold": "this call doesn't work doesn't? I mean there doesn't seem to be an 2 argument allocate overload. Maybe arg_logical_size should just be defaulted to the arg_alloc_size thing. Or we should just report out physical allocation size instead of logical."}
{"pred": "Why did you remove the puppetlabs path?", "gold": "This winds up flipping the desired values. Looks like I gave you a bum steer @kevpl"}
{"pred": "nit: `iotexAddress` -> `producerAddress`", "gold": "nit: let's call our address ioAddr from now on"}
{"pred": "Shouldn't this be `pPhysicalDeviceProperties->limits.maxBoundDescriptorSets > 0`?", "gold": "You're killing this \"else\" case here which currently flags an error when maxBoundDescriptorSets == 0."}
{"pred": "This should be `return (checksum == NULL);`", "gold": "Nitpick: I'd append `_cb` to the function name here to mark it as a callback. Otherwise it looks a bit like this will do the entire job of removing null checksum refs from a hash table."}
{"pred": "`tables.stream().filter(TiTableInfo::isView).collect(Collectors.toList());`", "gold": "or you can use `filter(x => !x.isView)`"}
{"pred": "why is this removed?", "gold": "Instead of NewBuffer on the line above, do NewReader to avoid having to wrap later."}
{"pred": "Why do we need this?", "gold": "No need for this, as pylint already only turns things off for this function and it's needed for the entire function."}
{"pred": "Why not use `len(txib)`?", "gold": "extra brownie points ( overall solution ): we've currently triple-encoding the payset - 1. we encode it to calculate the block size. 2. we encode it to calculate the commit hash ( either via flat, or as Merkle tree ). 3. we encode it as a whole for the purpose of preparing the proposal ( I know that this isn't always the case, but this case happens to be on the critical path ). Caching the encoded data of the *first* block could help us repeating the process."}
{"pred": "Line is too long. [81/80]", "gold": "This assertion should use the actual expanded string, so that it is clear what the message produced looks like. Right now one has to run the code to determine what the message is."}
{"pred": "\"strings\"", "gold": "similar here for imports, these should be consolidated (and also consolidated with the grouping below)"}
{"pred": "`self.file_client = mmcv.FileClient(**file_client_args)`", "gold": "Maybe there is no need to modify it. Because if you don't use the mask, it won't be initialized."}
{"pred": "Why did you remove this?", "gold": "Is there a reason we wouldn't want the trailing `%`? I'm guessing that without the trailing `%` it will just do a strict match vs a partial prefix right?"}
{"pred": "Why is this header needed?", "gold": "Please update the DMA test app in AFU repo once this gets approved."}
{"pred": "Shouldn't this be `Shopsys Framework`?", "gold": "There should be a migration for that as well to reflect the change on in-production instances"}
{"pred": "Why is this empty string?", "gold": "Why does it have to be `\"\"` instead of an empty string  "}
{"pred": "I think this should be `unless pending || dry_run`", "gold": "This is very strongly opinionated so feel free to disagree with me better, but as conditionals get more complex I like turn them into ifs instead of unlesses. What do you think?"}
{"pred": "Why do we need to change this?", "gold": "Will this obey the seed set on Kernel?"}
{"pred": "Why did you remove this check?", "gold": "We shouldn't use the `&.` syntax here, since we expect that `executor` will never be `nil`. For the functions that _can_ be called from apply / without an executor, `&.` is still appropriate."}
{"pred": "Is this intentional?", "gold": "Why the switch from period to colon?"}
{"pred": "nit: `numImagesToDeletePerCycleEnvVal` -> `numImagesToDeletePerCycle`", "gold": "Can you just fix the warning instead? It's actually important for this to have a default of `\"\"` as the subsequent merges with `DefaultConfig()` and `fileConfig()` need to work. If you make this not `\"\"`, you break the assumptions of `Merge()`."}
{"pred": "Why do we need these properties? Can't we just use the `Enabled` property?", "gold": "let us not add this"}
{"pred": "Why is this a pointer?", "gold": "Is there a need for group as well? crun sets both."}
{"pred": "Why do we need this?", "gold": "@cijothomas This build-up pattern was really confusing. It looks like internally ActivityProcessor is intended to be chained but there is nothing in the abstract class that enforces it. We never set a \"Next\" or make sure that the chain is called. Probably need to do some more work in this area?"}
{"pred": "This should be `toySchema.pre(['save', 'findOneAndUpdate'], next);`", "gold": "`this.getFilter()` won't work on `pre('save')`. Perhaps make this `toySchema.pre(['updateOne', 'findOneAndUpdate'])`?"}
{"pred": "I'm not sure if this is the right way to do it, but I think it would be better to use `TimeUnit.SECONDS.toMillis(1593493828L)`.", "gold": "Break out tests for events into their own tests rather than placing them in other ones. That makes it easier for us to figure out where problems lie and to do a TDD-driven implementation over new APIs."}
{"pred": "Why is this being removed?", "gold": "I think this is the only place where we use `UvShutdownReq`. Can we remove the type altogether? Or do you prefer to keep it around?"}
{"pred": "nit: space after `:`", "gold": "I think we can get this to work by passing in the root ca cert fixture that upstream ca is using"}
{"pred": "I think it would be better to use `tm.tm_year` instead of `1900` here.", "gold": "Just occurred to me to ask: is the condor log date in localtime or UTC?"}
{"pred": "Shouldn't this be `MUSHY_PIT(5808)`?", "gold": "Can you remove the sculliscep varbits from here too?"}
{"pred": "Please add a new line at the end of the file.", "gold": "I understand that it is a common practice in this script to add indexes this way but why don't we check index existence before adding it? I'm not very familiar with MySql but it's can be done easily in MSSQL and I'm pretty sure that there is a way to do the same here."}
{"pred": "`duraton` -> `duration`", "gold": "we should probably deprecate (and display a warning) the misspelled keyword arg here rather than removing it... and then add the new one. This changes a public API and will break any code that is currently using the misspelled version."}
{"pred": "Shouldn't this be `h2o_fatal_printf`?", "gold": "Should we do something like `h2o__fatal(file, line, \"fatal error: %s, %s\\n\", mess, RSTRING_PTR(...))` here?"}
{"pred": "Why are we skipping these tests?", "gold": "is this one all platforms?"}
{"pred": "Why did this change?", "gold": "why capitals grr?"}
{"pred": "`checkFatal` is unused (from `deadcode`)", "gold": "Surely all the above should go into `common`."}
{"pred": "Why was this removed?", "gold": "This is an unrelated change, but was failing CI... probably introduced in master."}
{"pred": "I'm not sure if this is the best way to do this. I think it would be better to have a `SubstructMatch(refMol, prbMol, match, recursionPossible, useChirality, useQueryQueryMatches)` function that takes a `MatchVectType` and a `bool` for `useChirality`.", "gold": "This piece isn't backwards compatible, but it's enough of an edge case that I think it's unlikely to be a problem."}
{"pred": "The PubSub service limits the size of request body in a single Publish RPC.", "gold": "MB is presumably 1024 * 1024."}
{"pred": "I don't think we need `lazy` here.", "gold": "Didn't we extract this logic to a `react-features` helper?"}
{"pred": "Why was this removed?", "gold": "But But, overlapping async writes will get corrupted  "}
{"pred": "File is not `goimports`-ed (from `goimports`)", "gold": "Not your immediate problem, but having everything depend on a package that has the config for everything else is ick. Can you move the MessagePoolConfig here and reverse the dependency?"}
{"pred": "Why was this removed?", "gold": "recently, IME_ACTION_GO action can trigger key_down and key_up event successfully, so we don't need to send enter key separately as before, otherwise will trigger it twice and cause to enter empty passcode, which cause test failed."}
{"pred": "Why do we need this check?", "gold": "It seems that you only need to do this `checkExprDepth()` inside `deduceExprType()`. So you don't have to add this check everywhere."}
{"pred": "Why is this change needed?", "gold": "why split into two lines?"}
{"pred": "Why does this need to be public?", "gold": "Does this need to be public or can it be package-private?"}
{"pred": "`this.props.getPlugin(target.id).\u0441anEditFile(file)` -> `this.props.getPlugin(target.id).showEditButton()`", "gold": " Questionable way of looping through editors and calling `canEditFile` to show the edit button. Is there a better way?"}
{"pred": "`zipWith` -> `zipWith`", "gold": "`that is null` doesn't sound very useful to me. Could we rename `that` to `target` or something less context dependent :)?"}
{"pred": "Why was this added?", "gold": "Just to be consistent, can we use the print function `print()` instead of the keyword. Same goes for line 437."}
{"pred": "Shouldn't this be `wallet[1].String()`?", "gold": "Having to pass in `price` and `limit` is pretty common. Do we want to have this be another argument, maybe a combined structure that can be used for every action that requires it?"}
{"pred": "Why do we need this?", "gold": "Could you move it after `stop`?"}
{"pred": "`method.getName() + \"Body\" + bodyParamName`", "gold": "The variable `method` seems not used. Maybe we can remove the parameter `bodyParamName` and generate it by invoking `ParamUtils.generateBodyParameterName(method)` ?"}
{"pred": "Why was this removed?", "gold": "I don't think this should be here?"}
{"pred": "Why did you remove the `earliest` parameter?", "gold": "Either I'm missing something or specs actors should remove this call cc @anorth"}
{"pred": "nit: space after `foreach`", "gold": "Please undo all these changes as they are white-space only."}
{"pred": "`$countriesAlpha2 = array_search($countryName, $countries, true);`", "gold": "You forgot an optimization? `$countries = CountryField::FORMAT_ISO_3166_ALPHA3 === $countryCodeFormat ? Countries::getAlpha3Names() : $countriesAlpha2;`"}
{"pred": "I don't think this is the right way to do it. I think it should be \"current Python interpreter version (e.g., '3.7')\"", "gold": "Shouldn't this also return the current value specified by the user? At least that's what the docstring says and what the previous version did."}
{"pred": "\"This parameter determines the time range the listen search. Each increment of the time_range corresponds to a range of 5 days and the default time_range of 3 means that 15 days will be searched.\"", "gold": "> the time range the listen search the time range of the listen search?"}
{"pred": "I think this should be `dynamo_preserve_zmm_caller_saved`", "gold": "This snprintf, etc. needs to all be inside the DO_ONCE: all this overhead happening on every single decode is likely a huge performance hit."}
{"pred": "This should be `--connect_retries <number>`", "gold": "would call it connect_retries"}
{"pred": "I think it's better to use `self.assertRaisesRegex` here.", "gold": "Why are we using `repr`?"}
{"pred": "Why do we need this change?", "gold": "I use the same zms instance to check authentication in swagger endpoints. Same thing in ZTS."}
{"pred": "nit: space after `//`", "gold": "Consider consolidating the common code in a common setup method in tests?"}
{"pred": "Why this change?", "gold": "q: do you need to run the annotation processor over EthProtocolConfiguration prior to writing this file? (i.e.to ensure ImmutableEthProtcolConfiguration exists)? Does Auto-import etc. still work in the IDE?"}
{"pred": "`getNicknameFor` -> `getFullNameFor`", "gold": "What is the motivation for switching from `Schema` to `DiscoveryField` everywhere?"}
{"pred": "I think it would be better to use `ECS_CONTAINER_METADATA_ENABLED` here.", "gold": "What happens when ECS Init/whatever's starting the Agent mounts some other directory as Agent's data directory (`-v /tmp:/data`) sets `ECS_HOST_DATA_DIR` to `\"/var/lib/ecs\"` It doesn't seem like a strong enough abstraction to be dependent on Agent configuration options to expect `ECS_HOST_DATA_DIR` to be the same as whatever's being mounted as `/data` on the host. My main concern is the late-binding/asynchronous failures this could lead to if the wrong host mount was specified. Wondering if there are better alternatives here. Can we at the very least inspect the Agent container and check if `ECS_HOST_DATA_DIR` is mounted? If the answer is that we'll revisit the validation here at some latter stage, that's fine too. But, I want us to be aware of potential failures here."}
{"pred": "`has_xcb_errors` -> `has_xcb_errors`", "gold": "btw that's obviously out of scope of this PR but since i noticed this line here it reminded me a thing: on some systems i've noticed the font didn't had those characters, so it was just a square or empty space and sometimes they're just a bit shifted in position (if font doesn't have them and using from fallback font which have incompatible dimensions of characters) how do you think is it worth creating an issue to discuss/address it or it could just waste time on bikeshedding?"}
{"pred": "`recoverutil` is unused (from `deadcode`)", "gold": "alias is not needed"}
{"pred": "Should this be `pids/nebula-graphd.pid`?", "gold": "Do we need to include the path?"}
{"pred": "Why did you change this?", "gold": "During our zoom and working on this, I said that I believe it was set to 64MB, not 32MB, but the diff shows that I was wrong. So we could change it back to 32MB."}
{"pred": "import \"github.com/druid-io/druid/pkg/log\"", "gold": "Here I thought you always insisted on ` log \"github.com/Sirupsen/logrus\" ` :) I might do a PR that just globally switches that out wherever we have log."}
{"pred": "I think this should be `HasKeyForUser(user keybase1.UID) (bool, error)`", "gold": "We maintain that each (logical) key generation has the same set of device keys, so no need to plumb through `keyGen`."}
{"pred": "This should be `mock>=2.0.0, <3.0`", "gold": "Please use `from unittest import mock` instead of this package."}
{"pred": "Why do we need this?", "gold": "Should be `if (this.options && this.options.cursor) {`. Options may be undefined. Also, going forward, mongoose will always use curly braces around if blocks."}
{"pred": "Style/MutableConstant: Freeze mutable objects assigned to constants.", "gold": "This should remain as mailrelay.blackducksoftware.com for staging. Not sure this will be valid, but it shouldn't go through the production mail server."}
{"pred": "Why is this #if DEBUG?", "gold": "Maybe we should have a Debug.Assert for when `Slab != null` to ensure that we are always returning the block (in our tests at least)."}
{"pred": "Shouldn't this be `!props.value`?", "gold": "Okay sorry about this I was really confused on how to support uncontrolled in this case, so what we want to do is apply `defaultValue` when `props.value` is falsy but not undefined, right? In the case of us seeing it is controlled (value & onChange present) we apply defaultValue to `props.value` (and delete props.defaultValue) In the case of uncontrolled we shouldn't enter this branch at all and go for full native dom behavior"}
{"pred": "This should be `@wordpress/i18n`", "gold": "`lodash` shouldn't be grouped under WordPress dependencies"}
{"pred": "Why do we need this label selector?", "gold": "The latest yaml in openebs/master has changed to name=admission-webhook. cc: @prateekpandey14"}
{"pred": "Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "using **an** Amazon Simple... Simple Notification **Service** (singular)"}
{"pred": "Shouldn't this be `!=`?", "gold": "Probably don't intend for this `1 ||` to still be here"}
{"pred": "Why did you remove this check?", "gold": "Looks like this is failing to compile on Windows (VS 2015 I think)."}
{"pred": "Why do we need this method? Can't we just set the `BeforeQuery` on the `Query`?", "gold": "nit: call the arg something simple like `f` to avoid repeating \"beforeQuery\"."}
{"pred": "Why do we need this?", "gold": "do you think this should be `osd/auth` as a pkg to make it more unique and void conflicts with other `auth` packages?"}
{"pred": ">Message [](start = 16, length = 6) Shouldn't this be localized?", "gold": "Why are you passing out the Message?"}
{"pred": "Why do we need to lock here?", "gold": "Yikes, this was a bug :grimacing:"}
{"pred": "Shouldn't this be `h.Manager.Subscribe`?", "gold": "I am not sure which one of these is considered idiomatic go... maybe @azdagron has an opinion here? /me prefers the verb since it's shorter. I guess I don't care _too_ much, but it would be good to get some general agreement so we are all following the same conventions"}
{"pred": "Why did you remove the scaffold check?", "gold": "Please check this for error and emit appropriate debugging information. I know this was pre-existing code, but we just have to fix things like this as we go."}
{"pred": "Why do we need this change?", "gold": "This seems unrelated, should be a separate PR."}
{"pred": "#include \"../engine_create_dispatcher.h\"", "gold": "Never use relative includes, prefer full path"}
{"pred": "I don't think you need the `str()` call here.", "gold": "This should fit on the line above without going over the 79-char limit, no?"}
{"pred": "Why was this removed?", "gold": "Is this related to the other contents of this pull request?"}
{"pred": "Why do we need this?", "gold": "Should this be `*string`?"}
{"pred": "Why are we removing this test?", "gold": "In the old code here there was no Source Selector, but CreateDefaultProfile will specify a Source Selector of `\"\"`. Is that equivalent?"}
{"pred": "I'm not sure if this is the best way to find the call site, but I don't have a better suggestion.", "gold": "We should pick this across for all our deprecation specs"}
{"pred": "I think this should be `kubectlBinary`", "gold": "Longer term, I think it could be valuable to move this to cluster-api, and then other repos could take advantage of this as well."}
{"pred": "Why is this needed?", "gold": "Is this a related change?"}
{"pred": "Shouldn't this be `instanceDescription.State != nil`?", "gold": "Given that this is repeated, can we do it outside here and the Create call, what do you think about moving it outside?"}
{"pred": "Why do we need this?", "gold": "Changing `prop`=>`col` by reference?   I think you can prepare map `prop`=>`col` in L51."}
{"pred": "nit: Add builtin attributes to the binary schema files.", "gold": "I hate to ask, but can we make this flag shorter so it lines up? :("}
{"pred": "why is this needed?", "gold": "Note to reviewers: latent, dedup import"}
{"pred": "Why do we need these methods?", "gold": "Seems this func is no more needed after your refactoring."}
{"pred": "I think this should be `^io\\\\.usethesource\\\\.`.", "gold": "already added (see several rows below)"}
{"pred": "Why do we need this?", "gold": "nit: a switch perhaps?"}
{"pred": "Why do we need this change?", "gold": "Great you caught this. Super critical to not retry these errors."}
{"pred": "Why do we need this change?", "gold": "Just a little change to make the var effectively final, which is clearer."}
{"pred": "Shouldn't this be `human.format_address(sc.ip_address)`?", "gold": "Using `\"{}\".format(...)` is a bit beside the point...  "}
{"pred": "Why did you change this?", "gold": "I think these should remain as they are."}
{"pred": "Why do we need this?", "gold": "Let's just call this PERF_PACKAGES and have them in the same format as WINDOWS/SLES/DEBIAN_PACKAGES constants - since it is only a single package and, as written, you'd have to update the code to add more package names anyway. Might as well be consistent with the rest of the code."}
{"pred": "Why not return `INVALID_PLUGIN_ID` here?", "gold": "We don't have a `getPluginIDfromTaskIndex` function? I think it should be implemented in Globals/Plugins.h / .cpp"}
{"pred": "Why is this needed?", "gold": "@shalinmangar If lazy field loading isn't enabled, I don't think this actually changes the behavior of `SolrIndexSearcher`, since it was previously ignoring the fields list anyway. What it _should_ do is allow certain distributed queries, like the ones in `DistribJoinFromCollectionTest`, to co-exist with `SolrIndexSearcher#doc()` respecting the `fields` set instead of just discarding it."}
{"pred": "`{{ .plugin }}-{{ .name }}-db` => `{{ .plugin }}-{{ .name }}-db`", "gold": "Should we be using version 3 now?"}
{"pred": "`$config_file = null;` ?", "gold": "Would be better to throw a more specific exception, but for now it will do."}
{"pred": "Why was this removed?", "gold": "We should not replace Wei with a type that is shared across multiple units. We need this as `Wei` for type and unit safety."}
{"pred": "I think this should be `if os.IsNotExist(err) {`", "gold": "I'm pretty sure this should emit a util.Warning*(), since we're skipping by here and never hitting anything that will give them a warning about what's happened."}
{"pred": "Why do we need this function?", "gold": "This function isn't useful? it's just a clone of GetParserWithBuiltins?"}
{"pred": "I think this should be `isCpuCircuitBreakerEnabled` and `isMemoryCircuitBreakerEnabled`", "gold": "I'm not sure if the boolean flags should always contain `is`, also I generally hate too long names... ;) we already know this is a section for circuit breakers, so the name doesn't have to repeat all of it. How about `cpuBreakerEnabled`, `memoryBreakerEnabled` etc?"}
{"pred": "Add a rewrite that replaces one set of deletes with another that contains the same deleted rows.", "gold": "Before we start the replacing equality deletes with position deletes, I think we need to refactor the RewriteFiles API to adjust more cases: 1. Rewrite data files and remove all the delete rows. The files to delete will be a set of data files and a set of delete files, and the files to add will be a set of data files. 2. Replace equality deletes with position deletes, the files to delete will be a set of equality delete files (we will need to ensure that all delete files are equality delete files ? ) , the files to add will be a set of position delete files. 3. Merging small delete files into a bigger delete files. The files to delete will be a set of equality/position delete files, the files to add will be a set of equality/position delete files."}
{"pred": "I'm not sure if this is the best way to do this. I think it would be better to use `I18n.default_locale` here.", "gold": "Layout/TrailingWhitespace: Trailing whitespace detected."}
{"pred": "Shouldn't this be the icon of the first category?", "gold": "Is it possible that the shortcuts list is empty?"}
{"pred": "Shouldn't this be `errors.Cause(err)`?", "gold": "This just changes the error message from `unable to save snapshot: [...] context canceled` to `canceled`."}
{"pred": "Shouldn't this be `HttpHeaders.CONTENT_LENGTH.equals(entry.getKey())`?", "gold": "maybe it's better to remove HttpHeaders.CONTENT_LENGTH after the loop"}
{"pred": "Shouldn't this be `<=`?", "gold": "Very cool. We are now collecting the fruits after your length implementation!"}
{"pred": "why do we need this?", "gold": "Is this the same copy of the rules file from above? If so, can just use the copy from above, and this can be dropped."}
{"pred": "Why do we need to start and stop the eni handler?", "gold": "Please break this into multiple lines."}
{"pred": "Why do we need this?", "gold": "Shouldn't this new line replace the few lines above?"}
{"pred": "I don't think this should be a built-in option.", "gold": "Perhaps this belongs in universe?"}
{"pred": "nit: `EPS` -> `epsilon`", "gold": "there is a `kEpsilon` you can use directly."}
{"pred": "Why this change?", "gold": "This should be grouped with the below imports, and the two separate groups of imports below should likely also be grouped together"}
{"pred": "Why not `const std::string &error_code`?", "gold": "It looks like this error_code field is used to return a string to the caller, not just a const input string to be consumed as in the rest of this PR? If so, my personal preference would be to leave it as a std::string* instead of a reference; I don't know offhand what the VL coding style dictates."}
{"pred": "nit: static const std::string prefix = kPartsTable;", "gold": "If return by value, then why bother to make it `static`?"}
{"pred": "This should be `utils.paste_version()`.", "gold": "You'll need to add docs for the argument, see e.g. the `debug_log_filter` docstring above."}
{"pred": "Why do we need this alias?", "gold": "`sdktrace` or `tracesdk`, pick one."}
{"pred": "Why did you remove these?", "gold": "can we return null instead?"}
{"pred": "Shouldn't this be `child_dead`?", "gold": "You mean XXX and \"we should\" or \"NYI\" or sthg. Maybe put it on the ifdef line."}
{"pred": "nit: can we call this `ImageImportLoggable`?", "gold": "minor: can be in-lined in return"}
{"pred": "Why do we need this change?", "gold": "why the additional \"\\n\"?"}
{"pred": "Shouldn't this be `return err`?", "gold": "This seems to be a big omission. If the first buffer reports an error, stream seems to just discard it."}
{"pred": "Why do we need this change?", "gold": "Maybe move this one down too?"}
{"pred": "Why is this readonly?", "gold": "We do this in lots of places I'm starting to notice...typically you'd avoid taking concrete dependencies, but we also avoid package dependencies as well which makes sense (i.e. not using an IoC, etc.). Any reason we don't implement some form of poor-man's DI and/or a simple factory instead of new-ing things up everywhere. This may be a simple example (as I'm guessing this is likely the only place this is ever or ever will be used), but separating them doesn't take any more time/effort either really."}
{"pred": "`fmt.Sprintf(formatPrefix, a...) + e.Error()`", "gold": "What if formatPrefix doesn't include a space? Will the resulting error have e.Error() stuck at the end without any space?"}
{"pred": "nit: add a period at the end.", "gold": "that doesn't say a lot to me. Can you please be more specific on the function of pushsync?"}
{"pred": "Shouldn't this be `VK_TRUE` instead of `VK_TRUE`?", "gold": "> subpass uses a depth/stencil attachment in renderPass with a read-only layout for the depth aspect Assume - VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL - VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL count as well seems there is a `NormalizeDepthImageLayout` for this"}
{"pred": "Should this be `BOXES`?", "gold": "This shouldn't be altered, you probably meant to update `AREA_PAGE_DASHBOARD_ALL_TRAFFIC` further below :)"}
{"pred": "`mount_volumes` is a list, not a dict.", "gold": "what does this change do exactly?"}
{"pred": "Why do we need a background context here?", "gold": "What's the purpose of this `backgroundCtx` field?"}
{"pred": "`FirstContractIncarnation` is unused (from `deadcode`)", "gold": "non contract incarnation"}
{"pred": "Why did you remove the try/except?", "gold": "I would recommend to leave out `None` because None is already the default."}
{"pred": "I don't think this should be a debug message.", "gold": "Should the \"bad hello message\" case above also disconnect?"}
{"pred": "Why do we need these two variables?", "gold": "Shouldn't this be in the child and not in the base plugin? Wouldn't having it here enable all derived plugins at once?"}
{"pred": "I don't think you need the `(options[:full_description] ||= [])`", "gold": "Should probably say REGEX or PATTERN rather than string."}
{"pred": "Why do we need this change?", "gold": "I felt we don't need to set it that strict, like if somehow pubsub happens to allow extra 20 bytes for metadata, this test won't work. We would suggest to use 11MB instead."}
{"pred": "`isset($metadata['associationType']) === true`", "gold": "In theory `isset($metadata['associationType'])` is `false` if the linked field is not an association field, isn't?"}
{"pred": "Style/PercentLiteralDelimiters: %w-literals should be delimited by [ and ].", "gold": "@tute the only thing I needed to enable this like as `password` is not in default flow anymore I think."}
{"pred": "Why is this needed?", "gold": "nit: to be consistent with `self.members`, please move this up one line, so that it's closer to `allUsers`? You will need to update your test reference."}
{"pred": "Why do we need this?", "gold": "we might as well just access `config.gClientVerbose` directly here. If any other options are passed to `gclientSync` or `gclientRunhooks` then the verbose option will be lost the way it's used now"}
{"pred": "Shouldn't this be `Log settings`?", "gold": "Change the key to `default_tab` instead and I'll merge this"}
{"pred": "Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.", "gold": "we still can end up passing a blank org_id to the scope method if for any reason the params is not present..."}
{"pred": "Shouldn't this be `value.getClass().getSimpleName()`?", "gold": "I think yes, this makes sense to expose this. +1"}
{"pred": "Shouldn't this be `| default \"/var/openebs/local\"`?", "gold": "let us put the sample yaml snippet i.e. maya api server deployment that makes use of this env & value"}
{"pred": "Why did you change this?", "gold": "What changed to cause this?"}
{"pred": "Why do we need to return nil here?", "gold": "Repeating big interface in many places shows smtg is wrong with design"}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.", "gold": "Inheriting from `AccountsController` to get access to the `redirect_if_disabled` filter."}
{"pred": "I don't think we need the Purpose tag.", "gold": "Simple Storage **Service**"}
{"pred": "", "gold": "Enter at the end of the file! :-D (and at the end of lines ;-) )"}
{"pred": "Should this be `scheduled_for_deactivation_on`?", "gold": "Put a comma after the last parameter of a multiline method call."}
{"pred": "Why do we need this check?", "gold": "Don't you want to place this check before you add `succ` to `newSucc`?"}
{"pred": "Why are these imports removed?", "gold": "Commit 676eeeab10884456a5f70ce708a8aa5116ecbaf7 contains a lot of unrelated code style changes. Please get rid of these."}
{"pred": "This should be `bokeh_version >= '0.12.6'`.", "gold": "Well this sucks, I wish you'd mentioned you were using a private API, perhaps we could have made a public one with better guarantees before `0.12.6` was released."}
{"pred": "why remove this?", "gold": "Consider instead moving this into an _test file so it's public but only usable in tests."}
{"pred": "I think this should be `logrus.Infof(\"Waiting for state transition to %q\", desired)`", "gold": "Any reason why we want to remove this code ? It helps debugging AWS ebs attach issues. Ideally yes a library should have minimal logging, but there is no way we can track long running AWS attach calls."}
{"pred": "I think this should be `scheduled_end_time`", "gold": "nit: indentation doesn't match (unfortunately i don't know of a way to automatically lint these sql statements with how we're using them currently)"}
{"pred": "Why do we need this?", "gold": "Should we remove the other `setup_profiler` call site and just let this be the one call site for it, since, AFAIK, the other one is no longer necessary with this? Also, can we make `setup_profiler` private?"}
{"pred": "Why is this removed?", "gold": "Are there any other templates where this command needs to be added, or were those issues specific to storage requiring us to enable a new command group?"}
{"pred": "Why are we removing this?", "gold": "perhaps file can be removed altogether (trying to avoid an empty package for these build tags)"}
{"pred": "Shouldn't this be `sizeof(mod)`?", "gold": "NULL change, could you move that out too?"}
{"pred": "Why do we need this function?", "gold": "A brief explanation about this func is required."}
{"pred": "I think this should be `IS_OVERLAPPING_WARNING_MESSAGE`", "gold": "Could you add description for below static function?"}
{"pred": "Why this change?", "gold": "Since this is only counting the failed attempts, can you call it failedAttemptsCount or retryCount instead of attemptsCount?"}
{"pred": "Why do we need this change?", "gold": "I don't think this will work."}
{"pred": "Why do we need this interface?", "gold": "Since http2 is coming do we want to call this something more specific?"}
{"pred": "Why did you remove the `content_tag`?", "gold": "I don't think we want to revert the accessibility issues the tool caught, do we?"}
{"pred": "I think this should be `connectionLimitEnabled && (rt.config.DisableLocalhostConnectionRateLimit || isLocalhost(trackerRequest.remoteHost))`", "gold": "I prefer naming this rateLimitedRemoteHost This can be local host but reads remote Host Is Non Local."}
{"pred": "`_lastDomChildSibling` -> `_lastDomChildSibling`", "gold": "Hmm I think I might've messed up this condition here... Need to look more at it"}
{"pred": "`package_stats is None or isinstance(package_stats, dict)`", "gold": "This also makes the exception to be raised on non-dict falsy values which I think was expected."}
{"pred": "Why do we need this change?", "gold": "Is this correct? The auto indexing behavior caused problems fixed in a recently merged PR..."}
{"pred": "I think this should be `<1.10`", "gold": "Hmm, didn't we just find out that 1.6 *does NOT* work? We should bump the minimum as well."}
{"pred": "Why do we need this?", "gold": "Will calling `abort()` cause problems for our test suite?"}
{"pred": "Shouldn't this be `expr_objectof`?", "gold": "for my own edificaton, what's this?"}
{"pred": "I don't think this is correct. If `ws` is `nil`, then `sf.currentChainHeight` will be `0`.", "gold": "make it harmless to commit ws == nil"}
{"pred": "`absOutExeReplacement` is unused (from `deadcode`)", "gold": "Hmmmm, I'm not sure I like these becoming a replacement any build rule has access to. It seems like if it were used in an actual build rule it would only be doing bad things. Can we just use `filepath.Abs` on the returned path in run_step.go?"}
{"pred": "nit: `return body, nil`", "gold": "That's actually not as bad as I thought it was going to be."}
{"pred": "Why do we need this method?", "gold": "Hmm, I'm surprised if we don't already have a \"find all unpublished datasets\" method but I don't really know. Maybe @scolapasta knows."}
{"pred": "I'm not sure if this is the right way to go about this. I think it would be better to just say \"on Python 3 these arguments are the default.\"", "gold": "The checks in this file are disabled by default since they are meant for Python 3 porting, and this one does not have to do with Python 3 porting at all."}
{"pred": "Why is this an interface?", "gold": "I would change \"should be sent\" to \"must be received\"."}
{"pred": "`// DeleteStoragePool deletes a StoragePoolClaim object.`", "gold": "Please put it in following way : `// DeleteStoragePool receives StoragePoolClaim delete event and calls the required handlers to delete other pool related resources.`"}
{"pred": "Should this be called `cse.uploads.fileSizeThreshold`?", "gold": "It's better to use servicecomb now."}
{"pred": "nit: `defaultRenewBeforeExpiryDuration * time.Duration`", "gold": "Make the flag derived default available in the readiness controller"}
{"pred": "Why do we need this test case?", "gold": "Confirmed this test fails when the fix is reverted "}
{"pred": "nit: `can't retrieve logs` -> `cannot retrieve logs`", "gold": "This method is still possible insecure as it may archive not only logs files. I suggest to filter file names to ensure that they start with `.mysterium-log*`."}
{"pred": "Why do we need this?", "gold": "DCN should not be able to use `init_cfg`."}
{"pred": "Should this be `nameof(spanContext)`?", "gold": "It is a bit weird to see a message like \"something must be valid\"."}
{"pred": "Why is this being changed to `finest`?", "gold": "Again. This is part of the start up of the server, and the diagnostics are helpful."}
{"pred": "This should be `should_not include_sexp`", "gold": "I think you need a `,` at the end of the line?"}
{"pred": "Please don't use wildcard imports", "gold": "Please avoid wildcard imports."}
{"pred": "Why do we need to set the timeout here?", "gold": "Did we consider making the timeout an argument to the build task? Would amke it easer to configure in the future: change a build property vs. rebuilding the DLL."}
{"pred": "nit: `if nodeConfig.NodeIPv4Addr != nil || nodeConfig.NodeIPv6Addr != nil {`", "gold": "dumb question: the commit message talks about dual-stack support but it seems that in a dual-stack cluster, Egress will only support the IPv4 address family?"}
{"pred": "Why this change?", "gold": "Do you want to cherry-pick these separately and get them merged already or keep it in here? Both is fine with me!"}
{"pred": "Why did you change this?", "gold": "Hmm what are these magical constant numbers? And why does this change mean they should increase?"}
{"pred": "Should this be `2.8.0`?", "gold": "This change shouldn't be included with this push. Shouldn't push version changes with a pull-request."}
{"pred": "I'm not sure if this is the right place to put this header. I think it should be in `callHandler` instead.", "gold": "nit: let's move this right under where we create the `responseWriter`, before `h.callHandler`"}
{"pred": "Why not `const mdb_store &store`?", "gold": "The way it was implemented, needed to pass the template values. Please check whether we want this."}
{"pred": "`period a node waits between mining successive blocks`", "gold": "Just FYI we need this to align with `builtin.EpochDurationSeconds` from specs-actors or the state machine computations will be off. We'll need to turn this into a config option and follow the same monkey patching paths as the min miner size, seal proof types etc. The EpochDurationSeconds is currently a `const` so can't do it yet tho."}
{"pred": "Why do we need this?", "gold": "Is this import needed?"}
{"pred": "Why do we need this?", "gold": "Dashboard stories also need to have the default padding."}
{"pred": "I think it would be better to have this as an enum instead of a boolean.", "gold": "Is there a reason why we wouldn't use this as the default?"}
{"pred": "I don't think we need this TODO anymore, right?", "gold": "if there is an tag of the same name?"}
{"pred": "Why was this removed?", "gold": "I'd add `// +build go1.10` to prevent from accidentally compiling with older Go."}
{"pred": "`safe_unicode` is not used in this file.", "gold": "Not sure how this import relates to the PR but seems like a good idea anyway..."}
{"pred": "Why is this needed?", "gold": "Hmm this is strange, why should the SettingsStruct import something from `WebServer` ? If that's really needed, then we must move stuff as it makes no sense to have some code related to viewing things included in a settings struct. It should be the other way around."}
{"pred": "Why is this needed?", "gold": "nit: Space between these lines."}
{"pred": "I don't think you need the `translator` argument here.", "gold": "Why aggregator should have this translator? It's Selenium specifics for now..."}
{"pred": "Why do we need this method?", "gold": "I don't understand why this function is needed ? Can't you just pass the information when the `DocComparator` is created in the SortField ?"}
{"pred": "I don't think we need to rescue `Gibbon::MailChimpError`.", "gold": "This rescue is repeated exactly in `app/jobs/mailchimp_removal_job.rb`. Could we extract a method and pull it up into `MailChimpJob` for reuse?"}
{"pred": "Why do we need this?", "gold": "It's not directly related to this PR, but it would be nice to flow the original error as we're going to print that if the promise is rejected and it'll be more informative than the vague `Network request failed`. Also, I'm not a js dev, so maybe I'm wrong, but throwing a TypeError feels a bit odd."}
{"pred": "Shouldn't this be `wlr_log_errno`?", "gold": "Can we print a debug message when this is used? Since it's a debugging variable, I wouldn't want users to have issues because of a left-over env."}
{"pred": "Why do we need to disable this?", "gold": "Should we have an avatar, truncate, etc examples, too?"}
{"pred": "Why was this removed?", "gold": "could you add this to `docs/source/reference/indexing.rst` ?"}
{"pred": "Why this change?", "gold": "Why the change from rdkit.six to six?"}
{"pred": "I don't think you need the `and not requestOptions.get('localOnly')` here.", "gold": "Looking good, let's just move this inside the `if` to avoid doing the extra work if we don't need it."}
{"pred": "I think this should be `/This batch has already been executed/`", "gold": "I think we should change this to an instanceOf check for MongoBatchReExecutionError"}
{"pred": "Why do we need a new converter here?", "gold": "Required by the libcalico-go changes"}
{"pred": "`blockNotFoundError` or `blockNotFound`?", "gold": "Explain why we don't reuse the corresponding server error locally?"}
{"pred": "Shouldn't this be `this.dateToDisplayOnCard`?", "gold": "@JayanthyChengan This change is still missing (and should be last one!): change this line to call getDateToDisplayOnCard(), that way the logic is in only one place (that method)."}
{"pred": "why remove this error?", "gold": "What was wrong with more concrete error?"}
{"pred": "This should be `post/page slug`", "gold": "can you replace the tabs with 2 spaces please to match the rest of the project?"}
{"pred": "Why do we need this?", "gold": "Why are we adding it to the integral function?"}
{"pred": "This should be `msg.ID.Daddr.FromIP(state.Dst)`", "gold": "Same for this file"}
{"pred": "Should this be `out FileCharacteristics? fileCharacteristics`?", "gold": "Looks good! But why it's still a out parameter? We can refactor the whole tree because it's internal?"}
{"pred": "Why do we need to cancel the grab here?", "gold": "probably better to use `wlr_seat_keyboard_end_grab()`."}
{"pred": "Shouldn't this be `transaction.getChainId().isEmpty() || configuration.isUnprotectedTransactionsAllowed()`?", "gold": "Such a large test impact for such a little 3 line change ;)"}
{"pred": "`inversedBy=\"payments\", cascade={\"persist\"}`", "gold": "Is the `cascade` necessary? It should work also without the casdade, because Payments are always already persisted when use cases with them. If it doesn't work, please tell me the reason. It is as same in Transport."}
{"pred": "Missing license header.", "gold": "This is not very short. I'm not sure sure if there's a system for assigning shortcodes to issues."}
{"pred": "I think this should be `certmanager.k8s.io/ingress`", "gold": "We should probably prefix this with `acme-http01` to bring it in-line with other annotations, e.g. `certmanager.k8s.io/acme-http01-edit-in-place`. It's quite wordy, but it *is* more specific (and I'd hope more obvious to the user what it is for?)"}
{"pred": "nit: remove extra space", "gold": "No need to add this file change for this PR. Please remove it."}
{"pred": "Why do we need this constant?", "gold": "this extra dot at the end is causing a couple tests to fail on Travis"}
{"pred": "I don't think you need the `str(kargs.get('iface') if 'iface' in kargs else conf.iface)`", "gold": "Did you try using `global` with a regular integer ?"}
{"pred": "Why did you change this?", "gold": "windows size might be off"}
{"pred": "Why is this being removed?", "gold": "This should still be guarded with an `#ifdef` since the DataMan code will only be supported for shared lib builds."}
{"pred": "`@hash[:attribution].length > 1 ? _(\"Creators: \") : _('Creator:')`", "gold": "thanks for cleaning up these old length checks  "}
{"pred": "I don't think we need to log the namespace here.", "gold": "What will be logged when the `Input.Namespace` was not specified?"}
{"pred": "I think this should be `true` by default, and the default should be `false`.", "gold": "I wouldn't expose this until the feature is ready. We are most likely to cut releases while still in development"}
{"pred": "Why is this needed?", "gold": "I don't think we should pull aria-query into axe-core at this point. There's a much simpler fix for this. Please don't overthink it."}
{"pred": "Why is this being made public?", "gold": "@ejsmith What if instead of making these two methods public we made it a partial class and moved them to a separate file so that file could be part of the include list? I bring it up just because I don't think it is a very nice API that was ever intended to be public? I think they are only called by a couple of other very internal-y spots. /cc @reyang"}
{"pred": "`Trigger.TriggerBuilder` -> `Trigger.Builder`", "gold": "would be good to turn these into constants."}
{"pred": "This should be `// +build !wireinject`", "gold": "Seems like it should be `generated by Wire` here and in the SUT?"}
{"pred": "Why do we need to pass `false` here?", "gold": "I know the main cases show up in the daemon test already but a little bit more unit test coverage would be nice and probably not too annoying to set up. Ideas: 1. Verify that the string \"no duplicates\" is in the LastDuplicate field when we propose a new deal. 2. Verify that proposing a duplicate deal fails when the duplicates boolean is set false. 3. Start out in a state with more than 1 duplicates. Verify that the LastDuplicate field is set to the last duplicate when we propose with a true duplicates bool."}
{"pred": "nit: `timeout milliseconds should not be below 0 or infinite, but was: {timeoutMilliseconds}`", "gold": "`Timeout.Infinite` is actually `-1`. Here the correct message can be taken from Line:67."}
{"pred": "Why is this needed?", "gold": "I think we need `#if !SILVERLIGHT` here and at the test."}
{"pred": "This import is not needed.", "gold": "Can you change this import to the apache dependency? I didn't even know that jgit contains such a method..."}
{"pred": "Why do we need this change?", "gold": "Four strings in a row makes me nervous, can we use an arguments struct instead? Or reuse the struct I recommend in the reconciler."}
{"pred": "Should this be `-A` instead of `-j`?", "gold": "should work with no options, if my suggestion is accepted. JSON is the one that gets weird since a JSON object appended to a JSON object isn't valid JSON."}
{"pred": "Check uploads with indeterminate file size.", "gold": "I presume this isn't some special term..."}
{"pred": "Shouldn't this be `headingLength > paragraphLength`?", "gold": "Did you mean to return here? ;) You'll also need to add an `incomplete` message to the rule metadata."}
{"pred": "Why do we need this annotation?", "gold": "Why are we calling these as annotations? I guess this is an old type that we are re-using. But lets make it a point to avoid once we feel that this design/code is not good."}
{"pred": "Why do we need this?", "gold": "`invocation.getInvocationStageTrace().startSend()` is inside `RestClientSender.send`"}
{"pred": "I think this should be `actHash`", "gold": "use \"actionHash\" to be consistent with other places"}
{"pred": "Why is this change needed?", "gold": "Can we derive `Class<E>` by looking at one of the label choices, if at least one is always provided? Given these are immutable, a real-world case for an empty enumerations eludes me."}
{"pred": "Shouldn't this be `VK_COMPONENT_SWIZZLE_ZERO`?", "gold": "I am now confused here, the spec says > If format is VK_FORMAT_UNDEFINED, all members of samplerYcbcrConversionComponents must be the identity swizzle. The spec also says > samplerYcbcrConversionComponents is the component swizzle that **should** be used in VkSamplerYcbcrConversionCreateInfo. so you are allowed to set the swizzle to anything I want, so I guess this is valid usage here... but now I am more curious if I have an external format does it not have to follow any component swizzle rules and can be anything regardless of the `ycbcrModel`? (I guess really a question for @critsec and is not a blocking concern for the scope of this PR)"}
{"pred": "Should this be `platform.SiteRunning`?", "gold": "I'd say the error should be an error, not instructions to the user. So error would be something like \"site should be running and is not\""}
{"pred": "Why do we need this?", "gold": "Thanks for this PR @pinzon !   Rather than resetting the `sms_messages` list, can we fix the assertion in line 902 - rather than asserting `len` equality, we should assert that all expected messages are contained in the list. (In this case the phone numbers should be reasonably random, and ideally we should not have duplicates across different tests). We're planning to introduce test parallelization in the near future, and this will help us avoiding undesired side-effects.   Thanks"}
{"pred": "nit: `stats_dto` -> `statsDTO`", "gold": "Some weird blocks formation again."}
{"pred": "why this change?", "gold": "This is worrisome."}
{"pred": "Why do we need to expose this API?", "gold": "nit try rephrasing to something like \" AutoFilesystemTrimUsage returns the volume usage and trimmable space of locally mounted pxd volumes\""}
{"pred": "Should this be `/opt/puppetlabs/agent/bin`?", "gold": "currently the puppet-agent package doesn't symlink files into /opt/puppetlabs/bin. Also many puppet acceptance tests that execute on Unix assume puppetbindir is a single directory (windows doesn't have this issue). So I think if we want to unblock testing, this should just be changed to `h['puppetbindir'] = '/opt/puppetlabs/puppet/bin`"}
{"pred": "Should this be `database.configDB`?", "gold": "any point in keeping this here ?"}
{"pred": "Why do we need to change this?", "gold": "I don't think we need this check. Instead `Entries.merge` should check that its argument is correctly sorted (in addition to the existing pre/post check on the method receiver)."}
{"pred": "Why is this needed?", "gold": "This is not really good to mix different code bases. @TheMarex I understand the point about placing code into cpp file, but we still need to move templated version into an impl header, remove references to offline code here and keep template instantiations in a cpp file to avoid rebuild. So offline code could instantiate own implementations using private impl headers. Otherwise we again make wrong dependencies into OSRM code and block changes in separate projects."}
{"pred": "Why do we need to return here?", "gold": "Then, where is it removed?"}
{"pred": "why is this needed?", "gold": "The tests are not run concurrently? (I don't know. Better check.)"}
{"pred": "Why was this changed?", "gold": "Regardless of scale?"}
{"pred": "nit: `(or semicolon separated list: ip:port;ip:port...)`", "gold": "Nit: should not we hide them from printing out?"}
{"pred": "Why did you remove this?", "gold": "What is the reason to modify those things? I noticed it breaks the examples using `asyncio`"}
{"pred": "Why change this?", "gold": "WHOOOOOOOPS! so this is a wire protocol breaking change. I deployed a dev version of yarpc 1.9 to demo-yarpc-go and it caused bad request errors because it couldn't determine the procedure anymore. (in coordination with yarpc-prober)"}
{"pred": "Shouldn't this be `Set<string>`?", "gold": "if we keep this, can we stick to our convention of using UPPER_CASE for constants? Otherwise this looks like a floating variable to me."}
{"pred": "`getattr(self.underlayer, \"seq\", self.seq)`", "gold": "You probably don't want to assume that `self.underlayer` has a `seq` attribute."}
{"pred": "`$container->get(Translator::class)` can be replaced with `$container->get(Translator::class)`", "gold": "This apparently breaks the language selection."}
{"pred": "Line is too long. [83/80]", "gold": "since we're not using mysql, do we need this migration?"}
{"pred": "I think this should be `os.environ.get(\"PARTITION_ADJUSTMENT\", \"false\")`", "gold": "i'm not sure about htis naming here. both the word partition and adjustment are very ambiguous and it's not clear what it does. i would maybe go for something less generic and more concrete like `GOV_CLOUD_SUPPORT`"}
{"pred": "`fetchUnfinishedFlows` -> `fetchUnfinishedExecutions`", "gold": "unfinishedFlows might not be the same as activeFlows. Will it cause confusion here?"}
{"pred": "This should be `Example_watch`.", "gold": "Same, remove the error handling."}
{"pred": "Why do we need this change?", "gold": "We should not change this at this time."}
{"pred": "nit: \"in order\" -> \"in order\"", "gold": "We may also update the docstring in the AnchorGenerator's arguments at around line 15."}
{"pred": "`inserted.first->second->commandBuffer` can be `nullptr`.", "gold": "FormatHandle isn't current typesafe w.r.t. requiring *VULKAN* handles... so this slipped through."}
{"pred": "nit: remove empty line", "gold": "What kind of dependency is here, I think we have own implementation of event wo external dependencies"}
{"pred": "Shouldn't this be a `Kokkos::abort`?", "gold": "Throw an exception instead"}
{"pred": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "gold": "we shouldn't need the `FactoryBot.` in these. Ok to leave for now since all of these specs have them. Can clean up later"}
{"pred": "Shouldn't this be `Storage::url()`?", "gold": "Isn't the better option to actually do `$this->getDisk()->url($uploadsPath)` without changing the filesystems config? Not sure why you think that change is required but it's definitely not getting merged."}
{"pred": "Shouldn't this be `itemmethod.parent.frame()`?", "gold": "Not sure if we need this. It's not tested because it only guards against a new conditional definition of a dunder method in a built-in package. I am fine with leaving it out."}
{"pred": "Does this need to be public?", "gold": "Is this the only task in this library? If so this is good, if not then we should do it for each task."}
{"pred": "Why did this change?", "gold": "I am not sure what is 120 and what is 10. Hence unable to review."}
{"pred": "Why do we need this?", "gold": "Not needed anymore"}
{"pred": "nit: `Pingpong exposes the simple ping-pong protocol`", "gold": "Please not abbreviations"}
{"pred": "I think this should be `r.Retryable = aws.Bool(true)`", "gold": "This shouldn't get stomped over on line 207"}
{"pred": "nit: zero indexed -> zero indexed", "gold": "are they not 1-indexed?"}
{"pred": "Shouldn't this be `lastTime.CheckTimestamp`?", "gold": "I know that previously this check was here but @ralph-pichler replaced it with the `CheckTimestamp` field stating that checking against `Timestamp` was incorrect. @ralph-pichler can you elaborate?"}
{"pred": "I think this should be `rc` instead of `rc`", "gold": "`short_version = __version__`"}
{"pred": "//snippet-keyword:[AWS SDK for Java v2]", "gold": "AWS Identity and Access Management (IAM)"}
{"pred": "Why is this needed?", "gold": "Required for the SparkDataFile SerDe"}
{"pred": "Shouldn't this be `return !in_value.IsBaseClass();`?", "gold": "Do you want to make this an assertion instead?"}
{"pred": "Why did you change the year?", "gold": "When updating the copyright, we tend to cover previous years, not just the current. So, if we started the file in 2015, we'd update to say 2015-2016. I'm not sure if there's a legal requirement surrounding this, but it's the convention we and many others have adopted for code."}
{"pred": "Would it make sense to move this check into `getHead` so we don't have to do it twice?", "gold": "Wait, so it looks like this function is called _every_ time we fetch the root node, i.e. we do an MD head fetch every time we fetch the root node? Not for this PR, but it seems like we should make that unnecessary, since this function only ever does anything when head is `nil`, i.e. the first time. Maybe add a TODO?"}
{"pred": "Why did you remove the `fld` argument here?", "gold": "Why are you changing this?"}
{"pred": "Why do we need a pointer here?", "gold": "`json.RawMessage` is a `[]byte`, which is already a pointer. Why do we need to have pointer here if we just reading this value?"}
{"pred": "Shouldn't this be `PluginSupports`?", "gold": "should we actually switch to `All` or just add `0.4.0` explicitly to the list of supported CNI versions? What is a new CNI version is released?"}
{"pred": "nit: group with other stdlib imports", "gold": "pylint might complain that this isn't alphasorted?"}
{"pred": "Why do we need this?", "gold": "It seems that NetworkService is behind a feature flag because it's still experimental. If we see new issues, we should look at flipping this back off."}
{"pred": "Why do we need this function? Can't we just return `*ts`?", "gold": "I think it makes more sense to have this be a method on TaskStatus. Also, nit, Backend, not BackEnd."}
{"pred": "Why do we need this?", "gold": "Could you please elaborate on why you need all this magic here? In which cases do you want the same id to be returned? Does this work the same way for all backends?"}
{"pred": "nit: `PluginsConfigs` -> `Plugins`", "gold": "nit: `PluginConfigs` feels a little better"}
{"pred": "Why was this removed?", "gold": "think we need to find out the root-cause and fix, instead of just removing `NoError`? it erred b/c `context canceled`, so call this before context cancelled is the right fix"}
{"pred": "I don't think we need to worry about blocking the `Get` here.", "gold": "Please expand \"later behavior\". Presumably something to do with the prefetch logic?"}
{"pred": "Shouldn't this be `swarm.ZeroAddress`?", "gold": "The `response` variable is not used, it can be removed, also the fmt.Errorf."}
{"pred": "Why not just `return value?.Length > 0`?", "gold": "Do you find this really easier to read?"}
{"pred": "`NABoolean` -> `bool`?", "gold": "A small nit: This variable should start with a lower case letter."}
{"pred": "Shouldn't this be `pageStreaming.getRequestTokenFieldName()`?", "gold": "Where is this used for Node?"}
{"pred": "I think this should be `<provider-id>`", "gold": "Is `<your-id>` really easier to understand than `<your-identity>` for CLI user? For me, `identity` seems like a concept we use publicly, and `id` is just an internal shortcut for it."}
{"pred": "Shouldn't this be `if newGroup.ServiceReference != nil {`?", "gold": "nit.. `if` .. `else` for logging probably can be avoided.. maybe only log that an internal group was created for cluster group"}
{"pred": "This import should be grouped with the other `github.com/aws/amazon-ecs-agent` imports", "gold": "There's a lot of changed tests -- but no new tests. You need unit and integration tests for this."}
{"pred": "Shouldn't this be `AcceptTxResult.GasLimitExceeded`?", "gold": "WithMessage what gas limit is?"}
{"pred": "Why are we skipping this test?", "gold": "Why are these skipped?"}
{"pred": "Why do we need this?", "gold": "We'd better add the `json:\"metaServer,omitempty\"` here"}
{"pred": "Why do we need to disable pip version check?", "gold": "So... when we want to install mitmproxy with pinned dependencies, we first install all pinned dependencies, and then in a second step install mitmproxy as editable, making sure that no additional dependencies are sneaking in.  "}
{"pred": "I think this should be `return fmt.Errorf(\"Failed to exec %s: %w\", cmd, err)`", "gold": "not sure how this got in master, but the linter is unhappy about it so I fixed it here"}
{"pred": "nit: `5 * time.Minute`", "gold": "No need for this TODO anymore, right?"}
{"pred": "I don't think we need the `\\` here.", "gold": "I would assign the key you're looking for into a variable first, and then use it in the comparisons."}
{"pred": "`unset($this->plugins[$this->normalizeIdentifier($id)]);`", "gold": "Would be better to normalize it at the start of the method to pass through to all the other calls"}
{"pred": "`$this->vars['safeMode'] = $this->parentForm->isSafeMode();`", "gold": "This can't exist here either because the code editor can be used on other models than CMS templates. You could probably implement this as a `hint` property (so `hint: cms::lang.cms_object.safe_mode_enabled`) on the codeeditor formwidget instead though and I'd be fine with that."}
{"pred": "`log.exception(\"Can't scroll\")` -> `log.exception(\"Cannot scroll\")`", "gold": "This line is unnecessary."}
{"pred": "Why is this no longer needed?", "gold": "How did this compile in the first place? Is there a matching declaration in a header that should be removed too?"}
{"pred": "h2o_mruby__abort_exc(mrb, \"h2o_mruby_new_str:precondition failure\", file, line);", "gold": "Please remove the colon at the end, and merge the PR once the CI succeeds. Thank you for the PR."}
{"pred": "Why are these removed?", "gold": "whoops. this should be protoc-gen-doc, since that is the only bit left that is built out-of-tree (everything else is either downloaded or built via modules already depended on by spire's go.mod)"}
{"pred": "Why do we need this interface?", "gold": "The convention is to use <p> see the google style guide and use checkstyle to check. You can change it later."}
{"pred": "`self.list_marker` and `self.item_marker` don't seem to be used.", "gold": "Using non-keyword args after the keyword arg (parent-self) will cause a SyntaxError."}
{"pred": "I don't think you need the `.empty?` check here.", "gold": "I think you'll want to add some YARD docs to this method to get the PR approved  "}
{"pred": "`@out_variant will be set to %NULL and the function will still return TRUE.`", "gold": "Hmm, AFAICT `*out_variant` isn't explicitly set to `NULL` in the `ENOENT` case."}
{"pred": "nit: `Failed to create TLS client`", "gold": "Nit: \"Failed to configure TLS for SDK client\"?"}
{"pred": "This should be `f'Histogram for feature {gbm1.booster_.feature_name()[27]}'`", "gold": "please update your branch to the latest `master`. This change was already made in #4359"}
{"pred": "Please remove this empty line.", "gold": "This line should be formatted"}
{"pred": "I think this should be `block_processor_transaction_batch_write_size`", "gold": "\"default 65536\" Not sure if it's important to state, but block_processor_full_size has a different default for fast_bootstrap."}
{"pred": "Why is this added?", "gold": "remove unnecessary whitespace changes"}
{"pred": "Why is this removed?", "gold": "Are these conditions covered elsewhere ?"}
{"pred": "Why do you need to check both name_id and out_data.name_id?", "gold": "the above check (by transitivity) checked for `in_data.name_id == out_data.name_id && in_data.name_id != EMPTY_NAME_ID && out_data.name_id != EMPTY_NAME_ID`. The final check of `out_data.name_id != EMPTY_NAME_ID` is missing now."}
{"pred": "This should be `return FPGA_INVALID_PARAM`", "gold": "The event handle is being passed by reference, so the dereference on 591 is actually correct. To follow the convention that variables be declared before executable statements, please change the code to the following: struct _fpga_event_handle *_eh; fpga_result result = FPGA_OK; int err = 0; if (!event_handle) { return FPGA_INVALID_PARAM; } _eh = (struct _fpga_event_handle *) *event_handle;"}
{"pred": "Why is this header needed?", "gold": "reorder includes to be alphabetically ordered"}
{"pred": "`need_unmap` -> `unmap`", "gold": "Rename `need_unmap` to `unmap`."}
{"pred": "Why was this removed?", "gold": "In line 28, it has been declared twice, so removing `cm` should not impact, can you explain me little bit? :)"}
{"pred": "Why do we need a lock here?", "gold": "i don't think these unexported functions belong on the public interface, they can exist solely on the struct."}
{"pred": "Why do we need to copy the dispenser?", "gold": "I'm not entirely clear on why this is necessary?"}
{"pred": "Why is this cast needed?", "gold": "Why do we need to cast to `str` here?"}
{"pred": "Why is this test ignored?", "gold": "The ignore import above should be unused now and can be removed."}
{"pred": "Shouldn't this be `query.visit(v);`?", "gold": "redundant null check?"}
{"pred": "Shouldn't this be `Available: m.Available`?", "gold": "initialization of available ram is here"}
{"pred": "I don't think you need the `\\u202B` here.", "gold": "Can have negative numbers with the '-' on the right (`10-`) by just using line 610."}
{"pred": "//snippet-keyword:[AWS SDK for Java v2]", "gold": "AWS Identity and Access Management (IAM)"}
{"pred": "Why this change?", "gold": "Shouldn't we use store a message which indicates that there was no available checker command? By the way how is it possible that metadata.json doesn't contain the checker command? Maybe this was the case in the earlier versions?"}
{"pred": "Why do we need this method?", "gold": "Given that this is a boolean predicate, maybe it should be `full_backtrace?`."}
{"pred": "Why did you change this?", "gold": "Just curious why the blank line here?"}
{"pred": "This should be `netlib` not `mitmproxy`.", "gold": "I like the idea, but we don't want a dependency on mitmproxy in pathod."}
{"pred": "Why do we need this? Can't we just use the `Tags` property?", "gold": "Why not adding this to the interface and keep passing the interface (as the interface is internal I don't get why you're not adding it there)"}
{"pred": "from astroid.const import PY310_PLUS", "gold": "`PY310` should probably be imported from `pylint.const`"}
{"pred": "`GetValueAsBool` is unused (from `deadcode`)", "gold": "Can we propagate this error up the stack?"}
{"pred": "Why do we need to create a new table here? Can't we just use the existing one?", "gold": "Why reference is converted to table?"}
{"pred": "Shouldn't this be `assert(desktop->views);`?", "gold": "You shouldn't use assert for runtime errors."}
{"pred": "Why do we need all versions of IE?", "gold": "Does this really belong in the vendor directory if you wrote it? At very least, should it get its own repo somewhere in addition to being dropped here?"}
{"pred": "Why did you change this test case?", "gold": "I think it would be better to place the rule name before the message. Messages are of varying lengths and the rule names will end up misaligned"}
{"pred": "I don't think you need the `- %s` here.", "gold": "Can we remove the argument from this message? A message will include a line number already that points to the place in the code that has the problem. I think we can remove it."}
{"pred": "Why does this need to be virtual?", "gold": "This whole class is now a mix of virtual and non-virtual. I tried to see what would happen if I made everything non-virtual in dev, and the build still passes. It turns out that none of the other methods actually need to be virtual. Can you make *all* the logging methods either virtual or not for consistency? Thanks."}
{"pred": "Why do we need a new flag for this?", "gold": "This looks a bit cryptic to me, and also it contains a dash. How about `mymysterium.url`?"}
{"pred": "Add a new line at the EOF", "gold": "You did notice the no newline at the end of this file, right?"}
{"pred": ">relevant to the result. [](start = 16, length = 19) I don't think this is correct. This is the set of code flows that are relevant to this result. #Resolved", "gold": "Here's the object model change. `CodeFlows` is a set of objects of type `CodeFlow`, rather than a list of list of `AnnotatedCodeLocation`. Exactly parallel with `Stacks`."}
{"pred": "nit: `from .config import BAN_PUBLIC_USERS`", "gold": "Sorry, one more thing... You should use `app.config` instead of importing it directly. See the code below."}
{"pred": "Why do we need this?", "gold": "This was correct before; \"setup\" is a noun and \"set up\" is the verb form."}
{"pred": "Why do we need to set `maybeSetAccount: true`?", "gold": "What's the reason for this change here? I didn't see it mentioned in the PR and it's a bit of a confusing param name  "}
{"pred": "Shouldn't this be `this.storage.config.localList.get().map(function( package ){ return { ref: package, score: 1 }; })`?", "gold": "I wonder why ~ and not a wildcard instead?"}
{"pred": "`if (beanCls == null)`", "gold": "when will this happened? if happened, just ignore it Silently?"}
{"pred": "nit: \"make one\" -> \"make one\"", "gold": "3x the smaller size would be around 17k, and we need it to be at least about 13k, which is 2x the larger size. I'd probably set this to 15k to split the difference and hopefully avoid needing to update this again as tests change. This is minor, though."}
{"pred": "I don't think you need the `str()` here. `type(input)` is already a string.", "gold": "@scottpurdy, strictly speaking, should this scenario raise a ValueError exception instead of AssertionError?"}
{"pred": "nit: typo in \"where\"", "gold": "Can you please add open source disclaimer?"}
{"pred": "Why do we need this change?", "gold": "I dont want to do composite keys on purpose to verify at compile time if the message is completely filled out appropriately @sectioneight"}
{"pred": "Why is this needed?", "gold": "don't need this line, since it is not tested in api_test?"}
{"pred": "Why do we need this change?", "gold": "Does this mean the list operation is done for all the namespaces? How to list the volume replicas per namespace?"}
{"pred": "`class_agnostic` -> `class_agnostic_`", "gold": "I suggest adding `class_agnostic` as an argument of `batched_nms()`, with the default value False."}
{"pred": "Why do we need this?", "gold": "@rdblue, did we not add the name on purpose?"}
{"pred": "Why do we need to make this public?", "gold": "Why is this now public?"}
{"pred": "Style/TrailingCommaInHashLiteral: Put a comma after the last item of a multiline hash.", "gold": "I guess we should backport some deprecation for this?"}
{"pred": "Why this change?", "gold": "Moving this code inside the last case statement doesn't seem right. Why are we defining `name` and `is_relative` variables there if we aren't using them anywhere?"}
{"pred": "`DR_REGARG` -> `DR_REG_ARG`", "gold": "I would say just change REGARG: no need for a separate thing."}
{"pred": "Shouldn't this be `<%= yield %>`?", "gold": "we can remove this template, it is no longer in use"}
{"pred": "Why did you remove this test case?", "gold": "This doesn't look like it has as much coverage of the recursive code as it once did."}
{"pred": "I think this should be `// +optional`", "gold": "Do we actually expect users to provide more information here than possibly a SecurityGroup ID? If not, then this should probably use a new type, otherwise users might be confused by what options would be respected/ignored when used in this context."}
{"pred": "why is this needed?", "gold": "This seems like a new dependency on rometools. Do we need it?"}
{"pred": "Why did you change this to `fine`?", "gold": "Waiting for the pull takes a long time. This message informs the user that at least one of the images being pulled is available. Please leave."}
{"pred": "Why is this being removed?", "gold": "I can not think in a good use for it, but may we allow a way to setup a fake with a hook for logs? this fake is special, and we may need access to some of thoe logs, at the same time it may be an overkill because we dont want to test \"sql\" implementation but results.. but we can create some tests with end to end logs in some scenaries, What do you think about it?"}
{"pred": "Shouldn't this be `if(value_env)`?", "gold": "I don't think you should be changing the dag unilaterally at parse time. If cores isn't specified, then it isn't specified."}
{"pred": "nit: \"or it will be redelivered\"", "gold": "Instead of just \"See SubscriberOptions....\", say something like \"Use ... to choose between the two.\""}
{"pred": "This file should be named `cdk2.smi.py`", "gold": "Use with statement for `f`"}
{"pred": "I don't think you need the `\\n`", "gold": "It's a small style point, but could you remove the \"extra\" space before the colon that precedes the return type? This would make it more closely match the prevailing style in these tests and in the standard libraries."}
{"pred": "Why is this not supported by MDOpsStandard?", "gold": "seems clunky to me to have an `MDOps` interface method that some implementations don't implement. Perhaps define a separate interface, like, `BranchResolver`, and then callers that have an `MDOps` object can check via type assertion?"}
{"pred": "Why do we need this change?", "gold": "This change should also probably go into the corresponding method of the abstract By class?"}
{"pred": "File is not `goimports`-ed", "gold": "File is not `gofmt`-ed with `-s` (from `gofmt`)"}
{"pred": "Error return value of `buf.WriteTo` is not checked", "gold": "This is likely to return an error value if the client fails to read the response we write, which is why I chose to ignore this error."}
{"pred": "nit: `is_upfront_shutdown_script_enabled` -> `is_upfront_shutdown`", "gold": "this method is not used"}
{"pred": "Why do we need to reapply here?", "gold": "Right now it's a bit unclear that this needs to be called explicitly by the implementing class. If, for example, there's another backend, it won't get this update unless we add the same function as webkit. Could you either add a note to this docstring explaining that this needs to be called, or find some way to automatically trigger this so the webkit override isn't needed (and some override passed on webengine)."}
{"pred": "Why did you change this?", "gold": "Why this change (test name still says \"must pass with metadata\")?"}
{"pred": "Should this be `force_187_p371_or_later`?", "gold": "Another nitpick: parens around the arg pretty please"}
{"pred": "Why was this removed?", "gold": "This spec can be modified, giving you extra strength (Check this fetch key doesn't work and therefore returns `nil`)"}
{"pred": "Should this be `caddy_rewrite_original_uri`?", "gold": "Oh, I guess I mentioned/pressed this point in the other issue, that this should probably go into the httpserver package. In fact, so should the const above this (URLPathCtxKey). These are specific to the HTTP server."}
{"pred": "Shouldn't this be `cmmeta.TLSCAKey`?", "gold": "Not added by you, but we don't really need the '5' here.."}
{"pred": "Why was this removed?", "gold": "The vendor prefix is still being used on Chromium based browsers like Edge Chromium and Chrome. Did you mean to remove this?"}
{"pred": "Why do we need this?", "gold": "I don't think this is needed anymore?"}
{"pred": "Why is this a helper function?", "gold": "This is the only occurrence I see in the code where we now need to convert from a boolean protobuf wrapper to a boolean pointer. This felt a little cumbersome here; should we consider moving it somewhere else as a helper function?"}
{"pred": "Why did you remove this?", "gold": "Need you to delete the `version_` from `HostInfo` struct ?"}
{"pred": "`return primaryLangValue === primaryXmlLangValue;`", "gold": "This could be the cleanest looking check we've got. Great job Jey."}
{"pred": "Expected 1 space after closing parenthesis; found 0", "gold": "Who invited yoda?   In all seriousness though, wouldn't an `if (empty())` be better here?"}
{"pred": "Shouldn't this be `appRouter.showDirect('/')`?", "gold": "You can use `appRouter.goHome` to do this (It's defined in site.js), it's less hacky than overriding the href."}
{"pred": "I think it would be better to use `std::find_if` here.", "gold": "When could this happen?"}
{"pred": "Why was this removed?", "gold": "I assume this was removed because it was redundant? and conflicted with the now dynamic contentType? Edit: Oh I see it being set was moved to the `PostSegmentAsync` call."}
{"pred": "Why do we need this method?", "gold": "Here is a newline missing"}
{"pred": "Use the new Ruby 1.9 hash syntax.", "gold": "Did you mean to make this http rather than https?"}
{"pred": "This should be `obj.name.replace('&', '&amp;')`", "gold": "The updated copyright header should be: # Copyright (C) 2006-2018 NV Access Limited, yourname"}
{"pred": "`$worstStatusCode = null;` ?", "gold": "wow :+1: , i do not even know how this test works."}
{"pred": "Why is this needed?", "gold": "File should be renamed `PlugIn` -> `Plugin`"}
{"pred": "Why is this needed?", "gold": "I scanned the new test cases quickly. Do we have one for an egressIPPool with multiple different IP ranges?"}
{"pred": "This should be `1.0.2`", "gold": "you can use a different name, like `maybe_activate` or `is_active` without `component` in the method name as this is used in the class name. E.g: `$component->should_component_be_active` is using twice the `component` word"}
{"pred": "`ret && ret.options && ret.callback`", "gold": "I think this might not be a complete enough check: what if `options` is `null`/`undefined`?"}
{"pred": "Extra empty line detected at block body end.", "gold": "Useless assignment to variable - `user`."}
{"pred": "Why did you remove the `archive_name(release)`?", "gold": "I think we would want to keep `-O` instead. I wonder how this worked before, though.  "}
{"pred": ">tagKeyCombinations [](start = 24, length = 16) nit: name this `tagKeyCombinations`", "gold": "another alternate option which doesn't have the risk of too many entries (when user keeps providing keys in different order) Have the dictionary as before If tagKeys lookup fail, sort and lookup again. If fails, insert both original tagKeys and its sorted one to the dictionary. So that we only store atmost 2 entries per key set. And we only do a single lookup in hotpath, as opposed to 2 look ups."}
{"pred": "Why do we need to update symbols here?", "gold": "if (out != nullptr)"}
{"pred": "I think this should be `have_exact = listen_count > 10`", "gold": "In the listenstore you catch the exception and then pass it on via Raise. However, here you do not catch the exception. You should catch the exception, but since this is a minor aspect of this page, perhaps show an error message when the count cannot be loaded in time. Then the rest of the page can still be rendered, rather than failing the whole page."}
{"pred": "\"because it is moving to a new window\" -> \"because it is moving to a new window\"", "gold": "wouldn't it be simpler to just add `or transfer` here? That way the more complicated set of conditionals down below don't have to get more clauses."}
{"pred": "Why this change?", "gold": "ditto; please fix everywhere"}
{"pred": "I think this should be `sftp_server_command`", "gold": "Can you break this line into two parts - the first line makes the option help text for `--sftp-server` and its too long! `Specifies the path or command to run a sftp server on the remote host. The subsystem option is ignored when sftp_server is defined.`"}
{"pred": "Why not `bool`?", "gold": "I reverted that one in a previous PR because of a CI failure but it was actually unrelated"}
{"pred": "Why do we need this change?", "gold": "The for loop is useless here, since any error will make the function return."}
{"pred": "This file should be removed.", "gold": "Fix file endings here and elsewhere."}
{"pred": "Shouldn't this be `sizeof(buf) - 1`?", "gold": "I'd better increase `buf` length to MAXPATHLEN and not cut p->get_project_name() output twice"}
{"pred": "Can we remove this?", "gold": "Please remove the prints, even though this code will be trashed."}
{"pred": "Why do we need this alias?", "gold": "Not sure if you added deliberately but I've seen these popping up; is goimports adding them?"}
{"pred": "Why do we need this?", "gold": "I think we might need some special handling for `Spec.ControlPlaneLoadBalancer.SecurityGroups`, it looks like we are currently only handling the case that `Spec.ControlPlaneLoadBalancer` is nil."}
{"pred": "why do we need this?", "gold": "Is this from a third-party library?"}
{"pred": "I don't think you need the `&& !dom.isNativelyFocusable(el)`", "gold": "Please put the `el.tabIndex > -1` in the first part of the expression. The matcher will run on every node on the page, so we should put the fastest part first."}
{"pred": "nit: remove empty line", "gold": "`identity` is unused now, is it for future usage?"}
{"pred": "Should this be `out::message` instead of `out::message`?", "gold": "This would have assisted me a lot! I am on the \"functions\" page more than any other page in the docs"}
{"pred": "Shouldn't this be `module_name.encode('ascii')`?", "gold": "I think it's better we keep `(` and encode with default encoding (utf-8)."}
{"pred": "Why is this needed?", "gold": "this is gonna be different in an IDE vs from gradlew??"}
{"pred": "Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.", "gold": "Do we not already have something for isolating syntax?"}
{"pred": "Copyright (C) 2013-2019, 2012 CERN", "gold": "1: D100 Docstring missing 4: I102 copyright year is outdated, expected 2014 but got 2012 158: D103 Docstring missing 168: D101 Docstring missing 170: D102 Docstring missing 180: D102 Docstring missing 187: D102 Docstring missing"}
{"pred": "This should be `s3_add_bucket_sses3_encryption_policy`", "gold": "how **to** deny"}
{"pred": "Do we need both Http2 and Http1AndHttp2?", "gold": "The only beef I have with this is that it's app domain global."}
{"pred": "Why is this needed?", "gold": "Can you link to the GitHub issue and/or PR so that it is easy for future readers to find out more about this?"}
{"pred": "Shouldn't this be `VUID-VkMemoryPriorityAllocateInfoEXT-priority-02602`?", "gold": "Typical to report the value found as well as the valid bounds."}
{"pred": "`transactionLastValidRound` is unused (from `deadcode`)", "gold": "maybe we want 0 as a default value?"}
{"pred": "Why do we need to encode the hash?", "gold": "can we get height from sf at very beginning of the function and use that as height of the block?"}
{"pred": "Why do we need this?", "gold": "Does this have to be public and in the primary namespace?"}
{"pred": "Why do we need this lock?", "gold": "I'm a bit confused. Doesn't `mdWriterLock` already synchronizes calls to this function?"}
{"pred": "Shouldn't we throw an exception here?", "gold": "Does it make sense to generate a dailyMotion url without the video reference? It does not to me, but can we throw an exception here?"}
{"pred": "nit: remove empty line", "gold": "Why the separation of imports here?"}
{"pred": "`deps` is no longer used.", "gold": "Random extra newline."}
{"pred": "`getFocusableElements` -> `getFocusableDescendants`", "gold": "No need for this variable."}
{"pred": "Why do we need this function?", "gold": "Why not use `msg` directly below?"}
{"pred": "Why is this needed?", "gold": "I think other places changed to use `Deque` instead of suppressing the warning."}
{"pred": "Why is this needed?", "gold": "missing: utility, cstddef also: vector is already included in the header (interface requires vectors as in/out types)"}
{"pred": "Why do we need this?", "gold": "I'm not sure this is necessary in the config here, as Jest would be setting the global `fetchMock = ''`. See below."}
{"pred": "Why not use `Objects.hash()`?", "gold": "Can `mFolder == null` happen during regular operations? Or is it only so we can be lazy in tests?"}
{"pred": "Use the new Ruby 1.9 hash syntax.", "gold": "I'd suggest using the actual MIME types here - so `text/plain` and `multipart/alternative` or does that cause problems with what postgres allows for enumeration names? If so then maybe just replace the slash with an underscore?"}
{"pred": "I don't think you need the `.lower()` here.", "gold": "Ohh. `TeamName` is actually a \"friendly\" name displayed in the Catalog - not the name used in the CLI. So I guess we'll need a new variable here. (That is, this is going to be mainly a `quilt.yaml` change. You won't need the `.lower()`, though.)"}
{"pred": "Why is this needed?", "gold": "Nit: Don't move it between `require_dummy_response` definition and usage, this can live above or below :)"}
{"pred": "I think this should be `version[17]:\"true\"`", "gold": "With the current code, it not work if `EnableCatchupFromArchiveServers` is disabled. to fix it: in getDNSAddrs, change the predicate to `if wn.config.EnableCatchupFromArchiveServers || wn.config. EnableCatchupFromArchiveServers {` and in the catchup/service.go and catchup/catchpointService.go, use the `PeersPhonebookArchivers` only when `wn.config.EnableCatchupFromArchiveServers` is enabled."}
{"pred": "I don't think we should ignore the error here.", "gold": "Why not make `SearchForNodes` do a `GetOrCreate` for the root node? (Not advocating for it, but just wondering if there's another reason than avoiding having to pass in the path.)"}
{"pred": "Why do we need to start the daemon here?", "gold": ":+1: amazing that this has been missing since it was originally implemented"}
{"pred": "Shouldn't this be `file.length()`?", "gold": "Just want to note here that although we do check `length` while writing to choose whether to close and start a new file, that doesn't happen for ORC already so it is fine to use a FS call in this method."}
{"pred": "Why did you remove the null check?", "gold": "nit: I feel multiple `if (...) { return ... }` is more readable than `if ... else ...`."}
{"pred": "Is this intentional?", "gold": "This is needed for us to work in IDE UTs"}
{"pred": "Shouldn't this be `starred_files`?", "gold": "File is not `goimports`-ed (from `goimports`)"}
{"pred": "Should this be `label=disable`?", "gold": "this `label=` is docker specific, while here in libcontainer there shouldn't be any mention to docker. `DisableSecOpt` and `DupSecOpt` should just deal with `disable,role,type,level`. Both CRI-O and docker should just pass `disable,role,type.level` stuff and not `label=...`."}
{"pred": "Let's call this `--recurse-recursive` to be consistent with the other flags.", "gold": "You need to declare variable `recurse` above, same place as `localTime`."}
{"pred": "Shouldn't this be `xdensity=element.xdensity, **kwargs`?", "gold": "Why does `clone` not already copy `xdensity` and `ydensity` from what it is cloning?"}
{"pred": "Why do we need this check?", "gold": "Curious - do we do the same for traces (when no ActivitySource / legacy source are added)? (and why we want to do it for metrics?)"}
{"pred": "Shouldn't this be `ControllerVersion`?", "gold": "@aimanrosli23 For the changes in file SdMmcPciHci.c, please make sure that you do not revert the changes made by the below commits: SHA-1: 49accdedf956f175041040e677163b7cbb746283 * MdeModulePkg/SdMmcPciHcDxe: Hook SwitchClockFreq after SD clock start SHA-1: c67617f3c677c342efde780e229f841f4e0f6c7e * MdeModulePkg/SdMmcPciHcDxe: Add retries for sync commands SHA-1: 6d387610855ee27b49cb720de29ed809ea59dadc * MdeModulePkg/SdMmcPciHcDxe: Read response on command completion SHA-1: 63fd7f389874081ea37452b1f79ac013d52755e3 * MdeModulePkg/SdMmcPciHcDxe: Do not map memory for non DMA transfer"}
{"pred": "Why is this needed?", "gold": "You'll also need to add `webelem.Group.all` everywhere as that matches as well"}
{"pred": "Shouldn't this be `ncr_proposal_building_number`?", "gold": "Does this need to be an ERB template?"}
{"pred": "Why do we need this?", "gold": "do we want to register this in the mock server for testing?"}
{"pred": "Why did this change?", "gold": "shouldnt this be `0:996` (+4) so the 1000s below fit?"}
{"pred": "Shouldn't this be `self._enabled = True`?", "gold": "The docstring of this context_manager should be updated. As now ``sort=False`` is valid, it should just say it disables sorting regardless of whether the NdMapping has ``sort=True`` or ``sort=False``. I also think the line 'Should only be used if values are guaranteed to be sorted before or after the operation is performed.' should just say something else - maybe just that the initial ordering (whatever it is) should be preserved?"}
{"pred": "Why this change?", "gold": "This tests failed unless I swapped the order here. Perhaps some new class transform broke the old form?  "}
{"pred": "I think this should be `ops.split(\"address=\")[0]`", "gold": "extract the port and set to `debug_java_port`"}
{"pred": "I'm not sure if this is the best way to do this, but I'm not sure what the best way to do this is.", "gold": "When the argument list is `[\"one\", \"two three\"]` then you concatenate it as you do it here, you won't be able to get the original list back with split. You need to annotate the list items better. (Or if you won't do the split by yourself, the called shell will do it. So you need shell escaping. How portable is that?) The main driver to change this in `intercept-build` was to get rid of these concatenation and splitting errors. The current compilation database parser in Clang understands the `arguments` filed... So the question, why don't you pass the command around as a list instead of a string?"}
{"pred": "Why is this not implemented?", "gold": "`ctx` is unused in EnablePiped"}
{"pred": "This should be `self.authenticated_user = authenticated_user`", "gold": "Why do we have both a list of valid sessions and an instance variable if a session is destroyed?"}
{"pred": "Why do we need this change?", "gold": "nit : I think that it would be \"cleaner\" to set the `flushcount` to nil in case of an error nice catch ;-)"}
{"pred": "Why this change?", "gold": "You may want to use assertNull"}
{"pred": "I'm not sure if this is the right way to do it, but I think it would be better to use `TimeUnit.SECONDS.toMillis(1593493828L)`.", "gold": "Break out tests for events into their own tests rather than placing them in other ones. That makes it easier for us to figure out where problems lie and to do a TDD-driven implementation over new APIs."}
{"pred": "Why was this removed?", "gold": "Why did you remove this?"}
{"pred": "nit: `log.Infof(\"%s, Mapping for port %d failed: %s\", logPrefix, extPort, err)`", "gold": "Why we need another error printouts? We already have it inside addMapping.."}
{"pred": "`location_map` is a `std::unordered_map<uint32_t, location_map_t>`, so `location_map.size()` is not needed.", "gold": "This LGTM, but I'm curious if this fixed a specific error you were hitting?"}
{"pred": "Shouldn't this be `if len(parts) == 3`?", "gold": "Actually we rely on this functionality in cgroup v2, where the subsystem is empty."}
{"pred": "Why do we need this change?", "gold": "suggestion: use `core` package name"}
{"pred": "Why do we need to change this?", "gold": "I think we can entirely remove this `limit` parameter for now to be consistent with other APIs."}
{"pred": "Why do we need this function if it's only used in one place?", "gold": "nit: `Resource Groups Tagging API` -> `Resource Groups API`"}
{"pred": "Nit: This import should be grouped with the other aws imports.", "gold": "This type of list + delete always make me a bit uneasy but guess there's no atomic way to do this...... Could you put a todo to retry the \"ClearRepository + delete repo\" flow a few times? Basically, imagine a new image is added right after we call `ListImages`, then `DeleteImages` will not delete that newly added image. Then the delete repo call will fail"}
{"pred": "Why do we need to disable this?", "gold": "You can remove this since ES6 modules are strict by default. And thanks for contributing to the Jellyfin Project."}
{"pred": "private static final String FRONTIER_RLP =", "gold": "Why did eip1559 go from a list (0xf9020280.....) to a wrapped string (0xb902060ff9020280...) and not just concatenation (0x0ff9020280...)? implementation detail or is this how it sits on the wire now?"}
{"pred": "`strings.HasSuffix(err.Error(), expectedErr)` is equivalent to `strings.HasSuffix(err.Error(), expectedErr)`", "gold": "@wallyqs Since on Windows it would be `\\` instead of `/` I just look at the suffix past `configs/`. Let me know if that's ok or not."}
{"pred": "I think this should be `model.InsightResultType_MATRIX`", "gold": "nit: Remove this assignment because it is not necessary."}
{"pred": "Shouldn't this be `glnx_openat_rdonly`?", "gold": "This seems like a common enough pattern to offer an equivalent wrapper in `ot-fs-util.c`, no?"}
{"pred": "Shouldn't this be `isItemHasDownloadLink`?", "gold": "Wouldn't this crash the app if the user is currently listening to a stream?"}
{"pred": "`strings.HasSuffix(prefix, \"/\")` is equivalent to `!strings.HasSuffix(prefix, \"/\")`", "gold": "This looks like an unrelated change? What is it for?"}
{"pred": "`IsDone` is unused (from `deadcode`)", "gold": "Wait, what is this doing? Is this a way to create methods that are only accessible from tests?"}
{"pred": "Shouldn't this be `canListChaos`?", "gold": "Is it more reasonable to return some errors here, such as returning error codes (403 and so on?) ?"}
{"pred": "Shouldn't this be `null` instead of `undefined`?", "gold": "Thinking out loud... would `_nextDom` be a better name for this?"}
{"pred": "Why was this removed?", "gold": "Turns out the unittests also had a false positive."}
{"pred": "Why do we need to change the name of this method?", "gold": "I think these method names would be clearer if written as \"Create a {type} counter|gauge|measure with given name\". eg \"Create a int64 counter with given name\" \"Create a double gauge with given name\""}
{"pred": "`getNumber<uint32_t>(L, -1)` should be `getNumber<uint32_t>(L, 1)`", "gold": "it pushes a boolean, so it has to be explicitly casted to boolean with != nullptr, same with all other similar stuff"}
{"pred": "Why do we need to rebuild instances here?", "gold": "It would be nice to have an equivalent of this call on `DataWriterImpl::enable`"}
{"pred": "Shouldn't this be `ChainBlockStatusDeploying`?", "gold": "Isn't this PENDING?"}
{"pred": "Why do we need to sanitize the title?", "gold": "minor detail, why aim to sanitize title if tile is empty (in some cases)? worth adding an && to check for that."}
{"pred": "I don't think we need this import.", "gold": "Code shared by ParentChildrenSyncDownTarget and ParentChildrenSyncUpTarget moved to ParentChildrenSyncTargetHelper"}
{"pred": "Why did you change this?", "gold": "The bug is not about the priority , But we use 2 config items CAPACITY and SEQUENTIAL to control 1 action: thoughput. If 'sequential' is given to 'False' as default in configfile and then I use 'capacity' to 10 in my test.yml , the 'capacity' 's priority should be higher than default 'sequential'. So, I suggest we use only one 'capacity', it is enough. '1' is sequential, more than 1 is capacity, None is sys.maxsize."}
{"pred": "Why is this needed?", "gold": "I don't know if I'd call any of these FAST tests integration tests. They are unit tests for FAST. They use a mock plugin which doesn't actually start any external processes, etc."}
{"pred": "`// CurrentVersion returns the current version of the calling instance`", "gold": "Can you provide corresponding UT for this."}
{"pred": "nit: remove empty line", "gold": "nit: this should be below the yarpc group"}
{"pred": "Why do we need this?", "gold": "singleCaseSwitch: should rewrite switch statement to if statement (from `gocritic`)"}
{"pred": "Shouldn't this be `<= 10`?", "gold": "Please log once here at Error level \"Failed to connect to Typha, will retry...\""}
{"pred": "Shouldn't this be `true`?", "gold": "Do we need the forXDP parameter in runBpfUnitTest? If not, I think better to revert in order to save a few changes."}
{"pred": "This should be `r'^[a-zA-Z0-9][a-zA-Z0-9_-]*$'`", "gold": "So we fix it only for kinto and not for all cliquet resources?"}
{"pred": "nit: remove empty line", "gold": "No empty line between"}
{"pred": "Why do we need to revise the root dir here?", "gold": "We have `ResolveRootfs` in `libcontainer/utils` so maybe use that one here?"}
{"pred": "Why do we need this test?", "gold": "Just curious, do we have positive test covered somewhere?"}
{"pred": "`else if (roots_surface->pending_move_resize_configure_serial == 0)`", "gold": "Style error, put a space between `if` and `(`"}
{"pred": "I don't think this should be a pointer. If you want to disable the feature, you should be able to set `EnableEndpointDiscovery = true`.", "gold": "It's a bit odd to have a \"disable<x>\" boolean, though it looks like you already do that for a few other flags."}
{"pred": "Why do we need this?", "gold": "Why did you pick two hours for this?"}
{"pred": "\"enter password for new key\"", "gold": "What about \"enter new password\"? That would be a bit more consistent to the `ReadPasswordTwice` usage in cmd_init."}
{"pred": "`ContextHelpMixin` is no longer used.", "gold": "Another redundant import"}
{"pred": "Why do we need to release the stream here?", "gold": "What kind of errors might cause us to reach this point? Could any of them be recoverable i.e. might work if we asked the same server again? Similar question for below, but perhaps with a slightly different answer"}
{"pred": "my_graph_type graph_type graph;", "gold": "What is the difference between GraphType and graph_type. Naming should be more accurate."}
{"pred": "This should be reverted.", "gold": "hmmm in docblock of contructor it is EntityManagerInterface....maybe it should be that way.... :confused:"}
{"pred": "Shouldn't this be `GetPosDefault`?", "gold": "I'm curious why you went the route of adding a new method name for this. Given that you it would be possible to just have an an overload of `GetPos()`, and that this change breaks existing code, I wonder why you chose to go this way."}
{"pred": "`statusLabel` should be `statusLabel || 'Past due'`", "gold": "Does this need to change `'active'` to `'Active'` and that? Or is that done in CSS or something?"}
{"pred": "Why are these public?", "gold": "Why are these constants public? They should also be listed above members."}
{"pred": "This is where we are checking the signature. We have to fix the v value if this is a private transaction.", "gold": "This TODO isn't related to this change. We should remove it."}
{"pred": "Why did you remove the default implementation?", "gold": "`FieldMetrics` is parameterized, but this is a bare reference. Could you update it? I think it should be `FieldMetrics<?>` since the metrics are not necessarily for the written value type, `D`."}
{"pred": "Why do we need this change?", "gold": "@cijothomas do we want this to be `Set` or `Add`?"}
{"pred": "What's the reason for this change?", "gold": "Why are we dropping GasCap?"}
{"pred": "\"Passed span's context is not valid\"", "gold": "should we end the text with a .?"}
{"pred": "Shouldn't this be `wherewasi == DR_WHERE_DISPATCH`?", "gold": "Could this instead keep the `go_native` and add to it \"or the last exit was the special reset exit\"?"}
{"pred": "`this` is not needed here.", "gold": "Oh, I missed this one: The other instances of `this` you've added as lambda contexts aren't really needed, although they're harmless. However, in the above connection, the missing context is `panel`, not `this`. Please correct it! Clazy may show warnings about lambda contexts (I don't use Clazy) but, if so, that's a problem in clazy: it isn't smart enough to know about them."}
{"pred": "Why did you remove the `__del__`?", "gold": "can we add a try / except around this to make it more stable? I like the idea of any mistakenly un-quit drivers closing down after the process is quit (the java server does this... also i forget to do driver.quit often when i use the command line repl :) )"}
{"pred": "Shouldn't this be `r.ContentLength == 0`?", "gold": "when would this happen? backward compatibility?"}
{"pred": "I don't think this is the right place for this function. It should be in `axe.utils`.", "gold": "I'm not sure what the value of this is. So far we've solved this by always doing `tagName.toUpperCase()` for everything. I think we should stick with this."}
{"pred": "`$ mayactl snapshot list --volname <vol>`", "gold": "This command displays available snapshots on a volume."}
{"pred": "`spb` -> `stpb`", "gold": "`spb` is the standard package name we use for this proto."}
{"pred": "Why do we need to change this?", "gold": "/javascript/firefox-driver is the Selenium implementation of a WebDriver for Firefox. Since it generally isn't W3C compatible, it shouldn't change. We can just drop this change."}
{"pred": "Why do we need this TODO?", "gold": "is this pr support parallelly process application?"}
{"pred": "Shouldn't this be `MustEnablePulls`?", "gold": "Based on the assumption that when `EnablePulls` is `true`, `CanEnablePulls` must be `true` as well, then this `if` check is redundant. Actually... we have `AllowsPulls` now... why not use that?"}
{"pred": "Shouldn't this be `projectName`?", "gold": "I am not sure why the API requires both project name and project ID as inputs. Wouldn't it introduce more opportunities for clients to make mistakes?"}
{"pred": "Line is too long. [81/80]", "gold": "I believe this was happening for several different flash messages - should we add `now` to all flash messages? (there might be a downside to doing that, but I am not sure what it would be)"}
{"pred": "should be reverted", "gold": "There is no docblock on the parent method. Also, not related, but I forgot to typehint the `$templating` constructor argument above."}
{"pred": "Why do we need to skip this test on arm64?", "gold": "Silly me. This shouldn't be done in the tests, but instead in the actual definition of ValidPHPVersions on arm64. Same with Mysql and MariaDB."}
{"pred": "`queryRelation == QueryRelation.INTERSECTS` ?", "gold": "Shouldn't this work as well for Disjoint?"}
{"pred": "Shouldn't this be `errUpdate`?", "gold": "You've not updated the `o.Status.Reason = fmt.Sprintf(\"Failed to retrieve Order resource: %v\", err)` line below here when you changed this, so here we are checking `errUpdate` but will print the contents of `err` instead."}
{"pred": "Why do we need to check for cygwin here?", "gold": "Doesn't this need to include `Errno::ECONNRESET` to fix the issue?"}
{"pred": "Should this be `project.cache.throttle.percentage`?", "gold": "Please consider keeping the config key in one line as it will help in case someone is looking at how this config is used. public static final String PROJECT_CACHE_THROTTLE_PERCENTAGE = \"azkaban.project_cache_throttle_percentage\";"}
{"pred": "This should be renamed to `ListPowerSelectorEntries`", "gold": "This is a hard one, naming-wise... `ListPowerSelectorEntries` is logical given `ListSelectorEntries`. Another option could be `ListMatchingEntries` or even `FindMatchingEntries`. :shrug:"}
{"pred": "Why does this need to be exported?", "gold": "This should be called `Uint` or `Uint32` or simply using our `Uint64` type instead. All of our numbers have varint encoding. It's not inherently a varint."}
{"pred": "`pygment` should be `--pygment`.", "gold": "No need for this when you don't need to customize anything about the argument."}
{"pred": "I don't think you need to pass `current_section` here.", "gold": "We're now going to have 3 `#sections_accordion` will need to see how JS behaves. We should probably switch to a class selector instead"}
{"pred": "Use 2 (not 0) spaces for indentation.", "gold": "did you mean to leave this in here?"}
{"pred": "nit: `Whether to generalize image using Windows Sysprep.`", "gold": "Mention that it only applies to Windows. This is kind of implied, but better to be explicit."}
{"pred": "nit: `zero` is unused (from `structcheck`)", "gold": "again: it is a bad practice to have some global parameters with such common names for unit test purpose."}
{"pred": "This should be reverted.", "gold": "Should we use `\\DateTimeInterface` or `DateTimeInterface` and declaration of `DateTimeInterface` in `use`?"}
{"pred": "Why do we need this?", "gold": "What do you think of moving this stack related constant to the `stack` pkg?"}
{"pred": "nit: `nonempty AuthAddr but rekeying not supported`", "gold": "Hm, I guess that you're doing this here since `WellFormed` is on a `transactions.Transaction` and not a `transactions.SignedTxn`, but quickly grepping through our code, it looks like we always a `SignedTxn` around when calling `WellFormed` (except maybe some tests?)... this doesn't have to happen here, but maybe we should update that in a separate PR since this really feels like a `WellFormed` check."}
{"pred": "Why do we need this?", "gold": "This story also needs the default padding."}
{"pred": "Why did you remove the `RandomState` here?", "gold": "Hmm why did we remove the randomness about which (confusingly) different exception to throw here? This randomness was (is?) useful to help test that Lucene indeed catches `FNFE` and `NSFE` interchangeably."}
{"pred": "I think this should be `current_collection_id != NULL`", "gold": "Hm, so before in that case `current_collection_id` looks like it was actually an uninitialized pointer. It seems weird to me that the tests pass both ways. I haven't looked closely at the tests - is there something wrong there that causes this to spuriously pass before?"}
{"pred": "Shouldn't this be `KEYWORD_NONE`?", "gold": "s it the best way to tag \"foo\" of \"`define foo ...\" with constant kind? Introducing \"d/definition\" kind and tagging the \"foo\" with the definition kind is an alternative way. Using the unified kind \"constant\" in many areas reduces the information that client tools get from a tags file. In my experience, it is better to tag different things with different kinds. If ctags hides the differences, and just reports various language objects as \"constant,\" in some cases, a client tool must parse the raw .sv source file for distinguishing whether a given tag is \"`define\"'ed or not. IMHO, ctags should not be too smart. Instead, ctags should be stupid; it should report what it sees in source input files as-is to client tools that will do something smart."}
{"pred": "Why was this removed?", "gold": "is this a breaking change? If I'm not mistaken, this is translating a user-provided `wtimeout` in the connection string into `wTimeoutMS`"}
{"pred": "Please add a license header to this file.", "gold": "Can we rename this file to `lambda_echo.py`, to be more descriptive and in line with the other files in this directory? (all files in this folder are lambda functions, after all)"}
{"pred": "Why did you change this?", "gold": "why not do it like this ? <pre><code> const ( Kill Action = iota Errno Trap Allow Trace ) <pre><code>"}
{"pred": "Why do we need this lock?", "gold": "lock(this) is a bad practise, since you lock the entire instance. cosider: var appenderCache = xxxx. lock(appenderCache) { Thread.Sleep(TimeSpan.FromHours(5)); } while inside AppenderCache instance lock(this) { is blocked 5 hours. } Its always better to make a class private lock objects."}
{"pred": "Why is this needed?", "gold": "should we use the constant above?"}
{"pred": "`ASSERT(result && \"bad file handle?\");`", "gold": "I think something like `size_res` would be more descriptive."}
{"pred": "Should this be `@value = {}`?", "gold": "Oh lol so this was...really more of a bug?"}
{"pred": "Why is it better than using 2?", "gold": "Well, it is providing a platform neutral way of calling Task or TaskEx. We could just call it PlatformTask."}
{"pred": "This should be `free(xwayland->server);`", "gold": "Typo: this should free `xwayland` instead"}
{"pred": "Why did you remove crypto/rand?", "gold": "Is it ok to use \"math/rand\" instead of \"crypto/rand\" here? Do we need to protect this ID somehow?"}
{"pred": "I think this should be `logxi`", "gold": "Why did we have `logxi` in the first place? Maybe it makes sense to remove it from `glide.lock? It will safe us in the future from using logger which is not working."}
{"pred": "This should be `if (getUNF() != null)`", "gold": "Is there a reason to use `getUNF()` and `UNF` in the same block?"}
{"pred": "Why this change?", "gold": "Again this seems odd that megacheck cares"}
{"pred": "Why do we need both `token_file` and `environment`?", "gold": "I assume this will resolve to nil if this isn't in the config?"}
{"pred": "Should this be `ParseCustomKeyValues(data: string)`?", "gold": "I looks like we can make `allowOptionalMappings` non-optional since we have another overload without it. (I thought this generated a compiler warning, but maybe it's just R#)"}
{"pred": "Why do we need `List[int]` here?", "gold": "` per scale.` -> ` per scale.` need to clean the unnecessary blank space"}
{"pred": "Why did you remove the method3712?", "gold": "there's no import for Export"}
{"pred": "why do we need to register both?", "gold": "i don't think we want/need to make the node API available over UDS"}
{"pred": "Shouldn't this be `findOneById`?", "gold": "How about to skip if and returning null and return a result of `ArticleFacade::findById` directly?"}
{"pred": "Nit: space after `,`", "gold": "I think this change is currently unnecessary. I like the idea of `map()`, `filter()`, etc. returning vanilla JavaScript arrays rather than mongoose arrays, but I think that's a bit too heavy of a change for a patch release. I think that all we need for this release is the `if (!parent || parent.$__.populated == null) return;` change."}
{"pred": "I don't think you need the `|| \\\\` here.", "gold": "how about \"unknown\" instead of \"fafafaf\"?"}
{"pred": "Why do we need this interface?", "gold": "nit: do we gain anything from naming the output error `err` in this definition?"}
{"pred": "Why do we need to do this?", "gold": "This can happen with any dialog. Maybe the best place to add this change would be the dialog component instead."}
{"pred": "Why do we need this?", "gold": "Should this be `TearDown` since it now calls this method? Something I would like to see is, on test failure don't teardown completely instead leave the FAST repo in place with the stderr and stdout files and direct the user to that location. What do you think?"}
{"pred": "I think this should be `MetricLogLikelihood`", "gold": "There's not particular reason to use a short name. Can we use a more descriptive name for the metric? Perhaps \"negativeLogLikelihood\"?"}
{"pred": "Shouldn't this be `parseFunction (token, repr == NULL)`?", "gold": "not handling in case of `repr` makes the behavior probably a little too unpredictable. Is there a reason not to, apart missing stuff in the `repr`? Does it lead to some problem?"}
{"pred": "Why do we need this change?", "gold": "Remove the finally?"}
{"pred": "Shouldn't this be `const WCHAR *fn`?", "gold": "Build on AArch64 fails because WCHAR is not defined."}
{"pred": "Why is this needed?", "gold": "Do we use this const?"}
{"pred": "Why do we need this?", "gold": "I think this may need to be `SetCertificateRequestAnnotations` as it returns a `CertificateRequestModifier`  "}
{"pred": "Why not just `identifier_for(identifier_scheme)`?", "gold": "it would likely be better to do this in the Identifier.by_scheme_name method itself."}
{"pred": "Shouldn't this be `created_at`?", "gold": "@janette looking at this test code, I'm pretty sure that it's going to give a false positive. Where is it actually checking the contents of the first four datasets against expected values? All the assertion at the end of the test seems to check is that at least four datasets exist."}
{"pred": "Should this be `esw-cache-fallback`?", "gold": "Would this break things if Ghost is run in a subdirectory or no?"}
{"pred": "Style/UnneededInterpolation: Prefer to_s over string interpolation.", "gold": "maybe switch the order in order to make this a positive assertion instead of a negative one? i.e. `if key =~ /id/` first."}
{"pred": "This should be `ElementNotVisibleException`", "gold": "Is this an oversight for some code in the body?"}
{"pred": "Shouldn't this be `putExtra(\"product\", mProduct)`?", "gold": "Reason for adding this? I couldn't find where you are retrieving it back."}
{"pred": "Shouldn't this be `require \"preloads.rb\"`?", "gold": "Can we expect adequate information emitted to the log in case either requiring preloads.rb or doing the requires in preloads.rb fails? If the answer is yes, I think we can merge this PR right away."}
{"pred": "Layout/EmptyLineAfterGuardClause: Add empty line after guard clause.", "gold": "How about a `app/views/layouts/pages.html.erb` layout that contains the HTML head, body, wrappers and yield's the `new-topics` template into it? I think we might be able to delete the `app/controllers/pages_controller.rb` file at that point."}
{"pred": "Why is this needed?", "gold": "This is a coarse solution. This check is helpful, but you should also add a check in `$__version()` to avoid calling `isSelected()` if `key === false`"}
{"pred": "Why do we need both `ApplicationID` and `ApplicationName`?", "gold": "Passing only needed data to make it can be reused by `planpreview` package where there is no deployment data."}
{"pred": "Why is this a pointer?", "gold": "Could we rename those to `CustomClientAuthentication` (same for Router) to remove ambiguity between Authentication and Authorization (permissions)?"}
{"pred": "Why do we need this interface?", "gold": "Is the name \"IMvxFormsViewPresenter\" too close to \"IMvxFormsPagePresenter\"? Perhaps something like \"IMvxFormsNativeViewPresenter\" or \"IMvxFormsPlatformViewPresenter\" or inline with Forms naming \"IMvxFormsOnPlatformViewPresenter\""}
{"pred": "Why did you remove the `||`?", "gold": "`typeof child != 'boolean'` maybe?"}
{"pred": "`rawErrorData.get(CLASS) == null && rawErrorData.get(STACK_TRACE) == null`", "gold": "Why && changed to || ?"}
{"pred": "`InitAddress` is unused (from `deadcode`)", "gold": "nit: not a big deal right now but spec assigns ID 0 to InitAddress"}
{"pred": "Why do we need to change this?", "gold": "/javascript/firefox-driver is the Selenium implementation of a WebDriver for Firefox. Since it generally isn't W3C compatible, it shouldn't change. We can just drop this change."}
{"pred": "Why do we need to set fuzzyval here?", "gold": "There are various places where `setZoomFactor` is used but `fuzzyval` isn't set: - `__init__` and `on_config_changed` (should be okay as `init_neighborlist` gets called which essentially does the same) - `zoom` (calls `zoom_perc` with `fuzzyval=False`), which is used by `:zoom-in` and `:zoom-out`. Are you sure this won't break those calls? (Yes, I know there should be tests for this - I'm working on that.) Other existing places probably should get simplified."}
{"pred": ">addAnnotations [](start = 24, length = 14) addAnnotations? #Resolved", "gold": "Is there a benefit to keeping this in RefinementSettings? Or could we move it into its own class in TestUtil?"}
{"pred": "Why do we need to change this?", "gold": "I would have expected the Ready method to need to change to be a `<-chan Result` instead of a `<-chan map[string]Result`. The difference being that now the Ready channel can produce more than one set of results. In fact the name Ready is inaccurate now since its not about the query being ready but just a mechanism to deliver results. If this should be a follow up PR that is fine, lets create an issue for it."}
{"pred": "Why was this changed to public?", "gold": "why? what if we want to access those methods outside of azkaban-common?"}
{"pred": "ConsensusRpcModule -> EngineRpcModule", "gold": "Rename file too"}
{"pred": "I think it would be better to use `http.StatusInternalServerError` here.", "gold": "Need to populate the `RequestID` field for these errors. This can be obtained from r.RequestID i think, but need to make sure. The `r.RequestID` should of been populated from the `UnmarshalMeta` handler list."}
{"pred": "Why did you remove the final modifier?", "gold": "Why is the `final` being removed here?"}
{"pred": "@abumusamq should this be `2014-2018`?", "gold": "Maybe let's take this opportunity to change easylogging to a git submodule?"}
{"pred": "Why do we need to trim here?", "gold": "Should we just be generous and elide all extra whitespace? `strings.TrimSpace`"}
{"pred": "Why was this removed?", "gold": "This is an inaccurate API that has outlived it's purpose. We can't make the determination of phone (vs) tablet, with a 7\" screen in the mix. Also, with the advent of fragments, this API means very little now. It's not being used anywhere, since we switched to `ActionBar`."}
{"pred": "Shouldn't this be `finest(version());`?", "gold": "This change means that users can't easily see which version of the selenium server they're using. This is `info` level information."}
{"pred": "Why did this change?", "gold": "You should just use `with patch(...):`, so it unpatches it automatically. Also, much simpler."}
{"pred": "Shouldn't this be `Mvx.Resolve<IMvxViewDispatcher>()`?", "gold": "This didn't use to work for me. Are you sure that returns the correct instance from startup?"}
{"pred": "Why do we need this constructor?", "gold": "Looks good. Eventually we could remove some of these constructors, but for now adding these two seems the way to go"}
{"pred": "Why is this change needed?", "gold": "@jalavik should be have somewhere enum/list/registry of possible tags?"}
{"pred": "Why are we disabling this?", "gold": "why is this pylint disable needed?"}
{"pred": "Why do we need this?", "gold": "The new sync feature is only being supported from within Terraform. Installations using the deprecated method will have this feature disabled."}
{"pred": "Why do we need this?", "gold": "This type of return (f'xxx') is not recommended, it is recommended to return 'xxx'"}
{"pred": "(style) line over 80 characters", "gold": "I would make this level 1 or 2."}
{"pred": "Why do we need to set this env variable?", "gold": "Is that path in a variable anyway? Not a big fan of hard coding it here."}
{"pred": "`k8serrors` is unused (from `deadcode`)", "gold": "nit: Move `IdentityTemplateLabel` to be under `IdentityTemplate` to match the struct in config_crd.go"}
{"pred": "Why do we need to freeze these?", "gold": "Not necessarily related to this PR, but don't you think having a centralized place for all interactions with analytics might make this into a very big class? Is that something that you don't worry about until it happens?"}
{"pred": "I think it would be better to use `context.DeadlineExceeded` instead of `context.DeadlineExceeded`.", "gold": "it seems that my terminal is dead when I press ctrl+c during running daisy cli today, is this PR fixing that?"}
{"pred": "Why do we need to pass the Mpool?", "gold": "If we are going to add config to specify the maximum message pool size, we should probably also add a parameter for the maximum nonce gap and pass it into the `IngestionValidator`. This could be done in this PR or added as an issue."}
{"pred": "Please don't use wildcard imports", "gold": "please inline imports"}
{"pred": "Why change this?", "gold": "Should IptablesPostWriteCheckIntervalSecs be set back to its previous smaller value, if use of the iptables lock is disabled?"}
{"pred": "Why do we need to require `../package.json` here?", "gold": "Please use packageInfo here instead. As it is used in `app.js`."}
{"pred": "I don't think this is correct. If the file doesn't exist, we can't use the cache. If we can't read the file, we can't use the cache.", "gold": "this seems unrelated to the rest of the PR, although related to the original report"}
{"pred": "Why did you change this?", "gold": "Would a check for added columns with non-null default be sufficient for aligned format?"}
{"pred": "Why do we need a new flag for this? Can't we use the existing `build-id`?", "gold": "Is this PR implementing compute service account for OVF import as well? I thought it's only image/one-step import? Btw, OVF importer uses \"-\" instead of \"_\" in flags (should be `compute-service-account`)."}
{"pred": "This should be `/collections/{collection}/elements/{product}/element`, right?", "gold": "Why change to element ?? in whole application use plural convention ??"}
{"pred": "Why is this needed?", "gold": "Tiniest nit but this can be `tabindex={-1}`, `width={11}`, `height={11}`"}
{"pred": "I don't think you need the `hasattr` here.", "gold": "Unrelated to this PR, we should remove this exception. We now require `numpy`."}
{"pred": "ineffectual assignment to `err` (from `ineffassign`)", "gold": "Is the loop over vars and adding them to the subworkflow below in this file needed, since it's already done by NewSubWorkflowFromFile?"}
{"pred": "I think this should be `starts_on.to_s(:simple)..ends_on.to_s(:simple)`", "gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping."}
{"pred": "Why do we need this function?", "gold": "Having to write this util makes me think that maybe we should have kept the csv_input stuff. I don't know."}
{"pred": "nit: `q` -> `queue`", "gold": "Passing in and saving a reference to the `BlockCache` at init time is going to break if something calls `config.ResetCaches()`, because it replaces the `BlockCache` instance completely. This happens on user logout or by a manual write to `.kbfs_reset_caches`. So you probably want to give it the whole `config`, or maybe just the `config.BlockCache` function pointer."}
{"pred": "Why do we need to close the stream here?", "gold": "I am not sure this could happen. st should be nil if the error happens. If it does happen, we could also do st.Reset(), since it is an erroureous state so it closes both sides of the stream."}
{"pred": "Please remove this.", "gold": "I'm guessing this was just added for debugging? Should probably remove it so we aren't modifying 3rd party libs."}
{"pred": "`print_event` is only used in one place, can we move it to a private method?", "gold": "This seems reversed... if `success?` is true, wouldn't we use `success`?"}
{"pred": "Should this be `TraceEventLevel`?", "gold": "This seemed like the easiest way to allow log level checks, it will require an update to the vendors tool, to ignore that file on update."}
{"pred": "You can use `&&` instead of `and`.", "gold": "Should we disallow entry authors to unsubscribe to their entries?"}
{"pred": "Why is Derek Riemer added here?", "gold": "2016 should be 2017."}
{"pred": "`curSchemaSumary` can be `null`", "gold": "boolean exists = (existSchema != null) && (existSchema .getSummary() != null);"}
{"pred": "Why is this change needed?", "gold": "It does not look idiomatic."}
{"pred": "Why is this needed?", "gold": "Generally, we do not use newlines between project imports, we only separate them from the stdlib imports"}
{"pred": "I don't think you need the `* 1000000` here.", "gold": "can this long line be wrapped?"}
{"pred": "Should this be `comparison-with-callable-without-paren`?", "gold": "I'd use the same message that I suggested in the release changelog."}
{"pred": "Why did you change this?", "gold": "Keep semi-colons at end of function defs please"}
{"pred": "`this.explain = options.explain;`", "gold": "A little skeptical of `explain` being here. Why is this now a property of all commands?"}
{"pred": "Why is this change needed?", "gold": "License copied two times!!"}
{"pred": "`matcher` should be a keyword-only argument.", "gold": "... their **superclass**"}
{"pred": "Should this be `|| 0`?", "gold": "I'm not sure if this is the right thing to be doing here. It seems like there should be a more systemic fix instead of this patch."}
{"pred": "This should be `null` if dependencies are not loaded.", "gold": "Not sure why these are up here   can we move these down to be part of the `@return` tag instead? This is what we usually do   (e.g. `getCurrentEntityURL`)"}
{"pred": "I don't think we need the `flatten` here, since `to_semantic_values` already does that.", "gold": "Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning."}
{"pred": "Why do we need this class?", "gold": "We keep who wrote the code anonymous."}
{"pred": "Why do we need this?", "gold": "Mention something in logs, that fake registration was used e.g. `Fake identity registered`"}
{"pred": "Shouldn't this be `setSettings( { ... } )`?", "gold": "I think it would make sense to also set `internalWebPropertyID` to `''` here. Otherwise, it might keep its previous value (let's say a property was selected before, but then the user chooses \"Create new property\"), but since it always should depend on `propertyID`, that would be incorrect."}
{"pred": "I think it would be better to use `std::unique_ptr` instead of `RWMol` here.", "gold": "It might be reasonable to add a check that sanitization still fails here."}
{"pred": "`this.node.getAttempt() > 0 ? (\" retry: \" + attemptNo) : \"\"`", "gold": "Why not use attemptNo instead of another call to getAttempt? Even better, consider using a private method to calculate this string. This logic is in two places."}
{"pred": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "gold": "Yuck. Rails bug."}
{"pred": "I don't think you need the `noqa` here.", "gold": "It's useally a common practice to not use `l` as a variable (we have disabled this test in scapy because our code has tons, but it would have PEP8 failed otherwise), but it would be better not to create any. In general, single letter variables are not liked that much. Especially with windows where the fonts make 1=l How about `lay` ?"}
{"pred": "Shouldn't this be `w.WriteHeader(http.StatusOK)`?", "gold": "DRY these 5 lines into a function call, no?"}
{"pred": "Do we need to close `l` here?", "gold": "should we be trying to close here? or just return directly @fabxc ? same goes for `stopc`..."}
{"pred": "Layout/SpaceInsideParens: Space inside parentheses detected.", "gold": "just re-ordered for clarity"}
{"pred": "Shouldn't this be `http.StatusText(resp.StatusCode)`?", "gold": "Can you fix this also to print what is the IP address used to connect. Rename --> \"M_API server\" to maya apiservice"}
{"pred": "nit: `return len(b) - 1`?", "gold": "This fails on Go 1.11 because `indexByte` is already defined in strings_go111.go. I would suggest simply renaming one of the two, for example you could rename the other one to `strings_indexByte` (that will be one of the things we'll drop when we drop Go 1.11 support so it's better to make that one look ugly instead of the function that we will likely keep for a longer time)."}
{"pred": "Why did you change this?", "gold": "Now `dbType=' MockDbType.int32 '` is correctly interpreted and the value is rendered as an integer instead of a string; hence no more double quotes."}
{"pred": "Why did you remove the `$this->content`?", "gold": "typo in `$contend`"}
{"pred": "nit: import order", "gold": "Nit: empty line"}
{"pred": "Why panic instead of returning an error?", "gold": "I figured this was more fool-proof than trying to plumb the error up from everywhere."}
{"pred": "`c.srv.logging.debug = atomic.LoadInt32(&c.srv.logging.debug)`", "gold": "We know debug and trace as globals exist and are defaulted to 0. In this instance we need to know that c is non- nil, srv is non-nil and logging is non-nil before we can trust this statement not to panic."}
{"pred": "Why is this removed?", "gold": "Good removal here for two reasons: we're redeclaring `app.ConfigPath` immediately below without having used the initial value, and `app.GetConfigPath()` will build the value using the same process as in this line anyway."}
{"pred": "Why are these removed?", "gold": "Should BuildBase be removed?"}
{"pred": "Why did you remove the `ast` import?", "gold": "this was a bad Goland auto-import that I missed in the previous PR. Thanks to @rkowalick and @acruikshank for catching it"}
{"pred": "Why do we need to delete this?", "gold": "Good catch here. Reading the code, it actually seems kind of dumb that `replaceAtom` needs to copy the atom it's passed. Ah well, we're more or less stuck with that."}
{"pred": "This should be `wlr_output_send_present`.", "gold": "What's the reason for adding the output pointer here? I'd expect it to be derivable from the actual handler that's called."}
{"pred": "Should this be `discounted_annual_payment`?", "gold": "I don't see tests for this (or the similar method on `Team`)."}
{"pred": "`bitmask` -> `bitMask`", "gold": "should use Number instead of Long"}
{"pred": "Shouldn't this be `c.nc.Close()`?", "gold": "We had the checks for those two errors for a reason, why do we not need them anymore?"}
{"pred": "why is this needed?", "gold": "Why didn't you just switch to `range` here too?"}
{"pred": "nit: `NewBucket` -> `NewBucket`", "gold": "I don't even think `nil` should be allowed, since it uses global state to get the client."}
{"pred": "\"Chromium-based browser\" -> \"Chromium browser\"", "gold": "You somehow got a change from `master` into your branch again, in e6d2167085688264e5ee6a81cfd2a7a8f10ded13. While it's not something terribly bad (as it will be fine after merging), it's kind of confusing, and I have no idea how it happens :laughing: Are you trying to update changes from `master` while working on your branch somehow? How do you do that?"}
{"pred": "Shouldn't this be `if (delta_from_revision && g_str_equal (delta_from_revision, to_revision))`?", "gold": "Minor, can we drop the leading `!` and just swap the if and the else blocks?"}
{"pred": "why not just `if bbox_feats.shape[0] > 0:`?", "gold": "`bbox_feats.shape[0] > 0` requires the number of proposal is not 0."}
{"pred": "const { h } = require('preact')", "gold": "Just FYI, I had to remove this unused import because Travis/`npm run lint` were complaining."}
{"pred": "Why is this needed?", "gold": "format.h is not a system header but bundled with LAMMPS. This should be `#include \"fmt/format.h\"`"}
{"pred": "I think this should be `>= BKDWriter.VERSION_LEAF_STORES_BOUNDS`", "gold": "could we always call visitDocValuesWithCardinality? It seems to include the version check already?"}
{"pred": "Missing space after `if`.", "gold": "I think if they _don't_ specify a port, we should assume grid default (which is 4444)"}
{"pred": "`const auto &r`?", "gold": "This looks to be a breaking change. I know it will affect some of my code that uses the Tautomer enumerator."}
{"pred": "I think this should be `if len(m.Bucketlist) == 0`", "gold": "Perhaps remove this line"}
{"pred": "Shouldn't this be `&& atom->getFormalCharge() == -1`?", "gold": "Ah, missed this one. Sorry: you don't need to test the atomic number here. that's taken care of above on line 683."}
{"pred": "I don't think this is the right way to do it. If the system time is far behind, it seems that your system time is far behind. Please calibrate your system time and restart the chain.", "gold": "roundInfo() is called by couple of places in consensus for safety, better test/verify the delay of return err due to this Sleep() would not affect the normal functionality, like consensus can still be reached, full-node can correctly sync"}
{"pred": "why do we need to flatten here?", "gold": "This 32 could go away too."}
{"pred": "`pageSpeedLink` and `pageSpeedLabel` don't seem to be used.", "gold": "These props should be less specifically named since the component is generic, for example `anchorLink`, `anchorLinkLabel`."}
{"pred": "\"EC2 instance found matching deleted AWSMachine\"", "gold": "In the future, it'd be great if we can separate commits or PRs that aren't in the same scope"}
{"pred": "I'm not sure this is the best way to do this. I think it would be better to use `getattr(cls, \"_%s__gestures\" % cls.__name__, {})`.", "gold": "can you define the string format on a different line, so it can be named, and so that it does not have to be constructed twice?"}
{"pred": "Why do we need this?", "gold": "Can we write a unit test for this."}
{"pred": "Why is this necessary?", "gold": "Same as above, use `.delete('_autosave')`, not the command handler."}
{"pred": "nit: `idToConstant` -> `constantsMap`", "gold": "It isn't necessary to check whether there are projected ID columns. The code is shorter if the values are available by default, even if they aren't used. This fixes the problem where there are constants to add (like `_file`) but no identity partition values are projected."}
{"pred": "Should this be `POST` instead of `POST`?", "gold": "Update after command rename"}
{"pred": "Why this change?", "gold": "@KroArtem This is the Checkstyle violation. This import should be grouped with other `net.sourceforge.pmd` imports below, in alphabetical order"}
{"pred": "nit: remove empty line", "gold": "File is not `goimports`-ed (from `goimports`)"}
{"pred": "Missing space between `)` and `{`", "gold": "This change seems unrelated to copying email addresses to the clipboard. Please limit the scope of pull requests as much as possible."}
{"pred": "Shouldn't this be `if (ptr == MAP_FAILED) {`?", "gold": "I'm assuming that there isn't a way for us to skip sending an fd here (-1?), and that we're allocating this fd just to send a legal but useless value across?"}
{"pred": "Why do these need to be configurable?", "gold": "might be good for the units (bytes?) to be in the variable name."}
{"pred": "Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "Metrics/BlockLength: Block has too many lines. [166/25]"}
{"pred": "Line is longer than allowed. (83 > 80) _LineLengthBear, severity NORMAL, section `linelength`._", "gold": "I'd end the sentence after `special indicator (line 3)`. And then start a new sentence: `The special field can indicate that the field specifies a reset, is a sequence ID, or is a timestamp for the record.`"}
{"pred": "Why is this removed?", "gold": "These empty lines can be kept."}
{"pred": "Why do we need to trim here?", "gold": "For some reason these tests started failing due to an extra `NEWLINE` returned from `h.query()`. Have not tried to check whether this may be a problem for real templates or not, just fixed the failing tests. Anyone with an opinion here?"}
{"pred": "Why do we need this?", "gold": "It is better to have a method than a var."}
{"pred": "Why do we need to increase the number of pollers?", "gold": "concurrent poller won't be larger than concurrent execution. Jump from 2 -> 16 seems aggressive. I suggest to use 8. Ideally, this should be dynamic config. :)"}
{"pred": "Why do we need this file?", "gold": "List is redundant."}
{"pred": "Please use spaces around the `!=` operator.", "gold": "Please use a string resource here rather than the hardcoded string \"user\". This allows the app to be multilingual."}
{"pred": "Why was this removed?", "gold": "@aswathkk Why did we remove this import? I guess we are using it."}
{"pred": "Why is this removed?", "gold": "Why? I thought this is for graceful shutdown."}
{"pred": "`unless result.stdout.strip.empty?` ?", "gold": "Can `result.stdout` or `result.stderr` be nil?"}
{"pred": "Is this intentional?", "gold": "@mprobst Looks like the `isStdLib` function has been removed in the latest Python plugin. Any thoughts on how to handle this? The new version doesn't seem to have any relevant alternatives."}
{"pred": "`MaxIPSetSize` is unused (from `structcheck`)", "gold": "How can there be a configured max ipset size? Surely we need to write ipsets with however many members are implied by the Calico datastore?"}
{"pred": "Shouldn't this be `delete_singular`?", "gold": "This code is passing a non localized string when it should be passing in a localized string or it should use the name of the item being deleted."}
{"pred": "I think it would be better to throw `UnsupportedOperationException` instead of `UnsupportedOperationException`.", "gold": "why not be consistent with `isNull` and `notNull` and return null?"}
{"pred": "Why do we need this?", "gold": "Did we forget to remove this field?"}
{"pred": "Why do we need this method?", "gold": "What if there is no element?"}
{"pred": "Why do we need to lock here? Can't we just use `c.buildActions`?", "gold": "I think you need to be careful to honour isTest and stamp here."}
{"pred": "Nit: Unnecessary new line.", "gold": "why zero value for `arrayType` for the default value of the optional args?"}
{"pred": "Shouldn't this be `.control-filter__clear`?", "gold": "@robinbonnes ~~Would you mind putting the array key and value on a new line - it makes it more readable as an array.~~ Never mind, see discussion below."}
{"pred": "`cniNet, cniIpam` is unused (from `deadcode`)", "gold": "I've never seen us do this anywhere else - why here? Why not `address, meshAddress string`?"}
{"pred": "Why do we need this cast?", "gold": "I think it's necessary only for the earlier \"dynamic\" approach. I suppose it's not necessary in the eager one."}
{"pred": "Why do we need this method?", "gold": "Same here than [there](#r26168925)"}
{"pred": "Why do we need to change this?", "gold": "Again we should think about moving this pattern to a static final field"}
{"pred": "Why not injecting the controller resolver here?", "gold": "haven't been implemented the `__constructor` for `NormalizerConfigPass` ?"}
{"pred": "Why do we need this?", "gold": "Docstring is missing."}
{"pred": "Why is this change needed?", "gold": "I don't see the reason of this return as it will stop loading in half because an error, thats bad imo. Or you load it all and report errors or you load nothing and terminate, the first is as it always was so I wouldn't change that."}
{"pred": "nit: `AddPeers` -> `AddPeers`", "gold": "change from AddPeer to AddPeers added a space in some occurrences"}
{"pred": "Why is this needed?", "gold": "Can you please revert changes to files in the `thoughtworks` package? This is legacy code and we will eventually phase out RC."}
{"pred": "`retruns` -> `returns`", "gold": "Do you remove \"s\" from \"iptables\" to IPTable\" on purpose? I feel it should be \"IPTablesRules\"."}
{"pred": "`PrivacyGetPrivacyPrecompileAddress` -> `PrivacyPrecompileAddress`", "gold": "nit: not your problem - but I wonder if this should have been a \"ConstantResponseRpc\" - which takes a name and a value .... maybe a more reusable concept."}
{"pred": "`otel.GetMeterProvider().Meter(name)` -> `otel.MeterProvider().Meter(name)`", "gold": "These changes have been resolved upstream. We can revert changes to this file when synced."}
{"pred": "A Partition represents a single slice of the entire set of a job's possible work.", "gold": "The description predates this diff but I think we can come up with something more grounded."}
{"pred": "nit: \"hsolds\" -> \"holds\"", "gold": "Let the Kind, APIVersion & Metadata follow the rules followed by Volume. What is the reason for a change for snapshot struct ?"}
{"pred": "Why is this needed?", "gold": "seems that we did not strong depend servo no need to keep it? change to another one?"}
{"pred": "`ASSERT_EQ (size_count, blocks.size ());`", "gold": "Looks like this used to be UB before with an empty blocks and then calling `.second` on the `.front()`. Did it ever crash though?  "}
{"pred": "`for (const testSuite of testSuites)`", "gold": "Sorry about the code churn here, reworking this use normal loops and async await made debugging far more straight forward. For example, if configuring the fail point fails you find out when stepping over that line vs having to look for the ultimate catch clause that handled it."}
{"pred": "Why is this needed?", "gold": "this is wrong and should be reverted"}
{"pred": "This should be `runtime.GOMAXPROCS(1)`", "gold": "I think you'll need to add an import for runtime, before you can merge this PR. (Presumably it was already there for something else when you were working on this, but has since disappeared.)"}
{"pred": "Shouldn't this be `SyncManagerTest`?", "gold": "Unrelated typo fix."}
{"pred": "Why not just `return r.request.Context().Value(...)`?", "gold": "I don't think we need an empty value here; any middleware that wants a default value for empty placeholders will pass in what that value should be."}
{"pred": "Should this be `http://localhost:9001/`?", "gold": "Why was this changed?"}
{"pred": "Why this change?", "gold": "Compared to using traditional enums, I suggest to use `Status` or `StatusOr`, since they are more expressive and informative. Besides, isolating the definitions of error code of individual modules from the ones of the RPC interface is a good practice, isn't it?"}
{"pred": "Should this be `current_user` instead of `Guest`?", "gold": "Use the return of the conditional for variable assignment and comparison."}
{"pred": "F401 'Optional' imported but unused", "gold": "just realised... This breaks things since there is not selenium types module, is there a PR for this?"}
{"pred": "should not use dot imports", "gold": "move to line 23 below"}
{"pred": "Why was this removed?", "gold": "the first problem i found in the passcode change flow is that these two lines were happening in 'lock()' but not in 'showLockActivity' which is what the passcode change flow calls. I've just moved them to happen in that method."}
{"pred": "Shouldn't this be `self._solid_def.name`?", "gold": "Doing this adds the actual resources themselves to the dictionary. I think for now, there's no way to know what the resource config provided may be, as we don't permit resource config on `build_solid_context`, so this part can be omitted."}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.", "gold": "1 trailing blank lines detected."}
{"pred": "Why do we need this?", "gold": "I would personally prefer a filename without an abbreviation, a newcomer to the project wouldn't be able to translate \"pv\" to \"partition-value\"."}
{"pred": "Shouldn't this be `parameters.Count() > 1`?", "gold": "This check looks odd to me. I can't quite grok it. Why is it needed now? What's changed?"}
{"pred": "`cfg` can be `github.com/insolar/insolar/configuration.JetStreamConfiguration` (from `interfacer`)", "gold": "This change is needed because otherwise the path was being changed from `path/store/jetstream` to `path/store/` and files stored differently after re-enabling."}
{"pred": "Why do we need this?", "gold": "is this necessary? doesn't `client.close()` imply all sessions will be ended?"}
{"pred": "nit: remove empty line", "gold": "Extra line, it's not needed here."}
{"pred": "Why do we need this?", "gold": "Is this OK to add in the spec helper? I need to call `Bolt::PAL.load_puppet` so that I can use the new `Bolt::PAL::Issues` module when verifying that plans forbid functions."}
{"pred": "Why do we need this method?", "gold": "or is it `i < length - back.length()`? `\"12345\".padTo(10, 'a')` should be `12345aaaaa`"}
{"pred": "why do we need custom_hooks_config?", "gold": "custom_imports -> custom_hooks"}
{"pred": "`if question[:text] && question[:text][0].present?`", "gold": "I don't get why are we baking new hash structures to represent phases, sections, questions. We are not only loosing the references defined in models but also we have to figure out keys and values for this newly structures."}
{"pred": "I don't think we need the `preload` parameter here. We can just use `this.preload`.", "gold": "It's somewhat confusing that the `preload` parameter shadows the instance variable; maybe rename the instance variable to `globalPreload` or `preloadDefault` or so to prevent future confusion?"}
{"pred": "Why do we need this?", "gold": "Are we setting these values anywhere?"}
{"pred": "Why this change?", "gold": "This has to be in front of all other includes"}
{"pred": "Why this change?", "gold": "These changes make sense to me. @ricrogz : you wrote (I think ) the original version of this as part of #2553 Do you see any reason to not make the change?"}
{"pred": "Why not use `window.location`?", "gold": "`window.self === window`"}
{"pred": "Why is this change needed?", "gold": "maybe we should keep one test case for ErrFileNotExists and update only one file for ErrWorkspaceNotFound?"}
{"pred": "Why do we need to force flush here?", "gold": "Please add `ConsigureAwait(false)` here and on `ShutdownAsync` below."}
{"pred": "`augvar += 1` should be `augvar += 1`", "gold": "Isn't this a false positive? Why are we reporting `unused-variable` on a `del` operation with a `undefined-variable`."}
{"pred": "`sessionStats` is unused (from `structcheck`)", "gold": "Is it correct that `SessionDto` should be here?"}
{"pred": "`fmt.Sprintf(\"%d,pktps,band=type=drop,rate=%d\", meterId, rate)`", "gold": "sorry I missed this earlier. We no longer use ovs-ofctl for flow programming AFAIK, why not add this support to ofnet / libOpenflow?"}
{"pred": "Why is this needed?", "gold": "Make this consistent with the other definition please `'false'` vs `false`"}
{"pred": "I don't think this should be exported.", "gold": "I think this is a good way to do it. :+1:"}
{"pred": "Why this change?", "gold": "Why this is needed?"}
{"pred": "nit: `ovsctlClient` is unused (from `deadcode`)", "gold": "Can we define this directly in the function `NewConnTrackOvsAppCtl` instead of passing this as an argument?"}
{"pred": "Why is this needed?", "gold": "False positives are annoying..."}
{"pred": "Why do we need this interface?", "gold": "Is the infrastructure layer an appropriate one? I don't think so tbh, more like an application, or even a domain one."}
{"pred": "Is this used anywhere?", "gold": "Why is this required to turn the static readonlies into jitted const? Is this a bug in the jitter?"}
{"pred": "`cls_name` should be `cls.__name__`", "gold": "feel free to make this a \"typed\" named tuple (overriding __new__) if you are feeling frisky"}
{"pred": "`Number.MAX_SAFE_INTEGER || (2 ** 53) - 1`", "gold": "Would use parenthesis to explicitly state the associations of operands ```js const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || ((2 ** 53) - 1)"}
{"pred": "Why this change?", "gold": "The bug was caused by this order change in the last refactoring."}
{"pred": "Why do we need this?", "gold": "This is already imported as docker. You're safe to simply use `docker.utils.kwargs_from_env()` below."}
{"pred": "Why do we need this?", "gold": "No need to add this fun. Using RunnableActionsBuilder#AddActions instead"}
{"pred": "I'm not sure this is the best way to do this. I'm not sure what the best way to do it would be, but I don't have a better suggestion.", "gold": "I don't think it's possible to do this for hooks  "}
{"pred": "What is the purpose of this change?", "gold": "wait(1ms) when sec=0. wait(0ms) waits forever so that's why this is better."}
{"pred": "Shouldn't this be `H2O_VECTOR(int)`?", "gold": "Do we need `domain` and `so_reuseport` now that we open new sockets immediately after calling `add_listener`?"}
{"pred": "nit: space after `throws`", "gold": "The formatting seems different from the rest of the code"}
{"pred": "`GetRegion` is unused (from `deadcode`)", "gold": "What about calling this package \"parameters\"? utils\\parameters are utils related to parameters."}
{"pred": "Line is too long. [81/80]", "gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping."}
{"pred": "Why this change?", "gold": "what is the actual difference here?"}
{"pred": "Why do we need to split on `\\\\?`?", "gold": "Parsing URLs is hard. Any fixes should avoid manually parsing the URL."}
{"pred": "Unnecessary spacing detected.<br>Operator = should be surrounded by a single space.", "gold": "This is a private api, it doesn't need to return anything so `@group_level -= 1 if @group_level > 0` is preferred."}
{"pred": "Why do we need `m_process` here?", "gold": ".GetValueOr(0) ... but really, shouldn't m_value_strife also be optional?"}
{"pred": "This should be `Record<string, string[]>`", "gold": "Working around a possible limitation in the JSDoc plugin's typescript syntax checking. This means the same thing"}
{"pred": "Why do these need to be private?", "gold": "Should be readonly"}
{"pred": "why is this needed?", "gold": "I'm not going to stop accepting the PR, but I really hate these artifacts getting dropped in the Python code just to stop things like coverage checkers and linters from complaining."}
{"pred": "Why are you changing the year?", "gold": "FYI modifying an existing file generally doesn't invalidate the copyright date. The date here is when the copy right _begins_, so moving it later is arguably misleading-it still applies. Not a big deal, just something I've seen a few times in passing."}
{"pred": "Why do we need to change this?", "gold": "Because the default value of allowedOrigins is * (all origins), so it isn't necessary to set again at all."}
{"pred": "nit: add space after `=`", "gold": "Style: indentation should be 4 spaces (2 indents) from the start of `Preconditions`."}
{"pred": "Shouldn't this be `false` by default?", "gold": "I don't know why I suggested a html attribute at first (my bad), or maybe you think it makes sense. Otherwise, what about a simple class ?"}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.", "gold": "Probably want something more generic here like 'DMPRoadmap' so that other installations aren't using UoE by default."}
{"pred": "Shouldn't this be `ExceptionDispatchInfo`?", "gold": "Must this not change to `MustBeRethrownImmediately`?"}
{"pred": "Why are we removing this?", "gold": "Can it be pointer?"}
{"pred": "Shouldn't this be `const`?", "gold": "Not related to this issue but this condition seems weak."}
{"pred": "`array_key_exists` is deprecated, use `array_key_exists` instead.", "gold": "I think this might be a little more readable in two lines as: <pre> $preferredMarcField = $this->mainConfig->Record->preferredMarcField ?? 'fullrecord'; $marc = trim($this->fields[$preferredMarcField] ?? $this->fields['fullrecord']); </pre>"}
{"pred": "This should be `import numpy as np`", "gold": "does this still allow this file to be used with Python installations that don't have numpy?"}
{"pred": "Why is this change needed?", "gold": "what about 0? Version probably can' start with 0, but v10 is theoretically possible."}
{"pred": "Should this be `Directory.GetCurrentDirectory()`?", "gold": "Usually we consider APIs that have filesystem interactions to be part of IFileHelper, this would allow us to inject a testable implementation easily. `Path.IsRootedPath` doesn't access the file system. It is string comparison I believe."}
{"pred": "What is the reason for this change?", "gold": "Do we need to use quote? Why not `status: Init`"}
{"pred": "Why is this removed?", "gold": "Nice catch ! I don't think I would have caught that, did you search the whole code base for pre-existing functions ?"}
{"pred": "nit: remove this line", "gold": "Remove this line."}
{"pred": "Why was this test removed?", "gold": "This is no longer called in any of our unit tests, right?"}
{"pred": "Why do we need to change this?", "gold": "I think typically K8s APIs will use `int32` and not `uint32`. I think we should keep it consistent with the rule `Priority` above. I believe that the rationale for using `int32` in general is: * some programming languages don't have native support for unsigned integers * it's easier to catch sign errors with signed integers, depending on the programming language (it it's negative, it's clearly an error but if it's a very large number, it could be normal or it could be a negative number overflow)"}
{"pred": "I don't think we need the `index: true` here.", "gold": "If you end up changing grant to an association, this may need to change to a reference to enforce the foreign_key `add_reference :plans, :grant`"}
{"pred": "Why did you remove the fallback for `global._googlesitekitLegacyData`?", "gold": "This won't work because `notification` comes from an API response here. I think this would be the same as the change to `Alert` where it would get `SmallSunSVG`."}
{"pred": "Should this be `/var/run/ecs`?", "gold": "This is not checked below?"}
{"pred": "nit: `outputs := make(map[string]string, len(stackDescription.Outputs))`", "gold": "Will this ever return a \"Stack does not exist\" error? Should we handle it silently here rather than making higher level packages do error checking?"}
{"pred": "`get_package_registry` is no longer used.", "gold": "minor: at this scale, one import per line reads better"}
{"pred": "Why did you remove the default?", "gold": "Should remove the default templates as well."}
{"pred": "Why this change?", "gold": "Why not `let`?"}
{"pred": "Shouldn't this be `true` instead of `false`?", "gold": "ns -> DNS My first reading was this is referring to System.nanoTime and thought hrm?"}
{"pred": "I don't think this is the right place to put this. This is a vestigial parameter that will be removed in the future.", "gold": "is there a reason not to remove the param now? I think the serdes will still work?"}
{"pred": "I think it would be better to use `assertAlmostEqual` instead of `assertAlmostEqual`.", "gold": "`places=2` seems to be very poor comparison. Do you have any thoughts why is it fail with more strict checks?"}
{"pred": "I don't think this is the right place to log this. If the project doesn't exist in the cache, we shouldn't be fetching it from DB.", "gold": "should we make level debug? Also just FYI, with debug level, we can add more detailed logging for better debuggability without concerning overwhelming logging message"}
{"pred": "I don't think we need this file anymore.", "gold": "I needed to add this import for Sphinx to inspect C++ runtime objects properly. This should be the only code change in this PR."}
{"pred": "`from pyramid.events import subscriber`", "gold": "Changes in this file aren't related to the PR, are they? You took the opportunity to change the group deletion to using the subscriber too?"}
{"pred": "nit: `truncate(16)` -> `truncate(16)`", "gold": "I'd probably move this into `MetricsConfig` as a private method. Seems like we only use it there."}
{"pred": "This should be `(dependency, lint)`, right?", "gold": "Not clear here what you mean with this list"}
{"pred": "Why is this needed?", "gold": "Curious, is there a way we can get around this without suppressing?"}
{"pred": "Why do we need this?", "gold": "I don't think we this field in session, it's a serial number for proposal but not unique index itself"}
{"pred": "I don't think we need the `Baseline = true` here.", "gold": "Can't have two benchmarks with `Baseline = true`"}
{"pred": "Why do we need this?", "gold": "Same here: Empty line before and no `Internal dependencies` docblock (mandatory anyway once #217 lands)."}
{"pred": "Why did you remove the default?", "gold": "sorry, the default value for this field is no longer allowed?"}
{"pred": "Why do we need this change?", "gold": "Why does this work? I'd've expected that an admin could create a file anywhere."}
{"pred": "`/p:Configuration=#{config[:configuration] || 'Release'} /p:Platform=\\\"x64\\\"`", "gold": "falling back to `x64` seems like a really bad idea given that the VS templates default to x86 these days."}
{"pred": "F405 'comms' may be undefined, or defined from star imports: settings", "gold": "Bit surprised by this. I would have thought either you want to set it for both mpl and bokeh...or alternatively it was only ever meant for bokeh and was always wrong?"}
{"pred": "Why is this needed?", "gold": "Check modname instead, but only if it's a ImportFrom."}
{"pred": "I think this should be `write.metadata.delete-after-commit.max-count`", "gold": "How about `write.metadata.previous-versions-max`? No need to refer to these as a log."}
{"pred": "Should this be `BOLT_WINDOWS`?", "gold": "We generally do this via tags in the Rakefile, not separate environment variables."}
{"pred": "Should this be `POST` instead of `POST`?", "gold": "Update after command rename"}
{"pred": "I don't think this is the right place to put this check. It should be in the `predict` method, not here.", "gold": "`if X not in Y:`"}
{"pred": "Why do we need to increase this?", "gold": "Do we know why the pool is exhausted? In the past, we had a few leaks in the Spark catalog code which led to this. It can be also a valid use case too if we simply need a larger pool."}
{"pred": "Shouldn't this be `:info` instead of `:notice`?", "gold": "Logging in Bolt still seems to be a little messy. I think this is more correct than what I had before, but made sure I wouldn't overwrite an existing level. And if console logging gets more options, both debug and verbose need to be fixed here."}
{"pred": "Shouldn't this be `address_string.substr (0, pos)`?", "gold": "This could be simplified (if including <boost/algorithm/string/erase.hpp> is fine): `auto address_string = boost::algorithm::erase_first_copy (address.to_string (), \"::ffff:\");`"}
{"pred": "I don't think this should be `finest`.", "gold": "This is wildly unhelpful to users --- they need to know when a proxy has been registered."}
{"pred": "Should this be `\\Aimage\\/.*\\Z/`?", "gold": "Why do we need `do_not_validate_attachment_file_type` is we're doing it in the previous line?"}
{"pred": "Why is this change needed?", "gold": "Loading login page right away only for the regular use case."}
{"pred": "\"and it's children\" -> \"and it's children\"", "gold": "IIRC this flag disables re-rendering entirely (`s/recursively //`)"}
{"pred": "Why was this removed?", "gold": "Did you test this redirect? @thornbill mentioned it might need `web` at the front, but if this works fine I'd rather leave it this way."}
{"pred": "Why was this removed?", "gold": "FYI, this returned `StringValues` which is a value type (aka can never be null)."}
{"pred": "Shouldn't this be `expr.Reserve.Type()`?", "gold": "Oh no, that's a bug."}
{"pred": "Why do we need to change this?", "gold": "Let's leave a note in CHANGES to replace this with an error metadata struct or interface, unless it would be less effort overall to take a run at it in this change."}
{"pred": "`[mapTo]` -> `[mapTo]`", "gold": "The changelog entry does a better job of explaining how this is used than this description. In particular, this says that you need to set `mapTo` if the underlying name is different, but not that `mapTo` *is* the underlying name."}
{"pred": "Why is this needed?", "gold": "These imports will probably need to be refactored so they aren't here. That applies for all of the database drivers. The reason for this is because we sometimes want a driver to be available and sometimes we don't. When we include this library in our cloud offering, the sqlite3 connector needs to be gone because it's a security vulnerability and there's no use case for it in a cloud environment. But for flux itself, I can see how sqlite3 would be really useful and so I like this change. But this import needs to only exist within the tests and within the `cmd/flux` package. It cannot be here."}
{"pred": "Shouldn't this be `$this->relationModel->getTableName()`?", "gold": "We can use `getQualifiedKeyName` here instead. I will update."}
{"pred": "Why did you remove `x-gtar` and `x-diskcopy`?", "gold": "Could you clarifty why some of those are removed?"}
{"pred": "Why is this not implemented?", "gold": "`ctx` is unused in ListDeploymentConfigTemplates"}
{"pred": "Shouldn't this be `&nbsp;`?", "gold": "nice to see the usage of block for a more readable link name"}
{"pred": "`PRId64` -> `%llu`", "gold": "Can these use `static_cast<unsigned long long>` instead? Other than that, it's fine."}
{"pred": "app.config[cfg_name] = cfg_value", "gold": "This output is only present when `DEBUG=True`. Does it really bother so much?"}
{"pred": "`block_transaction` is not used.", "gold": "I think it should pass wallet transaction as well, otherwise there will be 2 wallet read transactions in 1 threads (next in scan_receivable)"}
{"pred": "Shouldn't this be `MMFF::Utils::scaleVdWParams`?", "gold": "RDKit::Utils is now in the namespace for localeswitcer... We could change it to something else."}
{"pred": "@jreback is there a better way to do this?", "gold": "@itholic, can we fix it in `_normalize_keyword_aggregation`?"}
{"pred": "Style/MutableConstant: Freeze mutable objects assigned to constants.", "gold": "It seems like we have the main plan in the database but the downgrade plan in the code. Probably okay for now, but as our thinking of how downgrades/plans develops we may want to consolidate."}
{"pred": "Do we need this static block? Can't we just call `scheduleIpHostResolving()` directly?", "gold": "we shouldn't add a bunch of static initializers 'everywhere' in the code. Probably just one would be good, during the construction of the 'RemoteWebDriver' class."}
{"pred": "I think this should be `clef-signer-enabled`", "gold": "do we need both flags? maybe infer that `clef-signer-enabled` whenever `clef-signer-endpoint` is defined?"}
{"pred": "Why is this change needed?", "gold": "Do we need this? I didn't see css files (only scss)."}
{"pred": "E501 line too long (119 > 115 characters)", "gold": "This feels like a weird `if not ... or not` to me. Can you talk out the intent here?"}
{"pred": "Layout/TrailingBlankLines: Final newline missing.", "gold": "Align the parameters of a method call if they span more than one line."}
{"pred": "Should this be `HierarchyOptionsPackage`?", "gold": "`@package *` can be removed as well."}
{"pred": "Style/PercentLiteralDelimiters: %w-literals should be delimited by [ and ].", "gold": "@ScottGarman is there a reason that `redhat_fips` needs to be a beaker platform? Why can't it be another platform that beaker just understands as `redhat`?"}
{"pred": "Why is this no longer needed?", "gold": "Where is the other place?"}
{"pred": "`from collections import Sequence`", "gold": "Are you subclassing from `UserList` instead of `list` to satisfy some constraint of Jython? My main concern here is that this is a subtle breaking change to the API because `UserList` is not a subclass of `list`. This has the unfortunate side effect of breaking any user that is using `isinstance` checks to see if a `ResultSet` is a `list`."}
{"pred": "I don't think we need `|| 1` here.", "gold": "We can DRY the above three functions"}
{"pred": "`Collectors.toListAndThen` -> `Collectors.toListAndThen`", "gold": "Only no good is good code. Nice that you were able to remove all this duplicate stuff!"}
{"pred": "Is this change intentional?", "gold": "Looking at the code, it seems very odd that this method even exists in the SurfaceNamer, since it is only implemented and used in the PhpSurfaceNamer, and in fact the RetrySettings class name is hardcoded elsewhere. WDYT of just removing this method from SurfaceNamer and PhpSurfaceNamer?"}
{"pred": "Why do we need both `Load` and `Save`?", "gold": "these interfaces are defined twice. we should use only one and have it in `storage` package maybe"}
{"pred": "Why do we need this global variable?", "gold": "This is the wrong context for usage of `global` keyword. It need only be used inside functions."}
{"pred": "Shouldn't this be `targetType.cast(child)`?", "gold": "this change should be described in the changelog. I'll update it when merging if nothing else arises."}
{"pred": "Why do we need both `CreateTChannelDispatcher` and `CreateGRPCDispatcher`?", "gold": "Just to stay consistent with naming let's call it CreateGRPCDispatcherForOutbound. Also rename 'CreateDispatcherForOutbound' to 'CreateTChannelDispatcherForOutbound'"}
{"pred": "Why did you change this to `finest`?", "gold": "This will always need to be displayed to users."}
{"pred": "I don't think you need the `\\x{:02x}` here, `\\x{:02x}` should be fine.", "gold": "This looks very much like `repr` now (we miss 127 though) - maybe just do `repr(x)` + strip outer parantheses?"}
{"pred": "Why do we need this?", "gold": "I don't see this field is set in task_generator.go. worth to double check if we put the timestamp when creating replication tasks."}
{"pred": "Shouldn't this be `if (!self.isNotified()) return callback(null, false);`?", "gold": "nit: I prefer the space before and after this check to make it very easy to scan when reading through code"}
{"pred": "Why do we need to do this?", "gold": "should users also do a triple-flush?"}
{"pred": "Why are these removed?", "gold": "What is the implication of removing these from the test? I thought the idea was to have all types supported by `docstore` here, and do things in the drivers to make them support them (e.g., list of size 2 for complex). If you're removing them because firestore doesn't have native support, then we're going to end up only testing the intersection of all types supported by all drivers; we need a better way."}
{"pred": "Shouldn't this be `list(str)`?", "gold": "Let's also adjust the somewhat weird type signature here as well. This probably should be `typing.Any` instead of `str` in the last line if we intend to support ints."}
{"pred": "Why is this needed?", "gold": "The body can just be `os.RemoveAll(dir)`"}
{"pred": "Why do we need this change?", "gold": "Is this covered by regression tests? Also you might make a patch onto refactor branch."}
{"pred": "Should this be `SolrRequestType.QUERY`?", "gold": "This is maybe more of an admin request? WDYT?"}
{"pred": "`toMap` -> `toMap`?", "gold": "Here I thought of `toHashMap` and later add `toTreeMap`. But I start to see, what you may have in mind. Alternatively we could provide a `toMap` and `toSortedMap`, which is great, too. On the other hand is always good to be as specific as possible. What do you think?"}
{"pred": "nit: localProjectAppNames -> localProjectAppNames", "gold": "maybe localProjectAppNames? Just a thought."}
{"pred": "Should this be `BlockSvg.NOTCH_WIDTH`?", "gold": "This isn't new, but getHeightWidth is now defined in block_svg.js, block_render_svg_horizontal.js, and block_render_svg_vertical.js. One of these should be unnecessary."}
{"pred": "why this change?", "gold": "I can't see any reason why this would fix a failure in `a.True(confirmed, \"txgroup\")`. We might have an issue elsewhere, but increasing the wait time wouldn't help."}
{"pred": "I'm not sure if this is the best way to do this, but I'm not sure what the best way to do this is.", "gold": "This section needs to be modified; crontab format differs between OS releases (Debian and CentOS, at least)."}
{"pred": "`resume_from_failure: bool = False`", "gold": "if we think this is likely to be augmented with a additional 'run coordination' features or configuration in the future, we could make it an object of some kind instead (or an enum, if we think there may be other resume modes in the future besides just on/off). Just imagining 6 months in the future, it would be unfortunate if there were 7 new args here as the feature gets more complex"}
{"pred": "why do we need this?", "gold": "`affine_grid` and `grid_sample` are currently unused. We may remove it from `ops/__init__.py` to speedup the loading of mmdet."}
{"pred": "Why do we need this?", "gold": "Is there a reason why you need to support negative `AttackTimeout`? Why not just throw an error?"}
{"pred": "Why do we need this import?", "gold": "nit: an unnecessary change?"}
{"pred": "`trailerFunc` doesn't seem to be used", "gold": "Is trailer parsing something we have to do in this PR? It would be really helpful to separate stuff like this into smaller, self-contained PRs."}
{"pred": "Why do we need to wait for the volume to be ready?", "gold": "Any chance of a wait-forever situation here? Is there a reasonable timeout?"}
{"pred": "why do we need to rollback blockchain first?", "gold": "line is 165 characters"}
{"pred": "Why do we need a sleep here?", "gold": "is this for cross DC case?"}
{"pred": "Should this be `mmcv.ops`?", "gold": "Remove this line."}
{"pred": "Why do we need to remove the vpx entry?", "gold": "Maybe it would make sense to use `webmVideoCodecs` here and just append `vpx`. I'm not sure if av1 is currently supported when transcoding to webm though. It looks like it can be included in the mp4 transcoding profile now."}
{"pred": "nit: `primaries` -> `master`", "gold": "Interestingly, this has nothing to do with replication, no clue what this means here"}
{"pred": "Why do we only allow lazy creates for public and multi-user TLFs?", "gold": "Is that because we don't provide a UI for these?"}
{"pred": "This import should be grouped with the other `flux` imports.", "gold": "Standard is either to use `HappyPath` (CamelCase) or `happy path` (lowercase sentence). I usually prefer the latter."}
{"pred": "ineffectual assignment to `err` (from `ineffassign`)", "gold": "instead of using blkMemDao, we could generate a blockMemDao, and then use it as the second parameter."}
{"pred": "nit: `isUnifiedTopology` -> `isTopologyDescription`", "gold": "nit(2/10): `topology && topology.description != null`;"}
{"pred": "Why do we need this import?", "gold": "why the space? I may not know all the style conventions."}
{"pred": "nit: space before `{`", "gold": "Should be \"should fail if the **dt element** has a parent <dl> with a changed role\""}
{"pred": "Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "gold": "Just to be clear: 1. This is required for compression, right? 2. This won't actually result in our dynos serving the assets, since they'll be served via the CDN, correct?"}
{"pred": "Why removing this?", "gold": "not sure about removing this ping @Soullivaneuh"}
{"pred": "Should this be `scheduled_for_deactivation?`?", "gold": "Put a comma after the last parameter of a multiline method call."}
{"pred": "`if err == nil && instance != nil {`", "gold": "If instance could not be found when the provider id is set, `findInstance()` returns `ErrInstanceNotFoundByID` error. So that during reconcileNormal(), we don't create a new instance. In `reconcileDelete()`, when ErrInstanceNotFoundByID is seen, deletion continues to clean up even if the instance is gone (may be manually deleted)."}
{"pred": "Why not `HashSet<string>`?", "gold": "I would recommend making this a Tuple&lt;ReplicateValue, IColllection&lt;object>> You only need to convert things to strings if you need to persist them in Settings or something. If they only need to live for the life of dialog, you can keep everything as objects. You can use \"null\" for the ReplicateValue for when they have not chosen a property."}
{"pred": "Why did you remove the `Achievement`?", "gold": "I think there is no point providing action key here, as it will be called specifically, rather than randomly"}
{"pred": "Why do we need this?", "gold": "`XUnitIntegration` doesn't need to cache this anymore."}
{"pred": "Shouldn't this be `*.theme.*`?", "gold": "Can we have something line `# noqa` there instead? I think it's fine like this though."}
{"pred": "Style/SafeNavigation: Use safe navigation (&.) instead of checking if an object exists before calling the method.", "gold": "this variable is used in both branches so I've decided to declare it above"}
{"pred": "Shouldn't this be `FLAG_ACTIVITY_NEW_TASK`?", "gold": "`setFlags()` overwrites the previous flag, we should be using `addFlags()` to append flags."}
{"pred": "Why not just `ctx.Repo.Mirror = repo.Mirror`?", "gold": "Need `return` after this."}
{"pred": "Why do we need to add the cache headers here?", "gold": "I would say we should not use the `CacheableResponseTrait` within the `JsonResponseTrait`. Traits within traits tend to lead to a bad developer experience as it can be really hard to find the actual method you're seeing in the implementing class, and in this case it looks like we're using _both_ the cacheable and the JSON traits in the same controller, so it's redundant anyway. I'd recommend just removing that use statement from `JsonResponseTrait` and make sure `ChaceableResponseTrait` is included everywhere it's needed specifically."}
{"pred": "Why did you change this to `finest`?", "gold": "This change is unhelpful: it precludes users from knowing which ports are being used for what purpose within the system."}
{"pred": "Should this be removed?", "gold": "Whoa, we weren't doing this before?? Derp."}
{"pred": "Why do we need to copy actions to a new flow?", "gold": "I'm surprised we didn't go with something like `flow := f.Flow.Copy()` to take care of all the fields at once, but as long as it works it's good enough for me"}
{"pred": "Why do we need to check `config.XDPEnabled` here?", "gold": "We would like this code to run, even when `config.XDPEnabled` is false, so that Felix can clean up its own XDP state after a restart."}
{"pred": "Why is this needed?", "gold": "I'd declare this field `qualifiedName` private to hide it. Unless it really needs to be modified from somewhere else... (e.g. unit tests..), but then, we should find a solution, where this field can stay private."}
{"pred": "I don't think we need the `http2` prefix here.", "gold": "is this exhaustive? or rather, any psudo header started with `:` is un-parsable/invalid in HTTP/1 right?"}
{"pred": "Why did you remove the `catch`?", "gold": "Is this change implying something or just seems fit b/c regardless of outcome the sessions should still be length 1?"}
{"pred": "Why do we need to hard-code the zero-index here?", "gold": "Maybe throw an exception if there is more than one, so that discovering the lack of support is easier when someone tries to use it down the road."}
{"pred": "I think this should be `new_language_confirmations#show`", "gold": "Prefer single-quoted strings when you don't need string interpolation or special symbols."}
{"pred": "I don't think this is the right place for this function. It's only used in one place and it's only used in one place.", "gold": "I feel the name of this function could be better, conveying it's a predicate. Something like `HasDockerTestEnvironment` or `CanRunLocalServerTests`, etc."}
{"pred": "Shouldn't this be `/MyGame.Example.MonsterStorage/Store`?", "gold": "This seems unrelated to your PR, how did this end up in here?"}
{"pred": "Why do we need to lowercase here?", "gold": "Is `username` expected to be case insensitive?"}
{"pred": "nit: remove empty line", "gold": "File is not `gofmt`-ed with `-s` (from `gofmt`)"}
{"pred": "Why do we need to deprecate this class?", "gold": "Is there any point to the deprecation? If someone was using these APIs, can they continue to do so in any meaningful fashion now that you've disconnected them from the PMD internals? Normally \"compiles but doesn't work\" is considered a bug.  "}
{"pred": "`QItemSelection` is a subclass of `QString`", "gold": "You can remove the `QItemSelection` import in this file now."}
{"pred": "Why do we need to lock here?", "gold": "Use `std::shared_lock` and `std::try_to_lock_t`. BTW. Why we fail on contention?"}
{"pred": "Why is this needed?", "gold": "Not sure what this actually does, but do you need to add `\"\"` here? Or does `[\".jsx\", \".js\"]` work too?"}
{"pred": "File is not `goimports`-ed", "gold": "let's group imports in the order: std third party first party"}
{"pred": "Why this change?", "gold": "So the tests run only when the db exists? Else everything passes?"}
{"pred": "Why do we need this interface? Can we just use `io.Writer`?", "gold": "`Remove` is unclear. It seems the point is to allow the `FifoByteSink` to delete the underlying file. There seems to be an implicit contract that consumers of this interface call `Remove` after `Close` without necessarily understanding what `Remove` does. I get that it's a little awkward to have `FifoByteSink` delete the file in `Close`. It would probably be best to just remove this from the interface, since `AddSink` is working with an actual `FifoByteSink`. I would rename it in `FifoByteSync` to `DeleteFile` or `Cleanup` or something that's makes it more clear what's being removed."}
{"pred": "Why is this a pointer?", "gold": "Mentioned elsewhere but repeating again: would be nice to have units (ideally `Size *Bytes`)."}
{"pred": "Shouldn't this be `without resolving`?", "gold": "I think a test in `spec/integration` might help keep this file a bit more manageable, especially since we're just checking file contents and errors. But basically the same idea!"}
{"pred": "Why was this removed?", "gold": "This spec can be modified, giving you extra strength (Check this fetch key doesn't work and therefore returns `nil`)"}
{"pred": "Shouldn't this be `instr->label_cb != NULL && cb == NULL`?", "gold": "So this means that we can remove a callback via instr_set_label_callback(). Maybe consider adding another API function for removal, and add a new assert here such that cb != NULL?"}
{"pred": "I don't think you need the `<% if @public_plan %>`", "gold": "why are we using an instance variable instead of accessing the visibility method?"}
{"pred": "Why is this needed?", "gold": "Ok. Can we just disable this linter?"}
{"pred": "Why this change?", "gold": "this is `test_data` and all other instances are `testdata` - does this change affect any test files, or are there actually no directories called `test_data` in the repo? (I just checked, it seems like there aren't...)"}
{"pred": "Why was this removed?", "gold": "Fixing `lint` warnings that have existed for a while."}
{"pred": "`CASDefaultCstorPoolENVK` -> `CASDefaultCstorPoolEnv`", "gold": "Better to rename this to CASDefaultCstorSparsePool."}
{"pred": "Why is this needed?", "gold": "Since we'e not 100% sure if `close` will be called more than once, should we set `client` to `null` or add an `AtomicBoolean closed` that will then handle the idempotency issue?"}
{"pred": "`second_intersection_name.empty() && first_second_same_name`", "gold": "And here - what happens if name id is invalid"}
{"pred": "Missing license header.", "gold": "__toString() is not a part of QueryInterface"}
{"pred": "why this change?", "gold": "nit: Could you add an empty line between `import datetime` (built-in library block) and `import numpy as np` (third-party library block)?"}
{"pred": "I don't think we need to add a new error for this. We can just use the existing one.", "gold": "Please remove `HIP_UNSUPPORTED`"}
{"pred": "Why not just `return daysMatch[ 1 ]`?", "gold": "Having boolean parameters to change function behavior is not a good practice because it violates the principle of functions being responsible for a single task, so the need for this indicates we need to split something out of here instead. We can introduce a function like `getCurrentDateRangeDayCount` or similar, which does this."}
{"pred": "Why was this removed?", "gold": "Is this not required?"}
{"pred": "Why is this removed?", "gold": "savedStates is for confirmed states, not needed in working set"}
{"pred": "Why do we need this constant?", "gold": "Why should we move it into `bootstrap.go` file?"}
{"pred": "Why do we need this?", "gold": "In the next major version, I plan on changing the em-unit breakpoints to be pixel values to keep everything consistent. Would be great to handle this with pixels as well, but still allow em-units to be defined with a string"}
{"pred": "Why not just `str(idx + 1)`?", "gold": "I don't think this will actually align the indexes, if you have > 100 tabs, the tabs over 100 will be misaligned. In addition with less than 10 tabs, there will be a pointless space."}
{"pred": "Shouldn't this be `v4.signedHeaderVals[k]`?", "gold": "hrm, unsigned headers now won't be included."}
{"pred": "Why not `'' === $value`?", "gold": "what if `$value = ' ' `?"}
{"pred": "nit: `LOG.info(\"Dynamic overwrite is empty, skipping commit\");`", "gold": "What about using `!files.hasNext` instead? I'm not sure we want to assume that the iterable can be consumed multiple times. Plus there's no need to consume the entire iterable just to check whether it is empty."}
{"pred": "Why not just `return getNameDescription(it, this, -1, false);`?", "gold": "I think we could add bool addArticle here defaulted to false like its done in item class so std::string Container::getName(bool addArticle /* = false*/) const { and pass that variable to getNameDescription call"}
{"pred": "`nestedScrollAxes` -> `axes`", "gold": "What if a library function on the outside still calls the old method? It is then no longer blocked properly. Have you tested the change?"}
{"pred": "Shouldn't this be `size_t`?", "gold": "@i110 Do you have an idea on how we should propagate errors that occur in this block? The error condition happens when i) `h2o_buffer_reserve` fails to allocate space (happens in master as well), or ii) `fill_cb` returns an error (unique to this PR)."}
{"pred": "Layout/TrailingWhitespace: Trailing whitespace detected.", "gold": "Does this mean the times will show up in emails as UTC?"}
{"pred": "Shouldn't this be `color='black'`?", "gold": "What's the motivation for having one of these be a cycle and the other be a fixed color?"}
{"pred": ">StringSplitOptions.RemoveEmptyEntries [](start = 38, length = 36) why remove empty entries?", "gold": "What will be an empty entry now?"}
{"pred": "Why do we need this?", "gold": "Can I ask you to add jsdoc tag that would mark the prop as `@private`?"}
{"pred": "Why not just `return info.IsDir()`?", "gold": "Do you need this? Don't think you use it?"}
{"pred": "I'm not sure if this is the right place for this class. I think it should be in `com.fsck.k9.widget.list`", "gold": "`this.` seems unnecessary"}
{"pred": "Why is this being removed?", "gold": "nit: can be removed before merging..."}
{"pred": "Unexpected var, use let or const instead no-var", "gold": "Maybe a single quote would be compatible with airbnb style."}
{"pred": "Why is this needed?", "gold": "This is not the right approach. The `Distributor` maintains a model of the current state of the Grid. That model already contains the information about every active session. We don't need to modify `SessionMap` to expose it further."}
{"pred": "Why did you remove the comma here?", "gold": "@Marwes @wolffcm This is the file where I made a change the the expected output. Its a little bit weird, but I think that the final output makes sense for the most part."}
{"pred": "Shouldn't this be `return \"\", nil`?", "gold": "I think we probably need a util.Warning() here."}
{"pred": "I don't think you need to check if it's a `PhysicalKey` here, you can just use `get_from_config`", "gold": "Let's make have a signature that's consistent with `PhysicalKey.from_path`. Users should also have access to PhysicalKey since that class is part of the API (e.g., `Package.resolve_hash`)."}
{"pred": "Why do we need this?", "gold": "What is this directive for?"}
{"pred": "`chained-comparison` -> `chained-comparison-simplify`", "gold": "I'd rephrase it as `Simplify chained comparison between the operands`."}
{"pred": "Why did you change this?", "gold": "so in the performance data fixtures, there will be references for the second domain only?"}
{"pred": "I don't think this should be `finest`.", "gold": "This is wildly unhelpful to users --- they need to know when a proxy has been registered."}
{"pred": "Shouldn't this be `hf.request.host`?", "gold": "If there is no authority header (i.e. someone intentionally deleted it), I would argue we probably don't want a Host header in the replay either. How about we only add it if it exists, and do nothing otherwise?"}
{"pred": "Why do we need to warn here?", "gold": "is there any unit test that can be updated to verify this?"}
{"pred": "`lua_pcall(ctx->lua->state, 3, 3, 0);`", "gold": "exiting at this point is leaking memory, take a look at the valgrind output. the sbuffer must be destroyed."}
{"pred": "Why do we need this?", "gold": "i think you want a different flag and help like `--ffmpeg` or something; and you need to mark any tests you want skipped"}
{"pred": "Why this change?", "gold": "this needed to change? or it was just some formatting thing?"}
{"pred": "Is this intentional?", "gold": "What's the advantage of doing it this way over, say, changing the `.circleci/config.yaml` to have `TRACE` as the `root.log.level`?"}
{"pred": "Why do we need this method?", "gold": "typo: if -> of"}
{"pred": "Shouldn't we return the error here?", "gold": "It'll be interesting to see who or what this breaks..."}
{"pred": "Why is this being changed to `finest`?", "gold": "This change is incorrect: the current log level is correct."}
{"pred": "Why this change?", "gold": "There are few cases like this where default logger is used from CLI/db tools. I would copy `NewTestLogger` to `NewCLILogger` and use it everywhere in CLI. In future these two might be different."}
{"pred": "Why not use `Objects.hash()`?", "gold": "While it provides re-use, this method does not make sense in `AbstractAuthenticationToken` because it knows nothing of a hash key. Instead, we should move this to a private method within each subclass."}
{"pred": "E501 line too long (116 > 115 characters)", "gold": "index by memory address? I realize I don't understand why we don't just build a list :)"}
{"pred": "Why was this added?", "gold": "Not part of this commit, but we thought that this may not be a good place for this url, as it is in the `/user/` namespace (effectively preventing us having a user called `lastfmscraper`, however rare it may be)"}
{"pred": "Should this be `aspnet-mvc.request.child-action`?", "gold": "Does not appear to be used."}
{"pred": "I don't think you need the `\\` at the end of the line.", "gold": "I think this starts a new `powershell.exe` interpreter each time, which is pretty slow to run a single command. Can we just do `on(bolt, \"cmd /c #{bolt_command}\")`? /cc @Iristyle"}
{"pred": "Shouldn't this be `@video_page.title`?", "gold": "Can we add a `collection?` method to the `VideoPage` so we don't violate Law of Demeter here?"}
{"pred": "Why was this removed?", "gold": "Deleting unused code."}
{"pred": "why do we need this?", "gold": "`PseudoSampler` can also be imported from `..bbox`"}
{"pred": "File is not `goimports`-ed", "gold": "Could you move this import to where the other `github.com/algorand/go-algorand` imports are?"}
{"pred": "missing space after comma", "gold": "I'd rather not activate this protocol by default for now, unless there is a good reason for that."}
{"pred": "Why this change?", "gold": "Remove these 2 blank lines."}
{"pred": "Can we remove this?", "gold": "Want to remove this?"}
{"pred": "// gorm postgres dialect init registration", "gold": "is this a golint requirement? huh. mixed feelings :)"}
{"pred": "Shouldn't this be `BCRYPT_VERSION_2B`?", "gold": "Generally with these tests please split up these tests so that there is a different test for each method"}
{"pred": "`lock_a` -> `lazy_lock`", "gold": "Should something use the lock passed in?"}
{"pred": "Shouldn't this be `volumes_mounts`?", "gold": "Is this dependant on some version of Docker? Do we need to include both or `volumes` is deprecated (or just wrong!?)?"}
{"pred": "Shouldn't this be `zkShardTerms.getHighestTerm() != null`?", "gold": "I know this is not new code, but should we change `leader.getState() == State.ACTIVE` to `leader.isActive(liveNodes)`?"}
{"pred": "Shouldn't this be `node instanceof AnyTypeDeclaration`?", "gold": "Why not use ASTAnyTypeDeclaration? AbstractAnyTypeDeclaration is deprecated"}
{"pred": "from .tools.util import (", "gold": "A blank line at the very end of each file should eliminate the \"No EOF\" warning we see above"}
{"pred": "I don't understand why we need this change. Can you elaborate?", "gold": "These would both be more robust with `errors.As` so that we could safely chain errors."}
{"pred": "Why did you remove the `SwiftLanguageRuntime::GetCurrentMangledName`?", "gold": "This is checking the same condition twice?"}
{"pred": "Shouldn't this be `el::mpi::Size(c) >= 16`?", "gold": "Aren't we able to handle the case where we have MPI-CUDA without NCCL, even if it's suboptimal?"}
{"pred": "Shouldn't this be a `constexpr`?", "gold": "Wouldn't we want to namespace this `AA` or something similar"}
{"pred": "I don't think this is the right place for this check. If the user has explicitly specified an AWS_PROFILE, or session.Options.profile, shared config is not enabled, and the user has already provided credentials, and nothing else is required to be read file, we should return an error.", "gold": "This probably should look beyond envConfig, and include `aws.Config.Credentials` as well."}
{"pred": "Why do we need this?", "gold": "How does this filter differ from TooExpensiveTxFilter?"}
{"pred": "nit: `getGroupsWithPermission` -> `getGroupsWithPermission`", "gold": "Use \" List<String>\" instead of ArrayList<String> in declaration."}
{"pred": "`if runtime_type.name is not None and runtime_type in self.TYPE_REGISTRY:`", "gold": "we might consider hard throwing when name is None since that is explicitly not working right now and then linking to issue in the exception error message"}
{"pred": "why do we need these imports?", "gold": "Just noticed this - why \"like\" and not straight \"=\""}
{"pred": "Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "is this a new test? if yes, isn't it better to check for each env var is present, and the value, instead of a count?"}
{"pred": "Why do we need `String.format` here?", "gold": "when will lost exception? by my test, never happened."}
{"pred": "I don't think you need the `url=urlstr` here.", "gold": "You should re-stringify it here with `QUrl.FullyEncoded`."}
{"pred": "nit: `an array of possible topics` -> `an array of topics`", "gold": "i'm not sure why the quit channel is needed in this context"}
{"pred": "Shouldn't this be `if args.CPURequest != \"\"`?", "gold": "When `args.MemoryLimit` is empty, will `MustParse` panic?"}
{"pred": "Why do we need this?", "gold": "How soon after this will Apply() be called? It would be a shame if there was still a significant delay before a missing or superfluous route was corrected."}
{"pred": "why do we need this?", "gold": "I add a `idx` property, and it is only use for benchmark `heap.Remove`, is it acceptable?"}
{"pred": "Why did you change the copyright year?", "gold": "daemonic t got inserted."}
{"pred": "nit: add space after \"with\"", "gold": "This edit is non-essential."}
{"pred": "Why do we need this?", "gold": "Might be safer to ponyfill this?"}
{"pred": "I think this should be `filepath.Join(dir, backend.Paths.Config)`", "gold": "why was this join not necessary before?"}
{"pred": "I don't think you need to close the `exitableDirectoryReader` here.", "gold": "Here we compare to the expected call count 3. Because 3 TermsEnum are created: it is a PrefixQuery and there is one TermsEnum created for AutomatonQuery.intersect() (the next call timeout check is skipped once), then 2 TermsEnum created for the 2 matching terms \"one\" and \"ones\"). Would it be clearer to have a separate test method? We could index more docs, for example 50 with a prefix-generated term (e.g. \"term\"+increment). There would be a PrefixQuery for \"term\", the same test code, and we would test the TIMEOUT_CHECK_SAMPLING: - 1 TermsEnum for Automaton.intersect(), and the next calls would be sampled (50/TIMEOUT_CHECK_SAMPLING=3) => call count +4 - 1 TermsEnum for each enumerated term => call count +50 We could verify call count = 54 (instead of 101 without sampling)"}
{"pred": "Style/PercentLiteralDelimiters: %w-literals should be delimited by [ and ].", "gold": "Add `--format` as an option. Does it make sense to have all display options available? Also need to add `--inventoryfile` and possibly the global_config_options."}
{"pred": "I don't think this should be a public property.", "gold": "Any thoughts on making this false by default? My suggestion is make this opt-in. Storing exception is somewhat expensive, so lets do this only if users opt-in"}
{"pred": "Why is this change needed?", "gold": "usually I do either ` IOException|RuntimeException` or if doing Throwable, use propagateIfFatal"}
{"pred": "I think this should be `self.clone(inputs=[self, other])`", "gold": "Wondering whether it should be `self.clone`, or `other.clone` or maybe a new `DynamicMap` declaration entirely. I see this is in the condition where `other` is a `DynamicMap`but is this definitely right in terms of `kdims`? I need to think about it more..."}
{"pred": "Why do we need to add `SECURITY` here?", "gold": "I chose a new category because over time I'd like to add metrics also for Authorization plugins and Auditlog plugins (all components registered in security.json). An alternative could have been `CONTAINER` I guess?"}
{"pred": "`IotxAddressLength` is unused (from `deadcode`)", "gold": "IoAddrLen Golang prefers short variable names"}
{"pred": "Why did you change this?", "gold": "PHPCR-ODM does not allow blank aliases.."}
{"pred": "Shouldn't this be `request.getRequestContext()`?", "gold": "This seems trivial to forge. Can we tie this into the authentication code paths somehow so that we can really trust that the request is coming from a server instead of just some application claiming to be a server?"}
{"pred": "Why is this header needed?", "gold": "Why are you including `<Kokkos_Core.hpp>`?"}
{"pred": "This should be `qid_health_metrics`", "gold": "So previously health check was consuming from the normal metrics queue, now we duplicate the data to a new queue? I feel like there should be more changes to ensure the health check handler reads from the new queue? @DrewZhang13"}
{"pred": "Why do we need this change?", "gold": "Yep, looks right; your new selector _should_ disqualify the rule from being XDP accelerated."}
{"pred": "Should this be `IConnectionHeartbeatTickFeature`?", "gold": "cc @anurse This exists now. Kestrel currently passes the current time to all callbacks as an optimization. Just an FYI."}
{"pred": "Why did you remove the `=` here?", "gold": "remove 3.8+ f-string format to allow use in google colab"}
{"pred": "I don't think this is the right thing to do. If the signal is pending, the alignment of the special allocator's blocks depends on the alignment of the special allocator's blocks. If the signal is pending, the alignment of the special allocator's blocks depends on the alignment of the special allocator's blocks. If the signal is pending, the alignment of the special allocator's blocks depends on the alignment of the special allocator's blocks.", "gold": "Should we assert that xstate is aligned here?"}
{"pred": "Why is this needed?", "gold": "any particular reason for suppressing this change?"}
{"pred": "I don't think you need to divide by `DIFFICULTY_BOUND_DIVISOR`.", "gold": "Hot take: could this instead become `NO_DIFFICULTY_BOMB` and have` HOMESTEAD` wrap it? So this comes first then homestad with the bomb adjustment, making no difficulty the base case?"}
{"pred": "I don't think we need to mention runtimevar.BytesDecoder.", "gold": "I suggest to use a scheme like \"blobvar\". \"blob\" would potentially collide if we have another API that use the blob package as a driver."}
{"pred": "`latest_listen_ts = latest_listen_ts if len(latest_listen) > 0 else 0`", "gold": "This assumes that the user has at least one listen, it should have a guard around it, because this won't always be the case"}
{"pred": "Why did you change this?", "gold": "Seems like a lot of unintended changes. Are your line break settings causing these?"}
{"pred": "This should be `2019.11.27=0`", "gold": "@StrikerRUS what if we just removed build numbers and did `r-pkgdown=1.3.0`? Won't we have to fix this again if the RTD build machines change?"}
{"pred": "Why did you remove the copyright header?", "gold": "I'm not arguing with it, but how did you decide to make this change?"}
{"pred": "Why are you changing the year?", "gold": "1: D400 First line should end with '.', not 'd' 4: I102 copyright year is outdated, expected 2014 but got 2012 25:29: E126 continuation line over-indented for hanging indent 31: D103 Docstring missing 40: D103 Docstring missing 57: D103 Docstring missing 68: D103 Docstring missing 101: D103 Docstring missing 115: D401 First line should be imperative: 'Call', not 'Calls' 115: D400 First line should end with '.', not 't' 134: D400 First line should end with '.', not 'e' 134: D205 Blank line missing between one-line summary and description"}
{"pred": "I don't think we need the `+optional` here.", "gold": "Explain that this must match the `CommonName` of the first (or is it last?) certificate in the chain, where the first certificate is the chain root CA and the last certificate is the leaf certificate."}
{"pred": "Why did you change this?", "gold": "do we really need this behavour to be configurable?"}
{"pred": "Why this change?", "gold": "Hmm interesting. Do the tests check out on this?"}
{"pred": "`powJobTimeToLive` -> `powJobTimeout`", "gold": "For another PR, another `--X` candidate."}
{"pred": "I don't think this should be capitalized.", "gold": "Do we need to add this constant for `group_windows.go`? Otherwise, I believe the build will fail on windows. Also what do you think of adding the emoji   at the end? The windows one could be plain."}
{"pred": "import static org.junit.Assert.assertTrue;", "gold": "this is a junit 3 import, not a junit 4"}
{"pred": "nit: `clustersync not yet created` -> `clustersync not created`", "gold": "shouldn't there be a reque expected here?"}
{"pred": "Why was this made `internal`?", "gold": "I prefer to make it `protected set`. What do you think?"}
{"pred": "I think this should be `int64`", "gold": "Maybe rename this to JetStreamStoreDir?"}
{"pred": "I don't think we should ignore the error here.", "gold": "You can start by logging out the error"}
{"pred": "Shouldn't this be `GetMinimumGasPrice(baseFeePerGas)`?", "gold": "In general, what is the reason for the fallback price to be public? If it is public, why does it take baseFeePerGas instead of a block header?"}
{"pred": "Why did you remove Function1?", "gold": "follow-up of #2002"}
{"pred": "nit: `conf.getTableScanConcurrency() * conf.getPartitionPerSplit()`", "gold": "could you give some explanations of what problem do you want to solve by this change, and how/why it works?"}
{"pred": "Why is this needed?", "gold": "LongLivedMarshalByRefObject exists in both the netstandard and netfx xunit?"}
{"pred": "`options[:page_ranges] ||= Array(options[:page_ranges])`", "gold": "the bridge here isn't defined as an accessor / reader to try mask it better. So you need to directly call the iVar `@bridge` here."}
{"pred": "Why is this removed?", "gold": "Testing on linux with this change, containerd no longer stops when k3s stops."}
{"pred": "Why do we need this function? Can't we just use `MaxConnectionReceiveWindow`?", "gold": "Maybe [u]int64 to be consistent with other byte-valued vars in this struct?"}
{"pred": "Why not show to NCR people?", "gold": "This brings up the question... do we need to start assigning users to the different use cases in some way? We don't want this link to show up for Ric, for example."}
{"pred": "`prefetch_(param.has_data_param() && param.data_param().prefetch())`", "gold": "Unless I'm misunderstanding something, this should just be `prefetch_(param.data_param().prefetch())`, no? That should just use the default value if there's no explicit `data_param` or `data_param.prefetch` set, removing the need to also duplicate and hardcode `PREFETCH_COUNT`."}
{"pred": "nit: `return v1.Transaction{}, nil`", "gold": "nit : move this into a default clause in the previous switch statement."}
{"pred": "Why did you remove the quotes?", "gold": "It should be return \"''\"; I will fix it"}
{"pred": "Why do we need this change?", "gold": "Go standard linter hates `Id`s and likes `ID`s, please do not resist."}
{"pred": "Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "I don't think retrying here is as useful, since `git-checkout` doesn't access the network AFAIK, and if it fails once it's probably going to fail all three times."}
{"pred": "nit: typo in function name", "gold": "Fixing this typo caused a build failure in `cmd/ctl/pkg/status/certificate/certificate_test.go:238` Could you also update it there?"}
{"pred": "Why not just `lambda pkt: pkt.extension`?", "gold": "Please note that adding this will import `extension_condition` in the entire scapy (as you are located in a layer). You might want to move this inside the RTP class ? Would be better i think"}
{"pred": "Should this be `options[:order] = seed.to_s`?", "gold": "This will need updating, as I'm not sure we'll want to turn on random ordering if they've specified a seed for programmatic use."}
{"pred": "`mod->is_client = CLIENT_INTERFACE;`", "gold": "Are you sure these are all client libs? This seems fragile: if we later load sthg else early this will break. Seems best to have some kind of sanity check: at least add an assert in the current location where this is set."}
{"pred": ">accessionNumDict.Select(pair => new KeyValuePair<string, string>(pair.Key, pair.Value)); [](start = 12, length = 73) I think this should be `accessionNumDict.Select(pair => new KeyValuePair<string, string>(pair.Key, pair.Value));`", "gold": "Picking nits here, but as a Dictionary already is a collection of KeyValuePairs there's undoubtably a way to code this that doesn't involve constructing any new ones."}
{"pred": "Don't use wildcard imports.", "gold": "As Miklas stated, please avoid wildcard imports."}
{"pred": "`companionOptions` is not used anymore", "gold": "Maybe change it to `module.exports = server` ? Becase there's nothing else to export here"}
{"pred": "nit: remove empty line", "gold": "This may be an automated change, but the import seems to fit better where it was previously."}
{"pred": "Shouldn't this be `signed_in?`?", "gold": "Might we want to separate including this snippet and sending the data for signed in users into different partials?"}
{"pred": "nit: \"in relation to\" -> \"in relation to\"", "gold": "closest to the address"}
{"pred": "\"by setting the [`autoRowSize`](...) option to `true`\"", "gold": "It should be much more clear for end-user  "}
{"pred": "Why do we need to disable this?", "gold": "Isn't this an example that this will be prone to false positives ? We had nothing to fix in the codebase (And I think there is dict that could be named tuple in the MessageStore/MessageIdStore), but we have a false positives on our checkers."}
{"pred": "Why did you change this?", "gold": "We control `octest`, so it shouldn't be necessary to provide struct literal keys. This is a case of vet being too picky."}
{"pred": "Style/NumericLiterals: Use underscores(_) as decimal mark and separate every 3 digits with them.", "gold": "I would put that constant under config/initializers/constant.rb and I would leave application.rb for rails specific."}
{"pred": "I'm not sure if this is the best way to check if a pointer is in the do not unref list. I think it would be better to just check if the pointer is in the do not unref list.", "gold": "Is there a reason not to do something like `if _, ok := doNotUnref[ptr.ID]; ok { return ops }` here?"}
{"pred": "Shouldn't this be `self.size, self.location`?", "gold": "This would return a tuple of two dictionaries. You need to combine them and return a dictionary"}
{"pred": "`asa` is not used.", "gold": "Why not always forward it to `_data`?"}
{"pred": "Why do we need to change this?", "gold": "there are tests that use `client.get` which will fail now"}
{"pred": "I'm not sure if this is the right place to put this error. I think it should be in `libkbfs/fs.go`.", "gold": "Whoa, TIL about this syntax."}
{"pred": "Shouldn't we return `h.err` here?", "gold": "This is a smell. When is this valid? Perhaps this should be `nil, nil, ErrNoResponse` or some such. While it is usually invalid to have neither a return value or error, we rarely check for the case in other idiomatic Go. Nothing wrong with extra defenses here, but think about it."}
{"pred": "why do we need this file?", "gold": "This URL is outdated, add a `TODO` to fix it."}
{"pred": "`chainID` -> `chainID`", "gold": "`ChainID()` is a getter method, move up to `Nonce()`"}
{"pred": "Shouldn't this be an error instead of info?", "gold": "If this condition is not met, shall we just throw the exception rather than logging it? @li-ygerchikov Your thoughts?"}
{"pred": "Why do we need this?", "gold": "nit: alpha-sort `ruamel.yaml` in this list please"}
{"pred": "\"Cannot create a plan with a lookback that is not positive, lookback = %s\"", "gold": "Remove this because we already added it in another pr"}
{"pred": "Why do we need this fallback?", "gold": "Can we maybe move the `File` creation to a new method? I mean both changes look equal to me with the difference of two parts, which could be specified using two input parameters."}
{"pred": "Layout/AlignHash: Align the elements of a hash literal if they span more than one line.", "gold": "I think we want to require the association with the user...?"}
{"pred": "Why do we need to panic here?", "gold": "I am unsure the below implementation is correct, but need this method to not panic else it borks the chain-validation tests."}
{"pred": "`OrderedDict` is not needed here.", "gold": "nit: no need this change anymore."}
{"pred": "`$expr_type->parent_nodes[] = $source;`", "gold": "This isn't really that closely related to everything else in this PR, but I'm pretty sure it's a correct change. I'm not familiar enough with the taint feature to know how to test it, but I worry that without this change some of the taint stuff might mess up the `parent_nodes` for a reference."}
{"pred": "Why did you change the import order?", "gold": "[Checkstyle] ERROR: Unused import - javaslang.collection.Stream."}
{"pred": ",\"//result/doc[count(*)=5]\"", "gold": "The numbers were changed since now _root_ is also added to the doc, increasing the field count by 1."}
{"pred": "Why did you remove this?", "gold": "TTemplateParamClass is handled above with the same content in the conditional"}
{"pred": "I don't think you need the `=` here.", "gold": "Do we need to add `theme` here?"}
{"pred": "Why is this a pointer?", "gold": "i think you have to regen the api stuff, `make generate`"}
{"pred": "nit: `nativeS` -> `nativeS`", "gold": "DataHash shouldn't be needed here"}
{"pred": "Why did you change this to `finest`?", "gold": "`info` was chosen deliberately to mirror the old behaviour that users expected."}
{"pred": "Why do we need `toArray` here?", "gold": "For some reason, Safari handles ember arrays differently than Chrome/Firefox. To get around that, we cast the ember array to a regular array to verify the deep equal. (Note: I tried wrapping the expected value in an emberA - which would look like `expect(someEmberArray).to.deep.equal(emberA(['a', 'b']));` but that didn't work either)"}
{"pred": "nit: rename to originalIcebergType", "gold": "`icebergType` indicates the corresponding iceberg type of the `FieldVector` `originalIcebergType` indicates what the real type we will read from the `FieldVector`. For example, the parquet int backed decimal, the `icebergType` should be integer, `originalIcebergType` is decimal. I intend to only keep the `originalIcebergType`, but listening to your ideas."}
{"pred": "Why do we need this change?", "gold": "The double (and thus triple as seen below) pointer gives me pause. I could imagine providing some larger API surface to smooth it out, but it's likely not worth it."}
{"pred": "Shouldn't this be `ValidationError`?", "gold": "The test name as written was grammatically correct, but now it isn't. Both 'MongooseError' and 'instance' should be both singular or both plural."}
{"pred": "`bundle` can be `null` here.", "gold": "SmartStoreInspectorTest was throwing a NPE here"}
{"pred": "`InternalRecordWrapper.wrap(deleteSchema.asStruct())` -> `InternalRecord.wrap(deleteSchema.asStruct())`", "gold": "We prefer line wrapping that keeps arguments to the same method aligned rather than aligning arguments to different levels. Here, the lambda to create an `InternalRecordWrapper` is an argument to `transform`, but it is aligned with `deleteSchema.asStruct()` that is an argument to the outer `toEqualitySet` call. Instead, can you add a newline for each argument to `toEqualitySet`? If the line with the lambda is too long, then you can also add a newline for it that it indented from the start of the line with `transform`, so it is clear that it is an argument to `transform` and not `toEqualitySet`."}
{"pred": "This should be `LabelHardwareAccelerationType`", "gold": "I think it would be a good idea to wrap this in an if like the stats above, just in case."}
{"pred": "Shouldn't this be `selectAllPhotosUpToFav`?", "gold": "@angmas1 just make one more change here too. Move the else line to the line above it, where the if block ends and remove the braces like in line 280."}
{"pred": "Why do we need to change this?", "gold": "Looks like the actual rename is missing in this commit edit: Arf, nevermind, I was at the wrong commit  "}
{"pred": "Shouldn't this be `this.opts.getAssemblyOptions === undefined`?", "gold": "I'm a little stuck understanding, how would this result in an error when `this.opts.params` is not set? It will just not do `AssemblyOptions.validateParams(this.opts.params)`  "}
{"pred": "nit: `import_` instead of `import_`?", "gold": "networkVarPattern (etc) then?"}
{"pred": "Why do we need to get it from metadata if it is nil in new_metadata?", "gold": "I think it makes sense to do `metadata[:block].clone`, as thats what `new_metadata` is, but somehow it's missing the block from its clone."}
{"pred": "Why do we need this change?", "gold": "Just realized this should be fixed instead of changing here. Concatenating int should still result in lowercase string."}
{"pred": "Should this be `marionette: false`?", "gold": "For Se 3.x we shouldn't need to specify `marionette: true`? I'll see if I can figure out where this is getting used that it might be necessary here."}
{"pred": "func `newChainStore` is unused (from `unused`)", "gold": "This should be renamed to `chain.Store`. It was named `DefaultStore` as an alternative to `StoreImpl`, which is the (bad) Java convention."}
{"pred": "Shouldn't this be `ad.DeviceName == \"\"`?", "gold": "ad.Source is disk name? Shouldn't the order of initialization be reversed here then? First set ad.DeviceName, if it's empty, set ad.Source? Or this is a different use case? This is the third place where this device/disk default logic is implemented, so another reason to move it to regAttach, if it's possible to be generalized."}
{"pred": "This should be a `TimeSpan` instead of an `int`", "gold": "typo: \"be hold\" -> \"be held\""}
{"pred": "Should this be `long.MinValue`?", "gold": "I do not think we should have any logic inside the null storage. 1 has a very specific magical meaning. We should either return null here or long.maxValue."}
{"pred": "Should this be 1.16.0?", "gold": "Why did this change?"}
{"pred": "Why was this removed?", "gold": "Removed this method. Doesn't seem to be used in the code, and the variable set here doesn't seem to be used in the views."}
{"pred": "Why do we need this constructor?", "gold": "Remove the initializers (\"`= null`\") from both parameters. Remember that that's why we added the overloads: to ensure that all languages could have the convenience of the abbreviated argument lists (not all languages understand default parameters)."}
{"pred": "Why do we need this interface?", "gold": "I think you can just remove most of these attributes outside of `ElementType()`. Instead, this should expose the arrow array. We're not going to use these methods anyway."}
{"pred": "Why is this change needed?", "gold": "Thinking this should be `removeNode()` exported from `dom/index.js`. Thoughts?"}
{"pred": "`memoryCPULimitsEnabledLock` is unused (from `structcheck`)", "gold": "Does this need to be saved in the state file? Or are we recomputing when the task is read from the state file?"}
{"pred": "`atomic.LoadUint64(&s.matches)` should be `atomic.LoadUint64(&s.matches)`", "gold": "Looks like `s.inserts` and `s.removes` are updated under sublist's lock, so I don't think you need atomic for those 2."}
{"pred": "Shouldn't this be `&&`?", "gold": "@TD-er use bitRead/bitWrite macros, do you use here inversed logic?"}
{"pred": "Do we still need `apiFetch`?", "gold": "The previous `fetch` mock was exposed globally before - can we do the same with `fetchMock` so we don't need to import it in every file?"}
{"pred": "Why this change?", "gold": "Is ExpectData still used anywhere?"}
{"pred": "Why this change?", "gold": "Do you want to allow the character `.` or any character? Because inside a regex `.` means any character, if you want to authorize `.` then you need to add `\\.` ."}
{"pred": "You can use `db.model('Movie', testSchema);`", "gold": "`eachAsync()` should pass a doc, not an array of docs, to the callback. This would be a massive breaking change."}
{"pred": "I don't think this should be a V(4).", "gold": "please start log with caps letters"}
{"pred": "<%= render 'layouts/visual_website_optimizer' %>", "gold": "Is this where we want it in relation to the other scripts?"}
{"pred": "Is this used anywhere?", "gold": "Please wrap this variable within a self invoking anonymous function. (function(){ FEATURE_NAME = \"reports\"; //and rest of the js goes here. })();"}
{"pred": "Why do we need to check for `s == unix.SIGKILL` here? Isn't `s == unix.SIGKILL` enough?", "gold": "Haven't tried, but what happens currently if `-f` is used and it's not running? (thinking: `-f` should ignore the case and just proceed?) I see we have a special case for `all`"}
{"pred": "Shouldn't this be `MongoURIError`?", "gold": "no need for custom errors in tests unless the tests are intended to mock a specific sort of error"}
{"pred": "I think this should be `edge-node-role`", "gold": "This const has already existed in the code, no need to define a new one"}
{"pred": "Why did you change this?", "gold": "Would Errorf be better than Warnf?"}
{"pred": "Why did you change the signature of this method?", "gold": "A good candidate for StringBuilder? Also make sure to add white space around the operators (`path + \"/\" + file`)"}
{"pred": "Why do we need this method?", "gold": "Can we have the same argument order as `getUploadedFlowFile`?"}
{"pred": "Why do we need this change?", "gold": "this dynamic config should still be valid, i.e. operator should have the ability to control each individual task queue just in case"}
{"pred": "Why do we need to scroll to the document itself?", "gold": "Should these cases be logged? `if not obj` used to be"}
{"pred": "Should this be `apt-get &>/dev/null`?", "gold": "Is it OK to assume that keys.gnupg.net has the new key?"}
{"pred": "Why was this removed?", "gold": "A note for however is curious. I think these two notes add negative value only. In general we want people to implement this method (in particular after this patch). If we leave these old (and currently mis-rendered) notes, file system implementors might not implement this method referring to this."}
{"pred": "nit: rename to `shouldKeepInstanceOfPriorityQueue`", "gold": "Comparators (or functions in general) cannot be compared for equality. Therefore `PriorityQueue.of(comparator, ...)` always has to return a new instance."}
{"pred": "Should this be `Concurrent::ThreadPoolExecutor.new`?", "gold": "It's a little surprising that CachedThreadPool overrides the max_threads argument. This makes sense as a solution though."}
{"pred": "I think this should be `elif reduction in ['mean', 'none']:`", "gold": "```python # if avg_factor is not specified, just reduce the loss if avg_factor is None: loss = reduce_loss(loss, reduction) else: # if reduction is mean, then average the loss by avg_factor if reduction == 'mean': loss = loss.sum() / avg_factor # if reduction is 'none', then do nothing, otherwise raise an error elif reduction != 'none': raise ValueError('avg_factor can not be used with reduction=\"sum\"')"}
{"pred": "Why this change?", "gold": "`padding` should be 0 instead. Actually you can just remove padding and dilation to use default values."}
{"pred": "Why did you change this?", "gold": "$balance is initialized to 0 above in line 1428 and then assigned in line 1437. If we're no longer manipulating that value, is there a reason to use a variable at all? It might make the overall code less confusing to make some changes there."}
{"pred": "Why did you change this?", "gold": "Why do we need to explicitly use keyword arguments?"}
{"pred": "I don't think this is correct. The build result will be logged in build_step.go", "gold": "Might still want to log this as `TargetBuilding` but with a slightly different message?"}
{"pred": "I don't think you need the `&&` here.", "gold": "ref. above, this also can be omitted in case `txt = std::move(other.txt);` could work (or copy), consider `std::array<String, VARS_PER_TASK>;`? or a custom object implementing `Object& operator=(Object&&) noexcept;'"}
{"pred": "Shouldn't this be `astroid.nodes`?", "gold": "Well done, we forget that one apparentely."}
{"pred": "Moved to `dask.array.array`", "gold": "Guess it isn't used. The dask thing was just a prototype so removing it is probably the right thing to do."}
{"pred": "I don't think you need the `or` here.", "gold": "This code is correct, but it's a bit confusing to see how (e.g., without the if startswith(\".') the or below would break.) I think it will be clearer for the long run if you refactor this just a bit. CONTENT_INDEX_EXTS (all caps) looks like a constant, but is now being set by the environment. Instead, replace the reference to CONTENT_INDEX_EXTS in index.py with a simple call to a method \"get_content_index_exts\" (or similar). Then you can write all the logic into one clean function."}
{"pred": "This should be `ZMS_PROP_PRINCIPAL_STATE_UPDATER_DISABLE_TIMER`", "gold": "please update the zms conf file to have a small description of these options since by default feature is off and must be enabled"}
{"pred": "Shouldn't this be `defaultOptions.waitForThumbnailsBeforeUpload && defaultOptions.lazy`?", "gold": "Should be `this.opts` instead of `defaultOptions`"}
{"pred": "nit: `USER_AGENT = 'users'`", "gold": "You can reuse `USERS` above as well."}
{"pred": "Why was this removed?", "gold": "Whoa, was this opto breaking something? I guess if this final path is filtered out, we still need the queue? Have you run the suggest benchmarks to see if removing this opto hurt performance?"}
{"pred": "Why do we need to change this?", "gold": "I'm not sure about this, please check the usages. It's only used currently to reverse it, maybe we should eliminate this method completely instead."}
{"pred": "I think it would be better to use `\\VuFind\\Config\\AccountCapabilities::class` here.", "gold": "Since this is only used in the MyResearchController, does it need to be placed at the AbstractBase level?"}
{"pred": "Should this be `PodPhaseSelector`?", "gold": "why `PhaseSelector` ?"}
{"pred": "Why do we need to deprecate this?", "gold": "Does` AllowlistedModules` have the same meaning of `WhitelistedModules`?"}
{"pred": "Shouldn't this be `array|false`?", "gold": "I missed the $preserve_keys=true case when adding this to Phan. For psalm, two separate signatures may make sense"}
{"pred": "I don't think we need this import.", "gold": "TcpServer will be created for each HighwayServerVerticle instance so the counter number in server is not correct."}
{"pred": "Shouldn't this be `(\\\\.exe)(\\\\.exe)?`?", "gold": "Why change this from a foreach? I can't see it gaining anything here and code styles shouldn't change just for the sake of it."}
{"pred": "I don't think this is correct. If the subsystem is empty, it means that we are looking for the cgroups2 mountpoint.", "gold": "I'd say \"cgroup2 hybrid path\" instead."}
{"pred": "Line is too long. [81/80]", "gold": "I dont see a reason to print URI for `Target`. we do not expose that in inventory v1"}
{"pred": "Why is this a pointer?", "gold": "Do we still need this?"}
{"pred": "nit: can we call this `campaignID`?", "gold": "`campaignSource` is unused (from `structcheck`)"}
{"pred": "Should this be `0.2.0`?", "gold": "we should discuss how to not hard-code this version"}
{"pred": "Shouldn't this be `CURSOR_OPTIONS`?", "gold": "do we have a doclet for this event?"}
{"pred": "Why is this disabled?", "gold": "Why don't we want to catch segfaults by default?"}
{"pred": "Why do we need to suppress this?", "gold": "You could probably dispose request & content if you `await` the SendAsync."}
{"pred": "This should be `sep=sep, **kwargs`", "gold": "why is this test case here? this file is for testing functionalities in utils.py"}
{"pred": "Why do we need to send the welcome mail if we're not going to send it?", "gold": "why do we have an env var for this? not sure why we'd want to suppress welcome emails but not any others"}
{"pred": "Why not return `ast.StringExpression`?", "gold": "drop the todo?"}
{"pred": "`if (strncmp(destination_zone_name, \"NONE\", strlen(\"NONE\")) == 0)`", "gold": "Maybe use { } here like we are most other places now."}
{"pred": "Why is this needed?", "gold": "I want to get PartitionData field type, I don't know how to get it in other way."}
{"pred": "`GetEx` is not very descriptive, maybe `GetWithCreatable`?", "gold": "I think that a single `Get` method would be preferable, that would have the following parameters: Get(addr basics.Address, withPendingRewards bool, cidx basics.CreatableIndex, ctype basics.CreatableType) where we ignore cidx of -1, and adding support for ctype of \"AssetParams\" or something like that. (i.e. so that this Get call would be good for asset holding/asset params and applications )"}
{"pred": "Why do we need this change?", "gold": "This can handle the '\\\\' problem, but if (not possible) the user define '\\\\' as null, this logic will break. So here, it should be to compare the whole HIVE_DEFAULT_NULL_STRING, and make sure length is equal, as I understand. \\N is NULL, but \\NA is not NULL, what will happen if there is \\NAA ?"}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.", "gold": "Hmm, I would think that anyone who can edit the request should be able to delete the observation, in case they accidentally add the wrong person or something."}
{"pred": "Use 2 (not 0) spaces for indenting an expression spanning multiple lines.<br>Prefer `map` over `collect`.", "gold": "I know we are doing this other places already. It would be good to refactor this and the paginable publicly_visible so that we are DRY. Can wait until after MVP though when we do general cleanup"}
{"pred": "Shouldn't this be `ATOMIC_PTRSZ_ALIGNED_WRITE`?", "gold": "I think this should read \"is always observed before\" or \"is never observed after\"."}
{"pred": "Why did you change the copyright year?", "gold": "You might consider adding yourself as an author of the class."}
{"pred": "Shouldn't this be `if (freopen(...) == NULL) {`?", "gold": "If this fails, then 'stderr' is not a valid file handler anymore, and then any further 'write' operations will fail. Maybe some handling of such situation should be added here?"}
{"pred": "I'm not sure if this is the right way to do it, but I think it would be better to use `TimeUnit.SECONDS.toMillis(1593493828L)`.", "gold": "Break out tests for events into their own tests rather than placing them in other ones. That makes it easier for us to figure out where problems lie and to do a TDD-driven implementation over new APIs."}
{"pred": "I don't think this change is necessary.", "gold": "I think your indentation is wrong here."}
{"pred": "struct field nodeToCIDRs should be nodeToCIDRs", "gold": "UT spotted that we weren't marking routes dirty when they targeted at Node and that node's IP changed. e.g., the case where a WEP appears in the syncer before the corresponding node does, so we don't know the node's IP. I added a new map to track the CIDRs for each node so that when the node IP changes we can mark those CIDRs dirty. Right now it's only used for the \"WorkloadIPs\" scenario. Need to decide if the same issue applies in the \"CalicoIPAM' case. I suspect it might. It looks like we have some logic present to detect when our own node IP changes, but we don't seem to handle when a remote node's IP changes."}
{"pred": "I'm not sure if this is the best way to do this. I'm not sure what the best way to do this is.", "gold": "Given this will 'pause' bolt for a few seconds on older rubies, perhaps emit a debug message saying \"Warming up OpenSSL\" or something to that effect"}
{"pred": "Why do we need this method?", "gold": "Initializing _format to None, but asserting that it's not None later, seems unnecessarily fragile. We shouldn't architect the package class to rely on classes or methods that use it (e.g., build). Let's at least set the format to the default in case we don't create all packages through build.py."}
{"pred": "Why do we need this change?", "gold": "This change should also probably go into the corresponding method of the abstract By class?"}
{"pred": "Missing license header.", "gold": "Should this be set to something else?"}
{"pred": "", "gold": "Whats up with this? It looks like this is rendered on purchases/new for subscribers, so it would result in a dead end?"}
{"pred": "Shouldn't this be `backend=backend or cls.default_backend`?", "gold": "Glad to see this generalized to support the backend argument."}
{"pred": "Why is this not implemented?", "gold": "`ctx` is unused in ListDeploymentChains"}
{"pred": "Why is this change needed?", "gold": "I'd say the format like `\"xxx: %w\"` is more convention when wrapping an error basically. You refered to anything like this?"}
{"pred": "Why was this increased?", "gold": "This seems relatively high, is it the recommended value from the etcd folks? Or is this debugging cruft?"}
{"pred": "`PeerTracker` -> `PeerTracker`", "gold": "This requires updating the name in the `endpoints` tests, please run `make test`."}
{"pred": "Shouldn't this be `LOG(FATAL)`?", "gold": "LOG(FATAL) means coredump, LOG(ERROR) is better here."}
{"pred": "Why do we need to change this?", "gold": "/javascript/firefox-driver is the Selenium implementation of a WebDriver for Firefox. Since it generally isn't W3C compatible, it shouldn't change. We can just drop this change."}
{"pred": "nit: `unmarshal to scheduled job`", "gold": "It's a bit weird to have `svc.go` to include a `ScheduledJobType`...should we rename this file?"}
{"pred": "Why do we need to exclude vendor here?", "gold": "For some reason `protoc` doesn't copy license header from `proto` files to generated code. But this code will never be checked in, so it is ok."}
{"pred": "Shouldn't this be `trList2.get(0).pump == null`?", "gold": "I don't know what the implications of this change are for pumps other than the insight but i would add `|| trList2.get(0).pumpId == temporaryBasal.pumpId` in case we see the same pump event again, in order to not duplicate it in the database."}
{"pred": "Why do we need to export this?", "gold": "is there anything still referencing `checksumAddress` or can we just delete it?"}
{"pred": "Why do we need this?", "gold": "The reason I didn't suggest it before is because I didn't want alerts for every tried - but not updated provision, but I can see a value in it from OSD perspective"}
{"pred": "Style/Proc: Use proc instead of Proc.new.", "gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping."}
{"pred": "nit: `nilkeys := make([]*Action, 0, len(actions))`", "gold": "I believe Key is not necessarily nil, it could be empty string. Probably better check a.Kind == Create"}
{"pred": "Nit: `cancellationToken` => `cancellationToken`", "gold": "This is only used for headers and therefore isn't used."}
{"pred": "Why is this unused?", "gold": "Wouldn't it make sense to add a files_import_command and a db_import_command, which could be empty? I guess that leads to potential backward-compatibility problems, but it's worth thinking about. Perhaps add an import-api version to solve that? Overall, I think the actual db import logic and files import logic should be moved into the yaml file. What you you think of that?"}
{"pred": "Why do we need this file?", "gold": "Why do we have this here? I'm not concerned about it really, just curious."}
{"pred": "Why did you change this?", "gold": "@justicz Why are these switched here?"}
{"pred": "Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.", "gold": "Maybe verify that an anchor was created -- that the markdown was processed?"}
{"pred": "Why do we need this change?", "gold": "Is this just a minor improvement or is it necessary? If just some minor improvement, I recommend you don't touch Lucene in a Solr PR."}
{"pred": "Why is this removed?", "gold": "why delete this method?"}
{"pred": "Nit: \"Currently used by Java.\" -> \"Currently used by Java.\"", "gold": "Does this transform only the `MethodContext`, or also the `OutputContext`? (Looking at the other files, I gather it's the latter.) Might be helpful to mention that here."}
{"pred": "Why did you change the copyright year?", "gold": "Could you please clean-up this line while at it?"}
{"pred": "Why is this a pointer?", "gold": "no need to use a pointer. Just string and check for != \"\""}
{"pred": "Why do we need this?", "gold": "this means h2 mode? but how h2c can work?"}
{"pred": "This should be `# appModules/explorer`", "gold": "This line should not be there"}
{"pred": "Why do we need to lock here?", "gold": "why do we need lock here? if needed, then we also need to lock in Start()?"}
{"pred": "`new NetworkMessage(msg)` -> `new NetworkMessage(msg)`", "gold": "this should be on default-switch, uhm? else you will handle twice (c++ and lua). I'm just saying..."}
{"pred": "Is this intentional?", "gold": "unrelated minor fix"}
{"pred": "Why do we need this?", "gold": "can you add `, echo: false` to the end of this as well. I don't think we need to echo this to the log. You might need to update the spec as well."}
{"pred": "I think it would be better to use `assert headers[\"Host\"] == \"foo.com\"`.", "gold": "This test does not really verify that we're doing the correct thing now, is it? It seems to pass with and without the patch."}
{"pred": "Why do we need to set the tag here?", "gold": "should just be able to defer the call directly here too"}
{"pred": "`y=1.05` should be `self._fontsize('y')`", "gold": "Is this a magic number? I assume this makes it look better."}
{"pred": "`value` should be a `big.Int`", "gold": "Would welcome a stringification method on big.Int in specs-actors"}
{"pred": "`blockHeight` is unused (from `structcheck`)", "gold": "PersistBlockLevelInfo -> UpdateBlockLevelInfo"}
{"pred": "Why do we need this file?", "gold": "Type is redundant since it is inherited."}
{"pred": "Why do we need this method?", "gold": "better use `!isView()` so that we don't need to modify multiple lines in future."}
{"pred": "Why do we need this?", "gold": "I know you don't usually open up the singleton class, but I was getting a `private method called` error when trying to use `self.attr_writer` - any idea?"}
{"pred": "I don't think we need to check for `item.UserData` here, since `item.UserData` is always defined.", "gold": "There's no need to create a new variable here, the other checks just use the item type directly."}
{"pred": "Extra empty line detected at class body end.", "gold": "Any other possible names? Feels like going with \"workshop\" for this product_type could increase the confusion between course/workshop in the codebase."}
{"pred": "Shouldn't this be `receiveError`?", "gold": "@eugene-manuilov Isn't this already taken care of by `fetchGetURLChannels` via `createFetchStore`? Why is the extra `receiveError` call needed here? (This was already in the IB, but just struck me while reviewing here.)"}
{"pred": "Why do we need this import?", "gold": "nit: should go before `grpc`?"}
{"pred": "why this change?", "gold": "Why not using the Cancel? I thought cancelling a \"parent\" context would cascade to \"children\" contexts, cancelling them as well. In short, how does cancel work?"}
{"pred": "Shouldn't this be `strings.HasPrefix(ty, \"text/\")`?", "gold": "Could you explain why we default to binary now? It seems it's safer to default to text to avoid stuff getting executed or parsed by browsers accidentally. If we need to add support for particular types, we can add them explicitly right?"}
{"pred": "Why do we need this?", "gold": "Bit worried about the prefix since this seem to be being used for non-Openstack data too (host endpoints). Should we just leave host endpoint status at the old path (or remove it since AIFAIK, it's not used anywhere)?"}
{"pred": "Shouldn't this be `([01]?\\\\d|2[0-3]):`?", "gold": "This might be a silly question, but what happens to files with durations > 24 hours?"}
{"pred": "Why was ActivitySourceAdapter removed?", "gold": "`AddDiagnosticSourceInstrumentation` method can now be eliminated and simply use `AddInstrumentation`"}
{"pred": "I think this should be `expect { Bolt::Project.new(config, pwd) }.to raise_error`", "gold": "I think we also need to add `name:` to the bolt-project.yaml files in `spec/fixtures/projects`."}
{"pred": "\"between the merge point for the branch and the current head\"", "gold": "worth mentioning the same warning here as in `md_util.go`, I think."}
{"pred": "Why do we need to check for `len(nodeList.Items) == 0`?", "gold": "Do we need both the checks, for `Items` not nil and `len(Items)`"}
{"pred": "I don't think we need a separate table for this. We already have a `test_client_requests` table.", "gold": "Do you know what this is coming from? It keeps getting deleted/created @nickbristow"}
{"pred": "Why are these removed?", "gold": "Nit: leaving these in place would have reduce the number of files that this needed to touch, and avoided a possible problem removing public fields. I don't think it's worth blocking for this change, but we like to keep patches as small as possible by not breaking references like these."}
{"pred": "Should be `E_USER_DEPRECATED`", "gold": "`The %s is deprecated...` -> `The %s method is deprecated...`"}
{"pred": "Why do we need this?", "gold": "No, it wouldn't go there because that code won't reference or enforce it. Here is ok for now."}
{"pred": "Why is this change needed?", "gold": "How will we show that test run aborted (because of a crash) if we don't set aborted to true?"}
{"pred": "Why are we dividing by 2 here?", "gold": "Nit: Might as well make this same change to AdaptedPipeline."}
{"pred": "Shouldn't this be `ZoneOffset.UTC`?", "gold": "Just to clarify: I see that only the hive2 withZone object inspector is changed. Does that mean that the predicate pushdown problem only occurred on hive2?"}
{"pred": "Shouldn't this be `a-zA-Z0-9_`?", "gold": "Based on username requirements for forge.puppet.com - only letters and digits permitted."}
{"pred": "Why was this removed?", "gold": "Was this removed to ignore the extra columns coming from the file projection?"}
{"pred": "Why is this needed?", "gold": "Please can you pull out the shared function into a shared file? I think that'd be pretty easy to do for this module. I think you could: - pull out a function `configureSyslog` that is implemented on Linux, but stubbed on Windows - pull out a function `openLogFile` that is implemented differently on each - share everything else"}
{"pred": "Shouldn't this be `new EmailNotificationService(new AWSEmailProvider());`?", "gold": "Instead of hardcoding the AWSEmailProvider here, it should come from properties, so that it can be replaced with another EmailProvider for ZMS vs ZTS"}
{"pred": "Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.", "gold": "+1 for creating this script to help people get boot strapped"}
{"pred": "export const ELT_KEY_PREFIX = 'preact-';", "gold": "Do you need the prefix?"}
{"pred": "`retcode` is not used.", "gold": "if retcode is < 0, it should return -1 indicating an error."}
{"pred": "# pylint: disable=locally-disabled,useless-suppression,suppressed-message", "gold": "Are those necessary? I feel like `useless-suppression` could be avoided here?"}
{"pred": "`else if` should be on the same line as `}`", "gold": "Is this equivalent in JavaScript?"}
{"pred": "Why change this to INFO?", "gold": "get/list operation is not schema change, it is supposed to use VLOG"}
{"pred": "Why do we need this change?", "gold": "we'll need to delete this whole file, right?"}
{"pred": "nit: \"transactional catalog\" -> \"transactional catalog\"", "gold": "\"this table hasn't mutated within this transaction\" may sound like implying that if this transaction contains table mutation changes, `refresh` may have impact, which I think is not true? I guess what you were saying was if other transactions committed to this table successfully when this transaction is half way through, refresh in this transaction will still return the same state as when this transaction begins."}
{"pred": "Why are these TODOs here?", "gold": "Can we move these into some kind of experimental API group? I don't think we want to call them `v1` just yet :)"}
{"pred": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "gold": "  I think this makes a lot of sense but we may want to highlight the change for people doing UAT in case the ordering of sections is off anywhere when customizing or using the drag-drop feature"}
{"pred": "Why do we need this?", "gold": "These files should in `/javascript/brython`"}
{"pred": "Why this change?", "gold": "I'm not sure this is the right fix - I'd be more happy with a `continue`. That way, we don't enter the code at the bottom of the run loop (e.g. sending packets). Keep in mind that this error here may be triggered by a peer doing something security-relevant, so I don't think we should do much more work other than sending the close frame."}
{"pred": "Why do we need this?", "gold": "Can we fix this, or is it going to stay broken."}
{"pred": "Why was this removed?", "gold": "Is there a reason to remove this attr?"}
{"pred": "nit: `ml` -> `messageLayer`", "gold": "log message should be started with upper-case word."}
{"pred": "Why do we need this?", "gold": "I guess this is not needed anymore now?"}
{"pred": "Why did you remove the `flags` parameter?", "gold": "I think I would prefer retaining the argument. It's true that we are not using it now, but it's harmless, it's good to have a constructor function that accepts all the field values as arguments. Performance-wise, it does not matter."}
{"pred": "Why do we need to disable resizes here?", "gold": "Is this a different fix?"}
{"pred": "Shouldn't this be `if req.WithoutNS {`?", "gold": "Why not add a `EnterNS` filed instead of `WithoutNS`?"}
{"pred": "Why do we need these constants?", "gold": "Same points as in other test file."}
{"pred": "I think it would be better to use `bool` instead of `bool`.", "gold": "I have a PR pending, can you change this bit index to `16`?"}
{"pred": "Shouldn't this be `classOrInterfaceType.getQualifiedName()`?", "gold": "we should probably have some utility class for this sort of things"}
{"pred": "Why is this needed?", "gold": "Curious that I'm not seeing any occurrence of the new error check in this file. Why was it disabled?"}
{"pred": "Why do we need this?", "gold": "does it return something?"}
{"pred": "Why do we need to pass `data` to `getDataErrorComponent`?", "gold": "This function is also called in various Site Kit module components, where the error object (here `data`) also needs to be passed, otherwise the link to fix the issue won't appear."}
{"pred": "Why do we need this?", "gold": "super nit: `revision string` (the passed value might not be a SHA hash)."}
{"pred": "Why is this internal now?", "gold": "@snakefoot why is internal needed?"}
{"pred": "Why do we need this?", "gold": "Why were we disabling health checks before?"}
{"pred": "Why do we need to exclude conftest.py?", "gold": "did `conftest.py` actually show up for you? `test_files` should never contain it..."}
{"pred": "Why is this needed?", "gold": "Should this be a ! on line 565? I would have expected the condition to be similar to line 564. If I am wrong please excuse my mistake."}
{"pred": "Shouldn't this be `<=`?", "gold": "Please change to `1070400`. I promise to look into this PR in more detail before the 1.7.4 release ;)"}
{"pred": "`sStruct` -> `fStruct`", "gold": "Can we change to use `LogicalType.getChildren`?"}
{"pred": "Use 2 (not 0) spaces for indenting an expression spanning multiple lines.", "gold": "I'm confused as to how these are both passing."}
{"pred": "Layout/EmptyLineAfterGuardClause: Add empty line after guard clause.", "gold": "Prefer single-quoted strings when you don't need string interpolation or special symbols."}
{"pred": "Should be `string[]|null`", "gold": "there is `\"` sign in commit message and colon. can you rename also `descrition` to plural `descriptions` and add there `$` ?"}
{"pred": "Why do we need to record the timer here?", "gold": "timerNoUserLatency is not being used?"}
{"pred": "`isodate.parse_date` returns a `datetime` object, not a string.", "gold": "@lmazuel - I've made a couple of minor changes to serialization.py, if you could do a quick review :) They should not be breaking, and I doubt are used by the existing clients so may not need a new release yet. Effectively it's a change to support default/constant date and datetime values by allowing strings to passed in instead of date or datetime objects. The strings would need to already be in the correct ISO formatting that the request will serialize to. Let me know if you think this is okay."}
{"pred": "Shouldn't this be `isotopeModificationType`?", "gold": "Why change the name in the XML?"}
{"pred": "Should this be `unless: :can_change_org?`?", "gold": "This is much cleaner. makes it easier to tell what happens on a save."}
{"pred": "Why do we need to convert contains operator into one dedicated to MySQL?", "gold": "Could you add return error unsupported operator here  "}
{"pred": "Please don't use wildcard imports.", "gold": "(Mhh, we seem to use different formatters - we should unify them. I like the wildcards)"}
{"pred": "Why is this hardcoded to NORMAL?", "gold": "Should `kind` be a command line parameter also?"}
{"pred": "Why do we need this change?", "gold": "can we have it inside FromAccessList?"}
{"pred": "nit: `Unauthorized request to `%s` when using token `%s` : %s`", "gold": "Why not embed filterASCII in this function?"}
{"pred": "nit: space after `if`", "gold": "I am curious, shouldn't \"currentContinuousFlowProcessed++;\" be added right after line 1873? otherwise we will count 1 extra when a exflow wakes up from the sleep section,.even though it hasn't been assigned"}
{"pred": "Why do we need protected access here?", "gold": "You can probably move this up after the `._Numeric` line."}
{"pred": "Why is this necessary?", "gold": "@Tarrasch this is another change you need to pay attention, it seems `SGEJobTask` is not calling `super.__init__` which break the test case some how."}
{"pred": "Shouldn't this be `user_id`?", "gold": "Do we need indices for this table?"}
{"pred": "Why do we need these functions?", "gold": "what about making this function static inline to avoid the extra declaration ?"}
{"pred": "type GroupIDType uint32", "gold": "I forget the difference between type definition with \"=\" and without \"=\" again, but can we unify the style? I believe the difference doesn't apply to TableIDType and GroupIDType whatever it is?"}
{"pred": "I think this should say \"will always be 1.0\"", "gold": "would be `DEPRECATED Percentage of the graph (in vertices) to contract [0..1]` better?"}
{"pred": "Why do we need these?", "gold": "These command names are specific to Chromium-based browsers. Please move to `ChromiumDriverCommand`"}
{"pred": ">new Dictionary<string, object>(); [](start = 12, length = 36) Why this change?", "gold": "if we won't use, should we remove this?"}
{"pred": "Should this be `MvvmCross.Platforms.android.binding.views`?", "gold": "Having 2 items with the same key (Mvx) won't work in a dictionary"}
{"pred": "Extra empty line detected at class body beginning.", "gold": "@cpytel how does the flow work right now? I expect to go to the sign up as customer page after putting in my code, but it goes to the longer landing page?"}
{"pred": "Shouldn't this be `.64s`?", "gold": "`event_msg` has the same size (1024) as a `message`. Maybe should be increased to 2048 instead? Then this `\"[error] %.512s\", message` could be changed to this: `\"[error] %.*s\", sizeof(message), message`"}
{"pred": "nit: remove empty line", "gold": "Nit: unnecessary whitespace change."}
{"pred": "Why did you remove the `CombinedOutput`?", "gold": "Hit a flake here where I think there may have been some output to stderr that got mixed in with the output from Stdout. Hence switching to `Output()`, which does also capture stderr as `err.Stderr`"}
{"pred": "Shouldn't this be `<=`?", "gold": "I would use static_cast<label_t>(0) and static_cast<label_T>(m_num_labels) just in case."}
{"pred": "I think it would be better to use `String#indexOf(String, StringComparison)`", "gold": "Even if we want to keep in original case - domain will be lower-cased."}
{"pred": "Why do we need to rename the column?", "gold": "Based on discussion with Chad it feels like trail_map_json could be a good column name."}
{"pred": "Shouldn't this be `User[permissions][superuser]`?", "gold": "This array should be logic-less, just the language string (without `Lang::get()`) should appear. Then `trans()` is [or should be] used when the balloon selector renders the values."}
{"pred": "Should this be `bundle exec` instead of `bundle exec`?", "gold": "This looks like it runs both pre 3.0 rake tasks and 3 rake tasks, and since pre 3.0 we didn't use bundler, my guess is it will fail then."}
{"pred": "I don't think you need the `strings.Map(sanitizeFunc, c.Parent)` here.", "gold": "I'm not sure the replacement is a good idea, and as I said in #336 , this \"parent-name.scope\" is not a good idea in the first place, specially when we support assigning a slice as the parent, so we should change this, WDYT?"}
{"pred": "Why do we need to change this?", "gold": "sloppyReassign: re-assignment to `err` can be replaced with `err := kv.WriteBatch(batchForBlock)` (from `gocritic`)"}
{"pred": "Shouldn't this be part == null?", "gold": "using factory method. return CompletableFuture.completedFuture"}
{"pred": "This should be `_x( 'Analytics', 'Service name', 'google-site-kit' )`", "gold": "The `_x` function needs to be imported at the top of the file (in addition to `__`)"}
{"pred": "Why do we need this change?", "gold": "this looks like the only controversial change potentially. @MatthewHinton56 Could let us know why you made this change (which `go vet` warning was triggered)? @wenyingd could you take a look and let us know if you're okay with this change?"}
{"pred": "Why did you change this file?", "gold": "This seems like left-over debugging code. I think I fixed this to no longer be necessary, switching to UserControl for the designer."}
{"pred": "Why do we need this?", "gold": "As we're currently not applying any logic in the proxy listener, I guess we can simply remove this file (and remove the `listener` argument from the `register_plugin(..)` call above)."}
{"pred": "Should this be `types.UnixNano`?", "gold": "Isn't the point of the clock module to encapsulate access to `time.Now()`? Coming later?"}
{"pred": "why do we need this?", "gold": "as before - if you've set this, you should be able to get rid of the `os.Setenv(\"ALGOSMALLLAMBDAMSEC\", \"500\")`. make sure that the various tests still takes have the same execution time."}
{"pred": "This should be `curl -fLo \\\"/tmp/#{mactex}\\\" --retry 3`", "gold": "Pretty sure the single quotes here should be double quotes, single quotes are not expanded by the shell."}
{"pred": "I think this should be `Validate.notBlank(stringArg, \\\"message %s\\\", compileTimeConstant);`", "gold": "these are not really constants, right?"}
{"pred": "This should be `from six import iteritems`", "gold": "import below copyright statement"}
{"pred": "Line is too long. [81/80]", "gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping."}
{"pred": "`getFlattenedValue` returns an array, not a string", "gold": "`if (is_string($value) && $this->getDefinition()->get('allow_html')) {`"}
{"pred": "`nameof(key)` => `nameof(key)`", "gold": "I think we have the same problem here - if folks called the `public void Add` with a `null` key, we need to use `Guard`."}
{"pred": "Why is this needed?", "gold": "I thought that the main was in catch_qt.cpp?"}
{"pred": "Why do we need to add packaging here?", "gold": "I would rename the field to IMAGE_TYPES and make it an array. I don't think we need list operations. Also, if possible, I would move the field to the ApiFields class. What do you think?"}
{"pred": "nit: `expected managedAgent container state change event did not match actual event`", "gold": "I'd prefer to timeout on this, but I know it's not a pattern that is being followed"}
{"pred": "Please don't use wildcard imports.", "gold": "hmm let's not use * imports please"}
{"pred": "I'm not sure if this is the right place for this. I think it should be in `k8sSDWithNamespaces` instead.", "gold": "is this configuration key already exist in prometheus ?"}
{"pred": "Extra empty line detected at body beginning.", "gold": "As @gravitystorm said new tests need to be using factories, not fixtures."}
{"pred": "`addr_` is no longer used.", "gold": "You can replace IP by hostname."}
{"pred": "E226 missing whitespace around arithmetic operator", "gold": "This should say \"why\" NVDA should do things in this order."}
{"pred": "Why is this change needed?", "gold": "nit these will get changed back during next release."}
{"pred": "Why do we need this?", "gold": "it is actually not needed to make the member public. the build tags can also set a package scoped variable."}
{"pred": "Should be `icon` not `icon`", "gold": "We already have a method for it 'icon' => $content->getIcon()"}
{"pred": "This import should be grouped with the other `github.com/aws/aws-sdk-go` imports.", "gold": "Instead of importing `golang.org/x/net/context` The SDK should use `aws.BackgroundContext()` instead of `context.Background()`"}
{"pred": "Why did you remove the `findOneBy`?", "gold": "I think this is an agnostic change for the ORM right? Why was it doing this? - this does not work on PHPCR-ODM as the `id` is not a field - although I guess it could be mapped as such."}
{"pred": "Why this change?", "gold": "I'm not 100% sure, but I think this should be `explorable`. If not, I think `explorable` can be removed entirely."}
{"pred": "`six.binary_type` is not defined in Python 3.", "gold": "Note to self: Why was this not originally not using `stderrbytes`?"}
{"pred": "I don't think this should be a warning. It should be an error.", "gold": "Is betterLOG_IF(ERROR, status != 0) ?"}
{"pred": "Why do we need these?", "gold": "I wouldn't call it default too."}
{"pred": "Why do we need to disable this?", "gold": "Why disable the rule for this file?"}
{"pred": "`ctaLinkExternal` -> `linkExternal`", "gold": "Thanks for adding this :+1:. Could you please move it to go after the `ctaLink` prop?"}
{"pred": "Why is `!` needed here?", "gold": "The other way around Current can be null."}
{"pred": "Shouldn't this be `admin_mail_edit_template`?", "gold": "why does it have to be here? Due to breadcrumb navigation?"}
{"pred": "nit: remove this line", "gold": "I fear moving this to some common func. We are swallowing the error here. This might be ok in UT but not in actual source code."}
{"pred": "Why did you remove this test?", "gold": "Please don't use \\ as a line continuation. Do an implicit string join instead with parens: ``` (\"Message ...\" \"and ...\")"}
{"pred": "Why is this removed?", "gold": "there needs to be a change here. setting up the batchstore with localstore.Unreserve hook"}
{"pred": "Why do we need this method?", "gold": "I think if we can provide a more convenient method to add configs . e.g. public static void addConfig(String k, Object v)"}
{"pred": "line is 161 characters (from `lll`)", "gold": "line is 165 characters"}
{"pred": "Why do we need this class?", "gold": "Please add a copyright notice. Also, could you tell me please why do we need this empty provider here?"}
{"pred": "Shouldn't this be `!maybePrivacyGroup.get().getMembers().isEmpty()`?", "gold": "I feel like this would be easier to read if we join the two if's together: `if (maybePrivacyGroup.isEmpty() && !privacyController.isGroupAdditionTransaction(privateTransaction))`"}
{"pred": "Shouldn't this be `JSONException`?", "gold": "Tests are failing because the exception type is NullPointException here if the soupBlob is deleted (so instead of a mal-format json, it's a null)"}
{"pred": "Can't drag an input to an output--you have to move the inferior block.", "gold": "Glad we fixed this as well. Blockly is going to be left as-is for this case, right?"}
{"pred": "Why is this class being removed?", "gold": "I had accidentally deprecated this class. This is meant to stick around. Only `SalesforceObjectType` goes away."}
{"pred": "This should be `s = s.lstrip('0x')`", "gold": "`hex(i)[2:]` is trying to do the same thing above. what is `i` in your malformed case?"}
{"pred": "`writeXML(Writer out, String tag, boolean shouldEscape, String val, Object... attrs)`", "gold": "I think this change is redundant; see the previously defined method \"writeUnescapedXML\"."}
{"pred": "Why is this a pointer?", "gold": "Ah now I have at least some idea what these are for."}
{"pred": "Why do we need this change?", "gold": "I believe in previous PRs @mccheah frequently used `fileSchema` -> `newFileSchema` type of renames to avoid hiding fields in builders. Would it make sense to make it consistent?"}
{"pred": "Why do we need to check the error here?", "gold": "Do we really need separate error in manager if utils.ErrRequestCancelled is the only error which indicates cancelation ?"}
{"pred": "Should this be `tm_cpp`?", "gold": "Leave as `cpp` since that still gives better results."}
{"pred": "Why this change?", "gold": "temp change so the predicate can be used by the `exp` package"}
{"pred": "Shouldn't this be `self.vkCode not in self.TOGGLE_KEYS`?", "gold": "Just as a tiny clarification, this isn't affected in any way by \"speak typed characters\". That is, \"caps lock on\", etc. is always spoken, even if speak typed characters is off."}
{"pred": "I don't think this should be pipelined.", "gold": "@dgoodwin Will it cause an issue when the issue get fixed in OLM?"}
{"pred": "Why do we need this?", "gold": "This option is now unnecessary"}
{"pred": "Why this change?", "gold": "Don't jump down to the unexported interface: just set the content type to `\"application/octet-stream\"` explicitly when creating the `Writer`."}
{"pred": "`docIDUpto` -> `docID`", "gold": "Instead of counting this here on clear, can we use a second counter for the deleteTerms next to `bytesUsed`? This would be great. It doesn't need to be thread safe IMO"}
{"pred": "Why are you changing this?", "gold": "@daftspunk @bennothommo I wonder if we need to go as deep as detecting what the default varchar length is with a special character to be parsed by the validation trait since we've introduced the config for it."}
{"pred": "`keys.then(keys => keys.join(''))`", "gold": "Also update line 2205 below"}
{"pred": "This should be `STATE_KEY_FIRST_TIME_EMPTY_SUBJECT`", "gold": "Typo, should read `firstTimeEmptySubject`"}
{"pred": "nit: `a single, transport-level, unary request`", "gold": "The more I see this the more I think the transport layer _should_ actually refer to this as `UnaryHandler`."}
{"pred": "Shouldn't this be `logger.error`?", "gold": "The `warn` message here seems to indicate that the forced closure of the SSH connection should raise an error; is that getting swallowed up somewhere and not raising?"}
{"pred": "`_expands_user` is not used anywhere.", "gold": "I wonder if this is a fitting name. Why \"expands user\"? Wouldn't be `user_expanded` or so be more fitting?"}
{"pred": "Why do we need this?", "gold": "I see what you are doing here, but to stay with the `getter/setter` pattern, should we introduce `set isHidden(value)` & `get isHidden()` which them maintains `_isHidden` with in `vNodeCache`. This will avoid what looks like accessing an internal property like `_isHidden` from `axe.utils.isHidden` & keeps things neat."}
{"pred": "Should this be `csharp/gapic_samples.csproj`?", "gold": "nit: for consistency, have this line and the previous formatted similarly"}
{"pred": "These should be `final`", "gold": "As before, shouldn't mention these as being orion options I don't think. Perhaps just enclaveKeyStoreFile etc."}
{"pred": "What's the reason for this change?", "gold": "What's the thinking here? Only logging when the test has not ended yet?"}
{"pred": "Why do we need to special case `eq` and `ne` here?", "gold": "@HyukjinKwon @ueshin (cc @itholic @charlesdong1991 ) Not sure if this is the right implementation ..."}
{"pred": "Shouldn't this be `throw e;`?", "gold": "Do we want to add any specific error on how the url is malformed?"}
{"pred": "nit: `if (self->lastLogIdSent_ < self->logIdToSend_)`", "gold": "why NOT self->lastLogIdSent_ = self->logIdToSend_"}
{"pred": "nit: `adopted clusters` -> `provisioned clusters`", "gold": "Shouldn't this be in the above `if` block where we are setting the installedtimestamp to ensure this only happens for already installed (and/or adopted) clusters?"}
{"pred": "`tabbed_browser.tabopen(background=False)` -> `tabbed_browser.tabopen()`", "gold": "This seems like another unrelated change I've done in `master`."}
{"pred": "I think this should be `expect(config.formatters.length).to eq(1)`", "gold": "Would be good to have another context `\"when a duplicate formatter exists for a different output target\"` that shows that it keeps both. As this stands, the specs could pass w/o the `formatter.output == new_formatter.output` check."}
{"pred": "Why do we need to deprecate this?", "gold": "Why not just remove? The CUDA one has been around for while. This one has not been part of any release (?)"}
{"pred": "`mIsFirstActivation` -> `mFirstActivation`", "gold": "nit: `Contentful` is the word used in the GV API, without the uppercase in F"}
{"pred": "Shouldn't this be an error?", "gold": "It just does the check, maybe we can name it as checkOperations."}
{"pred": "Why this change?", "gold": "We no longer have karma output in the test file so these selectors were now unique and the target didn't need a child selector. Updated to force non-unique nodes"}
{"pred": "Should this be `current_user.has_subscription_with_mentor?`?", "gold": "This moved from a partial to not being in a partial. How about cleaning this view up further by moving it back into a partial?"}
{"pred": "`recieveUpdates` is unused (from `structcheck`)", "gold": "add some form of docs in docstring or on :74 for what the effect is"}
{"pred": "Why this change?", "gold": "Couldn't you import `json` from `kinto.core.utils` here too?"}
{"pred": "Layout/EmptyLinesAroundModuleBody: Extra empty line detected at module body beginning.", "gold": "Minor: Hmmm...is it worth setting this explicitly for the tests that it affects?"}
{"pred": "Why remove this?", "gold": "This was added to fix a race condition and you are reverting it here, right?"}
{"pred": "I think this should be `api.ethBackend == nil || !api.chaindata`", "gold": "Could you add some extra text here, so that it reads \"eth_coinbase function is not available, please use --private.api.addr option instead of --chaindata option\", so that it is clear that the function can work, but different options"}
{"pred": "I'm not sure if this is the best way to test this, but I'm not sure what the best way to test this is.", "gold": "`new_ncr_work_order_path` ? (I've been slowly moving specs over to that way of calling paths)"}
{"pred": "This should be `application/font-*`.", "gold": "Should flash be included in the patterns too? It currently isn't."}
{"pred": "Nit: \"in the contract\" => \"in the contract\"", "gold": "I suspect I will have to keep looking whether Left/Right refers to contract/Implementation while working on the rules code."}
{"pred": "Why do we need to change this?", "gold": "(ignore this. testing a codeflow bug)"}
{"pred": "I think this should be `CASSANDRA_TLS_VERIFY_HOST`", "gold": "[Nit] can you change the Usage wording to indicate that the flag is used to opt-out of server certificate verification? (e.g. \"disables validation of the Cassandra cluster's server certificate.\")"}
{"pred": "Why do we need this import?", "gold": "Sorry :) Would be really helpful to integrate something like Eclipse Code Formatter, so it will fail if the code style is broken (the same as eslint fails on the frontend) I use IntelliJ IDEA and their vision of imports is a bit different :)"}
{"pred": "Use the new Ruby 1.9 hash syntax.<br>Use the new Ruby 1.9 hash syntax.", "gold": "this will still fail on systemd"}
{"pred": "Why is this needed?", "gold": "The convention in most of the codebase is to use `if isinstance(body, bytes):` instead."}
{"pred": "`label = '.'.join(comp.split('.'))`", "gold": "I think this would be better as: `label = comp.rsplit('.', 1)[-1]`"}
{"pred": "why do we need `ContextT` here?", "gold": "We have been creating a language-level context interface for each language instead of parameterizing the generate function."}
{"pred": "`$media->getContext()` can return `null`", "gold": "Same thing about context here."}
{"pred": "Do we need to check the error here?", "gold": "there is a function to get namespace entry from mutable state directly"}
{"pred": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "gold": "The `Transport::Config` objects don't serialize properly. We probably want to just turn them into hashes at this point."}
{"pred": "\"dba\" should be \"dba\", right?", "gold": "Sorry, typo s/unusuable/unusable/"}
{"pred": "I don't think this is the right place for this check. I think it should be in `buildSparkCatalog` instead.", "gold": "If this is needed, should we check that the configured `uri` isn't already equal to the value of the metastore URI configured via `spark.hadoop.hive.metastore.uris` or any of the other ways of setting it. This would be a breaking change for people who have `uri` configured on the SparkSessionCatalog and have it correctly set (which I believe should be everybody as `uri` is currently required if I'm not mistaken)."}
{"pred": "Shouldn't this be `return float(content_type == \"multipart/form-data\")`?", "gold": "see above - this is only used to select the correct view, we don't need to handle the boundary information here."}
{"pred": "Why do we need this?", "gold": "These tests use a self-signed cert so the CA *is* the cert. I considered making a proper chain to use in the tests, but wasn't sure it was necessary to test here, since we test it in the E2E tests anyway."}
{"pred": "Nit: space after `!=`", "gold": "We could, maybe, just directly do `excessDomChildren[excessDomChildren.indexOf(dom)] = null;`. Would this improve the size in any way? This will end-up with a property on the `excessDomChildren[\"-1\"]` but maybe we could live with that?"}
{"pred": "`unbindEvents` -> `unbindEvents`", "gold": "this looks like it may be something that needs additional refactoring"}
{"pred": "Why this change?", "gold": "Nit: Remove whitespace (and below)"}
{"pred": "Shouldn't this be `Error opening the zip file`?", "gold": "\"Failed opening\" or \"Failed to open\"."}
{"pred": "Shouldn't this be `SourceSnapshot is not set`?", "gold": "and -> or"}
{"pred": "you can use `db.model('Upson', userSchema)`", "gold": "Add a `yield User.init()` here to wait for all indexes to finish building"}
{"pred": "DEFINE_string(local_port, \"\", \"local port\");", "gold": "I don't think this belongs here. If the application can take a local_ip as input, the application should take care of it, not in this common library"}
{"pred": "Why not use `ThemeData::deleteCustomData()`?", "gold": "@DanHarrin please add a `return true` at the bottom of this method, as the docblock indicates a boolean return value."}
{"pred": "Why is this public?", "gold": "This is used in o.a.l.sandbox.search.BM25FQuery."}
{"pred": "`queryRelation == QueryRelation.INTERSECTS` ?", "gold": "Shouldn't this work as well for Disjoint?"}
{"pred": "Shouldn't this be a `RuntimeError`?", "gold": "Same here. This was included to quiet the test for the 3D descriptors. As we removed them, this exception handling is no longer required"}
{"pred": "Why do we need this file?", "gold": "Why do you need to load a specific data reader in lbann_library?"}
{"pred": "Shouldn't this be `CompletedTask`?", "gold": "why not ValueTask?"}
{"pred": "Shouldn't this be `&&` instead of `||`?", "gold": "I'm nervous about this line, I don't want to go regenerate a bunch of imageset jobs for clusters that are old, already installed, but don't have a CLIImage set (which they wouldn't because they're old) Adding the Installed guard is meant to address this. Otherwise this *should* recreate the imageset job due to the code in this function that deletes the job if it's finished. (but we don't have our images set due to this clause)"}
{"pred": "nit: `newTableMetadata` -> `newTableMetadata`", "gold": "Is it necessary to change this file? Doesn't `tableMetadata` call `newTableMetadata`?"}
{"pred": "why remove these?", "gold": "I think that I have a better proposal for this test - improve it so that it would know how to read the list of SupportedProtocolVersions and dynamically use these. The motivation here is that I expect to have another network version soon, and this test seems to be a good test case for that."}
{"pred": "nit: `listing of namespace [{}] resulted in the following tables: [{}]`", "gold": "What is the purpose of this debug message? I'm not sure how it would help."}
{"pred": "Why remove this?", "gold": "Is there a corresponding BUILD dependency to prune?"}
{"pred": "Would it make sense to make this a `const` at the top of the file?", "gold": "The \"good\" and \"bad\" descriptions confused me a bit. Maybe `allowedContentType` and `disallowedContentType`? Not sure if that's better."}
{"pred": "`Using WebDriver after calling quit()` -> `Using WebDriver after calling quit()`", "gold": "It would be better to just change RWD to throw IllegalStateException if you attempt to execute a command after quit (unless it's a second call to quit())"}
{"pred": "Why do we need to change this?", "gold": "You may want to have a look at `func checkClusterFormed(t *testing.T, servers ...*Server)` in this file that I created some time ago. It will timeout at 5 seconds, but will return as soon as cluster is ready."}
{"pred": "Shouldn't this be `flux_respond_error`?", "gold": "I see a few places where this blob of code is required due to the removal of `errnum` parameter from `flux_respond` -- trading 2 lines of code for 8. The improvement to the function seems like a good idea, but I wonder if we need a convenience macro or function to do it the old way? You went through and made all the changes, was it overall a net win?"}
{"pred": "Why do we need to export this?", "gold": "I know it's not related to your change, but it's a bit odd that this import uses a relative path rather than the ones setup by webpack. Might be nice to change this one in case we refactor those paths in the future; this one wouldn't get caught in any kind of find+replace."}
{"pred": "Why do we need this change?", "gold": "Good catch, and if we don't declare the newSchedule here, will the last schedule be executed in multi goroutine?"}
{"pred": "Shouldn't this be `project != null &&`?", "gold": "`project` should never be null here, unless we have projects that aren't in the solution? Which we shouldn't have  "}
{"pred": "Why is this needed?", "gold": "Simple `for` loop instead of `for_each` would help here by making it more readable."}
{"pred": "Shouldn't this be \"Confirmation height processing\"?", "gold": "Looks like this falls through, should break."}
{"pred": "Why is this needed?", "gold": "Let's default manifest lists and manifests to overwrite. These use UUID-based file names and should never conflict."}
{"pred": "This should be `showSpeechViewerAtStartup`", "gold": "Please rename [speechView] to [speechViewer]."}
{"pred": "Why do we need both `PercpuUsage` and `PercpuUsageInKernelmode`?", "gold": "I would use shorter yet still descriptive names, e.g. `KernelPerCpu` and `UserPerCpu`."}
{"pred": "line too long (81 > 79 characters)", "gold": "if we are seeking for the content of only one field from metadata, no need to check whether a user could edit record or not"}
{"pred": "self._commands[\"ExecuteCDP\"] = ('POST', '/session/$sessionId/goog/cdp/execute')", "gold": "Should this be camelCase to match the above commands? I am not the expert here so maybe Lucas or David can chime in."}
{"pred": "Why do we need this?", "gold": "This is also missing in CreateScopeFromExecuteAsync. Can you add that there too?"}
{"pred": "Why do we need to remove the colon from the time zone?", "gold": "I hope that this does not break anything... Probably needs detailed beta tests."}
{"pred": "Should this be `config.start_time = 42`?", "gold": "@JonRowe in what scenario do you see this being manually set?"}
{"pred": "Shouldn't this be `election.election->try_generate_votes (block_a->hash ());`?", "gold": "I think the work \"trigger\" makes more sense than \"check\" because this is taking an action based on status."}
{"pred": "Why this change?", "gold": "add a configuration , default put public key in Microservice, if the configuration is set, then put in Instance."}
{"pred": "Shouldn't this be `DEFINITION`?", "gold": "WDYT about the idea above of making these all verbs that correspond to the input spec?"}
{"pred": "Shouldn't this be `ServerSettings.Type.IMAP`?", "gold": "With the introduction of the enum(s) the constants in the store classes should be removed."}
{"pred": "Shouldn't this be `>= 5`?", "gold": "I would say `!= 5`; A packet with <5 would be malformed."}
{"pred": "Why do we need the exporter here?", "gold": "I think you missed removing `Stateful` from `push/config.go`"}
{"pred": "Why is this internal now?", "gold": "why would you make it internal? if so then at least protected internal"}
{"pred": "Why do we need this?", "gold": "We should check if the response (`d`) contains bar as response, screw the log. :smile:"}
{"pred": "Why this change?", "gold": "@Laurae2 good call. This is the only one I found (with `git grep transfered`)"}
{"pred": "I think this should be `node.frame().parent == defstmt`", "gold": "I don't understand how this work, could you explain ?"}
{"pred": "MCTX_NUM_SIMD_SLOTS -> NUM_SIMD_SLOTS", "gold": "The abbreviation for \"context\" used extensively inside DR is \"cxt\", not \"ctx\", so s/MCTX/MCXT/."}
{"pred": "'throttle' => '\u0644\u0627\u06af \u0627\u0650\u0646 \u06a9\u0631\u0646\u06d2 \u06a9\u06cc \u0628\u06c1\u062a \u0632\u06cc\u0627\u062f\u06c1 \u0633\u06cc\u06a9\u0646\u0688 \u0645\u06cc\u06ba \u062f\u0648\u0628\u0627\u0631\u06c1 \u06a9\u0686\u06be \u0633\u06cc\u06a9\u0646\u0688 \u0645\u06cc\u06ba \u062f\u0648\u0628\u0627\u0631\u06c1 \u06a9\u0686", "gold": "here is `:seconds` missing again"}
{"pred": "`authenticationAlgorithm` -> `authenticationAlgorithmFile`", "gold": "initializing to null makes me uncomfortable. let's have a default value"}
{"pred": "Shouldn't this be `end - 1`?", "gold": "This is the `GET % HTTP/1.1` scenario right?"}
{"pred": "Why do we need this?", "gold": "No need to use the fully qualified path the BackendAuth facade, just `use BackendAuth` is fine."}
{"pred": "Shouldn't this return `nano::epoch::epoch_1`?", "gold": "Because it's similar for send/open/change/receive types, then probably it can be just common `nano::epoch nano::block::epoch () const` with override for state_block (like nano::block::link (), account (), representative ())"}
{"pred": "nit: `const cb_ = () => {}`", "gold": "Please give a more descriptive name and add a command to explain what it does."}
{"pred": "`PREF_MOBILE_UPDATE_OLD` -> `prefMobileUpdateOld`", "gold": "we can never get rid of this..."}
{"pred": "Why do we need this buckets?", "gold": "what is the effect of changing these buckets in existing data that is available in the monitoring system? if there are any existing dashboards that use previous histogram buckets they are probably going to be wrong ot invalid? also any reason why we chose these specific values?"}
{"pred": "nit: `yarpc client` -> `yarpc client`", "gold": "This won't work. For the flag to be passed to the plugin, it should be passed as part of the --plugin argument. --plugin \"yarpc --sanitize-tchannel\""}
{"pred": "Shouldn't this be `LGBM_BoosterGetNumFeatures`?", "gold": "@shiyu1994 @StrikerRUS what do you think about this addition to `c_api.cpp`? I think it's a really useful addition to be able to get this type of information from the `Booster`, but I want more opinions since `c_api` is the main public API for the library."}
{"pred": "`dbRound` -> `dbRoundOffset`", "gold": "rename Round -> requestedRound and DbRound -> dbRound. we don't need to export the fields here, only the error struct."}
{"pred": "nit: `assert.NotNil(t, cd, \"missing clusterdeployment\"`", "gold": "This expected value should probably be what you literally expect, otherwise there's a chance getClusterRegion is doing something wrong and the test wouldn't catch it because it's being run for both expected and actual."}
{"pred": "Why is this needed?", "gold": "TODO: update unit tests to exercise base64-inline path"}
{"pred": "nit: `shouldShowOnboarding` -> `shouldShowOnboarding`", "gold": "this method knows too much - it is kind of a strange side effect I'd prefer if we had separate method for acknowledging that the onboarding was done and should not be shown again"}
{"pred": "Why is this needed?", "gold": "Do we need to increase the DB version? Also, should probably be a constant, no?"}
{"pred": "nit: `return w.every.IsZero()`", "gold": "We could utilize the new isZero method in this if-statement, right?"}
{"pred": "Why do we need this?", "gold": "should probably have config have a `t` or a `logger.NewTestLogger(t)`, and return the latter"}
{"pred": "Why do we need to copy here?", "gold": "Does this not do the same thing as `copy`? I thought that `copy` just did an elementwise assignment, but maybe I was wrong."}
{"pred": "Why do we need this change?", "gold": "Here we are merging the configs from proto annotations and gapic config. But in other places in this PR we are using the new enum to pick one or the other, right? Or is that not the correct way to think about this?"}
{"pred": "Why do we need this default?", "gold": "not related to this change?"}
{"pred": "nit: `ANDROID_NDK / ANDROID_NDK_HOME not set`", "gold": "Why is this needed?"}
{"pred": "if (calculatedStepSpeed == 0)", "gold": "This one could be replaced with a `std::max`, no?"}
{"pred": "Should this be `manifest['application'].key?('gecko') && manifest['application']['gecko']['id']`?", "gold": "Couldn't you just write this as an if/else or a guard clause like on line 87? Just seems a bit weird doing this conditional assignment for essentially an if/else."}
{"pred": "Expected 1 space after IF keyword; 0 found", "gold": "Please use strict type comparisons (`===`), not loose type comparisons."}
{"pred": "`getBlockhash() != null` is redundant.", "gold": "The filter parameters are a bit confusing. I understand that one of them has to be set, but what takes precedence if a from/to is set and the hash as well? Should that fail?"}
{"pred": "Why is this header needed?", "gold": "Is that necessary?"}
{"pred": "Layout/SpaceInsideParens: Space inside parentheses detected.", "gold": "yess so much easier to read in order like this!"}
{"pred": "Why is this needed?", "gold": "question: would this convention automatically and always apply to all classes derived from `LuceneTestCase` including any non-`org.apache` name spaces or would it be possible to opt-out (without an exclusion list) somehow for custom code that might perhaps have chosen a different convention?"}
{"pred": "Why did you change this?", "gold": "Also found this bug, where we were setting the min passcode length to 6, but the min length for a connected app is 4. This can cause problems when the app is force closed or the shared pref is removed."}
{"pred": "Why this change?", "gold": "Why was this change necessary?"}
{"pred": "I think this should be \"Selenium Host\"", "gold": "I kind of did this deliberately, so everything from the distributor appears in the same set of logs."}
{"pred": "Shouldn't this be `pkt[TCP].seq`?", "gold": "We already have a `seq = pkt[TCP].seq` so you can just re-use it."}
{"pred": "Please don't use wildcard imports.", "gold": "We avoid wildcard imports because it isn't clear where symbols are coming from and there is potential for collision. Could you roll back this change? (As well as the additional newline, we don't use breaks in imports either.)"}
{"pred": "Why did you change the variable name?", "gold": "Why are these variables renamed? Is there a conflict with some Windows specific variable?"}
{"pred": "Why is this needed?", "gold": "Do you test for file existence simply to reduce the warning message that may occur using the include? Also - I think the practice used in BOINC is to go ahead and use include_once even though it isn't strictly necessary in this case."}
{"pred": "// +kubebuilder:object:root=true", "gold": "`TimeChaos` does not contains a field .spec.action"}
{"pred": "Why is this needed?", "gold": "You need to override where possible in rs-api"}
{"pred": "Why do we need this?", "gold": "Should this have an add/update/etc pattern? What happens if I need to change some set of data? May be better to just let the callsite manipulate the dictionary."}
{"pred": "Why is this not implemented?", "gold": "I don't think this should be added to PyRegion. Adding it here requires that every region have an \"algorithm\" which may not always make sense and the return value type will be different in every case. But fine to use the same name in the regions where we choose to implement it as a convention if that makes the API more discoverable."}
{"pred": "`proxyErr` can be `net.Error` (from `interfacer`)", "gold": "Returning here bypasses all the health check and load balancing features."}
{"pred": "This should be `2020-2021`", "gold": "Should revert this copyright change, when the file isn't changing in any other way."}
{"pred": "Shouldn't this be `if dir != \"\" {`?", "gold": "Interesting that filepath.Dir(\"thing\") returns \".\" whereas this returns \"\""}
{"pred": "Why did you change the doctest here?", "gold": "Nice, I did not know about that"}
{"pred": "`exes = std::move(exes);`", "gold": "Since the lock is have moved outside of this function, I think it would be simpler and efficient to just return a ref to the std::vector<hsa_executable_t>? That way, we don't need to make a new copy on read and we won't actually need a write operation."}
{"pred": "`readStateHeight` is unused (from `deadcode`)", "gold": "also fetch block hash of this height and return hash"}
{"pred": "Why do we need this?", "gold": "Why do we need this in this sample app and not the others?"}
{"pred": "Why do we need these methods?", "gold": "We don't need this additional method."}
{"pred": "Why did you change this?", "gold": "Shouldn't this return code conditionally? The above line seems like an error occurred."}
{"pred": "nit: `map[string]struct{}` is more idiomatic.", "gold": "What is the need to use string as key? Can we use the apis type as the key?"}
{"pred": "Why do we need this?", "gold": "how about a default parameter instead?"}
{"pred": "Why do we need to check for `InstallStrategy.Agent` here?", "gold": "i don't think we need to add duplicate check for clusterinstallref here, the function already assumes that it was invoked for clusterprovision"}
{"pred": "why not just `if bbox_feats.shape[0] > 0:`?", "gold": "\\`bbox_feats.shape[0] > 0\\` requires the number of proposal is not 0."}
{"pred": "`table.location()` -> `table.location()`", "gold": "Same here. Any way to fit on one line?"}
{"pred": "nit: `if (log.startsWith(\"set \")) {`", "gold": "using folly::to is better ?"}
{"pred": "Why was this removed?", "gold": "I'm guessing this is unintended?"}
{"pred": "Shouldn't this be `this.options.resumeAfter`?", "gold": "This looks a little suspicious to me, can you explain what's going on here?"}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.", "gold": "Can you talk about this? I'm not sure I follow why this is necessary."}
{"pred": "Expected 1 space after IF keyword; 0 found", "gold": "Is there really a need for this 'simple' layout? Is there a reason you can't use 'lightbox'? The only difference seems to be that the lightbox layout includes Piwik/Google Analytics tracking and simple does not. If tracking needs to be disabled for some reason, perhaps there is a way to do that without creating a whole new layout."}
{"pred": "I think this should throw an `UnsupportedOperationException` instead of returning `null`.", "gold": "Can you say what exception will be thrown in that case (or add an `@throws`, below)?"}
{"pred": "Shouldn't this be 2.6?", "gold": "Is this meant to be \"2.7\" or \"2.6\". The two lines in this commit don't agree with one another. Looks like everything else in this PR is \"2.6\" and that seems sensible."}
{"pred": "Why is this change needed?", "gold": "Should we put these tests in a `generators` directory?"}
{"pred": "`DataType(0.5)` should be `DataType(1.0)`", "gold": "I think that it makes more sense to keep these with the standard definition of non-zero is true and zero is false."}
{"pred": "Why was this removed?", "gold": "Any idea why you want to change the behavior here? Is there a security risk not to have the prefix in the principal here."}
{"pred": "Please rename mockDBcache to mockDirtyBlockCache", "gold": "this reads like \"mock database cache\", maybe a clearer name"}
{"pred": "\"github.com/jetstack/cert-manager/pkg/webhook\"", "gold": "Nit: move this with the other CM imports."}
{"pred": "Wouldn't it be better to use `StreamedResponseInterface` here?", "gold": "This change should be mentioned in the CM"}
{"pred": "Why do we need this?", "gold": "Do we really want a new type, or can we just use `SpanContext`? The `ISpanContext` interface is read-only, but there's nothing stopping users from casting this to `SpanContext` and modifying it."}
{"pred": "Why is this needed?", "gold": "Should we define a const like NETFRAMEWORK or NETFULL which will be set for NET452 NET461 and anything like NET47 etc in future?"}
{"pred": "I don't think it's a secure value for this.", "gold": "maybe start an issue to capture params that we need final values for and link to it here?"}
{"pred": "Why is this needed?", "gold": "Can we instead do the check in find_instance_group_by_url() ? if we return None when group is not found, it will hit the next if statement (if not instance_group) and continue as expected, in this case we don't need to add 3 separate if statements"}
{"pred": "Shouldn't this be `PM | .PM`?", "gold": "on my android \".a.m\" and \".p.m\" is used add `||` here to support both variants"}
{"pred": "Why did you remove the check for Multiplane here?", "gold": "`!FormatIsMultiplane(image_format)` will always be true at this point due to the test on line 4639."}
{"pred": "from pandas.core.accessor import CachedAccessor", "gold": "Maybe inline the CachedAccessor code? Is it similar to our lazy property? If yes, can we reconcile the two?"}
{"pred": "Why this change?", "gold": "Nit this file has unintended changes."}
{"pred": "This should be `R.id.share_file`, not `R.id.share_file`.", "gold": "Potential NPE? `hasMedia && selectedItem...`"}
{"pred": "Why do we need this change?", "gold": "PEP-8/consistency with the rest of the code."}
{"pred": "I think this should be `MongoDbInstrumentMethodAttribute`", "gold": "nit: Would you mind moving the `ParameterTypeNames` assignment into each of the method-specific attributes? That could reduce confusion if we later decided to instrument other methods in MongoDb"}
{"pred": "Shouldn't this be `List<UInt256>`?", "gold": "Is exposing SpecProvider needed here?"}
{"pred": "Why do we need this method?", "gold": "So this will only be executed when it is true. I'm not sure that makes it always usable. Why not make the afterAction, `Action<bool>` and always call it, with the result as parameter."}
{"pred": "Shouldn't this be `if (result != PFS_RESOLVE_LOCAL)`?", "gold": "Tim, please add { } to this 'if'."}
{"pred": "nit: `DefaultHost is the host that will be used when none is specified.`", "gold": "Suggest moving to `enable.go` since thats only place used."}
{"pred": "Why did this change?", "gold": "This changed when I rebuilt my docker container. Not quite sure why, but might have to do with what my host network configuration looks like when it's rebuilt."}
{"pred": "// Cache is used to handle the local cache.", "gold": "Local cache of what? What's stored in it?"}
{"pred": "Why do we need this change?", "gold": "If the copied `DataFile` returns null, shouldn't the copy also return null? Why not make the builder use `Integer` instead of a primitive here?"}
{"pred": "Why not use `os.path.isdir`?", "gold": "You could just do this test in the `save_html` function above, and then the users of the save html function don't have to worry about it."}
{"pred": "This should be `errors.Newf(\"get environment config: couldn't find environment dev in the application my-app\")`", "gold": "I think I'd prefer not using the formatted string when it comes to unit test, since we don't pass in any string variable as params."}
{"pred": "// +build avr nrf sam sifive stm32 k210 nxp", "gold": "Maybe it would be better to explicitly include devices instead of explicitly excluding devices?"}
{"pred": "`const auto& atom: atoms()`", "gold": "This could be `for (auto bond: bonds()){`, right?"}
{"pred": "`$config` is not used.", "gold": "Is $config no longer being used? Can we remove this line?"}
{"pred": "(style) line over 80 characters", "gold": "can you revert changes to this file."}
{"pred": "Shouldn't this be `roleName` instead of `roleName`?", "gold": "I don't believe the change is sufficient to correctly handle variable substitutions in the name. As part of the process command we pass the original role object that was retreived without taking into account the substitution. So while the first template apply command will work fine because the original role does not exist thus it's a new add operation, if you try to re-apply the same template again, we'll pick up and process a wrong original name thus we'll try to execute an add operation again instead of modify. So we need to take into account the substituted name when we retrieve the original role as well. Same change should be applied to both policy and service blocks as well."}
{"pred": "Why do we need this?", "gold": "Please add this to IMvxMainThreadDispatcher as well"}
{"pred": "Why this change?", "gold": "Is it possible for opt not to be a string? I couldn't tell if this was a typo or if there is actually a case where it is not a string."}
{"pred": "Why do we need this class?", "gold": "Let's move this up next to the `id` as we usually have `className` as one of the first props."}
{"pred": "I think this should be `quilt2`", "gold": "While you're in here, \"build, push and install\"?"}
{"pred": "Why is this removed?", "gold": "Unit never made it to spec...so removing."}
{"pred": "I don't think we need the `omitempty` here.", "gold": "We have RequestStart which seems redundant a bit to this one, WDYT?"}
{"pred": "I don't think we need `Fragment` here.", "gold": "I think we can remove this corresponding export from `preact` now! Double check no other s using though lol"}
{"pred": "Extra empty line detected at block body end.", "gold": "I'm not sure why this would be in here. Were you working off a branch based off of master? These lines were removed in a previous commit because the table is actually called 'cart_item_traits'."}
{"pred": "DEFAULT_GITHUB_URL = \"https://api.github.com\"", "gold": "Maybe `DEFAULT_GITHUB_API_ENDPOINT` would be a better name, since we refer to this as an API endpoint elsewhere?"}
{"pred": "I think this should be `task-cpu-mem-limit`", "gold": "If/when you rebase from `dev`, this is going to cause a merge conflict. I'd suggest that soon after merging this PR as the capabilities code has been moved to \"agent/app/agent_capabilities.go\""}
{"pred": "nit: `bytecount 0` -> `bytecount 0`", "gold": "What is the test case here?"}
{"pred": "Why do we need to wait here?", "gold": "You could try moving this closer to the call, where we request label info. We might be doing the check very early.. all the resources may not be present with the informer at this point."}
{"pred": "Why do we need to add these new fields to the schema?", "gold": "Can we add these up by the data files counts?"}
{"pred": "`list.props.revealOrder` can be `null` here.", "gold": "Most of the time assigning won't save bytes unless used 3+ times (var adds 3bytes)"}
{"pred": "Why did you change this?", "gold": "I would rather find the code that inverts the logic and remove that."}
{"pred": "Why this change?", "gold": "The else doesn't return anything?"}
{"pred": "Why are we ignoring the error here?", "gold": "assignments should only be cuddled with other assignments (from `wsl`)"}
{"pred": "Why did you remove the `resize`?", "gold": "why not simply `paths = search_path_opts.LibrarySearchPaths` ?"}
{"pred": "Shouldn't this be `globalize.translate(item.Title)`?", "gold": "Are we sure this should be translated by the web client? It was unclear in chat exactly what's getting translated here."}
{"pred": "Why do we need to set Exists to false?", "gold": "same oneof issue."}
{"pred": "`resolve_references` is a bit of a misnomer. I think it should be called `resolve_references_for_module_install`.", "gold": "If we resolve here, isn't the whole `module_install` config setting or any subkeys also pluggable? I think that's totally fine, just want to make sure that that's known, and we should also update the data in `options.rb` for those options"}
{"pred": "Shouldn't this be `kds = NULL`?", "gold": "it would be better to change `kds` into a `std::vector` then we don't need to explicitly free it"}
{"pred": "`config` is not used.", "gold": "Looks like you're also changing logic and not only tests."}
{"pred": "Why did you change this?", "gold": "Is it possible that test failures here are real and that we should improve the rate limiting logic? Or are we ok with rate limits to be exceeded by 15%?"}
{"pred": "`true === $options['lazy'] ? 'data-' : '';`", "gold": "Shouldn't there be some kind of validation somewhere? IMO there should be an exception if `$options['lazy']` is not a boolean."}
{"pred": "Why is this needed?", "gold": "nit: please move it inside namespace."}
{"pred": "`RUN_AS_OPTIONS` should be in alphabetical order.", "gold": "The inventory schema needs to be regenerated to include these options. Looks like the CI job didn't get triggered since the paths don't include `lib/bolt/transport/**`.  "}
{"pred": "I don't think you need the `\\n` here.", "gold": "This might break if a user runs the system tests with a system language other than English, in which the user default language differs."}
{"pred": "Why is this change needed?", "gold": "This was raising intermittent errors, since Lorem ipsum contains the word \"error\""}
{"pred": "Shouldn't this be `p->mp_impl == nullptr`?", "gold": "Shouldn't we then add `mp_impl = nullptr` to the destructor of `RTPSParticipant`"}
{"pred": "Why did you change this?", "gold": "Are the additional brackets necessary?"}
{"pred": "`consumerIntf` -> `intf`", "gold": "consumerMeta only belongs to this invoker instance only relate to this one consumerIntf class seems no need to build a complex key?"}
{"pred": "I'm not sure if this is the right way to test this, but I'm not sure how to test this.", "gold": "this one is unrelated right? (Don't mind including it, just making sure I understand)"}
{"pred": "why do we need this?", "gold": "8, 11 actually achieves similar performance, we should use our default config if [9,11] is unnecessary."}
{"pred": "Why do we need this?", "gold": "For a separate PR: Can we make this a JSON/Thrift procedure instead? It could accept the amount of time it needs to sleep as an argument."}
{"pred": "@pytest.mark.xfail(run=False)", "gold": "Please remove this blank line."}
{"pred": "Please sort imports by length.", "gold": "the cartTrait is not used anymore"}
{"pred": "Shouldn't this be `<see cref=\"TracerFactory\" />`?", "gold": "Cn you please make the message more human friendly."}
{"pred": "Why is this import needed?", "gold": "Please do `import enum` instead, then use `enum.Enum` and `enum.unique` - we do this everywhere to see where things are coming from, except for Qt (everything begins with a `Q` anyways) and typing (mostly used in type annotations, so it's clear without the namespacing)."}
{"pred": "Why was this removed?", "gold": "Isn't ENCFAIL used in codec.c below? Wouldn't this make it no longer compile?"}
{"pred": "Why is this needed?", "gold": "this looks very weird"}
{"pred": "This class will be complety removed in 7.0.0", "gold": "So, the culprit was actually this class \"ConsoleLogHandler\", correct? Because it simply wrote to stdout..."}
{"pred": "Is this TODO still relevant?", "gold": "Still curious why you need to modify this method? Why not in the future just have a method called `LogFactory.ReloadConfiguration()` instead of the config assigning itself?"}
{"pred": "I don't think cleanup is needed here.", "gold": "Should this say \"lint, cleanup, destroy, dependency, syntax, create, prepare, converge, idempotence, side_effect, verify, cleanup, destroy\"?"}
{"pred": "Why do we need to change this?", "gold": "I am not sure why these log messages are changed."}
{"pred": "Why is this needed?", "gold": "This panic is incorrect - this is a full implementation of a slice equality check. This should be something more like `type x is not comparable` maybe?"}
{"pred": "Shouldn't this be `_dr_nlen(opt, DR_MAX_OPTIONS_LENGTH - 1)`?", "gold": "See below: let's use the existing convention _tcsnlen."}
{"pred": "Why was this test removed?", "gold": "Why don't we need this any more?"}
{"pred": "why do we need this?", "gold": "clean unnecessary comma"}
{"pred": "Shouldn't this be `writable: true`?", "gold": "This is the default value for enumerable."}
{"pred": "Shouldn't this be `const`?", "gold": "Just above, you have `const auto` for a `RDKit::MOL_SPTR_VECT::const_iterator`, here it is only `auto`. Why is this?"}
{"pred": "`auto action{ static_cast<Action*>(ptr.release()) };`", "gold": "@djarek just a quick question, wouldn't be `ptr.reset()` here better as it does not memory leak if we do not call delete on the raw pointer aswell? it maybe makes sense to use `ptr.release` if the event is guaranteed to be loaded again but on a reload it would memory leak if for example I removed that script from my files before reloading or not?"}
{"pred": "Why do we need to cast here?", "gold": "Why to `Get()` value twice, while u have it 2 lines before"}
{"pred": "Shouldn't this be `october.refresh`?", "gold": "There is a typo here, this needs to state `october.fresh`"}
{"pred": "nit: `assertEquals(\"Table name must match\", location, table.name());`", "gold": "Metadata tables loaded through `HadoopTables` will have their names as location.type (which is weird as we normally use location#type). I am not sure whether it is a big deal or not."}
{"pred": "Why do we need to subtract `scrollY` here?", "gold": "Can you explain why you went from a positive value (metrics.viewTop) to a negative value?"}
{"pred": "`withLockedTasks` and `withUnlockedTasks` are not used.", "gold": "Let's use a dedicated DTO instead of `List<String>` to remain consistent with all other existing REST API endpoints: * Introduce a new DTO class (e. g. `ExternalTaskTopicNameDto`) located under `org.camunda.bpm.engine.rest.dto.externaltask` * The class should have the attribute `topicName` of type `String` * Introduce a getter & setter for the attribute * Convert the list of strings to a list of `ExternalTaskTopicNameDto`s * Change the method signature to return `List<ExternalTaskTopicNameDto>`"}
{"pred": "This method returns the {@link ScriptDTO} with the given ID.", "gold": "Do you plan to remove the `ScriptDTO getScript(List<String> path);` method long-term?"}
{"pred": "`this.enabledTypes && !this.enabledTypes.length`", "gold": "@itsiprikshit I used a custom v-model to app count component because the sourceapps component was not reacting to user app count selection, e.g. whenever user changed app count selection, the source apps selection multiplicity remained the same. As a matter of fact, user was able to select one application only. Please let me know if you have any thoughts on this."}
{"pred": "from mmdet.models.utils import ResLayer", "gold": "Similarly, we think we may keep `fused_semantic_head.py` unchanged. Then, we could add a new mask head for the desired function."}
{"pred": "Why is this not supported by PHP?", "gold": "Why implement this? It duplicates the value in FeatureConfig."}
{"pred": "nit: `if (false)` -> `if (!false)`", "gold": "@aokolnychyi / @RussellSpitzer / @holdenk Spark3 gives ScanBuilder - abstraction - to define all types of Scans (Batch, MicroBatch & Continuous). But, the current implementation / class modelling - has SparkBatchScan as the Scan implementation. Looking at some of the concerns of BatchScan - all the way from the State maintenance of a single SnapshotId to read from, the asOfTimeStamp & features like VectorizedReads - all of these don't seem relevant to Streaming Scans. So, I feel that we need to divide out Streaming Scans into a different class. Does this thought process - make sense? If we go by this route - do you folks know - how to pass different Scan objects to Spark based on Batch vs Streaming?"}
{"pred": "Why did you remove this check?", "gold": "Will you please update these files to use a copyright end date of 2021?"}
{"pred": "nit: `fixture` -> `fixtureElement`", "gold": "Adding fixture to the body as we don't have the `runner.tmpl` anymore"}
{"pred": "Why do we need this import?", "gold": "nit: just for consistency we can move this import block down. Right above openshift/hive imports"}
{"pred": "typo: `ahout` -> `about`", "gold": "Perhaps clean up the commit history and don't squash?"}
{"pred": "Shouldn't this be `content.position()`?", "gold": "Just `writeBytes(content.array())` Back to my original, somewhat broken version ;)"}
{"pred": "I think this should be `ctxserver: \"0.0.0.0\",`", "gold": "I couldn't tell from reading the test - do we every criss-cross transports in the same test? I want to make sure we aren't breaking the chain..."}
{"pred": "Why this change?", "gold": "File is not `goimports`-ed"}
{"pred": "Why was this removed?", "gold": "do we want to still validate that the context had a nonzero TTL? i suppose it's fine to let clients determine whether or not their streams will timeout (though we still don't have the means to cancel them from the server other than EOF), and they can still cancel their own contexts - so maybe not a huge deal, but thought it was worth bringing up."}
{"pred": "Why is this needed?", "gold": "Go ahead and provide the same implementation for all of the languages - I'm not sure there's a reason for it to be different."}
{"pred": "This should be `assert type(j[0]) == dict`", "gold": "We should also test type confusion here (e.g. `{\"anticache\": \"foo\"}`)"}
{"pred": "I think this should be `sh.cmd 'dartfmt -n .'`", "gold": "I'd love to trim the content of `unformatted` too. Any ideas?"}
{"pred": "Why is this added?", "gold": "can you remove this unrelated change?"}
{"pred": "`STYLESHEET` -> `STYLESHEET_STYLE`", "gold": "Would using `HintLabel` here instead (without `setObjectName`) work?"}
{"pred": "`ambient bool` is unused (from `structcheck`)", "gold": "From what I can tell, the `serviceAccountFile` is never set to anything except \"\"? It'd be best to remove this altogether, so we don't mislead future developers  "}
{"pred": "Why was this removed?", "gold": "Why do we remove the Sign in link?"}
{"pred": "Why was this removed?", "gold": "holy crap, were we really missing a 'break' statement here?"}
{"pred": "Why do we need this interface?", "gold": "This doesn't seem to be used anywhere, probably doesn't need to be a new interface."}
{"pred": "I don't think this is the right thing to do. If we get an error here, it means we're reading a public TLF while logged out fails on macOS, which is not what we want.", "gold": "This is a good start, but what do you think about just using `libkbfs.GetCurrentSessionIfPossible()` to avoid calling this altogether if there's no session? That way we can avoid continuous RTTs to the server when logged out."}
{"pred": "Use the new Ruby 1.9 hash syntax.", "gold": "This `aria-labelledby` stuff is all new to me, but my reading of the spec is that the value should be a list of element id values, and `dLabel` doesn't seem to be the id of any element?"}
{"pred": "Shouldn't this be `||`?", "gold": "Does this fail validation if you now use the `upload` key instead of `source`?"}
{"pred": "Please add a space after the comma.", "gold": "Can we use GetCliGlobals(false)->exCollHeap() here instead"}
{"pred": "nit: `constexpr int32_t partitions`", "gold": "I suggest you move the waitUntilAllElected into init::KV() method."}
{"pred": "Why do these need to be public?", "gold": "no need of pub;lic."}
{"pred": "Why is this a TODO?", "gold": "Do you think we can name this variable in a less ...negative.. language ? maybe `ProposalTieBreakerEqualizer`"}
{"pred": "`inputSchema` -> `schema`", "gold": "Can you add back these newlines? We try to avoid non-functional changes like this because they can cause commit conflicts."}
{"pred": "Why do we need to filter here?", "gold": "Why not just `if (!searches.includes(action.search)) searches.push(action.search)`? That way you don't need to remove then add the element."}
{"pred": "Why do we need this method?", "gold": "@demiankatz I'm not sure that this is very useful. I just did it to get started. If we had a small handful of predetermined prefixes that were randomly chosen, it would be easier to distinguish them from the rest of the call number. Would that be preferable?"}
{"pred": "Why was this removed?", "gold": "Why is this deleted too?"}
{"pred": "Why do we need `IDisposable`?", "gold": "Given that IApiResponse is already made disposable, this is not necessary."}
{"pred": "Why is this change needed?", "gold": "client.getSelectedSpellName() can be used for this"}
{"pred": "line too long (82 > 79 characters)", "gold": "Please alpha sort these filenames."}
{"pred": "Why do we need to check for self check here?", "gold": "is this already called by actPool.validate()?"}
{"pred": "Shouldn't this be `numBondRings(pBond->getIdx()) > 0`?", "gold": "It is relatively cheap to tell whether a bond is a ring bond, we don't have to perform an SSSR."}
{"pred": "Why do we need to change this?", "gold": "Maybe we should add flag aliases for service as well."}
{"pred": "Why was this removed?", "gold": "This LGTM but don't we need a winning PoSts field to fully implement the protocol? No need to add here as I'm working on this in another PR, but curious how we can interop with lotus blocks without post proofs."}
{"pred": "`pubSub` is unused (from `deadcode`)", "gold": "can you move the [] into pubSub? so Blockchain just contains a pubSub, not []"}
{"pred": "I think it would be better to have a default value of 100 here.", "gold": "I don't think 100 is a safe default here, since later we check that the value is between 50-95."}
{"pred": ">ThreadAgnostic = 2 | ThreadSafe [](start = 12, length = 31) nit: `ThreadAgnostic | ThreadSafe`", "gold": "I would be nice if we could describe this without the word \"agnostic\""}
{"pred": "I think it would be better to use `range` instead of `range` here.", "gold": "Pick more specific exception types for these cases. Not sure what would be best for this one (`ValueError`?) but the next one could be `IndexError`."}
{"pred": "Why do we need this?", "gold": "This seemed like the easiest solution We need to include this path in `testMatch` to run the test AFAIK *BUT* we don't want this test ran when running them all normally I'm sure there are other ways to do this!"}
{"pred": "Why was this changed?", "gold": "Most of the following test changes can be avoided if need be."}
{"pred": "Why is this removed?", "gold": "Eventually we might want to move this back as generating this data structure takes some time (for large datasets) and we don't want it in the hot-path of `osrm-customize` runs. Thinking long-term making `osrm-customize` eventually digest `.osrm.cells` will will enable only updating cells selectively and using an earlier customization for the rest."}
{"pred": "Shouldn't this be `return err`?", "gold": "You're not really using named result variable - you can just leave `error`."}
{"pred": "nit: `schema` is not used.", "gold": "It wasn't possible to call this method with `PartitionSpec.unpartitioned()` as the schema in the spec was empty."}
{"pred": "Use classes must be in alphabetical order", "gold": "this namespace is never used"}
{"pred": "\"or it will be redelivered\" -> \"or it will be redelivered\"", "gold": "Well, if you call `Nack`, it _will_ be redelivered. So maybe reword."}
{"pred": "I think this should be `wistia_video_embed`", "gold": "Why did we make this a static string?"}
{"pred": "Should this be `google.cloud.bigquery`?", "gold": "Please re-run PYTHONPATH=. python tests/services/inventory/update_cai_dumps.py following the instructions at the top of this file to ensure the test files have the correct CAI asset type."}
{"pred": "`NotFixTopicCopyBugOption` is unused (from `deadcode`)", "gold": "`stateDB := NewStateDBAdapter(sm, 0, hash.ZeroHash256, NotFixTopicCopyBugOption())`"}
{"pred": "I don't think you need the parentheses around `len(elems)` here.", "gold": "There are unneeded parens here, but I'll fix it up when merging."}
{"pred": "Shouldn't this be `acl.rb`?", "gold": "Just one more thing... How about doing all of the following? 1. renaming h2o.rb to bootstrap.rb 2. require and include the acl code _from_ bootstrap.rb"}
{"pred": "Why was this removed?", "gold": "Commit message: \"remove\" is misspelled."}
{"pred": "nit: `value.slice(0, value.size() - toTrim + 1)`", "gold": "This is a pretty idiosyncratic method - I'd move it into the JSON-RPC package rather than adding it to `BytesValue`."}
{"pred": "Why do we need to apply the derived metadata to the example group?", "gold": "Is there a way to deduplicate this somehow? Could we roll it into `RSpec.configuration` with a bit of memoization or is there a chicken and egg problem."}
{"pred": "Can we rename this to `PROP_UPDATE_IN_PROGRESS`?", "gold": "Generally, I wouldn't say I like the idea of providing properties that return negative/inverted values. It would be more convenient to return whether the update is **in** progress or not."}
{"pred": "Why do we need to multiply by 10000 here?", "gold": "Converting playbackManager to operate in ms (preferred solution, imo) would allow us to completely drop this function."}
{"pred": "DEFINE_int32(min_edge_returned_per_vertex, 1000, \"The min edge number returned searching vertex\");", "gold": "The default value should be a bigger one, I'd like it is the maximum of int32. That means we will not cut-off anything by default. And users would config it with an appropriate value in config-file, such as 1000 or 5000, etc."}
{"pred": "Shouldn't we return an error here?", "gold": "Probably missing return here as well"}
{"pred": "Why do we need this?", "gold": "On second thought... this affects how often the function specified by the `load` property is run. So I wonder if, for consistency, we should call this `LoadInterval` instead. Does that make sense?"}
{"pred": "nit: space after `=`", "gold": "Now you don't need the localization module here then :)"}
{"pred": "I think this should be `ROWS_MIGHT_NOT_MATCH`", "gold": "This should not convert each value to a literal on every invocation. Instead, this PR can add a `literals` method to `BoundSetPredicate` to access the values as literals. That way, the conversion happens once and can be lazy."}
{"pred": "Why this change?", "gold": "I think we still need this exception if doesn't have LIGHTGBM_BUILD_DOC"}
{"pred": "Why did you remove this?", "gold": "Does this make it easier to read? Previously this would have run `kubectl describe certificate` right? In which case it would have included events related to the cert. Will we miss that? Would the old `kubectl describe` output have gone to stderr?"}
{"pred": "Shouldn't this be `camunda-integration`?", "gold": "Just an understanding question: do we need a map here, would a list/set of Strings be sufficient? we are not adding entries with `false` here, are we? Being in the list already means it's used, right?"}
{"pred": "I think this should be `if removed and not removed_tasks:`", "gold": "Ah, so the change is that you want the `prune()` side effect before doing the `task.id not in necessary_tasks` membership check? Stupid non-Haskell programming languages :p"}
{"pred": "File is not `goimports`-ed (from `goimports`)", "gold": "This change was not really intended but made by the linter of VS Code. And looking at other packages this looks like a best practise to place interal packages on the top and gh imports afterwards."}
{"pred": "Why is this needed?", "gold": "Do we normally force ReadPreference primary on other write operations? Or is it just that we normally ignore it?"}
{"pred": "Why is this needed?", "gold": "Instead of returning null here and discarding nulls automatically, I think this should return null (or some other signaling value) and fix the part that consumes the output of the visitor."}
{"pred": "Why do we need to update the cache here?", "gold": "Really, we want to be setting the validatorsForPreviousBlock against the yet to be created block, so it might make sense to update the cache once the block is created/imported instead."}
{"pred": "Shouldn't this be `sizeof(longopts) / sizeof(longopts[0])`?", "gold": "It seems to me that the original implementation was correct. Can you share what the scanner was pointing out?"}
{"pred": "Shouldn't this be `subscribe-with-google-bulk-edit`?", "gold": "Instead of doing that, please create an `assets/js/googlesitekit-subscribe-with-google-bulk-edit.js` file as entry point - all our entry points should be located in `assets/js`."}
{"pred": "I think this should be `googlesitekit-logo-mini`", "gold": "This is not valid, a `div` shouldn't be in a `span`. You could apply the `className` attribute to the `span` tag."}
{"pred": "nit: `expire finished transferred accounting stats older than this value` -> `expire finished accounting stats older than this value`", "gold": "Would it be possible to reuse RcJobExpireDuration and RcJobExpireInterval and auto delete them when job is deleted?"}
{"pred": "Why do we need these imports?", "gold": "Python wants **future** imports to come first."}
{"pred": "Do we need to call `options_detach()` here?", "gold": "Better to call this before EXITING_DR which is supposed to be last."}
{"pred": "Why did you remove this?", "gold": "Does this work at runtime?"}
{"pred": "Why do we need to increase this?", "gold": "Hmm why do we need to make this change? Like which one requires this change?"}
{"pred": "Why did you remove this?", "gold": "why remove this and other piece?"}
{"pred": "I think this should be `assert.isFalse`", "gold": "Yikes... That was probably me."}
{"pred": "`Note attachments` -> `Note attachments`", "gold": "It would be better to move the ... outside of the l8n block. This way it won't need to be translated for each language twice."}
{"pred": "Why is this needed?", "gold": "That's a huge load of new dependencies. I think it's better to create a reload function on ScriptManager and control with enum instead."}
{"pred": "Why do we need to add this here?", "gold": "`NewUpgradeTaskJob` -> `NewUpgradeResource`"}
{"pred": "`lua_pushinteger(L, mem.cached);`", "gold": "Is that the memory usage of the system or the process / awesome?"}
{"pred": "Shouldn't this be `(Realm, string|Schema)`?", "gold": "\"change\" *and* \"schema\" events (A bunch of these; not marking them all)."}
{"pred": "nit: `overrideSequenceNumberForNewDataFiles` -> `overrideNewDataFilesSequenceNumber`", "gold": "I think there is probably a shorter, more descriptive name for this. Something like `commitAtSequenceNumber`?"}
{"pred": "Shouldn't this be `allow_blank: false`?", "gold": "The `url_name` should definitely be more than just 1 character long at the shortest. How about 3 or 4 characters?"}
{"pred": "Why was this removed?", "gold": "Please revert this change"}
{"pred": "Should this be `@template`?", "gold": "Nice. I hadn't even heard of presenters in Rails before (learn something new every day) :)"}
{"pred": "Should be `string[]`", "gold": "`string[]` ? not sure, can you verify this @core23 ? Thank you"}
{"pred": "Why do we need this?", "gold": "are we aware that this breaks older browsers like WebOS? :) they don't handle `let`"}
{"pred": "I don't think this is correct. It should be `record`.", "gold": "This isn't really a Kinto record but a Memcached record. I could kind of go either way on this."}
{"pred": "Why do we need to call this here?", "gold": "Kick off the download after login."}
{"pred": "Shouldn't this be `string[]`?", "gold": "I don't think you need to change this, `array<int, string>` should be accepted whenever `string[]` is expected. (`string[]` is an alias of `array<string>` itself an alias of `array<array-key, string>` which is a parent type of `array<int, string>`"}
{"pred": "Can this be removed?", "gold": "TODO: fix this, probably in another PR"}
{"pred": "`tab.tab_id != self._tab_id`?", "gold": "Is there any case that tab is None?"}
{"pred": "Shouldn't this be `return nil`?", "gold": "pls use `err` instead of `e`"}
{"pred": "Why do we need to check for `getGamepads` here?", "gold": "`attachGamepadScript` above can also be placed inside."}
{"pred": "Why is this exported?", "gold": "when we use RegisterWriteCommand,this func should be exported,so we can use this to get signer at the outside action package"}
{"pred": "Is this intentional?", "gold": "Dead code - we should remove it or use `log.Trace` for lower logging level. Same applies for change at line 138."}
{"pred": "I don't think we should be swallowing the exception here. We should at least log it.", "gold": "How does this make sure invalid coordinates making the parser fail? Relying on the Coordinate type's boost numeric_cast calls in the ctor? Shouldn't we rely on a coordinate's `.IsValid()` member function instead?"}
{"pred": "I don't think we need the `Purpose` tag.", "gold": "Simple Storage **Service**"}
{"pred": "Why do we need this?", "gold": "Does this line (and the corresponding one in the test bootstrap) actually do anything? I don't see where CACHE_ENABLED is used as a global constant."}
{"pred": "nit: rename to `TestTransitionDependenciesResolved`", "gold": "has this changed? are we testing \"all possible situations\" now?"}
{"pred": "`Zookeeper ensemble` -> `ZooKeeper`", "gold": "ZK is properly spelled 'ZooKeeper' (capital 'K')."}
{"pred": "Should this be `~/.config/gcloud/application_default_credentials.json`?", "gold": "Guessing this locates the key you get when you run `gcloud auth application-default login`? What was the previous behavior/the behavior for the manual Veneer creds?"}
{"pred": "This should be `this.countRows() > 1`, right?", "gold": "looks good to me, but it would be better if you assigned `this.countRows()` into a variable, so it doesn't trigger twice in the return statement"}
{"pred": "Why is this needed?", "gold": "For now, don't add \"use strict\" to any existing files. That's a separate project that we'll do later. (New files can use \"use strict\".)"}
{"pred": "Why do we need this?", "gold": "I was confused by this env name variable, assuming it was the value, not the name. Silly nit, but maybe name it noninteractiveEnv?"}
{"pred": "`posix='win' not in sys.platform`", "gold": "`sys.platform` could be equal to `darwin` which is posix. Use `not startswith('win')`?"}
{"pred": "Why do we need to create a new override lookup here?", "gold": "let's move this into `slack_helper.go`"}
{"pred": "why this change?", "gold": "I doubt it will work, but without space between -o and ControlPath it should. Lets see. What I do not understand is why we did not see a failure on CI related to this?"}
{"pred": "Why did you change this?", "gold": "this is the reason we might be seeing 360 as discrete bearing"}
{"pred": "I don't think this is used anywhere.", "gold": "`FULL_VERSION` is available at module level for others to use, but it won't have `%(prog)s` substituted with pylint. Will that be a problem. Also put it here instead of __pkginfo__ with other versions because it isn't pkginfo related."}
{"pred": "Why do we need this?", "gold": "Is this needed? I don't see any uses."}
{"pred": "Should this be `DeleteBuildOrFail`?", "gold": "Shouldn't this be V1beta1?"}
{"pred": "Extra empty line detected at class body end.", "gold": "I think there's an `approval_for`"}
{"pred": "<U> Stack<U> unit(Iterable<? extends U> iterable);", "gold": "Here we should use <code>List</code> in generic"}
{"pred": "Shouldn't this be `getTargetCompatibility()`?", "gold": "The `JavaCompile#getToolChain` method got removed and I am not sure what a good replacement is. I replaced it with `targetCompat` for now but they are not equivalent. Maybe we can use `JavaVersion#current` here?"}
{"pred": "`findIdByHash` should return `MultimediaId`", "gold": "The method name is incorrect. It does not check the existence of the file. I'd suggest deprecating both methods `fileExists` and `findIdByHash` and use findIdByFilename instead of fileExits"}
{"pred": "`__u8 nat_lvl1_drop = 0;`", "gold": "We have `stdbool` imported, might as well use that for clarity."}
{"pred": "", "gold": "File is empty, consider removing?"}
{"pred": "Why do we need this change?", "gold": "`writeConcernMax` was changed to return a `writeConcern` formatted the new way-- `writeConcern: {w:1, ...}`. Bulk execute takes an actual `WriteConcern` object as its first parameter (this was changed in master), so we have to un-wrap the `writeConcernMax` result here."}
{"pred": "Style/MutableConstant: Freeze mutable objects assigned to constants.", "gold": "How about passing this through the `config`?"}
{"pred": "Why is this needed?", "gold": "Out of curiosity - did we make this change to allow dynamically assigning a value to `os.environ[\"TEST_TARGET\"]` during test execution? I kind of liked the decorator style `@only_localstack` - makes the condition a bit more explicit. Looks like `skipif` also allows to specify a condition string, e.g. `pytest.mark.skipif('os.environ.get(\"TEST_TARGET\") == \"AWS_CLOUD\"')` - could that be an option? (not sure if that gets lazily evaluated at runtime right before the execution of the annotated test method starts, though..)"}
{"pred": "Why do we need this?", "gold": "I noticed (SonarCloud noticed actually) that the implementation of `::edit` method is the same as `__construct` is. Does it make sense to call the `edit` method from the constructor?"}
{"pred": "flb_debug(\"[syslog-prot] incomplete message! (Enable trace log to see the message.)\");", "gold": "would you please rename the message prefix to: [in_syslog] ...\""}
{"pred": "`molExt` -> `molExt`", "gold": "The pointer to a pointer is kind of gross. How about either taking the `ROMOL_SPTR` directly or, preferably, returning an `std::pair`?"}
{"pred": "nit: `pendingCountLocked` -> `pendingCount`", "gold": "the name confusing, please rename to `pendingCountNoLock` or similar"}
{"pred": "Why are we ignoring the error here?", "gold": "line is 175 characters"}
{"pred": "Why did you remove this check?", "gold": "@ivanbogdanov Does this fix the first time load gray screen issue that @wmathurin noticed?"}
{"pred": "This should be `DeprecationWarning` instead of `UserWarning`.", "gold": "Is `2.3.0` version OK?"}
{"pred": "Use the new Ruby 1.9 hash syntax.", "gold": "I tested it only in Firefox (`./go //rb:firefox-test`)"}
{"pred": "\"Methods on the new TestClient are overrideable as well.\"", "gold": "separate third party and builtin"}
{"pred": "Shouldn't this be `!isHybrid() || BootConfig.getBootConfig(frontActivity).shouldAuthenticate()`?", "gold": "@smcnulty-sfdc We do want to finish the hybrid activity in our hybrid apps though. Could the caller not pass in `frontActivity` instead? Or start it up again post-logout?"}
{"pred": "Shouldn't this be `ctx.Err()`?", "gold": "isn't this going to return a timeout error if the context is canceled?"}
{"pred": "Shouldn't this be `argNameVal.length == 1`?", "gold": "`argNameVal.length` will still be !=2, so line 22 will give true and then continue on line 24"}
{"pred": "`$chars[$i + 1]` => `$chars[$i + 1]`", "gold": "It was `$chars[$i]` I believe."}
{"pred": "Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "This has the likely potential to break existing tests that are relying on the old beaker behavior. If we are going to release this in beaker 3.x, then we need to preserve the old behavior as well (so set both the `upcase` and original values). On Windows, they env variables will overwrite each other, with the same value, so not an issue. On *nix, there will be two env variables, but they will have the same value, so again no issue."}
{"pred": "Why do we need this change?", "gold": "Thanks for fixing this! I probably didn't test the playground when making changes here for cloud variables."}
{"pred": "`Preconditions.checkArgument(selectedIds != null, \"Selected field ids cannot be null\");`", "gold": "I will also check if `nameMapping` needs a precondition null check."}
{"pred": "Why was this removed?", "gold": "Since RuntimeIOException is deprecated and you are touching this code, why not replace it?"}
{"pred": "nit: `tmImplementation=\"\"` -> `tmImplementation=\"\"`", "gold": "You should also have a test that calls it with tm_cpp and make sure it returns the correct JSON file."}
{"pred": "Why was this removed?", "gold": "One more minor change, the string `ForAdditionalLiveTvOptions` is probably also unused."}
{"pred": "Why change this to WARNING?", "gold": "How to distinguish between warning and error?"}
{"pred": "Why do we need to import UIAHandler here?", "gold": "Perhaps you want to check if UIAHandler.handler is not None. The current check will break NVDA if you call UIAHandler.terminate() for some reason."}
{"pred": "Why do we need this?", "gold": "can we make `replace-partitions` property a static variable in `SnaphotSummary.java`?"}
{"pred": "This should be `W3CBridge`", "gold": "Maybe call it `WireBridge`?"}
{"pred": "Why do we need to send the welcome email here?", "gold": "Should really be `one()`, not `one_or_none()`"}
{"pred": "I'm not sure if this is the right way to do it, but I'm not sure if this is the right way to do it. I think the right way to do it is to add the node-labels to the `out.NodeRegistration.KubeletExtraArgs` map.", "gold": "Should we use strings.Split and strings.Join instead of manual concatenation?"}
{"pred": "Why do we need this?", "gold": "rough that this needs to exist, but it is what it is"}
{"pred": "This test doesn't seem to work, maybe due to not knowing the props allowed for x-bar?", "gold": "FYI, I pulled your branch and hacked a little on your test case. This passes for me (you may want to tweak further): <pre> it('should not set empty string for null props in custom elements', () => { customElements.define('x-bar', class extends HTMLElement { val; }); // @ts-ignore render(&lt;x-bar val={null} /&gt;, scratch); expect(scratch.childNodes).to.have.length(1); expect(scratch.firstChild).to.have.property('nodeName', 'X-BAR'); expect(scratch.firstChild.attributes.length).to.equal(0); expect(scratch.firstChild.val).to.equal(null); }); </pre>"}
{"pred": "Why did you change this?", "gold": "It is the maximum value that the configured emulator can support."}
{"pred": "Shouldn't this be `if not session_manager.exists`?", "gold": "Here, I've been giving priority to the session saved by the user. This means, that if the user quits with `:wq`, then restarts `qutebrowser`, and then `qutebrowser` crashes for some reason, next time `qutebrowser` is restarted, the session saved lastly with `wq` will be restored, and not the one autosaved. What do you think?"}
{"pred": "Shouldn't this be `AccountData`?", "gold": "this line got me confused for few seconds, as the `AccountData` is both the name of the data structure as well as the function name. I think that `GetAccountData` is a better choice for a name. ( note that the same applies for the previous `BalanceRecord` function name )"}
{"pred": "Why is this lock no longer needed?", "gold": "I think this mutex is only used here. Remove it."}
{"pred": "Why do we need this?", "gold": "so this is now init to 1?"}
{"pred": "Shouldn't this be `spawn2.version = version`?", "gold": "For future note; not prefixing the table in a join can throw an error in the query parser depending on how the query is built I am making an assumption this was tested"}
{"pred": "Why do we need a fake cluster UUID? Can't we just use the UUID?", "gold": "Had to bring this up, will abandon this style of testing based on Joel's work soon."}
{"pred": "`nowarn` -> `nowait`", "gold": "What does our source validation complain about here? Many of the logok/nowarn places look fine to me at a glance but I'm no match for the logging policeman ;-)"}
{"pred": "Why do we need this rule?", "gold": "It feels like this dependency should not be here. Some deep internal openvpn package (middleware) knows about one of possible stats consumers. Maybe as an alternative, statistics and state callbacks can be extracted as separate interfaces in top openvpn package and reused by both sides"}
{"pred": "Why are we removing the codec here?", "gold": "Can you please remove `codec` from the parameters too? I think it's unused now."}
{"pred": "Why is this needed?", "gold": "mocks needed this change so that it returns the \"right\" thing"}
{"pred": "`controlModifier` -> `shiftModifier`", "gold": "I don't think the getters for this are needed, but looks good other than that"}
{"pred": "Shouldn't this be video.clip.wistia_id?", "gold": ":+1: to inlining this."}
{"pred": "Line is too long. [81/80]", "gold": "Does psalm support the same logic internally for object-like arrays? Just want to be certain I can indicate this is a contextual return item `crypto?:mixed`."}
{"pred": "Why was this removed?", "gold": "I can't recall if there was a fix specific to this in the past?"}
{"pred": "Why is this a pointer?", "gold": "Not sure what the todo is here? Is it to support some kind of defaulting based off of that?"}
{"pred": ">FlushOnConditionOnly [](start = 24, length = 17) I think this should be `FlushOnCondition`", "gold": "Not sure about this name. I think \"explicit\" is also a bit difficult here (I think it should be implicit then) Proposal: FlushOnEvents. Or, It would be cool if we could split into 2 options, FlushOnShutdown and FlushOnReload, but I expect that's far more difficult to implement?"}
{"pred": "Why is this needed?", "gold": "I don't think that works - you can't mark a fixture."}
{"pred": "Should this be `Bolt::Util.windows? ? '/etc/puppetlabs/bolt/bolt.yaml' : '/etc/puppetlabs/bolt/bolt.yaml'`?", "gold": "We should not include this path."}
{"pred": "Why do we need the `\\t` here?", "gold": "Add newline at end of file"}
{"pred": "Why is this -1 and not 1?", "gold": "This should be done when updating to the next release (2.5). You currently only perform the upgrade when users go from 1.4 to 1.5, so it will lead to crashes for existing users."}
{"pred": "Why do we need this annotation?", "gold": "suggest hive.openshift.io/cluster-machine-management or something to make it more obvious what it is."}
{"pred": "Why is this needed?", "gold": "We explicitly don't want to do that. This was a complaint from users before."}
{"pred": "This should be `int[] getExcludeCodes()`.", "gold": "Hello, The PHPDoc is `string[]` not `int[]`"}
{"pred": "`enterNS` is unused (from `structcheck`)", "gold": "Same issues with parameters order in `ipset_server.go`"}
{"pred": "rename to SystemNamespaceRetentionDays", "gold": "Wow, did it literally mean the retention days is a huge number?"}
{"pred": "Shouldn't this be `--bfbs-filenames --project-root`?", "gold": "you probably didn't intend to touch those files in `scripts/`"}
{"pred": "`tpfp_func` -> `tpfp_func`", "gold": "Similar to `collate_fn`, we may rename it to `tpfp_fn`."}
{"pred": "Please remove this empty line.", "gold": "Awesome! We may also use negative rule `never` to fix new lines after `return`: `{ blankLine: \"never\", prev: \"return\", next: \"*\" }`"}
{"pred": "Why do we need this?", "gold": "Why can't this be a function on the `Config` interface like all the others?"}
{"pred": "Shouldn't this be `if (feed.getTitle() != null)`?", "gold": "If the feed is null, the menu items should still be setup. Just the feed title can be left out. That prevents possible flickering when menu items are displayed/hidden for some feeds."}
{"pred": "nit: `allowIncompatibleChanges` -> `allowConflicts`", "gold": "I'm not sure that this should call `allowIncompatibleChanges()` because adding a required column when there are no existing values will break reading the new column in any table with data in it. The only time it is safe to add a required column is if there is no data in the table. What about throwing an exception here instead? I agree that the column should not be optional if NOT NULL was specified. Another alternative is to check whether the table has data and allow the incompatible change if it doesn't have any rows."}
{"pred": "Shouldn't this be `Lang::get('backend::lang.dashboard.status.widget_title')`?", "gold": "Early translation , should be logic-less"}
{"pred": "Why do we need this?", "gold": "I don't understand why these functions return a request/response, respectively. In all implementations we actually _modify_ the request/response given as a parameter. Do you envisage situations where we'd want to construct completely fresh request/response objects? Even if we do, it's not something needed atm, so I'd favour in keeping the API minimal. Also, the fact that these functions _may_ mutate the request/response should be noted."}
{"pred": "Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "Wasn't there a subsequent reason why we had to keep the `/p/project_graph` route? Outside references or is the proposed solution to the original proposal we us `/p/g` as the `compares#project_graph` route?"}
{"pred": "nit: space after comma", "gold": "Any suggestions on how I would even _approach_ writing tests for arbitrary values...."}
{"pred": "Why did you change these to private?", "gold": "Scope declarations for class constants was not added until 7.1, this will not be accepted."}
{"pred": "Why do we need to check if it is not empty?", "gold": "The assertion here is that find should never return end() because this is the only mechanism that reaps items from the activeClientMap. If it == end something went horribly wrong."}
{"pred": "nit: `Key returns the document key, or nil if the document doesn't have one.`", "gold": "The `unless the collection ...` part reads a little bit hard, maybe separate into its own sentence and explain what it means by `cannot generate a fresh key`?"}
{"pred": "Should this be `Unimplemented ErrorCode = 8`?", "gold": "Doesn't `gcerr_string.go` need to be updated for this?"}
{"pred": "nit: `stringToRunes` -> `stringToBytes`", "gold": "Both cases allowed by the Go spec are now supported, so it's a bug in the compiler if we get here. You can replace the `todo:` error with a panic. (Note: getting here would be a bug because when we get to SSA level the code has long been type checked and has already been verified as being valid Go)."}
{"pred": "Please remove this line.", "gold": "You can simply do `if tab.history_prepared:` here as empty lists are falsey."}
{"pred": "nit: remove empty line", "gold": "Remove this whitespace"}
{"pred": "`show_img` is not used?", "gold": "`show_img` is not normalized while `one_img` is normalized. And line 139 pass `show_img` for pytorch2onnx function. Is this expected behavior?"}
{"pred": "I think this should be `Math.min(-30, Math.max(30, inputOffset))`", "gold": "Why is this bounded between -30 and 30?"}
{"pred": "Shouldn't this be nvcc?", "gold": "I think even you can exclude to run it on nvcc"}
{"pred": "Shouldn't this be `Capacity.String()`?", "gold": "G104: Errors unhandled. (from `gosec`)"}
{"pred": "nit: `raise Exception(\", \".join([\"fail to run task {0} reason: {1}\".format(failure['arn'], failure['reason']) for failure in response['failures']]))`", "gold": "will `failure` always include `arn` and `reason` in its dictionary? If so, :+1:"}
{"pred": "Why do we need to pass `action` to `Bolt::Result`?", "gold": "Should this be optional, or default to 'action' as well?"}
{"pred": "nit: remove empty line.", "gold": "how about formating this import?"}
{"pred": "This should be `eventHandler.lastReviewMoveDueToFollowing = isCaret`", "gold": "Comma police. :) Also, the docstring needs updating."}
{"pred": "Why do we need this?", "gold": "Implement an in-memory implementation of this in the fake driver."}
{"pred": "Layout/TrailingBlankLines: Final newline missing.", "gold": "Same question as the other view spec regarding not actually saving records."}
{"pred": "Nit: `ex` => `ex`", "gold": "Rethrow for `MustBeRethrown()`-exceptions?"}
{"pred": "Why do we need to check if cuda is available?", "gold": "May clean the unnecessary modification."}
{"pred": "Shouldn't this be `--with-flux-security`?", "gold": "Should this line set the value to `x` since that is checked below?"}
{"pred": "nit: \"without file stats\" -> \"without file stats\"", "gold": "I don't particularly love the terminology here. Why not simply add `copy(boolean stats)` or a copy with an enum to indicate what portions of the datafile to include? At some point we may want just some of the values (e.g. CBO may want counts, but not lower/upper bounds). Just a thought."}
{"pred": "Why not use `StringUtils.isEmpty`?", "gold": "you could probably remove keyValue and just compare idx vs ann.length (ex I think the goal here is to ensure it works with a value like `foo=`"}
{"pred": "Shouldn't this be `item.recording_start`?", "gold": "we do this to differentiate between the multiple cc files for when the recording is stopped / restarted multiple times within a single meeting"}
{"pred": "Why did you remove this?", "gold": "You've deleted this code but not added it anywhere else. Should this be used as my proposed example in the .ini file? Do we need a mechanism for configuring a global fallback string independent of the numeric codes?"}
{"pred": "Why do we need these imports?", "gold": "nit: strip away those imports? seems not used in the new code."}
{"pred": "Please remove this empty line.", "gold": "redundant whitespace :octocat:"}
{"pred": "nit: `self.assertIsInstance(api_response, dict)`", "gold": "I don't believe that the `assertDictEqual` call can pass without `api_response` being a `dict`, so this second check isn't needed!"}
{"pred": "Shouldn't this be `ret->len = h2o_hpack_decode_huffman`?", "gold": "Fuzzer did not like this change. Looks like I misunderstood how the pool works... if allocated from a pool we should never free it manually, right? I think I'll need to drop this patch."}
{"pred": "Why do we need this abstract class?", "gold": "Wouldn't it make sense to already have title, owner etc in this class?"}
{"pred": "`@faker.version 1.8.5`", "gold": "New generators should have version `next`"}
{"pred": "Shouldn't this be `--metrics-protocol`?", "gold": "Wrap these two lines inside an `if (node.isMetricsEnabled() || metricsConfiguration.isPushEnabled()) { ... }`"}
{"pred": "why this change?", "gold": "if end_level == -1 or end_level == (self.num_ins - 1): for end_level is the Index of the end input backbone level."}
{"pred": "Should this be `Path.Length / 2 + 1`?", "gold": "No CLR overhead?"}
{"pred": "nit: `fmt.Fprintf(w, \"bad request: %+v\", r)`", "gold": "Consider faking the TestClient's GetProject/GetZone/GetMachine methods."}
{"pred": "\"must use RetainPeer to obtain peer instances and return those peers to the outbound when it calls Choose.\"", "gold": "Returning a private type as part of the public API? Isn't this impossible for users to implement?"}
{"pred": "Why did you change this?", "gold": "prefer common_properties::_canonicalRankingNumber if possible, should be quicker in general."}
{"pred": "This should be `loss_normalizer_momentum=0.9`.", "gold": "The meaning of `loss_normalizer` and `loss_normalizer_momentum` should be reflected in docstring."}
{"pred": "Shouldn't this be `IOCTL_NONBLOCK`?", "gold": "Call to `cloexec_pipe` (or an equivalent function) is missing. I presume that this is the reason why you are seeing timeout errors."}
{"pred": "Please don't use wildcard imports.", "gold": "There are no changes in this file. Please reset."}
{"pred": "typo: for values above the mean, this is the probability of getting samples > x and for values below the mean, the probability of getting samples < x.", "gold": "Should we rename this to tailProbability?"}
{"pred": "Is this TODO still relevant?", "gold": "Add the issue number too i#4400"}
{"pred": "Why this change?", "gold": "Why make this modifiable?"}
{"pred": "Erc721Binary = \"Erc721Binary\"", "gold": "Why this file is changed?"}
{"pred": "Why do we need this?", "gold": "I'm not sure that we need this"}
{"pred": "`dependencyVersion = package.Value[\"version\"] as string;`", "gold": "Is this going to cause issues in any other places were someone forgets the version? Should we consider also checking for type=project?"}
{"pred": "Nit: `GetSecretFromASM` -> `GetSecret`", "gold": "Does this have retries? Is there a possibility that customer would hit throttle errors here?"}
{"pred": "Shouldn't this be `PLATFORM_IS_FREEBSD`?", "gold": "i noted that we are inconsistent with when we indent includes (see atomics.h which is rather different) and for example cpu.c which is also different. we seem to have 3 styles."}
{"pred": "This should be `fs.removeSync`", "gold": "Deleting the files before starting the audit helps avoid stale results if the new file is not created."}
{"pred": "I don't think this is the right place to do this. CreateStoragePool should be responsible for acquiring the lease.", "gold": "Remove this blank line"}
{"pred": "I don't think this is used.", "gold": "This is... quite unconventional (use a map entry as a key). I would suggest making your own data class for the key."}
{"pred": "line too long (81 > 79 characters)", "gold": "why are these colors needed to be specified here? when are they used?"}
{"pred": "nit: `Cannot manage snapshots in a metadata table`", "gold": "Nit: no need to change this method."}
{"pred": "Why this change?", "gold": "Why a blank line?"}
{"pred": "Why remove the `.html_safe`?", "gold": "Why remove the `.html_safe` here? Should we use `sanitize` or `raw` instead? This info comes off of the org edit page and is entered by users."}
{"pred": "`attach_case` is not used.", "gold": "I think we need some docs about how to set this parameter correctly. Are we OK with changing the public API like this? We probably at least want to make a change notice to the release doc."}
{"pred": "nit: can we call this `ProtocolFragmentationReceived`?", "gold": "When we undo this for 1.3, do we not need to leave these three entries intact to avoid renumbering of the subsequent constants? If so perhaps the changes to this file should be pulled into a separate initial commit so we can just `git revert` the remainder..."}
{"pred": "Why do we need this check?", "gold": "This is never set anywhere in the `cli/gen-api` folder. Should it be?"}
{"pred": "`corev1` should be `corev1.SchemeGroupVersion.WithKind(\"Pod\")`", "gold": "All the changes in this commit are mechanical. Produced by the script in the previous commit."}
{"pred": "Line is too long. [81/80]", "gold": "What's the difference between these 2 versions?"}
{"pred": "Why did you change this?", "gold": "@red2k18 Are we sure its correct to only have 1 now?"}
{"pred": "Shouldn't this be `_unspecifiedOrder`?", "gold": "@greglandrum interesting, is this related to #3307 by any chance?"}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.", "gold": "Minor: how about moving the trailing `if` to an `elsif` above?"}
{"pred": "Shouldn't this be `NULL` instead of -1?", "gold": "That's only executed when users switch from 2.2 to 2.3. Please create a new block with code `2050000` for the next release :) Please also adapt the version number in PodDbAdapter"}
{"pred": "Why do we need to do the lookup now?", "gold": "Safe to reference c.srv without capturing it first under a client lock?"}
{"pred": "Why do we need this file?", "gold": "@vincepri blame tells me this was you, any objections to the change?"}
{"pred": "Why do we need to wait here?", "gold": "@abhinav here is where i need to be able to block/wait until the server is started"}
{"pred": "`@return the name of the ...`", "gold": "It seems to me as an unrelated change. Could you please revert it?"}
{"pred": "Why do we need this interface?", "gold": "~Why are putting all these APIs in their own ~packages~ files? So many more ~directories~ files, to what end? Why not just have them all be a part of the same API file and all live alongside each other so you can easily see them?~ Edit: nevermind, probably works best in separate files."}
{"pred": "`@return All extended types that have been explicitly added.`", "gold": "This likely needs to be double checked -- I recall being convinced at the time of writing this, but now I am less sure"}
{"pred": "Why did you remove the `Exact Match` here?", "gold": "For a followup - it is better to use acceptlist/denylist. I realize this is a historical artifact of our codebase."}
{"pred": "why do we need these imports?", "gold": "Looks like glassfish went a bit nuts doing a refactor"}
{"pred": "You can use `axe.commons.dom.visuallyContains` here.", "gold": "Couldn't you use position:absolute or float to move inline elements outside their parent? Through clipping an child element can also be outside it's parent. There are probably some other ways to do it too. So I'm not sure the assumption you're making here is right."}
{"pred": "Why not use `DateTimeUtils.toMillis`?", "gold": "This could be copied into iceberg code to avoid the spark internal dep? We could use a version check to adjust the method used if needed."}
{"pred": "Shouldn't this be `p->pid`?", "gold": "This one had me stumped!"}
{"pred": "Why did you remove the `id`?", "gold": "Note that this name differs from the name used as default (and thus used now that you removed this). That should be fine, but wanted to flag it."}
{"pred": "`createAutocompleteQueryBuilder` -> `createAutocompleteQueryBuilder`", "gold": "Why public and not protected?"}
{"pred": "`current_user.can_super_admin? && !current_tab.present?`", "gold": "We definitely need to address this duplication after MVP"}
{"pred": "I don't think we need the `htmlFor` here.", "gold": "This will always generate a label for the first keyword, which means this will be a label linked to no element after the first keyword is entered. This label should be generated inside the `values.map` next to the `<TextField><Input /></TextField>` it is for, because the ID changes based on the index. Also, we have a `VisuallyHidden` component I'd prefer we use over the CSS class. Building as many things out of components is more React-y. Admittedly it's sort of a preference, but it's why we have the `VisuallyHidden` component. So let's use that instead  "}
{"pred": "Shouldn't this be `roots_xcursor_theme_create(\"default\")`?", "gold": "Does it make sense for this to be fatal? Could there be an embedded application that does not have xcursor themes at all? For instance, compositors without a pointer (like a touch-screen kiosk) will never show a cursor. I think I'm ok with this assumption since it simplifies the code and rootston is assumed to have desktop features, but we should always make sure xcursor is not required to be used in the library."}
{"pred": "Shouldn't this be called `TopicsFilter`?", "gold": "would rename to TopicsFilter and original one to SequenceTopicsFilter"}
{"pred": "`key == self.keys[0]` is equivalent to `key == self.keys[0]`.", "gold": "Is the idea that ``self.keys[0]`` here normally matches ``init_key``?"}
{"pred": "Shouldn't this be `if hwnd in (winUser.getDesktopWindow(), winUser.getDesktopWindow())`?", "gold": "Can this be clarified to \"Exit early when hwnd is the windows desktop handle, UiaHasServerSideProvider would return false anyway.\" ?"}
{"pred": "Why do we need to change this?", "gold": "I'm okay with leaving VCPULimit and MemoryLimit on our internal model"}
{"pred": "nit: `TierIndex` is unused (from `deadcode`)", "gold": "5 or 10?"}
{"pred": "Why do we need to suppress telemetry here?", "gold": "Should we explain more here?"}
{"pred": "`CreateOrGetMachine` -> `CreateOrGetMachine`", "gold": "I've been struggling with this on my cloud-init integration work as well. In addition to info that is currently stored in the cluster providerstatus, we also need some of the info that is available within the base cluster object as well. I think it would make sense to unify the machine and cluster info needed into a consolidated struct rather than continuing to add additional disparate structs."}
{"pred": "Why do we need to deprecate this class?", "gold": "Why not `@InternalApi`?"}
{"pred": "why is this needed?", "gold": "FYI: `GenericMeta` is renamed to `_GenericAlias` in Python3.7."}
{"pred": "Should this be `template.latest? || phase.sections.all?(&:modifiable?)`?", "gold": "So this hides the link to re-order sections on Historic Templates? Good catch, Just checked on DMPonline and hitting that throws a 404"}
{"pred": "I think this should be `reset_reporter`", "gold": "Is `Reporter#reset` no longer used? If so, can we remove it?"}
{"pred": "Should this be `writeUInt32Scalar`?", "gold": "same concern here about difference in the write scalar implementation. I am not sure if this could present a consensus problem or not"}
{"pred": "Why do we need this interface?", "gold": "Can we remove this file?"}
{"pred": "I think this should be `sErr.ErrStatus.Details.Causes[0].Reason`", "gold": "Why listing only first error reason (`ErrStatus.Details.Causes[0].Message`)?"}
{"pred": "I think this should be false by default.", "gold": "Now that this is true, do we have to ignore it with V1 Tables?"}
{"pred": "I don't think you need the `hasOwnProperty` check here.", "gold": "prefer if (condition) { stuff; } to if !(condition) { continue; } stuff"}
{"pred": "I think this should be `<%= raw(@description) %>`", "gold": "Should this section not be converted to a secondary action list?"}
{"pred": "I don't think you need the `default=False` here.", "gold": "This askes a blocking question, which means a local Qt eventloop will be running. While this is unavoidable sometimes, the async functions should be used whenever possible (`message.confirm_async` in this case). This means: - Split everything after this question in a separate private method (you can probably just call it `_tab_close`) - If the tab is not pinned, just call `_tab_close` directly - If it is pinned, call `message.confirm_async` with `yes_action=self._tab_close`"}
{"pred": "Why was this removed?", "gold": "Can we deuglify this?"}
{"pred": "`lift` -> `lift`", "gold": "@skestle Just recognized that the `::apply` is not necessary. Does it compile if you leave it away? Could you please check that, I'm on vacation and have no IDE at hand... Thx!"}
{"pred": "typo: sche -> schema", "gold": "Looks like this is an unnecessary change."}
{"pred": "Why did you change this?", "gold": "This one won't change as the resource is not included in the project getting tested with the composite root."}
{"pred": "`__u8 nat_lvl1_drop = 0;`", "gold": "We have `stdbool` imported, might as well use that for clarity."}
{"pred": "Why do we need this change?", "gold": "Why do we not also have integration tests for postgres?"}
{"pred": "Why are we skipping this test?", "gold": "I think its safe to remove this if we're removing `reIndex` outright. The description shows us that the test is \"An example showing how to force a reindex of a collection\""}
{"pred": "Shouldn't this be `EINVAL`?", "gold": "Can you make this hexadecimal to match the other constants?"}
{"pred": "Why was this removed?", "gold": "Can this get moved to `Bolt::Project#validate`?"}
{"pred": "nit: `left = left.concat(right)`?", "gold": "I'm pretty sure it doesn't harm, but don't we have a second pass here with the reverse() operation?"}
{"pred": "Should this be called `takesHeapSnapshot`?", "gold": "This is not a standard capability and should be hidden behind a vendor prefix: -chromium-takesHeapSnapshot"}
{"pred": "Why do we need the `&alg` here?", "gold": "This shouldn't work with pointers -- prefer references unless you can meaningfully pass `nullptr`. The address-of operator here is clunky at best."}
{"pred": "I don't think we need this anymore.", "gold": "Sidenote: some day we'll drop the avr-gcc and avr-libc dependencies so that this case becomes supported."}
{"pred": "Why this change?", "gold": "do we still need this method?"}
{"pred": "Please remove this code.", "gold": "It's better to not leave this old code here... it just clutters things up and makes reading the code more confusing. We can always recover the old code from the repository if needed."}
{"pred": "Why is this import needed?", "gold": "Again, you don't want to depend on glassfish."}
{"pred": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "gold": "This shouldn't be required. What was going on here?"}
{"pred": "This should be `tls.VersionTLS13`", "gold": "Why add this here?"}
{"pred": "nit: `IsXNullableReturnType` -> `IsXNullableReturnType`", "gold": "nullability does not apply to headers type (that is always an object)"}
{"pred": "Shouldn't this be `size`?", "gold": "Do we also need to add the iova, or is that done somewhere else?"}
{"pred": "Why do we need this interface?", "gold": "why change this?"}
{"pred": "Shouldn't this be `(time_t *)`?", "gold": "If there is no guarantee that tv_sec is of type `time_t`, IMO you should copy the value instead of enforcing a pointer typecast."}
{"pred": "nit: `a valid Dockerfile path is required`", "gold": "Should we validate the suffix before going to the filesystem?"}
{"pred": "Why do we need this?", "gold": "It feels like we should be working to reduce/eliminate our global vars. I'm not sure it adds much here. Any objection to just removing it?"}
{"pred": "I think this should be `report_frequency` to match the column name.", "gold": "did you consider using AR enums for this? would give us all the boolean methods (`weekly?` etc) for free"}
{"pred": "Shouldn't this be `if not filename:`?", "gold": "This may change \"\" into None. Better return filename."}
{"pred": "nit: `SkipDevices allows to skip configuring device permissions`", "gold": ":+1: That does resolve my security concerns about this feature."}
{"pred": "Why do we need this function?", "gold": "Could you add a docstring?"}
{"pred": "Why is this change needed?", "gold": "Shouldn't this still be `Region()`?"}
{"pred": "Does this need to be initialized to `None`?", "gold": "This shouldn't be here but `self.connected = None` in `__init__` instead, otherwise that'd be an attribute which is set this way in _every_ instance of that class (i.e. a class rather than an instance variable). I'd also say let's make it \"private\" (i.e. `_connected`) and please add a quick note about what it is to the docstring of the class."}
{"pred": "`create_no_window` -> `create_no_window`", "gold": "This would be better served as a method/property that is set when people don't want to a window."}
{"pred": "Shouldn't this be `context.getStreamingMethods()`?", "gold": "I was dubious about putting getNonStreamingMethods in the context, but after some thought, I have decided to embrace the approach. In this particular case, the loop is supposed to be over page streaming methods. So, could you add a getPageStreamingMethods() method in the context, use it here, and remove the isPageStreaming() check below?"}
{"pred": "I think this should be `tuple(version) >= (3, 2)`", "gold": "LooseVersion class can help here"}
{"pred": "Why do we need this change?", "gold": "`const Dims zeros(shape.size(), 0);`"}
{"pred": "`count.nil? ? true : count.to_i`", "gold": "Would be good for this not to say `10` anymore..."}
{"pred": "Should this be `errorObj` instead of `error`?", "gold": "See above, we don't need to pass the module name here."}
{"pred": "Why do we need this?", "gold": "This is random line :-) overridden String type by custom trimmed - please change that commit message to something like \"introduced custom String type with automatic trimming\""}
{"pred": "Shouldn't this be `if (typeof featureToken !== 'string') {`?", "gold": "My personal taste: \"depreciated\" -> \"deprecated\""}
{"pred": "Shouldn't this be `destinationClusterIP`?", "gold": "this includes the port as well right? should the name be `destinationServicePortName`?"}
{"pred": "`retry` and `wait_fixed` are unused imports.", "gold": "We can import all of them in one line."}
{"pred": "`Objects.requireNonNull(elements, \"elements is null\");`", "gold": "this was wrong, the rest were just inconsistent :)"}
{"pred": "`proposals-completed` -> `proposals-completed`", "gold": "I gave them the EXACT SAME NAMES in my branch :)"}
{"pred": "Should this be `os.MkdirAll`?", "gold": "What would you think stat'ing the directory first before doing the log+mkdirall and only proceeding if the directory does not exist? The logging might be less confusing (I'd be wondering why it was logging that it was creating the directory when I knew it already existed)."}
{"pred": "Shouldn't this be `InternalContext`?", "gold": "Sorry about the confusion, I'm trying to address that in the PR follow-up. If we ever have `Span` objects, then accessing their properties is going to be safe. The only question remaining is \"What is the runtime type for Scope.Span?\" and we just have to account for it when it is `Datadog.Trace.Span` and when it is not"}
{"pred": "Why do we need these imports?", "gold": "I was using this imports for writing the results to file to more easily check that it was valid JSON. You can probably remove these `java.io` imports."}
{"pred": "Why do we need this?", "gold": "You should probably include a `json:...` annotation here."}
{"pred": "I think this should be `ecsMaxRuntimeIDLength`", "gold": "can container ID > 255 chars? why are we doing this check?"}
{"pred": "Typo: \"from being present\" -> \"from being present\"", "gold": "*\"This **field field** prohibits :other from being present.\"*, **field** word repeated is right?"}
{"pred": "nit: `npl` -> `nplexporter`", "gold": "nit: no need to add an alias for this case."}
{"pred": "Why do we need this?", "gold": "Or `QUIC_LOG_LEVEL`. Which one do you prefer?"}
{"pred": "Shouldn't this be `*virtualDiscDesc.CapacityAllocationUnits == \"\"`?", "gold": "Minor: you can set it to byte here and only set it to *virtualDiscDesc.CapacityAllocationUnits if that's not nil/\"\". Saves two lines"}
{"pred": "I don't think you need the copy here, you can just use `MINIMALIST_BUCKET` directly", "gold": "While reading this I found that it makes actually little sense for \"beers\" to have a \"fingerprint\". We might want to do another pass on the examples here to use something that actually makes more sense to the reader. This could be done in another issue."}
{"pred": "Why is this change needed?", "gold": "Thank you! That's better, especially the conversion test should not test the mkString method :)"}
{"pred": "Shouldn't this be `location.right` and `location.bottom`?", "gold": "You're basically converting client to screen coordinates here, doing it manually. Is there a specific reason why you aren't using clientToScreen here? Does it fail?"}
{"pred": "Shouldn't this be `>=` instead of `>=`?", "gold": "This needs to be done for server-side copies too, earlier in the function."}
{"pred": "I'm not sure if this is the right place to put this. It seems like it should be in the oidc package.", "gold": "Do we want to add in `profile` here as well so we request access to the end user's default profile claims like name?"}
{"pred": "Extra empty line detected at module body beginning.", "gold": "I am not sure what the difference between approving and full approving is..."}
{"pred": "Why did you change this?", "gold": "Please back out the import changes in files you haven't touched. I think these happen if you run goimports without having the vendor directory populated"}
{"pred": "why do we need this change?", "gold": "Many tests in this class seem to have just been fortunate that `SolrIndexSearcher` ignored `fl` and retrieved all fields when not using lazy loading."}
{"pred": "Why is this needed?", "gold": "Is this really needed?"}
{"pred": "Why do we need to remove the method?", "gold": "Is this necessary with line 38?"}
{"pred": "I think this should be `pytest>=3.2`", "gold": "DO we want to have >= here? Or =="}
{"pred": "Should this be CoreTags.ProfiledEnv?", "gold": "Can you also add this `\"version\"` tag to the CoreTags? Now that we're targeting the service/env/version trio"}
{"pred": "Please use `assertInstanceOf` instead.", "gold": "This entry will be incompatible with the currently implemented formatting rules. Maximum 120 characters per line."}
{"pred": "Should this be `@options[:preserve_host_output] == true`?", "gold": "Let's call this color_host_output or some such - preserve_host_output makes it sound like you won't get any output without this being set."}
{"pred": "This should be `axe.utils.getNodeAttributes(node, 'role')`", "gold": "suggestion: if we perhaps make `attributes` a getter in `virtualNode`, it does look seamless to access the property, same as what we have done for `isFocusable` or `tabbableElements`. `node.attributes` can become `virtualNode.attributes`"}
{"pred": "`lastPlaybackSpeed` -> `lastPlaybackSpeed`", "gold": "I think a float value fits better."}
{"pred": "Can we remove this line?", "gold": "This should be (POST,DELETE) `/pss/subscribe/{topic}` for subscriptions and there should be `/pss/send/{topic}` for sending."}
{"pred": "Why do we need this?", "gold": "Closing over the closure arguments is a neat trick :+1: Love it :100:"}
{"pred": "Why did you change this?", "gold": "Does this need to be a block or can it be an expression?"}
{"pred": "Shouldn't this be `allowedPostRequest(req, false)`?", "gold": "req.getQueryString() != null is not necessary since same check is already done in allowedPostRequest"}
{"pred": "nit: `isRestOnlyTransport` -> `isRestOnlyTransport`", "gold": "As per go/actools-regapic-design, in the final product, generated GAPICs must be able to support multiple transports if supported by the API. For Java, we'll support this in the microgenerator; the monolith generates single-transport GAPICs. For PHP, the situation is likely similar, though on a longer timescale. All this to say that I would appreciate structuring the code in terms of \"supports REST\" rather than \"REST only\", but only where this doesn't require undue work. For everything else, please add a TODO to the effect of \"we're generating single-transport GAPICs for now, though in the fullness of time we'll generate multi-transport GAPICs.\""}
{"pred": "'throttle' => '\u0644\u0627\u06af \u0627\u0650\u0646 \u06a9\u0631\u0646\u06d2 \u06a9\u06cc \u0628\u06c1\u062a \u0632\u06cc\u0627\u062f\u06c1 \u0633\u06cc\u06a9\u0646\u0688 \u0645\u06cc\u06ba \u062f\u0648\u0628\u0627\u0631\u06c1 \u06a9\u0686\u06be \u0633\u06cc\u06a9\u0646\u0688\u0632 \u0645\u06cc\u06ba \u062f\u0648\u0628\u0627\u0631\u06c1 \u06a9", "gold": "here is `:seconds` missing again"}
{"pred": "Metrics/CyclomaticComplexity: Cyclomatic complexity for stub_mail_method is too high. [8/6]", "gold": "Changed this helper to also get class name."}
{"pred": "Why do we need this?", "gold": "I think there's another spot for this in DefaultCapabilityMatcher"}
{"pred": "Why do we need this?", "gold": "Why the rename from PONY_SCHED_BATCH ? ACTOR_DEFAULT_BATCH is less meaningful to me than SCHED_BATCH."}
{"pred": "Why do we need this?", "gold": "Let's be sure we have an issue that tracks this, filed against testnet."}
{"pred": "nit: space after `(`", "gold": "There should be no space before !Buffer"}
{"pred": "Why do we need this?", "gold": "Same here, we need the default padding for this story."}
{"pred": "`listen_count` doesn't seem to be used.", "gold": "I think this should go away, its noise in the grand scheme of things."}
{"pred": "I don't think we should ignore the error here.", "gold": "Maybe just call `ioutil.WriteFile` with 0 bytes? And Make an error log `log.Error` if any error occurs."}
{"pred": "nit: `this.ieService_ = service;`", "gold": "`this.ieService_` should be initialized to null in the constructor."}
{"pred": "I'm not sure if this is the best way to do this. I think it would be better to add a `ChainToWorkloadDispatch` rule to the `ChainToWorkloadDispatch` action.", "gold": "I just noticed that we use Return here, when we have logically allowed a packet, whereas in the forward chain we use AcceptAction. Do you know why that is?"}
{"pred": "Why did you change the method name?", "gold": "This is public method , we need to deprecated this method first and add new updated method for it."}
{"pred": "Why do we need to set NetAddress here?", "gold": "I think that you don't want to have these workarounds; you want to make sure that the relayTemplates is configured correctly. If not, we need to fix it there."}
{"pred": "This should be `config.getThanosBlockNumber()`", "gold": "This field is not needed."}
{"pred": "Layout/AlignHash: Align the elements of a hash literal if they span more than one line.", "gold": "Put a comma after the last parameter of a multiline method call."}
{"pred": "should not use dot imports", "gold": "move to line 18 below"}
{"pred": "This should be `s3_add_csaes_encrypt_item`", "gold": "Simple Storage **Service**"}
{"pred": "I think it would be better to use `expect(formatter_output).to include(\"root message example\")`", "gold": "Thats odd, I'd actually not expect this output at all..."}
{"pred": "Should this be `1.8.x`?", "gold": "As a side note, I get why this is up here (sort order), but it'd be easier to not forget to update it if it were down next to `1.x` -- would it be acceptable to make that change the next time I make this sort of PR? :smile: :innocent: (don't want to hold this one up since folks are blocked on getting this one in, it's a pretty superficial change, and I probably won't have cycles again for a few days to update the PR with the change :sweat_smile:)"}
{"pred": "Typo, should be `Flexible`", "gold": "this class is permissioning so let's keep \"Onchain\" here"}
{"pred": "Please revert this change.", "gold": "we can be more specific to call out the it is \"AutoRest C# code generator\"?"}
{"pred": "axe.VirtualNode = VirtualNode;", "gold": "Ditto for not adding this to the axe namespace."}
{"pred": "", "gold": "Should we just remove this file? Having it present but empty feels misleading"}
{"pred": "Why do we need this lock?", "gold": "Would it make sense to include an `Untrust` as well? If I were playing around with this on the CLI I wouldn't want to make a change I couldn't undo."}
{"pred": "I'm not sure if this is the best place to put this. I think it should be in the `AbstractSolrBackendFactory`", "gold": "It might be better to call this `$createRecordMethod` since it's not a full PHP callback, just a method name for the plugin manager."}
{"pred": "Please sort imports by length.", "gold": "remove this line"}
{"pred": "Shouldn't this be `MainMenuItem[]`?", "gold": "I've never seen this syntax before, it's still just an array, the difference is that it's an array of MainMenuItems instead of an array of arrays."}
{"pred": "Shouldn't this be `API-MS-Win-Core-Appinit-L1-1`?", "gold": "nit: to match the others: s/private/Private/"}
{"pred": "Why is this public?", "gold": "Maybe just IEnumerable? Not sure myself."}
{"pred": "Why is this change needed?", "gold": "do we need this change?"}
{"pred": "Why do we need to do this?", "gold": "Would want @matthiashanel to have a look since if I recall he had to add the shallowCopy() to fix some bugs during reload. That being said, since I believe the $G account cannot referenced in configurations, this should not be a problem, but Matthias has looked at this in more details in the past."}
{"pred": "Why not just return volInfo.Volume.Status.Reason?", "gold": "The descriptions are incorrect"}
{"pred": "I'm not sure if this is the best way to do this. I think it would be better to use `debuggerAddress.startsWith('ws:')`", "gold": "if we are returning the `ws` here when passing in `se:cdp` we can just return it straight or do we have to make a request to get the `ws` address?"}
{"pred": "I think this should be `replace=False`", "gold": "Please only indent this by four spaces."}
{"pred": "Why did you change this?", "gold": "What's the reason behind these characters?"}
{"pred": "`expect(ApiToken).to receive(:create!).exactly(2).times` is no longer needed.", "gold": "Minor: The name of this specs seems a little off now"}
{"pred": "\"array indexing use the apply method raher than square brackets\"", "gold": "I'd suggest using `ast_error_continue` here to get the `apply` message in the `Info` part of the error report."}
{"pred": "Why do we need this property?", "gold": "If we decide to change the name of the .ini setting, we might also want to review the naming of this property and related code. Maybe a simple `getOptions` or `getSettings` would be more concise than `getTabDetailConfig`. At very least, I don't think we need Tab in the method name since the method belongs to a helper with \"Tabs\" in the name."}
{"pred": "why not just `return msg.GetGroup() == \"user\"`?", "gold": "Use const for \"user\", same as below"}
{"pred": "Shouldn't this be `$event->getUnsubscribed()`?", "gold": "->setUnsubscribed(false) would be better :)"}
{"pred": "Layout/TrailingBlankLines: Final newline missing.", "gold": "I now think singular `Sport` is better, but I will wait for the first round of feedback before updating."}
{"pred": "`self.timestamp = timezone.now()`", "gold": "Don't you need = something ?"}
{"pred": "Shouldn't this be `pool->queueFamilyIndex + 1`?", "gold": "Looks like this could be `const` (I realize it wasn't like that before)?"}
{"pred": "`FAILED_TO_LOAD` -> `FAILED_TO_LOAD_IN_PROGRESS`", "gold": "Maybe just `FAILED`. We can't be sure loading was the thing that failed."}
{"pred": "Why did you change the quotes to single quotes?", "gold": "You have replaced single quotes with double ones, this fails linting and our current coding style. Please fix this, otherwise it's a whopping of 1200 LoC while in reality it should be rather small."}
{"pred": "Should this be `prefQueueAddToFront`?", "gold": "@danieloeh @TomHennen. Some of these files are using spaces, the others use tabs. Is there a project wide preference? I personally like spaces, because they are consistent across editors"}
{"pred": "Layout/EmptyLinesAroundMethodBody: Extra empty line detected at method body beginning.", "gold": "I guess this is ok for backwards-compatibility? Maybe it'd be better to check arity in the helpers? Or just call it out in the release notes, because there are at least a couple projects on github that overrode `initialize`.."}
{"pred": "Why did you remove the loadTriggerManager call?", "gold": "At some point, we would like to get rid of these custom injections as well. Looks Ok for now."}
{"pred": "nit: typo `whereas` -> `where`", "gold": "nit: Not a fan of \"fix\" in the name, but don't have a better suggestion  "}
{"pred": "Shouldn't this be `tab.tab_url(idx).scheme()`?", "gold": "Since we're calling `self.tab_url(idx)` a third time here already, can you please add a `url = self.tab_url(idx)` somewhere above (e.g. after all the `fields[...] = ...` assignments) and change the calls here to `url.host()` etc.?"}
{"pred": "Why are we importing constants here?", "gold": "alphasort this import"}
{"pred": "Use bits/stdc++.h instead of multiple header files.", "gold": "remove this file!"}
{"pred": "I think it would be better to use `filepath.Ext(acc.name)`.", "gold": "You don't need to say `rune(' ')` - `' '` is already a `rune`."}
{"pred": "Why do we need to freeze this?", "gold": "We can't freeze this and then add something to it in the next line. The `freeze` on line 43 is sufficient. If Rubocop flags this we need to exclude it."}
{"pred": "Why do we need this interface?", "gold": "We call it Kind2 and move out of the `javaslang/control` package into the `javaslang`package. Maybe I will later generate Kind1..Kindn but that's another story."}
{"pred": "`db.capacity * (swarm.ChunkSize + 1)`", "gold": "i think it might be nicer to have a message like: `database capacity: %d chunks (%d bytes, %d megabytes)`. counting in bytes is so 90s :)"}
{"pred": "Why do we need this?", "gold": "The '.' in the key names are used to separate namespaces, NOT to separate words. How about azkaban.external_resources.resource_manager? ---- Why is it better than using the full name in the variable name e.g. RESOURCE_MANAGER_LINK ?"}
{"pred": "Why was this removed?", "gold": "This seems to be duplicated with line 19?"}
{"pred": "Shouldn't this be `<wx/locale.h>`?", "gold": "This is wrong. xlocale.h is needed on OSX and maybe elsewhere too. This needs a test in configure to see if xlocale.h and uselocale() are available and an #if test here. Also, the NO_PER_THREAD_LOCALE stuff in configure.ac needs to be updated to include test for uselocale()."}
{"pred": "//snippet-keyword:[AWS SDK for Java v2]", "gold": "AWS Identity and Access Management (IAM)"}
{"pred": "Shouldn't this be `|| ResourceModel.isSupportedVideoMimeType(mime)`?", "gold": "Why did you have multiple function calls here instead of having one long array of supported mimeTypes? In line with your PR here, I think we might eventually see inline videos or inline pdf. It would be great to generalize this a bit."}
{"pred": "Why do we need this?", "gold": "nit: shall we keep alphabetical order?"}
{"pred": "Why do we need this method?", "gold": "We could just move the check for function into `typeForConstruction` to make this a one liner every time we need to do this."}
{"pred": "\"toukyou\" -> \"toukyou\"", "gold": "A correct by unrelated change. We'll slide this one in without another word ;)"}
{"pred": "Shouldn't this be `if (param_.solver_mode())`?", "gold": "I feel that a slightly safer way is to do if (param_.has_device_id()) { Caffe::SetDevice(param_.device_id()); } just in case a user has hard-coded a device id outside the solver and does not specify the device id in the solver param. Currently, if nothing is set, the solver will always use the 0th device, which might not be desired."}
{"pred": "`rawCode(multi(1)\\n  line(2)\\n    block(33)`", "gold": "let's replace this example with something that won't fail in Python. Like \"for+if+print\""}
{"pred": "`if precision is not None and isinstance(value, str)`", "gold": "Please remove the brackets and use `string_type` from `compat.py` module instead of `str` in `isinstance()`."}
{"pred": "Why remove this check?", "gold": "line is 143 characters (from `lll`)"}
{"pred": "nit: `failed to parse record`", "gold": "It should follow a `continue`."}
{"pred": "Should this be `{{ .WebWorkingDir }}`?", "gold": "Should this be DBWorkingDir?"}
{"pred": "Why do we need this change?", "gold": "I think you can remove the whole line."}
{"pred": "This import should be grouped with the other stdlib imports.", "gold": "File is not `goimports`-ed (from `goimports`)"}
{"pred": "I think this should be `RUN_IN_PROGRESS` and `DELETE_IN_PROGRESS`", "gold": "Not a big deal, but what is the value of adding this status condition for a failure to delete a client? It has some value for a dataverse admin, to know that the last attempt to harvest from a certain server resulted in a failure. Is it really useful to know that an attempt to delete a client failed? - should the startup check simply remove the \"delete in progress\" flag quietly instead? After all, seeing how the client is still there makes it somewhat clear that the attempt to get rid of it didn't work out, so they should try again? I may be missing some situation where it could actually be useful - so I'm open to hearing it."}
{"pred": "nit: `MetricsConfig metricsConfig = MetricsConfig.forTable(table, properties);`", "gold": "Can we also update the equality delete branch below?"}
{"pred": "Shouldn't this be `if record.dagster_event.event_specific_data.step_output_handle == step_output_handle`?", "gold": "This doesn't solve the entire problem we talked abut yesterday, right? Because it's possible that the step itself didn't skip, but rather that it chose not to yield the output in question?"}
{"pred": "`from datetime import datetime`", "gold": "I also do not see any usages of this import. Is this a fix for a crash?"}
{"pred": "Why do we need to call updateTaskENIDependencies here?", "gold": "Feels like this needs to be invoked in `PostUnmarshalTask` since that's where most of the task setup happens."}
{"pred": "Why do we need to coalesce here?", "gold": "I wonder what would happen if the granteeName becomes DB__ROOT but the granteeID is not DB__ROOT ID (33333) but something else."}
{"pred": "I don't think this is the right place to do this. I think it should be in `pkg/install.go`.", "gold": "Feel like this should probably come into this tool as a flag rather than it just grabbing an env var internally?"}
{"pred": "`nameOrHandle` -> `windowHandle`?", "gold": "This should only be sent if the driver is speaking to a W3C conformant remote, so we need an if-condition check like we have in the Python bindings."}
{"pred": "Metrics/LineLength: Line is too long. [83/80]", "gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping."}
{"pred": "Please use `assertListEqual` instead.", "gold": "nit: folders are always a numeric ID, projects as given by CAI use project number for ancestry"}
{"pred": "Why do we need to export this error?", "gold": "is this used anywhere?"}
{"pred": "Why was this removed?", "gold": "change pkg_errors to errors. Keep it consistent across all the files."}
{"pred": "I don't think you need the `--review-status` here.", "gold": "I don't see any test cases which would test that fix dates are set properly on review status changes / storage events. For this reason please create some more test cases and also check my scenarios above."}
{"pred": "Why do we need this?", "gold": "This belongs to SwaggerModeler.cs `public override ServiceClient Build()`"}
{"pred": "Shouldn't this be `(number|undefined)[]|string|(string|undefined)`?", "gold": "We could go further and directly give the tips of the `columns` property for someone (like me) who would like to specify some column width and let the others be autosized."}
{"pred": "Shouldn't this be `static_cast<uint32_t>(m_additionalSubpassDependencies.size())`?", "gold": "I think a `std::copy` with `std::back_inserter` will get this done in one call."}
{"pred": "nit: `ErrHOLExperiment` is unused (from `deadcode`)", "gold": "In the future: s/QUIC 36/Version36/ to make grepping easier"}
{"pred": "Why do we need this?", "gold": "This is an example of why I prefer a flexible custom `render()` solution   'on'/'off' may not be the right value for every application. You have to make a lot of decisions even for very simple form fields :("}
{"pred": "Why was this removed?", "gold": "we should also skip the e2e flow aggregator tests if the Flow Exporter feature is disabled."}
{"pred": "I don't think this is the right place to do this. I think it should be in `start_stream_to_path`.", "gold": "We should initialize the observation in the constructor of the Script class - otherwise, we don't have this feature for mitmdump."}
{"pred": "Shouldn't this be `(tuple, None)`?", "gold": "I would remove this line. Otherwise looks fine cc @ueshin"}
{"pred": "`EXPECT_LE (1, ledger_walker.walked_blocks.bucket_count ());`", "gold": "Would it be better to remove that line alltogether if it not directly relevant?"}
{"pred": "I don't think this is true. The kernel-based mitigation was to automatically default to eager floating point register restore. In this mode FPU state is saved and restored for every task/context switch regardless of whether the current process invokes FPU instructions or not.", "gold": "Does \"FPU\" here include XMM/YMM/ZMM SIMD and not just x87 FPU/MMX?"}
{"pred": "Why did you remove the `bytes_to_escaped_str`?", "gold": "I'm not sure if we need to store path as bytes, and then decode/escape it when printing or just store it as a unicode string (as done here.)"}
{"pred": "Why did you change this?", "gold": "Why is this flipped? Looks unrelated and our pattern is `expected == returned`."}
{"pred": "Shouldn't this be `in_person` instead of `online`?", "gold": "Can the `h5` tags be pulled outside of the `if` block?"}
{"pred": "Why do we need this?", "gold": "From @PetrHeinz review: this should be also aliased (`ImageDirectoryStructureCreator`)"}
{"pred": "Why do we need to deepcopy here?", "gold": "Isn't AdditionalTags already of `Tags` type? If not, we should make it so, if it's not a breaking change"}
{"pred": "I don't think we need this change.", "gold": "Add blank line below license header."}
{"pred": "initPWMClocks()", "gold": "Perhaps this could be moved into `InitPWM`? I suspect not initializing the clocks will reduce power consumption."}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.", "gold": "I believe this `order` isn't tested."}
{"pred": "Shouldn't this be `#ifdef WEBSERVER_METRICS`?", "gold": "No idea why it ended up in the code. You can remove the entire line."}
{"pred": "`iFromPeers` is unused (from `deadcode`)", "gold": "\"i\" and \"From\" is a bit duplicate, and should it be singular given the method name? I mean \"fromPeer\" or just \"from\"?"}
{"pred": "Shouldn't this be `oauth2`?", "gold": "Did you verify this isn't going to break any existing test assumptions? We probably shouldn't modify this as we don't know what impact this is having on existing tests. It may invalidate a test that has different expectations of the scopes."}
{"pred": "Shouldn't this be `DecisionDeny`?", "gold": "technically not necessary since reading from a nil dictionary will always return found = false, so this should already be handled"}
{"pred": "I wonder if we should call this `ReclaimQueuePurge` instead of `RelaxedReclaimPurge`", "gold": "This can return bool. RelaxedReclaimPurge(nodeID string) (bool, error)"}
{"pred": "Shouldn't this be `London`?", "gold": "Is there something we can do to make this automatic? At the very least, can we add Shanghai, Cancun, etc. here now so that we don't forget them?"}
{"pred": "Why this change?", "gold": "For boolean values, I'd rather have `argparse.SUPPRESS` as default value. No need to have a `(default: False)` in the help if it's a toggle."}
{"pred": "Why do we need this?", "gold": "The genesis block needs to exist in the store the fetcher pulls from, this is because the fetcher will stop fetching when it finds a block it has seen before and this can sometimes be the genesis block."}
{"pred": "Why did you change this?", "gold": "should we do the same for os.Mkdir(criuOpts.WorkDirectory, 0755)?"}
{"pred": "Should this be `Automatically sends crash reports to Brave`?", "gold": "@bbondy Two messages because the label and description differ very slightly in their wording..."}
{"pred": "The function get_ymm_caller_saved is intended to be used for AVX (no AVX-512). It currently doesn't cover extended AVX-512 registers.", "gold": "\"currently\" implies it should and will be changed: so TODO i#?"}
{"pred": "Why is this needed?", "gold": "This should be `computed('i18n.locale'....`"}
{"pred": "Why was this removed?", "gold": "Wait, does this not work if we do `btl.reload`? That seems odd that we have to have the object in the same state."}
{"pred": "Why was this removed?", "gold": "I seem to recall this being the cause of a bug at some point."}
{"pred": "Shouldn't this be `!hidden`?", "gold": "Can you remove it from the menu instead of setting it hidden? Or are there any other trouble?"}
{"pred": "nit: remove empty line", "gold": "And for \"execution \"."}
{"pred": "I'm not sure if this is the best way to check if a file exists, but I couldn't find a better way.", "gold": "Do agents usually download these from puppetserver when applying a catalog?"}
{"pred": "Shouldn't this be `!= 0`?", "gold": "This should be `return (ev->flags == ASIO_DISPOSABLE);` because `ASIO_DISPOSABLE` has a value of `0` as defined in the enum in `asio.h` and because when `ev->flags` is assigned `ASIO_DISPOSABLE` it is assigned as `ev->flags = ASIO_DISPOSABLE` unsetting any other flags previously assigned."}
{"pred": ">o.PeriodicExportingMetricReaderOptions.ExportIntervalMilliseconds = options.DefaultCollectionPeriodMilliseconds; [](start = 12, length = 96) I think this should be `o.MetricReaderOptions.ExportIntervalMilliseconds`", "gold": "this is not required, right? its the default already..."}
{"pred": "Nit: \"contingent\" -> \"contained\"", "gold": "\"contingent to\" -> \"contingent on\""}
{"pred": "Why do we need this?", "gold": "Does pandas throw an exception like this?"}
{"pred": "`state_data` -> `state_tracker`", "gold": "The point of the exercise has been to eliminate CoreChecks as an object dependency for DescriptorSet et. al."}
{"pred": "Why do we need to make this public?", "gold": "Why do we need to make so much more of this ScanContext public?"}
{"pred": "Why did you remove this?", "gold": "is choice_name not needed anymore?"}
{"pred": "Why do we need this check?", "gold": "Is this the right place to do the validation? If a user adds a bad property or performs some schema update that causes a validation error, that would break all writes to the table. To me, it doesn't seem like we are catching the problem early enough and possibly allowing a typo to break scheduled jobs. What do you think about adding this validation when altering the table? `UpdateProperties` could check whether any properties starting with `write.metadata.metrics` were modified and run this. Similarly, `UpdateSchema` could run this as well, although I think that we should probably modify `UpdateSchema` to simply update the properties for column renames (if that's easily done)."}
{"pred": "Shouldn't this be `(i - 1)`?", "gold": "Why is this necessary? Just in order to get an indexed loop?"}
{"pred": "`zpoolListRequestRejectCounter` is unused (from `structcheck`)", "gold": "instead of using `prometheus.Gauge`, using `promethus.Counter` will be better."}
{"pred": "Extra empty line detected at class body end.", "gold": "maybe we should have a unit test for this and then just test one case in `spec/services/ncr/approval_manager_spec.rb` ?"}
{"pred": "`@token ||= ApiToken.find_by(id: approval.id)`", "gold": "Why is this necessary?"}
{"pred": "Why did you make this public?", "gold": "Minor: If this is going to be public, we should fix the name. `get` doesn't add any value. How about `distributionModeFor` instead?"}
{"pred": "Shouldn't this be `self.f`?", "gold": "This needs a more self-explaining name. Maybe `.is_focused`?"}
{"pred": "nit: space after `,`", "gold": "minor: I'd add a space between `,` & `'paginggroup'`."}
{"pred": "Shouldn't this be `--reupload-fragments`?", "gold": "\"Re-upload all fragments (even if fragment is already in registry)\""}
{"pred": "`PartialResponseStrategy` -> `PartialResponseStrategy`", "gold": "I don't see us ignoring the field. Are we sure Prometheus wouldn't refuse to load the rules?"}
{"pred": "Why do we need to check `mSession.hasDisplay()`?", "gold": "I wonder if we can just check if the mSession is active and then only call `setActive(true)` and `callSurfaceChanged()` if it isn't?"}
{"pred": "I'm not sure if this is the best name for this. Maybe `EXE_MEMORY_LIMIT_UNPACK_ROWS_IN_MB`?", "gold": "A default value of 100 MB maybe too small. I understand that this is good for mixed workloads, but do consider than plans with Unpack, especially when used for insert/upsert are simple. Unpack is always serial and part of master exe. Often there is only one in a query. The cost of having a low value here seems to be that queue length from unpack could be limited by this when we are loading a table with wide rows (even if actual data in row is not wide). We know from performance runs that queue length is critical to upsert load performance. This is a hunch on my part and could be misguided. It will be good to performance test for upsert of table with wide rows, if you think that is worthwhile."}
{"pred": "`CreditBucketPool` and `DebitBucketPool` are unused.", "gold": "think we should pass in ctx, and use ctx.GreenlandHeight inside bucketPool to determine if create or not"}
{"pred": "\"toukyou\" -> \"toukyou\"", "gold": "A correct by unrelated change. We'll slide this one in without another word ;)"}
{"pred": "Why did you remove this?", "gold": "Why remove this?"}
{"pred": "Why did you change this?", "gold": "I still see some usages of not namespaced variants (look for Twig_ in project, about 42 matches). Is it intentional?"}
{"pred": "I think this should be `specs/specs-go`", "gold": "Is this a new dependency? Does this require a dep update?"}
{"pred": "`FloatToStringtStringHex` -> `FloatToStringtStringHex`", "gold": "> opts.generate_hexfloat_in_json && **IsFloat**(type.base_type)"}
{"pred": "Why do we need this?", "gold": "As an alternative to this, we could also create a new method, like `Common() *AppManifest` This way we don't have to add a new method to the interface everytime we add a new field to the `AppManifest`. This is a nit though so it's up to you."}
{"pred": "This should be `harparser>=2.3.0`", "gold": "As long as we have this feature as an inline script, I'm inclined to remove the dependency here. I'd suggest that we just try to import harparser and pytz and throw an error instructing the user to install the dependencies (catch for `ImportError`). In the long term, we probably want to include that in the mitmproxy core, but we first want to introduce a clean extension interface before that's going to happen. As soon as said interface is there, porting the inline script and adding the dependency again should be a breeze."}
{"pred": "Why is this needed?", "gold": "makes it work nice with vscode. all logic is now in `.gulp/*.iced` files"}
{"pred": "Why do we need this change?", "gold": "should a similar change be done for findElement?"}
{"pred": "I think this should be `node.stats.count (nano::stat::type::requests, nano::stat::detail::requests_cached_late_votes) == 3`", "gold": "`+` -> ` + ` I guess. Same below"}
{"pred": "`typeof(opts.fee) !== 'undefined'` -> `opts.fee`", "gold": "`typeof` is not a function - its an operator, and the standard way to use it is as `typeof foo !== ...` (i.e. no parenthesis). Also, I would personally use `opts.fee != null` instead (with a non-strict comparison, which also identifies `undefined` values because `null == undefined`)."}
{"pred": "`next unless windows?`", "gold": "Is there a reason why you're not using Rspec `skip`? It allows to specify message and makes it clearly visible in test results which tests were skipped."}
{"pred": "Why do we need a pointer here?", "gold": "how about \"all matching SyncSets and SelectorSyncSets\""}
{"pred": "Why did you remove HasNoFingerprint?", "gold": "What is the logic behind `ReadVectorSize` reading `CountElement64`, then skipping `T` (in this case `unsigned`)? Naming doesn't cover what's actually happening here. Ideally I'd also take this through a `files` layer, any input as to how?"}
{"pred": "Why is this import needed?", "gold": "This looks like an unused import to me?"}
{"pred": "nit: `transferTaskInfoFromBlob` is unused (from `deadcode`)", "gold": "`RW` means read/write. Why do we have it here, as part of a func name?"}
{"pred": "Why did you change this to `finest`?", "gold": "I'd keep this at `info` level..."}
{"pred": "Shouldn't this be `vec.base == NULL`?", "gold": "I think you missed this."}
{"pred": "This should be `NETCOREAPP2_0`", "gold": "List all of the current TFMs so we know if this gets outdated. E.g. this breaks if we add 2.2."}
{"pred": "Shouldn't this be `vol.GetXattr()`?", "gold": "here, you want to use req.GetXattrOpt() referring to the in line 514 of api.proto. This will be nil if not provided. See the example above on line 801 on this file"}
{"pred": "Shouldn't this be `nextMedia.setPosition(0);`?", "gold": "I think this should be done outside LocalPSMP, but in `getNextInQueue`. The reason is that I want to reduce the dependence of the media players on the preferences and database. Also, it will then probably work on Chromecast."}
{"pred": "Why not just `name.assign(demangled)`?", "gold": "Please remove it or remove all `std::` namespace prefixes."}
{"pred": "Why do we need this file?", "gold": "wait! I'm confused - is that an empty file ?!"}
{"pred": "`actualNode` -> `virtualNode`", "gold": "These should all call `findUpVirtual`."}
{"pred": "`file_dict['mime-type'] = mime`", "gold": "This changes the behavior. Original behavior was \"set if not set\", while new is \"just set\"."}
{"pred": "Shouldn't this be `authorization.substring(0, 7)`?", "gold": "Let's keep using the regular expression to make sure that the token is well-formed. I think the regular expression should be altered instead of doing a substring."}
{"pred": "nit: `this.delegate = delegate == null ? EMPTY : delegate;`", "gold": "All the operations are delegated to this entity, hence the rename. `back` can have too many meanings."}
{"pred": "I think this should be `next if skip_msg.nil?`", "gold": "@trevor-vaughan it looks like the spec failures are caused by the fact that although it was a great idea to put the guard clause here first & get the error case out of the way, the main code path has been erased when I assume it should be just below the guard clause."}
{"pred": "nit: remove empty line", "gold": "Could you delete this constant?"}
{"pred": "Why is this needed?", "gold": "looks like this snuck in from your other change?"}
{"pred": "I don't think we need this anymore.", "gold": "These env vars are not set in any CF environment, on purpose, because we are moving away from using env vars to store role-based information and instead using the database. So in a CF environment, the wrong emails get used (the defaults, rather than what is in the db)."}
{"pred": "I don't think we need the `template` variable here.", "gold": "this partial is used also for previewing a template, did you test if still works?"}
{"pred": "I don't think we need the `color.Emphasize` here.", "gold": "Would it be better to put like `Which Dockerfile would you like to use for %s?`"}
{"pred": "Why did you remove the `http://`?", "gold": "You mistakenly removed `/docs` here, please add it"}
{"pred": "It is important that the returned list is sorted in ascending order.", "gold": "I missed this earlier, but why does this say \"file blocks\"? This should probably be \"recommended split locations\"."}
{"pred": "Why is this a pointer?", "gold": "Please change this to non-exported."}
{"pred": "Why is this assert removed?", "gold": "This is ignoring compatibility: it needs to check the size to ensure this field exists in the client."}
{"pred": "nit: space after `justify`", "gold": "Do all the prepare authors also need to be unique? Or is it enough the we have minimumPrepareMessages. I guess I'm wondering if need a hasDuplicateAuthors check like in the RoundChangeCertificateValidator."}
{"pred": "Why do we need these imports?", "gold": "we had some situations where we merged some promql bits then took them out. i'm not sure what's going on here, but unless your code actually needs promql (probably not?) let's remove this line."}
{"pred": "This should be `\\Shopsys\\ShopBundle\\Model\\Article\\Article`", "gold": "Annotations in this hunk should follow PhpDoc style (above the occurrence, type first)"}
{"pred": "\"is not supported\" -> \"is not supported\"", "gold": "This is an improvement - thanks! Could we rephrase slightly to not use the phrase \"is not supported\" -- instead stating _WHAT_ isn't valid please? e.g. maybe `String.format(\"Unsupported BoundType provided: %s\" type)` or something like that."}
{"pred": "`procfh` is unused (from `structcheck`)", "gold": "nit: `procfd` seems more appropriate now?"}
{"pred": "Why do we need this?", "gold": "Let's not call it django. Maybe `auth_provider_headers`? `auth_headers`?"}
{"pred": "`then jwts` -> `then jwts`", "gold": "Should we mention TLS map here?"}
{"pred": "Remove this empty line", "gold": "remove this empty line pl0x"}
{"pred": "Space missing after comma.", "gold": "Why not have this in the `Dispatcher`? Doesn't seem like NCR-specific functionality."}
{"pred": "Error return value of `s.DB.Save` is not checked (from `errcheck`)", "gold": "If you need only test db, use `memdb.NewTestDB(t)`"}
{"pred": "Why remove the `_keepAlive`?", "gold": "I'm not sure I like setting the IsEmpty property true for upgraded connections since it feels a middle misleading. Maybe we can leave the ForUpgrade class as is and change this condition to `if (!messageBody.IsEmpty && !messageBody.RequestUpgrade)` to make things more explicit."}
{"pred": "Unnecessary spacing detected.<br>Put one space between the method name and the first argument.", "gold": "git checkout since this is unrelated to this PR? (running migrations also changes this for me -- not sure why it keeps going back and forth"}
{"pred": "Why did you change this?", "gold": "Is this change needed?"}
{"pred": "Shouldn't this be `tmpInt > 0`?", "gold": "Isn't the % 128 redundant here?"}
{"pred": "Should this be `loopdev` instead of `ramdisk`?", "gold": "Are you testing that the values are always false? I think you should test for setting values to true or false, right? Who is going to take action with these values?"}
{"pred": "Why do we need this?", "gold": "Please change MPI to CCTOOLS_WITH_MPI"}
{"pred": "define DAL_CHECK_DOMAIN_COND(cond, description) \\", "gold": "Why you can't use function here?"}
{"pred": "Why do we need this file?", "gold": "We should scope this down to only the methods we use."}
{"pred": "Why did you change this?", "gold": "Oh, thanks for catching - I thought I've catched all after changing `mkString(infix, prefix, suffix)` to `mkString(prefix, infix, suffix)`."}
{"pred": "nit: `Approved indicates that a CertificateRequest has been approved by the approver.`", "gold": "Suggestion: `.. the CertificateRequest is ready for signing` - could we perhaps word this differently? I understand that in this case it will be the associated X.509 certificate that can now be signed, so maybe `the certificate is ready for signing` ? (Same with `CertificateRequestReasonDenied`)."}
{"pred": "Shouldn't this be `return null;`?", "gold": "We should use `! isValidAccountID( accountID )` for the `accountID` checks."}
{"pred": "I think this should be `attr_writer :inventory`", "gold": "That alternative does seem better. Did you want to try to do it in this PR? It makes sense to me that the inventory would always be available before creating the executor."}
{"pred": "I think this should be `apt-get install -y puppet-common`", "gold": "Missing the `-y` argument which all other `apt-get install` commands have."}
{"pred": "`pPipeline->graphicsPipelineCI.subpass` should be `PRIu32`", "gold": "So I think we are going to settle on the \"concise and elegant\" `PRI` macros as they are the safest option for now. Even though they make my eyes bleed a little..."}
{"pred": "Why do we need this change?", "gold": "Interesting, was this needed for a test case to pass? I figured if there is no opening brace, there is definitely no placeholder -- we don't even have to check for a closing one."}
{"pred": "Shouldn't we check for errors here?", "gold": "I think we want to provide getAction API instead"}
{"pred": "Why did you remove this check?", "gold": "There is also `winVersion.isWin10`. I think this should be converted to use the helper function. The helper has a note that it doesn't work in source copies, but looking at the implementation it looks equivalent to what you have here."}
{"pred": "Why is this needed?", "gold": "This doesn't seem like it should be part of this pull request."}
{"pred": "Why do we need this?", "gold": "Is the idea that `@product` (and `@workshop` for `workshops_controller`) would eventually go away here?"}
{"pred": "`bscMainnetPreverifiedHeight` is unused (from `deadcode`)", "gold": "We should add those only once we have successfully synced to the BSC main net, we have a utility to generate those. Please remove for now"}
{"pred": "E302 expected 2 blank lines, found 1", "gold": "And how is that related?"}
{"pred": "Shouldn't this be `FlagConnectionEnableAlias`?", "gold": "this should be required"}
{"pred": "`javax.validation.constraints.NotNull` can be removed", "gold": "This appears to be unused"}
{"pred": "nit: `oldestSnapshot` -> `oldestParentSnapshot`", "gold": "I think that \"table's state\" isn't clear enough. How about \"history of the table's current snapshot\" like the one below?"}
{"pred": "I don't think this is needed.", "gold": "This looks like a bug: pretty sure there are scatter-gather instructions on AArch64. Ditto below."}
{"pred": "nit: `transport` -> `transport`", "gold": "No need to change this: id love if we changed as a team to unkeyed fields, it ends up catching a lot more at compile time, at minimal cost"}
{"pred": "Why do we need this?", "gold": "Should this be in the parent struct? `AppManifest` since it's embedded to `LBFargateManifest` it'll get the method as well."}
{"pred": "nit: remove empty line.", "gold": "\"Openvpn check\" we could move this to separate prefix."}
{"pred": "Shouldn't this be `method in ('POST', 'PUT')`?", "gold": "body is being used here for the first time without every being populated. This will error. To run tests do `./go clean test_py` and that will run the Firefox tests"}
{"pred": "Why did you remove this?", "gold": "We don't return now?"}
{"pred": "Why do we need to retry?", "gold": "This might end up not doing exactly what we want (the retry only picks up the `go get`, not the `go build`, due to the `&&`)."}
{"pred": "This should be reverted.", "gold": "Is there a BOM change?"}
{"pred": "Why is this removed?", "gold": "It's not a good practise to delete the public static constant."}
{"pred": "Well-formed and signed properly?", "gold": "I deleted this because `WellFormed` is immediately called by `verify.TxnPool` below. Can someone please double check this for me since it's... pretty important"}
{"pred": "This should be `ply>=3.4.0, <3.12`", "gold": "Did you actually test this with ply 3.4? That release is pretty old (2011), so I think we can bump this to at least 3.6 (2015) or even 3.10 (2017)..."}
{"pred": "Why do we need to set replicas to 0 here?", "gold": "This can be simplified somewhat to `pointer.Int32Ptr(0)`. But it is not necessary."}
{"pred": "Shouldn't this be `bs2 > Bond::STEREOANY`?", "gold": "Clever but perhaps confusing."}
{"pred": "Why do we need to delete secret references here?", "gold": "@abutcher Is it a safe assumption that secrets are the only objects that need to get attached to syncsets?"}
{"pred": "Why do we need to fall back to what we track internally?", "gold": "Should you capture o.asflr before releasing consumer's lock?"}
{"pred": "`engineTools` -> `wineTools`", "gold": "Just asking: Should this happen, that null is passed? If this is the case I think we should think about passing an `Optional` object to the method."}
{"pred": "Extra empty line detected at class body end.", "gold": "what about making a `ProfilesController` or `UserProfilesController` and having this be a `show` action instead? That would be more Railsy (although that can be considered a compliment or a dis, depending on who you are :hamburger: )"}
{"pred": "`device_data->enabled_features.core = *enabled_features_found;`", "gold": "I'd move the empty assignment and non-null case into the if check directly above (adding an else clause as needed)"}
{"pred": "`ar` should be `flag-ar`", "gold": "Please remove this extra line of whitespace"}
{"pred": "`$queryBuilder->andWhere('p.id > :lastProcessedId')`", "gold": "maybe it's time to rename `ProductSearchExportWithFilter` to something better, what do you think?"}
{"pred": "Why do we need the prefix here?", "gold": "Instead of adding new code here - can you move these methods to agent_capability.go, so the same is used for unix and windows as well. this will need removal of these methods from agent_capability_unix.go as well."}
{"pred": "`hash` should be `None` by default, right?", "gold": "Make it the last parameter, just in case someone uses the API with non-keyword args."}
{"pred": "Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.", "gold": "Don't extend an instance initialized by `Struct.new`."}
{"pred": "Shouldn't this be `PMIX_DESTRUCT(&nm->super);`?", "gold": "Just wondering - would it make more sense to simply replace `PMIX_DESTRUCT(&t->nslist)` with `PMIX_LIST_DESTRUCT(&t->nslist)` here, and then add `PMIX_RELEASE(p->jobbkt)` to the `pmix_nspace_caddy_t` destructor on line 154 of src/include/pmix_globals.c? Seems to me like we always want to have these things removed/destructed."}
{"pred": "Why is this needed?", "gold": "I think, we should fix/improve AbstractRuleSetFactoryTest. I guess, both apex and visualforce rules are now tested, which is unnecessary."}
{"pred": "Shouldn't this be `array_merge`?", "gold": "In php8 named parameters were introduced and now it is required to match called method parameter name when setting parameters by array destructing or `call_user_func_array()` etc."}
{"pred": "Why is this import needed?", "gold": "easily possible to get that information without exposing internal information"}
{"pred": "Why not just `found_env_vars[:type] = found_env_vars[:is_pe]`?", "gold": "Why do we need tristate logic (pe, foss, nil)?"}
{"pred": "Why is this change necessary?", "gold": "this change needs to be reverted to what is on `master`"}
{"pred": "nit: `!variableInMap && this.refreshToolboxSelection_()`", "gold": "Do you still need to call the superclass `createVariable` if you've already determined that the variable exists?"}
{"pred": "nit: `for finalized indexes` -> `for finalized indexes`", "gold": "Ignoring the pack entry from an existing entry but using the new entry from a non-finalized index, is subtle enough that it needs explaining."}
{"pred": "`for (const auto& [it, spellId] : instants)`", "gold": "This is a revert, is it really an issue?"}
{"pred": "Why is this being removed?", "gold": "can we delete this file altogether?"}
{"pred": "Why panic instead of returning an error?", "gold": "Suggestion: log some additional info here so we know where we are i.e 'Failed to prepare coverage framework..'"}
{"pred": "Should this be `dotnet`?", "gold": "There didn't seem to be any good place to put constants that are .NET Tracer-specific, so I created this internal static class. If there's a better place, let me know."}
{"pred": "Why do we need this init function? Can't we just use the default value?", "gold": "Log message should be started with upper-case word."}
{"pred": "Should this be `Layout<int>`?", "gold": "changes for example usage in this class"}
{"pred": "Why do we need to change this?", "gold": "I know frameworks that support current directory when loading dependencies, is this a limitation of the requirejs loader or can we fix it somehow?"}
{"pred": "Why do we need this?", "gold": "`ctx` is unused in EnableApplication"}
{"pred": "Why not just `return stringtab(\"\");`?", "gold": "@jemc , this is one change needed in `generate_multi_dot_name`. I believe this * will do no harm to working pony code: The new code was added in a place where it is throwing an assert. So no working code will get affected. * is in sync with the rest of the method: if the parent ast node has null `data`, we are supposed to return empty string. That is possible when we have expressions wrapped in braces."}
{"pred": "import static org.apache.solr.common.params.QueryElevationParams.ONLY_ELEVATED;", "gold": "Should not be a static import."}
{"pred": "Should this be `change.Attachment.AttachmentArn`?", "gold": "should we be using `aws.String` here? it seems there are a few other spots we could use `aws.String` in the `if change.Attachment != nil { ...` block."}
{"pred": "Why do we need to pass `startDate` and `endDate` here?", "gold": "We can't pass raw dates like this because they need to be formatted as `YYYYMMDD` as noted in the IB. We added the `generateDateRangeArgs` utilities to handle this for us, as well as abstracting the relationship between arg name and specific dates which is not obvious just by looking at it. Let's update it to use `generateDateRangeArgs( { startDate, endDate } )` instead   Use care to make sure we're sourcing the utility from Analytics utils though since AdSense has its own version by the same name, which is different."}
{"pred": "`description='If true, save data required for execution summary')`", "gold": "`default=True` shouldn't be used for BoolParameters iirc."}
{"pred": "Should this be `strings.TrimSuffix`?", "gold": "It would be better to use `return refStr[12:]`. or `11`... I have problem with counting.."}
{"pred": "Why was this removed?", "gold": "Pretty sure these should only contribute to the runtime hash."}
{"pred": "Should this be `gsa18f-layout`?", "gold": "Just verifying: this change doesn't break the 18f layout, right?"}
{"pred": "Why is this being removed?", "gold": "we should keep this counter using the \"isYarpcError\" api"}
{"pred": "Shouldn't this be `new CaseInsensitiveMap<>()`?", "gold": "Could we just use case insensitive strings as keys instead of creating a new map implementation? e.g. simply using a treemap with a comparator `Map<String, Integer> idToPos = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);` could work I think"}
{"pred": "Why not just `return slot as RuntimeContextSlot`?", "gold": "I think this should be a throw. Or the method should be TryGetSlot?"}
{"pred": "`std::cerr` instead of `std::cout`", "gold": "We don't usually put spaces between ( and [, and I think `path` should be passed by reference."}
{"pred": "Shouldn't this be `!IsStackable && sold`?", "gold": "Make sure to `snake_case` locally scoped variable names in the future"}
{"pred": "Should this be called `HealthCheckPath`?", "gold": "Maybe we should use underscores like `health_check` - what do you think?"}
{"pred": "I'm not sure if this is the best way to do this. I think it would be better to use `v.req.Header.GetOrDefault(string(v1alpha1.StorageClassKey), \"\")`", "gold": "Do a TrimSpace before setting."}
{"pred": "Why do we need a separate field for this?", "gold": "Are the fields in this struct grouped by IP address family or by function? There are separate fields for IPv4Addresses and IPv6Addresses, but a single field for DomainNameServers. Should this new field be named SubnetGatewayAddress with type array consisting of both IPv4 and IPv6 gateways?"}
{"pred": "Rails/FindBy: Use find_by instead of where.first.", "gold": ".find(id) is being deprecated to Rails 5."}
{"pred": "F401 'iris.cube.CubeList' imported but unused", "gold": "Will be good to have the iris interface moved to geoviews. Could this be done for 1.10.6?"}
{"pred": "I think this should be `return fmt.Errorf(\"sign request failed: %w\", err)`", "gold": "does this get wrapped in the calling method?"}
{"pred": "This test should not test case-insensivity. The permission tests should do that.", "gold": "Do we still need this test case? If your new test cases test this, then we can remove it."}
{"pred": "Layout/EmptyLinesAroundMethodBody: Extra empty line detected at method body end.", "gold": "If you want to express \"any role that is not creator\" you could use the following statement: Role.where(plan: self).where(Role.not_creator_condition).any? which would be less verbose and a bit more efficient if it is used for Yes/No shared?"}
{"pred": "\"In the case where the CA is an intermediate, we don't want to store the root\"", "gold": "Do we need any update on the test side?"}
{"pred": "Why do we need to cancel prefetches for unreferenced blocks?", "gold": "There's a few `return nil` cases above this -- we should probably move this above the big switch."}
{"pred": "nit: typo `stuct`", "gold": "`lile *LeaseInLedgerError` to reduce copying?"}
{"pred": "Why do we need a separate endpoint for this?", "gold": "should it be `newsessionqueue` or `newsessionqueuer`? In case we'd like to be consistent"}
{"pred": "Shouldn't this be `FileAccess.Write`?", "gold": "We don't have a requirement anywhere in Test Platform for GetStream() with write access. It is ok to directly change `return new FileStream(filePath, mode, FileAccess.Read)`."}
{"pred": "Why do we need this import?", "gold": "FWIW `from qutebrowser.browser import hints` is okay - it's just things like `from qutebrowser.browser.hints import HintManager` I try to avoid."}
{"pred": "Should this be `neve-tansparent-header`?", "gold": "@preda-bogdan let's use a filter for the header classes, something like, hfg_header_classes where we hook this logic, in neve pro"}
{"pred": "`corev1` is already imported.", "gold": "Out of curiosity.. is there a rule to determine the package name as prevDirectory+currentDirectory."}
{"pred": "Shouldn't this be `get_xmm_caller_saved(&mc->simd[0]);`?", "gold": "It seems this needs to check the lazy cxt switching flag. It is used on the initial thread for early injection and in other places where the lazy switch should apply."}
{"pred": "`@see` should be `@see`.", "gold": "Why not use the JSdoc annotation as it did before?"}
{"pred": "`if (version == null || version.contains(\"-ee\"))`", "gold": "Why don't we drop the packageImplementationVersion in general? That way the version will be fetch all that time only from the properties file and it will be consistent."}
{"pred": "This should be a `std::unordered_set`.", "gold": "Please use the style of the rest of the code, a space between the type and `*`"}
{"pred": "Why is this needed?", "gold": "nit: remove extra blank lines."}
{"pred": "`taskGroupNameDefault` is unused (from `deadcode`)", "gold": "nit: What do you think of `copilot-task-group`?"}
{"pred": "`this.value = this._prevValue || '';`", "gold": "We should check whether or not the input node has a value since we can just have an onChange on an uncontrolled component as well."}
{"pred": "Why did you change this?", "gold": "I think there should be some reasoning below this line about the version updating."}
{"pred": "Please use `strncasecmp` instead of `strncasecmp`.", "gold": "Please use `h2o_lcstris` instead of `strncasecmp` so that the comparison would be a complete match (instead of a prefix match; current code would yield true if [val,len] is [\"O\", 1]) and that it would be locale-independent."}
{"pred": "If we're in minimal mode, the block cache remains nil to ensure that the user doesn't try any data reads or writes.", "gold": "I prefer if possible for `if`/`else` statements to have the positive case first."}
{"pred": "I think this should be `issubclass(x, t)`", "gold": "Docstring would be nice"}
{"pred": "Why do we need this?", "gold": "Low risk to fix this by default because existing baseline consumers pass this check. We don't attempt to fix checks that have been opted out of."}
{"pred": "Shouldn't this be `KOKKOS_COMPILER_CLANG >= 1300`?", "gold": "What about `VOLTA72`, `TURING75`, `AMPERE80` and `AMPERE86`? We only want to set the number of teams for these two architectures or for all the architectures newer than Maxwell?"}
{"pred": "Why do we need to change this?", "gold": "Since we have specified `load_from`, `pretrained` can be left None."}
{"pred": "nit: `Maxiumum number of args in log directive is 3`", "gold": "I prefer to translate these `else if` into `switch` for more readability."}
{"pred": "Why is this necessary?", "gold": "This can also be a local variable in `create`."}
{"pred": "Why do we need to create the file if it doesn't exist?", "gold": "Why not use `path.Join`?"}
{"pred": "This should be `import * from 'assets/js/googlesitekit/api';`", "gold": "Why not `export default API` instead? This ensures we export the same that we export on the global."}
{"pred": "Should this be `FileModeType_WriteMode`?", "gold": "This is a good change I think. It greatly helps reduce name conflicts."}
{"pred": "Why do we need this? Can't we just use `map[string]string`?", "gold": "cluster not having omitempty, does this imply that cluster is required? seems empty is valid so just checking"}
{"pred": "Why do we need this lock? Can't we just use `c.Env`?", "gold": "@aws/aws-ecs-agent, @yumex93: how concerned should we be about user provided envvar names clobbering existing envvars? i'm not convinced we should be doing additional validation here."}
{"pred": "Why do we need to create a Set here?", "gold": "nit: aspects are defined in `OperationBase`, should `defineAspects` live there as well?"}
{"pred": "Why do we need this?", "gold": "Why the `os.path.abspath`? `os.path.dirname` should always give a valid directory path."}
{"pred": "Why do we need this method?", "gold": "I think we should not consider special engine types on this level. I would prefer to build the specific engine path based on `application.user.engines` later on."}
{"pred": "nit: `auto it = scanItems_.rbegin();`", "gold": "Is `rbegin` correct? We can't make sure that the last index column is the `rbegin` of `scanItems`."}
{"pred": "Why do we need this?", "gold": "check it is != 0, just like `EVMNetworkID` above"}
{"pred": "nit: `typeof(T).Name, this.exporter.GetType().Name`", "gold": "if you just do \"this.GetType().Name\" and \"this.exporter.GetType().Name\", we get what we need."}
{"pred": "Shouldn't this be `v29.1`?", "gold": "That's the code that would prevent any SalesforceSDKTest from running. At class loading time, SalesforceSDKManager.getInstance() would throw a RuntimeException because init() had never been called."}
{"pred": "Shouldn't this be 0.0.0?", "gold": "there is no \"DEFAULT_REVISION\" logic, no need to define this."}
{"pred": "Why do we need to set the url here?", "gold": "so this is to fix a scenario where the app is first launched normally, then background and foreground through the link, we are not updating loginOption"}
{"pred": "Why do we need this?", "gold": "It doesn't seem like the right way to implement this, because you add a new element that doesn't really exist (noteTextViewer). Instead you should modify the command handler `if (command.name === 'focusElement' && command.target === 'noteBody') {` in NoteText.jsx. Then focus either the editor or the viewer depending on what's currently visible."}
{"pred": "Why do we need these imports?", "gold": "We don't add blank lines in imports."}
{"pred": "Shouldn't this be 2012-2019?", "gold": "Please add your name to the copyright list."}
{"pred": "I don't think we should ignore the error here.", "gold": "You can elide the `if` check for empty string, because if it's not a value that is set, the string will be empty anyway."}
{"pred": "I think this should be `push-notification.actions-performed-serie`", "gold": "Different i18n keys. By mistake or on purpose?"}
{"pred": "I don't think this should be a constant. It's only used in one place.", "gold": "Given the description for this is `// Describes how the ACME challenge self check behaves when it fails.`, perhaps `RetryForever` is better terminology here as when the check fails, we don't just wait, we retry periodically."}
{"pred": "`ot_gpgme_throw (gpg_error, error, \"Loading data from fd %i\", fd)`", "gold": "Nit: let's add a more descriptive prefix in line with the other ones? E.g. `Unable to import key` ?"}
{"pred": "Should this be `Dir[\".vagrant/**/private_key\"]`?", "gold": "This looks like it will pass an array as `:key` in the default case. That doesn't reflect how this will actually work in practice."}
{"pred": "Why is this needed?", "gold": "Do we need this?"}
{"pred": "I don't think we need this method.", "gold": "I am a bit confused about this function. If it is used to set priority, we actually use function \"Table.BuildFlow(priority uint16)\" to set the value. If it is used to parse the priority value, I think adding a property(if you don't want to consume Match.Priority directly) to cache it and consume that property should be simpler than using string regex."}
{"pred": "I don't think this change is necessary.", "gold": "In this case we probably meant \"package\"."}
{"pred": "`promisify` is deprecated, use `fs.promisify` instead", "gold": "Just export `createFile` directly."}
{"pred": "Why is this needed?", "gold": "This probably needs to get shipped with plz; you shouldn't have to redefine it within the user's repo. It should use `defaultPath` like the other things up the top of the file."}
{"pred": "`btc` -> `btcWallet`", "gold": "interface for bitcoin should not change if possible. i.e: networks.testnet should return networks['btc'].testnet"}
{"pred": "Please remove this empty line.", "gold": "File is not `gofmt`-ed with `-s` (from `gofmt`)"}
{"pred": "Shouldn't this be `wl_callback_send_done(cb->resource, when);`?", "gold": "We have this functions in a couple of places. It should probably live in util or something."}
{"pred": "Why do we need this?", "gold": "maybe this should be inside the destroy?"}
{"pred": "why do we need this import?", "gold": "Do not import torch in the test function because it will import torch every test iteration and will slow down the testing speed."}
{"pred": "Why is this a pointer?", "gold": "I think we want to return an error here, not nil."}
{"pred": "Why do we need this state?", "gold": "Nitpicking, but I think it would be more accurate to use an actually supported value, i.e. `completed`."}
{"pred": "Should this be `find_project`?", "gold": "How about renaming the `ApiJob` class to `JobApi`. As per rails convention, get method is to get a single object, not a collection, can we change that to `fetch`/`where`. It would be great if we can move the `get` method to a class method."}
{"pred": "ineffectual assignment to `err`", "gold": "assignments should only be cuddled with other assignments (from `wsl`)"}
{"pred": "Why is this not implemented?", "gold": "`k` is unused in PutHash"}
{"pred": "Why did you remove the nullable annotation?", "gold": "None of the child return null here, plus it was creating an incoherence between interfaces."}
{"pred": "I don't think this is the equivalent of --ponynoscale", "gold": "Should we remove this entirely now then?"}
{"pred": "Why do we need this interface? I don't see it being used anywhere.", "gold": "That is way too generic a name."}
{"pred": "nit: typo `overwrote`", "gold": "This might be overkill for test code...but as stewards of accessibility it would be appropriate to have a label in the fixture."}
{"pred": "Shouldn't this be `VK_COMMAND_BUFFER_LEVEL_PRIMARY`?", "gold": "Are these allocations necessary, or can these be instantiated normally (i.e., `VkCommandBufferObj secondary_full_clear(...)`). If the allocations _are_ necessar, I'd vote for using something like `std::unique_ptr` and then remove the associated `delete`s."}
{"pred": "Why do we need to cast here?", "gold": "es.clear should call this"}
{"pred": "Why do we need this test?", "gold": "please remove. this is true by the definition of the Python language"}
{"pred": "I think this should be `<Ctrl-Return>`", "gold": "Hmm, I wonder if binding `<Return>` is a good idea... this means it wouldn't be passed to webpages anymore, which makes me wonder how many people rely on that... I guess trying it is the only way to find out :wink:"}
{"pred": "`icmpPkt_with_type_code` is unused (from `deadcode`)", "gold": "Golang naming convention is to use camel case `icmpPktWithTypeCode` Often the linter will complain"}
{"pred": "Why do we need these properties?", "gold": "nit: Probably should renamed to `InitializeBody`"}
{"pred": "Shouldn't this be `settings.blogIcon`?", "gold": "is `settings.icon` always null/undefined when there's no icon or does is it get set to a blank string? It might be worth wrapping it in an `isBlank()` anyway"}
{"pred": "Why is this needed?", "gold": "put invoke to the end of the list, and other module at beginning of the list (line 86)"}
{"pred": "Why do we need to multiply by `swarm.ChunkSize`?", "gold": "I think that bytes is too precise. Can we just calculate the approximate value in appropriate units? Something like MB, GB depending on the value, `db capacity: 5000000 chunks (approximately 20GB)` ."}
{"pred": "`axe.commons.text.sanitize(label).trim() !== ''`", "gold": "This check shouldn't look at the content, you're already doing this with `none-empty-text`. I also think this check should be renamed to `none-empty-alt` or something like it. There is nothing specific to applets in this check to warrant putting `applet` in the check ID."}
{"pred": "Why do we need to unset it here?", "gold": "Why did you change the signature of this method ? You can break BC doing that"}
{"pred": "Why do we ignore the error here?", "gold": "can you catch the error here please and return err if it can't read the template"}
{"pred": "Why do we need to call updateLibrary here?", "gold": "Is this method called at another location too? I'm just asking because you didn't remove another call to `updateLibrary`"}
{"pred": "Use 2 (not 0) spaces for indenting an expression spanning multiple lines.", "gold": "Not necessary but you should be able to add a `?` on `is_default?` and `published?`"}
{"pred": "Why do we need this change?", "gold": "here is us decoding directly the bytebuffer in benchmarks"}
{"pred": "Why do we need to do this?", "gold": "When the Tracer is first created AND `DD_LOGS_INJECTION=true`, this is invoked and causes the issues described."}
{"pred": "Why do we need to change the error code?", "gold": "NIT: If we are renaming the JsonRpcError, should we also rename this enum value to be consistent?"}
{"pred": "Shouldn't this be `VectorizedExpression`?", "gold": "This could be made into a function expression, yes?"}
{"pred": "Why the extra space?", "gold": "Oops, I missed this initially."}
{"pred": "Why do we need to create a lambda function?", "gold": "Can we add an assertion here the policy actually contains both statements created above?"}
{"pred": "This should be `rocksdb_bottommost_compression_disable`", "gold": "a space after comma?"}
{"pred": "nit: space after `//`", "gold": "nit formatting here and below"}
{"pred": "nit: rename mock_registration to mock_entry", "gold": "I think that there is a general consensus of trying to avoid this kind of mocks in the new tests that we write. I would suggest to have tests using fake service implementations. In this case, we can have a fake entry service. Examples of how tests have been written this way are the tests for the `spire-server agent` and `spire-server bundle` commands. It would be great if we can have that kind of testing here also. What do you think?"}
{"pred": "Why do we need to return an empty string here?", "gold": "`ctx` is unused in RunQuery"}
{"pred": "I think this should be `codechecker_common.Report`", "gold": "Couldn't we use type hints to express this?"}
{"pred": "I think this should be `.ratingbutton-icon-withrating`", "gold": "why you do `.classList.add()` here but `.replace()` in other places?"}
{"pred": "Why do we need this sleep?", "gold": "What is this sleep here for?"}
{"pred": "Can we remove this?", "gold": "I think that this test doesn't cover this bug correctly. When I attached the older version of the handsontable to this test it passes, should fail. Can you check that?"}
{"pred": "`unflushedPaths` and `unflushedReady` don't seem to be used anywhere.", "gold": "Maybe this should just be passed in on construction time"}
{"pred": "Shouldn't this be done in `attempt_drm_backend`?", "gold": "We should create the monitor after the `if (!primary_drm)` check."}
{"pred": "I don't think this is needed.", "gold": "Can be removed now that slots are used"}
{"pred": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "gold": "The description should match the test"}
{"pred": "`wlr_xwayland->display_name[0] = '\\0';`", "gold": "rootston needs to unset this now"}
{"pred": "Why do we need to change this?", "gold": "why do you rename this function?"}
{"pred": "Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "since we are no longer using these numbered icons can we remove them from source control?"}
{"pred": "Why do we need this?", "gold": "both edge and normal need to set this, so set it to be default action?"}
{"pred": "Why do we need this check?", "gold": "Is doing a straight string compare of the files the right way to determine this? I guess if you expect to be the only one writing this file it could work but it does seem like it might be a large string compare and if we are doing this hundreds of times that might cause some memory issues."}
{"pred": "This should be `if (!system(buf)) {`", "gold": "What's the purpose of this change? It basically changes nothing until we want to put smth between curly braces"}
{"pred": "Shouldn't this be in `wlr_input_device_destroy`?", "gold": "Hmm, why is this needed? `wlr_input_device_destroy` should destroy the tablet tool."}
{"pred": "Why not return an empty list?", "gold": "I think it's better to throw `UnsupportedOperationException`"}
{"pred": "Why do we need to delete `value`?", "gold": "`props.children` is not always guaranteed to be an array. When only one child is passed this will break. We can use `toChildArray()` to turn it into an array :tada:"}
{"pred": "Is this intentional?", "gold": "Please just remove this line. We have the git history if we want the old version."}
{"pred": "Why do we need this? Can't we just use `SpinScriptEnvResolver`?", "gold": "Can we put some of the code on a new line to make it more readable. The max line length was 120 now, right?"}
{"pred": "Why do we need this example?", "gold": "Remove the handling here as well."}
{"pred": "Why do we need this?", "gold": "Do we want to make this configurable?"}
{"pred": "`positive(argName, number, \"must be greater than 0\")`", "gold": "Prefer adding a second `positive(String, double)` that delegates down to this three-param version. Using `null` in code is generally Not A Great Idea, and it looks ugly."}
{"pred": "Style/PercentLiteralDelimiters: %w-literals should be delimited by [ and ].", "gold": "Is this going to break things for 18F proposals, or will these fields just be ignored?"}
{"pred": "Shouldn't this be `Keys#COMMAND`?", "gold": "Keys.COMMAND seems to be an alias to Keys.META. That isn't mentioned?"}
{"pred": "`omitemptuy` -> `omit`", "gold": "What's the reason for moving this to config from status?"}
{"pred": "Why did you change this?", "gold": "Shouldn't we re validate/update the in memory suppress data here?"}
{"pred": "Why this change?", "gold": "curious why the renumbering is required here and elsewhere?"}
{"pred": "Shouldn't this be `aws.CredentialsSecretRef.Name != \"\" && aws.CredentialsAssumeRole == nil`?", "gold": "s/must specify secrets/must specify secrets or Role info/"}
{"pred": "Why is this being removed?", "gold": "let's leave this as a dev-only feature, and copy prod db to local env when needed. that keeps blazer security issues to a minimum."}
{"pred": "Why did you remove the `nameof`?", "gold": "We'll be renaming ActivitySampler to Sampler anyway, so this change will be non-required. Prefer to avoid changes here to avoid merge conflict with my PR doing the rename."}
{"pred": "`repl.Replace(ruleValues[len(ruleValues)-1])` will always return a non-empty string.", "gold": "This applies only in the \"set\" headers case, but what about \"adding\" a header (field prefixed with `+`)?"}
{"pred": "Why do we need to deprecate this?", "gold": "I'm not sure we should deprecate this. I kinda like the idea, that we would provide all exceptions (if we throw any) with a common super type. Of course, the exception should be not a checked exception like this one, but rather a runtime exception. We maybe need additionally an internal exception that we would convert into such a public API exception. But that's out of scope of this PR - that's the question of exception handling."}
{"pred": "Why is this needed?", "gold": "You'll need to adjust the docstring :wink:"}
{"pred": "Why is this needed?", "gold": "Add a TODO explaining why this is being done"}
{"pred": "Why do these need to be required?", "gold": "This file still uses Blockly.VariableModel..."}
{"pred": "nit: `// Public specifies whether to open port 22 to public internet`", "gold": "Small nit, in the PR description its `publicAccess` but here its `public`. Guessing the preferred naming is public?"}
{"pred": "Why did you change the formatting here?", "gold": "Maybe `driver.Watcher` -> provider (2x)? This is the concrete type, this user doesn't really know anything about the driver."}
{"pred": "Why do we need to change this to `T`?", "gold": "can we remove this since `getDocValues` already returns an iterator? (we might need to do `T extends DocIdSetIterator` above)"}
{"pred": "Style/RedundantSelf: Redundant self detected.", "gold": "Don't check this in. This is already implemented in core_extensions/ruby/string.rb"}
{"pred": "Why did you remove `writeable`?", "gold": "This is used for both `id`, and `hash` we may not want these both to be enumerable."}
{"pred": "Should this be `dup!`?", "gold": "Is this necessary? I would expect YARD to treat it as public anyway... (Don't hold off merging on this...I'm mostly just curious)."}
{"pred": "Why do we need to set the version here?", "gold": "@wxing1292 to double check this is the right version to use?"}
{"pred": "Why do we need this method?", "gold": "Shouldn't there be another case for when both min and max are specified?"}
{"pred": "Why did you change this?", "gold": "Don't miss this one `2: I102 copyright year is outdated, expected 2014 but got 2013`. Thanks"}
{"pred": "`if (tail_ && blockPt_ != null)`", "gold": "the tail_ maybe nullptr?"}
{"pred": "Shouldn't this be `createPodEntry`?", "gold": "The PR description mentions that `The controller code is extended to react to \"add\" events`, but I don't see any additional cases added here beyond the existing Create and Delete... is there something I'm missing?"}
{"pred": "Style/SymbolArray: Use %i or %I for an array of symbols.", "gold": "Does it matter that #include changed to #include? ? I think the change makes sense since it aligns with the method name on Hash but unsure if anything called #include that would break with the change."}
{"pred": "Why this change?", "gold": "LGTM, curious though why exactly this is in place, and are there any possible issues from not waiting long enough?"}
{"pred": "I don't think we need to capture `onpass` here.", "gold": "?: is unnecessary because we already force preserve_hosts to be a string with to_s."}
{"pred": "Why do we need a separate endpoint for this?", "gold": "should it be `newsessionqueue` or `newsessionqueuer`? In case we'd like to be consistent"}
{"pred": "Why did this change?", "gold": "Since lazy is re-rendered when mounting the fallback, these checks get triggered an additional time."}
{"pred": "Why do we need this?", "gold": "There is a `is_content_editable()` method just above this, what's the difference?"}
{"pred": "I don't think this should be a warning.", "gold": "Hmm, I'm not sure this is exactly what we want to get across. The behavior of leaving both values unset allowing the entire config to be managed is what is indeed deprecated. It's just that not the entire field is deprecated, just that one behavior."}
{"pred": "`data_len` is no longer used.", "gold": "Given the slightly vague discussion in basename(3) about POSIX basename (modifies arg) vs GNU (doesn't), I always assumed it was advisable to pass a string copy However, I guess you'd get a \"discarding const\" warning promoted to error by our build system here if you were getting the POSIX implementation. Hah! Cool, I probably can go remove some memory copies in other parts of the code where those conditions exist."}
{"pred": "Why this change?", "gold": "Do you know somehow that this was the culprit? Even 1 minute is a lot, so I would expect the bug to lie somewhere else."}
{"pred": "nit: \"put failed, ret \"", "gold": "what to do if some failed? just logging?"}
{"pred": "Should this be `@faker.version next`?", "gold": "since these thoughts are all Jack Handey's the generator should probably be called `jack_handey` to reflect that."}
{"pred": "Why is this a list?", "gold": "this file is autogenerated. you should edit `model/api/api-2.json` and then go generate this file. otherwise the next people generating api.go will remove the changes you added here"}
{"pred": "Layout/TrailingBlankLines: Final newline missing.", "gold": "Extra empty line detected at class body beginning."}
{"pred": "Why do we need to intern here?", "gold": "This is smart but hacky! I would probably prefer an alternate solution that would be more obvious to read/understand."}
{"pred": "`targetTableRcu` and `targetTableWcu` are unused.", "gold": "i would not return a pointer for status here which is an int"}
{"pred": "Why do we need this?", "gold": "Those functions are not currently wrapped, so I don't think it is necessary to exclude them (at least for now)."}
{"pred": "Layout/TrailingWhitespace: Trailing whitespace detected.", "gold": "Should we specify the name of the folder?"}
{"pred": "rdmolops -> rdqueries", "gold": "it's not wrong, but you don't technical need `rdmolops` here since it's imported as part of `Chem`"}
{"pred": "Why do we need to wait here?", "gold": "I think the absence of this might have been the cause of the dump file corruption. We didn't wait for the pxz command to exit, leading to a race condition between the cp and this, leading to corrupted files in some places. I came across this because the hashes created and printed were different from the hashes of the actual files in dev also."}
{"pred": "Why do we need to change this?", "gold": "Out of the scope."}
{"pred": "`this.sort` -> `this.sort`", "gold": "Maybe `sortByColumnHeader` would be more precise? The plugin has a method with the same name and it could be confusing."}
{"pred": "Why is this change needed?", "gold": "@developit I vaguely remember you mentioning something about some JS engines having an escape analysis feature that makes objects (and arrays?) locally declared that never leave the function essentially free from a GC perspective or something. Do you think we could benefit from that here? Or should we leave this as it is?"}
{"pred": "Why is this needed?", "gold": "Remind me why this is needed?"}
{"pred": "Why is this needed?", "gold": "same as above, can this be null now?"}
{"pred": "Why do we need to cast to `int`?", "gold": "This doesn't make sense to me. Should `cv.lengths` be an integer array instead of longs? It looks like they should always be integers since the values are assigned from `ArrayData#numElements()`. That's very likely an int."}
{"pred": "Why do we need to check for `Q1` here?", "gold": "str.Substring(3).Split(' ')[0] would also work and is more concise."}
{"pred": "Shouldn't this be `node_l->peers.not_a_peer (endpoint, node_l->config.allow_local_peers)`?", "gold": "Did you mean to negate the not_a_peer check?"}
{"pred": "Why did you change the copyright year?", "gold": "Copyright (C) 2010-2021 DBeaver Corp and others"}
{"pred": "Please don't change unrelated things.", "gold": "This seems like an unrelated change"}
{"pred": "Why do we need to set the label here?", "gold": "Just to double-check -- are you sure this needs to be done *before* we create a new session? (Is `SetKeyLabel` setting what the label will be for all future keys or the label for the current key?)"}
{"pred": "Shouldn't this be DISCARD?", "gold": "I thought we were removing the FAIL policy altogether...."}
{"pred": "Why do we need to strip the last 3 characters?", "gold": "Could you elaborate on why you made this change?"}
{"pred": "I think it would be better to use `\\u0000` instead of `\\u0000`.", "gold": "before the fix, does this sentence make service crash? My point is can you re-produce the problem. I'm not sure the bug is due to non-asiic code"}
{"pred": "Shouldn't this be `c.Data[\"IsApiToken\"] == true`?", "gold": "This comparison looks a bit strange, we should first check existence of key \"IsApiToken\" and then check if it is equal to true. ~~Besdies, s/IsApiToken/IsAuthedByToken/~~"}
{"pred": "nit: `applyMode == \"\" || applyMode == \"\"`", "gold": "This might be working as is, but I'm a bit thrown by the || and then && and how things get evaluated. Testing real quick on the go playground, true || false && false seems to either evaluate the && first, or start on the right side. Anyhow could you group with braces, it looks to me like it should be ( a || b) && c in this case?"}
{"pred": "Why is this needed?", "gold": "add an entry in makefile to generate binary with diff name?"}
{"pred": "Why do we need to validate here?", "gold": "hmm so we didn't validate the HTTP config for all receivers?"}
{"pred": "nit: `IsInjected` -> `IsInjected`", "gold": "ITextFormatActivity had this, can I add to have the same effect?"}
{"pred": "I think this should be `apierrors`", "gold": "not blocking: can we remove extra lines here?"}
{"pred": "`typeof(data) === 'undefined' || data === 'random'`", "gold": "This just feels weird... can we use some kind of constant here? something like: `if (_.isUndefined(data) || data === PrivateKey.Random)`"}
{"pred": "`if ($parameters[0]->getClass()) {`", "gold": "if does not have a class I guess the exception should be thrown because we cannot recognize the type based on it?"}
{"pred": "I don't think this is the right way to do this. If the containing object has a fieldmask, then all the fields in the field mask (and only those fields in the field mask) will be serialized. If the containing object does not have a fieldmask, then all the fields in the field mask (and only those fields in the field mask) will be serialized.", "gold": "LOL: use your GitHub username?"}
{"pred": "`@return a new key current rid+1.`", "gold": "any tests for nextPrefix() ?"}
{"pred": "Shouldn't this be `if (t != null)`?", "gold": "In general I'm saying \"if there is no common type I'm just going to skip some stuff and fail silently.\""}
{"pred": "nit: remove empty line", "gold": "did we move the eventing logging here? Probably the eventing logging was removing and they are now using the pkg logging in eventing. If that is the case, we should do the same here"}
{"pred": "Why remove the `operation` field?", "gold": "I think that `Handler` should preserve the `operation` member and the span formatter should receive the operation name string as a parameter too, otherwise the `operation` parameter in the `NewHandler` function becomes useless if we pass a custom span formatter. Also, shouldn't it be called `spanNameFormatter`?"}
{"pred": "Why is this change needed?", "gold": "Can you merge #466? That would make the current `None` default value working and more relevant that `\"127.0.0.1\"`."}
{"pred": "Why do we need customCategory|predefinedCategory here?", "gold": "is reserved filed name the only possible reason this could fail?"}
{"pred": "Why do we need this?", "gold": "Would a KBFS_DISABLE_JOURNAL make more sense?"}
{"pred": "Shouldn't this be an error instead of a warning?", "gold": "BTW. What's the message meaning?..."}
{"pred": "I think this should be `expect(object).to be_a(Numeric)`", "gold": "this should say false"}
{"pred": "Why do we need this?", "gold": "for my understanding - are this line and the next line both necessary? they seem to contain duplicate information. same for the other test files"}
{"pred": "Please use parentheses instead of `\\` for line continuation.", "gold": "No need for the `.keys()`, iterating over a dictionary gives you its keys (and thus you can also do `key in some_dict`). With that, it also fits on one line :wink:"}
{"pred": "Why was this removed?", "gold": "If we want to avoid the user calling constructor and destructor, we should add `= delete` to their declarations. If we just want to avoid writing the default behavior, we should add `= default` to the declarations. I'm more in favor of the second option to avoid an API break."}
{"pred": "Shouldn't this be `GrapheneMaterializationOrObservation`?", "gold": "My preference here is to keep a stricter hierarchy. We should have a mixin or something that is an AssetEvent that Observation and Materialization can both inherit from. That way we can check the type in the frontend if we need to."}
{"pred": "Why do we need to sort here?", "gold": "Can also cast them as `set`s and compare them."}
{"pred": "", "gold": "Still TODO I guess?"}
{"pred": "Why did you remove this?", "gold": "Another cleanup. There are two additional `using namespace std::chrono;` under this one. Should also remove std::chrono:: from the full file. Please do this on a single commit."}
{"pred": "Why did you change the default value here?", "gold": "Looking at this list of boolean flags I wonder if we should create enums for all of these options, so that the code becomes much more readable"}
{"pred": "Why is this needed?", "gold": "Is this necessary?"}
{"pred": "Please add a license header to this file", "gold": "How about this NS inside query NS?"}
{"pred": "`LoadAccount` is unused (from `deadcode`)", "gold": "in line 79, sm also can be stateReader"}
{"pred": "nit: `CHECK(it != localCache_.end());`", "gold": "maybe can not return a map directly, it will be modified by inner thread."}
{"pred": "How about `assertDictContainsSubset`?", "gold": "What is the actual change here, why is this test change needed? Now the diff will send back more data?"}
{"pred": "Shouldn't this be set atom->setAtomMapNum(0)?", "gold": "Might be better to use a tag here. I for one have used 1000 isotopes as a tag in the past..."}
{"pred": "Why is this change needed?", "gold": "This tests seems it was broken from the start :joy:. It \"worked\" because the old sample chance was small enough that this have always be off. Thanks for fixing this. Could you also change the strings on this test? `\"Recording off\"` and `\"new span is recording events\"`"}
{"pred": "`isVersion` -> `isVersionRequired`", "gold": "This is not actually the case, you need to modify `toConfiguration` below to prevent a configuration from being produced"}
{"pred": "Why is this change necessary?", "gold": "I'm worried about we hide some important log here"}
{"pred": "Why did you change this?", "gold": "Python 3 will throw an exception for inf, but not providing a timeout will result in no timeout exception."}
{"pred": "This should be `/bzz-tag/addr/{addr}/uuid/{uuid}`", "gold": "As this method changes the state, it should be `POST`. Also, maybe to rename it to `createTag`?"}
{"pred": "Shouldn't we return an error here?", "gold": "`ctx` is unused in rollbackTraffic"}
{"pred": "Why do we need this?", "gold": "Roslyn conventions have const in PascalCase."}
{"pred": "Shouldn't this be `h.clientPort ? h.clientPort : \"2181\"`?", "gold": "This is not bullet proof if e.g. user has `clientPort=1234` in `zoo.cfg` and in zkHost connection string. Then we'll add a warning that dynamic config differs from zkHost, which is not entirely true since we just lack the port part. We have no way from client to read the `clientPort` from server except from connecting to the server with 4LW *ont the clientPort* which is a chicken and egg. This hack will make the comparison work for default port, which is a compromise."}
{"pred": "Why is this needed?", "gold": "We can probably delete this entire file. It's not used now and we'll (probably) write a custom serializer before we ever switch to MessagePack 2.1."}
{"pred": "Why did you change this?", "gold": "Aren't you duplicating this option?"}
{"pred": "I don't think this should be a method on `Analyzer` since it's only used in one place.", "gold": "I'm not sure we should be doing this based on the extension? Calling them `.build_defs` is just a convention"}
{"pred": "Why was this removed?", "gold": "Should remove in `_MissingPandasLikeMultiIndex:` too"}
{"pred": "Nit: `Subnets` -> `Subnets`", "gold": "We should scope this down to the bits that we're actually using, otherwise the API is going to be problematic, as it includes references to NAT gateways and public and/or private subnets. Copying the types to be more local to the task in hand is fine."}
{"pred": "I don't think we need the `+optional` here.", "gold": "Is it is a hard requirement for this field to be 'cn-northwest-1' when wanting to interact with AWS China? It appears that putting in 'cn-north-1' would also result in using the alternative API endpoint (with the region overridden to use 'cn-northwest-1' for the created AWS client)."}
{"pred": "Why are we skipping this test?", "gold": "Stephen already fixed this one. Only the OverSize test is flaky now right?"}
{"pred": "Shouldn't this be `proposal_link_text`?", "gold": "if the `activity_mailer` has a layout, should we include the footer in that? Realize there may also be conflicts with work @rememberlenny is working on..."}
{"pred": "Why do we need to disable i18n here?", "gold": "This makes me nervous, mostly because I don't know very much about it. Will users run into the gettext error in the wild? I can't reproduce it locally, but it's hard to be 100% sure. Is disabling gettext in Pal an option?"}
{"pred": "Why not return an empty list?", "gold": "Is Java smart enough to know the generic type here? Never knew this."}
{"pred": "Why do we need this change?", "gold": "no thought given to reload"}
{"pred": "nit: space after `if`", "gold": "Please, don't remove the `getDisabledMetricAttributes` method. All changes must be backward-compatible."}
{"pred": "Shouldn't this be `/Failed to kill on some hosts/`?", "gold": "Is this left over from debugging?"}
{"pred": "Why do we need to close the client here?", "gold": "I've fallen for this before myself :) We _do_ call `close` inside of `done` on L65"}
{"pred": "Why is this hardcoded to rclone?", "gold": "That looks fine! You could use `\"rclone/\"+fs.Version` too if you wanted. BTW does tardigrade use http under the hood? If you were using rclone's http Client then you'd get a User-Agent and you'd also get support for `-vv --dump bodies` and other nice things."}
{"pred": "Why do we need to clamp here?", "gold": "Adding one line `prob = prob.clamp(min=EPS, max=1-EPS)` already works."}
{"pred": "I don't think we need the `#if NETSTANDARD2_0` here.", "gold": "another option would be to create a `CreateRequestQueue(bool lockingQeueue)`, and set it only in `InitializeTarget`, isn't? The would prefer having the creation and \"business\" rules for the creation in one region, I think `InitializeTarget` would be the best place."}
{"pred": "`wl_list_insert(&sibling->parent_pending_link, &parent_pending_link);`", "gold": "Wait, I think the `subsurface_handle_place_above` code was correct before. `place_above` means \"place it above in rendering order\" right?"}
{"pred": "Why did you change this?", "gold": "why did this change?"}
{"pred": "Why is this change necessary?", "gold": "Do you think we should have some tests here for `tlf.SingleTeam` too?"}
{"pred": "Why this change?", "gold": "No problem with this but might as well revert this file since nothing else changed."}
{"pred": "Why is this no longer needed?", "gold": "In my changes, I did not create a new `AspNetScopeManager`. I'm not familiar with it enough to know if this is a valid change or not"}
{"pred": "", "gold": "Not cool with this. I think we talked about it in past. This is a side effect. If we want to introduce the side effect in our functions like `inRange` (which I am for) the side effect (error) should originate in that function and not in some internal `throwError` function. Every stacktract will start at line `2` of `trowError.js`. Been there, done that and falled back to throwing the error from the place where it should be thrown."}
{"pred": "Why do we need these methods?", "gold": "We don't need this additional method."}
{"pred": "Why is this change needed?", "gold": "The purpose of this test is to ensure that the `OAuth2UserRequest` passed into `loadUser` is **not** null else throw `IllegalArgumentException`. Changing the `List` of `OAuth2UserService` mocks to `DefaultOAuth2UserService` doesn't really apply to what is being tested here. Please revert this. Thank you."}
{"pred": "`stakingProto` is unused (from `structcheck`)", "gold": "nit: rename to nativeStk? proto might lead to think protobuf"}
{"pred": "nit: `UUID` -> `UUID`", "gold": "Why not `queryUUID` (and reference the same constant as in other places)?"}
{"pred": "nit: typo in the commit message", "gold": "This is also used to log, of which our convention is leading uppercase..."}
{"pred": "`less_precise` doesn't seem to be used.", "gold": "What about we just name it `check_exact`?"}
{"pred": "nit: `getAllServiceNames_mergesAnnotationAndBinaryAnnotation` -> `getAllServiceNames_mergesBinaryAnnotation`", "gold": "before, a binary annotation had the same service name as a regular annotation, masking the bug where we weren't querying the latter"}
{"pred": "I don't think we need this constant.", "gold": "Where does the `7` come from?"}
{"pred": "Why do we need to pass `value` here?", "gold": "I don't know how we haven't got bugs from some of these! As here this would have had a stale `value`"}
{"pred": "I think it would be better to throw an `UnsupportedOperationException` here.", "gold": "One nit here I forgot about this before but we usually structure error messages as \"Cannot X because Y. Then the recommendation goes here\" I would also recommend not using \"it\" in the message since it the pronoun is a bit ambiguous. \"to specify write sort-order\" may be clearer"}
{"pred": "Why this change?", "gold": "I'm surprised this worked at all! It was importing the default export but `eslint-plugin-import` warned me `warning Using exported name 'initialState' as identifier for default export import/no-named-as-default`"}
{"pred": "Use 2 (not 0) spaces for indenting an expression spanning multiple lines.", "gold": "This was used in `app/views/video_tutorials/_video_tutorial_details.html.erb` how are we handling that now?"}
{"pred": "I don't think we need `\\S+(,)` here", "gold": "Is `\\S+` really the right thing? Anybody know what kind of encoding this is? Perhaps if we know it doesn't have commas, we can just use `[^,]+`. Also, parens around the comma are unnecessary, since we're not using the capture group."}
{"pred": "Why did you remove these tests?", "gold": "This block of changes looks like you removed tests without replacing them anywhere. Did I miss something?"}
{"pred": "`includePrivate` and `includeComputed` should be `false` by default.", "gold": "n.b. private and computed values are now exposed to the API. They were hidden/not exposed before."}
{"pred": "Please use `self.tagName() == 'a'`", "gold": "Nitpick: Please add a period after `link` :wink:"}
{"pred": "nit: `Failed to start upstream: %v`", "gold": "we got no chance that `err` is not nil here, need to revisit how `NewUpstreamController` is defined."}
{"pred": "Shouldn't this be `/chromium/heap_snapshot`?", "gold": "Instead of building in routing for a browser-specific command, could you refactor the HttpCommandExecutor to allow arbitrary commands to be registered?"}
{"pred": "Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "It'd be nice to assert the right deprecation is being raised, just add a third argument of `/\"its\" method/`"}
{"pred": "Should this be `write.location-provider.impl.enabled`?", "gold": "Do we want to add this to the docs?"}
{"pred": "`code` and `st.Code()` can be `github.com/gogo/protobuf/types.Code`", "gold": "This isn't really related but makes debugging test failures much easier since you see the string representation of the code instead of the integer value."}
{"pred": "I'm not sure if this is the best way to check if the type has size 0, but I'm not sure if there's a better way to do this.", "gold": "Because of this new early exit."}
{"pred": "This should be `W3CBridge`", "gold": "Maybe call it `WireBridge`?"}
{"pred": "Why do we need to check for `PRIV_DISTRIBUTE_RAW_TRANSACTION` here?", "gold": "can this be removed now?"}
{"pred": "I think it would be better to use `geteuid()` instead of `getuid()`.", "gold": "This is going to create a problem - we are already encountering issues with the length of the usock pathname on recent Linux kernels as the temp directory base has moved down to the var directory under a name created by a hash. So adding another field to it is going to add to the problem."}
{"pred": "I don't think we need the `.stack.yml` suffix, since it's already part of the template name.", "gold": "What do you think about moving this to the `cloudformation` pkg?"}
{"pred": "`$clones` -> `$clones`", "gold": "Please make this private by default"}
{"pred": "Why do we need this?", "gold": "We can add `@Override` annotations to all of the implementations of this method. I think this is a best practice for us, but it would be nicer in any case."}
{"pred": "Why do we need this interface?", "gold": "Most of uses of `RefreshAndGet` seems to be made only for `Refresh` part, result is ignored. We can simplify this method to assigning single responsibility to it - just `Refresh()`."}
{"pred": "I think it would be better to catch `optparse.OptionConflictError` in `add_option`.", "gold": "@Pierre-Sassoulas Are we sure this doesn't create problems? Without it for some reason we get an error on `accept-no-param-docs` being a duplicate error. I couldn't figure out why it did this. This solves the issue and passes the tests, but I wonder if this creates other issues.."}
{"pred": "Shouldn't this be `!c.cgroupManager.Exists()`?", "gold": "Does it make sense to check for \"Created\" here as well? Or should it return an error in such case?"}
{"pred": "Why do we need `identifier.name()` here?", "gold": "Did you mean to use `identifier.toString` here as well?"}
{"pred": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "gold": "interesting! didn't realize this was needed in RSpec 3"}
{"pred": "Why do we need this change?", "gold": "This is to avoid circular reference"}
{"pred": "Why do we need this?", "gold": "As the bokeh renderer also has a ``load_nb`` classmethod (and notebooks are explicitly mentioned in that method name), I would consider making ``_notebook`` into a constant ``notebook_context`` class parameter. The docstring can say it is set to True if the ``load_nb`` classmethod has been called."}
{"pred": "Why was this removed?", "gold": "Where is the actual command generated here? Shouldn't this be taking in `constructor(db, collectionName, options)` and then constructing the command off of that?"}
{"pred": "`filename_size` is not used.", "gold": "Mirror the `OPTIONAL OUT` of fullpath"}
{"pred": "I think this should be `ConsensusV17`", "gold": "Please merge with master and replace with with \"future\" version."}
{"pred": "Why was this removed?", "gold": "Nit: Change is not needed for this PR :slightly_smiling_face:"}
{"pred": "Why do we need this method? Can't we just use `self.raw_vcap_data`?", "gold": "if we are returning `nil` from an `else` I think we can just remove the `else` (and this method will still return `nil`)"}
{"pred": "nit: rename to PerfTimerTest", "gold": "side note: this change is ok as of today because we have not exported the results for this new type to BenchView yet. After we to that the namespace, type name and method name should not be changed (they create a benchmark ID which is used in BenchView)."}
{"pred": "Why do we need this?", "gold": "How exactly are you expecting the user to see issues with their Midas library? It seems like all error information is being swallowed and not clearly reported to the user. Even if the eventual result is to report that loading the file failed, it seems like the exception, in this case, might have more information about why."}
{"pred": "Why do we need to set the write deadline here?", "gold": "Looks good, but seems `ReadMessage` hadn't used this Deadline in Underlying `WSConnection`?"}
{"pred": "`_azkaban_project_dir_size_in_bytes_` -> `_azkaban_project_dir_size_in_bytes`", "gold": "Make it \"___*\" three underscores to make it even less likely to have a collision? I assume it will be hard to change the file name once this change is deployed..."}
{"pred": "Why do we need this change?", "gold": "We don't need this anymore after #2151"}
{"pred": "Why remove `IStringValueRenderer`?", "gold": "this is this removed? I don't understand in the context of this PR"}
{"pred": "PEP8: space after comma", "gold": "`isinstance(ip6, Net6)` instead"}
{"pred": "`returnPartly` -> `returnPartly`", "gold": "Do we really need the param here? If only partial results returned, we could return ResultCode::PARTIAL_RESULTS;"}
{"pred": "Would it make sense to use `filepath.Join(outDir, output)` here?", "gold": "this logic seems duplicated from the other new function. I think it should probably be a member function on `BuildTarget`"}
{"pred": "why did this change?", "gold": "size reduce to 1/4 of using Gob"}
{"pred": "Why do we need this change?", "gold": "The Hash interface states that a call to `Write()` never returns an error. Does this also apply to the number of written bytes?"}
{"pred": "I don't think you need the `/dev/null`", "gold": "In my tests, I found that `[[ \"\" -lt 12 ]]` evaluates to true, but `[[ -lt 12 ]]` is an error, which is why the subshell is wrapped in `\"`."}
{"pred": "Extra empty line detected at block body end.", "gold": "I don't see a validation on `published_on`, we generally shouldn't specify it in the base factory unless the model would be invalid without the model. Is there a different way we can handle this?"}
{"pred": "I wonder if it would make sense to move this logic into `ConstantScoreWeight` so that we don't have to duplicate it everywhere?", "gold": "maybe add a `isExhaustive()` method on the enum to avoid these large conditions?"}
{"pred": "I don't think we need to export these. They're only used in tests.", "gold": "so those regexps were wrong previously? e.g. they would match `/v\\/foo`? If so, raise a bug and fix on the 1.0 branch."}
{"pred": "Shouldn't this be `!$params`?", "gold": "I think with MultiBackend we could have a slightly different logic: return true if there are no configured login targets ( = getLoginDrivers returns an empty array). MultiBackend could also check all configured login targets for loginIsHidden support and verify that at least one of the configured login targets allows login, but I wouldn't go that far without a use case. In a related note, I'm not quite sure if loginIsHidden works with ChoiceAuth at all, but that's a different issue."}
{"pred": "Shouldn't this be `true` by default?", "gold": "Should we add error info for not supporting the compressed binary?"}
{"pred": "Why do we need this?", "gold": "I suggest injecting this into the reconciler. For this and the others. Have Wire generate it and push it into the controller creation."}
{"pred": "Why do we need this constructor?", "gold": "Can't we just make _serializer static? We use same settings every time. I would also put those fields on top of the class for readability."}
{"pred": "Why do we need this?", "gold": "Can't we just use `metadata['websocket_flow']` to identify handshake flows and not add another attribute?"}
{"pred": "Why this change?", "gold": "Funny that we were wrapping this with string interpolation before..."}
{"pred": "Why do we need this?", "gold": "I had an eslint error saying I must \"alias\" my model - so I copied this from controllers/site.js"}
{"pred": "Should this be renamed to `GetMetricPointsAccessor`?", "gold": "unsure if the methodname can still be `GetMetricPoints()` as before..."}
{"pred": "Shouldn't this be `rule_name`?", "gold": "This file contains the functional changes, the rest is for testing."}
{"pred": "\"io/ioutil\"", "gold": "I know you didn't do this, but there's no need for the `nethttp` alias and it was confusing to me - just remove it and s/nethttp/http/ everywhere (it's fine that the package here is http itself, I do the same thing in transport/grpc)"}
{"pred": "Why do we need to force a WAL checkpoint?", "gold": "I felt that this was the most non-invasive way to fix the test, but this does expose some raw DB queries and knowledge about how SQLite works which may be a code smell. The alternative to getting this to pass is to perform enough writes to trigger a checkpoint, but that threshold is determined in the config stage and this test may not be able to know what that page threshold is set to. This could lead to inconsistent test runs which is why I elected to force the checkpoint regardless of the page threshold."}
{"pred": "Why do we need to change this?", "gold": "Is new model format backward compatible with current v2?"}
{"pred": "Why do we need to clear the deliveries here?", "gold": "should we perhaps write a spec that ensures we don't send a welcome email to a user on login when the user is not new?"}
{"pred": "nit: `ContainerTimeoutSeconds` -> `ContainerTimeoutSeconds`", "gold": "I think my preference would be to have the type be a `time.Duration` and use `time.ParseDuration` for parsing."}
{"pred": "Why is this import needed?", "gold": "JMX offers normal APIs for this. I don't think you want the glassfish one."}
{"pred": "Why this change?", "gold": "We should really leave a TODO or something or else we will forget them ..."}
{"pred": "Why this change?", "gold": "This exposes what a bad name `dagster_type` was, but is it crazy to want this to just be `type` -- do we gain usability by being super-explicit that this is a `runtime_type`? If so, would it make sense to rename the `config_field` to be `config_type`?"}
{"pred": "Why not just `return hasattr(self, '_isSelectionAnchoredAtStart')`", "gold": "It might help here if you give a brief explanation of what you mean with a selection being anchored at the start."}
{"pred": "`hash` is unused (from `deadcode`)", "gold": "move cachedStates to handle function"}
{"pred": "This should be `privacyMode` not `privacyMode`.", "gold": "I don't think this can just be renamed; it's saying that privacyMode is a BooleanSetting, which it's not."}
{"pred": "why this change?", "gold": "what was the reason for this change?"}
{"pred": "Why are these being removed?", "gold": "Minor, but these two nullable and the logic around them could be replaced by a Lazy<Bool>."}
{"pred": "nit: remove empty line", "gold": "I think I would just pass in `len(peers)`, on the principle of minimum information."}
{"pred": "How about `read.parquet.in-predicate.limit`?", "gold": "Spark's default value is 10 but it also rewrites IN as OR/EQUALS. We can do better that this because of the way we evaluate IN predicates. On datasets we tested this, we saw performance improvements on IN predicates with up to 200 elements (on sorted column). We may increase the default value a bit but I am very reluctant to make it more than 300 since our jobs were 20% slower with IN predicates that contained 300 elements. That being said, the optimal value still depends on a particular query and table."}
{"pred": "I don't think this is needed.", "gold": "Please update copyright year."}
{"pred": "nit: `nodes_per_second` and `edges_per_second` could be const", "gold": "Same here, could just be `std::setprecision`."}
{"pred": "Why is this being removed?", "gold": "Do we still want the \"admins\" gate?"}
{"pred": "I don't think this snippet is needed.", "gold": "Simple Storage **Service**"}
{"pred": "nit: `DisableAutoObservabilityMiddleware is used to stop the dispatcher from automatically attaching`", "gold": "nit: `it is assumed`"}
{"pred": "Why is this needed?", "gold": "I would appreciate it if you could refrain from using `stdbool.h`. We allow the header files of H2O to be included from C++ (which means that `bool` might be a C++ type), and therefore my preference is to not use `bool` in our code (but instead use `int` or `char` for the purpose) to avoid confusion."}
{"pred": "Shouldn't this be `manage[searchScope]`?", "gold": "@danielbidala What happens if `searchScope` is not defined in `config_relation.yaml` ?"}
{"pred": "Why do we need to do this in a goroutine?", "gold": "Do we want maybe a 1min timeout?"}
{"pred": "Why not use `strings.SplitN` here?", "gold": "I guess code never reaches this line, you can remove `else` block and just `return a[0], a[1]`. Also, probably rename `a` to `auth` as well."}
{"pred": "Why is this needed?", "gold": "Doesn't this no-arg constructor need to be public for serialization to work?"}
{"pred": "Hierdie gebied is reeds aangeheg.", "gold": "Just use the word \"veld\" instead of \"gebied\" here"}
{"pred": "This import is not needed.", "gold": "This change (import org.shredzone.flatter4j.model.User;) does not seem relevant to this fix / commit."}
{"pred": "nit: `Build individual packages with Hydrated RPMs`", "gold": "This should be a Bool() rather than a String(). (See the other PR for an example)"}
{"pred": "Why this change?", "gold": "This should be a failure if we don't get the exact number of expected rules. You can use a constant if you don't want to update several lines any time you update the test rule strings."}
{"pred": "Why did you change this?", "gold": "We need to switch from BeamSync to FullSync when we download all the needed headers, blocks, receipts and state"}
{"pred": "Shouldn't this be g_value_unref_object?", "gold": "Why you duplicate it? The underlaying transport should live as long as the multiplexed one. And must be destroyed after protocol is destroyed. Duplicating the transport may lead to object references hold and maybe memory freeing problems. I think this property must hold a reference to it and not a copy. The copy can lead to memory freeing problems."}
{"pred": "Shouldn't this be `in.Status.ChaosStatus.Experiment.Phase`?", "gold": "`in.Status.Experiment.Phase`. we can omit `ChaosStatus`"}
{"pred": "nit: `oexec` -> `exec`", "gold": "Just curious... why the alias here?"}
{"pred": "Why do we need this?", "gold": "Seems like this should conflict with changes I made during merging of the 20.2 RESX file translation"}
{"pred": "Why do we need this?", "gold": "Why disable this rule?"}
{"pred": "`arg.replace(self._filename, self._filename) if '{}' in arg else arg`", "gold": "I think you don't need the `... if '{}' in arg else arg` part - if the arg doesn't contain `{}`, `arg.replace('{}', ...)` will return the unchanged string anyways."}
{"pred": "Why do we need this import?", "gold": "nit: Should we make this an attribute of the LoadGroupMembersPIpeline class?"}
{"pred": "I think it would be better to use `UPDATE principal SET system_suspended=? WHERE principal_id=?;`", "gold": "need to update this command to use the name field instead of principal_id"}
{"pred": "`getSenderNonce` -> `determineNonce`", "gold": "nit: I can't help but think the privateTransactionHandler should be a base-class member ... every Priv Json RPC seems to need it..."}
{"pred": "`Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB` can be removed.", "gold": "Why does this start the main activity and not the preferences? With `overridePendingTransition(0, 0)`, this could instantly switch the theme without the user being disrupted"}
{"pred": "Why do we need this?", "gold": "Prefer a human-readable string rather than querying specific technologies. How would I indicate a session is running on BrowserStack? Or some custom thing?"}
{"pred": "This should be 0.2.0, right?", "gold": "It appears as though whoever checked in python changes didn't re-run regenerate:expected. I am modifying these files as a result of running that after a sync and build."}
{"pred": "nit: `hasAnyResourceNameParameter` -> `hasAnyResourceNameParameter`", "gold": "This was copied from JavaMethodViewGenerator; only the `public static` method modifiers were added."}
{"pred": "`getMaxPriorityFeePerGas().orElseGet(() -> getGasPrice().getValue().longValue());`", "gold": "this is going to throw for frontier transactions post-london"}
{"pred": "Why did you remove this?", "gold": "The catch clause is not needed. The finally clause alone is enough."}
{"pred": "Why do we need this?", "gold": "Prefer a human-readable string rather than querying specific technologies. How would I indicate a session is running on BrowserStack? Or some custom thing?"}
{"pred": "Why is this change needed?", "gold": "Changing the default value for isClosed from TRUE to FALSE can have other repercussions. We might miss throwing error. Can you please confirm this change."}
{"pred": "nit: `te` -> `stateChange`", "gold": "Please use more meaningful names than `te`here and in other places."}
{"pred": "Why do we need to return `interface{}`?", "gold": "Perhaps this would be more idiomatic as `ConfigFor(interface{}) (*PluginConfig, bool)`?"}
{"pred": "I don't think we need this anymore.", "gold": "nit: We could import `APPLICATION_AMZ_JSON_1_1` from `constants.py` here."}
{"pred": "Why do we need this interface?", "gold": "Should this not inherit from IMvxMainThreadDispatcher?"}
{"pred": "`blockInterval` can be removed too.", "gold": "line is 167 characters (from `lll`)"}
{"pred": "Why is this needed?", "gold": "nit: consider adding a blank line between L15 and L16."}
{"pred": "Why not `ReadVectorSize<extractor::StorageManeuverOverride>`?", "gold": "This is another bug fix: Without skipping the bytes of the vector this would read garbage data."}
{"pred": "Why do we need to load genesis data here?", "gold": "why need this? i don't see Gen.CreatorPubKey being used?"}
{"pred": "I think this should be `/:communities_locale`", "gold": "As previously mentioned, best to drop this locale override. It's not something we only provide in exceptional circumstances. Moreover, it doesn't work for this PR anyway, while massively increasing the code complexity!"}
{"pred": "I'm not sure if this is the right place for this. I think it should be in `pkg/apis/openebs/v1beta1/patch.go`", "gold": "is this supposed to be `Desired`?"}
{"pred": "Why is this test removed?", "gold": "The iterator is not wrapped when the score mode is set to `COMPLETE_NO_SCORES` so you don't need to change this assertion anymore ?"}
{"pred": "`if not os.path.exists(folder):`", "gold": "Is there too much spaces there? (should be 4 I think)"}
{"pred": "`revision` is not used anywhere.", "gold": "IS_FIRST_PULL revision is better to use instance property, not static. When KieClient has only one instance, instance property is better. When KieClient has many instances(not possible), static is not good eitheir."}
{"pred": "This should be `bootstrap3_icon_mixin`", "gold": "This needs to be removed since we removed the mixin."}
{"pred": "why remove weight_?", "gold": "Can `weight_` be deleted?"}
{"pred": "please use `findTaggedServiceIds` instead of `findTaggedServiceIds`", "gold": "This is fine, but by Symfony convention this part is responsability of the compiler pass class, i.e `DependencyInjection\\Compiler\\?`"}
{"pred": "Why do we need to chown the user here?", "gold": "The host object already has a nice way of querying configprint. Try `puppet('master')['user']`"}
{"pred": "Why do we need this import?", "gold": "Let's call this `share` and not `upload` - the user wants to share their flows, uploading is just the implementation of that. :)"}
{"pred": "`config` is not used.", "gold": "It would be better to keep focus on the main text control. But to get around the fact that Dialogs focus their first child on show, even when not active, something like Dialog.isActive should be chcked when appending text, rather than whether the text control has focus."}
{"pred": "Shouldn't this be `md->emitted_size += fixup_indirect_trace_exit(dcontext, trace);`?", "gold": "So is this invoked every time we extend the trace?"}
{"pred": "Shouldn't this be `kv.second.getInt() * 1000`?", "gold": "Why not use switch here?"}
{"pred": "nit: `AuthFree` -> `RequireAuth`", "gold": "I think `NoAuth` is a better name"}
{"pred": "Shouldn't this be `r.Error = awserr.New(...)`?", "gold": "This does create a minor bifurcation in how closing the InputWriter is done in success vs failure cases. Is there anyway to merge this with the success exit path? This is something that seems like it would be better as a function closure instead of method on the `$esapi.Name` type. Can the `es.Close` not be used instead of this method?"}
{"pred": "Why was this removed?", "gold": "Please keep this blank line. PEP8 says: > Method definitions inside a class are surrounded by a single blank line."}
{"pred": "`params.merge(:per_page => count)` -> `params_for_search(per_page: count)`", "gold": "You are not passing in a `:params` key here."}
{"pred": "I don't think we need this log.", "gold": "Probably change \"ovs\" to \"OVS\"."}
{"pred": "`$formParams['category'] ?? $this->getRequest()->get('category');`", "gold": "Please linebreak this"}
{"pred": "Why is this nullable?", "gold": "`= default` is implied here, so having it is redundant. Is it a stylistic choice to include it, or just an oversight?"}
{"pred": "Should this be `AppManager`?", "gold": "Maybe it's time to fix the param name for this interface?"}
{"pred": "Why are these removed?", "gold": "Why are we removing it? Looks like useful info. Obviously, field names should change."}
{"pred": "Why do we need this?", "gold": "Missing fallback to MessageTemplates.ValueFormatter.Instance"}
{"pred": "why do we need to change this?", "gold": "The parameter in the docstring should be fixed too. Actually, why don't you try to implement the other axis? It wouldn't be impossible to do if we use pandas UDF from a cursory look. We have enough time before the next release currently."}
{"pred": "nit: `osconfigpb` -> `osconfig`", "gold": "This also runs a patch if its in the middle of one."}
{"pred": "Why is this change needed?", "gold": "Could we rename this method to `updateKnownStatus` ?"}
{"pred": "Why do we need to set the origin tag here?", "gold": "Maybe it would make sense to move that to DecorateRootSpan? Currently it only has Azure stuff, but given the name of the method I feel like it would be semantically appropriate"}
{"pred": "nit: remove empty line", "gold": "nit: these imports were in a separate group to ones from this repo"}
{"pred": "`isPushMethodEnabled` -> `isPushEnabled`", "gold": "Is it possible to rename the methods to `isXXXMethod` to keep the usage by the caller generic? The caller could use the result of these methods to verify whether a feature is enabled or to validate an input value for example."}
{"pred": "I think this should be `maxAttempts - 1`", "gold": "Don't penalize everyone with 250ms delay b/c some machines have problems."}
{"pred": "Shouldn't this be `log.warn`?", "gold": "This try-catch should be here so that watcher thread doesn't just exit in case of an exception. This change alone would probably be enough to fix the error as well, assuming that there's another `ENTRY_MODIFY` event when the file write is finalized. But of course not a perfect fix because it doesn't protect against possibly reading a non-empty but only partially written file?"}
{"pred": "Why do we need this check?", "gold": "Weird that we have to check for `s == nil` here.. I would instead have fixed the call stack to find out when this gets invoked with a nil server."}
{"pred": "Should this be `Ember.Handlebars.Utils.escapeExpression`?", "gold": "The `import` statement for `Ember` is missing in this file."}
{"pred": "Why do we need this change?", "gold": "Awesome :tada: I'd love to have a test case for this so that we don't regress on this feature in any future refactorings :+1:"}
{"pred": "why this change?", "gold": "For testing some of the rounding functions"}
{"pred": "Why do we need this line?", "gold": "This should be present in UPGRADE notes. Also on currently running projects you should suggest users to update these settings."}
{"pred": "Why do we need to do this?", "gold": "Are you sure you want to do this? This will affect the working set block cache too, such that it'll now be tracking global free space. It throws off the fraction calculation."}
{"pred": "Why not use `std::lock_guard`?", "gold": "Why would the read access need to be mutexed? The caller might still get a wrong answer since the value might change immediately after the mutex is unlocked before the caller receives the value."}
{"pred": "`if tab is not None and mode in input_modes`", "gold": "This fits on one line without the parentheses :wink:"}
{"pred": "Why do we need this change?", "gold": "Looks like `TestCloudRecovery` changes are unrelated?"}
{"pred": "Why did you remove this interface?", "gold": "Try to separate it to different methods. Invoke is huge :)"}
{"pred": "Shouldn't this be `dom_id(plan.id)`?", "gold": "Looks like another spot that would benefit from `truncate`"}
{"pred": "(style) code indent should use tabs where possible", "gold": "This change is not related to what this PR wanted to fix, but undefined behavior sanitizer warns without this parenthesis because `h2o__tokens + i` overflows."}
{"pred": "This should be `no_docstring_rgx is not None`", "gold": "This is actually incorrect and should be the other way around. Going to fix this tomorrow. If `no_docstring_rgx == re.compile(\"\")` no function should be checked, since every function matches the pattern. If `no_docstring_rgx == re.compile(\"^$\")` all functions should be checked."}
{"pred": "Should this be `user-read-recently-played-currently-playing`?", "gold": "Should this be in a config file?"}
{"pred": "Why do we need `shuffle` here?", "gold": "purely preference, but have you considered using parentheses to indicate that a method is being tested? e.g., `describe('eachAsync()')`"}
{"pred": "Shouldn't this be `ERR_IO_ERROR`?", "gold": "Why not return success?"}
{"pred": "Should be `string|null`.", "gold": "Please use snake_case for properties to keep it consistent with the rest of the codebase."}
{"pred": "why is this debug?", "gold": "i don't understand why we need this change. what information is this providing when running in less than Debug loglevel? I prefer to revert this"}
{"pred": "Why do we need this?", "gold": "Oh, so this test leaks DateTimeUtils offset? It would be safer to place the reset in an `@After` method to not cause side effects even if the test case fails."}
{"pred": "Why was this removed?", "gold": "Kind of a nit-pick, but is there no way to solve this while still not rendering an empty div if `footerText` is empty? We could still use the `Row` to maintain the same layout but then only render the `Cell` for the pagination - I think it's possible to use specific classes to horizontally offset?"}
{"pred": "Why does this need to be public?", "gold": "Template is also not an object type so I don't expect to notify on templates. Instead when applying templates, we'll be updating roles/policies/services/groups."}
{"pred": "Why this change?", "gold": "Had to fix this to get my tests passing (should have been a new PR sorry)."}
{"pred": "Why do we need this? Can't we just use `server.CABundle`?", "gold": "Small nit, and sorry for not spotting sooner.. this should have `omitempty` on it, else when marshalling nil values into json, it will be `caBundle: null` which trips up some JSON parsers"}
{"pred": "`transpose` -> `transpose_layout`", "gold": "Would be good to say the normal behavior is scanline order (left to right, top to bottom) and that transposing makes it work top to bottom and left to right."}
{"pred": "`--drive-use-created-date` -> `--drive-use-modified-date`", "gold": "Perhaps note here that `--drive-use-created-date` takes precedence if both set?"}
{"pred": "why do we need to change this?", "gold": "Use EPS=1e-15 as that in atss_head or FCOS head."}
{"pred": "why do we need to change this?", "gold": "Is there a need to replace the Index with a MasterIndex?"}
{"pred": "Why do we need to call `verifyExecAgentRunningStateChange` here?", "gold": "are we adding stop state change in a different PR?"}
{"pred": "Style/SymbolProc: Pass &:name as an argument to uniq instead of a block.", "gold": "How much difference is there between sort and sort_by ?"}
{"pred": "Why do we need this variable?", "gold": "count doesn't seem to be used. Let's remove it."}
{"pred": "`Thread.current[\"[mongoid]:query_cache\"] ||= {}`", "gold": "Mongo is a hard dependency for Mongoid. Why do we need an if-statement to if it's defined? We should always use Mongo::QueryCache"}
{"pred": "I don't think we need the `foreign_key: true` here", "gold": "Does this point out at a ROR funder id? If so, could we get rid of the `funder_name` field on the plan and just use the `name` of the funder with id `funder_id`?"}
{"pred": "Why do we need this?", "gold": "Use !! to cast to bool, rather than the ternary bool antipattern."}
{"pred": "Shouldn't this be `sn.Paths[0]`?", "gold": "why is it in the list twice to begin with?"}
{"pred": "Why is this check needed?", "gold": "This way you will **never** be kicked while monsters are around you."}
{"pred": "Why is this needed?", "gold": "Can you please revert changes to files in the `thoughtworks` package? This is legacy code and we will eventually phase out RC."}
{"pred": "`moduleSlugs` -> `moduleSlugs`", "gold": "This just fixes an unrelated prop type error, correct?"}
{"pred": "I don't think this is correct. `adds` and `dels` are the same thing.", "gold": "This was a bug in KBFS-2071 -- oops."}
{"pred": "Why do we need this?", "gold": "// Condition is a condition for ... Condition"}
{"pred": "Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "Might be good to test that no emails were sent out, either. You should be able to use `deliveries` for this"}
{"pred": "What is the reason for this change?", "gold": "Right now this is experimental and deeply flaky. We left this at `info` to make debugging user reports a lot easier."}
{"pred": "Why do we need this?", "gold": "Is this new list being consumed yet?"}
{"pred": "Why was this removed?", "gold": "moved to `errors.go` which is the only places `math/rand` is used in this package"}
{"pred": "`use` statements must be ordered by length", "gold": "This use is wrong, corrent is: `Shopsys\\FrameworkBundle\\Component\\Environment` It is the same in classes below"}
{"pred": "Shouldn't this be `remoteHost` instead of `remoteHost`?", "gold": "This is not really needed, the line added in `GridNodeConfiguration.java` is what really fixes the `remoteHost` regression."}
{"pred": "Why is this being removed?", "gold": "For my understanding, why was this removed?"}
{"pred": "Why did you remove this?", "gold": "the whole idea was to display information on the plugin directory in case it was missing - need to add if...else... and display the plugin dir if it is configured (non empty) but cannot be found"}
{"pred": "I think it would be better to use `TextUtils.isEmpty` instead of `TextUtils.isEmpty`.", "gold": "Can you please set this as an error on the password view, rather than a toast, just to make sure that it is kept consistent. Check out a couple of lines below."}
{"pred": "Why is this \"openvpn\"?", "gold": "Shouldn't we pass here a proposal too?"}
{"pred": "Shouldn't this be `str(exc_info.value)`?", "gold": "im not a huge fan of exact text match in these tests, not sure what a good solution is that solves the same problem"}
{"pred": "I think this should be `POST` instead of `PATCH`", "gold": "this should _not_ be in the api. all postage APIs have moved to the debugAPI"}
{"pred": "I think this should be `node.get('file') is not None`", "gold": "Including both functions seems like overkill for this PR since only _is_internal_node is ever used. Keep them if you think they'll both be used in the future, but if not, the code will be easier to read if you collapse the logic into a single function."}
{"pred": "Why did you change this?", "gold": "It seems that the two words mean the same thing."}
{"pred": "Shouldn't this be `logIdAndTerm.second`?", "gold": "Do we need to set lastLogTerm_ to committedLogTerm when `lastLogId_ < committedLogId_`, on line 286"}
{"pred": "Shouldn't this be `+ dic.wordHashes.size()`?", "gold": "About ~7% memory usage increase on average, at most 512KB"}
{"pred": "I don't think this is the right place to put this. I think it should be in the Handle interface.", "gold": "Was this too big of a pain to do now?"}
{"pred": "Why do we need to change these to `zeros`?", "gold": "Why need to spend time for initializing of array? when will we rewrite the contents anyway? This can take a lot of time in some algorithms. Especially if the filling is in sequential mode."}
{"pred": "`null: false, default: ''`", "gold": "Can this be `null:false, default: ''` to avoid the nil vs blank issue?"}
{"pred": "Style/StringLiterals: Prefer single-quoted strings inside interpolations.", "gold": "Had to add this to get macOS to work."}
{"pred": "Missing license header.", "gold": "What is the usage of this class?"}
{"pred": "Why do we need to pass `null` here?", "gold": "Could we keep the original signatures as well, so we do not have to rewrite the method calls everywhere and add `null, null`? I think this could greatly reduce the changes needed in this patch"}
{"pred": "Why do we need to clear tombstones here?", "gold": "Ideally this error should not be swallowed (can do in the next PR)"}
{"pred": "Can you add a docstring to this function?", "gold": "Wait a minute... You're passing it as a POST parameter. There's no way that can work."}
{"pred": "Why do we need this log?", "gold": "minor: to be consistent with other logs, either use \"cleaning up\" (preferred) or \"cleanup\"."}
{"pred": "This should be `REDIS_NAMESPACE = \"redis\"`", "gold": "Adding the config changes to the consul config template `consul_config.py.ctmpl` would be helpful too."}
{"pred": "I don't think we need `LABORATORY` and `RESEARCH_GROUP` here.", "gold": "While we're at it should we add Department? See Dataverse Category: Add Department #2829"}
{"pred": "Extra empty line detected at class body end.", "gold": "Files should have an extra line at the end of them."}
{"pred": "Why do we need this change?", "gold": "TODO: check whether this is needed or not"}
{"pred": "nit: can we call this `Insecure`?", "gold": "`ReadConfig` is a global variable (from `gochecknoglobals`)"}
{"pred": "Why is this needed?", "gold": "This is duplicated with `+build !cgo`?"}
{"pred": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "gold": "This should just be `.not_to raise_error` otherwise it potentially hides errors"}
{"pred": "add `numeric_only : boolean, default False`", "gold": "Line 175 needs to be indented so that it's under `sfun`."}
{"pred": "Why is this needed?", "gold": "It looks strange a bit. What is the reason?"}
{"pred": "Why is this needed?", "gold": "Is this one of those `LexicalPreservingPrinter` issues?"}
{"pred": "I don't think this is the right way to do this. If the slice is of type uint8, it should be written as `buf.WriteString(\"<binary>\")`.", "gold": "Can we also add the length of the slice here? Some like `<binary> len %d`"}
{"pred": "nit: remove empty line", "gold": "move this line together to after line 16, group internal packages together"}
{"pred": "Use 2 (not 0) spaces for indenting an expression spanning multiple lines.", "gold": "How about using a reference(project_id) instead of project name"}
{"pred": "Why is this empty?", "gold": "File is not `gofmt`-ed with `-s`"}
{"pred": "please add a space after the `if`", "gold": "@qqmyers this looks fine but have you seen any performance issue here? If so, we could right some helper method like doesExternalToolNeedDataset(externalTool). But if there's trivial performance impact, not worth it."}
{"pred": "`usingLocalPrefs` -> `useLocalPreferences`", "gold": "Make this a member variable instead (move to header inside `class` and rename to `m_bUsingLocalPrefs`)."}
{"pred": "Why do we need to skip pin-mongos tests?", "gold": "Generally I'd say we should factor this out into something more extensible (check an array of potentially skipped tests, for examples), but since we're likely to remove this soon for scheduled work I think this is fine. What do you think @daprahamian?"}
{"pred": "Shouldn't this be `-std=c++11`?", "gold": "Why are we skipping these tests? they should be passing in HIP-Clang."}
{"pred": "I don't think you need the `object` here.", "gold": "I think a \"string\" in Scapy's spirit (if such a thing exists) is actually a `bytes` object in Python 3 (see `Str*Field`s). So maybe `RandString._fix()` should return a `bytes` object. What do you think?"}
{"pred": "Why do we need this?", "gold": "This can be combined to 1 line, just tested, seems to work."}
{"pred": "nit: `chainId.equals(EthNetworkConfig.MAINNET_NETWORK_ID)` should be enough", "gold": "what needs to happen if it is not present?"}
{"pred": "Why do we need this?", "gold": "`DeploymentConfig` is only for deployment configuration not Piped configuration so `ds.DeploymentConfig.PipedSpec` is always nil. Instead of that, you can have Piped config with `e.PipedConfig` because it is placing inside `executor.Input`."}
{"pred": "I think this should be `s3_set_bucket_object_acl`", "gold": "Simple Storage **Service**"}
{"pred": "Why is this public?", "gold": "This line doesn't seem to be right?"}
{"pred": "Why do we need to update the policy here?", "gold": "this need to be moved up after getting policy.."}
{"pred": "Should this be `platform.gcp.project.*`?", "gold": "I'm curious - is there a way to test these?"}
{"pred": "Why do we need this change?", "gold": "This was broken before as the name of the metadata table started with its type, not catalog."}
{"pred": "Why do we need this?", "gold": "Maybe remake `VersionAsString()` function, so that that we would have build info in all places"}
{"pred": "Why do we need to check SSL_pending here?", "gold": "This should probably say something other than SSL_peek?"}
{"pred": "This should be `2020-2020`", "gold": "Nitpicking, but this should be capitalized since it's a product name :)"}
{"pred": "Why do we need this?", "gold": "Why do we need RawTransactions?"}
{"pred": "nit: remove empty line", "gold": "File is not `gofmt`-ed with `-s` (from `gofmt`)"}
{"pred": "Shouldn't this be `<=` instead of `>=` ?", "gold": "should not be this lessThan15MinAgo ?"}
{"pred": "I don't think this is the right way to do this. If the request line contains non-ASCII characters, it should be rejected. If the request line contains non-ASCII characters, it should be rejected.", "gold": "Would it work if we changed the return type of 'RejectRequest*' methods to Exception and instead did `throw RejectRequest(...` ?"}
{"pred": "Why remove `browser.web0s || options.supportsDts`?", "gold": "It is not a \"perfect\" test, but: webOS 1.2 emulator says `probably`. webOS 3 emulator says \\``. webOS 4 emulator says \\``. Why did you remove `options.supportsDts`?"}
{"pred": "Shouldn't this be `srcCtx == dstCtx`?", "gold": "This check should be after the HIP_INIT_API to ensure HIP tracing & lazy init works correctly. Also return should be wrapped in ihipLogStatus() so that logging works correctly."}
{"pred": "`$clearSearchIndex` -> `$clearSearchIndex`", "gold": "Can't use short array syntax for the 3.1 release branch."}
{"pred": "Is this intentional?", "gold": "@rhc54 Is this intentional or for debug purposes?"}
{"pred": "I don't think you need the `key` variable here, you can just use `on_resource_changed`.", "gold": "Maybe it should be `plugins.history` here instead of `listeners.X`, since we use those for listeners configured via `.ini` files?"}
{"pred": "Similar blocks of code found in 2 locations. Consider refactoring.", "gold": "Hmm, I also don't have a better idea here. As a small thing, could you make this `@team_page.present?` or similar to make the intent slightly more clear?"}
{"pred": "Shouldn't this be `ivLength < 16`?", "gold": "Without that check it would fail later (probably in the getDecryptingCipher method) but the error could be hard to make sense of."}
{"pred": "Why do we need these methods?", "gold": "I don't think that this belongs in the host code. A host is pretty much unaware of what hypervisor is running it and I don't want them to be so coupled to their hypervisor."}
{"pred": "This should be `setuptools>=12`", "gold": "I'm here to tell you that this doesn't make sense because of the way it works. `setuptools.setup()` installs this only for setup-time and then discards those. But the problem is that it will not pick up a newer version because the older version is already in runtime and module cannot substitute itself. The proper place for adding build deps nowadays is `pyproject.toml`->`[build-system]`->`requires'."}
{"pred": "Why do we need this change?", "gold": "fakeConnectionManager -> mockConnectionManager. We probably should not use the `fake` anymore."}
{"pred": "`os.path.abspath` is not needed here.", "gold": "Code style. Btw, it's weird Codacy didn't catch that."}
{"pred": "`NewEthAddress` is unused (from `deadcode`)", "gold": "no need in BigInt just m.Unwrap().Big().Bitlen() == 0"}
{"pred": "Shouldn't this be `ctx.flowOperations.Add(flow)`?", "gold": "I assume you want to change NetworkPolicy to use bundles in a separate PR later?"}
{"pred": "Why is this change needed?", "gold": "nit: We could parameterize the commit hash, as it's used in multiple places."}
{"pred": "This should be `underscore.js`", "gold": "move this above the \"Constants\" as this is 3rd party ones"}
{"pred": "I think it would be better to use `assert_capabilities_are_exposed_on_homepage`", "gold": "`assert not in`"}
{"pred": "Should we emit a state change event if the status is `execcmd.Restarted`?", "gold": "just curious, why was this modified?"}
{"pred": "HiveTableName -> HiveTableName", "gold": "I'm curious why the table name is bound at compile time? Is it just to save the table create/drop overhead in a prepare-once-execute-many situation?"}
{"pred": "why is this removed?", "gold": "quick question, isn't ProcessJob used by all job types? Then why is JOB_ID not found?"}
{"pred": "I think this should be `new IntegerSetting(Account.DEFAULT_RESIZE_IMAGE_CIRCUMFERENCE)`", "gold": "looks like you forgot to actually increase the version"}
{"pred": "I don't think we want this to be a public API.", "gold": "I think it might be helpful if we add `Default value: False.` on the end of the summary."}
{"pred": "`config.sync.fullSynchronized !== undefined && config.sync.fullSynchronization && config.schema === undefined`", "gold": "I think the check should be `config.sync.fullSynchronization === false` - otherwise this will get triggered even when full sync is `true`."}
{"pred": "I think this should be `secretEncryption` instead of `se`", "gold": "this blown my mind  "}
{"pred": "Can we remove this?", "gold": "this should be controller-container-status"}
{"pred": "Why do we need this import?", "gold": "Sort import. You can use IDE's organize import feature."}
{"pred": "Why is this needed?", "gold": "Can you please revert changes to files in the `thoughtworks` package? This is legacy code and we will eventually phase out RC."}
{"pred": "Why do we need to skip this test?", "gold": "This PR is off to a rough start. :)"}
{"pred": "I think this should be `config.proxyAutoconfigUrl && !config.pacUrl`", "gold": "Actually, it looks like the entire `normalizeProxyConfiguration` function isn't needed anymore"}
{"pred": "I think this should be `if excluded_portal_link.present?`", "gold": "How about `unless current_path == carts_path`?"}
{"pred": "This should be `2021-2022`", "gold": "You need to modify the copyrite aliases so it's done automatically."}
{"pred": "Why do we need to do this?", "gold": "Quick question: Is this true for all `onAnimation*` and all `onTransition*` events?"}
{"pred": "Why is this needed?", "gold": "Should sending an address into address error? Since the call isn't needed, and could be fixed easily."}
{"pred": "I don't think we need this import.", "gold": "This is the wrong MDC; see MDCLoggingContext which imports `org.slf4j.MDC`"}
{"pred": "nit: `initialHistoricDetails()` would be a better name", "gold": "Maybe we can clarify a bit what that means."}
{"pred": "Why do we need to pass cancellationToken here?", "gold": "This entire method can be deleted; it isn't used and it isn't an override of Stream."}
{"pred": "Do we need this import?", "gold": "We avoid static method imports. Can you call `MetadataTableUtils.createMetadataTableInstance` instead?"}
{"pred": "Why is this needed?", "gold": "No need for this, as pylint already only turns things off for this function and it's needed for the entire function."}
{"pred": "`includes_mentor?` -> `includes_mentor?`", "gold": "I'm actually surprised this is valid Ruby. I thought you'd need either `delegate(...)` or `delegate \\ ...`."}
{"pred": "Why is this change needed?", "gold": "Why change this?"}
{"pred": "Shouldn't this be a `TypeError`?", "gold": "Maybe change it to `'Can't UPLOAD remote files when bundle: true is set'`?"}
{"pred": "Why do we need this try/catch?", "gold": "Do we need to drop the remaining items from the batch? Otherwise we might end up with a dead loop. Add @CodeBlanch for awareness."}
{"pred": "I don't think this is the right place to do this. We should be able to submit a dummy PoSt even if there are no committed sectors.", "gold": "Because power is now added during `submitPoSt` this is needed for setting power in the genesis block. Again let me know if this bootstrapping solution is flawed."}
{"pred": "Shouldn't this be `ReflectionParameter::getType`?", "gold": "To be consistent, these should go at the top between `DateTimeZone::listIdentifiers` and `SQLite3::createFunction`."}
{"pred": "Why not throw an `UnsupportedOperationException`?", "gold": "I think we should avoid changing any lucene classes for the moment - fileModified() can probably stay where it is?"}
{"pred": "Shouldn't this be `View.GONE`?", "gold": "GONE breaks formating of \":\". or is it fixed below?"}
{"pred": "Yes, we should deprecate all methods from ASTFormalParameter", "gold": "What do you mean with this? Won't the deprecation be inherited?"}
{"pred": "\"Customise class prefix for C++ object-based API.\"", "gold": "line between \" and \" should be <80 chars."}
{"pred": "Why was this removed?", "gold": "What will happen if neither `rvm` nor `ruby` is present in the .travis.yml?"}
{"pred": "`struct.pack(\"<H\", len(pay)) + p[4:]`", "gold": "@p-l- Hey it seems that this was len-4 ?!"}
{"pred": "Why do we need to receive settings here?", "gold": "This is something I added which resolved a few large errors in the output, although not related to the refactor here I don't think."}
{"pred": "Why was this removed?", "gold": "i have removed this line because whenever a video is played in AntennaPod this line was making play button invisible"}
{"pred": "Missing Apache license header.", "gold": "remove temporary code"}
{"pred": "Please add `@since` and `@since`", "gold": "* Should be tagged `@Unstable` * Should be a default method, returning `null` * Also, perhaps `Optional<Long>` instead of just `Long`? Always empty when the BASEFEE isn't relevant? If so the default is `Optional.empty()`"}
{"pred": "Should this be `TEST_DATA_STORE_NAME`?", "gold": "Minor detail, but let's use the interpolated template string syntax instead."}
{"pred": "Why do we need this?", "gold": "this line is so long, split it to multi lines."}
{"pred": "Shouldn't this be `||` instead of `&&`?", "gold": "Looks like this might be one of those \"promoted features\" where you can enable it by _either_ enabling the extension _or_ enabling the feature bit. If that is the case, I think this needs to be: `(device_extensions.vk_ext_scalar_block_layout == kEnabledByCreateinfo) || (enabled_features.core12.scalarBlockLayout == VK_TRUE)`."}
{"pred": "Why is this needed?", "gold": "Why should we define it for v1? This is preserved only for backward compatibility, all further modifications must be done in the latest vX"}
{"pred": "Should this be `False`?", "gold": "This is a definite improvement! Hardcoding nonzero is vastly better than hardcoding length. Even so, is there no way to determine the actual value of nonzero in a way that doesn't load the entire dataset?"}
{"pred": "nit: `GetUriTagValueFromRequestUri` -> `GetUriTagValueFromRequest`", "gold": "do we have a way to avoid the string concats, if there is no username/password in the Uri? if (uri has UsernameInfo) { do what is done in this PR. } else { existing behavior. }"}
{"pred": "Why do we need this?", "gold": "do not print the payload since it might be corrupted, you can get the data with _debug.http.response_payload configuration property"}
{"pred": "Shouldn't this be `./copilot`?", "gold": "maybe \"app init creates an copilot directory and a workspace file\"? since you validate for the file as well."}
{"pred": "Layout/TrailingWhitespace: Trailing whitespace detected.", "gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping."}
{"pred": "Why did you change this?", "gold": "Nit: Could rename this file from SabreEvent.php now that it's not for Sabre"}
{"pred": "I don't think we should be using defers here.", "gold": "I believe this `Stop` function _is_ called with deferred."}
{"pred": "Shouldn't this be `controlCallback: ( { clientID } ) => {`?", "gold": "This entire clause should now be removed. It was only relevant if `accountID` couldn't be parsed from `clientID`, which is now no longer needed."}
{"pred": "Shouldn't this be `https://docs.readthedocs.io/en/latest/`?", "gold": "FTR: Unlike commonly known practice, `latest` in Ansible docs corresponds to the stable version, not to the latest state of the main Git branch. Is this your intention? Just checking..."}
{"pred": "Shouldn't this be `HIVE_DEFAULT_CHARSET`?", "gold": "Why do we have || CharInfo::UnknownCharSet here? I do not see it it in neighbouring statements. This is just for my understanding."}
{"pred": ">_pendingRequests [](start = 16, length = 14) nit: rename to _pendingRequestsDictionary", "gold": "isn't `HttpWebRequest` an expensive key value?"}
{"pred": "I think you can use `where.not(id: observations.pluck('user_id'))`", "gold": "couldn't we run this query whether there are observations or not?"}
{"pred": "Why this change?", "gold": "This shouldn't be needed to change right?"}
{"pred": "Shouldn't this be `serveStatic`?", "gold": "This seemed broken to me. Why would browserify only check the (previously `cdn`, now) `bundle` example? And even so, the path is incorrect here. Fixing this is unrelated so should not go into this PR I feel. But when we fix this in master, perhaps that solves the reload issues that you experienced @hedgerh?"}
{"pred": "Why is this being removed?", "gold": "Same question, do we have potential version-conflict crashing scenarios here?"}
{"pred": "I'm not sure if this is the best way to do this, but I'm not sure what the best way to do this is.", "gold": "Definitely not required, but it would be better if you had a constexpr for `\"INPUT_DUMMY\"`"}
{"pred": "Why was this removed?", "gold": "It seems ok. Because already created a file name at line 1815 and already checked if it is null or empty at line 1816. If file name is null, then already this line will not executed."}
{"pred": "`getArrowGlacierBlockNumber` -> `getArrowGlacierBaseFeePerGas`", "gold": "Can all the BaseFeePerGas methods that are added be removed? It's not needed for the bomb and not referenced anywhere else in this PR."}
{"pred": "`Warning: the provided docroot at %s does not currently exist.`", "gold": "util.Warning()? Easier to say."}
{"pred": "why are these removed?", "gold": "these 2 no longer needed after refactor"}
{"pred": "nit: `fsType` -> `fsType`", "gold": "most spec options appear to be snake case - `fa_direct_raw_block`, let's stick to that convention"}
{"pred": "Why was this removed?", "gold": "Looks like we can then drop this dependency."}
{"pred": "Why do we need to reload all scripts?", "gold": "3) Subscribe to the script change signal in `FlowMaster.__init__`. The event handler should call `self.masterq.put((\"script_change\", script))`. 4) Add a `handle_script_change` function, that once called, takes the script object and calls `script.reload()`."}
{"pred": "Why do we need these methods?", "gold": "This method is for unit testing only, right? How about making it package private? This way the readers would know that this is not a public API outside this package and would reduce the search space."}
{"pred": "", "gold": "accidental? i guess it's the same as any other boilerplate"}
{"pred": "`logger` is not used.", "gold": "shadowing the builtin, let's use function or func or callable_"}
{"pred": "Why is this needed?", "gold": "Can you add some good examples, for instance integers, strings and whatnot?"}
{"pred": "Why do we need this file?", "gold": "Can we just have 2017 here @kmova if possible, as i seen in other projects as well( kubernetes etc..), they mentioned only the year when the file has been created."}
{"pred": "Why did you remove this line?", "gold": "@Tony-LunarG I just realized that this differs from the previous behavior in that spirv-opt will run on the byte code if there are any \"group decorations.\" If this is a problem, I can add an additional constructor to keep the pre-existing behavior."}
{"pred": "Why do we need `column.getPrimitiveType()` here?", "gold": "Nit: continuation lines should be indented 4 spaces from the start of the statement."}
{"pred": "Why is this needed?", "gold": "Are these protected by any kind of lock?"}
{"pred": "Shouldn't this be `hierarchical_name`?", "gold": "This should probably default to a string, as get_resource_ancestors is causing the tests to fail due to the rsplit on a None hierarchical_name."}
{"pred": "nit: \"A reference by name to a Kubernetes [IngressClass] object\"", "gold": "I prefer not to have markdown here, while it is nice for the site this is also shown for `kubectl explain` where this will look weird"}
{"pred": "This should be `DEFAULT_ISMASTER_36`", "gold": "@durran Was this change intended to be included in this PR?"}
{"pred": ">null [](start = 51, length = 4) null #Resolved", "gold": "Feels like this could have a default null value to remove the need for this explicit \"null\" use."}
{"pred": "Should this be `createFilestore`?", "gold": "\"failed to create ...\""}
{"pred": "Why this change?", "gold": "No formatting directives, `glog.Error` will do just fine."}
{"pred": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "gold": "This should just be `.not_to raise_error` otherwise it potentially hides errors"}
{"pred": "Shouldn't this be `time.Since(startTime)`?", "gold": "Need an `if err == nil {break}` above this line so that we don't log/sleep if the retry succeeds."}
{"pred": "Why did you remove this interface?", "gold": "Separate it to different methods :D Invoke method look's like old fashion portal class :D"}
{"pred": "Why was this removed?", "gold": "Collapse/expand animation of filter is broken - not smooth."}
{"pred": "Why is this being removed?", "gold": "so during the `script` stage we run `mvn install`?"}
{"pred": "nit: remove empty line", "gold": "we may need to move CandidateNamespace to this protocol as it is only used here."}
{"pred": "nit: space after `==`", "gold": "Just to confirm, this will take care of all the nodes in graph. right?"}
{"pred": "nit: extra space after `string.Format`", "gold": "nit: remove this line. All \"arrange\" may be in one code block."}
{"pred": "`Xattr is a tuple storing the xattr name and value`", "gold": "This name is not a good fit, what about `ExtendedAttribute`? Or even just `Attribute`?"}
{"pred": "`strcmp(expval, val) == 0`", "gold": "lets keep our \"testing framework\" header only if possible. since there is an `assert(0)` in there, it is intended to halt on the first test failure."}
{"pred": "Why did you remove the vote?", "gold": "File is not `goimports`-ed (from `goimports`)"}
{"pred": "Why is this removed?", "gold": "I was saving this white-space for my retirement :nit:"}
{"pred": "I don't think we need the `skip_after_action` here.", "gold": "What if you don't want to continue with the behavior, but you just want the deprecation to go away? Should we add `skip_after_action :discard_flash_if_xhr`?"}
{"pred": "Why do we need this change?", "gold": "change `accountNonceMap` to map[address.Address][]uint64"}
{"pred": "Why do we need this?", "gold": "The `CLIENT_CONFIG` is \"client_config\" with underscore, so we can't reuse it in the second arg."}
{"pred": "I don't think we should be enabling a batch size of 1. We should be enabling a batch size of 2.", "gold": "Does this mean all admins get the default batch size (which is 20) no matter the value of `-sync-batch-size`? It seems the command line flag doesn't do anything then does it?"}
{"pred": "`CurlDownloader not supported param `acceptedHeaderTypes`", "gold": "Set default value as empty array instead of null"}
{"pred": "Shouldn't this be `logrus.WithField(\"route\", routeUpd)`", "gold": "Would be good to UT this case"}
{"pred": "Why do we need this change?", "gold": "this was updated after linking the latest ethereum/tests after a submodules recursive update"}
{"pred": "Why do we need this?", "gold": "Todo: find a way to only do this in one spot, ideally with defaults for the stuff we use"}
{"pred": "Do we need this import?", "gold": "Imports should not have blank lines. Sorry there isn't a checkstyle rule running for this yet, we still need to update the build for this one."}
{"pred": "Shouldn't this be `if not callable(feval):`?", "gold": "Please move this to L3115 to group the code logically - all code for `feval` in one place."}
{"pred": "Why does this need to be public?", "gold": "This was done to wrap the operation so it could be spied upon during testing. Likely needs to be undone once an alternative test is discovered."}
{"pred": "Shouldn't this be `time.Duration(cr.Expires) * time.Millisecond`?", "gold": "I feel we need to impose a lower limit here maybe? What about a max and default for when none is set?"}
{"pred": "Why do we need to call `cdsObjectToUpnpavObject` here?", "gold": "ineffectual assignment to `err` (from `ineffassign`)"}
{"pred": "Why is this a func() string instead of a func() string?", "gold": "Ahhh... this makes sense. Does using functions to defer evaluation of these values have anything to do with #916 (where the `Host: {host}` was 'cached' between different hostnames)? If not, could you help me understand what this change does?"}
{"pred": "Shouldn't this be `listenSocket_ < 0`?", "gold": "Perhaps the only test needed is to see if the socket is not an invalid socket? Is the >= 0 test necessary at this point?"}
{"pred": "I think it would be better to use `stripe_customer_path(current_user.stripe_customer)` here", "gold": "Could this line use `url: current_user.subscription`?"}
{"pred": "`preg_quote($quoted_remove_var_id, '/') . '[\\]\\[\\-]/', $var_id)`", "gold": "I was seeing `Warning: preg_match(): Unknown modifier 'a' in /path/to/project/vendor/vimeo/psalm/src/Psalm/Context.php on line 480` here"}
{"pred": "Why is this needed?", "gold": "The changes in this file are not necessary."}
{"pred": "nit: remove empty line", "gold": "run `make lint` to fix"}
{"pred": "I think this should be `execute_pipeline(unreliable_pipeline)`", "gold": "we will need `assert result.success` instead. result will always be not null because it returns an execution result including several metadata - when the execution fails, it'd return an execution result whose `success` attribute is false."}
{"pred": "nit: `ZvolWorkers represents number of threads that execute client IOs`", "gold": "Can we mention how can one determine the best value given an infrastructure? Does it default to any value?"}
{"pred": "Whitespace found at end of line", "gold": "Leave this formatting the way it was please, that's the standard across all of October's files."}
{"pred": "I think this should be `go-selinux`", "gold": "@runcom says there is no need to use `selinux` here. `selinux` \"github.com/opencontainers/selinux/go-selinux\" The code should work fine without it."}
{"pred": "`LIFECYCLE_STATE_UNSPECIFIED` -> `LIFECYCLE_STATE_ACTIVE`", "gold": "nit: It might be worth defining these elsewhere as a python-type?"}
{"pred": "nit: space after `=`", "gold": "prefix it with azkaban. Maybe azkaban.server.schedule.enable_quartz?"}
{"pred": "Should this be `Puppet::DataBinding::LookupError`?", "gold": "It'd be nice if we also caught `Unknown variable $trusted / $server_facts / $settings::` here - while I highly doubt anyone is using them (and if they are they're surely misusing them) it'd be crazy-making to have a working plan suddenly start failing with no clue as to why."}
{"pred": "Why do we need this?", "gold": "Probably need to understand/implement this one now."}
{"pred": "Why do we need to check for null here? Wouldn't `depValidationStatuses.put(d, null)` be sufficient?", "gold": "It will be better to add contains check for key in hashAndFileNameToDep instead of null check over here. All of these should be inside that contains if case."}
{"pred": "`curl_retries = 120 if curl_retries.nil?`", "gold": "perhaps these magic numbers could go into a Defaults module somewhere? 8140 implies the default is for puppet server. i guess that's somewhat reasonable. but if we're trying to decouple beaker from puppet, maybe this should be 80?"}
{"pred": "I don't think we need this function.", "gold": "style violation: { on own line"}
{"pred": "Shouldn't this be `H2O_COMPRESS_HINT_ENABLE | H2O_COMPRESS_HINT_DISABLE`?", "gold": "Could we accept caseless strings (e.g. `off`, `on`, `auto`) instead of numbers to indicate the mode? Of course, we should use an enum internally (as we already do)."}
{"pred": "`GetTipSetStateRoot` is unused (from `deadcode`)", "gold": "The sender doesn't use `GetTipSet`, so please remove it from this interface."}
{"pred": "Why did you remove the static imports?", "gold": "We can get rid of this import then."}
{"pred": "Why do we need to change this?", "gold": "These configurations are currently overwritten in the props we provide in our config files. They need to be overridden there as well after you make this change."}
{"pred": "I don't think we should ignore the error here.", "gold": "Why is error ignored here?"}
{"pred": "I think this should be `bios-grub-legacy`", "gold": ">PartitionFlagBiosGrubLegacy PartitionFlag = \"bios-grub\" [](start = 1, length = 55) I presume this is to fix a breaking change...and it's too late to fix the breaking change (since it already escaped into the world?)"}
{"pred": "`dataManifests` -> `dataManifests`", "gold": "Is this explicitly ignoring the effect of deleted rows on partition metrics or is it just that you are short circuiting any delete files (as we can't use them anyways)"}
{"pred": "I don't think this is the right way to do this. If the tool doesn't have a `defaultParameters` key, then the `defaultParameters` will be `null` and the `defaultParameters` will be `\"\"`.", "gold": "I would also check whether or not this \"defaultParameters\" is null or empty to allow for people to omit it from the config file."}
{"pred": "Why this change?", "gold": "I think event.Content is of type interface{}, so we may need %v here?"}
{"pred": "BibEdit -> Legacy BibDatabase", "gold": "Note: `editor` depends on legacy `BibEdit`"}
{"pred": "`duraton` -> `duration`", "gold": "we should probably deprecate (and display a warning) the misspelled keyword arg here rather than removing it... and then add the new one. This changes a public API and will break any code that is currently using the misspelled version."}
{"pred": "You can use `self.assertRaisesRegex` here", "gold": "I'm wondering if a positive test case is needed here? Then we might compare the result DataFrame with a pre-created Koalas DataFrame."}
{"pred": "I don't think this should be changed.", "gold": "I think it was reversed"}
{"pred": "Why did you remove this constructor?", "gold": "The setter \"setName\" can be package-private as well"}
{"pred": "Why this change?", "gold": "Not sure if this is intentional or snuck in through find/replace; while this is a correct style fix (and is welcome in another PR), it should not be done here so that the commit maintains a logical changeset."}
{"pred": "Shouldn't this be `one_gb.size() * 2`?", "gold": "This makes me wonder if the TBufferTransport should have a size limit that is configurable, with a default of INT32_MAX, and then the test can make a smaller one like 4KB, and write 4KB and then one byte more, instead of using up 2GB of memory."}
{"pred": "Shouldn't this be `context.getMethod().isStreaming()`?", "gold": "If you use an enum for the streaming type, you wouldn't need to add each boolean as a separate attribute."}
{"pred": "F401 'IntegrityError' imported but unused", "gold": "can you check if you can use `sqlalchemy.exc.IntegrityError` instead?"}
{"pred": "Why is recursive_mutex needed here?", "gold": "Why we need to use recursive_mutex here?"}
{"pred": "nit: `solvers` -> `challengeSolvers`", "gold": "am I correct these changes are related to: > I have removed a bunch of legacy functions for issuer generation ... if so, I can see why that's a valuable change but this is already a pretty huge PR and these changes to use `gen` here feel quite distant from the goal of this specific PR; they should maybe be in their own PR, to make everything easier to review? or have I missed how these changes are linked to this PR?"}
{"pred": "This import is not used.", "gold": "I think that this is an unused import"}
{"pred": "Why did you change this?", "gold": "The string \"DVN_3_0\" appears in `if (!SOURCE_DVN_3_0.equals(xmlr.getAttributeValue(null, \"source\"))) {` in ImportDDIServiceBean. It's not an exact match so I don't *think* this will break dataset import from DDI but I thought I'd at least mention it."}
{"pred": "`ListCommitsViaComparison` is unused (from `deadcode`)", "gold": "Can you add docstring to this? Also, this might be a nit but I think `CompareCommits` or `CommitRange` might be a better name. What do you think?"}
{"pred": "Why do we need to check immutable fields here?", "gold": "were all these ones missed in the previous PR so you are adding them now? the sources v1 and some of this? Is that right? If so, can you update the PR title"}
{"pred": "Why did you change the version here?", "gold": "hmm should this be `VERSION_81` instead?"}
{"pred": "why do we need to change this?", "gold": "What is the reason for increasing this?"}
{"pred": "Why do we need this?", "gold": "is there any reason we are not adding this to companion as well?   There are no CORS concerns there, so adding probably shouldn't be a problem, no? **One question about the requestId;** Are the request Ids unique to each tus-js-client request, or are they unique to an upload instance instead?"}
{"pred": "Should these be `final`?", "gold": "The formatting is a little off here."}
{"pred": "`assertThat(sw.toString(), containsString(source + \")\"));`", "gold": "Perhaps we should import assertj for tests. These assertions are so much cleaner with assertj. Don't know whether hamcrest equivalent exist (maybe it does)."}
{"pred": "`slots_t` instead of `slots_t`", "gold": "You should use C++-type casts instead."}
{"pred": "Why do we need to append history nodes here?", "gold": "Looks like each AppendHistoryNodes is its own transaction - what happens if `len(request.NewWorkflowNewEvents) == 5` but we only succeed in writing 3 of them? Will the system be able to pick up from there later? I'm _guessing_ the answer is related to the `ON CONFLICT` and `INSERT IGNORE` changes below? What does Cassandra do?"}
{"pred": "`entry.EntryId` and `entry.SpiffeId` can be `nil`", "gold": "why are you replacing log here? it is defined above and contains EntryID and SPIFFEID"}
{"pred": "Why do we need this function? Can't we just use `cmd.identityLoader()`?", "gold": "Why not `checkOpenvpn` as in client command?"}
{"pred": "Why do we need this check?", "gold": "> Note: Non-headless tests (that run on selenium-webdriver) need to wire up to mocha reporter to collect all the results and report them. (See `test-webdriver.js`). But for other tests this can be skipped."}
{"pred": "`tuple(connect_to)` -> `tuple(str(connect_to))`", "gold": "I think we should apply IDNA encoding for the host here."}
{"pred": "Why is this save needed?", "gold": "No need to use `this->` here"}
{"pred": "Why do we need to find the condition again?", "gold": "I can't quite tell, is there a reason why we're finding this condition again when it was done a few lines above? Or was this a mistaken paste?"}
{"pred": "This should be `namespaceCache_mock.go`", "gold": "doh. My fault, sorry."}
{"pred": "`fieldID` is unused (from `deadcode`)", "gold": "Why do we returning `interface{}` here? Don't we have a predefined type for `ID`?"}
{"pred": "Let's use `import { Component } from '@wordpress/element';`", "gold": "`lodash` shouldn't be grouped under WordPress dependencies"}
{"pred": "File is not `goimports`-ed", "gold": "File is not `goimports`-ed (from `goimports`)"}
{"pred": "Shouldn't this be `noteIds.length === 0`?", "gold": "Not sure why you want to make the distinction between null and undefined? And also `null == undefined` anyway so I think you could simply have `!noteIds` here."}
{"pred": "I don't think we should allow customizing header prefixes.", "gold": "Almost makes me wonder if this should default to Rpc-Context so everything defaults under Rpc-"}
{"pred": "Why did you remove the alias?", "gold": "File is not `goimports`-ed (from `goimports`)"}
{"pred": "Shouldn't this be `<=`?", "gold": "would these require any account lock here?"}
{"pred": "Why this change?", "gold": "The else doesn't return anything?"}
{"pred": "`if (opts.fee == 0 || opts.feeSat == 0)`", "gold": "if (typeof (opts.fee) !== 'undefined' || typeof (opts.feeSat) !=='undefined') {"}
{"pred": "I'm not sure if this is the right way to do it. I think it would be better to use `fmt.Sprintf(\"%c %s:%s %s %s\", d.Type, deviceNumberString(d.Major), deviceNumberString(d.Minor), d.Permissions, p)`", "gold": "I not sure we need to change this method's logic. Isn't no perms and invalid config?"}
{"pred": "Why this change?", "gold": "this is an abysmal amount of time. can you explain under which circumstances you should wait for a minute for a message?"}
{"pred": "Shouldn't this be `o.targetEnvironment.Region`?", "gold": "Can we add this code to `job_package.go` and `svc_package.go`?"}
{"pred": "Why do we need this type?", "gold": "While you're here, can you change the casing on this so it is unexported? `nextPlanNodeIDKey` instead."}
{"pred": "Why is this needed?", "gold": "thanks for tidying all these up, as you can tell they've been used pretty arbitrarily in the past to just exclude things from bootstrap..."}
{"pred": "I don't think you need `False` here.", "gold": "Again, `no_duplicates=False` would be clearer here..."}
{"pred": "`closed` is unused (from `structcheck`)", "gold": "shouldnt we stop these routines BEFORE the db closed?"}
{"pred": "Why is this import needed?", "gold": "It fills me with endless sadness that we can't use Selenium's own `SessionId` here."}
{"pred": "Why did you change this to `finest`?", "gold": "This will always need to be displayed to users."}
{"pred": "Use %w or %W for an array of words.", "gold": "Maybe we make an `ORIGINS` constant on the Cart model instead?"}
{"pred": "Should this be `ManagedAgentsUnsafe`?", "gold": "looks like this is not needed anymore with boltdb migration. lets confirm with @fenxiong"}
{"pred": "Why do we need this change?", "gold": "shadow: declaration of \"err\" shadows declaration at line 408 (from `govet`)"}
{"pred": "Why did you change this to `finest`?", "gold": "Again, the existing level is correct --- we're letting users know about something that might cause there tests to fail."}
{"pred": "Why do we need a new converter here?", "gold": "Required by the libcalico-go changes"}
{"pred": "`current_mode_min_count` -> `current_mode_min_count`", "gold": "You want \"current_min_count\""}
{"pred": "Why did you remove the GROUP BY?", "gold": "Why changes in this file?"}
{"pred": "Shouldn't this be `[^\\\\]`?", "gold": "This doesn't look right. I think what you want here is `\\\\[([^\\\\]]+)\\\\]\\\\[[A-Za-z_][A-Za-z_.0-9]*]*\\\\]`."}
{"pred": "Should this be `name` instead of `result.name`?", "gold": "@AndrewRayCode thanks for contributing   Could you write/modify the specs to make sure that this description is working properly?"}
{"pred": "`is_redirect = error.status_code < 400 or error.status_code == 302`", "gold": "I would have tested 304 only there."}
{"pred": "Why was this removed?", "gold": "`TimeoutAfter` to be safe."}
{"pred": "I think this should be an `ASSERT(vsyscall_sysenter_displaced_pc != NULL);`", "gold": "So the 32-bit tests on the new kernel hit this case? Won't they fail in debug build?"}
{"pred": "Why is this needed?", "gold": "Is there a recommended quote style for attributes? I see single and double here, double further down."}
{"pred": "I think this should be `:load_time` instead of `:count`", "gold": "The description of `load_time` here is different from the description below..is that intentional?"}
{"pred": "This should be `queue_music` not `queue_book`.", "gold": "Actually it could also be a video playlist. But music is used more often."}
{"pred": "Should this be `writeConcern.w === 1`?", "gold": "From the ticket: > I understand why a session ID would be silently omitted for implicit sessions, but what is the reasoning behind omitting it for explicit sessions instead of raising a logic error to the user? So what this change is doing is \"silently omitting\" the session if its an unacknowledged write. I think we want to actually return an error in this case."}
{"pred": "I don't think you need the `HasValue` check here. `EndTime.HasValue && PointsAcrossPeak.HasValue` should be enough.", "gold": "You can simplify this by doing: return (EndTime - StartTime) * 60 / PointsAcrossPeak;"}
{"pred": "Shouldn't this be `fm.verticalAdvance()`?", "gold": "I think it's the time for bumping `REQUIRED_QT_VERSION` to the last LTS, 5.12. `QFontMetrics::horizontalAdvance()` doesn't exist in 5.10."}
{"pred": "This should be `boltdir_type: :cd10`", "gold": "I already set up cd10 for \"inventory_version in google analytics. I've added cd11 for Boltdir Type now"}
{"pred": "I'm not sure if this is the best way to do this, but I'm not sure if there's a better way to do this.", "gold": "@henrikhodne We are lazily skipping `jruby-*` here (assuming that JRuby all of a sudden start using these version numbers)."}
{"pred": "`temp_int_part` is not used.", "gold": "How does this cope with values like `5.001`? Shouldn't that set precision to 0? Instead it is set to 2."}
{"pred": "What's the reason for this change?", "gold": "Rather than having a sleep here, we should check to see if the service we're waiting for is up yet, using something like dockerize. Not critical this second, but would be nice for later."}
{"pred": "`displayErrorMessage` doesn't seem to be used.", "gold": "I'm not sure if there are any links to swap for Handosntable package. Should this be a top lvl script?"}
{"pred": "`ALIGN_FORWARD(pend_unit_size, YMM_ENABLED() ? AVX_ALIGNMENT : FPSTATE_ALIGNMENT)`", "gold": "It seems like it's too big now: can we remove signal_frame_extra_size from line 537? That should only be needed when placing xstate separately. It seems like it isn't needed at all for pending? Also, if we have special heap align forward for us, we don't need this align here either."}
{"pred": "Why not just `taskArgs = @{}`?", "gold": "Just double checked the `-in` operator. It's PS3 only, so we might want to change `$_ -in $allowedArgs` to `$allowedArgs -contains $_`"}
{"pred": "missing whitespace after ','", "gold": "Might as well use translate here, as @jcsteh suggested"}
{"pred": "I think this should be `{label} {group}\\n{dimensions}`", "gold": "Definitely an improvement as long as the old tests pass (i.e backwards compatible)."}
{"pred": "Why this change?", "gold": "nit: non functional change"}
{"pred": "I don't think this is the right way to do this. If the user doesn't have the `AWS_SHARED_CREDENTIALS_FILE` env variable set, we should exit with a non-zero code.", "gold": "The file is not required - if you're using an IAM instance profile, for example. I'm not sure we can error 100% of the time if it's missing. @randomvariable any suggestions?"}
{"pred": "Why is this change needed?", "gold": "There is a very similar line `lowType = expr.Low.Type().(*types.Basic)` a few lines above this line. Can you change that in the same way?"}
{"pred": "Why do we need this interface?", "gold": "New files should be copyright Hyperledger Besu Contributors."}
{"pred": "`chomp` is not needed here.", "gold": "if I give a non-existent script, then I don't get an errors. I would have expected the `copy` method to raise, but maybe `net-sftp` silently exits?"}
{"pred": "shouldn't this be `list(to_replace) if isinstance(to_replace, tuple) else to_replace`?", "gold": "@itholic can you also update the parameters in the docs?"}
{"pred": "Why is this needed?", "gold": "The super impl Spliterator.getComparator() throws an IllegalStateException by default. Is it really necessary to return null? If null is used somewhere it will throw a NPE, which is roughly the same as throwing an IllegalStateException. I'm just curious - I'm sure there is a reason!"}
{"pred": "`MetricsConfig.forTable(table)` -> `MetricsConfig.forTable(table)`", "gold": "Do we need to do the same in Avro `WriteBuilder` too? I don't think we use that method right now but should make sense for consistency. We already handle that for Parquet."}
{"pred": "This should be `--java-primitive-has-method`.", "gold": "can you make all the `_` into `-` to be consistent with the other options?"}
{"pred": "Why do we need this interface? I don't see it being used anywhere.", "gold": "What do you think of renaming this file to `stack.go` or `cfn_stack.go`? `common.go`/`util.go` don't provide us anything descriptive about the contents of the file."}
{"pred": "[assembly: InternalsVisibleTo(\"Examples.Console\")]", "gold": "It isn't a very effective example if it requires access to the internals   I can't tell just looking at the diff why this is needed, can you provide a little context?"}
{"pred": "Shouldn't this be `:remote`?", "gold": "Why does this include `bolt/inventory`?"}
{"pred": "Why not `Objects.equals(t._1, key)`?", "gold": "We called `t._1.equals(...)` where `t._1` potentially could be `null`."}
{"pred": "This should be `axe.commons.aria.isAriaRange`", "gold": "I don't think we should include the `hasAttribute` test here. Even without aria-valuenow, it's still an aria range element. This check is going to make reuse of this function problematic. Better to move the attribute check part outside this function IMO."}
{"pred": "Why do we need this option?", "gold": "Shouldn't it be optional?"}
{"pred": "Why is this \"API Gateway\"?", "gold": "would be helpful to make these a package level constant so they are accessible to the user. similar to Service Name. Not directly related note, v2 SDK ServiceName should be renamed to ServiceEndpointPrefix."}
{"pred": "`realpath()` returns `false` if the file does not exist.", "gold": "Duplicate call to the method. Better to put in a variable."}
{"pred": "nit: `it caches if it has triggered a prefetch and returns that`", "gold": "\"and returns that\" -- it looks like this method has no return value."}
{"pred": "Shouldn't this be `'diagonal'` instead of `'horizontal'`?", "gold": "Modifications are also needed for PolygonMask."}
{"pred": "Why was this removed?", "gold": "Does this really make a difference?"}
{"pred": "nit: space after `,`", "gold": "Added a validator for _root_, which is now added automatically since the schema used here declares _root_."}
{"pred": "nit: `The estimated cost to open a file, used as a minimum weight when combining splits.`", "gold": "The other properties are `file-open-cost`, not `open-file-cost`."}
{"pred": "Shouldn't this be `HAVE_LIBUNWIND = 1`?", "gold": "confused by this: what we need here is not libunwind but libunwind-dev right? Why skipping detection?"}
{"pred": "Why do we need to check `IsPrivate`?", "gold": "just in case helps, it this related with this PR?"}
{"pred": "Why do we need this?", "gold": "This is incomplete I think (at least source_address and ip_address are missing)"}
{"pred": "Why do we need to exit here?", "gold": "We have a `stop` method here, we should probably be calling that instead of just exiting. There could be important resources to close or cleanup nicely now or in the future."}
{"pred": "why do we need this?", "gold": "fixes ArgNullEx when using both `x-ms-parameter-grouping` and media type `application/xml` in the same operation (issue #2236)"}
{"pred": "Why not use `ErrCodeNoSuchBucket`?", "gold": "`NotFound` is a generic error code derived from the HTTP response message's status code, and can be returned for any S3 operation that responds with a 404 status code and no other error code present. Due to this the constant `ErrCodeBucketNotFound`. In addition, these constants are generated based on the API model defined by Amazon S3, modifications to the file directly will be lost during regeneration of the API. With that said, we are looking at ways to work with the Amazon S3 team to better represent this error in a way that is more easily consumed."}
{"pred": "This should be `host['platform'].end_with?('win')`", "gold": "@johnduarte I was curious about the case when the operating system was neither `osx` or `win`; in this case, the test will indeed pass, but nothing will have actually really been tested. Should this have a `skip_test` condition at the top?"}
{"pred": "This file is missing the license header.", "gold": "I think this example was included by accident? It doesn't seem to belong in this PR (but a separate PR with this would be nice!)."}
{"pred": "Why did you change this?", "gold": "Just fixing a bunch of outdated java docs in this file"}
{"pred": "Shouldn't this be `ConcurrentDictionary`?", "gold": "I think it may be safer not to touch Concurrent to normal."}
{"pred": "why do we need to do this?", "gold": "is this for everything, or just legacy?"}
{"pred": "Why do we need to check `eventEmitter` here?", "gold": "I think this should be a `MongoError` right?"}
{"pred": "This should be `db.tar.gz`", "gold": "This is currently a db.tar.gz with just one .sql file in it. It might be worth another test (or maybe I'll find one) that has more than one sql file in it."}
{"pred": "Why do we need to create a new policy?", "gold": "Why these changes to existing tests?"}
{"pred": "Why do we need to trim?", "gold": "It should be `IsNullOrWhitespace` I believe, since we're going to trim the value afterwards (and I just realized the other configuration keys have the same issue)"}
{"pred": "`provided_features` -> `provided_features`", "gold": "This is just for consistency + searchability with the transports"}
{"pred": "Why do we need this?", "gold": "please run gofmt."}
{"pred": "Why did you change this?", "gold": "thats kind of a bummer, why do we have to give it full access? if it is just for the private interfaces i'd personally rather have those interfaces pollute the public exported symbols than open the tests up like this."}
{"pred": "I don't think this is the right place to do this check. If the app doesn't exist in the store, we shouldn't add it to dependedResources.", "gold": "Because this is an unexpected situation so can you add a log here to help us figure out what resource is causing this problem?"}
{"pred": "Why is this removed?", "gold": "just observing that this innocent looking change seems important to this PR. Previously this data had disappeared from the state."}
{"pred": "`errorRowCount = cond->getOptionalInteger(0);`", "gold": "Actually, I do have one question: You mention that each warning is for a different range. Should we add the rowcounts instead of using the max?"}
{"pred": "Why do we need this?", "gold": "it is confusing to return ID as Name"}
{"pred": "Shouldn't this be `method in ('POST', 'PUT')`?", "gold": "body is being used here for the first time without every being populated. This will error. To run tests do `./go clean test_py` and that will run the Firefox tests"}
{"pred": "Shouldn't this be `Request::HEADER_X_FORWARDED_HOST`?", "gold": "commit mesasge: I would append \"...Kernel::loadClassCache() method call\""}
{"pred": "Shouldn't this be `Keys#COMMAND`?", "gold": "Keys.COMMAND seems to be an alias to Keys.META. That isn't mentioned?"}
{"pred": "Why this change?", "gold": "You can move this import down to before line 8 (import org.junit.Test;)."}
{"pred": "Should this be `inventory_index_id`?", "gold": "It's okay to add the `scanner_index_id` here. But we still should keep the `inventory_index_id` reference because it will help the user to know right away, which inventory the violation is coming from, without having to do another lookup."}
{"pred": "Why do we need this?", "gold": "this shouldn't be beforeClickOn, but rather beforeSubmit? and added to WebDriverEventListener. Since submit does not synthesize the 'click' events, this isn't accurate."}
{"pred": "Shouldn't this be `current_user_is_active_subscription?`?", "gold": "Should this be I18n'd?"}
{"pred": "Why change this to `ImmutableList`?", "gold": "We don't typically use `ImmutableList` to avoid leaking it in methods that are accidentally public or purposely part of the API. I'm +1 for returning `ImmutableList.copyOf(errors)` below, but I don't think we should guarantee the list will be an `ImmutableList`."}
{"pred": "Shouldn't this be `MolRWMol`?", "gold": "@greglandrum Is this test sufficient?"}
{"pred": "Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping."}
{"pred": "I'm not sure if this is the best name for this column. Maybe `plan_type`?", "gold": "I think Rails complains about the `null: false` part if we ever decide to roll this migration back. Might need to split this up into separate `up/down` methods to handle that."}
{"pred": "I don't think we need to change this log line.", "gold": "I don't think we need this line. You're logging in `waitForContainerTransition()` anyway"}
{"pred": "Line is too long. [83/80]", "gold": "Shouldn't the `:attribute` placeholder appear?"}
{"pred": "Why do we need this change?", "gold": "Could you update this to `structLike` instead of `arg`?"}
{"pred": "Why do we need this?", "gold": "I only now spot this `freebsd,!baremetal` in the code, which doesn't make a lot of sense. The fact that there is `linux,!baremetal` is because baremetal targets pretend to be linux/arm to get the standard library to compile. Such a `!baremetal` exclusion is not necessary for FreeBSD. But this is not something that needs fixing in this PR."}
{"pred": "Shouldn't this be `/tmp/tmpostree-deltaobj-XXXXXX`?", "gold": "Ugh, we were using cwd? =("}
{"pred": "Why was this removed?", "gold": "This can probably be removed?"}
{"pred": "nit: std::move(resultColNames_) ?", "gold": "put this sentence in `if (onResult_) { }`"}
{"pred": "Why do we need to do this?", "gold": "Will this always be started up as default? Is there any impact to the VM in terms of load and memory usage?"}
{"pred": "This should be reverted.", "gold": "Thanks for fixing the typo's but given that this is a fork of the other commandline.cs file they will still exist there :( Part of the reason forks suck."}
{"pred": "This should be `stacklevel=2`.", "gold": "This doesn't seem related to docs? :)"}
{"pred": "Why did you change the default value?", "gold": "Having a negative in the variable/method name makes the code harder to read. Also, you inverted the logic but didn't invert the default value. I suggest sticking to the original name."}
{"pred": ">ForceTraceWriteLine [](start = 24, length = 20) I think this should be false by default.", "gold": "Think you need to keep `RawWrite` around as obsolete until NLog6 (Property that just assigns `ForceTraceWriteLine`)"}
{"pred": "This should be `cache_line_size = 0`", "gold": "I would expect this to be named *get* not *set*: it's a query; it's not setting some persistent state."}
{"pred": "Shouldn't this be `pipeline_failure_sensor`?", "gold": "maybe should rename this to be `run_status_sensor_definition.py`"}
{"pred": "I think this should be `spark-write-fanout-enabled`", "gold": "Do we want to add the other write options in this PR or keep the refactor separate?"}
{"pred": "Would it make sense to make this a constant at the top of the file?", "gold": "either make this a config or a constant we can define at the top. Burying this in the code is no good."}
{"pred": "I don't think you need the `True` here.", "gold": "Same about new metrics. Can we avoid adding them?"}
{"pred": "`--network-host-project-id` -> `--network-project-id`", "gold": "I know this is a port from the previous PR, but I am wondering if we can take the chance to improve the naming? `--vpc-host-project-id` ?"}
{"pred": "This should be `setSourceDataAtCell(1, 1, 20);`", "gold": "The test description says it's \"by reference\". We should change the description"}
{"pred": ">violation category of the Rule [](start = 24, length = 22) Violation category of the Rule #Resolved", "gold": "A C# newbie question here: would it make sense to declare Id as an abstract property so any subclass Must have its own Id?"}
{"pred": "I think this should return an empty map instead of an error.", "gold": "just looks like you should return an **empty map** with nil error"}
{"pred": "Shouldn't this be `prometheus-reloader`?", "gold": "could you also update the starting log at L146?"}
{"pred": "Why not just `return strings.Contains(err.Error(), \"connection closed by user\")`?", "gold": "Also this probably should be `error.As()` or something like it."}
{"pred": "This should be `getCanvasUrl`, not `getCanvasUrl`.", "gold": "This is Safari specific and should be defined somewhere in the `safaridriver` namespace"}
{"pred": "Shouldn't this be `/run/ostree-prepare-root/ostree-mount-deployment-var`?", "gold": "Let's maybe be nice and `unlinkat()` here in the interest of having `/run` be less littered. Or in addition/alternatively, make the file `/run/ostree/initramfs-mount-var` since we already made `/run/ostree/` for the deployment staging bits."}
{"pred": "#include \"format.hpp\"", "gold": "Not sure if this doesn't require explicitly adding this library to cmake."}
{"pred": "`duraton` -> `duration`", "gold": "we should probably deprecate (and display a warning) the misspelled keyword arg here rather than removing it... and then add the new one. This changes a public API and will break any code that is currently using the misspelled version."}
{"pred": "nit: `of` -> `to`", "gold": "seems reasonable to also want to include the 'to' location?"}
{"pred": "Should this be `Array.new` instead of `Array.new`?", "gold": "This `if` statement can be merged with the above `if opts[:collect_perf_data]`."}
{"pred": "Why do we need to do case-insensitive match here? Can't we just use `d.fields.MatchFold(name)`?", "gold": "But won't we do case-insensitive matching for all the drivers? For example, we will get the revision field case-insensitively. Let's make this case-sensitive. I think the way the mongo driver works, by lowercasing field names, will be OK with that."}
{"pred": "This should be `<h3 class=\"workshop-type\">Online Workshop</h3>`", "gold": "I believe this should be on `workshops/show` now, not `products/show`"}
{"pred": "I think this should be `185.243.112.225`", "gold": "If we return error when we are unable to found country in database, using country detector would be much easier - if error was not returned, that means country was returned :) This doesn't have to be solved in this PR, but since you're adding such case, we can add a `TODO` just to track this :)"}
{"pred": "Should this be `Path.GetDirectoryName`?", "gold": ".NET Framework: Fallback to `DD_INTEGRATIONS` if `DD_DOTNET_TRACER_HOME` was not set."}
{"pred": "`path_ = paths_.pop() if paths_ else b\"\"`", "gold": "Can you use `authority, _, path = rest.partition(b\"/\")` here? That should make stuff a bit cleaner."}
{"pred": "I think this should be `--stress-limit`", "gold": "I don't think this needs to be a float if its a number of seconds... :)"}
{"pred": "should be `array $values`", "gold": "Please add \"Array\" back, right now it's not a proper sentence."}
{"pred": "Shouldn't this be `BooleanClause.Occur.MUST`?", "gold": "@tkaessmann when I ran tests I saw this line has a bug. It inverts the SHOULD and MUST. Hopefully I fixed it and merged it without the bug."}
{"pred": "Why do we need this check?", "gold": "There may be another bug, it looks like we're already in a `if telemetryConfig.Enable` block at this point, maybe that block should be unnested?"}
{"pred": "Shouldn't this be `if \"content-type\" not in self.headers and \"content-type\" not in self.headers:`?", "gold": "This... looks like it plainly didn't work before? Good catch. I would suggest we change the logic here to 1. Check if `self.headers[\"content_type\"].startswith(\"multipart/form-data\")`, and if that's not the case, add a content-type header with a random (?) boundary. The point here is that if someone assigns to `.multipart_form = ` in their addon, the header should be updated accordingly if the request was not multipart before. 2. *After* that, call `self.content = multipart.encode(self.headers, value)` (as we do right now)"}
{"pred": "ineffectual assignment to `ctx` (from `ineffassign`)", "gold": "importShadow: shadow of imported from 'github.com/stretchr/testify/require' package 'require' (from `gocritic`)"}
{"pred": "Why did you remove the signed comparison?", "gold": "Wouldn't it be enough to change the condition in the for loop to `link_state != IBL_UNLINKED`?"}
{"pred": "I think this should be `G_OPTION_ARG_NONE`", "gold": "I'm not familiar with signed setups, but this does not seem to offer a way to choose between GPG and signapi verification. Are they usually either both enabled or both disabled? Would this be better suited as a verb with flags for different methods?"}
{"pred": "why ignore the error here?", "gold": "assignments should only be cuddled with other assignments (from `wsl`)"}
{"pred": "Should this be `/auth/:provider/failure`?", "gold": "would it make sense to mock oauth in a way that we direct a user to this endpoint on login (in a test)?"}
{"pred": "Why do we need this change?", "gold": "Since these two lines use the same logic, it may be cleaner to use an `if` statement rather than duplicating it."}
{"pred": "Why did you remove this?", "gold": "unnecessary blank line"}
{"pred": "nit: `SPEC_ID` -> `_spec_id`", "gold": "Nit: no need for \"to\" at the end of the doc because it already uses \"to which\"."}
{"pred": "Why do we need this suppression?", "gold": "I would just say \"Signed before publishing.\""}
{"pred": "Why this change?", "gold": "We can just include the public UDPv4TransportDescriptor header here ..."}
{"pred": "Shouldn't this be `self.parameters.get(\"data-address\", None)`?", "gold": "Why do we need this change?"}
{"pred": "I don't think this is correct. If you use the same tag for a file and its manifest upload, it will have the root hash of the manifest.", "gold": "These three atomic functions done separately are not atomic. There is a possibility of data race, as nothing is guarding Total in between lines 182 and 183. Total got on line 182 may be changed before new value is stored on line 183 by some other goroutine resulting an incorrect value. Mutex should be used."}
{"pred": "`Slot slotIndex = startSlot % timeParameters.SlotsPerHistoricalRoot;`", "gold": "Is this because you don't have % on your version of Slot? I don't really care either way."}
{"pred": "Why do we need to do this?", "gold": "Please use var declaration for variables you are declaring. I could not find one for userInjectedExpandableRowHeaderColDef and finalExpandableRowHeaderColDef. Also code styling in the if block needs to be corrected."}
{"pred": "Shouldn't this be `errString.data()`?", "gold": "If cachedLibPath > 200 bytes, it will overflow errString."}
{"pred": "I don't think we need `aria-labelledby`.", "gold": "Talked this through with a few more folks. I think it would be better to flag prohibited attributes for review, instead of outright failing them. ARIA labels are used fairly liberally. We don't really know if they are actually needed whenever they are used."}
{"pred": "This check is done in SyncService.verifyFee", "gold": "Let's keep it to avoid the diff"}
{"pred": "nit: `location` -> `locationId`", "gold": "nit: not directly related to this PR, but shall we use `ImmutableSet` for consistency?"}
{"pred": "Align the operands of an expression in an assignment spanning multiple lines.", "gold": "Layout/DotPosition: Place the . on the previous line, together with the method call receiver."}
{"pred": "Why do we need to decrypt the instance url here?", "gold": "We send the `instanceUrl` encrypted, but never bothered to decrypt it. I guess it was working because we never did any org split testing where the `instanceUrl` actually changes."}
{"pred": "`forCmsSignature` -> `forHash`", "gold": "Can this be moved to QbftBlockHeaderFunctions class as it is only used for qbft"}
{"pred": "Why was this removed?", "gold": "`Tags` now comes from the `PropertyBagHolder` base class."}
{"pred": "`range_type` doesn't seem to be used.", "gold": "I'm not sure where this should go, but one of the `get_extents` methods should mention that `range_type` can be `'data'` or `'combined'` (are there others?). I found out those are the two expected values by searching the code..."}
{"pred": "I don't think we need to use slf4j here.", "gold": "please revert all of this stuff in core.. I'll take another pass after. cheers and thanks for the help!"}
{"pred": "sql(\"DROP TABLE IF EXISTS %s\");", "gold": "Why was this needed?"}
{"pred": "Why do we need lifetime here?", "gold": "I see that CI found a couple test hangs, maybe your `TogglePrefetcher` change below wasn't enough and this still needs to be a `go` invocation for some reason?"}
{"pred": "Shouldn't this be `get_class($domainConfig)`?", "gold": "I do not understand this change"}
{"pred": "I'm not sure if this is the best way to do this. I think it would be better to make this a `map[string]bool` with a default value of `false`.", "gold": "It would be helpful to clarify this is only for unmarshaling a response. not marshaling a request."}
{"pred": "Why did this change?", "gold": "I have no explanation for why this test wasn't erroring before... There are two applicable nodes in this tree, one passes, the other fails."}
{"pred": "Why is this needed?", "gold": "Remove the \"rm\" from the end of \"HAVE_CONFIG_H\""}
{"pred": "`TrivialTestSlasher` -> `TrivialSlasher`", "gold": "Non-Blocking: This might be too trivial. It doesn't allow us to test that it's being callled."}
{"pred": "Why do we need this?", "gold": "Not sure why the ternary expressions are used here, since the true and false results are the same."}
{"pred": "Why do we need to translate vertica and vertigo?", "gold": "Is `vertigo` another name for Vertica databases?"}
{"pred": "`lstrip('mailto:')` -> `lstrip('mailto:')`", "gold": "That doesn't do the right thing - it strips any of the characters m, a, i, l, t, o and :. It'd probably be cleaner to do this before converting the URL to a string."}
{"pred": "Why do we need this?", "gold": "Why the white space changes?"}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.", "gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping."}
{"pred": "Why are we unlocking here?", "gold": "This is now outside the mutex, so could race."}
{"pred": "Please don't use wildcard imports.", "gold": "hmmm did this pass spotless check? I don't think we typically use wildcard imports"}
{"pred": "nit: `lockBeforeLock *keybase1.LockID` -> `lockID`", "gold": "`lockBeforeLock` -> `lockBeforeGet` (here and everywhere below)."}
{"pred": "Why this change?", "gold": "Do we need to internalize net.sourceforge.pmd.lang.java.ast.JavaParserConstants on master, so that we can rename it?"}
{"pred": "Is this intentional?", "gold": "The GUID here was incorrect, because of that, Vault plugin loading was failing. Should I change to any correct GUID, or it has some special meaning?"}
{"pred": "Why was this removed?", "gold": "just confirming: if we remove explicit Collect(), then we are relying on the provider dispose... which has a hard-coded 5000 msec to finish flushing. On the other hand, if we keep explicit Collect(), we can pass an explicit timeout to it. (we were not doing it now and was relying on Infinite timeout). Net effect of this change in test code: Previously we would wait indefinitely for Collect() to be over. With this PR, we hope Collect() will be over in 5 secs. If we ever need more than 5 sec, we need to bring back Collect(maxTimeInMilliSecs..)."}
{"pred": "Why do we need these properties? Can't we just use `azkaban.logging.kafka.*`?", "gold": "What do you think of a name like azkaban.server.logging.kafka.brokerList? This way the name signals that this is a server config."}
{"pred": "Why do we need this check?", "gold": "Maybe change into `return _concurrentWrites ?? PlatformDetector.SupportsSharableMutex` ?"}
{"pred": "Why is this needed?", "gold": "indentation of resulting file is different between 11 and 8 where 8 doesn't indent lines and 11 does"}
{"pred": "Why do we need to encode the error here?", "gold": "Do we still need to return the `Response` here?"}
{"pred": "if (!global.VERDACCIO_API_URL) {", "gold": "Here `global.VERDACCIO_API_URL` I'd use something different as `global.TEST_VERDACCIO_API_URL` then when you search by `VERDACCIO_API_URL` we don't confuse with `window.VERDACCIO_API_URL`"}
{"pred": "`A comma-delimited map of language to auth instructions URL.`", "gold": "This is totally fine, but consider whether in the future a YAML input format would be better. If so, we can plan for it."}
{"pred": "Should this be `DD_CONVENTION_ENABLED`?", "gold": "This should be `DD_TRACE_CONVENTION` to follow our ... conventions."}
{"pred": "nit: `return getters.getAliasProp(*alias_, prop_);`", "gold": "Be careful memory leaks. memory leaks occur when getters.getAliasProp == nullptr . right?"}
{"pred": "`losc` is unused (from `structcheck`)", "gold": "Why not just a time.Time?"}
{"pred": "Why do we need to convert to tensor here?", "gold": "Please do not submit a commit that is not part of this PR."}
{"pred": "Why not use `if updatedInfo.GetDescription() != \"\"`?", "gold": "This is small braking change: there is no way to clear description any more. If value is empty string, description will not be updated at all. It will affect existing Thrift endpoints also."}
{"pred": "Shouldn't this be `return fqdn, \"\", 0, err`?", "gold": "Can you open a separate PR with this patch? It seems valuable outside the context of this PR!"}
{"pred": "Shouldn't this be `GET`?", "gold": "I would suggest to have plurals in the api `\"/chunks/{address}\"`"}
{"pred": "Should this be `C14` instead of `C13`?", "gold": "Let's just not do this. We don't have LabelAtoms.O17 here. This is just a short-cut to avoid needing to write out a more verbose function like: 5O\" - 5O i.e. Add 5 x 17O atoms to replace 5 x 16O atoms. This was the original implementation in Skyline before I added the checkboxes to denote simply labeling all atoms in the amino acid."}
{"pred": "E501 line too long (116 > 115 characters)", "gold": "1:D100: Docstring missing 23:D400: First line should end with '.', not 'p' 23:D200: One-line docstring should not occupy 3 lines 36:D400: First line should end with '.', not 'n' 36:D200: One-line docstring should not occupy 3 lines 48:D400: First line should end with '.', not 'p' 48:D200: One-line docstring should not occupy 3 lines 63:D400: First line should end with '.', not 'p' 63:D200: One-line docstring should not occupy 3 lines 76:D400: First line should end with '.', not 'p' 76:D200: One-line docstring should not occupy 3 lines"}
{"pred": "`$carousel->getUploadDir() . DS . $carousel->getFile()` => `$carousel->getUploadDir() . DS . $carousel->getFile()`", "gold": "Adding a warning or an error in the Thelia log would be a nice idea."}
{"pred": "Why not `const`?", "gold": "nit: `Set` (and swap `forEach`s for `for (const i of CONNECTION_EVENTS)`)"}
{"pred": "Why is this needed?", "gold": "nit: Is this `using` statement still needed?"}
{"pred": "why not `id.String()`?", "gold": "Dont need to cast `string` -> `string`"}
{"pred": "Shouldn't this be `s.Logger.Error`?", "gold": "why doesn't the API return an error in this case?"}
{"pred": "Why is this a subclass of `Exception`?", "gold": "Not sure how particularly useful these exceptions are. Seem to be exceptions required in copying and pasting the EndpointResolver over. I wonder if it makes sense to move these out of ``exceptions.py``"}
{"pred": "Layout/TrailingWhitespace: Trailing whitespace detected.", "gold": "Can we re-add this? I think that grouping is useful (though would be open to putting them in a mixin or something)."}
{"pred": "Why do we need this change?", "gold": "Overall LGTM, one nit is that I think `partitionFields` here would be good to be renamed so that it's easy to tell it's just for collision detection. Also I wonder if we want to do this check for other transformations too (e.g. bucket, and record numBuckets in the string), so that we might be able to combine `fields` and `partitionFields` into potentially something like a LinkedHashMap?"}
{"pred": "`service_account_key_path` -> `service_account_key_path`", "gold": "Don't need the `or None` here as the flag will already default to None. Also, `some_dict.get('foo')` will also default to `None`."}
{"pred": "Why do we need this?", "gold": "Please, use the default padding here."}
{"pred": "'serverLacksFeature' is already defined.", "gold": "let's actually use the direct include: `require('../core/error').MongoError;`"}
{"pred": "This should be `new-instance-open-target.window`.", "gold": "You're missing a space before the `\"` here and below, but I'll fix it up when merging."}
{"pred": "Please use `std::cout` instead of `std::cerr`.", "gold": "remove this debugging code?"}
{"pred": "nit: `bytesHash` -> `bytes`", "gold": "s/`terms text`/`terms's text`"}
{"pred": "Should this be `replaceResultInForm`?", "gold": ":bike: :derelict_house: , but maybe the default option should be `multipleResults: false` or `combineMultipleResults: false`? i feel like `replaceResultInFormWithNew` is very verbose but also doesn't immediately clarify what it's for."}
{"pred": "Metrics/BlockLength: Block has too many lines. [26/25]", "gold": "Line is too long. [87/80]"}
{"pred": "Why did you change this?", "gold": "Are you using an automated tool for sorting the imports?"}
{"pred": "`project_id` should be `project_number`", "gold": "If this is `project_number` now, can we also update the `id` the description?"}
{"pred": "Why do we need this?", "gold": "* This will defer until the function returns. Are you sure this won't happen multiple times. * Alternatively, why is the deadline timer not defined outside the outer loop? * More generally, why are we looping in the first place instead of reading one frame and returning?"}
{"pred": "Shouldn't this be `application/msgpack+json`?", "gold": "Should we rename the traces parameter now that this isn't just traces?"}
{"pred": "(style) line over 80 characters", "gold": "I don't think it makes sense to have both `TEST_ONLY` and `NONBLOCK`. We should probably leave `NONBLOCK` out."}
{"pred": "Shouldn't this be `point->surface = NULL`?", "gold": "Need to remove the surface destroy listener (and `wl_list_init` it so that `touch_point_destroy` still works)"}
{"pred": "Missing space after #.", "gold": "create ticket to investigate this"}
{"pred": "Why is this PONY_API?", "gold": "If we want to expose this for FFI use in the standard library, it needs to get either a `pony_` or `ponyint_` prefix to its name, for cleanliness of the function namespace. `pony_` means it is a public API meant for use by third party code, whereas `ponyint_` means it is internal. Unless there is a good reason to make it public, we should prefer to keep it internal because public functions require us to treat any changes to them as breaking changes in Pony. So, this function should end up named `ponyint_address_length`, or something else with that prefix."}
{"pred": "Why do we need this?", "gold": "Fuse for shared volumes is a px specific implementation. libopenstorage doesn't know about it, right? So should this be called DeviceVirtualMount (or something similar) instead?"}
{"pred": "Should this be `[MarshalAs(UnmanagedType.U1)]`?", "gold": "`bool` vs `BOOL` in native side :)"}
{"pred": "Why do we need this?", "gold": "I think maybe you moved it to util but this is still around and it should get it from util instead."}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.", "gold": "Do we need to test the redirection?"}
{"pred": "`getActivity()` can be removed now.", "gold": "Tsts, that's why... activity leak about to happen"}
{"pred": "Why do we need this?", "gold": "You should do a select here IMO just to be safe so we do not block forever."}
{"pred": "Why this change?", "gold": "I'll replace this with the actual outbox object soon."}
{"pred": "Why do we need to report unused variables here?", "gold": "Providers are called *before* `setUp()`, so I don't think you can access properties here."}
{"pred": "Should this be `| AttributeTargets.Class`?", "gold": "While this allows it to be applied does it correctly cause the entire class to be skipped?"}
{"pred": "why do we need this?", "gold": "clean unnecessary modification."}
{"pred": "Why did this change?", "gold": "I think these assertions want to be `.to.not.exist` which would pass for `null` or `undefined`"}
{"pred": "I don't think we need to add a blank line here.", "gold": "Don't think you need this since this is not a URL example."}
{"pred": "I think it would be better to use `assert_match` here.", "gold": "Maybe a test to check if the generated value is within the boundaries would be nice, what do you think?"}
{"pred": ">false, true) [](start = 76, length = 10) Why is this needed?", "gold": "Suppresses UTF-8 BOM in outputs"}
{"pred": "nit: `InboundMiddleware` -> `InboundMiddleware`", "gold": "order wrong for \"outgoing and incoming\""}
{"pred": "`isMemoryCircuitBreakerEnabled` -> `isMemoryBreakerEnabled`", "gold": "We know it's a boolean and it's in the MemoryCircuitBreaker, why not simply call it `enabled` (like many other Solr plugins do)?"}
{"pred": "I'm not sure if this is the best name for this column. Maybe `include_team`?", "gold": "Should team be a \"feature\" that can be \"included\" or a type? In code it seems to me that a `team` flag makes sense."}
{"pred": "Why do we need this lock?", "gold": "Why is this called update params when it's updating project info? Should p called project?"}
{"pred": "Why do we need this?", "gold": "`upsertHistoryTreeQuery` is a better name for this query now. Is it ok to change history?"}
{"pred": "This should be `gitTag = gitTag.Replace(5, \"b\");`", "gold": "b did not mean branch - it meant the next version - so probably better to be able to release from a tag on the branch so we can create a hotfix branch of the 1.4.1 tag and tag it 1.4.1b and then version is picked as 1.4.1b"}
{"pred": "Why was this removed?", "gold": "Keep the mpi.h include, just move it to after adios2.h and guard with the ifdef. Otherwise everything else looks good."}
{"pred": "nit: `propagate` -> `propagate`", "gold": "Shouldn't this be something like `rootmountmode` to fit the pattern of the other fields' serialized representations?"}
{"pred": "Why is this removed?", "gold": "Why were we initializing here in the first place?"}
{"pred": ">NullLogProvider [](start = 17, length = 16) I think this should be named NullLogProvider", "gold": "This should be removed, and instead set the logger to None."}
{"pred": "Why do we need to change this?", "gold": "Storing a reference to source data isn't the best choice. Maybe you can find a different way (without storing the reference) to save removed data?"}
{"pred": "I don't think this link is correct.", "gold": "Is the tutorial going to move to the new Trafodion website or will it stay on the Confluence wiki? (Check with Gunnar.)"}
{"pred": "why do we need to convert here?", "gold": "maybe call it `fromRetryTaskV2Failure`"}
{"pred": "Why is FlatteningConfig added here?", "gold": "The diff for this class is difficult to walk through because I reorganized it to be much more clear. There are improvements throughout, but the most important are in the new `createSmokeTest.*` methods."}
{"pred": "Why do we need `mean` and `std` here?", "gold": "We suggest keeping this logic in lines between 173-175 to restrict its influence."}
{"pred": "should be `string|null|void`", "gold": "why not ? maybe another phpstan plugin"}
{"pred": "nit: rename to `_cancellationTokenTimeout`", "gold": "That was a really bad CR from me before if I did not spot it."}
{"pred": "I don't think you need the `/usr/bin/flock -n /tmp/forseti_cron_runner.lock`", "gold": "Does this resolve the scenario when the user-triggered forseti process is running, and it would be killed by the cron job restarting the server?"}
{"pred": "Why was this removed?", "gold": "Does this happen somewhere else now?"}
{"pred": "Why do we need to replace `no` with `''`?", "gold": "Remove trailing space at this line, amend the commit, and then force-push."}
{"pred": "nit: remove empty line", "gold": "This should be grouped together with the import of \"go.opentelemetry.io/{api/core,sdk/export}\" below."}
{"pred": "Why do we need this file?", "gold": "What's the impact to people upgrading to the new version? If they don't change their file names, they'll suddenly be broken. While I agree that your naming makes more intuitive sense, I think we need to maintain backwards compatibility. Please choose a new rules file name for the new scanner and keep ke_rules.yaml for the existing version scanner."}
{"pred": "@HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon @HyukjinKwon Thanks for the fix.", "gold": "Shall we add some docstrings clearly to describe when to use which clearly? For example, `spark_frame` now should always be used via `df._internal.applied.spark_frame` for Spark DataFrame APIs that internally creates new query execution plan with the different output length. For expressions and/or functions, `df._internal.spark_frame` should be used together with Spark column instances, in order to avoid the operations on different DataFrames."}
{"pred": "\"other arguments\" -> \"other arguments\"", "gold": "nit: `.` at the end of line?"}
{"pred": "Please use `Log` instead of `PrintStack`", "gold": "I'm not sure I agree that this should take priority over \"Loading\"."}
{"pred": "Why do we need to remove this?", "gold": "Was this an intentional deletion? Why not just allow overwrite of `deploy_mode`?"}
{"pred": "I don't think you need the `fmt.Sprintf` here", "gold": "better to call it as syncCVRStatus.. just syncCVR is very confusing"}
{"pred": "Why do we need to export this?", "gold": "should we make this not a pointer? so that when we embed the struct a copy is made instead of modifying the original object."}
{"pred": "Shouldn't this be `kinto_redis.core`?", "gold": "Does this mean that `kinto_redis` is required to run tests?"}
{"pred": "I think this should be `originalIndexes[result.writeErrors[i].index]`", "gold": "will this ensure the indexes for ordered writes as well?"}
{"pred": "Why do we need `BoolArray` here?", "gold": "Put `BoolArray` first?"}
{"pred": "import('./site');", "gold": "I believe this whole file can be deleted now."}
{"pred": "Why do we need a separate flag for this?", "gold": "We should specify format for a user. I.e: Integer, 1000 == 1 MYST"}
{"pred": "Why do we need this?", "gold": "Does the errors returned from these controllers indicate which controller threw the error? If not, there might be some value in making the \"CustomControllers\" type a `map[string]func(ctx context.Context, sc *server.Context) error` with the name of the controller as the key and include the key in this error string. This would apply for below as well."}
{"pred": "Shouldn't this be `opts.prefix_size != 0`?", "gold": "maybe at least pull the file identifier arg out of the if?"}
{"pred": "Shouldn't this be `self._tabbed_browser.moveTab`?", "gold": "You can most likely remove that (and the try/finally) too, as we shouldn't have any flickering from removing/inserting tabs anymore now."}
{"pred": "Why not just `return this;`?", "gold": "Could you add `s` to `@return`?"}
{"pred": "Why this change?", "gold": "Moving this code inside the last case statement doesn't seem right. Why are we defining `name` and `is_relative` variables there if we aren't using them anywhere?"}
{"pred": "why not return svcs here?", "gold": "Will cause any bugs without this change? I've seen this code block(L293-302) many times... ;-)"}
{"pred": "Why do we need this?", "gold": "You are opening a door to race-condition-hell by returning an unprotected dictionary. I recommend that you return `IReadOnlyDictionary` that only works on the platforms where it is known."}
{"pred": "Why is this skipped?", "gold": "also seems we should not skip this test"}
{"pred": "`deletes == null ? new DeleteFile[] : deletes`", "gold": "This is mostly for my understanding: is `DeleteFile[] deletes` a mandatory builder param now for file scan tasks? If not, from a v1 / v2 compatibility standpoint would it make sense to add an overloaded constructor?"}
{"pred": "`fetchAgedQueuedFlows` -> `fetchQueuedFlows`", "gold": "Can the error message reflect the purpose of the query more closely? Something like \"Error fetching executions queued for a long time\""}
{"pred": "Shouldn't this be `ci.StartupScript != \"\" && !sourceExists(ci.StartupScript)`?", "gold": "Are you making it so startup script HAS to be in sources?"}
{"pred": "Shouldn't this be `vals.LocalWidth() == 0`?", "gold": "Might be more clear to just have one if statement?"}
{"pred": "line too long (81 > 79 characters)", "gold": "remember that logger methods will do string interpolation automatically anyway, so you should be able to do `logger.error('message %s', var, exc_info=True)`"}
{"pred": "`render_args_struct` -> `render_sync_handler_args_struct`", "gold": "Perhaps rename to `render_service_args_struct`?"}
{"pred": "`crypto2` is unused (from `deadcode`)", "gold": "clean the name"}
{"pred": "Why do we need to continue here?", "gold": "I think we would expect StatusNotFound instead of StatusForbidden?"}
{"pred": "`snprintf (rankstr, sizeof (rankstr), \"%d\", s->rank);`", "gold": "Since this is a recurring theme, would it make sense to have an ioencode interface for it like `ioencode_rank()` that takes an integer rank like before?"}
{"pred": "Why do we need a new context here?", "gold": "Is it a concern that we initialize these fields irrespective of whether resources like cgroup/volumes are enabled or not?"}
{"pred": "nit: `panic(\"no outbound set for service %q in dispatcher\", service)`", "gold": "Wouldn't this be the first panic in yarpc? What do we do for transport validation? Return errors?"}
{"pred": "How about using `context.CancelFunc`?", "gold": "have you envisioned other cancellation reasons?"}
{"pred": "Shouldn't this be `mixed`?", "gold": "For the record, class-string is now suported by PHPStorm. Don't know if it's worth moving it to `@phpstan-param` then."}
{"pred": "This should be `cmdexc.CommandError(\"World Id not in valid range\")`", "gold": "This prevents negative IDs, but it doesn't check for too large IDs. You should probably just do the same check you do for `QWebengineScript` here as well."}
{"pred": "Nit: `awsTagsFlag` -> `awsTags`", "gold": "This might be very confusing. Maybe `resource-tags`? I"}
{"pred": "Shouldn't this be `_pair(self.dilation)`?", "gold": "We may use `_pair` to wrap `dilation`."}
{"pred": "Why is this being removed?", "gold": "what's with `setReadonly`? Why we deleted it totally?"}
{"pred": "Shouldn't this be initialized to NULL?", "gold": "Currently I think this is not acceptable. I think the value should be chosen by the author of the parser. (Personally \"type\" is better than \"typename\".)"}
{"pred": "// should not need to import ec2 sdk here", "gold": "Is this excessive?"}
{"pred": "Shouldn't this be `/etc`?", "gold": "Ohhhh I see, this change was previously having *no effect* - I had thought you meant we were doing something like bind mounting the initramfs' `/etc` as the real `/etc` but we'd clearly notice if that happened, we'd be missing all sorts of config files etc."}
{"pred": "Why do we need this method?", "gold": "I think this needs a more specific name, like `sequenceNumberOverride`"}
{"pred": "Line is too long. [81/80]", "gold": "Ought we just raise an exception if the adapter isn't defined?"}
{"pred": "Why was this removed?", "gold": "Should this have been removed? We still set the region to \"aws-global\" in v3model.go#L115"}
{"pred": "`querystring=(qs if len(qs) else None)`", "gold": "You could shorten this to `qs or None`. But why not just build a dict of parameters we want to include and only add `querystring` if there's something here, similar to the way you do in the error view?"}
{"pred": "Why is this removed?", "gold": "sorry if I'm missing it somewhere else in the code, but do you need to create a `ticker := time.NewTicker`?"}
{"pred": "nit: `dataresidencySs` -> `dataresidencyStore`", "gold": "Inline this, as we don't use it again."}
{"pred": "I think this should be `ScatterlineFilterCommon`, not `ScanlineFilterCommon`.", "gold": "I think the instantiation of the new objects i.New() and T.New() need to be done in a function to have local variable and reduce the amount of memory used."}
{"pred": ">IonMobility [](start = 27, length = 11) I don't think this is needed.", "gold": "This is probably more digits than needed - perhaps rename OneOverK0 to IonMobility instead"}
{"pred": "Why do we need this?", "gold": "End with 'Method', so: - FlattenedAsyncCallSettingsMethod - FlattenedAsyncCancellationTokenMethod"}
{"pred": "Why do we need this import?", "gold": "`localsecrets` should be updated in the same way."}
{"pred": "I think this should be `ConsensusV17`", "gold": "We'll want to PR a spec change into github.com/algorandfoundation/specs. (Side note: It might or might not make sense to combine this protocol upgrade with Tsachi's protocol upgrade for fixing the reward rate calculation.)"}
{"pred": "`output` is unused (from `structcheck`)", "gold": "Use `FullBlock`, it comes from the same package."}
{"pred": "F401 'collections.abc' imported but unused", "gold": "do we plan to use anything else than flask for making HTTP requests inside localstack? if so, it maybe makes sense not to strongly couple to flask for now, and just leave the type of the `request` function parameters open for now."}
{"pred": "Shouldn't this be `if !as(&objp)`?", "gold": "I think we should make this a separate test case: it seems like making the precondition fail is the test case that would ensure that this escape hatch worked. Otherwise, if it's always true, then it would be the same as if the escape hatch didn't modify the outgoing request."}
{"pred": "Why do we need to build the index here?", "gold": "Error return value of `s.idx.BuildIndex` is not checked"}
{"pred": "Shouldn't this be `elif isinstance(member, configtypes.List)`?", "gold": "What's the reason for excluding those from the fuzzing here? You probably could just add some inner type via `functools.partial` like below with `FormatString`."}
{"pred": "Line is too long. [81/80]", "gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping."}
{"pred": "Why are we ignoring the error here?", "gold": "Its this golint or govet stuff?"}
{"pred": "(style) code indent should use tabs where possible", "gold": "These are good cleanups: I didn't realize there were so many like this in the samples and tests. But given that there are quite of few of these mcontext changes I would separate these into their own PR (no need for an issue: iX branch) since they are logically distinct. Cleaner history, simpler revert paths, etc."}
{"pred": "I don't think you need this benchmark. You can just use `new Rgba32(128, 128, 128, 128)`.", "gold": "  This is just a random struct equality, no value here."}
{"pred": "nit: `NatPortRange` -> `NatPortRange`", "gold": "Just spotted the `local` on here; that shouldn't be needed - no reason to limit this config to env vars only"}
{"pred": "I don't think you need `as d_range` here.", "gold": "I had some weird issues when importing ``from .. import util`` getting the wrong utilities, hence I did this."}
{"pred": "Why did you change the copyright year?", "gold": "Please remove this line."}
{"pred": "Should this be `options[:accept_all_exit_codes] = true`?", "gold": "should this state that we're falling back to `:acceptable_exit_codes`?"}
{"pred": "I don't think we need the `to_markdown` here.", "gold": "I don't think this works. The dataframe object is encapsulated in the value parameter. This might be the root of the failing checks."}
{"pred": "Shouldn't this be `this.servers.length === 0`?", "gold": "Why was it necessary to add this check against `this.servers.size`?"}
{"pred": "Shouldn't this be `>= 0`?", "gold": "This tests for < 0 but the error message says it must be > 0. The `if` should probably be `<=` to match the message."}
{"pred": "Why is this change needed?", "gold": "Short circuits when it's something like a WebPackRequest, which we should instrument and test specifically."}
{"pred": "Why is this flag removed?", "gold": "Should this be true now by default?"}
{"pred": "Should this be `/stats/stastics`?", "gold": "/DispatcherStatistics ? /statistics is a bit confusing with /stats"}
{"pred": "I'm not sure if this is the best way to do this. I'm not sure what the best way to do this is.", "gold": "nit: Wondering if we should simply filter on `\"tail: unrecognized file system type\"`, or is the type identifier `0x794c7630` always the same?"}
{"pred": "Why is this change needed?", "gold": "I think the goal of using `fake-cluster-id` was to make it sure clear that this is a fake cluster, replacing this with UUID only now makes these clusters look very similar to real ones which can cause problems.. any reason why we didn't go for the original recommendation from slack thread of `fake-cluster-UUID` @twiest"}
{"pred": "I think it would be clearer if this was named `get_node_first_ancestor_of_type_and_its_child`.", "gold": "I need to spruce up my `mypy` knowledge but I think this is incorrect. Using `T_Node` twice makes it so that both should be the same type. I think this would be better: `Tuple[Optional[T_Node], Optional[nodes.NodeNG ]]`. It might even better to do: `Union[Tuple[None, None]. Tuple[T_Node, nodes.NodeNG ]]` as that shows that `None` should always pair with `None`"}
{"pred": "`t.Errorf(\"controller.Register failed (%s)\", err.Error())`", "gold": "Nit: below on line 449 we use `%v` to print an error - perhaps would be nice to do it in the same way in both places (but probably not that important). Similar in other places in this PR."}
{"pred": "Why do we need this?", "gold": "I'm not against adding a kill event, but we need to do it properly, please. That means listing it in events.py, adding docs for it, and so forth."}
{"pred": "Shouldn't this be `!field.native_shared &&`?", "gold": "this line can be lifted outside of the if-then? In fact only CreateString / CreateSharedString needs to be inside of it."}
{"pred": "This should be removed.", "gold": "I think the `EpisodesApplyActionFragment` is unused now. So please delete it :)"}
{"pred": "Shouldn't this be `notice`?", "gold": "It seems like we should leave `notice` here since it can be configured in Bolt config files, and that's what sets the console config for messages from Puppet. For example, this will break plans that call `notice()` in their apply blocks."}
{"pred": "private Meter flowFailOOMwaitingJobMeter;", "gold": "This metrics is only exposed in executors. Should it be defined in azkaban.execapp.ExecMetrics instead?"}
{"pred": "Why not just `return moment(value, { dateFormat, locale })`?", "gold": "I originally factored out these functions from date_input. Currently, they are only used in datepicker, but they seemed more general purpose. If you decide we should keep the current date_input API (in case anyone is using it directly), then I think it makes sense to factor these out in order to be able to maintain consistency, but otherwise they could be inlined into datepicker.jsx if you prefer."}
{"pred": "I don't think this is the right backoff type. It should be `CONTINUE_AS_NEW_INITIATOR_UNSPECIFIED`.", "gold": "I think this should never happen and should return an error also. Having `WorkflowBackoffTimerTask` with `UNSPECIFIED` type looks weird."}
{"pred": "Why do we need to check browser.tizen?", "gold": "Add `browser` import"}
{"pred": "Why do we need this function?", "gold": "Would it be good practice to add a nonce in here (that's also stored in the config), so it's harder to tell when passwords are being reused?"}
{"pred": "Why do we need this endpoint?", "gold": "For consistency, the return type could be `TelemetryDataDto` here. This would be more consistent with the other REST API interfaces. From a functional perspective, the current code is perfectly fine though."}
{"pred": "Shouldn't this be a `shared_ptr`?", "gold": "I've never seen this `boost::make_shared`...why use it instead of `reset`?"}
{"pred": "Why do we need this method?", "gold": "Wasn't this added as a part of different PR already?"}
{"pred": "Why do we need this change?", "gold": "hmmmmm, should not be in constructor in this case `$this->toDelete = [[]];` ??? maybe not"}
{"pred": "nit: `response.get('ResponseMetadata', {}).get('HTTPStatusCode', 'Unknown')`", "gold": "We can just update it to be as follows: `if response: print(\"Success\") else: print(\"Error\")`"}
{"pred": "struct field state should be state", "gold": "Maybe this should be exported so (external/third-party) plugins can also use it."}
{"pred": "Why do we need to return here?", "gold": "Warning logging whould be exactly here in high logic. So that everybody understands why we swallow errors"}
{"pred": "Why is this nullable?", "gold": "if its optional, move it to last item an use JsonRpcUrl? url = null"}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.", "gold": "how is this different from the `client_slug` method already available on a `user` ?"}
{"pred": "Why did you change this to `finest`?", "gold": "I'd keep this at `info` level..."}
{"pred": "Shouldn't this be `export TRAVIS_FILTERED=0`?", "gold": "I believe this env var won't be set anywhere. Do we need this condition?"}
{"pred": "Why do we need this change?", "gold": "why add function explicitly?"}
{"pred": "Is this intentional?", "gold": "Is that intentional? If you don't create the cache here, it will never be created therefore used."}
{"pred": "nit: `require.True(t, a.Before(now.Add(4*time.Second)), \"require that the given date for 0 retries is less than 4s in the future\"`", "gold": "I think we can now remove this test case since we can ensure that multiple calls to `Fetch` will double the interval on each call"}
{"pred": "Why do we need this change?", "gold": "Not part of this PR but this const seems to be defined in multiple places. Needs to be extracted somewhere."}
{"pred": "\"strings\"", "gold": "Remove this file from the PR"}
{"pred": "Shouldn't this be `blockNumber >= IstanbulBlockNumber`?", "gold": "need to add it for ropsten, rinkeby, goerli as well"}
{"pred": "Why is this change needed?", "gold": "G204: Subprocess launching should be audited (from `gosec`)"}
{"pred": "Why do we need to make this public?", "gold": "curious why only making these 3 public. what about other package scope methods like `times`, `timestamps`, `array`?"}
{"pred": "Should be `Email Exclusion list`", "gold": "The Email field is not translated into Russian, and into any other. It's kind of a \"standard\" word. Therefore, we may face the fact that you have to create files with exceptions for all languages. @caouecs, what do you say?"}
{"pred": "I think this should be `block_processor_batch_max_time` instead of `block_processor_full_size`", "gold": "Should it say `default 0` here? looks a bit confusing. Also following BODMAS we should put: `2048 * (signature checker threads + 1)`"}
{"pred": "import ruamel.yaml as yaml", "gold": "Add a newline. We group by 1: standard library, 2: 3rd party library, 3: application library"}
{"pred": "`Evaluate queries the range query endpoint and checks if values in all data points are within the expected range.`", "gold": "So `queryRange.Step` will be ignored?"}
{"pred": "Should this be `HOST_X86_`?", "gold": "It would be nice to replace these _HOST_* defines with HOST_*."}
{"pred": "Why do we need the `string(filepath.Separator)`?", "gold": "The problem here was that the record file started with something like `/tmp/whatever/myproj` and was scrubbed to `[ROOTDIR]/myproj`, but the `/` is a `\\` on Windows."}
{"pred": "Why do we need this?", "gold": "Don't use relative paths. src directory is already on the include search path"}
{"pred": "Should this be `test_tools` instead of `test_tools`?", "gold": "if we're introducing this now can we make this private?"}
{"pred": "Why do we need to check for raw files here?", "gold": "Something is wrong with the indentation here."}
{"pred": "nit: remove empty line", "gold": "This should go to the external imports group below"}
{"pred": "Is this intentional?", "gold": "Intended to be checked in?"}
{"pred": "\"The schemas in new version are less than the old version, which may cause compatibility problems.\"", "gold": "I think this warning message is the same as above one. Anyway, it's fine to keep it."}
{"pred": "Shouldn't this be `Path.Combine(logsDir, fileName)`?", "gold": "This is done few times, replace with some well named method"}
{"pred": "Why do we need this change?", "gold": "`configs` isn't very descriptive, especially when there are other config-ish things like `generatorConfigs`."}
{"pred": "Shouldn't this be `/reserve.php`?", "gold": "In my point we have to check conversion with specific (non-ASCII) characters in unicode string."}
{"pred": "Should this be removed?", "gold": "Given that file still contains doctests (and should still contain doctests), they should be run. Please turn this back on."}
{"pred": "nit: rename to `ATTR_SELF_SERVE_ENABLED`", "gold": "we should keep the camel case format - selfServe"}
{"pred": "Why do we need to change this?", "gold": "consider the alias `compute` in case this ever references other apis."}
{"pred": "Shouldn't this be `cgroups.PathExists`?", "gold": "It probably doesn't matter in practice, but we're not supposed to access a map without holding a lock. This is why I have suggested using `m.Path(\"devices\")` earlier -- it takes a lock before accessing m.paths. Alternatively, you can leave this code as is but add taking a lock (same as `Path()`)."}
{"pred": "Why do we need this?", "gold": "Since `ga` is an acronym here, we should rename the generated actions and selectors to adhere to our naming conventions as it will no longer be capitalized properly. See below for how this is already done for the amp container ID settings. We should add `GA` to our list of checked acronyms as well in `packages/eslint-plugin/rules/acronym-case.js`."}
{"pred": "`this.status.uploads = this.status.uploads || []`", "gold": "uploading_finished and upload_meta_data_extracted can fire very quickly after another, and there is not much difference in the Assembly status that's useful to us. I kept only the Assembly fetch after metadata is extracted, which ensures that we'll have all the correct `uploads.*.meta` properties on the client side."}
{"pred": "Shouldn't this be `m.config.Path != \"\"`?", "gold": "Does it make sense to keep trying to read the file every time the function is called, or should we maybe use `sync.Once()` here?"}
{"pred": "Why is this a uint64?", "gold": "`DbCapacity` -> `DBCapacity`"}
{"pred": "Why was this changed?", "gold": "For Berlin I confirmed all the fork hashes with the Geth team. Would you do the same with Martin? He responded quickly the last time."}
{"pred": "Why do we need sudo here?", "gold": "Does `sudo` required for `darwin` only? Don't we need it for `linux` too?"}
{"pred": "I think this should be `CloudFormation::Stack`", "gold": "Can you add description to this exported struct?"}
{"pred": "Shouldn't this be `previousContext = previousContext || context`?", "gold": "Although this is needed for `getSnapshotBeforeUpdate` this also fixes a bug with `componentDidUpdate`. During rendering, the `state` variable is mutated. This has the consequence, that `previousState` would never hold the previous state, but the most current one."}
{"pred": "This should be `elbiface` not `elbiface`", "gold": "Should this maybe directly start with ELBv2 aka NLBs or ALBs?"}
{"pred": "Why do we need to return an empty array here?", "gold": "This was the request that was often causing the test to fail as an unexpected API failure (or at least one of them   )."}
{"pred": "Shouldn't this be `this.originalRequest`?", "gold": "I understand why `xhr = null`, but I think adding `error = null` implies that this method should work even if we don't pass the `error` argument. Should we remove it?"}
{"pred": "nit: rename `retryMapping` to `gapicRetryMapping`", "gold": "It is not your code, and it is used like this all over the place in gapic generator, but the general rule is we should prefer using the least specific class/interface in the hierarchy, which still satisfies our requirements. Here, unless we really need anything specific from `ImmutableSet`, please use `Set` (less specific type) instead."}
{"pred": "This should be `ctx->aws_sts_endpoint = NULL;`", "gold": "Sorry... I just realized... since we use sts_endpoint in the EKS Provider, this error message is no longer true. Role_arn is not required."}
{"pred": "nit: `times the given element`", "gold": "(...), where each element ~are~ **is the** given {\\@code element}."}
{"pred": "`orderOrderId` -> `sortOrder`", "gold": "I think this can be an int because we have a default that is always valid, `0`."}
{"pred": "Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.", "gold": "I think you can use `build_stubbed` here for the same results but with more speed."}
{"pred": "Shouldn't this be `if rampup or (rampup and not iterations)`?", "gold": "what if one of them is property and one is not?"}
{"pred": "Why is this needed?", "gold": "> UI plugins swallow rejection errors so they don't end up in the console with no way to fix But it will still catch upstream in `addFile` and restrictions to show the informer?..  "}
{"pred": "Why do we need to create a new object here?", "gold": "can't this just be left undefined/null?"}
{"pred": "I think this should be `response = block.call`", "gold": "changed bc we are using the `error` var below"}
{"pred": "Why was this test removed?", "gold": "Is there a reason why this is change is in the same commit?"}
{"pred": "Why did you remove the `-rf` here?", "gold": "@nghialv btw, perhaps was this method originally created for copying the repo root to the given `dest` as a subdirectory?"}
{"pred": "Shouldn't this be `IProgressStatus`?", "gold": "Just curious - why not var?"}
{"pred": "Why do we need this?", "gold": "Why would we import this here and not use it? Is there a side-effect of this import?"}
{"pred": "I think this should be a `Fixnum` instead of `Integer`", "gold": "The name `errors` is a bit mis-leading -- usually I'd expect a field called `errors` to be an array of errors but here it's just a count. And it's not a count of _all_ errors -- it's a count only of some errors."}
{"pred": "Why was this removed?", "gold": "there was no usage of the bundle in the framework? everything works exactly the same after the removal?"}
{"pred": "I don't think this is the right place to do this. This should be in the `BeforeEach` block.", "gold": "Why this difference?"}
{"pred": "Why do you use `sprintf` here?", "gold": "Surround code issue. RequestError may not be null terminated when the RequestError size is less than the length of the string in p_buffer->errorText. Also, this can cause core dump due to segment violation if length of errorText is less than the size of RequestBuffer."}
{"pred": "Why do we need this?", "gold": "`AccountMaxVersionPrefix` is a global variable (from `gochecknoglobals`)"}
{"pred": "Why was this removed?", "gold": "I see it is not part of this PR but I somehow overlooked it before. Can you use same import aliases as we use everywhere in the project: `apicommon` -> `commonpb` `apireplication` -> `replicationpb` `\"go.temporal.io/api/enums/v1\"` -> `enumspb \"go.temporal.io/api/enums/v1\"`"}
{"pred": "I think this should be `ReadonlyError(message=error_msg)`", "gold": "Nit: Maybe merge these into one string while you are here?"}
{"pred": "Why is this needed?", "gold": "Why make a new file for this? I think keeping everything related to the scheduler in a single file increases readability. Especially when there is no API-boundary in between. Functions like `getCoroutine` and `yield` also live in the normal scheduler files so it doesn't seem consistent."}
{"pred": "nit: `kubeIPVSSupportEnabled` -> `ifaceConfigurationEnabled`", "gold": "tiniest of nits: why would you abbreviate \"interface\" but not \"configuration\" ?"}
{"pred": "Why was this removed?", "gold": "Removing since all of the domain-neutral testing will be done in the new `Samples.MultiDomainHost.Runner` app"}
{"pred": "I don't think this is the right place for this fallback. It should be in the `get_info` function, not here.", "gold": "is there a better way to detect this rather than just always assuming it's cygwin if everything else fails? i think you can check `if sys.platform == 'cygwin'`"}
{"pred": "I don't think you need the `str(ex)` here. `str(ex)` already returns a string.", "gold": "duplicate code - can you move into build_from_path() ?"}
{"pred": "Why do we need to disable this?", "gold": "  very important test as we want to make sure the old name still work."}
{"pred": "Why did you change this?", "gold": "I think returning 1 should some how be moved in to specific support for LibreOffice.."}
{"pred": "(style) do not initialise globals to false", "gold": "Should be inside `ifdef X86` I would think (or moved to ... I guess arch/x86/emit_utils.c)"}
{"pred": "`// Services is an array of services`", "gold": "Using sync.Map(key: nodename; value: state) instead of this \"EdgeNodes\" string slice here would be much better. Reasons: 1. Using sync.Map makes the time complexity of function UpdateEdgeNode and IsEdgeNode O(1), while using string slice with for loop makes it O(n). 2. Later we could be checking node state whether it's \"ready\" or still \"not ready\" by directly comparing \"value\" of sync.Map and doing the node state updating."}
{"pred": "I don't think we need to use `RegexOptions.IgnoreCase` here. `RegexOptions.IgnoreCase` is enough.", "gold": "nit, does it make sense to get this variables outside the func where they are used?"}
{"pred": "Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "to **an** Amazon... Simple Notification **Service** (singular)"}
{"pred": "Why do we need this?", "gold": "Nit: is \"top\" a short name we use frequently? Seems a bit mysterious, and saves only 2 chars."}
{"pred": "nit: can we call this `CassandraProtoVersion`?", "gold": "This name is really confusing. May be just remove this const completely and hardcode `4` where it is used?"}
{"pred": "Why was this test removed?", "gold": "Why did you remove this spec?"}
{"pred": "Why was this removed?", "gold": "The vendor prefix is still being used on Chromium based browsers like Edge Chromium and Chrome. Did you mean to remove this?"}
{"pred": "`tmpcrr` -> `composite_root_resources`", "gold": ".get will return None if there is no project_id key, so the or None part is redundant"}
{"pred": "Why do we need both StartTime and EndTime?", "gold": "Do they need to be `internal`?"}
{"pred": "Why did you remove the `CombinedOutput`?", "gold": "Hit a flake here where I think there may have been some output to stderr that got mixed in with the output from Stdout. Hence switching to `Output()`, which does also capture stderr as `err.Stderr`"}
{"pred": "Why did you remove the underscores?", "gold": "Is there any official CUDA API called cuMemcpy2D_v2?"}
{"pred": "Why do we need this interface?", "gold": "Can you please move this interface as class in common Constants file in az-core module?"}
{"pred": "Why do we need to remove the pid file?", "gold": "Why not TempDir?"}
{"pred": "Why do we need this interface?", "gold": "IMvxFormsView -> IMvxElement is a breaking change, isn't it?"}
{"pred": "Why do we need this?", "gold": "This should be imported alphabetically."}
{"pred": "Why this change?", "gold": "Please apply same changes as for Payment"}
{"pred": "Why do we need this?", "gold": "This should only be used in the `ScrollEffect` component, as you have in the `DashboardMainApp` below  "}
{"pred": "Why do we need this?", "gold": "I'd call it `g.auth_token`, just to make it more clear"}
{"pred": "I think this should be `(1 << 20) * 2 // 2 MB`", "gold": "Not sure if this is what we really need, we might need to adjust this constant after more extensive benchmarking."}
{"pred": "`m.Group(\"/branches\", func() { m.Get(\"/:id\", repo.ListBranches) })`", "gold": "Shouldn't we use `:branchname` here? Or just `:branch`?"}
{"pred": "Why do we need to change this?", "gold": "`AutoTime` is a number but calling `int()` would make it crash. Tested through the docs"}
{"pred": "Why do we need to do this?", "gold": "@eddynaka Looks like the same block more or less 4 times, should we have a helper method? private void AddOrReplaceAttribute or something?"}
{"pred": "Wouldn't it make more sense to map the `*` to the same path as the `web.xml`?", "gold": "Please do the same for the DebugFilter a few lines above."}
{"pred": "export * from './setupRerender';", "gold": "Minor nit: Just inline both functions here. No need to make a file per function (that's a popular approach for some projects though, just not for us :) )."}
{"pred": "Why do we need this constructor?", "gold": "There are several uses of the word \"default\" in here, perhaps it can be reworded slightly?"}
{"pred": "Shouldn't this be `SUBMIT`?", "gold": "`function (` is correct. A space must be there. Please run `make cs` to have correct coding style."}
{"pred": "`isVisible(elm.actualNode, true)` -> `isVisible(elm.actualNode)`", "gold": "I think this is now going to fail the scenario where there is a `main` with aria-hidden=\"true\". I don't think that should fail."}
{"pred": "`append([]byte(nil), sub.subject...)` is equivalent to `sub.subject`", "gold": "Is this specifically that if we capture the cast in another variable, even if it passes escape analysis, that the runtime will copy?"}
{"pred": "I think this should be `kmsAliasPrefix,omitempty`", "gold": "Should this be optional for existing configs to work?"}
{"pred": "I think this should be `s.metrics.AvailableBalance.Add(float64(balance.Int64()))`", "gold": "note that `balance` does not necessarily fit into `int64`, especially with the new bzz token. so you might want to avoid the `int64` conversion step using `big.NewFloat(0).SetInt(balance).Float64()`."}
{"pred": "I think it would be better to use `flatbuffers::JsonSchema` instead of `JsonSchema`", "gold": "lets leave out the `-S` ?"}
{"pred": "Why do we need this method?", "gold": "Is this method needed?"}
{"pred": "`pool_param` is not used.", "gold": "How about, instead of reading the param every time, just add a class member variable to hold the value of the flag, and just set it once during `LayerSetUp`?"}
{"pred": "\"desired to be running by a service\"", "gold": "Does this mean it's only returning tasks associated with the primary deployment? or something else"}
{"pred": "Do we need to log the error here?", "gold": "nit, would be good to include prefix for this log statement."}
{"pred": "You can use `assert.isFalse(checks['aria-required-attr'].evaluate.call(checkContext, target, ['aria-valuenow']));`", "gold": "Same here, you should use a made up role. May I suggest `role=\"McCheddarton\"`? :)"}
{"pred": "I think this should be `validateNoConflictingAppends`", "gold": "@aokolnychyi, shouldn't this check whether the operation is a delete? If this is invoked by `DELETE FROM` then we don't need to validate conflicting deletes."}
{"pred": "Why this change?", "gold": "Any reason to split up this import block? I think most files have them together in one block, right?"}
{"pred": "I don't think it's safe to assume we always have service entry spans", "gold": "`Tags.AppSecEnabled` should probably move to `Metrics.AppSecEnabled` I guess?"}
{"pred": "Why do we need this?", "gold": "What happens if you remove this? Can't you still initialize this atomic_file class, since it's just AtomicLocalFile with an additional method (move_to_final_destination)?"}
{"pred": "Why was this removed?", "gold": "As previously discussed in #1944 it's not safe to remove IC like this as it will break every language that still has a `%{ic}` marker in the translation."}
{"pred": "I don't think we want to drop packets originating in pods for VXLAN. If we want to drop packets originating in pods for VXLAN, we should also drop packets for IPinIP.", "gold": "I believe these rules will be enforced both (1) on egress from a local workload, and (2) on ingress **to** a local workload. Right? I understand that we definitely want (1), but do we really want to enforce (2) as well?"}
{"pred": "Should this be `POST` instead of `POST`?", "gold": "Update after command rename"}
{"pred": "Line is too long. [81/80]", "gold": "What about adding an optional parameter that allows users to choose whether they want to use the format or not?"}
{"pred": "Why this change?", "gold": "Lint didn't like this context being before the skip"}
{"pred": "Why do we need this?", "gold": "so now basically anybody could drink my tequila? currently electron dev-env runs on `http://localhost:9080`"}
{"pred": "Shouldn't this be `mDesktopFile.fileName()`?", "gold": "`mPluginLoader` is nullptr in static plugins, which causes segmentation faults"}
{"pred": "Why did you remove these imports?", "gold": "Better use `Optional<Consumer<String>> onSearch` here."}
{"pred": "Why was this removed?", "gold": "this is asserted as invalid input"}
{"pred": "I don't think you need to create a new parser here. You can just use `state.Graph.AspParser()`", "gold": "Why do you need to create a new parser? Can't you just use `state.Parser` to answer this question?"}
{"pred": "Why do we need this?", "gold": "remove processing references from Nethermind.Core where possible, keep clean"}
{"pred": "Missing license header.", "gold": "Why not make this a subclass of `MessagingException` so we don't need to change all `throws` clause?"}
{"pred": "`from .drbg import DRBG`", "gold": "it should instead be `from .hmac_drbg import DRBG` also, please put it at the bottom of the imports (PEP 8 order), so near line 36"}
{"pred": "\"Cannot add column, name already exists and is not being deleted\"", "gold": "Nit: indentation is 2 indents (4 spaces) from the previous line."}
{"pred": "Should this be `\"ddev\"` instead of `\"plugin\"`?", "gold": "I don't understand why this is changing to a hard-coded string."}
{"pred": "`DevnetConfig` is unused (from `structcheck`)", "gold": "nit: perhaps calling this `config` would be more clear?"}
{"pred": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "gold": "I would rather recommend using 'Wird hochgeladen' since the imperative form of 'Lade hoch' confuses me whether this is an action I need to do or whether it's an action that Uppy is currently doing. Just my two cents."}
{"pred": "Should this be `defaultUmask`?", "gold": "Hmm I would have expected this to go away? What role does it play now that we have a minimum?"}
{"pred": "Why are we removing these codes?", "gold": "if we are removing this, is it useful to have the `isGetMoreError` message below? If that's not required, can we also remove the `mongoErrorContextSymbol` outright?"}
{"pred": "Why did you remove the lock?", "gold": "I think this mutex is only used here. Remove it."}
{"pred": "nit: `albeit with a higher latency`", "gold": "it's unclear to me which method you are recommending overriding?"}
{"pred": "Why this change?", "gold": "This make me think that if the typing of a variable is inconsistent it could cause problem. For example here, if `field == 0`, the behavior is not exactly the same. A `0` and is implicitelty false. Well it works because summing 0 is neutral, but what if it was a multiplication ?"}
{"pred": "Why is this change needed?", "gold": "Remove this file from the PR"}
{"pred": "Is this intentional?", "gold": "I cannot find the changes / results of the eip2565 benchmark"}
{"pred": "Shouldn't this be `zeroData: true`?", "gold": "@tofumatt now that I see this in context, we're now resetting 2/3 of the keys in the `NewComponent` state - the other being `error`. It seems that `error` should probably also be reset - essentially resetting all of the component state when the date range changes. What do you think? cc: @felixarntz @adamsilverstein"}
{"pred": "Why not just return Task.CompletedTask?", "gold": "This one and the ones below are for shutdowns but if it appears in some method called frequently during the lifetime of the process it should be cached in a static."}
{"pred": "Why not `let threw = false`?", "gold": "Better to just do `const err = yield User.bulkWrite(ops).then(() => null, err => err);` so you don't need to write out the whole `try/catch` block."}
{"pred": "Why did you remove this check?", "gold": "`action.ExecutionDataGas = 100`"}
{"pred": "Why do we need this?", "gold": "@supersmile2009 please review. Is it right to mark this as legacy? Are we testing the legacy path here? Are there tests for the non-legacy path?"}
{"pred": "nit: space after `,`", "gold": "getSpcResource should not be bothered about deletion. Can we have `separation of concerns` for this logic?"}
{"pred": "why did you change this?", "gold": "This is actually matched with pandas's result since the output is sorted."}
{"pred": "I think this should be `defaultWalletList`", "gold": "struct field tag `yaml:\"endpoint\"\"` not compatible with reflect.StructTag.Get: key:\"value\" pairs not separated by spaces (from `govet`)"}
{"pred": "nit: `num_refs_` -> `num_refs`", "gold": "This is not necessary. Topic inherits from DomainEntity which already has instance_handle_"}
{"pred": "Shouldn't this be `true`?", "gold": "Do we need the forXDP parameter in runBpfUnitTest? If not, I think better to revert in order to save a few changes."}
{"pred": "I think this should be renamed to `casSnapshot`", "gold": "All the code that reference to this function must also be changed."}
{"pred": "Why do we need this method? Can't we just use the existing `validateProxyUser` method?", "gold": "How is this new interface different from existing `validateProxyUser` method? If I understand correctly the `proxyUser` parameter is essentially a group and the method should verify if `realUser` belongs to it."}
{"pred": "Why is this needed?", "gold": "Do we have namespace conflicts?"}
{"pred": "`cfg.Cache.TTLDuration()` should be `cfg.Cache.TTL()`", "gold": "We have several groups of caches so I think we should not use this shared configuration value for all of them. Instead of that, each cache group should have a separate configuration field, and the added `validation cache` should have its own field too. But this point, they can be fixed by `24h`."}
{"pred": "This is a BC break.", "gold": "This is a BC break for extending classes, it can't be done on 3.x"}
{"pred": "nit: `if server_side_encryption_customer_algorithm is not None:`", "gold": "Line length (PEP8, should be 80 chars max)"}
{"pred": "private static final String xPriorityContent = \"priority_low\";", "gold": "this is duplicate now. I suggest moving it into `MimeHeader`, we already have a bunch of other headers there"}
{"pred": "I think it would be better to use `strings.TrimSpace` instead of `strings.TrimSpace`", "gold": "Can you expand the warning slightly \"Your password contains leading/trailing whitespace - in previous versions of rclone this was stripped\" Just so users know they might have to type their password without a leading space."}
{"pred": "`MessageBox.Show(this, message);` -> `MessageDialog.Show(this, message);`", "gold": "I think \"this\" should be \"parent\"."}
{"pred": "Shouldn't this be `changed = TRUE;`?", "gold": "Why not init this at variable decl time instead?"}
{"pred": "nit: `ProjectIDEnvConfig is a struct to parse`", "gold": "Do we still need this if we're doing everything through `envconfig`?"}
{"pred": "Why do we need this?", "gold": "I would like these options to have `experiment` prefix or suffix. Because we will be deleting them later"}
{"pred": "I don't think you need the `value` here.", "gold": "Since we have the same logic in both forms, can we make a shared partial/helper for it?"}
{"pred": "I don't think we need the `.Hex()` here.", "gold": "Why to introduce this intermediate variable?"}
{"pred": "I don't think we need the `default=''` here.", "gold": "Maybe use ChoiceParameter?"}
{"pred": "Style/SymbolArray: Use %i or %I for an array of symbols.", "gold": "Not positive is this is needed, given the `TokenAuth` include"}
{"pred": "I think it would be better to use `NamedTuple` instead of `NamedTuple`.", "gold": "Why not use a docstring for it?"}
{"pred": "nit: use `assertThat(commandErrorOutput).contains(\"Port number '10' has been specified multiple times.\");`", "gold": "Two more tests - no ports specified and every possible port specified - p2pPort, graphQLHttpPort, rpcHttpPort, rpcWsPort, metricsPort, metricsPushPort, stratumPort"}
{"pred": "This should be 2019-2020.", "gold": "Don't worry about that next time, it's automated :)"}
{"pred": "Why is this needed?", "gold": "No need for this, as pylint already only turns things off for this function and it's needed for the entire function."}
{"pred": "Why do we need this?", "gold": "Are these values expected to change over time? Why not inject these values in ECS backend instead of agent doing it?"}
{"pred": "Shouldn't this be `os.Getenv`?", "gold": "as best i can tell, you are setting this here in order to make it available in `(e *ETCD) Snapshot(ctx context.Context, config *config.Control) error`. It feels wrong to pass state like this through an env var. Could you instead add a `nodeName` property to the ETCD struct?"}
{"pred": "I think this should be `drop_missing_column_2`", "gold": "These seem to support the new test framework below, but the `.in.csv` files are still committed."}
{"pred": "Shouldn't this be `txReceipts[i].Removed`?", "gold": "!txReceipts[i].Removed and We can check it for first item outside of for loop, we don't expect mixed batches"}
{"pred": "Why do we need to change this?", "gold": "We can't unfortunately change any of our old flags :( it'd be a breaking change. Instead, we can keep both `githubURLFlag` and `repoURLFlag` and make the description of `githubURLFlagDescription` as \"(Deprecated) Use --url instead. GitHub respository URL for your service.\" It would be even better if we can make `githubURLFlag` as hidden but keep in the command. This way old commands will still work with `--github-url` but it won't appear anymore in the help menu."}
{"pred": "Should this be `Puppet::ParseErrorWithIssue`?", "gold": "This provides file and line number if applicable."}
{"pred": "why do we need this import?", "gold": "This is already imported. Please check the file."}
{"pred": "Shouldn't this be `GeckoSession.SelectionActionDelegate.ACTION_SELECT`?", "gold": "One thing we can do in a follow up is use the shorthand calls, so You can just call `aSelection.unselect()` instead of calling the more verbose `execute()`. The fact that you have to check if the action is available sort of sucks though."}
{"pred": "Why this change?", "gold": "I don't think adding this value to _every_ connection policy is needed or useful... why is this necessary?"}
{"pred": "Why do we need to use EventStoreManagerInterface here?", "gold": "adding this constrain for null AggreagateId is redundant"}
{"pred": "Shouldn't this be `ctx.User.LowerName`?", "gold": "Why when current user is owner but still check access? Should we use `else if` here?"}
{"pred": "Why do we need this?", "gold": "60 seems high. 10? 20?"}
{"pred": "This should be `os.path.dirname(args.config_directory)`.", "gold": "I think this is not the best way to handle this problem. This way every relative path will be converted to absolute path. What if the user would like to move his config directory to a different directory?"}
{"pred": "Why do we need this?", "gold": "Let's make this a pointer given that's optional"}
{"pred": "'circular-json' is already defined.", "gold": "Why is CircularJSON imported here? It is never used in this file."}
{"pred": ">// LEGACY MODE! set defaults for the metadata, the validator doesn't care from this codepath #Resolved", "gold": "Should be ARM"}
{"pred": "Why remove the `: %v`?", "gold": "I don't see how removing \"open file bucket\" helps your purpose."}
{"pred": "This should be `6.6.1`", "gold": "Solr dependency was downgraded?"}
{"pred": "Style/StringLiterals: Prefer single-quoted strings inside interpolations.", "gold": "or should we just autoload everything in `lib` ?"}
{"pred": "`slots.stream().anyMatch(slot -> slot.isSupporting(caps))`", "gold": "Prefer `Stream.anyMatch` instead of iterating over all slots."}
{"pred": "Why do we need this?", "gold": "create_tables isn't used in 2.0 (should probably be deleted?)"}
{"pred": "Why do we need this?", "gold": "Now I start to wonder, do we want to have `80` as the default or `9090` (or depending on whether we are exposing it via `PrometheusExporterMiddleware` vs. `PrometheusExporterHttpServer`)?"}
{"pred": "Why did you remove the first and last names?", "gold": "try an illegal case. and the result is syntax error."}
{"pred": "Why do we need this?", "gold": "Initialize `needs_reshape_` with true and call `Reshape` method"}
{"pred": "Style/SymbolProc: Pass &:order as an argument to map instead of a block.", "gold": "This is a _very_ complicated line. I'm not a fan of ternaries to begin with (although, I allow them in very simple situations), but this ternary has compound conditionals and would really need to be broken up. That said: if I'm reading this right, it sounds like this logic can make it where this lambda (which is called `RANDOM_ORDERING`) can make it not random and basically do the opposite of what it says. In general, it's good to avoid making methods or lambdas do the opposite of what they say."}
{"pred": "Shouldn't this be `Backend\\\\Web\\\\Info\\\\ApacheSolrDocument`?", "gold": "We should remove this"}
{"pred": "nit: `IptablesNATOutgoingInterfaceFilter` -> `OutgoingInterfaceFilter`", "gold": "We should validate this, I think. To add a validator: - change `string` to, say `iface-pattern` - add a new `case \"iface-pattern\"` to the `switch` in the `loadParams()` function: - in that `case`, you should be able to use a RegexpPattern like the one for `iface-list`. However, you'll need a different regexp. I think this regexp should work: `^[a-zA-Z0-9:._+-]{1,15}$` i.e. 1-15 characters consisting of alphanumerics, colon, dot, underscore, hyphen and plus."}
{"pred": "You can use `require.NoError` here.", "gold": "File is not `goimports`-ed with -local github.com/iotexproject/iotex-core (from `goimports`)"}
{"pred": "Why do we need this method?", "gold": "Nit: Here we don't need the extra `this` in iceberg because we usually use the `this` to distinguish whether it is a member variable or local variable when assigning value."}
{"pred": "I don't think we should change this message. It's not clear to me why we should change it.", "gold": "Why do we have that extra \"ENGINE-16002 Exception while closing command context:\" now? Is that done intentionally by us or where does that now come from?"}
{"pred": "Please don't use wildcard imports.", "gold": "Please don't use star imports, in the codebase we tend to use direct imports."}
{"pred": "This should be `CREDENTIALS.username`", "gold": "Filename can be `config.functional`"}
{"pred": "Shouldn't this be `thread.joinable()`?", "gold": "Should the thread join be done in the stop function maybe? I am simply wondering and sharing my thoughts. This is my thinking: * The join used to be done in the stop function of node class and now it has moved in the destructor. * The class state_block_signature_verification joins its thread at the stop function too."}
{"pred": "Why do we need this?", "gold": "don't use `init` function (from `gochecknoinits`)"}
{"pred": "Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "Simple Notification **Service** (singular)"}
{"pred": "DEFINE_uint32(crash_test, 0, \"The flag could not be read\");", "gold": "You are fixing the crash problem, and you have fixed it, so it won't crash anymore. So `crash_test` is not a proper name."}
{"pred": "Why is this needed?", "gold": "If this default doesn't depend on the argument, shouldn't it be delegated as the default for the no-arg version instead?"}
{"pred": "E302 expected 2 blank lines, found 1", "gold": "I did not use the new save_config_file method in here, because I am not sure whether this whole logic is still necessary? There is an TODO about it there as well."}
{"pred": "Shouldn't this be `details?id=`?", "gold": "Why was this changed?"}
{"pred": "I think this should be `self.iou_thr == 0`", "gold": "I think you meant, self.floor_thr = 0"}
{"pred": "Why did this change?", "gold": "Can you revert these changes?"}
{"pred": "no-unused-vars: 'React' is defined but never used", "gold": "Do we need to change this?"}
{"pred": "Shouldn't this be `configs.MemoryUnlimited`?", "gold": "With this commit, `MemoryUnlimited` is defined as a `unit64`, so I think you can drop the redundant cast from this line (and the later lines which also have `uint64(configs.MemoryUnlimited)`."}
{"pred": "`notOverFileLimit` -> `shouldNotOverFileLimit`", "gold": "`props.totalFileCount < props.maxNumberOfFiles` makes the intent a bit more clear I think. And a check to see if maxNumberOfFiles even exists?"}
{"pred": "`epochNum` -> `nextEpoch`", "gold": "`epochNum` is a global variable (from `gochecknoglobals`)"}
{"pred": "Shouldn't this be `newEntity.id`?", "gold": "This needs to be fixed before we can accept the PR"}
{"pred": "Why is this needed?", "gold": "Are these forward declarations needed if we `#include <node/common.hpp>` which includes the definition ?"}
{"pred": "`ConnectID` -> `ConnectID`", "gold": "can you use either `connectID` or `ConnectID` i would preffer `connectID`"}
{"pred": "`array $crossSelling = [];`", "gold": "It seems like it cannot be null?"}
{"pred": "I think we should deprecate updateTime in ExecutionReference class.", "gold": "should we consider add deprecated annotation here?"}
{"pred": "I don't think you need to pass `name` here.", "gold": "Why can't the implementor get the username from the config?"}
{"pred": "Why this change?", "gold": "@CoderZhi Please confirm if this change makes sense"}
{"pred": "PRIVATE_SUBSCRIPTION_MULTI_TENANCY_ERROR(-50100, \"foo.\"),", "gold": "Do you think you can come up with a better message? :-) It looks like this is not used anywhere. So maybe just delete the line."}
{"pred": "Why did you remove this check?", "gold": "`tail()` is an expensive operation for certain collections"}
{"pred": "Why do we need this?", "gold": "do we need to add this one in this PR?"}
{"pred": "Why did you remove this?", "gold": "where is a test for it?"}
{"pred": "This should be reverted.", "gold": "Why has this spacing been adjusted?"}
{"pred": "`api_class_name` -> `api_class.__name__`", "gold": "Sorry to do this, since you're touching this file can you resolve the pylint doc messages above?"}
{"pred": "E501 line too long (116 > 115 characters)", "gold": "@alastair, because the `insertId` for two listens with different metadata and same ts was the same, only one of them would get written into BQ. A question is what would be the ideal way to write tests for stuff like this, so that this doesn't break again?"}
{"pred": "Why this change?", "gold": "Wondering where this breaks btw (although pretty understandable)"}
{"pred": "Why do we need this?", "gold": "is this needed? 10 is already the default"}
{"pred": "Shouldn't this be `if 'text_font_size' not in style`?", "gold": "One day we can try to allow the user to specify font sizes in something other than points. For now this is fine though..."}
{"pred": "Why do we need this?", "gold": "duplicated in both block of preprocessor condition. Can you join in one?"}
{"pred": "`axe.utils.escapeSelector(node.id)` can be replaced with `node.id`", "gold": "Can we put the first part of the expression inline with the `if(` for consistency's sake?"}
{"pred": "Why do we need ShardKey and RoutingKey?", "gold": "Do servers have no need of accessing this information?"}
{"pred": "Let's rename this to `formatTimeAgoText`", "gold": "It feels like this will break some stuff, but let it break. We need \"text\" version anyway."}
{"pred": "I'm not sure if this is the right way to do it. I think it should be `BiLogic(ITM_AND, predicate, compare)`", "gold": "Here are two things I wonder: First, would it make sense to replace the TRUE here with \"leftExpr->getValueId().getType().supportsSQLnull() && rightExpr->getValueId().getType().supportsSQLnull()\". I'm not sure we have optimizations elsewhere that set the \"special nulls\" semantics back to FALSE if one of the operands it not nullable. Second, I wonder whether we have bugs elsewhere in the code that may not check for the \"special nulls\" semantics. For example, hash and merge joins probably can't use such predicates as equi-join predicates - one of the reasons for the optimization above. When I look at method ItemExpr::isAnEquiJoinPredicate() in core/sql/optimizer/OptItemExpr.cpp, I don't see a check for that. You have an example with a NULL value that is working, so hopefully this is not an issue, but I'm not sure how and why it works."}
{"pred": "\"nan, inf or function name (signed)\" -> \"nan, inf or function name (signed)\"", "gold": "This will cause someone writing a schema field like `inf:string` to get a pretty confusing error? If they intended to use `inf` as short for `information` or whatever :) Might it be better to keep it as `Identifier` and explicitly recognize the few identifiers we care about only when parsing values (not while parsing field names)?"}
{"pred": "Why did you change this?", "gold": "Mmm .... this affect #168 I'll need to research the collateral damage"}
{"pred": "Why do we need to delete beta?", "gold": "nit: refactor into a const map lookup."}
{"pred": "This should be `this.GetType().Assembly`", "gold": "I don't think this is going to work. We need to get the actual assembly of the app project. @johnnywebb thoughts?"}
{"pred": "`use_memoise` is no longer used.", "gold": "@MSusik be careful about changing existing API. I think in this case you shouldn't rename the argument."}
{"pred": "`val.via.str.size` is not used anymore.", "gold": "This is bad. It is not a NULL-terminated string here."}
{"pred": "Shouldn't this be `string[]`?", "gold": "This probably should be @param string|false."}
{"pred": "Why do we need the managerId here?", "gold": "Unrelated test fix. Already in cordova34 branch."}
{"pred": "why is this no longer needed?", "gold": "validate() will be called by either V1 or V2"}
{"pred": "Why is this needed?", "gold": "rather than generate code for this every time, stick it in `flatbuffers.h` (and call it `FLATBUFFERS_NOEXCEPT` to avoid clashes)."}
{"pred": "I'm not sure if this is the best way to do this. I think it would be better to use `api.dbReader.Begin(ctx, nil, fullTx)`", "gold": "@AskAlexSharov @tjayrush , I'm still feeling uncomfortable with this change: - because it works by accident. For example in next lines `tx` object used as: `ReadBlockByNumber(tx)`. If you go inside `ReadBlockByNumber` you can find `!errors.Is(err, ethdb.ErrKeyNotFound)` - but ethdb.Tx doesn't return this error - and it satisfy `DatabaseReader` by accident - (I faced this problem last week - when passed Tx to place which expected Db - and I promised to change tx API - rename Get to GetOne or even remove the method). - we can merge this PR if it doesn't break things and solve problem of localDb use of RPCDaemon. But I will make PR now which will allow open Read tx by TxDb/ObjectDb - and will ask you to use it. Then will take a look how hard to change LmdbTx to not satisfy rawdb.DatabaseReader interface."}
{"pred": "", "gold": "I think this means the file doesn't have a newline character at the end."}
{"pred": "Why do we need to set previlege to false here?", "gold": "Hi Ramya, rather than checking here in the perf counter library, we should add the privilege check in the host_exerciser app."}
{"pred": "Shouldn't this be `if not notifyObjectDeletion`?", "gold": "Could you elaborate on this some more? Has this behavior changed with Python 3.8?"}
{"pred": "I think this should be `r.Config.Logger.Error(err)`", "gold": "Do we want to continue on logging the `dumpedBody`, if an error was thrown? It is probably an empty string. This would make the log after this one pretty much useless."}
{"pred": "I think this should be `f.object.type.humanize == 'example answer' ? _('Example answer') : _('Guidance')`", "gold": "the text here is derived from the object type and not getting properly handled by get text"}
{"pred": "Why do we need to check for `antrea-controller` here?", "gold": "This will make other pods that run antctl will also connect its localhost? Maybe only do it when it's in antrea-agent and antrea-controller"}
{"pred": "Why was this removed?", "gold": "The corresponding action for this key needs to be removed as well, along with any unused translations."}
{"pred": "Why is this change needed?", "gold": "Can't Span cannot be null anymore? I assume it was a useless check as there are discrepencies within integrations, but as you explicitly removed this one, I was wondering"}
{"pred": "Why are we removing `Rewards`?", "gold": "hmmm, ok, this is interesting -> Lukasz definitely uses rewards traces"}
{"pred": "nit: `read.split.by-partition` -> `read.partition-by-partition`", "gold": "Why do we need this flag? can this be detected if the table is bucketed/partitioned and enabled/disabled automatically? Is this for backwards compatibility?"}
{"pred": "if (*name == '$')", "gold": "can you revert changes to this file."}
{"pred": "nit: missing period at the end.", "gold": "suggestion to add: An soc is a chunks whose address is derived of (...)"}
{"pred": "`USERNAME_PASSWORD_REQUIRED` -> `USERNAME_PASSWORD_REQUIRED`", "gold": "It doesn't make sense. if we are going to have the profile page where the user can change the password and he / she is already logged in ... I do not need to register a new username. only: new password..confirm new password..something similar...and \"USERNAME_ALREADY_REGISTERED\" only if I have a register page..are we going to have? We need to talk about it."}
{"pred": "`blockNumber` -> `blockId`", "gold": "not a great fan of this change - maybe worth splitting into CommitTree() and CloseBlock(long blockNumber)?"}
{"pred": "Why do we need this?", "gold": "Ugh, if we're going to make a breaking change, I'd like this to be moved to ConnectionContext."}
{"pred": "Why do we need this?", "gold": "I was planning to add it as a common option, but there is a cyclic import for the rc & fs libs. Thoughts on avoiding it or should I remove this for now?"}
{"pred": "Should this be `NugetVersionReplace`?", "gold": "I think this entry can be removed now, right?"}
{"pred": "I'm not sure if this is the right place for this logic. I think it should be in the `handle_version_headers` method.", "gold": "I don't understand why you want to populate the storage class in this case, if the S3 docs say they won't populate the header in this case?"}
{"pred": "I don't think this is used anywhere.", "gold": "These are really meant to be the keys in the capabilities, not the keys of values within the capabilities"}
{"pred": "I don't think this is true. If no region is specified, hint or ConfigProvider, an error will be returned.", "gold": "Should the last sentence be `If no region was found` rather than `specified`?"}
{"pred": "Why do you need to sanitize the player name?", "gold": "Text.sanitize just removes images from names, for instance, the hardcore ironman symbol when someone talks. A better option would be text.standardize, or text.toJagexName"}
{"pred": "`ToApplicationKind` is unused (from `deadcode`)", "gold": "How about `ApplicationKindFromConfigKind`? And I think this function should be better in the config package. The reason is `config` package can import and refer things from the model package but not vice versa."}
{"pred": "nit: \"If you're using MSI for authentication\"", "gold": "Nit: missing closing \".\"."}
{"pred": "I think it would be better to use `driver.find_element(By.ID, \"disabled-button\")`", "gold": "I believe it's misleading name for the condition. I prefer \"element_to_be_disable\" We can have a condition, when element is enabled but we can't click it, because another element overlays above it. So, If we use \"unclickable\" we might mislead people, who use that condition to verify if element can be clicked"}
{"pred": "why do we need to change this?", "gold": "Same here. Should this be pipeline YAML file? Like `MarshalPipelineManifest`"}
{"pred": "Why do we need this?", "gold": "I will add this to my PR  "}
{"pred": "Layout/EmptyLines: Extra blank line detected.", "gold": "Again not 100% sold on the name"}
{"pred": "Shouldn't this be `m.Get(\"/avatar\", user.SettingsAvatarPost)`?", "gold": "Use `m.Combo` for `Get` and `Post` methods."}
{"pred": "This should be `message.error(self._win_id, ...)`", "gold": "Is there a reason you're not using `self._die(\"The file {} ...\")` here?"}
{"pred": "`[app_name] [environment_name] [cmd]`", "gold": "I think we'll want @rickmanelius (or somebody) to go through all the help and make it more accessible. Probably later in the cycle. But \"Run a command in an app container\" doesn't do it for me :)"}
{"pred": "Why do we need this?", "gold": "shouldn't this be a const?"}
{"pred": "Why was this removed?", "gold": "This is a bit of a throwaway field in the xunit output, it doesn't impact anything on EVG, should we just name it `integration` now?"}
{"pred": "Why do we need to change this?", "gold": "Please change the name of the file too."}
{"pred": "Why do we need to change this?", "gold": "line is 161 characters (from `lll`)"}
{"pred": "I don't think this is the right place to do this. If `ok` is false, then `@outputter.print_puppetfile_result(ok, path, moduledir)` won't be called.", "gold": "When is this false?"}
{"pred": "Why was this removed?", "gold": "note: also here ;)"}
{"pred": "Why do we need to remove shutdown hook here?", "gold": "I don't think we need to necessarily check if that returned true or not, we should just remove the shutdown hook. Since nothing would check or do anything with this flag anyways."}
{"pred": "I think it would be better to use `GitRepo` and `LocalRepo` instead of `Git`.", "gold": "nit: blank between, for consistency."}
{"pred": "Why do we need to escape `$`?", "gold": "ditto for RDoc or YARD link"}
{"pred": "Should this be `logger.finest(message);`?", "gold": "This method is designed to allow the condition runner to tell users something interesting. The current `INFO` log level is correct."}
{"pred": "Why do we need to change this?", "gold": "Again, would not change that."}
{"pred": "nit: `isStatusFailed` -> `isStatusFailed`", "gold": "Is canceled considered failed?"}
{"pred": "Why are we ignoring the error here?", "gold": "These ineffectual assignment changes intrigue me. Our CI tests have been checking for these for months; how come the tests haven't been failing? How did you catch these?"}
{"pred": "nit: `require.NoError(t, err)`", "gold": "We should add an additional call to Recv() somewhere after here that we assert returns io.EOF."}
{"pred": "Why do we need a new context here?", "gold": "Why not return a `ctx` from `setupJournalBlockServerTest` and use it everywhere, like in the other test files? And maybe put a test timeout on it while you're at it? (Same for the other journal test files below.)"}
{"pred": "Shouldn't this be `return skip;`?", "gold": "Do we need HeadlessSurface and DisplayPlaneSurface here too?"}
{"pred": "`MongoGridFSStreamError` -> `MongoFSStreamError`", "gold": "Would it be appropriate for this to be a `MongoStreamClosedError`?"}
{"pred": "Why do we need this alias?", "gold": "Can you raise new issue that talks about refactoring webhook code. It should follow `idiomatic maya` patterns."}
{"pred": "Why do we need this interface?", "gold": "(Probably repeating myself) Instead of `Datadog.Trace.Interfaces`, should we move this and several other files into a `Datadog.Trace.Decorators` namespace instead?"}
{"pred": "Why do we need to require this?", "gold": "Should we generate `gem \"rsolr\"` into the application Gemfile?"}
{"pred": "Why do we need this?", "gold": "commit message, \"currently ignored\"? (-ed)"}
{"pred": "Style/AndOr: Use && instead of and.", "gold": "Same here. and all others."}
{"pred": "Why do we need the mainChainProcessor?", "gold": "can we pass some simple interface instead of a full additional processor? (an imterface with these two events only)"}
{"pred": "Why is this needed?", "gold": "Use a named constant"}
{"pred": "Why is this nullable?", "gold": "The `?` is unnecessary since `Assert.Single` will fail if it can't find the stop event."}
{"pred": "Why do we need this method?", "gold": "What about providers that don't have a reliable location? Do they return null?"}
{"pred": "nit: `SetGetMetricFunction` -> `SetGetMetric`", "gold": "I might not be thinking about things right, but would it make sense for a MetricProcessor to have a handle on the ParentProvider kinda like how we do for traces? That way instead of calling `SetGetMetricFunction(this.Collect)` in the MeterProviderSdk you'd have a handle on the provider to call `Collect` directly."}
{"pred": "I think this should be `PORT_DYNAMODB_URL`", "gold": "nit: If we want to squeeze out a few more milliseconds from the startup, we may actually be able to remove this line (`wait_for_port_open(PORT_DYNAMODB_BACKEND, http_path=\"/\", ...` should already be sufficient to ensure that the service is up and responding to HTTP requests). Thoughts?"}
{"pred": "Shouldn't this be `num_raw & SYSCALL_NUM_MARKER_BSD`?", "gold": "Convention is to use TEST"}
{"pred": "Why is this test disabled?", "gold": "Just in case: remember to remove this."}
{"pred": "`baseFee = max(parentBaseFee - feeDelta, 0);`", "gold": "I am not certain if this should be 0 or 7 here. I think a basefee under 7 is pathological"}
{"pred": "I think it would be better to use `DEG_SIGN_U+00B0` here.", "gold": "it would be better to move the declaration of the variable with its initialization at line 68"}
{"pred": "Why is this import needed?", "gold": "I don't think this is required."}
{"pred": "`updateContext` is unused (from `deadcode`)", "gold": "This rename should also ideally be in a separate PR."}
{"pred": "`propagateIfFatal(t1)` -> `propagate()`", "gold": "Think this needs to go right below line 91. `parseResponse` can return `null` (line 133), which will cause this future to never complete."}
{"pred": "Why do we need this change?", "gold": "Can you please revert changes to files in the `thoughtworks` package? This is legacy code and we will eventually phase out RC."}
{"pred": "Shouldn't this be `true` instead of `false`?", "gold": "Yeah, why not use this method instead of checking with `containsKey`?"}
{"pred": "nit: `ms/iter` -> `ms/iter`", "gold": "Compute `(time_forward + 1e-3) * 1e3 / loop_num` ahead."}
{"pred": "Why are we removing this?", "gold": "Mh... `MustBeRethrown()` above already logs `ex`, so `ex` will be logged here for the second time. I think this line must be moved to before `MustBeRethrown()`."}
{"pred": "Why do we need this change?", "gold": "Since this never changes, why not pass it into the constructor instead?"}
{"pred": "Should this be `readonly`?", "gold": "this is critical to avoid state root saving from beam"}
{"pred": "`self.num_classes` -> `self.num_labels`", "gold": "To make it more clear, `fill=self.num_classes`."}
{"pred": "Why do we need this?", "gold": "Nit: \"ByteSize estimates the size in bytes of the message for the purpose of restricting batch sizes.\""}
{"pred": "Why is this needed?", "gold": "It's weird to have this on the same level as kestrel. This needs to move to options."}
{"pred": "Shouldn't this be `.find(blob => blob.type)`?", "gold": "is it safe for us to use the `blob.type?.length` optional chaining with IE11 support? @goto-bus-stop"}
{"pred": "Is this leftover from debugging?", "gold": "remove this debug statement"}
{"pred": "Shouldn't this be `>=` instead of `>=`?", "gold": "This should not be needed. 1) all 1.1 promoted extensions are marked as enabled when a 1.1 device is created (which happens iff both physical device support and apiVersion are set to 1.1) 2) The KHR and non-KHR versions of the bits are aliases of each other, so no different set is required."}
{"pred": "Shouldn't this be `CCTOOLS_LOOP_DEV_FULL=1`?", "gold": "I can see why you did it this way, but let's not get into the habit of passing information back via an environment variable. Add an element to `batch_job_info` instead, which is where we send back detailed info about jobs."}
{"pred": "Shouldn't this be `newVNode.type === 'progress' && i`?", "gold": "Turns out my previous fix of doing `!dom.hasAttribute('value')` is not a good one as it leads to all input values always being updated. The new fix only updates it, despite `dom.value === props.value` when the value is `0` for progress elements."}
{"pred": "Why is this needed?", "gold": "Why is this being added here? Is this relevant to these changes?"}
{"pred": "Why did you change this to finest?", "gold": "This informational message is important to users. Please leave."}
{"pred": "I don't think you need the `url_for` here since you're using `@proposal.id`", "gold": "why isn't rubocop failing for single quotes?"}
{"pred": "Should be `pws.status_id`", "gold": "Is `WHERE` should `Language` param ?"}
{"pred": "ps = oneapi::dal::preview", "gold": "ps - first letter from preview, when we move it into public it will not be relevant. my suggestion is spmd or ds(distributed)"}
{"pred": "nit: `F.abs` -> `F.abs`", "gold": "Hm, should we show pandas' dtype instead of Spark data type?"}
{"pred": "Why did you change this?", "gold": "@reyang when exponentialhistogram arrives, we won't have any bits left for it.. unless we take Summary or make this 16 bits instead of current 8 bytes"}
{"pred": "`@psalm-taint-sink text $class`", "gold": "This change is not tested.. I guess this is how these taint-annotations work..?"}
{"pred": "Why do we need this?", "gold": "Fails if obj is list. Please fix!"}
{"pred": "Please use `self.assertEqual()` instead of `self.assertEqual()`.", "gold": "Could you add an assertion to make sure the `IncludeAllInstances` parameter is actually set and passed to the request?"}
{"pred": "Why is this necessary?", "gold": "The name of this argument is not too intuitive. The point is, these kind of subprocess calls will return `str`s in Python2 and 'byte`s in Python3. It would be a lot of work to make CodeChecker handle both `str` and `byte` everywhere. Using the `universal_newlines` argument, we can force Python3 to return text rather then bytes."}
{"pred": "Why do we need this change?", "gold": "These `Get`s are just cosmetic changes for consistency."}
{"pred": "Why are we skipping this test?", "gold": "We should never skip unit tests, but instead fix them. Look at `pytest.raises` for cases where we expect an exception."}
{"pred": "Shouldn't this be `Log.LogWarning`?", "gold": "Do we need to call ToList here?"}
{"pred": "Use 2 (not 0) spaces for indenting an expression spanning multiple lines.", "gold": "I think this can be moved into the model, at the very least, but I also think you might be able to do a has many through."}
{"pred": "You can use `String.join` here.", "gold": "could you please separate computations from string concatenation?"}
{"pred": "Why did you change these?", "gold": "@NiklasGustafsson - I had to make these changes for the x-ms-client-name extension tests for java and python. The tests were expecting wire format instead of the client name. Hence modified them appropriately. Let me know what you think ?"}
{"pred": "Shouldn't this be `if (cmd->cmd != H2O_HEADERS_CMD_NULL)`?", "gold": "Could we just set the list of header modification commands to `req->overrides` and apply them only when the request is sent upstream in lib/core/proxy.c? The reason I ask is because an upstream server (accessed using the modified headers) might return 399. In such case, the request would be delegated to the next handler. I think that the headers of the original request should be passed to the next handler, since per my understanding the intended behavior of `proxy.header.*` is to modify the headers passed to the upstream server only."}
{"pred": "nit: `lastUpdateTime` -> `lastRefreshTime`", "gold": "Can we rename 'refresh' to 'read' and 'update' to 'write'? Until I had read more of the code below, I couldn't tell the difference between 'update' and 'refresh'."}
{"pred": "Can we remove this?", "gold": "can we remove it ?"}
{"pred": "I think it would be better to use `snake_case` for function names.", "gold": "I take it that by the time we get here, colName has already been case-shifted to upper case?"}
{"pred": "I don't think this is true. If multiple entries have the same normalized header name, newer entries override older ones.", "gold": "Super clear desc - thx."}
{"pred": "Shouldn't this be `return false`?", "gold": "Ahh the correct fix is to call `collectLinkLibraries` on the SourceFile being compiled, not the module. Sorry for our mistake!"}
{"pred": "assert.Equal(t, DefaultTaskMetadataSteadyStateRate, cfg.TaskMetadataSteadyStateRate,", "gold": "Can you also modify the `TestEnvironmentConfig` in `config_test.go` to cover this?"}
{"pred": "Why do we need to remove onSuccess?", "gold": "There's no point \"deprecating\" this interface method (the customer still has to implement the new callback that we have introduced which makes it a breaking change). I'd make an exception and simply rename it to `onResponse`."}
{"pred": "Why did you change this to `finest`?", "gold": "We chose `info` in the test code for obvious reasons. Changing to `finest` makes debugging harder and noisier."}
{"pred": "Why do we need this?", "gold": "I know this is not new here but we need to remove this global or protect access from multiple threads."}
{"pred": "Why did you change this?", "gold": "Doesn't seem any less confusing or error-prone to me. IMO the solution is to not use \"object\" in the enrich callback signatures. Type safety/compile-time checking is our friend!"}
{"pred": "Why is this needed?", "gold": "I think this should be `GOMAXPROCS=$(nproc 2>/dev/null || echo 2)`"}
{"pred": "why do we need to check for `block.WorkingSet` here?", "gold": "Can we log if this actually happens."}
{"pred": "Shouldn't this be `remoteHost` instead of `remoteHost`?", "gold": "This is not really needed, the line added in `GridNodeConfiguration.java` is what really fixes the `remoteHost` regression."}
{"pred": "Why do we need lodash here?", "gold": "It looks like the import format was only changed from one-per-line to all on one line here. Can we keep it as it was so it's easier to see what changed? It's also more consistent with how we format multiple imports in other components."}
{"pred": "This should be `W3CBridge`", "gold": "Maybe call it `WireBridge`?"}
{"pred": "I don't think you need this import.", "gold": "Looks like `org.json.*` can be removed?"}
{"pred": "Remove this empty line.", "gold": "remove the extra comma and newline"}
{"pred": "Shouldn't this be `@application_name`?", "gold": "Can we try to use Ruby 1.9-style hashes?"}
{"pred": "nit: `RegisterGlobalOption registers a global option opt with an associated unmarshaling function.`", "gold": "Terminology question - these are called \"global options\" in the code, but the parallel non-global versions of these are called \"directives\"... Should this be `RegisterGlobalDirective`? Or does that have different semantics?"}
{"pred": "Why did you remove the `role==ROLE_PASSWORDEDIT` check?", "gold": "I do not care much, but you could as well just return bool(focusObject and focusObject.isProtected) here and avoid the if check? I know, really trivial."}
{"pred": "I think it would be better to use `driver.find_element(By.ID, \"disabled-button\")`", "gold": "I believe it's misleading name for the condition. I prefer \"element_to_be_disable\" We can have a condition, when element is enabled but we can't click it, because another element overlays above it. So, If we use \"unclickable\" we might mislead people, who use that condition to verify if element can be clicked"}
{"pred": "Why is this change needed?", "gold": "Do DiscoveryContext and GoGapicContext have a more specific common ancestor than Object? If so, let's use that."}
{"pred": "Why this change?", "gold": "is this the intended behavior now?"}
{"pred": "Why was this removed?", "gold": "Hunspell/C++ stems that a bit differently from Lucene, but in a controversial way, so I removed the check instead of changing the expectation"}
{"pred": "Why was this changed?", "gold": "I'm curious why this is needed?"}
{"pred": "`target` can be `nullptr` here.", "gold": "I do not see how that changes anything, as the target is operated on many times before that line?"}
{"pred": "Shouldn't this be `analytics-visitor-loyalty`?", "gold": "Same user/visitor thing."}
{"pred": "I'm not sure if this is the best way to get the actual path to the script, respecting arch differences?", "gold": "This is not the correct path on all hosts. How can I correctly determine whether I will need to look in `Program Files` or `Program Files (x86)` for the script?"}
{"pred": "Shouldn't this be `FailedToSend`?", "gold": "I think it would be better to move this try/catch block inside of the `FlushAsyncInternal` function as there are a few of places that can call it, eg event timer (here), AppendAsync, FlushAsync and CloseAsync."}
{"pred": "I think this should be `final`?", "gold": "should we set a smaller initial size to make sure that we exercise the growing logic in our tests?"}
{"pred": "`assert_equals` is deprecated, use `assert_frame_equal`", "gold": "Let's add a new line at the end of this file, so that the last line becomes a valid line of code."}
{"pred": "Shouldn't this be `UnqualifiedName`?", "gold": "Why was this removed?"}
{"pred": "Shouldn't this be `sarif.log`?", "gold": "I would prefer that this tool follow the driver framework conventions, which use OutputFilePath as an argument, take a look at AnalyzeCommandBase. You can propose changes to that if you'd like, but binskim, sqlskim, this tool should all conform (in the interests of building an eco-system with consistent command-line interface)"}
{"pred": "nit: `times the given element`", "gold": "(...), where each element ~are~ **is the** given {@code element}."}
{"pred": "Should this be `AddOpenTelemetryTracingProvider`?", "gold": "What if `AddOpenTelemetryTracing` is called multiple times?"}
{"pred": "Should this be `lastId <= wal_->lastLogId()`?", "gold": "Why is the condition of \"lastId <= wal _-> lastLogId() \" added here?"}
{"pred": "`MakeEnvironmentURL` is unused (from `deadcode`)", "gold": "`environmentID` is unused in MakeEnvironmentURL"}
{"pred": "`if (length > 0) {`", "gold": "Just hide the textview"}
{"pred": "nit: can we call this `Pingpong`?", "gold": "'Supports'? Very uninformative naming inside protocol. Why not just paymentVersion, or just recognise supported payment version from generic protocol version supported by the client."}
{"pred": "Shouldn't this be `require.NotNil(stream)`?", "gold": "We should add an additional call to Recv() somewhere after here that we assert returns io.EOF."}
{"pred": "Why do we need this import?", "gold": "What is this used for?"}
{"pred": "Why did you remove this?", "gold": "this is a breaking API change. Do we really need to do it in 6.2.0? Can't we just deprecate the methods?"}
{"pred": "Shouldn't this be `createTable`?", "gold": "Is dropping the **Allergen table** necessary? Can't we just add the two new columns to the existing table using a raw query?"}
{"pred": "Line is too long. [81/80]", "gold": "I'm confused why the expectations here would have inverted? Seems unrelated to topic stuff. Can you clarify?"}
{"pred": "Why not use `std::numeric_limits<int64_t>::max()`?", "gold": "I am very sorry that I neglected to resolve the conflict and did not fully unit test edge"}
{"pred": "Why is this needed?", "gold": "I think closeable should be handled by the concrete impl of a catalog and not by the base class, I don't think all catalogs must implement closeable by design. This should be done via composition rather than inheritance. Additionally, I don't know what the effect of this change is on other catalogs so this feels a bit on the risky side."}
{"pred": "nit: `kernel_extent = dilation_data[i] * (kernel_shape_data[i] - 1)`", "gold": "Should this be `const`?"}
{"pred": "Why is this change needed?", "gold": "Can we also add the Exporters here by using `DefaultConfig.AddExporter(...)`? At least the Datadog exporter that can't be configured from the command line..."}
{"pred": "Shouldn't this be `ckpt_dir`?", "gold": "@JaeseungYeom I believe you had set this in a previous commit to, by default, not train model1 when loading from ckpt. Would it work for you to have this as a command line option `--no_model1_train` instead of the default behavior?"}
{"pred": "Why is this a real Ruby type?", "gold": "@devigned, please clarify"}
{"pred": "Please remove this empty line.", "gold": "File is not `gofmt`-ed with `-s` (from `gofmt`)"}
{"pred": "why is this needed?", "gold": "Should we break this up into a separate line?"}
{"pred": "Why is this needed?", "gold": "Why the override on the env variable, wouldn't we want to use the value set from Prow?"}
{"pred": "Layout/AlignHash: Align the elements of a hash literal if they span more than one line.", "gold": "I don't see anything here that excludes people on a Team plan from from the revenue report. I see that TeamPlans are counted below, but the individual subscribers on the plan would still be included."}
{"pred": "Shouldn't this be `beginIndex <= endIndex && endIndex <= length()`?", "gold": "I know that we do not pull the last bit of performance out of the JVM but it is more robust and removes redundant code."}
{"pred": "`!= null` -> `!= null`", "gold": "I'd make this a `throw new NullPointerException(\"registry == null\");` instead"}
{"pred": "I think this should be `time.Duration`", "gold": "Does adding things here require us also to extend the FelixConfiguration resource in libcalico-go?"}
{"pred": "This should be `0.3.2`", "gold": "does this need to be public?"}
{"pred": "Is this used anywhere?", "gold": "Please import this from a pre-existing definition."}
{"pred": "I think this should be `True` by default.", "gold": "File name does not represent class name... if we ever cared for such things?"}
{"pred": "I think this should be `label_as_spammer`", "gold": "I don't mind the `make_spammer` route name. It seems to more clearly convey that the state of the account will change. The \"label as\" route name seems less definitive, as if one is simply adding something to the account -- a new label -- instead of changing the status of the account."}
{"pred": "Why do we need this change?", "gold": "This exits if `-d` not specified which isn't exactly what we want, right?"}
{"pred": "E302 expected 2 blank lines, found 1", "gold": "So a `*` becomes `**`? How does this affect the query? If I have `csordas*marton` as filter and I have `csordas*marton` and `csordasFOOBARmarton` as run names in the database I get only the first as result?"}
{"pred": "I think it would be better to use %u instead of %u.", "gold": "I want to know in which situation you need to traverse from \"Timestamp\" data....."}
{"pred": "I don't think we want to return an error here. If the request body is not seekable, we should return an error.", "gold": "nit: hasBytes should be hashBytes"}
{"pred": "Why do we need to disable this for clangsa?", "gold": "If I enable the clangsa analyzer with the `--stats` flag the checkers will be disabled even if they were enabled previously. I think we should check here if stats was enabled. `if 'stats_enabled' in args and args.stats_enabled` we should leave them enabled."}
{"pred": "Why do we need to set it to 21000?", "gold": "Note that we probably should set the default gasPrice to `0.1 gwei` considering our minimum gas limit has to be 21k. At 21k the minimum fee would end up being `0.000021 ETH` which is just a little too high"}
{"pred": "Shouldn't this be `opc.Subject` instead of `opc.Issuer`?", "gold": "So during a config reload, this function is invoked, but prior to that the o.TrustedKeys slice is set to nil, so this code would work. However, I am wondering what happens to s.trustedKeys, I am not sure this is handled at all. (same with the new map you are adding). I am not sure if this is supposed to be supported with a config reload, but just wondering if this is not putting things into a bad state."}
{"pred": "I don't think this is the right error message. It should be \"Access denied, token is empty\".", "gold": "I think the logic should be to check for token len of 0 then check for token len of less than 2. The way the logic is now, it is hard to determine if it is empty or malformed."}
{"pred": "Shouldn't this be `!=`?", "gold": "Nothing would change here even if this `if` statement were removed."}
{"pred": "Why did you change this?", "gold": "`sql` module is imported later."}
{"pred": "why do we need this?", "gold": "I think it's strange, whether `assert cfg.nms.type == 'nms'` would be better."}
{"pred": "`return dialog.show(options).then(function () {`", "gold": "Doing a quick search, it looks like there are other places that would be handling this promise rejection. How did you confirm this is not needed?"}
{"pred": "`hu.IsPost(config.Fairbank, 0)` -> `hu.IsPost(config.Fairbank, 0)`", "gold": "let's use greenland in the unit tests as well"}
{"pred": "\"navigated with the cursor keys like in a text document\"", "gold": "Please split this into two lines"}
{"pred": "Shouldn't this be `>=`?", "gold": "Is there any variable available instead of hardcoding 5?"}
{"pred": "Why was this removed?", "gold": "The onNewPasscode method was taking care of creating the user account. Now the user account will already have been created."}
{"pred": "Why do we need this?", "gold": "This is really a minimum, isn't it, so `minPostWriteInterval` perhaps? IIUC it never gets used as a default, because the default IptablesPostWriteCheckInterval is 1s, which is larger than this."}
{"pred": "I don't think you need the `self.send` here.", "gold": "I wonder if you can use the controller's context instead of using it explicitly?"}
{"pred": "Would it make sense to return the error here?", "gold": "Can you add this log for `baseline` too?"}
{"pred": "I don't think this is used anywhere.", "gold": "Let's call this \"NEW_BROADCAST_MESSAGE\". Msg.NEW_MESSAGE will be confusing down the line."}
{"pred": "Should this be a `map[ContainerStatus]TransitionDependencySet`?", "gold": "A better way to do this (in your future PR) would be to: 1. get rid of `TransitionDependencySet` altogether 2. tag `TransitionDependenciesMap` as `\"TransitionDependencySet\"` in JSON 3. update the JSON marshaler to deal with `\"TransitionDependencySet\"` tag. If it's a map, no big deal. Else, construct the `TransitionDependenciesMap` map. Doing that would mean that we don't need to have duplicate code, names for this."}
{"pred": "I don't think you need the outer parens here.", "gold": "It's very error-prone to have so large `try` clause with such non-specific exceptions handled. Consider rewriting it with either of these: 1. Check that expected columns are present in `DataFrame` (`{'physical_key', 'logical_key', 'size'}.issubset(df.columns)`). 2. Normalizing output of query by using `COALESCE()` (or normalizing `DataFrame` itself?). Also it looks like a row with package metadata isn't used here, so might make sense to filter out it with `WHERE logical_key IS NOT MISSING`."}
{"pred": "struct field DisableHttpGit should be DisableHTTPGit", "gold": "Change to `DisableHTTPGit`"}
{"pred": "Why was this removed?", "gold": "org was not used in the mail content"}
{"pred": "Shouldn't this be `!nightShift`?", "gold": "Is this gonna cause a lint issue, because of unused var? Maybe we should log it out?"}
{"pred": "@tinaafitz Should this be `host['ip'].to_s`?", "gold": "My understanding is that this will always be set to the actual containers IP, and never to the `DOCKER_HOST` IP if that env_var is set."}
{"pred": "I don't think we need `debouncedSetInProgress` here, we can just use `debouncedSetInProgress`.", "gold": "this dependency to a callback also has to be a callback (eslint now warns us)"}
{"pred": "Why do we need this change?", "gold": "directory name as well needs change.."}
{"pred": "Why do we need to call `normalizeIdentifier` here?", "gold": "Why is the getIdentifier() call required here?"}
{"pred": "`error_ = file_being_parsed_.length() ? file_being_parsed_ : \"\";`", "gold": "Looks more appropriate to stick this in `AbsolutePath`.. actually that already has `FLATBUFFERS_NO_ABSOLUTE_PATH_RESOLUTION`"}
{"pred": "Why do we need this?", "gold": "this might interfere when we have multiple dashboards. maybe ActionBrowseTagline needs to be a Component so we can store the reference to the element on it."}
{"pred": "I don't think this is the right place to cache it. I think it should be in `kbfsblock.go`.", "gold": "Should this be inside the `else` below and right after `CDebugf` so that we still get the logs?"}
{"pred": "Why do we need this?", "gold": "Weird they don't expose the type for dynamo and this seems a pretty common error."}
{"pred": "Shouldn't this be `IDisposable`?", "gold": "@cijothomas I couldn't make the unit tests work without a way to destroy the ActivityListener we create internally so I return it as an IDisposable here. But we'll also need to also stop any ActivityProcessors/ActivityExporters on application shutdown right?"}
{"pred": "`addtransaction` should be `True` by default.", "gold": "The default should be \"False\", as \"True\" would be a significant change in behaviour."}
{"pred": "I don't think this is the right place to do this. I think it should be in `pandas.compat.cPickle`.", "gold": "since goal is to restore old_protocol, shouldn't we get it from pandas if possible? e.g. this will break if their source code changes."}
{"pred": "Why not `implode('&#10;&#9;', $matches[2])`?", "gold": "This should consume less resources because str_replace don't need to assign arrays with all the values"}
{"pred": "`argument type is %s` -> `argument type is %s`", "gold": "It would be better to pass `param` as the second argument here, so that the parameter declaration is printed alongside the type. Same thing for the changes in `ffi.c` and `lambda.c`."}
{"pred": "import org.slf4j.Logger;", "gold": "Do we need to set the members to final like submitTime, submitUser ...? They are only used by getter method."}
{"pred": "`__CLASS__` should be `\\Cms\\Classes\\MediaLibraryItem`", "gold": "That makes this error message incorrect; if someone has extended Cms\\Classes\\MediaLibraryItem, then this error message will read \"Class My\\Classes\\CustomMediaLibraryItem has been deprecated\"."}
{"pred": "Shouldn't this be `$this->getConfig()`?", "gold": "Is it worth injecting the whole configuration object for just one setting? Would it be more generic to pass an $options array with the override_from in it? I'm not completely opposed to passing $config, but since we've avoided it so far, it seems like it would be cleaner to maintain that separation. Simply adding a getOptions method to the factory would make this a lot more readable."}
{"pred": "I think this should be `SPI1_SCK_PIN`", "gold": "Just curious: where do these pin numbers come from? I see you took the SPI0 pin numbers from the Arduino board layout which is good, but I can't find such a relation for `SPI1`."}
{"pred": "I don't think this is the right place to report the missing class. It should be at the end of the method.", "gold": "Isn't that already too late? I'd expect, that the LinkageError occurs the first time, we have the class instance (the classloader tried to load the class) - or do we get a partially linked class back, and we get the exception when retrieving the methods?"}
{"pred": "Why do we need to change this?", "gold": "nit:s/Traceparent/traceparent/ - As per the spec header name is all lowercase."}
{"pred": "Why not just use `filepath.Rel`?", "gold": "We need to have unit tests for it since it is now a public function. Also I'm not a fan for making this movement since `relPath` doesn't consume any info in this pkg."}
{"pred": "please don't use star imports", "gold": "We generally avoid wildcard imports. If you feel like changing it back, great. Otherwise, no big deal."}
{"pred": "Why do we need to change this?", "gold": "We also have a typo on the line above! OUt or Out?"}
{"pred": "Shouldn't this be `view_request_cta`?", "gold": "OH! These are text.... (Ignore above)"}
{"pred": "Why was this removed?", "gold": "How was this set before? Was it just ignored?"}
{"pred": "Metrics/LineLength: Line is too long. [82/80]", "gold": "Should we `save!` here?"}
{"pred": "`sizeof(\"65535\")` -> `sizeof(\"65535\")`", "gold": "sizeof(port) seems ever-so-slightly clearer."}
{"pred": "Why is this a list of ClusterGroup names? Shouldn't it be a single ClusterGroup?", "gold": "Not sure if this has been discussed. I wonder why SourceGroups and DestinationGroups are not in From and To NetworkPolicyPeer as NetworkPolicyPeer already describes the source/destination of the traffic."}
{"pred": "Why do we need to strip `--mode=`?", "gold": "This doesn't account for `:bind --mode caret ...` (i.e. `--mode caret` instead of `--mode=caret`; both work). Do you see an easy way to make that work?"}
{"pred": "Why do we need to change this?", "gold": "Is this map used for durable state anywhere? If so we probably want to keep ConditionFailedError as 2"}
{"pred": "Is this used anywhere?", "gold": "You can use `http.MethodHead` here."}
{"pred": "Missing license header.", "gold": "And another empty test. Please remove until there's content."}
{"pred": "`mediasync:` should be `mediasync:`", "gold": "You really didn't need to do any of these, we need to remove the API client from source eventually anyway."}
{"pred": "Why do we need this?", "gold": "seems pretty strange here because TiSession contains PDClient."}
{"pred": "Extra empty line detected at class body end.", "gold": "I created a test method for this scenario. Would you normally split it out like that or bundle this into one of the existing test methods? I'm more accustomed to creating lots of separate `it` blocks in nested `context` blocks in rspec"}
{"pred": "Why do we need a separate endpoint for this?", "gold": "should it be `newsessionqueue` or `newsessionqueuer`? In case we'd like to be consistent"}
{"pred": "nit: `pendingNumDocs` -> `numberOfPendingDocs`", "gold": "Maybe add `@lucene.experimental`? We are exposing (slightly) internal details about `IndexWriter` so maybe we need to reserve the right to change this API in the future ..."}
{"pred": "Should this be `curl -m 1 http://localhost:#{nonssl_port}/#{endpoint}`?", "gold": "@johnduarte I know this isn't part of your code change, but it seems to me that this `curl_with_retries` is not necessary. If the `retry_on` host command is successful, isn't puppetdb ostensibly listening to the ssl port as well? What do you think about removing that `curl_with_retries` after the `retry_on`?"}
{"pred": "Why do we need to change this?", "gold": "Does an empty struct really take less storage than a bool? I guess it must be, or else you wouldn't have changed this, but I'm curious about the detail."}
{"pred": "missing whitespace after ','", "gold": "nit: This should perhaps be called `waitForAndReportSelectionChange`, as it affects braille as well, not just speech."}
{"pred": "Why do we need to pass `False` to `_extract_tags`?", "gold": "nit: I suggest that we rename `tag_error_response` to `tag_resource_success`, as later in line 132 we're returning an error if this value is *not* truthy."}
{"pred": "`@ShopsysShop/Styleguide/` -> `@ShopsysShop/Styleguide/`", "gold": "I am missing return typehint"}
{"pred": "`_base_` is not used.", "gold": "_base_ = 'retinanet_pvt-t_fpn_1x_coco.py'"}
{"pred": "Shouldn't this be `onAuthFlowError`?", "gold": "We should remove `throws Exception` here, since we're catching it anyway and triggering `onAuthFlowError`."}
{"pred": "Why do we need this?", "gold": "a super thin wrapper like this makes me think we should consider not having it, instead just defining in the plumbing.api the publisher and subscriber interfaces we expect a ps dependency passed in to support and then to pass calls directly to that thing rather than through this wrapper"}
{"pred": "Why did you change this to `fine`?", "gold": "Waiting for the pull takes a long time. This message informs the user that at least one of the images being pulled is available. Please leave."}
{"pred": "I don't think we need this anymore.", "gold": "We should set a 1.7 upper bound for this as well. :smiley:"}
{"pred": "This should be `import { Component } from '@wordpress/element';`", "gold": "Lodash mixed in with WordPress dependencies"}
{"pred": "Should this be `Honeybadger.notify_or_ignore`?", "gold": "Put a comma after the last parameter of a multiline method call."}
{"pred": "Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "perhaps we should test that users cannot edit the profiles of others?"}
{"pred": "Why this change?", "gold": "Does this mean the content changed with the new pyopenssl version? Is Wireshark already compatible with this new format?"}
{"pred": "Error return value of `testCachedBatch` is not checked", "gold": "line is 147 characters (from `lll`)"}
{"pred": "`showSpeechViewerAtStartup` -> `showSpeechViewer`", "gold": "Perhaps move this option into a separate speechViewer section, as we are planning to also save position information as well."}
{"pred": "`getAllEditedProducts` -> `getEditedProductsBySegmentId`", "gold": "This is not a segment responsibility this query should be in exporter-File module"}
{"pred": "analyzer_cmd.append(result_handler.fixit_file)", "gold": "Did you measure the performance with and without this option. Do we want to export fixits even if the `clang-apply-replacements` tool is not available in the user's PATH?"}
{"pred": "This should be `BlockDevices.BlockDeviceList`", "gold": "What if we do not change this file ? Are we using this `pkg/disk/v1alpha1` elsewhere for block device requirement?"}
{"pred": "Why do we need this change?", "gold": "regarding dropping the port/host/uri methods on Nod: this would `options[:port] = target.port if target.port`"}
{"pred": "Why do we need this? - as opposed to just calling FileUtil directly? - L.A.", "gold": "good question - I vote we just remove, up to you if you want to handle in this PR though. (as it would require changing the places you call it; maybe moving the test? Though my guess is if we don't now, we never will."}
{"pred": "I think this should be `||` instead of `or`", "gold": "This is so that if we turn on bundler caching globally it still won't affect python etc. Same inheritance logic as for the cache slug."}
{"pred": "Shouldn't this be `SupportsAsleep(contexts)`?", "gold": "[You can ignore it] Maybe a better method name would be IsSupported or HasSupportForAllocation?"}
{"pred": "Why did you change this?", "gold": "Why is this changed to `\\*`? The behavior of the code on line 42, shows that `*` is what's handled?"}
{"pred": "Shouldn't this be `Realm.defaultPath`?", "gold": "I think this should either return `-1` or throw. I think my vote is on the former."}
{"pred": "Why do we need this?", "gold": "I am confused, I've read 2, 3 and 5 seconds in various places"}
{"pred": "Shouldn't this be `if r.ContentLength != 0`?", "gold": "Any particular reason you chose int64 instead of int? This requires adding type conversions throughout the code below."}
{"pred": "I don't think you need the `match` argument here, since you're using `match=` below.", "gold": "this string should really be a local constant. it's repeated below."}
{"pred": "Why do we need this?", "gold": "Number types are hard  . Should we be considering byte/sbyte? What about unsigned variants that would otherwise fit in a signed 64 bit integer like UInt16, UInt32?"}
{"pred": "Why do we need this change?", "gold": "`Assert.True(true)`...   xunit used to have Assert.DoesNotThrow  "}
{"pred": "This should be `ENV[\"S3_REGION\"]`", "gold": "should this be an env var like the other `S3_*` values?"}
{"pred": "Nit: `removeNode` -> `removeParentNode`", "gold": "If you do go this route, I think it would be worth adding a note here that IE 11 is the only reason why we're not using the more obvious `node.remove()`."}
{"pred": "I don't think this is correct. It should be `in \"for key in dictionary\" or \"if key in dictionary\".'`.", "gold": "The added text doesn't really match why it's possible. Maybe it would be better to name that as a separate case for this checker? (e.g. dict lookup is quicker than list comparison)"}
{"pred": "This should be reverted.", "gold": "just whether we are not missing some doctrine extension because above this attribute is nullable position and it shows int instead of int|null but maybe for lvl2 it is OK"}
{"pred": "`slots.stream().anyMatch(slot -> slot.isSupporting(caps))`", "gold": "Prefer `Stream.anyMatch` instead of iterating over all slots."}
{"pred": "This should be `drm_format_mod_explict->drmFormatModifier`", "gold": ":grimacing: yikes, thanks for catching this!"}
{"pred": "Why do we need this interface?", "gold": "`Binded` is weird. I think it needs to be something with `Bound` in it (and drop the `Mvx` bit) like `ViewHolderBound` or something."}
{"pred": "`diskList` is unused (from `structcheck`)", "gold": "can we have String() and GoString() implementation of `apis.CStorPool` struct to pretty print it."}
{"pred": "Why is this needed?", "gold": "Like I said, please replace by `EXPECT(kTokenString)`"}
{"pred": "This import is not used.", "gold": "Will you please update the copyright message to `2021` for classes that you modify?"}
{"pred": "Why do we need to filter here?", "gold": "Is there a better way to filter these other than relying on the hashKey. I few like this might now be trustworthy in the long run. If angular ever removes this property, this feature would be broken."}
{"pred": "Shouldn't this be `dynamo_exited_synched` instead of `dynamo_exited`?", "gold": "No need to check dynamo_exited"}
{"pred": "`SetTlsCACertificate` is unused (from `deadcode`)", "gold": "from linter: >method SetTlsCACertificate should be SetTLSCACertificate"}
{"pred": "Shouldn't this be `today + 2`?", "gold": "this data had incorrectly aligned timestamps (which wasn't the point of the test)"}
{"pred": "I think it would be better to return \"unknown\" here.", "gold": "Since this is workflow agnostic, should we put this in common?"}
{"pred": "I don't think this should be a classmethod.", "gold": "using the `@abstractmethod` decorator wouldn't be better?"}
{"pred": "`false !== strpos($field->getProperty(), '.')`", "gold": "This was crashing the app during EDIT on boolean Doctrine Embedded properties"}
{"pred": "#define DFL_SYSFS_SEC_GLOB \"*dfl*/*spi*/*\"", "gold": "Will this be backwards compatible with the previous path?"}
{"pred": "Why do we need this?", "gold": "what is potential use for current scope? It seems you'd only want it to stop it. But if you get current scope you never know if it's yours to stop - i.e. this is not safe or correct to stop current scope. So I wonder should we even try to expose it?"}
{"pred": "What's the reason for this change?", "gold": "I think this is likely the only additional change needed on the original PR."}
{"pred": "Please don't change unrelated files.", "gold": "Please revert changes to unrelated file"}
{"pred": "Why is this needed?", "gold": "Can test use a Mockito mock instance instead?"}
{"pred": "Why did you change the indentation here?", "gold": "Bit of a shame about these multi-line strings in annotation parameters - they're not a deal breaker but just make the diff noisier"}
{"pred": "Why do we need this?", "gold": "we can remove this one as this is not used any more"}
{"pred": "Why did you remove this?", "gold": "we don't really need an extra error flag"}
{"pred": "I don't think this is used.", "gold": "any chance you could just fix the processors plugin?"}
{"pred": "why do we need this?", "gold": "We may keep this config unchanged since `use_depthwise=True` by default."}
{"pred": "Shouldn't this be an error instead of a warning?", "gold": "Maybe add i#956 in this log as well."}
{"pred": "Shouldn't this be `storeInbox != nullptr`?", "gold": "if (StoreInbox* storeInbox = getStoreInbox()) {"}
{"pred": "Why do we need this function?", "gold": "what is this, is it going to be used later?"}
{"pred": "This should be `expect( vagrant ).to receive(:read )`", "gold": "@anodelman test failure is probably due to this, needs to be fixed to `(\"Host #{host.name}\")`"}
{"pred": "`proposal-submodel-container` -> `proposal-comments-container`", "gold": "I'm not sure that we need this anymore, but that can be a separate discussion."}
{"pred": "nit: space after `throws`", "gold": "The formatting seems different from the rest of the code"}
{"pred": "I think this should be `proxy_url` not `proxy_url`", "gold": "Could we have a unit test for this?"}
{"pred": "Why do we need to pass in a channel here?", "gold": "nit: put params in new line"}
{"pred": "I don't think we need this anymore.", "gold": "The button for the date range selector has incorrect width since it has `padding-right: 8px` which sets the width to: `44px`. Can you review to make the button `36px` on small screens as per the AC?"}
{"pred": "(style) code indent should use tabs where possible", "gold": "This should be inside the set routine IMHO: matches the others; all callers need it; simplifies code here."}
{"pred": "Why do we need this?", "gold": "MAX_RETRY_TIMES makes much more sense."}
{"pred": "Why do we need this?", "gold": "`saveSession` allows easier mocking - just save function which You need, instead full interface"}
{"pred": "`encoding_type` should be `None` by default.", "gold": "No docs for the new param here?"}
{"pred": "I don't think this should be changed.", "gold": "This file is unrelated to the aims of this PR. Please remove. If it is needed to demonstrate Sonar Deltas then it has been proven and can be removed."}
{"pred": "nit: `FlushAsync` -> `FlushAsync`", "gold": "minor: `Export all ended spans to the configured Exporter that have not yet been exported.` - This is the spec description. Lets use something on that line. \"queue\" is not necessarily present for all processor."}
{"pred": "Should this be `Debug` or `Debugf`?", "gold": "is this deliberate? or testing?"}
{"pred": "Why is this readonly?", "gold": "I want to get more perspectives regarding this one. Making it `readonly` makes me feel that we're assuming the head should never change, and my worry is that other code might assume it (e.g. they might cache the value and assume it will never change). While this is true for now, I guess in the future we might want to support something like `PrependProcessor(processor)` or `InsertProcessor(index, processor)`."}
{"pred": "why did you remove the `false` here?", "gold": "This isn't critical for test coverage, but it seemed off that we had disabled wrapping the reader."}
{"pred": "missing space after comma", "gold": "Please remove Descriptors3D from this file. We just did this in master."}
{"pred": "nit: `CHECK(!client);`", "gold": "You could pass the MetaClient instance in ctor, and create a new instance if nullptr."}
{"pred": "Would it make sense to move this into `WaitForBuiltTarget` so that we don't have to worry about deadlocking?", "gold": "What does this do? Seems like a poor mans mutex/semaphore?"}
{"pred": "Why do we need this change?", "gold": "This is a breaking change, and cannot be made. We have committed to this API for v1."}
{"pred": "`?Context $global_context = null`", "gold": "Can also drop corresponding types from docblock here"}
{"pred": "Why did you change this to `finest`?", "gold": "This change is unhelpful to users."}
{"pred": "`_test3_a` and `_test3_b` are not used.", "gold": "why is this variable introduced? Please stick `_o.Test3.A` directly in the call below."}
{"pred": "Shouldn't this be `middlewares.verifyToken`?", "gold": "do you mind sharing what is the reason for this change?"}
{"pred": "Should this be `status:canceled` instead of `status:completed`?", "gold": "thoughts on putting `alter_query { |rel| rel.limit(@closed_proposal_limit) }` in a method that we can call here? That way we can have a test for this logic without needing a controller spec."}
{"pred": "Use the new Ruby 1.9 hash syntax.", "gold": "Perhaps `@node` throughout"}
{"pred": "This should be `[MODE]`, not `[MODE]`.", "gold": "Shouldn't this default be 'normal' ?"}
{"pred": "nit: `num_schedules_in_repo` -> `num_schedule_in_repo`", "gold": "nit: type this"}
{"pred": "Why do we need these?", "gold": "These command names are specific to Chromium-based browsers. Please move to `ChromiumDriverCommand`"}
{"pred": "I think this should be `bd.Object.ObjectMeta.Name`", "gold": "lets print nodeName that got passed also"}
{"pred": "Why not `long = int`?", "gold": "Should be `if sys.version_info[0] > 2:`"}
{"pred": "Why do we need this?", "gold": "Is there any need to pass this through `string_metric_parse`? I believe you can either create an off_t or just pass 0, with no need to added a string conversion into the mix."}
{"pred": "I don't think you need the `['value']` here.", "gold": "Let's not use a form of hungarian notation in naming our variables"}
{"pred": "Shouldn't this be `H2O_PROBE_CONN`?", "gold": "Seems like we are calling the probe twice?"}
{"pred": "`[app_name] [environment_name] [cmd]`", "gold": "I think we'll want @rickmanelius (or somebody) to go through all the help and make it more accessible. Probably later in the cycle. But \"Run a command in an app container\" doesn't do it for me :)"}
{"pred": "Shouldn't this be `svc.Spec.IPFamily`?", "gold": "Have not tested this yet, lets see if tests complain, but I suspect it should be as easy as this  "}
{"pred": "nit: `HIDDEN_COLUMNS = set(NATURAL_ORDER_COLUMN_NAME)`", "gold": "no big deal but we don't we just use a list to keep the order? I don't think it's likely to have a duplicated columns if that was the concern."}
{"pred": "I don't think this should be changed.", "gold": "See above, same for all similar cases below."}
{"pred": "Why do we need this?", "gold": "where is this coming from?"}
{"pred": "I don't think you need the `say_with_time` here", "gold": "We can also drop `plans.includes_screencasts`, right?"}
{"pred": "I'm not sure if this is the best way to do this. I think it would be better to use `get_r_and_s_from_sig_string`", "gold": "wouldn't `int.to_bytes(counter, 32, 'little')` be equivalent, clearer and faster?"}
{"pred": "I don't think we need this function. We can just call `ValidateStoragePaymentCondition` directly", "gold": "I don't see why this is in porcelain since it's just a free function, with no dependency on plumbing or the `a` receiver. I think it should be moved to `protocol/storage`. It's exposed unnecessarily widely here."}
{"pred": "Why do we need to do this?", "gold": "Could we only do this for all time? Because that's what is causing problems rn?"}
{"pred": "I don't think this is the right way to fix this. I think it should be `'%s' % s`", "gold": "This looks better than before, but we'll now likely run into issues with `'` characters in the spec. Maybe we can just use `manager.call_strings` instead?"}
{"pred": "`splitSizeOption` -> `splitSizeOption`", "gold": "Should this replace `splitSize` instead of adding a parallel call? The `SparkReadConf` is not yet released, so we can change it still."}
{"pred": "This should be `except OSError as err:`", "gold": "To reduce complexity, please use OSError on Python3 as well."}
{"pred": "Why do we need this?", "gold": "That seems wrong."}
{"pred": "Yes, it can't hurt, but still", "gold": "Yes, this is needed here. This is a builtin user who just reset their password."}
{"pred": "I think this should be `os.path.join(self._obj_dir, filehash)`", "gold": "This seems to move the storage of temporary files to the CWD. Is that right? I don't think we should do that. If the process gets interrupted, we should try our best to clean up, but if even that fails, it'd be nice if the mess was left in a different directory. Maybe we should have a directory explicitly for builds?"}
{"pred": "Why do we need this?", "gold": "Please explain why a user would enable this (space savings), and the requirements for this option to be safe."}
{"pred": "Why do we need to check for `hasResolvedAccounts` here? Shouldn't it be enough to check for `accountID`?", "gold": "I think the `undefined` checks still need to be removed from here."}
{"pred": "I think this should be `self.kubernetes_config.max_retries`", "gold": "Is there any particular reason to have 6?  "}
{"pred": "Shouldn't this be `biggest = chunk`?", "gold": "The biggest chunk does not guarantee that it contains the biggest CIDR-aligned range. If we don't care too much about a few CPU cycles being wasted, then I'd suggest to merge the if-statements."}
{"pred": "Why do we need to do this here?", "gold": "instead of doing the if err := __; err != nil { return err } thing, you can do errs = addErrs(errs, ___). If you want."}
{"pred": "This import should be grouped with the other `github.com/aws...` imports.", "gold": "nit: Is this error message accurate?"}
{"pred": "Shouldn't this be `src_repo->mode`?", "gold": "Ouch! :man_facepalming: And of course, this worked for me because that evaluated to false when I was testing the bare-user path."}
{"pred": "Shouldn't this be `if len(statusParts) > 1`?", "gold": "Parentheses aren't needed here. `if len(statusParts) > 0 {` will suffice."}
{"pred": "`SkipOnServers` is unused (from `structcheck`)", "gold": "// the test is skipped on given servers because it will fail."}
{"pred": "Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "The name of the test should be updated to \"it 'should return bad_request if api key is invalid\""}
{"pred": "I think this should be `if jobInfo.cancel != 1:`", "gold": "Use `==` in this case instead of `is`."}
{"pred": "// CStorPoolPhase is a CStorPool phase.", "gold": "Please put it like this: `CStorPoolPhase is a typed string for phase field of CStorPool`"}
{"pred": "Shouldn't this be `if ($newStock < 0)`?", "gold": "variable must be in camelCase => $newStock"}
{"pred": "`syscall.Stdin` is already an `int`", "gold": "unnecessary conversion (from `unconvert`)"}
{"pred": "Why do we need this method?", "gold": "... is probably automatically vectorized, since it has the same speed as `System.arraycopy`"}
{"pred": "Why do we need a new variable here? Can't we just use `cgroup.New()`?", "gold": "Is there anyway to get rid of the global variable, if it is specific for each task, can you add it to the `mtask` struct?"}
{"pred": "Why this change?", "gold": "Surprised to see this old syntax here, but not _that_ surprised."}
{"pred": "Why do we need to deprecate this method?", "gold": "It is good to mark it! Maybe we can remove the method for Vavr 1.0.0 - but for now it can stay as-is. Thx!"}
{"pred": "Why do we need to export this?", "gold": "exported func New returns unexported type *pool.pool, which can be annoying to use"}
{"pred": "Why do we need this?", "gold": "Sorry, I feel like I'm missing something - where does this get called?"}
{"pred": "Why did you remove the else here?", "gold": "@guihecheng Thanks for the fixing! Actually this is not the dup codes, when we first registerNode, then update the nodestatus immediately, or the node will keep not ready for 10s. And do you have other ways to refactor it?"}
{"pred": "Why is this needed?", "gold": "How portable is this? (e.g., Windows). I'm relaunching tests of windows because they failed for other reasons."}
{"pred": "nit: `const auto &set_binding_pair`", "gold": "What this does is narrow down what we are saying the descriptor set is requiring. This is a good thing, but doesn't go far enough, we are still potentially setting unused bindings to either a required state or an invalid one. set_binding_pair.second is a map of the binding/requirements from the bound shaders... and instead of marking all bindings, looking at that will mark only the used ones. Will open a new PR"}
{"pred": "Why this change?", "gold": "should use `codes.InvalidArgument`, same as above line 1033 and 1036"}
{"pred": "I think this should be `GetDefaultDockerVersion`", "gold": "Please revert this file."}
{"pred": "The default URL opener will use a Service Bus Connection String based on ...", "gold": "Probably in another PR, I think the package should be renamed to `servicebus` to be consistent."}
{"pred": "> Every swagger/configuration must have a security definitions section and it must adhere to the structure described in: https://github.com/Azure/autorest/tree/master/docs/developer/validation-rules/security-definitions-structure-validation.md. [](start = 8, length = 74) This is a bit confusing. How about: > Every swagger/configuration must have a security definitions section and it must adhere to the structure described in: https://github.com/Azure/autorest/tree/master/docs/developer/validation-rules/security-", "gold": "curious: are we planning to add link to each of the rules in the message?"}
{"pred": "Error return value of `exp.SettleDeposit` is not checked", "gold": "line is 123 characters"}
{"pred": "Why did you change this?", "gold": "same here; `@param array $user Array of user data`"}
{"pred": "Why did this change?", "gold": "A quick read of this test indicates that we're changing the behavior of this api, and so the test needs updating. Is that right?"}
{"pred": "This should be `MvvmCross.DroidX.RecyclerView`", "gold": "Register needs lowercasing"}
{"pred": "Why do we need this?", "gold": "This should belong to FlowContainer class."}
{"pred": "I don't think you need the `> 0` here.", "gold": "I think there is a chance that on disable/enable cycling, referring to `self.window` is problematic. In the `__init__` method `self.window` is set to None. If `__init__` gets called before `_run` exits the `while` loop then we wont call `self.window.destroy()`. Can you use non-instance variables after this point? I don't think `self.timer` is used outside this function, if so, then I'd prefer it also be a local variable."}
{"pred": "Why do we need this?", "gold": "I was confused by this env name variable, assuming it was the value, not the name. Silly nit, but maybe name it noninteractiveEnv?"}
{"pred": "nit: `PARQUET_WRITE_MODE` -> `PARQUET_WRITE_MODE_DEFAULT`", "gold": "  nice, having the \"overwrite\" default makes this change backwards compatible, right?"}
{"pred": "Shouldn't this be `!s.is2xxSuccessful()`?", "gold": "It doesn't make sense to accept all 2xx status code. For example, `203 Non-Authoritative Information` or `205 Reset Content`, etc."}
{"pred": "can we use `termPrefix.equals(currPrefix)` here?", "gold": "Found a better choice here that doesn't involve object creation: StringHelper.startsWith()"}
{"pred": "I think this should be `mp.Config.PluginName == attestedData.Type`", "gold": "Shouldn't we consider the situation where it doesn't find a plugin?"}
{"pred": "Why do we need this check?", "gold": "Do not understand why this needed for table. All new classes defined in the `preview` namespace."}
{"pred": "Why do we need this constant?", "gold": "Kept the same property value even though it is now in Common to avoid breaking existing clients."}
{"pred": "Why is this needed?", "gold": "TODO: this is temporary until we figure out case sensitivity for metrics evaluators."}
{"pred": "Why do we need to sort here?", "gold": "can we just kill this TODO?"}
{"pred": "Why did you change this test?", "gold": "This appears to be a change in error handling due to a dag upgrade."}
{"pred": "Should this be `:hosts_file => 'notafile.yml'`?", "gold": "These changes look like a hosts file _must_ be provided?"}
{"pred": "Why do we need this change?", "gold": "@akohlmey Just make it a cast like the others. I dislike it either way, but that's the price we pay for Python 2 support."}
{"pred": ".option('--channel', 'channel to start', /^(beta|dev|nightly|release)$/i, 'release')", "gold": "I wonder if the default here should be nightly? I won't block on that though just a question for a follow up."}
{"pred": "Is this intentional?", "gold": "Also not for merge to master."}
{"pred": "I don't think this is the right place to check this. I think it should be in `DagsterInvalidDefinitionError`.", "gold": "nit `non-standard` might be a bit subjective - maybe \"Cron schedule {blah} is in an unrecognized format. Dagster cron strings must consist of five characters separated by a single space chacater\"."}
{"pred": "Why was this removed?", "gold": "ARM emulator gets tripped up on the copy/paste menu when tapping the text. Tapping on the text field isn't necessary for setting text."}
{"pred": "Shouldn't this be `checkCompounds`?", "gold": "extra word lookup removed"}
{"pred": "\"The resolution time for a promise is factored into\"", "gold": "Will you link to {!webdriver.promise.Promise} here?"}
{"pred": "Shouldn't this be `purchases#show`?", "gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping."}
{"pred": "Why did you change this?", "gold": "@AdrianLxM finally found some your bug too :)"}
{"pred": "Why do we need this check?", "gold": "This crashed in an app using descriptor_indexing with some unbound descriptors."}
{"pred": "Why is this needed?", "gold": "I think we might want to keep these marks separate? Then we can create a new `workflow` file with 3 jobs: 1) Prime stdlib 2) Prime batch 1 of external 2) Prime batch 2 of external"}
{"pred": "Shouldn't this be in a `finally` block?", "gold": "Throw `fragInfo.CachedFragment.ViewModel.GetType()` into a variable so it's not evaluated each time."}
{"pred": "Why did you remove the memoization?", "gold": "Rather than just getting rid of the memoization maybe we should use an `after_save` filter to set it to `nil` so that it will be recomputed on next read?"}
{"pred": "", "gold": "JS abstraction leaks so this should be `if (el.parentNode !== null) { el.parentNode.removeChild(el) }` @developit  "}
{"pred": "Why do we need this wrapper?", "gold": "nit: change it to `Exchange: unexpected status 0x%x` so that we'll know where this issue came from as well as making it easier to decode."}
{"pred": "nit: `cstorRunTask` -> `cstorRun`", "gold": "Name of constant is not appropriate. Name of constant should make use of version no. as suffix. The constant can be a typed string versus a string."}
{"pred": "Should this be `unless options[:tty].nil?`?", "gold": "@glennsarti you want to validate this on Windows? IIRC this won't work"}
{"pred": "I don't think we need the `namesLookback` in the `ElasticsearchHttpStorageProperties`", "gold": "ps I'm ok to add this as a elasticsearch property instead. ex zipkin.storage.elasticsearch.names-lookback (we have similar things in cassandra)"}
{"pred": "`if (error) throw error;`", "gold": "Curly brackets here `{ (breakLine) xx (breakLine)}`"}
{"pred": "Missing space before opening brace space-before-blocks", "gold": "Can you check this case Assuming you have a dashboard with 2 users, test1 and test2 Currently logged in user is test1. You should not be able to change it to test2. You open dev console and paste in `countlyGlobal[\"member\"].username = \"test2\";` then you enter value test2 in the input and it is allowed and form would be submitted. Would server side validation deal with such case?"}
{"pred": "Shouldn't this be `athenz.db.jdbc.class`?", "gold": "since we're changing this class, let's fix the default class name as well. it should be com.mysql.cj.jdbc.Driver"}
{"pred": "Should this be `ensure_system_roles_exist if connection.table_exists? \"roles\"`", "gold": "At load time, we ensure the config'd objects exist."}
{"pred": "Why do we need this?", "gold": "Is there a test for this case?"}
{"pred": "`show.videos.count` -> `show.latest_videos.count`", "gold": "This copy doesn't match what I had in my mockup. I think it's better to call them episodes."}
{"pred": "I'm not sure if this is the right place for this logic. I think it would be better to move this logic into the `getServiceName` function.", "gold": "For some reason it worked for frontend even before this change."}
{"pred": "`std::lock_guard` is not needed here.", "gold": "Can we encapsulate this in a function so if we want to change it against we don't have to change all call sites?"}
{"pred": "Why did you move this line?", "gold": "Maybe a good opportunity to do a related improvement: The parameter `total_blocks` in `bootstrap_attempt::process_block` shadows a field with the same name, so maybe rename the parameter to `total_blocks_a` The parameter and field are incremented at the same time, but the field is used by `populate_connections` as well, so I assume they mean different things. Other than that, LGTM"}
{"pred": "\"The default max replica factor that a space can take\"", "gold": "Please revise the naming of these two flags. _**default**_ is the value we take when user doesn't provide. You could infer from the fact how `default_parts_num` are used."}
{"pred": "Why is this needed?", "gold": "I don't think we should have separate \"transformer\" and \"generator\" terms. I would suggest renaming this existing class `ImportTypeTransformer` to `StandardImportTypeTransformer` and renaming the interface `ImportGenerator` to `ImportTypeTransformer`."}
{"pred": "Can we rename this file to `tag-matcher.js`?", "gold": "I believe `tag-matchers` is the proper form for this filename. Only components should use pascal case, I believe everything else should continue to use kabob-case."}
{"pred": "nit: remove empty line", "gold": "same here, move this one down"}
{"pred": "Shouldn't it be `createdAsAdministratorAt`?", "gold": "Some could be created as superadmin instead, to add more special cases. Also, the reason behind this change should be described in the commit msg and the PR description."}
{"pred": "Why do we need this import?", "gold": "Is this required?"}
{"pred": "Why do we need to disable this by default?", "gold": "`--public-volume-create-allowed=true` and set the default to `true`, then use `!c.Bool('...')`"}
{"pred": "Shouldn't this be `MAX_PUSH_STREAMS`?", "gold": "Could we use `0x7ffffffe` instead, since `INT32_MAX` is an ID of a _pull_ stream? Other than that the PR seems ready for merge. Thank you for working on the fix."}
{"pred": "Should this be `exit_with(1)`?", "gold": "Might as well add a docstring for the new `exit_code` parameter too."}
{"pred": "nit: rename to `remove(RequestId id)`", "gold": "`poll` and `remove` have different meanings."}
{"pred": "How about `write.parquet.bloom-filter.max-bytes`?", "gold": "What's the perf impact of writing bloom filer? Does it make sense to enable it by default if the perf impact is minor? Would be nice to include benchmarks?"}
{"pred": "//snippet-keyword:[AWS SDK for Java v2]", "gold": "AWS Identity and Access Management (IAM)"}
{"pred": "Why did you remove the HIP_UNSUPPORTED?", "gold": "Remove `HIP_UNSUPPORTED` - it is an alias"}
{"pred": "`return Collections.emptyList();`", "gold": "i think we should return an empty list instead of null here."}
{"pred": "I don't think we should change the name of the pref pref. I think it should be `prefHttpProxyType`.", "gold": "Is it really necessary to store them in a new setting? I think it should be enough to store the credentials in `ProxyConfig.direct()`. Then AntennaPod does not need to store multiple different proxy settings. Also, it will not change existing users' settings (currently the proxy settings would be lost on upgrade)."}
{"pred": "I don't think you need the `.Distinct().Count() == 1`", "gold": "This is a mess. Can it be broken out as a separate function using ifs and return statements, which would also make it more debuggable."}
{"pred": "Why do we need to disable constant here?", "gold": "This stuff is a bit ugly and should probably become a utility. The main problem is that ``.map`` is being abused a bit."}
{"pred": "Shouldn't this be `self.context.shared_ids`?", "gold": "Maybe there is a better way here so that we don't even bother triggering a storage query since we want an empty list here."}
{"pred": "I don't think we need to pass the `customPolicySimulatorParams` to the `iam.SimulateCustomPolicy` call.", "gold": "just curious, `region` is not used in the AWS IAM client, afaik. But I see this is a general field for clutch clients, is it just ignored internally?"}
{"pred": "This should be reverted.", "gold": "Why are we doing that change?"}
{"pred": "`rawErrorData.get(CLASS) == null && rawErrorData.get(STACK_TRACE) == null`", "gold": "Why && changed to || ?"}
{"pred": "I'm not sure if this is the right place for this function. It seems like it should be in `dask/dataframe/tests/test_dataframe.py`.", "gold": "can you please change this to `_collection_to_single_partition()`, like we've done for alll other helper methods defined in this module?"}
{"pred": "Why is this needed?", "gold": "This class is never used, don't import it."}
{"pred": "Why do we need this?", "gold": "Missing a `return`. Either way, I think it's better to add a `#if DEBUG throw;` in the catch block instead (so we keep the log in debug mode)"}
{"pred": "Extra empty line detected at class body end.", "gold": "Files should have an extra line at the end of them."}
{"pred": "nit: extra space after `lock`", "gold": "I think we could replace this (well the backing field) with `BlockingCollection` when we drop NET35?"}
{"pred": "I think this should be `keys.issubset(set(pser_or_pdf.columns))`", "gold": "Can you show before/after output in the PR description? From a cursory look, seems like it will just drop the duplicated column which isn't consistent with pandas' results."}
{"pred": "Should this be `config['transports']&.include?('transports')`?", "gold": "Added validation that `config: transports` isn't used @adreyer @katelopresti Curious what you think about having Bolt link directly to the docs site."}
{"pred": "This should be `typing.Dict[str, typing.Any]`.", "gold": "This probably isn't needed anymore now?"}
{"pred": "Shouldn't this be `Array<import('./vnode').VNode>`?", "gold": "Would it be easier to kick this import to the top of the file? It'll get stripped out anyway."}
{"pred": "Why do we need to override this method?", "gold": "are you sure that the privacyGroup cannot be null?"}
{"pred": "Why this change?", "gold": "Wrapped with list"}
{"pred": "nit: `return value / base, true`", "gold": "Please move this to `pkg/stats/v1alpha1`"}
{"pred": "Align the elements of a hash literal if they span more than one line.", "gold": "a small nit pick ...this can go into `lib/patterns.rb` ?"}
{"pred": "Why do we need to change this?", "gold": "The above TODO is no longer necessary I believe  "}
{"pred": "I don't think you need the `+%s`", "gold": "Why is this change required ?"}
{"pred": "I think it would be better to use `bytes.Join` here.", "gold": "This really is an excerpt. ;-)"}
{"pred": "why this change?", "gold": "@acud The reason why the default is now `true` is because the chunk must be in the neighborhood of the storer peer with this change. The majority of the tests expect a valid receipt so the closest peers in the tests must be in the neighborhood. As of writing this, there is only one test that expects a peer to be out of depth."}
{"pred": "Why is this needed?", "gold": "This is what breaks the build. Apparently w/o this line, `sqlite` package is not even compiled. With this line it gets compiled but compilation fails because we don't use CGO for our production Linux builds and > ***Important: because this is a `CGO` enabled package you are required to set the environment variable `CGO_ENABLED=1` and have a `gcc` compile present within your path.***"}
{"pred": "`for (int i = 0; i < NUM_SIMD_SLOTS; i++) {`", "gold": "This should be all slots"}
{"pred": "`destory` -> `destroy`", "gold": "Need to add deprecated annotation and call the new fixed method to avoid the API broken issue."}
{"pred": "Why this change?", "gold": "This was just fixed in mozilla-mobile/android-components#4892. @pocmo is cutting a new Android Components 19 dot release today, so you'll be able to jump to the new version and restore the build type."}
{"pred": "I don't think we want to log this.", "gold": "Leaving this log line because it helped me to diagnose that the reconciler client was using a different cache than the event sources, so not always seeing the injectable that triggered the reconcile."}
{"pred": "Why do we need this lock?", "gold": "Do we need also to protect access to `mset.js` and `mset.jsa` or even `mset.store` down below? (not sure if those are immutable or not)."}
{"pred": "why do we need this?", "gold": "I'd rather you do this under `if info.filledInMerkle {` since that's the only place it's relevant."}
{"pred": "why do we need this change?", "gold": "*NULL_DEREFERENCE:* object `leaderUrl` last assigned on line 348 could be null and is dereferenced at line 351."}
{"pred": "This should be `current_user.identifier_for(IdentifierScheme.find_by(name: 'orcid'))`", "gold": "Since the IdentifierScheme's don't change without us making additional code changes, perhaps this should be added as a constant as we previously did with Perms?"}
{"pred": "Why do we need this import?", "gold": "nit: We can revert this now."}
{"pred": "I don't think we need this import.", "gold": "Oh, that's the reason why you have two different data structures here. Does the order of the `selectedItems` list matter? If not, I think it would be more clear if both would be a Set."}
{"pred": "Why do we need this?", "gold": "Should be named getDescription, since the other description functions are named that."}
{"pred": "Why do we need this?", "gold": "Don't we want to do this for g2 4k also?"}
{"pred": "Why is this needed?", "gold": "I would prefer if we don't add this package as it's unsupported, and I expect not necessary. Node buffer supports many formats - is it not possible to use one of its helper functions to load the content?"}
{"pred": "`chainToDataplaneHashes` is unused (from `structcheck`)", "gold": "I don't think this is used any more, please remove."}
{"pred": "nit: `List of config values` -> `List of config values`", "gold": "actually use type_name=print_config_type_to_string(self, with_lines=False) to populate this"}
{"pred": "`$identifier` and `$version` should be constants.", "gold": "We should be using dependency injection here, instead of fetching the config factory at the last minute from the container. That would allow us to more easily overwrite the \"delete_local_resource\" setting in tests."}
{"pred": "Why is this needed?", "gold": "everywhere else in the project, `LOGGER` is used"}
{"pred": "`min_by(&:to_f)` -> `min_by(&:to_s)`", "gold": "Why is this value set to \"min_by\", and what are the implications of it? Does `&:to_f` play nice with semver (e.g. 1.2.0)?"}
{"pred": "Why do we need this file?", "gold": "typo --> gloabl"}
{"pred": "Why do we need this?", "gold": "Wanted to double-check: does the `log` middleware still set its own \"empty\" value (should default to `-` at least for the default log format)?"}
{"pred": "`Using WebDriver after calling quit()` -> `Using WebDriver after calling quit()`", "gold": "It would be better to just change RWD to throw IllegalStateException if you attempt to execute a command after quit (unless it's a second call to quit())"}
{"pred": "Why is this needed?", "gold": "Is this going to be configurable? If not, it should just be removed for now."}
{"pred": "`OrderedDict` and `functools` are not used.", "gold": "Maybe just one import line - `from collections import OrderedDict, Mapping` ?"}
{"pred": "Shouldn't this be `List<Integer>`?", "gold": "Btw this class probably doesn't belong in PMD. It says it's there to test UIs, but arguably UIs can use their own test fixtures, and this in in src/test so probably not even shipped anywhere."}
{"pred": "Shouldn't this be `receiveGetAccounts`?", "gold": "Maybe we can group each `finishResolution` call with the corresponding `receiveGet...` call? That would make the connection more clear when reading the code."}
{"pred": "Shouldn't this be `source_address=None`?", "gold": "Can we take this out of the constructor here and just use the config value? (This would also make the other proxy mode cases obsolete)"}
{"pred": "Shouldn't this be `self.{{FIELD_NAME}}()`?", "gold": "Please flip the conditional to be `if (field.required) { ... }`."}
{"pred": "I don't think you need the `new_user` variable.", "gold": "should we create a fixture without first name and last name and have a spec like this one that uses it to make sure nothing errors out when they are not present?"}
{"pred": "Why is this needed?", "gold": "It seems odd to require all Python snippets to have this method when it's not relevant for messages.snip or the discovery snippets. (I see that we're already doing something similar with generateModule/generateBody where some of the implementations are empty. This also seems strange to me.)"}
{"pred": "Why is this needed?", "gold": "What about this: \"// Corresponding PMT does not exist.\""}
{"pred": "This should be `IOError(\"The config file {!s} doesn't exist!\".format(config_file))`", "gold": "You don't need af ormat specified here."}
{"pred": "Why is this needed?", "gold": "Nitpick: import ordering"}
{"pred": "Why do we need a factory here?", "gold": "code smell here, a function that create a reward calculator from transaction processor?"}
{"pred": "\"A Client constructs runtime variables using the Runtime Configurator API.\"", "gold": "I don't think the `A` is idomatic is it?"}
{"pred": "I don't think we need this method. We can just call `removeReachableFiles` directly.", "gold": "nit: the others use the method name in the api and not the class name of the api"}
{"pred": "Why do we need to run this before differentiation?", "gold": "Does it work to run all the sil diagnostic passes before we serialize? That would be more consistent with what the normal compiler does in `FrontendTool.cpp : performCompileStepsPostSILGen()`"}
{"pred": "Layout/TrailingWhitespace: Trailing whitespace detected.", "gold": "You left in a puts."}
{"pred": "why do we need this?", "gold": "Hmm, should we also cache the `smoothingScore` for this hit? Or, if we will keep it at returning `0`, couldn't we remove this impl and inherit the default from `Scorable`?"}
{"pred": "Why was this removed?", "gold": "I removed that from here because I am hoping that will stop the random unwanted updates to the website with unstable versions."}
{"pred": "I think this should be `Process state values.`", "gold": "Nit: missing period."}
{"pred": "This should be `s3_add_bucket_ssekms_encryption_policy`", "gold": "how **to** deny Simple Storage **Service**"}
{"pred": "Why did you change this?", "gold": "Were you having trouble with timeouts in general acceptance tests or only the editor test? It's possible to set timeouts on a per-test basis by using `this.timeout(25000)` within the `it()` function. I'd like to drop the global timeout in the future if possible rather than increase it - in some circumstances a failing test can have a knock-on effect which makes all later tests timeout so Travis can get hung up for a long time if no one notices and cancels the build."}
{"pred": "I don't think you need the `[:]` here, you can just do `subDirs[:] = subDirs`", "gold": "I don't think this is necessary."}
{"pred": "Shouldn't this be `len(resp.GetVolumeSnapshotIds())`?", "gold": "Instead of blindly ignoring all errors, this should just ignore the volume not found error."}
{"pred": "`rowGroupsStartRowPos` can be `null` here.", "gold": "The `rowPosition` will be ignored if the position column is not projected."}
{"pred": "Why do we need this?", "gold": "Is there a possibility of a clash between periodSeconds and timeoutSeconds? For instance, the current probe is not yet timed-out and the next one has started."}
{"pred": "Why was this removed?", "gold": "This logic is already been performed in `CommandLine.defaultFactory().create(cls)` ... whats the point of repeating it here?"}
{"pred": "I think this should be `this.hot.countCols() + this.hot.countSourceCols()`", "gold": "Please change from `let` to `const` here and above. Setting value to `this.hot.countSourceCols()` should be enought probably."}
{"pred": "`if (u_conn->fd != -1) {`", "gold": "Somewhat nitpick: I see the `!=` pattern mentioned in the fluent-bit style guide, but imo, it would be safer to check that a fd is non-negative with ` > -1` or `>= 0`"}
{"pred": "`:polymorphic => true` should be `:polymorphic => true`", "gold": "Use the new Ruby 1.9 hash syntax."}
{"pred": "Why do we need this?", "gold": "Please host to a GitHub repo."}
{"pred": "Shouldn't this be `s.Logger.Error`?", "gold": "The Error log message should not expose internals. The message should be something like this `\"done split failed for address %v\", tagr.Address`. Also, the Debugf would be more informative with the address in the message."}
{"pred": "I think this should be `logLevelOnInstanceUsage`", "gold": "can we rename `fileLogLevelUsage` to be more generic like `instanceLogLevelUsage`? Same goes for other var below like fileLogLevelFlagName, FileLogLevel."}
{"pred": "Why do we need to remove this class?", "gold": "Does this one not need the `tabContent` object used in the other files?"}
{"pred": "Should this be `b.Name != \"\" && b.Tags != nil`?", "gold": "Our use of the terms `managed` and `unmanaged` in CAPA is interesting. I think we should probably update the docs (as part of a separate PR) to explain that we are referring to whether its CAPA managed infra. As opposed to meaning AWS managed service."}
{"pred": "`api_sig` doesn't seem to be used anywhere?", "gold": "Looks like all of these can be put into a list."}
{"pred": "nit: `// map from canonicalized key to original key`", "gold": "nit: \"*mapping\" for a map is unnecessary. Consider calling this `originalNames` or similar."}
{"pred": "\"This profile will be permanently deleted, this action cannot be undone.\"", "gold": "Please split this into two sentences; i.e. \"This profile will be permanently deleted. This action cannot be undone.\""}
{"pred": "Shouldn't this be `lastAutosensResult = new AutosensResult();`?", "gold": "NPE here and in other APS plugins"}
{"pred": "Why do we need this?", "gold": "Thanks for the fixing, and could you please provide more details for this bug? Because we have the deduplication mechanism in cloudhub, so it will has no problem."}
{"pred": "Why do we need these two fields?", "gold": "These could be final"}
{"pred": "Why do we need to change this?", "gold": "highway have the same problem we can add a new method in invocation: mergeContext 1.if new context have more items, then addAll to new context, and replace old context 2.if new context have less items, then allAll to old context directly."}
{"pred": "nit: `var sb = new StringBuilder(seedTypes.Count);`", "gold": "Created a single error so it's not interleaved in log"}
{"pred": "Why was this removed?", "gold": "`isIE9` was reverted. Shouldn't this condition be reverted as well?"}
{"pred": "`/* defaultReturn = false */`", "gold": "Sorry if I'm being too pedantic here, but wouldn't it be nice to have standard parameter name? Like using `defaultValue` everywhere."}
{"pred": "I think this should be `bserver-1.kbfs.keybaseapi.com:443`", "gold": "Remind me again: what's the point of having new clients connect to both -0 and -1? If we ever have to blackhole -0, we'd have to blackhole -1 at the same time, right? What is supposed to be the difference between the two? Is it just that someday we might want to have two ELBs, and this will help load balance between them?"}
{"pred": "Why do we need to reset the timer here?", "gold": "Why not go back to `c.setPingTimer()` here instead so you don't need the new boolean in setFirstPingTimer()."}
{"pred": "Why did you remove the BOM?", "gold": "We should figure out why so many of these files have an invisible change on the first line: Are we writing out some sort of byte order mark?"}
{"pred": "Why is this being removed?", "gold": "Was this our code @csrwng"}
{"pred": "This should be `Runtime kernel version: #{data[:kernel_version]}`", "gold": "I think you need `.untaint` here."}
{"pred": "I think it would be better to use `File.directory?(@path + 'tasks') && File.directory?(@path + 'files')`", "gold": "Why are we including the `files/` directory in this check? I know `tasks/` and `plans/` make sense, since you can reference content in those directories from the CLI, but I don't think you can for `files/` (unless I'm missing a command)."}
{"pred": "Why is this import needed?", "gold": "And again. The reason it's bad is that if someone uses a JDK not produced by Oracle they won't have this class."}
{"pred": "I don't think we need the `omitempty` here.", "gold": "Can we rename this field to `Subject`? Looking around, it seems like 'subject' is the standard terminology for this stanza  "}
{"pred": "nit: space after `,`", "gold": "Remove additional whitespace."}
{"pred": "I don't think this is the right place to put this code. I think it should be in `authn.go` instead.", "gold": "We should add `Secure` as well"}
{"pred": "Why this change?", "gold": "I presume this isn't a big deal"}
{"pred": "Shouldn't this be `false /*update*/, false /*image*/`?", "gold": "Maybe {}, even though no multi-line body?"}
{"pred": "Space missing after comma.", "gold": "We can try something like this: response.should render_template(:partial => 'partial_name')"}
{"pred": "`if text and hasattr(text, 'decode'):`", "gold": "Please use `isinstance(text, bytes)` instead. Otherwise, this will lead to unnecessary decoding on python 2 unicode strings."}
{"pred": "Why this change?", "gold": "This one is unrelated to the GetSymbolVendor removal ... the API to GetValueAsData was changed."}
{"pred": "Why do we need this?", "gold": "can you assert the value of this field below similar to other fields?"}
{"pred": "`ClassLiteral` -> `ClassLiteral`", "gold": "I'll change that to \"linkplain\" for consistency :)"}
{"pred": "I don't think this is the right way to do this. I think it should be `[a-zA-Z0-9_-]+`", "gold": "This is fix. But since the history resource was relying on the bug to work, I had to do some changes regarding the history entries (eg. explicit declare that the permissions inherit from bucket)"}
{"pred": "missing space between `)` and `{`", "gold": "can't we leverage Closeable here and get some sugar&warns? Also, line 89 still calls setContext() .. is it right? or I'm missing something?"}
{"pred": "`peerID` should be a string.", "gold": "Use explicit swarm.Address when defining peerID, by using NewAddress, and remove conversion here."}
{"pred": "This should be `/var/lib/shadow`", "gold": "`RpmDependenciesDirectory` should start with a lowercase character so it's not exported outside of this package, it looks like its only referenced in this file."}
{"pred": "Shouldn't this be `rfp_sac`?", "gold": "If we make a new backbone class, we don't need to support `BasicBlock`"}
{"pred": "Why is this being removed?", "gold": "This was an out-of-date dupe of the check on line 335"}
{"pred": "Why was this removed?", "gold": "Let's put this back"}
{"pred": "Why is this disabled?", "gold": "Things like these should have been addressed before submitting a pull request."}
{"pred": "Why do we need this change?", "gold": "This one as well. Any better suggestion please?"}
{"pred": "`PUB %s %s %d` -> `PUB %s %s %d`", "gold": "wonder if we should collect c.trace, c.pa.subject, etc.. while under the lock to prevent data races.. or simply move the tracing under the lock."}
{"pred": "Shouldn't this be `!P->skip_fwd_prepare && strcmp(P->short_name, \"s2\") == 0`?", "gold": "Why is this hack needed ? Ideally, we shouldn't need that."}
{"pred": "I don't think we need the `isPluginV2` flag.", "gold": "Minor/Nitpick: replace `1` with a constant, esp. as used in `prog/weaver/http.go` in `{{if eq .Plugin.Version 1}}`"}
{"pred": "nit: unnecessary change", "gold": "nit: Looks like the whitespace got thrown off, can you fix this?"}
{"pred": "I don't think this should be in the `CommandLine_ImportPeakBoundaries_Error__` namespace.", "gold": "Redo this by adding a string literal and then pressing F6 to have Resharper move it to Properties\\Resources.resx which will also create this property."}
{"pred": "Why do we need this wrapper function?", "gold": "Unless a log file has been specified, IMO you should set the server option to enable syslog (windows event log) here, or someplace along the service start code path. We shouldn't really rely on users to specify that when creating the service."}
{"pred": "Why this change?", "gold": "It's strange here, because I saw the `TableColumn` is marked as `PublicEvolving`, but after released flink 1.12.0 it did not have any Interface compatibility guarantee. At least, it should marked as `deprecated`, and keep it a major release."}
{"pred": "Shouldn't this be `CoreMessages.dialog_connection_edit_wizard_conn_conf_network_link`?", "gold": "I'm not sure regarding this approach, for me the whole text including anchors should go to resources like ` netConfigLink.setText(CoreMessages.dialog_connection_edit_wizard_conn_conf_network_link); ` You shouldn't concatenate translated values inside the code. If you need some params, please use NLS.bind()"}
{"pred": "Why do we divide by 10 here?", "gold": "How often do we expect this to trigger? Should we maybe put it behind an if logger.Debug()?"}
{"pred": "Shouldn't this be `controller.Address`?", "gold": "How was the name `controller` arrived? Can you get a consensus for the name controller ? This may be OK for jiva. However, c-stor does not have a concept called `controller`."}
{"pred": "Should this be `continue` instead of `return`?", "gold": "i dont think we need to explicitly single out `kernel.domainname` here since its not a TODO for OCI either right ?"}
{"pred": "Shouldn't this be `self->args.max_size`?", "gold": "Should we better change the operator to `<` since the variable defines the minimum size that gets compressed?"}
{"pred": "nit: `shouldAppendMillionTimes` -> `shouldAppendMillionTimes`", "gold": "I'm really impressed by the AppendElements addition! Very cool! :-)"}
{"pred": "Shouldn't this be `finest(version());`?", "gold": "This change means that users can't easily see which version of the selenium server they're using. This is `info` level information."}
{"pred": "I don't think this is the right place for this constant. It should be in `qutebrowser.completion.constants`.", "gold": "This should be in qtutils and imported to here and the other place instead of declaring it twice."}
{"pred": "Why do we need a timeout here? Can't we just call `l.baseCl.FetchCertAlternatives` directly?", "gold": "Seems a bit weird to add a timeout in \"logging\" middleware, but I see that that is done elsewhere, so fine."}
{"pred": "Shouldn't this be `delete_singular`?", "gold": "This code is passing a non localized string when it should be passing in a localized string or it should use the name of the item being deleted."}
{"pred": "`Object.keys(updatedFiles).length === 0`", "gold": "Could we combine this with the `setState` call above, so we don't have to call it twice?"}
{"pred": "I don't think we need the `unless valid_encoding?` here, since `valid_encoding?` returns true if the encoding is valid.", "gold": "That part that still leaves me mystified is how the String class, when populated with a value from the SQL_ASCII encoded database is set to \"UTF-8\" encoding. Since the database is SQL_ASCII, each byte in the string stored in the database is considered one character. Ruby, however, is using UTF-8, which is writing a series of one-byte code points that are only meaningful when considered in the correct encoding. When Ruby passes a string to Postgresql, the code points are essentially \"flattened\" into bytes as they are written to the DB. When Rails (through Ruby) asks for a string from the DB, where does the information about the encoding come from?"}
{"pred": "`db.NewBoltDB(cfg.DB, cfg.DB.DbPath, cfg.DB.IndexDBPath)`", "gold": "Is it a doable way and does it make sense."}
{"pred": "Why did you change this?", "gold": "max was wrong here. As its buitlt-in, not a number, and a TypeError was thrown."}
{"pred": "Why is this needed?", "gold": "This change is not needed, please revert it."}
{"pred": "Should accept two parameters: preds, train_data.", "gold": "@ClimbsRocks Please add that it could be a string. `feval : callable, string or None, optional (default=None)`"}
{"pred": "Style/ClassAndModuleChildren: Use nested class definitions instead of compact style.", "gold": "now that I have started using, I realized, I could have named my new class singular `Sport` and not having to make this change. let me know, I will update"}
{"pred": "Why do we need to change this?", "gold": "Not sure why this is changing to a hard-coded string."}
{"pred": "Should this be `self.write({\"result\": result})`?", "gold": "Is there a reason why we `str` the result? It would be nice to eventually support more datatypes here, so we want to generally aim for arbitrary JSON."}
{"pred": "Why is this change needed?", "gold": "Why did we update the to this api?"}
{"pred": "Would it make sense to log the exception as well?", "gold": "should probably just catch `IllegalArgumentException` here"}
{"pred": "Should this be `v2.docs.influxdata.com`?", "gold": "What does this error message mean?"}
{"pred": "Shouldn't this be `.decode('utf-8')`?", "gold": "I don't think this change is necessary. If we cast `value` to type `six.text_type`, then the next if statement should evaluate to True and do the encoding for us."}
{"pred": "Extra empty line detected at class body end.", "gold": "Can we move this into a method(s)?"}
{"pred": "`clen returns the index of the first NULL byte in n or len(n) if n contains no NULL byte`", "gold": "You could perhaps call this `strlen` (although I don't particularly care about the name as it is an implementation detail)."}
{"pred": "Why this change?", "gold": "should we have a common `Escape()` method that can be used everywhere?"}
{"pred": "Why was this removed?", "gold": "The whitespace removal above here is probably unintentional :slightly_smiling_face:"}
{"pred": "Why was this moved?", "gold": "should we start p2p even after dispatcher? b/c dispatcher handles msg from p2p"}
{"pred": "Why this change?", "gold": "Did we decide once and for all to use req/resp throughout spring?"}
{"pred": "I don't think you need the `I18n.t` call here.", "gold": "Put a comma after the last parameter of a multiline method call."}
{"pred": "nit: `Failed to delete scratch bucket %q. Check with the owner of %q for more information`", "gold": "This will delete the whole bucket, which could have unforseen consequences in normal use cases. We should be deleting args.SourceFile instead."}
{"pred": "Can we remove this line?", "gold": "Lets move the whole string to next line for better readability"}
{"pred": "`Could not save WebCal-calendar`", "gold": "Please change this back to `Error saving WebCal-calendar` (and `Error saving WebCal-calendar` only)"}
{"pred": "Why was this removed?", "gold": "The vendor prefix is still being used on Chromium based browsers like Edge Chromium and Chrome. Did you mean to remove this?"}
{"pred": "Why do we need the alphabetical orderer?", "gold": "Not ideal, but I used a test case orderer so I could avoid a bug that occurs when running two tracer's sequentially with different DD_LOGS_INJECTION settings."}
{"pred": "`EntrySize+crypto.Extension+(uint(headerLengthSize)*uint(len(p.blobs)-1)) <= uint(maxHeaderSize)`", "gold": "I think the condition should be ` uint(headerLengthSize) + crypto.Extension + (len(p.blobs)+1)*uint(EntrySize) > uint(maxHeaderSize)` `headerLengthSize` is only the length field. But the pack header also includes the blob type and its ID. And the result of the check, currently seems to be inverted."}
{"pred": "Why was this removed?", "gold": "Remove selector if only 1 version is supported"}
{"pred": "Why was `selectAll` removed?", "gold": "Why did you remove more than the asked command?"}
{"pred": "I don't think we need to log the encryption level here, it's already logged in the unpacker.", "gold": "I just realized that we are logging time now - we shouldn't do that here, that's the logger's job. I've opened a new issue for that #444."}
{"pred": "Shouldn't this be `sanitize=False`?", "gold": "why is the `sanitize=True` here in the docs?"}
{"pred": "`has_many :delegates, through: :delegations, source: :assignee`", "gold": "Didn't end up using this, but I think it's useful anyway."}
{"pred": "nit: space after `//`", "gold": "I'm pretty sure there's already a metadata item that contains what you're calculating here (PackageRelativePath)?"}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.", "gold": "We want to show this button only when there is a page for us to connect to. There is no reason to put the Browse Security Info button on the page at all unless we've identified the UUID from the KB."}
{"pred": "Shouldn't this be `intelgpuicon`?", "gold": "Why `2` in this and others?"}
{"pred": "Why do we need this?", "gold": "This may cause a new allocation, please consider merging the concat in above line. Same applies to change in dotnethostmanager."}
{"pred": "I think it would be better to use `node.names[0][0].split('.')[0]` here.", "gold": "Alternatively (and better) would be to look for the .level attribute of the node. If it's bigger or equal to 1, than that is a relative import. So \"from . import x\" should have level 1, while \"from .. import z\" should have level 2 and so on. The same should happen for \"from .c import z\"."}
{"pred": "Why is this needed?", "gold": "Btw. this API must definitely change with PMD 7 - we are exposing here a implementation detail (that we use Saxon). And it happens, that the way, how custom functions are registered, changed with Saxon 9.5... which makes the need for a implementation agnostic API relevant..."}
{"pred": "Why is this a pointer?", "gold": "nit: `Additional configuration used while sending notification to external services.`"}
{"pred": "`nameOrHandle` -> `windowHandle`?", "gold": "This should only be sent if the driver is speaking to a W3C conformant remote, so we need an if-condition check like we have in the Python bindings."}
{"pred": "Line is too long. [81/80]", "gold": "This should have failed before."}
{"pred": "`ChannelInfo is the primary payment channel record`", "gold": "the paymentchannel dir is where the paymentchannel manager will live. it will store the types below."}
{"pred": "This should be `getCanvasUrl`, not `getCanvasUrl`.", "gold": "This is Safari specific and should be defined somewhere in the `safaridriver` namespace"}
{"pred": "`proposer` is unused (from `deadcode`)", "gold": "assignments should only be cuddled with other assignments (from `wsl`)"}
{"pred": "Should this be `fontWeight + ' ' + fontSize + ' ' + fontFamily`", "gold": "prefer changing the signature by adding params to the end, not the middle, I think."}
{"pred": "Why do we need this?", "gold": "I guess we aim for hardcoded port for Prometheus operated ports right?"}
{"pred": "Shouldn't this be `node.parent.statement().fromlineno`?", "gold": "This is the same effect as doing `node.parent.fromlineno` but avoids the `StatementMissing` exception from calling `statement`."}
{"pred": "I don't think we need `multiple=True` here.", "gold": "I think user-ids might be better; also note that options should use - and not _ to separate words. Also, how are more than one id specified? comma seperated? I think the usage statement should indicate this."}
{"pred": "Why did you remove this code?", "gold": "This code is necessary. It makes sure that you can sleep for longer durations than the timer supports."}
{"pred": "Why do we need to rename this method?", "gold": "Can we add the new name in parallel and deprecate this name? We should be careful about changes to the public API and give people at least a release to switch over before removing public methods."}
{"pred": "Shouldn't this be `free(backend->impl)`?", "gold": "If you're going to start testing that impl itself is not NULL you should probably be doing it everywhere."}
{"pred": "`configFileName` is unused (from `structcheck`)", "gold": "`ctx` is unused in LoadPlainYAMLManifests"}
{"pred": "why this change?", "gold": "why is this called toBuilder when the method is called fromBuilder? (I realise you did not change this...)"}
{"pred": "This should be `source.iceberg.reader.fetch-batch-size`", "gold": "nit: seems rather large."}
{"pred": "Why not use `max_ts` here?", "gold": "I think it'd make sense to only calculate time.time() once (it's also used if max_ts and min_ts aren't set)"}
{"pred": "public abstract String mockGrpcStubTypeName();", "gold": "Use existing `grpcStubCallString` instead"}
{"pred": "Why do we need this?", "gold": "In a recent PR, Bob added a `TracerConstants` class. Do you think this makes sense to put in that class instead so that we can consolidate?"}
{"pred": "nit: `pospone` -> `pause`", "gold": "I want to propose couple of different names for catchpointWriting: syncInterruptedWaitingCatchpointWriting syncWaitingForCatchpointWriting catchpointWriting is lacking context, and I found it difficult to understand the logic without this context."}
{"pred": "Why did you change this?", "gold": "Do you still need the `name` in the arg description, if this is not `str` type anymore.?"}
{"pred": "Why do we need to deprecate it?", "gold": "We may raise a warning."}
{"pred": "Shouldn't this be `belongsToMany`?", "gold": "Trailing comma caused the eslint test to fail"}
{"pred": "F401 '.config.CFG_RELATIONSHIPS_NODE_ENGINE' imported but unused", "gold": "I think you should use `app.config`. In the usual case, the config file is not overwritten, there is additional config file outside of the source of `Invenio`."}
{"pred": "I don't think we need to create a new `ResolvingAuthenticationManager` here, we can just use `new TrustedIssuerJwtAuthenticationManagerResolver`", "gold": "Will you please update the copyright message to now include `2021`?"}
{"pred": "Why do we need `begin()` here?", "gold": "Potential subscript out of range."}
{"pred": "why remove this?", "gold": "please undo this change. you didn't really meant to make it, right ?"}
{"pred": "Why do we need to disable this rule?", "gold": "To check! are these millseconds or seconds :thinking: The docs aren't clear"}
{"pred": "Why do we need this?", "gold": "Why was this moved?"}
{"pred": "Why do we need these interfaces?", "gold": "What are these object with suffix Expansion?"}
{"pred": "This should be `true` by default.", "gold": "This breaks backwards compatibility, so it will have to wait for the next quarterly release of the default is to deny. I would recommend adding the flag with the default to allow and then at the next quarterly release rc cycle flip the flag to deny."}
{"pred": "Why did you remove the typedef?", "gold": "I'm kind of surprised this doesn't require `typename`?"}
{"pred": "Why is this change needed?", "gold": "I think this will break the case (you can try even with /usr/bin/bison as value): `YACC=\"/path/to/bison -y\" ./configure` I wonder if we should use AC_PROG_YACC at all or simply use AC_CHECK_PROGS since we want to use bison and not another yacc"}
{"pred": "nit: `Account to be used by the node for network communication (enode)`", "gold": "can we explain to users in the docs what happens if they leave the field blank?"}
{"pred": "`security_group_ids` -> `security_group_ids`", "gold": "We try not to change the function footprints unless absolutely necessary. Why is it necessary to have both secuirty_group_ids and security_groups?"}
{"pred": "Why is this change needed?", "gold": "Thanks! We're already replacing File.separatorChar with '/' in the call to FileUtil#toCanonicalPath above, so the correct fix here should be: `relativePath.replace('/', '.')` I'll make the change upstream."}
{"pred": "`ProductNotFoundException` extends `GoneHttpException`", "gold": "It could be nice to be explicit about this change in upgrade notes, what do you think?"}
{"pred": "`companion.provider.authProviderName` -> `companion.provider.authProvider`", "gold": "spotted a bug."}
{"pred": "`rowsPerAnimal` should be `rowsPerAnimal / matchingRowsPerAnimal`", "gold": "We were always using 0000000 prefix"}
{"pred": "Why is this check needed?", "gold": "Here we also need to determine if gJobMgr has called the init function."}
{"pred": "`exists` is not used.", "gold": "Out of curiosity, why is `condition.any?` also necessary here?"}
{"pred": "nit: `hmPtr` -> `mh`", "gold": "Always use `std::make_shared` whenever possible, it will save you one memory allocation."}
{"pred": "Should this be `router-expose-v0.3.0`?", "gold": "Update to real tag before pull."}
{"pred": "Why is this change needed?", "gold": "Is there any better string that only exposed by prometheus? We have changed the meter tags to contain method and service name. For example `scrape()` contains `method=getHealth` and `service=server.internal.health.ITzipkinHealth` which made this test failed.  "}
{"pred": ">ICoreLogger [](start = 27, length = 10) ICoreLogger? #Closed", "gold": "Adding ICoreLogger here lets us pull this into Core as a strategy"}
{"pred": "Why did you remove the json tag?", "gold": "why did you change this?"}
{"pred": "Why do we need a `tap` here?", "gold": "This is invalid syntax on 1.8."}
{"pred": "Why this change?", "gold": "This isn't part of the PR, but I can't find in the smarts definition that \"[C][C]\" == \"[C]-,:[C]\" There is a line saying essentially not to specify undefined items (but that's a bracket versus non bracket thing)."}
{"pred": "Why is this needed?", "gold": "Is this required for tuple encoding? This is confusing."}
{"pred": "nit: rename to `flowPreparer`", "gold": "Does it need to be a member variable? It is currently only used in one method."}
{"pred": "`apiClient.sendSyncPlayCommand('ListGroups').then(function (response) {`", "gold": "@MrTimscampi doesn't this need an update to apiclient?.."}
{"pred": "This should be `_IF_X86_64`.", "gold": "This is a nop: prob best for history to not change the line"}
{"pred": "Why do we need to track this?", "gold": "Can you delete this whole file now?"}
{"pred": "struct field ArrPassing should be ArrPassing", "gold": "can you combine this passing test, code, solidity binary into existing ArrDelete? the function is much similar, pushing int value into an array, and delete one item in the array"}
{"pred": "Shouldn't this be `UserPreferences.isQueueKeepSorted()`?", "gold": "I think that could lead to problems when setting it to not sorted again. In that case, it will not be reset. What about using one single method for the adapter (`setDragDropEnabled`)?"}
{"pred": "Should this be `platform.SiteRunning`?", "gold": "I'd say the error should be an error, not instructions to the user. So error would be something like \"site should be running and is not\""}
{"pred": "Why did you change this?", "gold": "Are you sure `v3EndpointIDToContainerName` and `v3EndpointIDToTask` are saved in the state file, can you verify that?"}
{"pred": "Why do we need this mutex?", "gold": "This mutex is never used. Should it be, if users can now make calls into the crypto setup?"}
{"pred": "This should be `host['platform'].to_s.include?('sles')`", "gold": "Check here for sles-, and i'd prefer a regex since I don't know what an 'include' is going to do exactly. :)"}
{"pred": "`self.amount = Decimal(amount) / exch if currency else Decimal('0.0')`", "gold": "Should this be `None` instead?"}
{"pred": "I think it would be better to throw an exception instead of logging a warning.", "gold": "Not sure if the warning message is enough for this time, if the configuration is wrong, java-chassis may need to stop working instead of sending out the warning message to let the admin know about it. BTW, we may need a default override policy here."}
{"pred": "Why do we need to do this?", "gold": "I see this getting unwieldy as we add more commands with subcommands. Can we perhaps enhance it to handle subcommands properly? Perhaps something like `\"etcd-snapshot:1\"` which would indicate that the etcd-snapshot command may have 1 subcommand after it, and if the 1 next argument after it doesn't start with `--` then the args should be appended after that subcommand."}
{"pred": "Shouldn't this be `getUnfinishedFlowsHelper`?", "gold": "why returning a string instead of a list?"}
{"pred": "I think this should be `nameof(NpgsqlCommand)`", "gold": "Was there a reason for changing all these integration names?   Are they actually used for anything besides information in logs?"}
{"pred": "Why do we need this method?", "gold": "we should not resurrect this method that we just removed"}
{"pred": "I don't think you need the full path here. You can just write `/Screenshots/foo.png`", "gold": "This needs to be just return self.get_screenshot_as_file(filename)"}
{"pred": "`return xhr.readyState === 4 || xhr.status === 0`", "gold": "Shouldn't this return false here?"}
{"pred": "Why is this a pointer?", "gold": "Should have json tag"}
{"pred": "Why this change?", "gold": "Is this needed after all? Looks like the struct was re-defined inside the test file."}
{"pred": "Why do we need this method?", "gold": "I think the name of the method should match the name of the action: `removeReachableFiles`."}
{"pred": "Shouldn't this be `Manage consent types`?", "gold": "can you make the C in Consent lower case to match the other ones in this list?"}
{"pred": "\"time\"", "gold": "fix the group"}
{"pred": "`slots.stream().anyMatch(slot -> slot.isSupporting(caps))`", "gold": "Prefer `Stream.anyMatch` instead of iterating over all slots."}
{"pred": "Error return value of `ls.Start` is not checked (from `errcheck`)", "gold": "we have `logging.TestingLog()` that should be used for that purpose."}
{"pred": "Shouldn't this be `<=`?", "gold": "This is also a question of style. src[i] will always be valid because of check if 'for' statement"}
{"pred": "Why this change?", "gold": "Why change it?"}
{"pred": "This should be `../src/index`", "gold": "nb: this change is unnecessary"}
{"pred": "`// Public Link for the object`", "gold": "Is the publicLink mostly empty? I'm just wondering how much this will bloat memory usage as sometimes rclone has millions of Object~s in memory."}
{"pred": "nit: `IPAddresses is a list of IP addresses that should be included in the Order`", "gold": "I don't think the Internal API types need the json annotations. They are never serialised, right?"}
{"pred": "Should this be `ReportDeploymentCompleted` instead of `ReportDeploymentCompleted`?", "gold": "Maybe this was added incidentally. We don't need this function in the interface."}
{"pred": "I'm not sure if this is the best way to do this. I think it would be better to use `url.QueryUnescape` instead.", "gold": "Is this a safe/reliable way to split the URL?"}
{"pred": "Why do we need this?", "gold": "do we also need to profile the time to getConnection()?"}
{"pred": "Why do we need to decode it here?", "gold": "Should we move the decode part directly to the actual first-use of this? Or how does this affect if the value gets decoded and we need to get the bytes back later?"}
{"pred": "shouldn't this be `/MyResearch/Holds`?", "gold": "How would you feel about continuing to point this at the MyResearchController's holdsAction, but instead changing that action to force a redirect to the new holds-list route? That way, people will get sent to the new URL instead of having two different URLs that do the same thing."}
{"pred": "I don't think we should use `Noticef` here. I think we should use `Debugf` instead.", "gold": "I think if yo use %s then you do not need reason.String() and can just do reason."}
{"pred": "nit: rename to `WorkflowTaskTimeoutSeconds`", "gold": "Having \"wf\" prefix doesn't make sense anymore. Please remove."}
{"pred": "`sortAttributes` is not used in this file.", "gold": "Removed this copy of the `spyAll` function and replaced it with the same function declared in `helpers.js`. Same for `sortAttributes` below"}
{"pred": "Why are we changing the default value here?", "gold": "Default max cpu should be 8 and memory 64GB"}
{"pred": "nit: `itemsize` -> `item_size`", "gold": "@itholic, can you remove `nbytes = unsupported_property('nbytes')` at `_MissingPandasLikeSeries`?"}
{"pred": "Why did you remove these assertions?", "gold": "What happened to the assertion on `conf.TaskCPUMemLimit`?"}
{"pred": "Why do we need this?", "gold": "Just curious: Is using `Object` faster than a literal `{}`?"}
{"pred": "nit: `ACME does not support certificate renewal times`", "gold": "How come we don't allow this to be configured with the ACME issuer? Happy to leave this as-is for now if there's a lot more consideration that needs to be made, but it seems like we could/should be able to allow this?"}
{"pred": "Why is this removed?", "gold": "Should we remove the `Aliases` field as well?"}
{"pred": "Why do we need these two lines?", "gold": "what's the effect of turning these two off? is there an issue on file for context?"}
{"pred": "GcloudGaLatestWrapperRelease -> GcloudGaLatestWrapperRelease", "gold": "The format like gcloud-beta-prod is a bit hard to understand. Maybe find a a more clear way to describe it,"}
{"pred": "Should this be renamed to `ITagContextEntry`?", "gold": "Are we renaming this too in a follow up PR?"}
{"pred": "Shouldn't it be `ar` instead of `ar`?", "gold": "The indentation on this is off by one space to the left"}
{"pred": "`pExternalFormatANDROID && pExternalFormatANDROID->externalFormat != 0`", "gold": "I guess nothing is wrong with this approach, but more curious if you didn't just go `|| (format != VK_FORMAT_UNDEFINED)) {` As if there ever was another external format system added in Vulkan it would need to be manually added here"}
{"pred": "Why is this import needed?", "gold": "Is order really irrelevant here?"}
{"pred": "I don't think we need this import.", "gold": "I think this import will be unused now. If it is unused remove it."}
{"pred": "Why do we need this?", "gold": "Let's change to tx"}
{"pred": "I think this should be `0.5`?", "gold": "Looks like I was wrong about the sync cache size being 15% before. There seems to be some reporting bug related to my use of the sync cache, that makes the limit different from the working set cache limit. For now, I say we keep this at `0.10` (change the param default too), and we can change it later if needed."}
{"pred": "I think this should be `DDEV_NO_SENTRY=true`", "gold": "I think it'd be a good idea to define the environment variable name as a constant in values.go because it's hard-coded in several places, but that's a small point."}
{"pred": "I think this should be `classifiable_topic_id`", "gold": "Style/SymbolArray: Use %i or %I for an array of symbols."}
{"pred": "Why do we need this test?", "gold": "Our habit is to go ahead and put a description line (or more) in front of every function, not just non-test or exported functions."}
{"pred": "Should this be `application/json`?", "gold": "I'm slightly concerned about this because doesn't ORCID use XML instead of JSON?"}
{"pred": "missing space after `if`", "gold": "brackets around if conditions isn't really pythonic."}
{"pred": "Why was this removed?", "gold": "It turn out that when we close server it closed underlying listener itself, so this line always generated and error."}
{"pred": "Why did this change?", "gold": "Looks like this is for debugging? Maybe just remove."}
{"pred": "Why do we need to disable this?", "gold": "Same here - this code is duplicated. I think we can just remove the `exists?` method completely from `Criteria` and it should delegate to the context."}
{"pred": "Shouldn't this be `m_indirectReducerMem`?", "gold": "I'm not quite sure that we preallocate memory. Do you have a good reason for that?"}
{"pred": "Why do we need this lock?", "gold": "If we have added to s.clients, we could just do the following since if its a route will be ok I think. s.mu.Lock() defer s.mu.Unlock() return len(s.clients) <+ s.opts.MaxConn"}
{"pred": "nit: `src_` -> `targetLeader`", "gold": "if the targetLeader is src_ itself, it is really need call transLeader function?"}
{"pred": "`method` is not used", "gold": "Can we remove this featureConfig since you removed in L98 (assuming it is not used else where)"}
{"pred": "using System.Linq;", "gold": "namespaces in this file need a sorting"}
{"pred": "Why do we need to remove this check?", "gold": "This line should actually be: `if c.KubernetesProvider == config.ProviderAKS && c.Wireguard.EncryptHostTraffic {` because we only need to tweak the MTU like this on AKS."}
{"pred": "I don't think you need the `or 255` here.", "gold": "`get` has an optional second parameter that is the default if the key isn't found."}
{"pred": "Shouldn't this be `$user->id`?", "gold": "Please also indent the new response line as was done to the existing line above."}
{"pred": "Shouldn't this be `this->GetTarget() == app`?", "gold": "Shouldn't need this-> here."}
{"pred": "Shouldn't this be `MESSAGE_TRADE_ADVANCE`?", "gold": "I believe this is incorrect, if I'm not wrong, MESSAGE_TRADE should be used when buying/selling items from NPC's"}
{"pred": "I'm not sure if this is the right place to put this code. I think it should be in the `GraphController`.", "gold": "Better if you give split[0], split[1], and split[2] descriptive names than using them this much through so many lines of code."}
{"pred": "Why are we removing this?", "gold": "I know we're deleting this soon but I thought I'd fix it anyway :smile:"}
{"pred": "Please revert this change.", "gold": "I like this, makes it clearer what scope the continuation is in"}
{"pred": "Why did you change this?", "gold": "These test checks if the value of the merged cells is correct. Please revert the changes and set `autoWrapCol` and `autoWrapRow` to `false` to the Handsontable instance. This change applies to the entire mergeCells.e2e.js file."}
{"pred": "Why do we need this migration?", "gold": "Don't need to clear them - because nobody have data there, also can don't delete buckets - just leave them, new nodes will not have them if remove bucket from buckets.go"}
{"pred": "Why is this an empty interface?", "gold": "Similarly, this has only one implementing class"}
{"pred": "Why do we need this?", "gold": "Does it send requests with urlencoded bodies anywhere? I thought it sends only json. Maybe content-type should be `application/json` by default?"}
{"pred": "`?PhpParser\\Node\\Name|PhpParser\\Node\\NullableType` ?", "gold": "I must have forgotten that one in previous PR"}
{"pred": "Why did you remove this test?", "gold": "This test name doesn't really reflect what the test does any more... Then again I'm not really sure what it is testing now - is it actually just testing that FactoryGirl can create records? or does that itself funnel through the rails code so that we're testing rails can create records?"}
{"pred": "I think this should be `BuilderForRuntaskTemplateObject`", "gold": "Can this be `BuilderForYAMLObject`"}
{"pred": "Why is this needed?", "gold": "better use `with mp.Pool(...) as pool:` here"}
{"pred": "Why do we need to catch the exception here?", "gold": "Since this is a config problem, BAD_REQUEST is probably not the right response."}
{"pred": "I think this should be `dur < 30 * time.Second`.", "gold": "We could probably do 1 sec if we have time, and hence exit early if we have small number of clients. So LB = 60 sec. Grace = 10secs. So 50Sec window, if NumClients < 50, Close 1 every second. Then exit when NumClients == 0."}
{"pred": "Why do we need this change?", "gold": "can you rename `that_col` to `that_column`?"}
{"pred": "`componenets` -> `componenets`", "gold": "This is not correct, it will override everything else that is currently in `Widgets`. This file shouldn't be modified at all, we should be adding `components.Widget` in `assets/js/googlesitekit/widgets/index.js`, where the rest of that object is defined. Oh, and there's a typo here :)"}
{"pred": "Why do we need to check if kv_ is nullptr here?", "gold": "Each task finished will result in the meta info updated?"}
{"pred": "Why do we need to replace spaces here?", "gold": "Quick follow-up @aaemnnosttv, why this and not `.trim()`?"}
{"pred": "Why do we need to disable this?", "gold": "I don't think we should have file-wide exceptions for this rule, let's annotate the individual instances."}
{"pred": "Why is this needed?", "gold": "@raprasad you plan to take this \"if true\" out, right?"}
{"pred": "`list(flow.FlowReader(f).stream())` -> `list(flow.FlowReader(f).stream())`", "gold": "Could you adjust this to `with open(path, \"rb\"):` here and below? We should make sure that we close all files."}
{"pred": "Why is this needed?", "gold": "Does this need its own import block or can it be combined with the imports below as in most other files?"}
{"pred": "I think this should be False by default.", "gold": "It defaults to `false`."}
{"pred": "Why do we need to call `applyPreflightCorsResponse` here?", "gold": "Why conditional check is done? As i understand, later both `applyPreflightCorsResponse()` and `allowAllCorsActions()` does the same"}
{"pred": "nit: `klog.Warningf(\"Node %v/%v has not yet exit, OnRegister failed\", projectID, nodeID)`", "gold": "has not yet exit?"}
{"pred": "Shouldn't this be 2.4.4?", "gold": "I wonder if the version should be part of the deprecation API. It might ease our future selves while debugging issues =)"}
{"pred": "Why did you change this to `finest`?", "gold": "We chose `info` in the test code for obvious reasons. Changing to `finest` makes debugging harder and noisier."}
{"pred": "`CreateAnnotationsFromStacks` was renamed to `CreateAnnotatedCodeLocationsFromStacks`.", "gold": "This is just a rename..."}
{"pred": "I think this should be `return fmt.Sprintf(\"%v\", err)`", "gold": "Should probably panic here. I think hashers are contracted not to return errors (and returning \"\" doesn't handle the error)"}
{"pred": "Why do we need to change this?", "gold": "Aside: this is a confusing name for an interface that contains multiple addresses."}
{"pred": "Shouldn't this be `exit_code = 1`?", "gold": "We expect to use Bolt::CommandResult for scripts as well?"}
{"pred": "Would it make sense to make this a method on `Metadata::ExampleGroupHash`?", "gold": "same thing as above inre commas and args?"}
{"pred": "I think this should be `getInt(\"query/memoryCircuitBreakerThreshold\", 100);`", "gold": "Should we validate that this is between 0 and 100?"}
{"pred": "why this change?", "gold": "`HardKiller` doing `os.Exit()` without proper shutting down other dependencies. I think there should be a better approach for this."}
{"pred": "Shouldn't this be DRM_FORMAT_MOD_LINEAR?", "gold": "Why isnt the return value checked?"}
{"pred": "Is this intentional?", "gold": "remove this debug"}
{"pred": "nit: missing space after `if`", "gold": "This should change to a call to `Layer::find_layer_index`, which should be renamed to `find_child_layer_index` and it should return a `size_t` (technically the `difference_type` for whatever iterators are going to be used)."}
{"pred": "`getattr(target, \"script\", None)` is equivalent to `getattr(target, \"script\", \"\")`", "gold": "what is this change about?"}
{"pred": "Why did you remove these?", "gold": "Why did we leave the `stderr` param in this case while we removed it from other bake methods?"}
{"pred": "nit: `VerifySameTrustDomain` -> `VerifySameID`", "gold": "This seems to only be used by the server/ca package.... maybe this can live there instead of being lumped into these API implementation helpers?"}
{"pred": "nit: `MinTimes(0)` and `MaxTimes(1)`", "gold": "hmm.. this is Hacky, the test will succeed in Windows even if you remove the calls to these, right?"}
{"pred": "Should this be `2.3.2`?", "gold": "should this block be in the file `05_install_ruby.rb`?"}
{"pred": "Why do we need this?", "gold": "To match outbounds, let's just call this `Unary: recorder`, `Oneway: ...`."}
{"pred": "Why is this necessary?", "gold": "`string.encode('utf-8')` is more common but I guess this is mostly cosmetic :)"}
{"pred": "Why remove `uri`?", "gold": "Consider logging `r.Url.Path`? Either way, ship it!"}
{"pred": "`MinTealVersion` -> `MinVersion`", "gold": "this probably should be done lazely only if logic/app call txn in the group. Or even done in LogicSigSanityCheck?"}
{"pred": "Why do we need this?", "gold": "Please move this to `common/enums/defaults.go`."}
{"pred": "F401 'listenbrainz.db.user' imported but unused", "gold": "In general, if you find unalphabetized imports, you should alphabetize them. Fine for now though."}
{"pred": "`duraton` -> `duration`", "gold": "we should probably deprecate (and display a warning) the misspelled keyword arg here rather than removing it... and then add the new one. This changes a public API and will break any code that is currently using the misspelled version."}
{"pred": "I don't think this is correct. The compensation voltage should be set to the compensation voltage of the ion mobility.", "gold": "Is this if statement here necessary? It looks like this is the same logic that is taken care of in the setter for the property \"CompensationVoltage\"."}
{"pred": "nit: `key_parts = base.split(\"/\") + ext[1:]`", "gold": "Eliminate this function; handled by mappings and analyzer"}
{"pred": "Shouldn't this be `if ($route === 'collection' || $route === 'record')`?", "gold": "I wonder if this new logic would actually fit better as a support method, both for readability and overriding... e.g. <pre> protected function getRouteNameFromDataSource($route) { if ($route === 'collection') { return $this->getDataSource()->getCollectionRoute(); } elseif ($route === 'record') { return $this->getDataSource()->getRecordRoute(); } return $route; } </pre> That's extremely nitpicky, and you can feel free to leave this as-is if you prefer... but that feels marginally better to me."}
{"pred": "Why are we changing these to `finest`?", "gold": "This is in test code: understanding what we're doing is important in this context."}
{"pred": "Why this change?", "gold": "This change (and a few similar ones below) are not related to rpi3 support, and should be removed."}
{"pred": "Why this change?", "gold": "Hmm, why did we come to need the `,` at the end?"}
{"pred": "Why do we need to check for `hasPath` here?", "gold": "I'm suspicious of this. For one thing, `query._fields[paths[i]]` may be `0`, `false`, etc. so checking for falsy will catch both cases where both the field isn't in the projection and if the field is explicitly excluded from the projection. For another, I'm not so sure that #6546 is a bug. Let's discuss that more."}
{"pred": "`statements` is unused (from `structcheck`)", "gold": "What is this? I'm a bit unclear why the parser would have a list of statements in it."}
{"pred": "nit: `Global limit on the number of scraped samples per scrape target.`", "gold": "I believe this is Prometheus name, wonder if this is descriptive enough of a label name? @nrchakradhar @simonpasquier wdyt?"}
{"pred": "nit: `Knobs` -> `Knobs`", "gold": "Are most of our other fields default-zero-value? Would `AllowVXLANPacketsFromWorkloads` be a better formulation of this? I think it would make it easier for golang users of the API (default value matches the type zero-value)"}
{"pred": "nit: `removeSmallerNonces` -> `removeSmallerNonces`", "gold": "void RemoveTransactions(Address sander, long removeBelowThisNonce) and separate these two calls"}
{"pred": "Why do we need this?", "gold": "Not sure which interest you are looking for to propagate here, but keep in mind that we have helpers (maybe not in /test package?) to check/wait for interest on a literal on a server for a given account."}
{"pred": "Shouldn't this be `true`?", "gold": "nit: should not need this."}
{"pred": "This should be `_azkaban_project_dir_size_in_bytes`", "gold": "Since this constant is an implementation detail rather than a user-facing API, is it better to define it in a place where it is used?"}
{"pred": "Shouldn't this be `if isinstance(x, str)`?", "gold": "It would be nice if we have some docs explaining this. Core luigi should avoid having hard to understand code."}
{"pred": "I don't think you need to create a new `Stemmer` here. You can just call `init(ignoreCase, affix, dictionaries)`.", "gold": "extract a method to call from a test"}
{"pred": "`collectorExecutor` -> `collectorExecutor`", "gold": "nitpick: regular order is private than final."}
{"pred": "This should be `W9022`", "gold": "We could add an old names here, the ideal would be to not force to disable missing-any-param when the old one was already disabled. But they are not really equivalent so maybe you were right to not add it."}
{"pred": ">LINQ = \"LINQ\"; [](start = 12, length = 15) I don't think this is used anywhere.", "gold": ">public const string LINQ = \"LINQ\"; [](start = 8, length = 34) Are there duplicated benchmarks here? #Closed"}
{"pred": "Should this be `options[:version] || host['pe_ver']`?", "gold": "Probably worth taking the opportunity to add yardocs to this method now. Esp. curious about what the options hash accepts."}
{"pred": "This should be `layer->current.keyboard_interactive`", "gold": "This is Very Meh . We want to get rid of `role_data`, and it's an internal field."}
{"pred": "`loadExtension` -> `loadExtension`", "gold": "`await this.driver().loadExtension(path);` should work"}
{"pred": "Why is this test being disabled?", "gold": "Is any of this needed anymore?"}
{"pred": "Shouldn't this be `sizeof(OstreeDiffDirsOptions) == sizeof(OstreeDiffDirsOptions)`?", "gold": "Can you add a mention here and in `ostree-repo.c` that the holes were found with `pahole`?"}
{"pred": "I don't think we need the `extra_controller_params` here.", "gold": "While we're changing this, I wonder if we can do away with `extra_controller_params`.. Maybe a new type of `solr_search_params_logic` that appends the attributes?"}
{"pred": "Should this be `fail_test(early_assertion.message)`?", "gold": "I believe that you only need to rescue Beaker::DSL::Assertions, as they include Minitest::Assertions."}
{"pred": "Should this be `&=` instead of `&=`?", "gold": "Do we need `&=` or `=` is sufficient?"}
{"pred": "`$settings['config_sync_directory'] = $config.SitePath $config.SyncDir;`", "gold": "Let's keep both of these here. It should work on most any version of Drupal 8 then true?"}
{"pred": "What's the reason for this change?", "gold": "@lmolkova This ok? I'm getting random failures from the build checks that don't happen locally from a few non-deterministic time related comparisons."}
{"pred": "I don't think this should be changed.", "gold": "Q: are we supposed to change this for files that already exist?"}
{"pred": "E501 line too long (116 > 115 characters)", "gold": "I count only four times where `selection_specs` had to be specified as a keyword instead of by position! If that is how often it was used that positional argument in our own codebase, I am pretty certain users barely used it (if at all)."}
{"pred": "I'm not sure what this test is testing, but it doesn't seem to be testing anything.", "gold": "is this test for the case above? seems to cover a numeric rather than empty val?"}
{"pred": "This should be removed.", "gold": "I like the general idea, but this will break: - JSON is not binary-safe, so anything binary will break this. - JSON is super slow for multiple-MB things - We want to have drag-and-drop upload - the easiest way to implement this is FormData upload, so we should have a multipart/formdata endpoint. Can we put to /flow/content?"}
{"pred": "`dynamo_exited_synched` -> `dynamo_exited_synched`", "gold": "_and_synched seems to be more consistent w/ exited_and_cleaned"}
{"pred": "Why is this needed?", "gold": "nit: in case of whole file `ifdef` it may be helpful to have `_netcore31` suffix it in the name of the file as well."}
{"pred": "`bitmask` -> `bitMask`", "gold": "should use Number instead of Long"}
{"pred": "Use 2 (not 0) spaces for indenting an expression spanning multiple lines.", "gold": "Had no idea that method existed!"}
{"pred": "Why is this needed?", "gold": "I wonder if we shouldn't just do `w.show()` here, which causes Qt to correctly calculate the sizes."}
{"pred": "Why do we need this change?", "gold": "may be nice to have helper method to generate s3 paths rather than the minor code dup"}
{"pred": "Why do we need `fetchPrivate` here?", "gold": "This isn't needed here, we still run `this._afterAuthentication` which loads settings & config - the reason the settings fetch is here is to make sure we have all the settings before saving the blog title rather than fetching everything once auth has completed. Probably moot anyway as the oauth code will be removed shortly  "}
{"pred": "Why do we need this change?", "gold": "This line is getting a little long; let's move the conditions to at least two lines (maybe three)."}
{"pred": "Why do we need this?", "gold": "Don't use relative paths. src directory is already on the include search path"}
{"pred": "Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "Line is too long. [86/80]"}
{"pred": "Why do we need this?", "gold": "We have to navigate up four directories to come down three? I see it, but it's kinda icky. Is something like `load Rails.root + 'app/lib/twitter_digits.rb'` out of fashion nowadays?"}
{"pred": "Shouldn't this be `FPGA_EXCEPTION`?", "gold": "Empty space at end."}
{"pred": "Why do we need this?", "gold": "I think similar to line 176 here we'll want to call `detect_project_conflict` after overriding this."}
{"pred": "Why do we need to use `child_process`?", "gold": "How about `const { promises: fs } = require('fs')` and then replacing `fs.promises.` with `fs.`?"}
{"pred": "Why do we need to close the body here?", "gold": "This ignores errors closing the body. Not likely to happen, but no reason to take the risk either."}
{"pred": "`args.length > 0 ? String.format(query, args) : query`", "gold": "Why was this change needed?"}
{"pred": ">PATH_TO_FILE [](start = 79, length = 9) PathToFile? #Resolved", "gold": "Needs a description added to CommandArgsUsage.resx"}
{"pred": "`String.format` is deprecated in favor of `getResources().getQuantityString`", "gold": "The line is a bit too long. That's why the test currently fails. Please break it into two lines."}
{"pred": "`slots.stream().anyMatch(slot -> slot.isSupporting(caps))`", "gold": "Prefer `Stream.anyMatch` instead of iterating over all slots."}
{"pred": "Layout/EmptyLinesAroundModuleBody: Extra empty line detected at module body beginning.", "gold": "Can this just be a feature flag to check if it's on? This will give us flexibility on launch date (which could be turned on July 1st) and allow us to easily revert back in case the policy is reverted."}
{"pred": "Why is this a uint8?", "gold": "Due to this change, src/examples/adc needs to be modified"}
{"pred": "`unsafe.Pointer` is not needed here.", "gold": "`s/singlePointer/singlePtr` or please rename the type to `singlePointer`."}
{"pred": "Why did you remove the count?", "gold": "Do we need it? If right now it's toml"}
{"pred": "Why do we need to call `oldUnmount` here?", "gold": "You are never calling oldUnmount, this could lead to a plugin chain failing."}
{"pred": "Why do we need `null` here?", "gold": "What does setting partitionInfo to null mean exactly?"}
{"pred": "`any(len(source.data[n]) != length[0] for n in new)` is equivalent to `any(len(source.data[n]) != length[0] for n in new)`", "gold": "Not sure you need the initial ``not_updated`` as ``any([])`` evaluates to false."}
{"pred": "I don't think you need the `created_at` column here.", "gold": "Since this migration hasn't been merged to master yet, what do you think about just squashing these two into the migration you really want?"}
{"pred": "", "gold": "This doesn't apply to all developers"}
{"pred": "Shouldn't this be `api_serializer.xml`?", "gold": "I think `serializer.xml` can be moved into condition below too"}
{"pred": "nit: `dotnet run netcoreapp3.1 --configuration Release --filter OpenTelemetrySdkBenchmarksActivity*`", "gold": "Probably put this in a simple README.md file?"}
{"pred": "Why do we need this?", "gold": "Super Cool bitwise   Minor: Most likely you don't need `System.Collections.Generic`, `System.Linq` & `System.Threading.Tasks`"}
{"pred": "`appId` -> `applicationId`", "gold": "If we just return the TCC, maybe we need to update the method name for it."}
{"pred": "Why did you remove the `createOperationDisplayString` call?", "gold": "For consistency, shouldn't this use `SwaggerModeler.GetMethodNameFromOperationId(method.Name)` as above? I'd just reuse `\"Additional parameters for \" + SwaggerModeler.GetMethodNameFromOperationId(method.Name) + \" operation.\"` here, `string.Format` with `CultureInfo` is complete nonsense here anyways."}
{"pred": "Why did you change this?", "gold": "As this is just a backport, I guess it is fine to leave these timings, although they are not enough to make tests stable."}
{"pred": "I think this should be `ecs` instead of `ecs`.", "gold": "Why this way?"}
{"pred": "Why did you remove this check?", "gold": "Changing this because otherwise the second run of testExtractCompilationsEndToEndWithDatabase will try to overwrite a generated file and fail. Maybe there's a better way?"}
{"pred": "Shouldn't this be `pathParam.lastIndexOf(';')`?", "gold": "This modification is not correct. Suggections: 1. upgread guava to 30.0-jre will fix this issue"}
{"pred": "Why is this change needed?", "gold": "All changes to signature code stem from here. The syscalls interfaces expects VerifySignature to return an error. I performed the change here and bubbled it up through the rest of the code - mostly mechanical."}
{"pred": "Why do we need to make this public?", "gold": "This strategy seems good. Just wondering do you think this is a good time to move stuff out of core? For example, I guess storage, since it's for use by server and not client, doesn't need to be Java 6?"}
{"pred": "`filterExpressions == null || filterExpression() == Expressions.alwaysTrue()`", "gold": "We had a wrong predicate before: we compared a list to an expression."}
{"pred": "I think this should be `group:65534:--x`", "gold": "Name copy-pasted from above. \"empty\"?"}
{"pred": "Is this intentional?", "gold": "May I ask why change this?"}
{"pred": "Should this be `len += 2`?", "gold": "Does this mean we now always include the dictionaries even if they're empty? If so, we should make sure that this doesn't break the Agent (even older versions). It's possible that it doesn't handle empty dictionaries well."}
{"pred": "`Relevant only if 'FastSync' is 'true'. If set to value, it will set a minimum height threshold limit up to witch Full Sync will stay on when chain will be behind network.`", "gold": "The description and name is unclear. Typo in 'which'."}
{"pred": "Extra empty line detected at class body end.", "gold": "Files should have an extra line at the end of them."}
{"pred": "(style) code indent should use tabs where possible", "gold": "> i#1312 AVX-512 support: Add code cache to/from context switching. s|to/from|| (redundant and mildly confusing (called \"enter\" and \"return\" in code))."}
{"pred": "Shouldn't this be `hash_table_size(d->files)`?", "gold": "This stat may fail, right? I think dag_file_exists does not actually check the file is there."}
{"pred": "Why do we need this change?", "gold": "I think we can make a safe assumption that if only two values are passed in then you have `(optionsToValidate, optionsForValidation)`, if its three then you have `(optionsToValidate, overrideOptions, optionsForValidation)`"}
{"pred": "nit: `edges` -> `edges`", "gold": "If there are more items to add to what's being written out here, please add a TODO."}
{"pred": "Shouldn't this be `elif length == 4`?", "gold": "Can you add an `else:` case to handle an invalid length? That will prevent weird errors."}
{"pred": "Why did you remove this constructor?", "gold": "* We need to deprecate/internalize first on master. * We should directly make the AST node final now * The setter `setName()` can be package-private."}
{"pred": "Why is this removed?", "gold": "Where did this functionality move to?"}
{"pred": "Why not use `String.format` here?", "gold": "maybe should firstly check whether current tidb support `split table region`?"}
{"pred": "This file should be renamed to `ErrorNotifications.js`", "gold": "Please use the same (plural) name for the new component since it renders multiple notifications."}
{"pred": "nit: `topBlock.Round() - basics.Round(blocksFetched)`", "gold": "Perhaps show attempt x of y in message ie: Failed to download block %d (attempt %d of %d). %v"}
{"pred": "Why was this removed?", "gold": "why did you took `Exception` out? Is this method only throwing runtime exceptions?"}
{"pred": "Why did you remove this?", "gold": "please revert all of these unrelated whitespace changes"}
{"pred": "I think it would be better to use `EncryptionType.NONE` here.", "gold": "PGP_INLINE is clearer IMHO"}
{"pred": "should not use dot imports", "gold": "Please group imports"}
{"pred": "Why this change?", "gold": "Would it make sense to expose this as a config option in `TestHiveMetastore`? A small number of worker threads helped us to catch a few connection leaks early on."}
{"pred": "Shouldn't this be `(dilation_h * (kernel_h - 1) + 1)`?", "gold": "Let's fix the extra spaces above."}
{"pred": "Why do we need this change?", "gold": "should a similar change be done for findElement?"}
{"pred": "Why do we need this?", "gold": "// Keys are stored in an in-memory map, where the key is the name of the // private key, and the value is the structure where the actual private key and the password are // stored."}
{"pred": "nit: `This brings in CloudEventOverrides and Sink.`", "gold": "I think this needs a json inline tag here"}
{"pred": "Shouldn't this be `dict::dict()`?", "gold": "Hi @cjimison good point but doesn't this break the compatibility with Erlang/OTP prior to 17.0? I think this could be done over an conditional macro defined in the rebar.config: `{erl_opts, [ {platform_define, \"^R\", pre17} ]}` and some additions with `-ifdef(pre17). ... -else. ... -endif.`"}
{"pred": "why do we need to wait for start here?", "gold": "should we change/wrap the error?"}
{"pred": "Do we need to set the log level to TRACE?", "gold": "Are we sure that passing this log in warning does not risk spamming the logs of a node running on the mainnet or on ropsten etc ? Do we often receive invalid messages of this type ?"}
{"pred": "`text_only = is_text_only(options, skipped)`", "gold": "I'd like to avoid a method call here atm since this is an extremely hot line in the code."}
{"pred": "`xrange` is not available in Python 3.6.", "gold": "Is this a bugfix?"}
{"pred": "Why was this removed?", "gold": "Is this a relevant change?"}
{"pred": "Please don't change unrelated things.", "gold": "@dansanduleac what do you think of this one? dots were aligned and no longer are  "}
{"pred": "Why is this being removed?", "gold": "Why we dont delete app specific notes when app is deleted?"}
{"pred": "Shouldn't this be `storeSettings(\"setAlwaysEnabledPluginsEnabled\");`", "gold": "The _OverviewPlugin_ is forcefully enabled without the option to disable it, using _PluginDescription.alwaysEnabled_. That should also work for this plugin?"}
{"pred": "Why do we need this?", "gold": "Can you facet on this new externalStatus Solr field?"}
{"pred": "`Array(filter(value)).select(&:any?)` is equivalent to `filter(value).any?`", "gold": "I wonder if it would it make sense to push the pivot facet handling down into `FilterField` (or maybe a subclass, `PivotFilterField`?)?"}
{"pred": "Should this be `result = nil` instead of `result = nil`?", "gold": "Ah I see what you were saying about making it harder to validate types. We'll have to catch the return for that."}
{"pred": "Why do we need to hide on touch outside?", "gold": "Try using using `.setDismissOnTouch(true)` instead"}
{"pred": "Why do we need this?", "gold": "Zach, is `UpdateSpan` of concern too? I see that it is called from `ExecuteAsyncInternal`."}
{"pred": "Why is this needed?", "gold": "Nit: its scope can be reduced to package default"}
{"pred": "Why do we need this?", "gold": "Why is this get;set;?"}
{"pred": "Why do we need to shrink the locator lists?", "gold": "Should we also create sender resources for unicast locators? Should we make a similar change on StatelessReader?"}
{"pred": "I think this should be `https://dtdg.co/net-runtime-metrics`", "gold": "Can we use `dotnet` instead of `net`?"}
{"pred": "Why do we need this? Can't we just call `FlushAsync()`?", "gold": "Should this be `ForceFlushAsync`? Given we have the `async` suffix elsewhere."}
{"pred": "why is this removed?", "gold": "Is this change intentional?"}
{"pred": ">SetProperty [](start = 27, length = 10) I think this should be `SetNativeOffset`", "gold": "This could be an integer property if we supported explicitly setting non-string-valued properties."}
{"pred": "Why removing the @access modifier?", "gold": "this is not consistent with the previous annotation - is it because of the usage in `Admin\\Content\\Category\\list.html.twig` twig template? Should not it be at least mentioned in the commit message? :slightly_smiling_face:"}
{"pred": "Shouldn't this be `return`?", "gold": "why add `return` here?"}
{"pred": "Why do we need this change?", "gold": "put this hash in variable"}
{"pred": "Why was this removed?", "gold": "Why not use `kbfsblock.ZeroRefNonce`?"}
{"pred": "Why this change?", "gold": "what mypy warning does this address? I'm confused by this change."}
{"pred": "You can use `std::remove_if` here.", "gold": "Note that `hasAttacked` that is called before this function already performs this check. You probably don't need to check `hasAttacked` then."}
{"pred": "Why do we need to disable this?", "gold": "Unfortunately, the site example only has access to imports from `components/index.js` that means that you can't import the items file `carousel-items.js`. You can import that file in all the other storybook files though."}
{"pred": "`privkey2electrum` -> `privkey2electrum`", "gold": "Leave this out and move the script to the scripts folder."}
{"pred": "`nameOrHandle` -> `windowHandle`?", "gold": "This should only be sent if the driver is speaking to a W3C conformant remote, so we need an if-condition check like we have in the Python bindings."}
{"pred": "Why do we need this interface?", "gold": "TransferFormat.Text in general purpose connection interface? :/"}
{"pred": "Why is this needed?", "gold": "Is this `@missing_text` ?"}
{"pred": "Why do we need a lock here?", "gold": "This work for both sides?"}
{"pred": "This should be `import { __ } from '@wordpress/i18n';`", "gold": "`lodash` shouldn't be grouped under WordPress dependencies"}
{"pred": "Why do we need to mock the http response?", "gold": "Include the standard parameterized error tests as well."}
{"pred": "`m.Combo(\"\").Get(v1.ListReleases).Post(bindIgnErr(api.CreateReleaseOption{}), v1.CreateRelease)`", "gold": "All lowercase in route rule."}
{"pred": "`response.properties.length && response.properties[ 0 ] && response.properties[ 0 ].accountId`", "gold": "I'd suggest we use `response.profiles[ 0 ].webPropertyId` here instead, to make sure it's based on the profiles retrieved. The value _should_ be the same, but I think it's a bit more accurate like that."}
{"pred": "Why did you change this?", "gold": "This doesn't change the default of 6h, but will increase the displayed timeframe by 3h for each long press, before wrapping around to 3h. This requires 7 long-presses - quiet a journey ..."}
{"pred": "Why do we need this?", "gold": "We still need to figure out a way to get rid of this write method. Is this still necessary?"}
{"pred": "nit: add a space after `,`", "gold": "`assertItemsEqual` compares the sequences after sorting them, is that intended?"}
{"pred": "Should this be `File.expand_path`?", "gold": "I don't think this one needs to be changed since the only previous path is already an absolute one."}
{"pred": "nit: `serviceDefinition.Host?.EqualsIgnoreCase(AzureHostSignature)` => `serviceDefinition.Host?.EqualsIgnoreCase(AzureHostSignature)`", "gold": "what's the goal of this?"}
{"pred": "`pool` is unused (from `structcheck`)", "gold": "why is this here? We already have a message pool in the node."}
{"pred": "Why is this change needed?", "gold": "Another mess after all renames and enum conversions. Doesn't break anything though."}
{"pred": "Why is this needed?", "gold": "I don't think it's necessary to change this for the history plugin tests?"}
{"pred": "Why this change?", "gold": "In general, I suggest using the `kind()` getter inhereted from `TransportInterface`"}
{"pred": "Why was this removed?", "gold": "Is the removal of `[AppDomainFixedOutput]` on purpose? (looks like a copy-paste...euh..remove error)"}
{"pred": "//snippet-keyword:AWS SDK for Java v2", "gold": "AWS Identity and Access Management (IAM)"}
{"pred": "Why do we need this?", "gold": "gofmt everything pls"}
{"pred": "// PodIOChaosList contains a list of PodIOChaos", "gold": "ditto, We do not need add this feature for PodXXXChaos"}
{"pred": "Shouldn't this be `lowerCamelServiceName`?", "gold": "There is a simpler way to do this: 1. Don't bother with the whole lowerCamelApiTypeName in SampleConfig 2. Use this code: `return localVarName(Name.upperCamel(apiTypeName, \"Service\"));` Basically, each of the static creation methods of Name just need to have their arguments all be in the same casing, so you would just pass the upper camel string \"Service\" here."}
{"pred": "nit: can combine with -> can combine with", "gold": "Can you explain this change to me?"}
{"pred": "Why do we need to change this?", "gold": "let us rename the artifact to `storageclass-single-replica.yaml`"}
{"pred": "Why do we need this namespace?", "gold": "Nit: I should have done this before, but rename the file to LibuvFunctions.cs. Make sure no other files are misnamed."}
{"pred": "Why do we need this?", "gold": "We should not add new types unless absolutely required. I'm not sure `UUID` is requires a new type"}
{"pred": "Why do we need this class?", "gold": "If only Gatling uses it, can we skip introducing new entity for now? Looks like overkill..."}
{"pred": "`APIV1GETVersionsResponse` is the response to `GET /versions`", "gold": "rename -> info ?"}
{"pred": "Why do we need this?", "gold": "Remove the `config_path=dict(...)`, that is automatic!"}
{"pred": "`flattenedTree` -> `flattenedTree`", "gold": "I had to create a new flattened tree to support this functionality. The only other place in which a flattened tree is created is during the audit itself. Since `axe.cleanup` can be called at any arbitrary time, we can't reuse the same tree."}
{"pred": "Why do we need this method?", "gold": "As this method is just set the internal cofigModel, it's better to use setConfigs instead of addConfigs."}
{"pred": "Why do we need to increase this?", "gold": "Is this line needed?"}
{"pred": "nit: remove empty line", "gold": "nit: import formatter"}
{"pred": "Shouldn't this be `_operation.Responses[key].Extensions?.Get<bool>(\"x-nullable\") ?? false`?", "gold": "can you use LINQ's `All` instead? Should be a side-effects free one liner with that."}
{"pred": "This should be `#ifdef __ANDROID__`", "gold": "Could you please remove `#include <spawn.h>` as a whole and see what happens? I believe that this is no longer needed; it was necessary when we called `posix_spawnp` directly, but now we use `h2o_spawnp`."}
{"pred": "nit: `return in.Paused`", "gold": "`whether this resource is paused` to `whether this resource has been paused` ? To keep same doc style."}
{"pred": "Why do we need this method? Can't we just call `hasPermission(userId)`?", "gold": "This method is validating permission for hp flow. Can you please rename this method to convey the same?"}
{"pred": "Shouldn't this be `!==`?", "gold": "Just to confirm, do we actually want to explicitly set the `kBeforeHandshake` symbol on all network errors regardless of whether the options/property is passed in?"}
{"pred": "Why do we need this?", "gold": "How soon after this will Apply() be called? It would be a shame if there was still a significant delay before a missing or superfluous route was corrected."}
{"pred": "I don't think this is the right way to do this. If the package name is the same as the local package name, then the local package identifier will be the same as the package name.", "gold": "While this is commonly correct, the more reliable check is to get the package's identifier from the type checker and check those for equality. The information should be there, just another matter of plumbing it."}
{"pred": "Why do we need this?", "gold": "Just to clarify, should this be 'composite_root/root/' or 'composite_root/'?"}
{"pred": "Why do we need this?", "gold": "Any reason not to move it to after line 281? These are all pubsub related fields IIUC."}
{"pred": "`Zero` is not considered negative.", "gold": "Checks if value is a negative `Number` primitive or object. Zero is considered neither positive nor negative."}
{"pred": "I don't think we need to check for `r.TLS != nil` here.", "gold": "Just a nit, but remove the empty line here. :)"}
{"pred": "I don't think you need to check for `ok` here. If `p.ext.Rules` is nil, then `vn.Corpus` will be set to `p.ext.DefaultCorpus`.", "gold": "A `GoPackageInfo` details message should be added to the `CompilationUnit_FileInput` to ensure the import path remains the same."}
{"pred": "Shouldn't this be `ListView`?", "gold": "Please don't create new fields with the `m` prefix. I'd rather mix than introduce more of these."}
{"pred": "I think this should be `circuitBreaker/cpuCircuitBreakerThresholdPct`", "gold": "Can we please simplify these names? they are awfully verbose and repeating the parts that are already unique and obvious."}
{"pred": "`!singleBccRecipientFromAccount` -> `!alreadyVisible`", "gold": "Flipped the logic here, was this actually wrong before?"}
{"pred": "Shouldn't this be `bool res = false`?", "gold": "I think (a) should be initialized to `NAT_FE_LOOKUP_ALLOW` and (b) it should be probably the first thing in `calico_v4_nat_lookup2`"}
{"pred": "I think this should be `gradlew testClasses`", "gold": "I'd look as to what this class actually does... seems weird. Classpath below (under \"run\") is wrong for gradle."}
{"pred": "File is not `goimports`-ed", "gold": "Group w/ algorand imports"}
{"pred": "Why is this needed?", "gold": "I don't think this import is being used."}
{"pred": "Why do we need this change?", "gold": "This is an interesting way to do this. I like it. An alternative way to implement a multiple kind pattern was to have this return `AnyKind` and then have match perform an actual check to see if it matches."}
{"pred": "@sonata-project/contributors @sonata-project/contributors what do you think about this?", "gold": "You did not check this code"}
{"pred": "Should this be `len(types) == 0`?", "gold": "This was necessary due to a bug uncovered in testing. If an actor method which requires params is called without any params at all, not returning an error here causes a panic."}
{"pred": "Why do we need group here?", "gold": "Thanks for the pr. Would you be able to edit the file to use spaces rather than tabs? Normally we have prettier run on commit, but I guess file patches don't do that."}
{"pred": "Why is this test removed?", "gold": "Is it intentional that we removed this annotation?"}
{"pred": "What kind of open api document type this rule should be applied to?", "gold": "should be general?"}
{"pred": "Shouldn't this be `_syncConfig.PivotNumberParsed`?", "gold": "if lowest inserted header is non null non zero then pivot should be higher and a better best known on the left. maybe Head?.Number ?? Math.Max(Pivot, LowestInsertedHeader))?"}
{"pred": "Why do we need this class?", "gold": "Is a FakeApp class needed? Can test use a Mockito mock instance instead?"}
{"pred": "`is_constant` doesn't seem to be used.", "gold": "We should make this an enum."}
{"pred": "Why was this removed?", "gold": "@lgolding, note I fixed the forward slashes that appeared in the VS output (which was certainly not by design)."}
{"pred": "Why did you change this?", "gold": "Minor unrelated fix that snuck in."}
{"pred": "Why this change?", "gold": "Took the opportunity to fix the import ordering."}
{"pred": "Shouldn't this be `self.wavelength = int(wavelength)`?", "gold": "I think int and float can be handled in one if statement. The subsequent calculations don't really care whether it si a float or an int."}
{"pred": "What's the reason for this change?", "gold": "Can we keep this at 10 to reduce the probability of a flake? Or are you afraid this would be too likely to give a false positive if delayed cancellation is every actually broken?"}
{"pred": "nit: remove empty line.", "gold": "nit: add a blank line under this."}
{"pred": "`chainIDFlag` is unused (from `deadcode`)", "gold": "no need to add this flag query the endpoint set-up to determine the chainID"}
{"pred": "`return node.querySelector('input[type=\"submit\"], img[type=\"submit\"], button[type=\"submit\"]')`", "gold": "Here is a few scenario - What if there is a submit button with in a form, but is always disabled?"}
{"pred": "Shouldn't this be OPSZ_half_16_vex32_evex64?", "gold": "wrong code: should be `Wh_e`"}
{"pred": "Shouldn't this be `vStringNewOrClear (label)`?", "gold": "This leads to a small \"leak\" (mostly theoretical only though), if we don't want it this could be created in `initialize()` and destroyed in `finalize()`."}
{"pred": "nit: `BuildIDOSEnv` -> `BuildIDOSEnv`", "gold": "BuildIDOSEnvVarName or similar, otherwise it sounds it's actually holding actual value of env var"}
{"pred": "I don't think this is the right way to do this. I think it would be better to do this in `init_rabbitmq_connection`.", "gold": "I like this standard \"container has started\" message. Should we have a \"container exited because FOO\" message as well?"}
{"pred": "Why is this import needed?", "gold": "And again. The reason it's bad is that if someone uses a JDK not produced by Oracle they won't have this class."}
{"pred": "`typeof window !== 'undefined'`", "gold": "We have Vue application at our disposal, and have examples container implemented as component. Shouldn't helpers be imported instead being global? Not the best practice in Vue app I guess"}
{"pred": "I don't think this should be a `DiskCacheClosedError`.", "gold": "No trailing punctuation in the error message."}
{"pred": "Why is this needed?", "gold": "tested? seems like it could break"}
{"pred": "why is this public?", "gold": "This have to be public because the renamed o.a.l.backward_index.TestBackwardsCompatibility refers this."}
{"pred": "why this change?", "gold": "unrelated to your change, but I don't think that this is correct anymore. We also seen to remove application support from `primaryNodeUnupgradedProtocol` for the test to be correct."}
{"pred": "Why do we need to copy here?", "gold": "Should this also validate that the RoleArn env var is provided, or just let the creds fail?"}
{"pred": "Why do we need this change?", "gold": "fwiw, in tchannel-go I've implemented a similar method on TChannel that either returns a Tracer instance it was initialized with, or returns `opentracing.GlobalTracer()`, which by default happens to return a singleton instance of `NoopTracer`. In Go the use of global variables is not frowned upon as say in Java, so this pattern allows minimal work to enable tracing in a service, one just needs to store a real tracer in the global variable, e.g. via `opentracing.InitGlobalTracer(someTracerImpl)`, while the instances of TChannel do not need to be explicitly given any tracer since they will default to that global."}
{"pred": "can you use `assertRaisesRegexp` here?", "gold": "Shall we also add `ks.Series([1, 2, 3], name=[\"0\", \"1\"])`?"}
{"pred": "This should be `perm_addNodesToAllowlist`", "gold": "Can this be updated?"}
{"pred": "`$formatConfig['width']` and `$formatConfig['height']` are no longer used.", "gold": "this change is to avoid duplication on the defaults. They are already on the Configuration class. (Also I removed the false default, because the admin format does not have it). This is also produces the rest of the diff, changes from false to null."}
{"pred": "Why do we need to lock container here?", "gold": "What does it protect from? If it's subsequent CNI calls, won't containerID be different from the first one? or it's different in containerd? we use `getInfraContainer` to get the lock identity in CNIAdd. And this reminds me what if the first CNI call and the subquent ones run into connectInterfaceToOVSAsync, will duplicate ports being created or it has been handled?"}
{"pred": "`Unknown advert position \"%s\". Known names are %s.`", "gold": "In Exceptions' constructors, we always add a optional last parameter `Exception $previous = null`. In the past, this was (still is?) a part of the coding standards."}
{"pred": "nit: `slowWritingPeerMonitorInterval` -> `slowWritingPeerMonitorInterval`", "gold": "I think more idiomatic (and consistent with elsewhere in our code base, and more natural to read as \"25 seconds\") is `25 * time.Second`"}
{"pred": "Why is this needed?", "gold": "Enabling `YAML` by default would be a breaking change in behavior for some applications if the struct's used by that application already include YAML tags, but their application has been (un)marshaling DynamoDB Attributes based on the struct name."}
{"pred": "Shouldn't this be `shutdownNow()`?", "gold": "For the command executor, which in turn, uses the HTTP client to talk to the WebDriver, the client might have high-timeout values set, so the shutdown can take a long time if we wait for it to complete, especially if multiple-long running threads are there. I think it might be a good idea in general to couple the shutdown() with `awaitTermination()` with a timeout, if the ongoing tasks do not complete within that timeout then call `shutdownNow()`. What do you think?"}
{"pred": "Why do we need this change?", "gold": "Is this change needed? `start()` is still defined and uses `HiveMetastoreTest.class`. The only difference is that this doesn't pass a `Configuration` and the parameterless `start` passes `new Configuration()`."}
{"pred": "why do we need this?", "gold": "I think it is weird to store sr in protocol struct"}
{"pred": "Why do we need this check?", "gold": "Will this cause a reload _all_ NATable information? It's too bad we don't have some way to limit the reload to just the tables that have a metadata mismatch."}
{"pred": "\"immediately fail unless value X is not zero\"", "gold": "'fail unless X is a non-zero number' it will also fail if X is a byte string"}
{"pred": "I think this should be `if not self.overlaid`", "gold": "SyntaxError I think"}
{"pred": "Why is this disabled?", "gold": "I've filed an internal spec issue to add these missing VUs."}
{"pred": "Why is this needed?", "gold": "Can you please revert changes to files in the `thoughtworks` package? This is legacy code and we will eventually phase out RC."}
{"pred": "We don't use star imports.", "gold": "In iceberg, we usually don't use `*` to import package, it's more clear to import the specify package one by one."}
{"pred": "Why is this import needed?", "gold": "And again. The reason it's bad is that if someone uses a JDK not produced by Oracle they won't have this class."}
{"pred": "Why do we need to call this twice?", "gold": "Since we now keep track of all bytes written, and extend the write timeout as needed, it's tempting to no longer add 2 times the max buffer size to the bytes written accounting for the connection drain timeout. As we've discussed before, this add several minutes to the timeout with the default 240 bytes/sec rate limit. I'm thinking instead this line changes to `timeoutControl.BytesWritten(minDataRate, 1);` to add a grace period to the drain if necessary. What do you think @Tratcher?"}
{"pred": "Why do we need this?", "gold": "Good call. Makes we wonder if we should do this with the ARIA props."}
{"pred": "Please don't use wildcard imports.", "gold": "Please do not use wildcard imports."}
{"pred": "Shouldn't this be `L_DEBUG`?", "gold": "Not sure about these added logs, as said in the commit message it's probably not something we want all the time, but it helped me debug a bit."}
{"pred": "Why was this removed?", "gold": "Should there be an equivalent check or is it ok to remove this comparison?"}
{"pred": "This should be `readthedocs.org`.", "gold": "sorry, why this change?"}
{"pred": "Shouldn't this be `NamedList<?>`?", "gold": "I think best practice is to use `NamedList<Object>` as the return type, and `NamedList<?>` as the argument type in methods, but I can't find a reference for it right now."}
{"pred": "Should be `CouponCountryInterface`", "gold": "Be careful, the base model is imported here !"}
{"pred": "Why do we need to change this?", "gold": "Do we want to make this part of the default? Probably not. In fact, the default should probably be eth, web3 and net (which are the standard namespaces on other nodes)."}
{"pred": "Should this be `path_from_code_set_id`?", "gold": "What is the plan when we deploy the Crawler VM project and eliminate the Clump model?"}
{"pred": "Why is this being removed?", "gold": "these two are customized config fields, if we don't need them any more, we probably can use default ControllerManagerConfiguration"}
{"pred": "Why do we need to special case gc here?", "gold": "I don't think we should be pulling the runtime name from the Compiler. There are two compiler frontends, but both of them compile the same source to generate the \"go\" runtime. I think until there is a request from an alternative implementation (the embedded world **might** have a different runtime), it's fine to hardcode this as \"go\""}
{"pred": "Shouldn't this be `this.schema.discriminatorKey`?", "gold": "fields may be an object."}
{"pred": "nit: remove empty line", "gold": "i'm not confident these are the right defaults... anybody have input?"}
{"pred": "Shouldn't this be `DiskGroups`?", "gold": "DiskGroupList can be better name"}
{"pred": "`metricsHandler` is unused (from `structcheck`)", "gold": "nit: lets leave gateway options at the end of the func signature."}
{"pred": "Why did you change this?", "gold": "It will be better to use `commit()` on a separate thread, apart from the UI thread. The reason is `commit()` is synchronous while `apply()` is asynchronous. So in case it might not perform actions immediately as expected."}
{"pred": "Why do we need this change?", "gold": "Took me almost 4 hours to find this."}
{"pred": "Why did you change this?", "gold": "There should be only a single blank line between imports and `__all__`."}
{"pred": "Why did this change?", "gold": "Doc size increased by 1 since _root_ is also returned by queries."}
{"pred": "`np.argmin(np.abs(np.array(levels)-clmin))` -> `np.argmin(np.array(levels)-clmin)`", "gold": "Now the return value has changed (or at least now includes `clip`) it might be worth updating the docstring..."}
{"pred": "Why do we need to pass nil here?", "gold": "shadow: declaration of \"err\" shadows declaration at line 410 (from `govet`)"}
{"pred": "Shouldn't this be `&&` instead of `if`?", "gold": "Should we be escaping $attr and/or $value here? Seems like htmlspecialchars() might be in order to be on the safe side."}
{"pred": "Should this be `--quiet`?", "gold": "why not remove the need for the `quiet_o` method and just add it similar to how the `--branch` is added? also, looks like the indenting is a little off"}
{"pred": "Why are we removing this?", "gold": "These variables are already created in constants. Please reuse those."}
{"pred": "`query_args = query_args or []`", "gold": "query_args is a string, not a list. Therefore you cannot call append to it. Also, line 986-989 of key.py already have code that is appending the versionId query parameter."}
{"pred": "Shouldn't this be `return nil, err`?", "gold": "I think this change and the one below will break the integration tests which expect a `nil` object if `NewObject` fails."}
{"pred": "Why do we need this?", "gold": "Looks like this isn't used in this file?"}
{"pred": "Can we use `set_index` here?", "gold": "why hidden name? How about `index_name`?"}
{"pred": "Why not use `getHiveScanMode()` here?", "gold": "Usually, CQDs are not accessed directly in executor operators directly. It should be passed as a flag in the TDB. It is possible that the query is compiled in a different process, then this CQD setting won't be available in the executor layer."}
{"pred": "`shard.Context` -> `shardContext`", "gold": "This tag was broken, the value write to log was the memory address. Please verify that this actually write out meaningful content in log."}
{"pred": "Why do we need this file?", "gold": "Why do you have to disable all of these checks?"}
{"pred": "Shouldn't this be `objreg.last_focused_window()`?", "gold": "Just a note to myself: After merging this, I should edit the line after this one to use `message.error`, as raising a `CommandError` from here seems wrong!"}
{"pred": "Why was this removed?", "gold": "In this test, we want xax to be dead, so that aflags are not spilled to a slot."}
{"pred": "Why do we need this?", "gold": "I remember there were some misleading code about this but forgot to correct them. Although we initialize `config` here, it was discarded in `complete`, so I guess setting the default value here doesn't take effect. We should change L139-L140 as well to use the initialized `config`. So do antrea-controller."}
{"pred": "Layout/SpaceAfterComma: Space missing after comma.", "gold": "Stubbin a value object (like `RSpec.configuration`) is a bit of a code smell, I think. You can just set `color_enabled` and `success_color` through the configuration APIs provided by `RSpec::Configuration` -- no need to stub. The `sandboxed` thing in `spec_helper.rb` takes care of preventing changes to the configuration object in one example from leaking into other examples."}
{"pred": "Why do we need to replace `bitcoincash:`?", "gold": "you can use `toString(true)` that will work for BTC and remove the prefix for BCH."}
{"pred": "`persist_mode_on_change` -> `persist_mode_on_change`", "gold": "This line is too long now - please break it after the comma."}
{"pred": "Why do we need this?", "gold": "I find this addition to the interface a bit contentious. I think it would be cleaner to just return the response headers together with the new stream on `NewStream`. I.e. change the method signature for `NewStream` to be: `NewStream(ctx context.Context, overlay swarm.Address, headers p2p.Headers, protocolName, protocolVersion, streamName string) (p2p.Stream, p2p.Headers, error)`. I'd like to hear what other think. cc @zelig @janos"}
{"pred": "Shouldn't we throw an exception here?", "gold": "i hope there is some magic where isEmpty or some cron can strip all non listable products from cart, but since we have the situation tested it should be OK and also we'll see during tests"}
{"pred": "Shouldn't this be `daysFromDate`?", "gold": "I think we should check the type returned by `getLiteral` and handle that here. Then we won't need separate code for different versions."}
{"pred": "Should this be `composeX509SVIDResponse`?", "gold": "Tests for JWT handler functionality?"}
{"pred": "Why is this being removed?", "gold": "It's weird to set a 101 response and complete without writing anything, but this is still a valid test case right?"}
{"pred": "I think it would be better to use `self.assertIn('default_bucket', capabilities)`", "gold": "Should we move that information in the capability itself?"}
{"pred": "Why do we need this?", "gold": "Is this needed?"}
{"pred": "Shouldn't this be a warning?", "gold": "This log should not be an error as it communicates that we need to retry till we get the cert information for remote ingress controller."}
{"pred": "Why do we need this?", "gold": "BlockTree alredy has a polluted API, this one seems very internal"}
{"pred": "Why is this needed?", "gold": "Sorry, I realize my line numbers were probably off after you deleted your variables! I meant for this to go in the `before(:all) do` and `after(:all) do` blocks."}
{"pred": "Shouldn't this be `getQuery().getFields()`?", "gold": "This bit I wasn't really sure about."}
{"pred": "Why do we need to parse the checks here?", "gold": "From the code, a check's metatdata was only added to `axe._load` if a rule used it. Since `role-none` and `role-presentation` were no longer used in any rule, their metadata was never added. This caused any translation file that passed translations for those checks to fail `axe.configure` with > \"Locale provided for unknown check: \"role-none\"\" To fix I added this line to parse all checks regardless of if a rule uses it or not."}
{"pred": "`update_policy` doesn't seem to be used anywhere.", "gold": "We should raise `ValueError` if `update_policy not in ['existing', 'incoming']`. (or `in Enum.__members__` or however we want to express legal values)"}
{"pred": "`_window = window ?? UIWindow.Main;`", "gold": "`_applicationDelegate` and `_window` are already set in the call for `: this (applicationDelegate, window)`, no need to assigning them again here"}
{"pred": "Shouldn't this be `props.selector`?", "gold": "We might not have a selector prop in the consumer"}
{"pred": "`_blockTree.Head?.IsGenesis ?? false`", "gold": "IMO == true is more readable than ?? false"}
{"pred": "Why this change?", "gold": "feel free when editing sections like this to introduce modern features like object destructuring."}
{"pred": "# coding: utf-8", "gold": "I think the correct pragma is `# -*- coding: utf-8 -*-"}
{"pred": "I don't think you need the noqa here.", "gold": "This fixes some import errors, due to the fact that this file has the same name than its module."}
{"pred": "`hPreferredName` -> `hPreferredName`", "gold": "I think we need to clear this out on logout, and update it on login, right?"}
{"pred": "Shouldn't this be `if (name == NULL || *name == '\\0')`?", "gold": "I think normally we'd make this a precondition (using e.g. `g_return_val_if_fail`), but meh, this works too!"}
{"pred": "Why do we need to change this?", "gold": "Is this header used by other outside service?"}
{"pred": "Why was this test removed?", "gold": "that's fine by me to have simple test for provisioning check"}
{"pred": "`s.getCronExpression()` -> `s.getCronExpression()`", "gold": "These two methods seem to be identical except the names. Any idea why two methods are needed?"}
{"pred": "Why do we need this?", "gold": "I don't see much difference between this and `create_db` module. How about having a function with a `database` argument?"}
{"pred": "Why do we need the `analytics` prefix here?", "gold": "See above, no need to pass the module name."}
{"pred": "I don't think this should be changed.", "gold": "LightGBM supports multiple validation sets, so please leave `sets`."}
{"pred": "Why this change?", "gold": "you don't need to create a enum for this, java allows you to switch on a string ;) (since java 7?)"}
{"pred": "Why was this test removed?", "gold": "What is this obscure syntax anyway? o.O"}
{"pred": "Why do we need this method?", "gold": "I think we should have one for the CLA Classifier, and KNNClassifier as well. And how about RecordSensor?"}
{"pred": "Missing license header.", "gold": "Missing new line."}
{"pred": "`options.strictPopulate === undefined`", "gold": "`model.schema.base.options.strictPopulate != null`. Why hardcoding false? Also, `model.base.options` should work and be shorter. Finally, any way to move this up to the `populate()` function in `model.js` that calls `getModelsMapForPopulate()` and shallow clone the object before modifying? A bit random to modify this option here."}
{"pred": "Why are we using `Builders.Build.A` here?", "gold": "We now have Prepare.A/Build.A/Builders.Build.A - what are the differences?"}
{"pred": "Why do we need to strip backslashes here?", "gold": "Could you reduce this to one line and change the first argument to a single quoted backslash string? Perhaps we can add this as an option named `:preserve_backslash` to the manify method. That way, we don't need an extra method in the first two cases. Obviously, we still need it for the inline case."}
{"pred": "Why do we need this change?", "gold": "`has(default)` i think is the preferred way of doing this"}
{"pred": "`ManifestReader<DataFile>` -> `ManifestReader<DataFile>`", "gold": "Does this mean we can only do rewrites if there are no `DeleteFile`'s?"}
{"pred": "Black would make changes.", "gold": "Actually, these are fine; we're using 110 as the max line length. (it's also set in the .pylintrc)"}
{"pred": "nit: remove empty line", "gold": "No issue here, but what tool are you running to put these imports into the preferred organization? I have configuration to run `goimports` whenever I save a file, but it appears that that is not quite sufficient."}
{"pred": "who closes this stream?", "gold": "guessing this method could/should close it but I didn't see where it was getting called."}
{"pred": "Should this be `execution_source_id`?", "gold": "Could you please use `camelCase` in the property name to follow the naming convention used in the rest of the properties?"}
{"pred": "Why the space?", "gold": "Can we revert this change? looks like an extra space was added at the end  "}
{"pred": "Shouldn't this be `getVersionIndexFileImportName()`?", "gold": "This just grabs any one of the proto services defined in the API, right? What happens when there are multiple (like with PubSub)?"}
{"pred": "Why do we need to disable this?", "gold": "Remove the pylint disable and remove the .format() from the string. The tablename is just 'violations'"}
{"pred": "I think this should be `update_all(position: 0)`", "gold": "Will this implementation allow you to add new exercises to the trail?"}
{"pred": "Why do we need to do this?", "gold": "Actually there is race condition here, because pointer assignment isn't atomic on some platform. But this is a rare case we should hit, we can just let it go for now. Maybe this is one of the TODO list."}
{"pred": "I don't think this is the right place to do this. If we want to do this, we need to make sure that we have enough data for all of the parallel readers.", "gold": "We should check somewhere here and in the partitioned_io_buffer that the max_mini_batch_size is properly computed for each model and that it is not aggregate (sum) for all models. The global/max_mini_batch_size should be as specified by the user in the prototext/cmd line."}
{"pred": "Should this be `UNEXPECTED_ALERT_BEHAVIOR`?", "gold": "you can change the string value, but not the code constant"}
{"pred": "Why did you change this?", "gold": "File is not `goimports`-ed"}
{"pred": "Why do we need to add ExecMetrics?", "gold": "Is this Todo necessary?"}
{"pred": "Why did you remove the try/except?", "gold": "I would recommend to leave out `None` because None is already the default."}
{"pred": "`cli-input-yaml` -> `cli-input-file`", "gold": "I may have missed previous discussion on this; apologies if that's the case. What do you think about just `input-yaml`, without the `cli-`?"}
{"pred": "Why do we need this?", "gold": "Nit: rename to sendError."}
{"pred": "I think it would be better to use `warnings.filterwarnings(\"ignore\", category=FutureWarning)`", "gold": "`pylint` wants to know why this `import` isn't at the top of the file; and it's kinda right"}
{"pred": "Why do we need this class?", "gold": "To me, using a `RuntimeException` for this feels a bit weird. I would just extend `Exception`, or maybe even `IoException`. Could you also please overwrite the `getMessage` function to return something like `\"Result does not specify a feed url\"`?"}
{"pred": "Why do we need this?", "gold": "what was the issue here? why did you have to directly set?"}
{"pred": "`if len(country) == 0 {`", "gold": "I'm confusied - Isn't `countryString` left empty if `len(country)` != 0?"}
{"pred": "Why not `QOverload<int>(&QSignalMapper::mapped)`?", "gold": "Would you please update this by using `#if (QT_VERSION >= QT_VERSION_CHECK(5,15,0))` and `QSignalMapper::mappedInt` for Qt >= 5.15?"}
{"pred": "Why do we need to stop the agent here?", "gold": "This type of change opens a question on how we can cleanly shutdown or prevent all running agents so we do not run the risk of an agent holding kernel mountpoints, which can cause unsafe unmount/chroot exit. Will open a github issue to track this. This specific change itself is fine. It is a pointed change specifically for stopping the offending agent."}
{"pred": "Why do we need this class?", "gold": "this file is model generated by protobuf, just for compatible test it's better not change it."}
{"pred": "Why do we need to pass the `reason` to the `track` method?", "gold": "It turns out we can send the reason as the property to Segment on the event. Then we can do whatever we want with it. In this case, I think we'll fire a web hook to Zapier which will add a note or message on the user in Intercom."}
{"pred": "Why do we need this?", "gold": "This class is very similar to `Catalog`. Is there a way to have this class compose a `Catalog` instance or extract a common class which they can both compose?"}
{"pred": "Why do we need this change?", "gold": "Why did you decide to drop the `queue` from parameters of `wrap` function? The agreement was that all functions for DPC++ case that accept non-host-accessible memory shall accept the queue directly."}
{"pred": "This should be `add_setting :hyperlink, default: false`", "gold": "I think this is a bad name, as its not clear what it does by name alone. If we merge this it should be something like `use_links_to_files_in_output` and should take either a custom scheme like `rspec` or default to `file`"}
{"pred": "Why is this disabled?", "gold": "Arguably this is actually still valuable for perf, maybe it should just be a warning?"}
{"pred": "Shouldn't this be `s.Logger.Errorf`?", "gold": "didn't way say that the topology driver will actually insert the entries to the address book?"}
{"pred": "I don't think this is a compression of oldParentVNode!=null", "gold": "This seems safe to me. My guess is the original checks were a combination of before + after `oldParentVNode` became reliably a `(vnode | null)`."}
{"pred": "I think this should be `--filename` instead of `--filename-suffix`.", "gold": "also in the `.md` please."}
{"pred": "Shouldn't this be `el-4`?", "gold": "RHEL is an acronym and is usually all caps. Why are you adding a redhat regex matcher?"}
{"pred": "Why is this being removed?", "gold": "Maybe I am daft but it looks like you removed fixed width readers but I don't see where you added any readers?"}
{"pred": "Why do we need these constants?", "gold": "@acud The reason I moved these here is because I need them in the traversal tests. The traversal package doesn't need this. I don't see any particular reason why any package apart from api would need this. api package imports traversal, so I cannot import api in traversal pkg. Also if these change in future, the traversal tests need to change. So maybe enough reason to move these here? That way both packages can access these as they both depend on manifest"}
{"pred": "Why is this needed?", "gold": "I'd prefer this to be called `pinned` - also it should probably be in the `TabData` class instead, which is accessible as the `.data` attribute of the `BrowserTab` object - otherwise, `BrowserTab` would have a lot of quite \"random\" attributes :wink:"}
{"pred": "I think this should be called `sendCommandsForDownloadChromeHeadLess`", "gold": "Nit: `Headless` is one word, not two, and so doesn't need camelcasing in this way."}
{"pred": "I don't think we need `cleanupPlugins` and `runRules` anymore.", "gold": "Why not import audit as well?"}
{"pred": "`$categoryData->parent = $categoryElectronics;`", "gold": "OK, i think there will be more of those..."}
{"pred": "'failed'   => 'This credentials do not match our records. Please try again in :seconds seconds.',", "gold": "Can you add : 'password' => 'The provided password is incorrect.', ?"}
{"pred": "from comtypes.gen import *", "gold": "Extraneous blank line."}
{"pred": "`axe._tree[0]` can be removed now.", "gold": "nitpick: use `const virtualTree`, I know it was `let` earlier."}
{"pred": "nit: typo in \"equipped\"", "gold": "Actually, I think it might be easier to do it here. Rough outline: 1. Save a list of the md cache keys and new brmd while looping. 2. After the loop, for each entry: 2a. Look up the old cache entry. If it doesn't exist, continue. 2b. Otherwise, make a deep copy of it, and replace its brmd with the newly-generated one. 2c. Delete the old cache entry, put the new cache entry. What do you think? The problem with the current approach is that the gap between dropping the old version and putting the new version is large enough that when we put the new version, we may be kicking out hotter cache entries. In this case, we'd be doing so to a lesser extent. Ideally, we'd be able to replace the entry in the MDCache LRU without changing the LRU info."}
{"pred": "nit: space after `if`", "gold": "We need tests for this"}
{"pred": "Shouldn't this be `config := otlp.WithInsecure()`?", "gold": "NewExporter takes in two arguments: a configuration for the metrics connection and one for the traces"}
{"pred": "Why do we need to convert to ms here?", "gold": "Why not use currentPlayer instead of playbackManager.getCurrentPlayer()?"}
{"pred": "Align the parameters of a method call if they span more than one line.", "gold": "Avoid comma after the last parameter of a method call, unless each item is on its own line."}
{"pred": "nit: `DataDirOnHost is the directory in the instance ...`", "gold": "You should remove the outdated sentence."}
{"pred": "nit: `STATE_KEY_FIRST_TIME_EMPTY_SUBJECT = \"firstTimeEmptySubject\"`", "gold": "Please restore the empty line after the group of `STATE_*` constants. This visual separation makes the code easier to read."}
{"pred": "`[RestoreFiles] removed ${successful.length} files that finished uploading`", "gold": "Unsure why this is `RestoreFiles` now vs `GoldenRetriever`, thought we deprecated the first?"}
{"pred": "nit: `var width = flowFileStatus.VerticalScroll.Visible ? SystemInformation.VerticalScrollBarWidth : 0;`", "gold": "Not sure what this is. Bad merge?"}
{"pred": "Same as above RE: segfault possibility", "gold": "I'm confused, what did this actually fix? Is there a reason we are setting `err` in the parent scope to `nil` in this round-about way?"}
{"pred": "Why do we need this test?", "gold": "Can we remove this   ?"}
{"pred": "I don't think we need a separate controller for this, since it's only used in one place.", "gold": "Put a comma after the last parameter of a multiline method call."}
{"pred": "`tsf5` -> `tsf6`", "gold": "line is 195 characters (from `lll`)"}
{"pred": "nit: remove empty line", "gold": "could not import k8s.io/kubernetes/pkg/util/slice (invalid package name: \"\") (from `typecheck`)"}
{"pred": "Why this change?", "gold": "@disordinary would you be able to configure your editor to use the `.editorconfig` file so that we can avoid final newline changes?"}
{"pred": "Shouldn't this be `item.toJSON ? item.toJSON(index.toString()) : item`?", "gold": "I really think we should not use this style where unused arguments are named with underscore. While this eases the person writing the function it does it at an expense of readability and debugging. So next person who needs to actually use this argument will need to check the spec and rename this to `obj` and then use it or if he is debugging it he will is not able to watch for a meaningful variable name and will need to inspect `_` which is weird and uncomfortable. We have not used this style anywhere in the code while I agree its very tempting to use it :)"}
{"pred": "This should be `new ExLobGlobals(nullptr);`", "gold": "Thanks for avoiding the default value for the param. But, I think sending heap as NULL might make this program to fail. Have you tested this program? If you have tested this program already, then this PR is ready to be merged."}
{"pred": "Why do we need this?", "gold": "Don't make it sealed"}
{"pred": "Why do we need this?", "gold": "Did we miss that for jwt before?"}
{"pred": "I think this should be `PinSERCOM`", "gold": "It appears that using SERCOM1 was a bug: the only SERCOM that is supported on the TX/RX pins is SERCOM0. Previous UART support wouldn't have worked on the Trinket M0 TX/RX pins anyway (`PA06`/`PA07`). This PR fixes that, and should thereby add support for UART on the Trinket M0."}
{"pred": "Shouldn't it be `ar` instead of `ar`?", "gold": "Spaces for indentation, not tabs"}
{"pred": "nit: `global_index_range_.emplace_back(global_index, final_index);`", "gold": "doing this as a binding map was insane, but with the ConstBindingIterator to hide the binding->index gunk and avoid the hashes during access it sticks out."}
{"pred": "E225 missing whitespace around operator", "gold": "nitpick: I'd rather move this into the test method directly (we should avoid variables at the root scope if they are not reused in multiple places). (not critical, though - shouldn't hold back the merge..)"}
{"pred": "why do we need this?", "gold": "You should do: AssertEx.AreEqual(importPeptideSearchDlg.CurrentPage, ImportPeptideSearchDlg.Pages.match_modifications_page);"}
{"pred": "Why do we need to check if the summary is null?", "gold": "SC support batch register schemas we should swtich to new api be careful that maybe will send too big request, need to split to multi request by max size of limit."}
{"pred": "Should this be `1.15`?", "gold": "At this point, maybe it would make more sense to write this as a range rather than listing specific versions?"}
{"pred": "I don't think this is the right place to put this check. If the backendErr is canceled, we should just return it.", "gold": "I guess we can start by putting the `const StatusContextCancelled = 499` at the bottom of this file"}
{"pred": "Why is this nil?", "gold": "Blocking: populate a non-empty value and check it below."}
{"pred": "I'm not sure if this is the best place to put these permissions. I think it would be better to put them in the `ImageManagementPermission` class.", "gold": "What is this number value for? How is it used?"}
{"pred": "why is this needed?", "gold": "This needs an end keyword"}
{"pred": "Why do we need this? Can't we just use `DependencyTelemetryData` directly?", "gold": "I think this is the first record type in Datadog.Trace!  "}
{"pred": "Why did you remove the else?", "gold": "Nit: missing newline above."}
{"pred": "nit: `asap` -> `asap`", "gold": "Since it's a one-off, worth putting an info log before and after."}
{"pred": "I don't think you need the `forEach` here.", "gold": "I'm sorry, but the indentation is still wrong. This should be indented by one tab."}
{"pred": "This should be `self._sdf.dtypes`.", "gold": "can we add an example?"}
{"pred": "I don't think this is the right place for this check. I think it should be in `getExtendedIdentify`.", "gold": "We usually avoid blank lines at the start of functions."}
{"pred": "Why do we need this method?", "gold": "I dont think this line is needed"}
{"pred": "nit: `glog.Fatalf(\"invalid feature gate value for %s only boolean values allowed\", util.CASTemplateFeatureGateENVK)`", "gold": "We should not panic here !!! We return error i.e. 500 http code"}
{"pred": "\"The resulting PCAP file\" -> \"The resulting PCAP file\"", "gold": "To avoid useless calls to `conf.l2types.get()` we could have a `set()` of types that are OK in this PCAP files. We could check if `p.__class__ not in self.l2_types_seen` first, only run this code block in that case, and add `self.l2_types_seen.add(p.__class__)`. I'm not sure if I'm clear here... let me know what you think."}
{"pred": "nit: `from where flow execution is triggered`", "gold": "Shouldn't \"source\" be a noun? How about? -EXECUTION_SOURCE_USER -EXECUTION_SOURCE_SCHEDULE -EXECUTION_SOURCE_EVENT (because it's an event based trigger mechanism)"}
{"pred": "Why do we need this change?", "gold": "Should not switch to `lvis_v1_instance` here because that base config uses ClassBalancedDataset to oversample the data."}
{"pred": "Why is this change needed?", "gold": "Last time I checked, this technique did not work on all major screen reader - browser combinations. What screen readers have you tested?"}
{"pred": "Why do we need this?", "gold": "Most tracer settings can be set in several ways: environment variables, `app.config`/`web.config` file, or in a json file (`~/datadog.json` by default). Most exceptions to this rule are settings in native code (where we use env vars only). Currently, `DD_TRACE_ASPNET_ROUTE_TEMPLATE_RESOURCE_NAMES_ENABLED` will only work as an env var. Was this limitation intentional?"}
{"pred": "nit: `// NoIID when set to true, specifies that the agent should not register the instance`", "gold": "Would \"DisableIID\" be a better name? For example, we used DisableMetrics, ImageCleanupDisabled, ... etc. for other similar fields."}
{"pred": "Shouldn't this be `DYNAMO_OPTION(max_bb_instrs - 1)`?", "gold": "So this is a swing of 2: but I think we only need to reduce by 1? The artificial jump added on truncation is not passed to clients: it's like other mangling added later. So if `-max_bb_instrs 4` means 4 app instrs passed to clients, we'd want ==, not ==-1, right? Plus, if we did want -1 and to stop at 3 instead of 4, this is not sufficient: the inner loop above currently has `total_instrs <= cur_max_bb_instrs`."}
{"pred": "Why is BOOLEAN added here?", "gold": "Does Tinyint belong to this set of types? I suppose the answer is No, but thought it safer to check."}
{"pred": "Why not use Blockly.utils.mouseToSvg?", "gold": "I'm a bit leery of this implementation, because it assumes that the only \"outside\" is to the right side. Note that Blockly assumes that there's nothing useful to the \"outside\" of the toolbox, based on the configuration of the workspace, so it's not like we're doing the right thing either. I think this will break in RTL. If you keep the editor in the same place but inject with RTL, everything you're looking for will be in the delete area. If the editor and stage swap places, this will just be looking on the wrong side."}
{"pred": "nit: `NatPortRange` -> `NatPortRange`", "gold": "Just spotted the `local` on here; that shouldn't be needed - no reason to limit this config to env vars only"}
{"pred": "Why did you remove the `auto` here?", "gold": "That's a tricky one, as the variable is indeed used in line 2346, which is a `logInfo` message that is not compiled unless `INTERNAL_DEBUG` is set or `CMAKE_BUILD_TYPE` is set to `Debug`. Our CI builds with `INTERNAL_DEBUG` to verify that all `logInfo` are correct, and thus we don't get the warning. The best is probably to remove the iterator (as you did), as well as the part of the log that uses it."}
{"pred": "Shouldn't this be `ififf = conf.iface or network_name(conf.iface)`", "gold": "I suspect L2Socket needs a similar change (line 502) for the case where `iface` is None (line 479)"}
{"pred": "Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.", "gold": "Was this all that was needed to add CRUD operations for the LicensePermission model? :-)"}
{"pred": "why not `bundle.name == addon.manifest['name']`?", "gold": "Did you look for other locations that compare name? I expected there to be more."}
{"pred": "Why is this needed?", "gold": "There were some requests internally to allow users to opt out of this behaviour. We could expose a property that allows people to toggle ti"}
{"pred": "why do we need this change?", "gold": "Nice -- this forced `merge-on-getReader/commit` to be used more often in this test?"}
{"pred": "`SupportAssetsPrecision` -> `SupportAssetsPrecision`", "gold": "Instead of a `bool`, can we just call this `MaxAssetDecimals` and have it be a `uint8`/`uint16`/`uint32` whose value is 0 before the upgrade and 19 after (2**64 - 1 is 20 decimal digits)? We'll need to set a maximum value anyway, and that way there's only one new proto variable instead of two."}
{"pred": "`if (!\\in_array($sortFieldParts[0], $aliases)) {`", "gold": "where `$aliases` is defined ? @javiereguiluz"}
{"pred": "Why is this being removed?", "gold": "what is the justification for the removal of the registered label? it doesn't seem to have high cardinality nor is it redundant. Seems useful to shed insight into understand situations where workloads aren't registered...."}
{"pred": "Why is this not implemented?", "gold": "`ctx` is unused in ListEvents"}
{"pred": "This should be `4.0.2 community`", "gold": "We've had that test on iOS for years."}
{"pred": "Why is this needed?", "gold": "This is for creating binlog file for building bdn generated template project. I feel that it's may be helpful in general for bdn diagnostic purpose."}
{"pred": "I don't think you need the `*` here.", "gold": "Can you adjust `open_path` to simply call `path_to_url` and then `open_url` instead of duplicating the code?"}
{"pred": "Why is this 10 seconds?", "gold": "I'm curious -- do we have information on the upper bound of the delay we would expect with high probability from a peer with no network issues? My intuition is that we want to set this as low as we can reasonably get away with before we start killing productive connections. My uninformed intuition is also that 10 seconds is probably higher than we need and I'd love to know if this is wrong and 10 seconds is already pushing the limit."}
{"pred": "Shouldn't this be `shiftAmountInt < 0`?", "gold": "what happens if it's == 0"}
{"pred": "Why was this removed?", "gold": "We could potentially log a message here instead that indicates the transport does not support `run-as` on Windows and will be ignored, just in case users expect it to and are surprised. Since it would _always_ be logged when using `--run-as` on Windows, even when the transport isn't being used, it would probably want to be either at debug or trace level."}
{"pred": "Why this change?", "gold": "Did we need this alias? Or is it just a holdout from development?"}
{"pred": "Should this be `org.id.to_s`?", "gold": "This should have failed before."}
{"pred": "Why not use `RegexOptions.Compiled` here?", "gold": "Slower construction, faster matching. I wonder if this will be noticeable in the relenv?"}
{"pred": "This should be `C_GREEN`, not `C_RED`.", "gold": "I think that if `data_discovery_count_ > static_cast<int>(throughput_publisher_.subscribers_)`, then we should not proceed, since we have discovered some unexpected subscriber that can affect the test results. I'd change the comparison to `==` and have and `else if` contemplating the `>` case"}
{"pred": "Why is this header needed?", "gold": "Remove that include"}
{"pred": "`sprintf('%s-%s-form', $options['view'], $options['entity']),`", "gold": "IMO this should be defined in the form theme instead. This class should always be there. If the user configured additional css classes, it should be appended instead of replacing the `{view}-form` css class."}
{"pred": "`JSONObjectHelper` is not used", "gold": "These tests actually go to the server."}
{"pred": "Why do we need this?", "gold": "This test modification isn't correct. This task could run immediately and you wouldn't be able to tell if OnCompleted was called or not."}
{"pred": "Shouldn't this be `component.constructor.getDerivedStateFromProps === undefined`?", "gold": "I'd be open to loosening this check if it can help offset the size."}
{"pred": "I don't think you need the `_` here.", "gold": "I'm wondering which we should use, stable or latest?"}
{"pred": "Why do we need to change the base class?", "gold": "possibly extending EncodingType enum?"}
{"pred": "Use the new Ruby 1.9 hash syntax.", "gold": "I tested it only in Firefox (`./go //rb:firefox-test`)"}
{"pred": "Why do we need the `IProviderContainer`?", "gold": "can we do this in the baseexporter itself? So that exporters just access this.Provider.Resource, and baseexporters take care of populating Provider?"}
{"pred": "Shouldn't this be `countly.events`?", "gold": "what is the difference between `/core/events/javascripts/countly.views.js` and `/core/events/javascripts/countly.events.views.js`"}
{"pred": "this should be `options.iframes = true;`", "gold": "We should make sure this is also supported by `axe.run`. Perhaps moving it into run-rules would cover both API methods more easily?"}
{"pred": "`_bump_and_store_timestamp` -> `_set_record_timestamp`", "gold": "If the `MemoryBasedStorage` relies on a `self._bump_and_store_timestamp()`, then every child class will have to implement it. So it should not be prefixed with `_`. And should raise `NotImplementedError` etc. :)"}
{"pred": "Why was this removed?", "gold": "why removed the MemoryDiagnoser attribute?"}
{"pred": "`localFieldPath ? localFieldPath.getters : []`", "gold": "Why do this instead of `localFieldPath.applyGetters(doc[localField], doc)` ?"}
{"pred": "Why was this test removed?", "gold": "Just for a check. Do you really want to delete this?"}
{"pred": "nit: remove empty line", "gold": "github.com/golang/protobuf/proto group in next group"}
{"pred": "I think this should be `paymentChannelCmd`", "gold": "Nit: what about just `pay`? Is there some other subcommand that would conflict with?"}
{"pred": "Shouldn't this be `inputValue.startsWith(\"0x\")`?", "gold": "Just for the sake of keeping things logically co-located, I'd like to see this functionality in `Quantity.java` which has a lot of utility methods related to this. Maybe a `static` method like `Quantity.isValid(String string)`?"}
{"pred": "why do we need this?", "gold": "How about use `protected` ?"}
{"pred": "Why do we need this special case?", "gold": "Should it not be `common.HashLength*2 + common.IncarnationLength` ?"}
{"pred": "Why is this change needed?", "gold": "those change are done by save plugin."}
{"pred": "Why is this needed?", "gold": "There were problems with NullPointerException and with german Umlauts in message titles (I know they're not allowed in the specifiation but they caused my K-9-Inbox to not work at all) I don't know if this is related to PGP/Mime"}
{"pred": "Why do we need this interface?", "gold": "This is an appsec concept right? Should it live in the Appsec namespace?"}
{"pred": "This should be `WriteRegister(0x09, 'o', version)`", "gold": "I'd personally recommend having the demo check for error, unless it's worthless."}
{"pred": "Why are we changing this to `finer`?", "gold": "Since this is in a test, I imagine that the choice of `info` level was deliberate."}
{"pred": "Why do we need `toArray` here?", "gold": "good call swapping these names! makes more sense this way i think"}
{"pred": "Why do we need to check for `null` here?", "gold": "Maybe leaving this out will save some bytes as in let `let isHydrating = replaceNode === null`"}
{"pred": "Why do we need this?", "gold": "Let's manually create one extra whitespace line here (code_ += \"\")"}
{"pred": "Why do we need a copy here?", "gold": "nit: copy or clone"}
{"pred": "I don't think this should be a method on the `Document` interface. It should be a method on the `Fields` interface.", "gold": "I think this can be called `HasField`, because that's what it's doing. It really is independent of revision."}
{"pred": "Please don't use star imports.", "gold": "Is this to avoid collisions?"}
{"pred": "Why do we need to change this?", "gold": "nit: a better name for this variable would be enableLogStats, but it's beyond the scope of your change."}
{"pred": "Why is this removed?", "gold": "Because linters don't handle reports now, this was breaking the setup for _all_ tests. I deleted it so I could run my tests, but I didn't check the impact on other tests as many tests are failing at the moment."}
{"pred": "Why do we need this check?", "gold": "I'm not really a fan of this -- why not set up logging for `init` here (or setting a global flag) rather than doing it this way?"}
{"pred": "Do we need to export `doT` and `emojiRegexText`?", "gold": "This is my favorite part of this PR. Being able to `import` 3rd party tools will hugely improve our workflows. :heart:"}
{"pred": "Why do we need this rule? Isn't `UnsynchronizedStaticFormatterRule` enough?", "gold": "having this extend `UnsynchronizedStaticFormatterRule` seems semantically incorrect even if it works  we should probably refactor `UnsynchronizedStaticFormatterRule` into a `UnsynchronizedStaticAccessRule` which can be configured through properties to track unsynchronized static access to any given types (with proper defaults to include `Formatter` and `MessageDigest`). This will also scale better as new types are suggested to have a thread-safe access enforced. The `UnsynchronizedStaticFormatterRule` can be marked as deprecated at the ruleset level, point to the new implementation, overriding the property defaults to keep just looking for `Formatter`. Moreover, the `THREAD_SAFE_FORMATTER` static should probably be replaced with a property of thread-safe classes to ignore, once again with proper defaults."}
{"pred": "`Keccak.Zero` -> `Keccak.Zero`", "gold": "Keccak.Zero should not be used to mean null"}
{"pred": "nit: `InvalidHistogramBounds => new object[] { new double[] { 0, 0 } },`", "gold": "perhaps add a couple more edge cases."}
{"pred": "`bit_flag with value (1u << 1)`", "gold": "Is this blank line needed, or typo?"}
{"pred": "Why is this removed?", "gold": "This was a major PitA to find: it was causing some huge goroutine leaks and unfinished prefetches."}
{"pred": "You can use `map!` here.", "gold": "you can use Enum#flat_map here."}
{"pred": "Why is this needed?", "gold": "Same potential FP: The stream is provided from outside (here as a method parameter), so we should not be responsible here to close it, should we?"}
{"pred": "Style/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.", "gold": "Put a comma after the last parameter of a multiline method call."}
{"pred": "nit: `invokeMember(\"install\", container);`", "gold": "It seems like this is the only way to access javascript `static` methods from Java."}
{"pred": "Why was this removed?", "gold": "Why was this removed here?"}
{"pred": "Why is this removed?", "gold": "i am aware that you did not add these, but might i ask why we need these one-liner funcs instead of just exporting the struct fields in the first place?"}
{"pred": "Shouldn't this be `TypeUtil.project`?", "gold": "I agree with this because it is the opposite of `GetProjectedIds` used above."}
{"pred": "`ebsOptimized` -> `ebsOptimizedProductCodes`", "gold": "add 'sriovNetSupport' also to this list"}
{"pred": "Shouldn't this be `accountsInOrder.remove(newAccount)`?", "gold": "Code style issue: `if` body is not wrapped in braces."}
{"pred": "`adapter.addAll(result);` -> `adapter.addAll(result);`", "gold": "Call requires API level 11 (we are on 10)"}
{"pred": "Why do we need this change?", "gold": "do we need to pass the DB if it is the same"}
{"pred": "I don't think this is the right thing to do. If the op is a gcOp, then it's not a chainOp, so it's not a chainOp. It's not a chainOp, it's a chainOp.", "gold": "Might be a good idea to rename the variable so it doesn't shadow the type."}
{"pred": "Why do we need `WITH RECURSIVE` here?", "gold": "Again I'd prefer if this is done in JavaScript rather than in SQL."}
{"pred": "`for a detailed` -> `for detailed`", "gold": "there is still `2` spaces after `a` here.. :P"}
{"pred": "Why do we need to check for `bind` here?", "gold": "What we did in docker before, when working directly with libcontainer, is check if the source is `/dev` and the destination has a `/dev/` prefix. This implementation is probably ok. If someone is mounting their own `/dev` I would expect it to be pre-configured and not need the extra check for if it's the host's `/dev`. (that said, I've not tested yet, just reading through the code)"}
{"pred": "I don't think we need a separate flag for this. We can just use `FF_JAVA_SELF_EXEC`.", "gold": "you should add some help on the struct too so that `plz halp featureflags` has a bit of explanation. Might be worth mentioning that these generally won't remain around very long relative to other config options (i.e. they're typically enabling \"preview\" features for the next major)."}
{"pred": "receiver not used", "gold": "Maybe `consumerID, receiverID, issuerID`, at least it's a convension in overal repo"}
{"pred": "nit: `s3blob registers for the \"s3\" protocol.`", "gold": "Where does the auth go?"}
{"pred": "Why not return `ErrUnderpriced`?", "gold": "0 < minimum gas price, `ErrUnderpriced` is more proper"}
{"pred": "Black would make changes.", "gold": "these should be alphabetized"}
{"pred": "nit: `typeWidth` -> `width`", "gold": "These changes look concerning. It looks like the old offset (only index) must not have been correct. If so, there are places where `getDataBuffer().setLong(...)` and similar methods are called but aren't updated like these. Are those cases bugs as well?"}
{"pred": "Why do we need this change?", "gold": "the CAS call here is now wrong since dirty will never be 3 anymore. it might be useful to sweep through the entire usage of this field to see that everything is correct"}
{"pred": "Shouldn't this be `BaseCountryQuery`?", "gold": "Base model is imported here"}
{"pred": "Why is this import needed?", "gold": "import but not used"}
{"pred": "`typeWidth` -> `dictionaryEncodedValuesReader.getTypeWidth()`", "gold": "What about the call in `case PACKED` just below? Does that also need to use the `typeWidth`?"}
{"pred": "`serializedDataSize` is unused (from `deadcode`)", "gold": "not sure i like this change. The encryption package does not need to know about references"}
{"pred": "this is what is shipped with ubuntu bionic llvm-7 package right now", "gold": "This shouldn't be added. It's not supported. It's not event the default. If we are going to support this, we need to have CI for it."}
{"pred": "Why was this removed?", "gold": "omg only four left!!!!"}
{"pred": "I don't think this is the right error message. It should be something like: \"Unknown consensus protocol %s\", consensusCurrentVersion", "gold": "I'm not really sure how this would happen. once the binary is already compiled, the config.Consensus should already have the entry for protocol.ConsensusCurrentVersion."}
{"pred": "`luigi.run(args + ['--local-scheduler', '--no-lock'])`", "gold": "Is there a reason for the order swap here?"}
{"pred": ">NoDotnetDotExeFileExist [](start = 38, length = 22) Is this a typo?", "gold": "Where will this exception get caught ?"}
{"pred": "`KS` -> `KeyStore`", "gold": "Why this field is made public?"}
{"pred": "vmultiplier -> vmultiplier_p", "gold": "Is the `vmultiplier` only used here for checking if a grid value is nodata?"}
{"pred": "Why is this change needed?", "gold": "Is this deliberate? If so, why?"}
{"pred": "`mappping` -> `mapping`", "gold": "both URL works. I corrected it anyway."}
{"pred": "`PrePostAdviceReactiveMethodInterceptor` -> `PrePostAdviceReactiveMethodInterceptor`", "gold": "Rather than have another member and and if/else statement, if the user passes in `PreInvocationAuthorizationAdvice` it could be adapted to match `PreInvocationAuthorizationReactiveAdvice`"}
{"pred": "Shouldn't this be `string[]`?", "gold": "The callback get the log level as a number."}
{"pred": "This should be `ldap3>=2.2.0, <2.2.1`", "gold": "Is there any issue with 2.2.3? If not this should be `<2.3`.  "}
{"pred": "Why was this test removed?", "gold": "Shall we keep this test?"}
{"pred": "Shouldn't this be `if (class_exists('TYPO3\\\\CMS\\\\Backend\\\\Form\\\\Element\\\\SelectElement'))`?", "gold": "When would this be the case? / When would SelectElement not be available? Is this change compatible with 6.2? (I'd like to roll a release that works with 6.2+ first, before moving on to 7.x)"}
{"pred": "why do we need this?", "gold": "how about rename to shouldNarrowDataTypeTo?"}
{"pred": "`if len(Store.renderers) == 1`", "gold": "Why not check that the one available renderer is 'bokeh'?"}
{"pred": "`ErrOverflow` is unused (from `deadcode`)", "gold": "Can you import `bundler.ErrOverflow` rather than redefine it here?"}
{"pred": "Shouldn't this be ResourceReferenceTreatment?", "gold": "This is just a renaming of the function getResourceType() to getResourceReference()"}
{"pred": "Shouldn't this be `/^'#{hostname}'/`?", "gold": "Seems like this might need to allow for `\"`s to be used here?"}
{"pred": "`combatPtr` -> `combat`", "gold": "here you assigning it to a local variable, in the original code it assigned to combat(CombatSpell member). Not sure if CombatSpell needs to use a shared_ptr since currently it does not and it works \"good\"."}
{"pred": "Why was this removed?", "gold": "Should we also remove this? This applies to subscriptions in general, but it seems sort of weird in the context of products now."}
{"pred": "Why was this removed?", "gold": "I think we should keep these, o.w. our examples will be wrong (where we're importing from `dagster.utils`). Also, we might break folks who've imported following our docs."}
{"pred": "Does this need to be public?", "gold": "This is good and something that I think opens a lot of possibilities. I think what would be even better is to change up `TracerProviderSdk` to take factories for the processors just like it already does for the instrumentations. Should probably use use a factory for the sampler. If we made those 2 changes then we could actually split this all up into the config and the build phase and we could use the factory methods in the hosting version to call into the IServiceProvider to get those instances."}
{"pred": "Shouldn't this be `flux.SemanticType(nil)`?", "gold": "Is there a way to make it so `values.New(nil)` works instead of adding a new function?"}
{"pred": "Please use `method_exists` instead of `method_exists`", "gold": "> when requirement of Symfony **will be** >= 2.8 Same for others."}
{"pred": "Why do we need this?", "gold": "I'd like to see if this can just be set on the service account instead of the project. Using the SVC_ACCT_ROLES (which should otherwise be deleted as I don't think anything else is using it.)"}
{"pred": "This import is unused.", "gold": "Please remove the unused imports :)"}
{"pred": "Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "Were these local edits? There doesn't appear to be a change here. If so, let's remove this from the commit."}
{"pred": "Why is this needed?", "gold": "nit: this should be further down w/ the rest of the github imports"}
{"pred": "Shouldn't this be `@subscription.next_payment_amount * 100`?", "gold": "I don't know if this is something we should address now, but we have a cents_to_dollars private method in both `SubscriptionCoupon` and `Invoice`."}
{"pred": "Why do we need this change?", "gold": "Formatting here and all below: missing space before open bracket for the compound statement."}
{"pred": "Why was this removed?", "gold": "Avoid using old mortbay utilities for converting JSON. Uses existing Solr Utils to convert from JSON string."}
{"pred": "Shouldn't this be `CommandCommand`?", "gold": "I actually think this wrapping is great, but let's call it `RunCommandOperation`?"}
{"pred": "Shouldn't this be `handler.GenericErrorPage = where`?", "gold": "Maybe it is better to add checking for status code duplications? It can prevent some stupid copy-paste user errors."}
{"pred": "Line is too long. [81/80]", "gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping."}
{"pred": "I don't think this is the right way to do it. I think it would be better to use `opnd_create_base_disp` instead.", "gold": "This lea should match instr_check_xsp_mangling and be undone. I don't think i#3307 applies here."}
{"pred": "Why do we need this interface?", "gold": "I like the idea of this being an interface as it makes the test setup a bit easier, thoughts?"}
{"pred": "`pubkey_hexes` -> `pubkey_hex`", "gold": "Nit: I believe the electrum convention is to use `bfh` instead of `bytes.fromhex`. Great catch on this bug!"}
{"pred": "I don't think we should be raising an exception here. If the field does not exist in included fields, we should be returning None instead.", "gold": "Use a more granular error type. I would recommend `ValueError` in this case."}
{"pred": "Shouldn't this be `if (!g_events->eventPlayerOnTradeRequest(player, tradePartner, tradeItem))`?", "gold": "A space after each argument, and an empty line above this if-statement."}
{"pred": "Why this change?", "gold": "Things like this make me wonder whether we should ship a \"development\" and a \"production\" version. I remember the discussions about making things more complex bundling wise but couldn't we omit this line in a \"production\" or \"minimal\" variant of our build? That would save us some bytes here and there. Or are we somehow able to move this line to debug? I though about monkey patching the exported function but that only works in CJS and not ESM AFAIK."}
{"pred": "Why do we need this?", "gold": "Maybe rename to `RegisterListener` or `RegisterSubscriber`?"}
{"pred": "Why is this change needed?", "gold": "My one concern here is that we are adding a new array allocation for each depth of the tree which could add some non-trivial GC churn. Perhaps this would be okay if we think that refs are used through a tree commonly enough such that they'll get allocated anyway but I'm not sure refs are *that* often used. Every app has a couple, but probably not at every level of their app :/ So maybe the extra bytes are worth it in this case? Though I have no data to back up my hypothesis so I could way off lol."}
{"pred": "Style/PercentLiteralDelimiters: %i-literals should be delimited by [ and ].", "gold": "We should get rid of this big array and think about a better way to check this."}
{"pred": "I don't think this is the right place to cache the view model instance. It should be in the `FragmentHostRegistrationSettings`.", "gold": "Should we cache the result of `Mvx.Resolve<IMvxChildViewModelCache>()` to avoid a lookup each time?"}
{"pred": "This should be `exc_info=True`.", "gold": "If you get to this line avg_size_of_message is an undefined value, yet you use it below. You you should set this value to something in the exception block."}
{"pred": "Should this be `/debug/pprof`?", "gold": "let's just fold this inline in mux.go, no need for the indirection to this new file"}
{"pred": "This import is unused.", "gold": "This bit confused me just now as I was reading through -- turns out this is due to the `{@link}` on line 316. Reading up on this, the alternative seems to be to state the fully qualified name instead. Happy to edit if requested as I don't have a strong view either way (perhaps a small leaning towards keeping the import)."}
{"pred": "Please remove the `System.out.println`", "gold": "There's a unnecessary System.out."}
{"pred": "Shouldn't this be `c.serviceGatewayFlow(gatewayConfig.IPv6)`?", "gold": "Should we add the flows only when NodePort is enabled?"}
{"pred": "Why did you change this?", "gold": "ITYM to flip this one..."}
{"pred": "I think this should be `plugin:eslint:recommended`", "gold": "What's the difference between typescript-eslint/eslint-recommended and typescript-eslint/recommended? I really can't get it."}
{"pred": "nit: `suspicious packet` -> `suspicious packet`", "gold": "Thinking: Maybe it would be more useful to define this in terms of RTTs. That would also make it easier to switch this to a bool, since we could then pick a reasonable default value. Unless of course an attacker could influence our RTT estimate. Is that the case?"}
{"pred": "Why remove this?", "gold": "Why is this line deleted?"}
{"pred": "`bootstrap_weight_max_blocks` is a `uint32_t`, so `block_count (transaction)` should be `uint32_t`.", "gold": "minor type `boostrap`"}
{"pred": "Why do we need this class?", "gold": "Nit: please don't separate imports into groups."}
{"pred": "Why do we need to set the selected element to null here?", "gold": "Thinking if it would be nice to have something like `setNothingSelected`."}
{"pred": "Why this change?", "gold": "I think this is a useful InfoLevel message. In production, if webhook client connections suddenly start failing due to change of serving cert, you'd want to see this information in the logs."}
{"pred": "Why do we need the `folly::to` here?", "gold": "Generally, if cast from int to char*, you could cast directly. Because no errors should happen."}
{"pred": "Why do we need this?", "gold": "Is 10 min too long? What do you think about 1 minute? Unless there are many jobs in this state, I don't expect the CPU overhead to be too high."}
{"pred": "Why did you remove the pointer here?", "gold": "can you remind me why we keep the pointer if it's a `map[string]<PStruct>`? are there other scenarios where the pointer is kept?"}
{"pred": "Why do we need this change?", "gold": "Would it make sense to also add `setMaxParallelism` in addition to this to match the Flink API?"}
{"pred": "Why do we need this?", "gold": "Not needed for actions. `_super(...arguments)` is only needed when you're extending from a base class and want to run the logic in the base class before your own logic"}
{"pred": "Shouldn't this be `vnode && vnode._hydrating === true`?", "gold": "I still need to run this code to verify my understanding, but my first reading through makes me think this may need to be `suspendingComponent._vnode` since we set `vnode._hydrating` on the vnode that threw the error (diff/index.js:275), not on `Suspense._vnode` (though we could in Suspense's `_catchError` implementation at the top of this file)."}
{"pred": "I don't think this is the right way to handle this. If the path contains characters that the locale cannot handle, then we consider it as non-existent. If it contains characters that the locale cannot handle, then we consider it as non-existent.", "gold": "I think it's a good idea to log this as debug, the same way the other branch gets logged."}
{"pred": "Why did you change this?", "gold": "1:D100: Docstring missing 35:D101: Docstring missing 37:D102: Docstring missing 42:D101: Docstring missing 44:D102: Docstring missing 57:D102: Docstring missing 66:D101: Docstring missing 69:D102: Docstring missing"}
{"pred": "Why do we need this constant?", "gold": "keeping this as an unexported constant, as importing the role pkg creates a cyclic dependency."}
{"pred": "Why do we need to check this here?", "gold": "Why `c.RevisionField()` here but `c.opts.RevisionField` just below?"}
{"pred": "Why is this removed?", "gold": "nit: this file diff seems unrelated and probably should have been a separate PR"}
{"pred": "Why is this needed?", "gold": "@sjplimp just checked this API in the latte repository master branch (which is what Install.py downloads) and this still does not provide the 18th argument. We cannot merge this pull request until this is available. i would also suggest to implement a second binding, a function called latte_abiversion() returning an int with an ABI version number (starting with 1). This way, it can be tested, whether the ABI expected by the LAMMPS interface and provided by the library is compatible *before* calling the `latte()` function and risking a segmentation fault."}
{"pred": "Shouldn't this be `Debug`?", "gold": "Is this from debugging?"}
{"pred": "Why did you remove the `createMock`?", "gold": "Its betet use MockedObject"}
{"pred": "Does this need to be exported? I don't see it used outside of this package.", "gold": "\"including\"? Since it doesn't take any parameters, I'm not sure how it can update anything else..."}
{"pred": "nit: `only supports` -> `only supports`", "gold": "nit: I'm assuming you have verified this is what the error message should read like"}
{"pred": "sys.exit(1)", "gold": "Why do you need that? (real question)"}
{"pred": "Why did you change this?", "gold": "If I understand the patch correctly the `else` is no longer required."}
{"pred": "I don't think this should be a string, it should be a boolean.", "gold": "Properly describe valid flag values here: `neither` should be replaced with `none` as they parsed below."}
{"pred": "Shouldn't this be `logger.error`?", "gold": "Can we escalate this to `warn`. It is a major event."}
{"pred": "I think these should be `stateOffICMPProtocol` and `stateOffICMPCode`", "gold": "Please move these up to line 86 so the numbers are in order."}
{"pred": "Why do we need this?", "gold": "Add a docstring to contain the paper link."}
{"pred": "I think this should be `if targ != \"\" {`", "gold": "Instead of adding the `--target` flag here, the `Target` struct should be set up correctly. Assuming this is for the Raspberry Pi 3, adding it to the `cflags` key of the JSON file should be enough (if not, you can print `config.CFlags()` here to check whether `--target` is already included)."}
{"pred": "Why do we need to do this?", "gold": "The changes in this file look unnecessary since `rpccontext.AuditRPCWithTypesStatus()` already does this check. Was there a reason you needed to add them?"}
{"pred": "Why do we need this?", "gold": "you could probably use `const` for both?"}
{"pred": "Why do we need this?", "gold": "This looks like an \"ES Module\" to me. I do not understand this TODO."}
{"pred": "nit: `final` is redundant.", "gold": "Iceberg doesn't use `final` because it is unlikely that this actually helps. In Java 8, final detection is quite good, which is why non-final variables can be used in closures and lambdas. And final doesn't produce different byte code so it can't do much to help at runtime."}
{"pred": "`lua_pushstring(L, player->getIP().c_str());`", "gold": "There's `pushString` to use with C++ strings."}
{"pred": "Why do we need to wait for this to be empty?", "gold": "qq: Should this include the iptables6-save sim. to the inverse checks above?"}
{"pred": "Why do we need to wake up the writer here?", "gold": "What about async user writers? We could be checking `param.mode == ASYNCHRONOUS_WRITER`"}
{"pred": "This should be `lombok.NoArgsConstructor.class`.", "gold": "this double check for lombok annotation + specific lombok annotation seems pointless, just keep the second (specific) check. Moreover, since we have a property with ignored annotations... why don't we use it? a user may setup the property and it will be ignored here. Also, this class should probably not extend `AbstractLombokAwareRule` anymore. We have a configurable set of annotations that suppress the warning, defaulting to ALL lombok annotations, yet we only check for `lombok.NoArgsConstructor`... Maybe directly extending `AbstractIgnoredAnnotRule` and settig the default property to `lombok.NoArgsConstructor`? Or, to avoid a breaking API change, keep extending it, but override the default. For 7.0.0 we can change the class hierarchy."}
{"pred": "I don't think this is correct. If there are multiple Interceptors, they will be invoked in the same order as they are passed in.", "gold": "nit: the ordering may be misunderstood, as \"invoked in the same order\" could suggest the passed-in functions are called in-order, but the actual wrapping is LIFO. Some other ways to describe it (don't think any of these are ideal, but maybe it will help you come up with something better), * the handled returned by the first interceptor is executed first * interceptors are applied outside-in (don't like the terms outside/in though) * interceptors are applied in LIFO order, leading to an earlier interceptor's handler being executed before latter interceptor handlers"}
{"pred": "I don't think we need this import.", "gold": "We should not use a static import to be consistent with other existing use of the QueryElevationParams."}
{"pred": "`sizeof(null_gbs_info)` -> `sizeof(null_gbs_info)`", "gold": "No need to check return value?"}
{"pred": "`import importlib.resources as importlib_resources`", "gold": "~~Feel free to ignore that one, I'll fix things up when regenerating the `requirements.txt`.~~ As for the one below, this smells like a pylint bug..."}
{"pred": "cpInput.NumExtraElements = len(antreaDestinationStatsElementList) + len(antreaLabelsElementList)", "gold": "it's a bit strange that this doesn't match `aggregationElements` which is what I would expect. I guess I am not familiar enough with go-ipfix."}
{"pred": "This should be `num_simd_saved_abs`.", "gold": "Same thing: `num_simd_registers`. Ditto below."}
{"pred": "Shouldn't this be 2.2.2?", "gold": "Should be 2.1.1"}
{"pred": "`required_subject` doesn't seem to be used?", "gold": "nitpick: `required_subject` doesn't seem to be used here"}
{"pred": "import graphql.schema.Query;", "gold": "We can revert this to reduce the diff of the PR."}
{"pred": "E225 missing whitespace around operator", "gold": "Extraneous blank line."}
{"pred": "Why did you change the name of this file?", "gold": "Is this the same import as in the line 20?"}
{"pred": "Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.", "gold": "why those additional checks after published? template.version should always be present and greater than zero"}
{"pred": "Why do we need this?", "gold": "I did not see this is used in the controlplane API? Is it for internal use only? Then no need to define it here?"}
{"pred": "Shouldn't this be `gcnArchName`?", "gold": "Should we also add a line to print gcnArch?"}
{"pred": "This should be `Automatically sends usage statistics and crash reports to Brave`", "gold": "I merged already so need another PR, but I think this needs to be at the bottom."}
{"pred": "Shouldn't this be false by default?", "gold": "space in key string?"}
{"pred": "Shouldn't this be `nsexecPath`?", "gold": "The commends of this function should be updated"}
{"pred": "Why do we need this?", "gold": "The docstring is outdated."}
{"pred": "Why do we need both of these?", "gold": "Could rename to `ServiceVersionKey` for consistency with the suggestion to rename the TracerSetting."}
{"pred": "Shouldn't this be `overwrite.lower() != 'y'`?", "gold": "I seem to recall a UI issue with this... @akarve I think you didn't like this for some reason..."}
{"pred": "This should be reverted.", "gold": "The `MediaBlockService` commit must be remove"}
{"pred": "Why did you remove this test?", "gold": "Use a literal constant here, and use `assertEqual`, e.g. `self.assertEqual(2, len(...))` You should also check that the number of rules is correct, i.e. 1 rule for buckets, 0 rules for tables."}
{"pred": "\"that requires a breaking change\" -> \"that requires a breaking change\"", "gold": "@Murderlon Should it just say `some future version`?"}
{"pred": "Why do we need to assign to `cspcObj`?", "gold": "change looks good.. but, better to make populateVersion to return same object in the case of error.. that avoids lot of complex logic and probable issues"}
{"pred": "Should we return an error here?", "gold": "invalid operation: exp (variable of type *Service) has no field or method getAddressDetails (from `typecheck`)"}
{"pred": "Why do we need to set this here?", "gold": "Probably overkill, but maybe we should be using a fake clock here. I won't push on whatever you decide though."}
{"pred": "I don't think this change is correct. `syncErr` is set after `wg.Wait()`", "gold": "If you feel like it, may as well apply all the suggestions below to this test too."}
{"pred": "I think this should be `newPointQuery(field, queryRelation, lat, lon);`", "gold": "do we really need a relation or can we just assume INTERSECTS?"}
{"pred": "Why did you change this to default?", "gold": "Is this a `MetricKey` ?"}
{"pred": "Why do we need this?", "gold": "what's your rationale to pick up this date?"}
{"pred": "\"github.com/pkg/errors\"", "gold": "NIT: I'd have preferred that the new package be called \"utils\", but that's not a big deal."}
{"pred": "I don't think we need this line.", "gold": "Simple Storage **Service**"}
{"pred": "Shouldn't this be `$solrConfiguration->getEnableCommits()`?", "gold": "I think, retrieving the setting could also be done outside the loop. What do you think?"}
{"pred": "This is where we would use the private state to do the validation against", "gold": "This TODO isn't related to this change. We should remove it."}
{"pred": "Why did you change this to `finest`?", "gold": "We chose `info` in the test code for obvious reasons. Changing to `finest` makes debugging harder and noisier."}
{"pred": "I don't think this is the right place to fire this error. It should be at the end of the function, not the beginning of the function.", "gold": "I'm not really sure this is worth it. Keep in mind that every special case we add has the potential to introduce new errors and complicates the code further. For common cases that is acceptable, but in this instance I don't think it's beneficial."}
{"pred": "I think this should be `env.Printf(\"Selectors     : %s:%s\\n\", s.Type, s.Value)`", "gold": "nit: this `if` isn't necessary since we immediately follow it up with a range over the slice, which works fine with a `nil` slice."}
{"pred": "`playerOutfit` can be null here.", "gold": "Remove this line please."}
{"pred": "I think this should be a `List<Map<String, Integer>>`", "gold": "why is this is class field? it should be something local within the auto apply template method since we only need this once to process templates and never use again."}
{"pred": "Why not use `axe.utils.getStandards().ariaRoles`?", "gold": "I agree with Stephen it's better to invoke getStandards() only once."}
{"pred": "`irregular_dims` -> `irregular_dims`", "gold": "After discussing what ``irregular_dims`` really is, we agreed that we need a better name that makes it clearer that this is more of an xarray concept of irregular dimensions than a holoviews one."}
{"pred": "Why did you change this to `finest`?", "gold": "This code is new and not tested well. While we may drop the log level before we ship 4.0, right now this is extremely helpful to users."}
{"pred": "Why do we need this?", "gold": "this makes sure there is some padding space around the size column"}
{"pred": "Why is this needed?", "gold": "Put these includes in alphabetical order"}
{"pred": "missing whitespace around operator", "gold": "Can this just be an else?"}
{"pred": "`from mmdet.utils import get_root_logger`", "gold": "Merge this line with Line7"}
{"pred": "Use the new Ruby 1.9 hash syntax.", "gold": "`clearfix` is needed to stop the `float:right` content overflowing the list item container."}
{"pred": "Why was this removed?", "gold": "Can this be put on the assembly?"}
{"pred": "I think it would be better to use `Boolean.parseBoolean(req.getParameter(\"alwaysOk\")).booleanValue()`", "gold": "Could we rename the parameter to `overrideStatusCode`? The name `alwaysOk` implies that the health check result would be always healthy.  "}
{"pred": "Shouldn't this be `/schedpolicy/{name}`?", "gold": "\"/schedpolicy\" is repeated, i would make it a constant and use it here and cluster client.go"}
{"pred": "Why do we need this?", "gold": "Having a second `configuration` arg seems kinda odd to me as an interface. It looks like you're just using it as a form of dependency injection for the tests, right? Part of what makes it seem weird is that it's leaked into all the other orderers where they don't use `configuration` at all. Instead, what do you think about accepting the configuration in `initialize` (and having it default to `RSpec.configuration` in the same way)? To me, the config feels like a bit of state the instance should hold onto rather than being given each time `order` is called. It also means the other orderers wouldn't need to take the odd second argument. Thoughts?"}
{"pred": "I think this should be `if not globalVars.appArgs.secure and not globalVars.appArgs.insecure`", "gold": "This button should also be disabled when in secure mode since it opens a web browser from which you can easily do a lot of insecure stuff."}
{"pred": "`Create a new {@link ExpireTableMetadata} to manage table metadata files in this table and commit.`", "gold": "Should this be done as part of `expireSnapshots`? I'd like to avoid adding a lot of operations to `Table` because it is already a large API."}
{"pred": "why do we need this?", "gold": "I do not think that this type (and its constructor) have to be exported."}
{"pred": "Why do we skip the log on error?", "gold": "why add this? don't think it's correct? for instance, it returns ErrCandidateNotExist (not critical), in this case we should return a receipt with corresponding status"}
{"pred": "Why do we need this?", "gold": "Instead of creating a new file, put this in tls.go, like right after or before DNSProviderConstructor is defined."}
{"pred": "Shouldn't this be `OC.getUserLanguage()`?", "gold": "Instead of OC.getLocale() for the default value the default should be the value of the user value 'core' 'lang'. When loading the page this can be added to the parameters by retrieving $this->config->getUserValue($user->getUID(), 'core', 'lang'); in viewcontroller.php."}
{"pred": "I don't think you need the `interface1` here.", "gold": "Why interface1 ? It should be in inner so."}
{"pred": "Why do we need this?", "gold": "Ideally, I'd have converted dicts to object but this way was less changes so this way for now."}
{"pred": "I don't think you need the `g_free` here, you can just use `out << \"xfer += ret;\"`", "gold": "Why is that test different to line 4022 (allocate is not tested there)? Shouldn't that be consistent?"}
{"pred": "if (rc == -1) // expr is true or no expr", "gold": "Should we consider move this expression evaluation to SETUP_INSERT step since it evaluates from queue entry. Also, this expression is not evaluated in ExHbaseAccessVsbbUpsertTcb."}
{"pred": "Is this TODO still relevant?", "gold": "Don't see any more TODOs here.."}
{"pred": "I don't think this is the right place to do this. I think it should be in the `dockerConfigVolumes` function.", "gold": "Can you extract this out to a constant?"}
{"pred": "Why this change?", "gold": "any testcase for saargs, and tidyargs argument processing?"}
{"pred": "nit: `PlatformNotSupportedMessage` -> `PlatformNotSupported`", "gold": "@ericstj do you think it is worth combining these two? With the presence of the message meaning it is enabled?"}
{"pred": "Why do we need to skip xvda for sda1?", "gold": "why not use instance.RootDeviceName ?"}
{"pred": "Why is this needed?", "gold": "not needed, ADIOS2 also needs to check for subfiles. ADIOS2 tries to remove dependency on serial `fstream`."}
{"pred": "Nit: `No extension support for ${path} in sqlite storage`", "gold": "no need to wrap in new Promise - you can simply throw the exception"}
{"pred": "Shouldn't this be `-1`?", "gold": "Isn't this testing an implicit config, not a manual config?"}
{"pred": "`chainToDataplaneHashes` is unused (from `structcheck`)", "gold": "I don't think this is used any more, please remove."}
{"pred": "`providerId` is unused (from `deadcode`)", "gold": "shouldn't we name abbreviations up-cased? `myId` -> `myID`?"}
{"pred": "Why is this needed?", "gold": "This just always calls refs. I think we need to either hoist ref invocation back out of `setProperty()` (it used to happen during rendering), or wait for component recycling to go away."}
{"pred": "Shouldn't this be `t.Fatalf`?", "gold": "Oof. I may have missed this while reviewing #3805"}
{"pred": "Why are these needed?", "gold": "why the NOLINTs here? please just alphabetize the headers (should be easier than adding NOLINTs) unless there's a good reason not to..."}
{"pred": "Why do we need this?", "gold": "Should we maybe return `<svg />` instead?"}
{"pred": "`load_plugins` -> `load_plugins`", "gold": "Please use camelCase in new code"}
{"pred": "This should be `Places` not `Places`.", "gold": "Looks like the whitespace is off here. Not sure if there's a space or two too many or if there is an issue with tabs vs. spaces, but you probably want to fix this :)"}
{"pred": "\"must be loaded after\" -> \"must be loaded after\"", "gold": "This was just my laziness and I didn't copy the first line. Just remove it together with one empty line. Thanks"}
{"pred": "Why do we need this change?", "gold": "Why did you decide to change CartItemTest but you didnt change QueryBuilderWithRowManipulatorDataSourceTest?"}
{"pred": "I don't think we want to skip the cache if `pollForKID` isn't present.", "gold": "This was sort of a pre-existing bug -- we should be busting our local cache if the key isn't present. However, `KBPKIClient.HasVerifyingKey` already took care of it on that path. This way is better though."}
{"pred": "//go:build go1.15 && integration", "gold": "Should this tag addition for generated files be handled explicitly in `private/model/cli/gen-api/main.go`"}
{"pred": "Shouldn't this be `&& K9.getQuietTimeNotificationEnabled()`?", "gold": "You want to return if it's quiet time and notifications during quiet time are **not** enabled. So this is either a logic error or it's bad naming of the setting/field/method."}
{"pred": "Should this be `ENV['APP_DOMAIN'].to_s`?", "gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping."}
{"pred": "Should this be `force_private? && !installation?`?", "gold": "cool, here (L146 && L148) maybe (repo_private? || force_private?) && !installation? to prevent double call of installation?"}
{"pred": "`Failed to get active app: %v`", "gold": "this error carries a bit more meaning for us, but less meaning for users. we also lose the context of what command produced the failure. I'd prefer to keep the original error message. If we need better identification of GetActiveApp errors, maybe we could address that in the error messages it returns?"}
{"pred": "\"TLS certificate chain and hostname of solicited routes will not be verified, do not use in production!\"", "gold": "Same: DO NOT USE IN PRODUCTION. Yes we should shout ;)"}
{"pred": "Why do we need to change this?", "gold": "This change may be hiding more errors, if we continue to see more."}
{"pred": "Shouldn't this be `ConnectionFeatures[typeof(TFeature)]`?", "gold": "Beware of exposing the underlying features directly. Any mutable fields should be reset per request."}
{"pred": "I don't think this is the right fix. I think it should be `baseParent.insertBefore(base, initialBase);`", "gold": "This is probably more nuanced than I can feasibly check in a PR review, haha. Was the issue here that `replaceChild()` removes `initialBase` from the DOM before `recollectNodeTree()` invokes `componentWillUnmount()` on the owning component?"}
{"pred": "I think it would be better to use `driver.find_element(By.ID, \"disabled-button\")`", "gold": "I believe it's misleading name for the condition. I prefer \"element_to_be_disable\" We can have a condition, when element is enabled but we can't click it, because another element overlays above it. So, If we use \"unclickable\" we might mislead people, who use that condition to verify if element can be clicked"}
{"pred": "Why do we need this method?", "gold": "Do we need to expose it? It looks like it is only used in tests and only to obtain the final metrics. I think you can get the same by using `DataFile#lowerBounds` and `DataFile#upperBounds`. It seems `DataWriter` already exposes `toDataFile` that you can use."}
{"pred": "Why did this change?", "gold": "the test was failing likely due to locale issue. had to increment the date by 1 to make it pass"}
{"pred": "Why did you remove this?", "gold": "The changes below here can also be undone."}
{"pred": "nit: `beehiveContext` -> `channelQContext`", "gold": "Instead of importing context besides beehivecontext, I'd suggest include golang context functionalities into beehivecontext. To keep channelq only rely on beehive."}
{"pred": "Why do we need this constructor?", "gold": "I'm not sure about this one. Are you sure we don't need to initialize this fragment anywhere else?"}
{"pred": "Why do we need to pass `true` here?", "gold": "You didn't set a source here, so it will probably fail."}
{"pred": "why this change?", "gold": "Might be easier to just do `handler{Handler: rpcHandler}` since zero-value of `Deps` is now valid."}
{"pred": "Extra empty line detected at class body end.", "gold": "Could you please add docs for this method?"}
{"pred": "Why is this needed?", "gold": "we should probably `@Deprecated` this implementation to be removed in PMD 7.0.0"}
{"pred": "I don't think this is the right place to put this logic. It should be in the `Bolt::Shell::Bash` class.", "gold": "I wonder if 'unix' makes more sense for this now? I was thinking of putting up a 'cleanup' PR - I think I missed a few \"remote\" var names in the first PR, and want to reassess unifying the transport classes that just define `with_connection`. Renaming this could be part of that."}
{"pred": "Why is this change needed?", "gold": "Do something similar to what was done in JsonTests (can you derive from JsonTests?)"}
{"pred": "Why is this ignore needed?", "gold": "Yes, not much we can do here."}
{"pred": "Why is this needed?", "gold": "Why do we need this?"}
{"pred": "This should be removed.", "gold": "Would prefer to see an actual script here."}
{"pred": "nit: `of` -> `to`", "gold": "seems reasonable to also want to include the 'to' location?"}
{"pred": "Why did you change this?", "gold": "This change is unnecessary."}
{"pred": "Why do we need to unselect all here?", "gold": "Just as a note: Is it possible that the select css class is the same as the hover one? If this is true we should choose a different style for the selection css class, to make it more clear to the user I think."}
{"pred": "Why is this a slice of strings? Why not just a string slice?", "gold": "What about Secrets, are we not also trying to cover those?"}
{"pred": "#include \"treeobj.h\"", "gold": "(commit messge): how about > update internal commit API for RFC 11"}
{"pred": "Why do we need this change?", "gold": "This will now wait for 2.5 hours, not 90 minutes, if the waiter delay is 5s"}
{"pred": "`if(!event) return;`", "gold": "See this error on console too so I don't think it's just test simulation. For some reason event doesn't show up sometimes"}
{"pred": "Why is this change needed?", "gold": "We're passing the same thing twice?"}
{"pred": "Why is this base64 encoded?", "gold": "Shouldn't the value in Bootstrap.Data be just a plain string?"}
{"pred": "nit: `var samplingPirority` => `SamplingPriority samplingPriority`", "gold": "@robertpi Isn't this changing the sampling priority when `KeepTraces==false`? The sampling priority could be `AutoReject` or `AutoKeep`, based on the sampling decision (or the user may have specified something else). Seems like we shouldn't be changing it in this case?"}
{"pred": "This should be `/readyz`", "gold": "The const can also be used in cloud/pkg/cloudhub/servers/httpserver/server.go L46-47?"}
{"pred": "Why this change?", "gold": "Use a constant for `procedures_prototype`."}
{"pred": "I don't think you need the `!r` here.", "gold": "This file should probably not be touched as the formatting of the string seems to be a test in itself ?"}
{"pred": "Shouldn't this be `!defined(X64) && !defined(VMX86_SERVER)`?", "gold": "style nit: missing leading '*'"}
{"pred": "Shouldn't this be `NO_TRACING`?", "gold": "The operationTracer is passed into the processTransaction() method. We should probably pass the no tracing in one in from where it is called."}
{"pred": "Shouldn't this be `0`?", "gold": "I believe this line was an error, it should have been `sercomRXPad1` to be consistent with the pin numbers. Resolving this ambiguity by following the pin numbers."}
{"pred": "This should be `View This Request`, not `View This Request`.", "gold": "May be useful to have the reason here, though clearly not pressing."}
{"pred": "Why this change?", "gold": "These were inverted before"}
{"pred": "Why not return `Collections.emptyMap()`?", "gold": "DB is implemented in PR 951"}
{"pred": "I don't think this is used anywhere.", "gold": "move all constants to `pkg/util/constants.go`, these constants had been used in `volume_stats.go` file too. So better to import them."}
{"pred": "This should be `# Copyright (C) 2006-2020`", "gold": "Could you revisit the full header and add appropriate spaces after the hashes?"}
{"pred": "This should be `null` by default.", "gold": "This should either be `hint` that takes a string to render inside of the partial container or probably better you should just render a separate hint field above the code field in the same tab."}
{"pred": "Why did this change?", "gold": "this was flapping"}
{"pred": "Shouldn't this be `scrollView.SafeAreaInsets.Top`?", "gold": "Please add a check to see if SafeAreaInsets is available. It isn't on all iOS versions."}
{"pred": "Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "interpolation here was causing the translation to not get picked up"}
{"pred": "Shouldn't this be `mp_RTPSParticipant->async_thread()`?", "gold": "We don't need to disable the flow controller here as in `StatefulWriter`s destructor?"}
{"pred": "`create_no_window` -> `no_window`", "gold": "I would rather no have this as a `kwarg` as it encourages \"growth\" which lead to an unweildy constructor in other classes. Let's add a method or property to take care of this instead as I think it's usage is going to be quite low."}
{"pred": "I'm not sure if this is the best way to do this. I think it would be better to add a `ChainToWorkloadDispatch` rule to the `ChainToWorkloadDispatch` action.", "gold": "I just noticed that we use Return here, when we have logically allowed a packet, whereas in the forward chain we use AcceptAction. Do you know why that is?"}
{"pred": "Why not just use `math.Max`?", "gold": "There's one for floats but not for ints. The float implementation is non-trivial though which I guess is the argument there."}
{"pred": "nit: `DCRedirectionPolicyAllAPIsForwarding` -> `DCRedirectionPolicyAllAPIsForwarding`", "gold": "If we have a redirection policy for Selected API forwarding, why isn't \"redirect all\" just a special case where they are all Selected?"}
{"pred": "nit: should this be `Custom` instead of `Custom`?", "gold": "I wouldn't add this. Just completely ignore config if custom reporter is not `nil` in server options."}
{"pred": "`clusterMan.get()` returns a `unique_ptr<nebula::meta::ClusterManager>`, why do we need a unique_ptr here?", "gold": "What's the meaning about the code?"}
{"pred": "Shouldn't this be `!loadingUrl.getHost().contains(bridge.getHost())`?", "gold": "Would this incorrectly trigger if `loadingUrl.getHost() = \"something.app\"` and `bridge.getHost() = \"app\"`?"}
{"pred": "I don't think it should be set to `True` when using `IoULoss`, `GIoULoss`, or `DIoULoss`.", "gold": "Note generally it -> It"}
{"pred": "Why did you remove the force parameter here?", "gold": "Does this mean that every call to `configSet.getIndexSchema()` will create a new schema object (if shared schema is not enabled)?"}
{"pred": "Why did you remove the ASF license header?", "gold": "License header should use the Apache one."}
{"pred": "I think this should be `if len(matches) == 0`", "gold": "I think this makes more sense to be applied within the parser code where we evaluate the `glob` builtin? This function looks generic in the sense of where it can be used, and perhaps no matches is fine in other cases?"}
{"pred": "Why do we need a fake ec2 client here?", "gold": "should we validate that AWSRegion has also been set here so that we don't get into the if-block that relies on the ec2 metadata client below?"}
{"pred": "I think this should be `self.__db_version_info`", "gold": "maybe naming `version` to `package_version` or something similar can be more descriptive"}
{"pred": "Why do we need this change?", "gold": "Why was this changed?"}
{"pred": "//go:build !arm64", "gold": "Should not have snuck in here right? This is a golang 1.17 feature, wii definitely want to update these"}
{"pred": "I don't think this should be a Pundit::NotAuthorizedError, it should be a Pundit::UnauthorizedError", "gold": "Pundit is unaware of namespacing, however you can still create the class under policies/org_admin/plans_policy.rb. That means, the condition for the unless can be reused in other places too. You would call the policy as OrgAdmin::PlansPolicy.new(current_user).index? after that unless"}
{"pred": "I think it would be better to use `LOG.warn(\"This analysis could be faster, please consider using Incremental Analysis: {}\", version);`", "gold": "this warning shouldn't be produced if we configured a cache either"}
{"pred": "Why do we need this?", "gold": "what if the collection is already there?"}
{"pred": "Why did you remove the reference to the screenshot?", "gold": "instead of removing can you reference org.openqa.selenium.TakesScreenshot ?"}
{"pred": "Why is this needed?", "gold": "Please revert unrelated changes"}
{"pred": "Why do we need to replace \"Countly\"?", "gold": "As far as I know, this will replace only first occurance of Countly, not others, if there are more than one Countly word in localized string"}
{"pred": "Why do we need this change?", "gold": "I suggest, that we move the regex (`[^a-zA-Z0-9_]`) to a separate constant field, because we're using it in multiple places and I think it's quite prone to misspellings."}
{"pred": "F401 'typing.Dict' imported but unused", "gold": "Feel free to disregard, but I've been trying to use `Mapping` and `Sequence` instead of `Dict` and `List` when possible, because they communicate that the type is immutable, and also are covariant."}
{"pred": "nit: remove empty line", "gold": "No need for blank line here. This block will then be reordered alphabatically."}
{"pred": "Why do we need this constant?", "gold": "let's call it `in-cluster` instead of `local`. less chance of confusion."}
{"pred": "`$prev_ref` is not used.", "gold": "Please use camelCase instead of underscore_case"}
{"pred": "Why do we need to trim here?", "gold": "Ideally, we'd fold the schema into an expanded system_meta, but this is a good first step."}
{"pred": "nit: `FIELDS` -> `FIELDS`", "gold": "Is this used?"}
{"pred": "Why is this needed?", "gold": "Should we use `#if NETFRAMEWORK` for consistency with the other projects?"}
{"pred": "I'm not sure if this is the best way to organize the error in a better way.", "gold": "If it parses failed, both of the `containerName` and `podId` should be the empty strings, it's non-sense to define this error, I suggest just return it."}
{"pred": "Why was this removed?", "gold": "line 26 can be removed i think > applicationId: or('config.unsplashAPI.applicationId', 'settings.unsplash.applicationId'),"}
{"pred": "Why did you remove the check for \"gpu\"?", "gold": "To generalize for possible future new enum options."}
{"pred": "Shouldn't this be `os.getenv(\"PWD\")`?", "gold": "Shall we remove this variable at the end of UTScapy execution?"}
{"pred": "Shouldn't we return an empty list here?", "gold": "What is this checking for? Why is returning the list of interfaces the correct behaviour in this case?"}
{"pred": "Shouldn't this be true by default?", "gold": "Please name it correctly as Beam ;)"}
{"pred": "Shouldn't this be `retry = false` instead of `retry = true`?", "gold": "After chatting with Andrew, we think it's better to look for this particular error string that is causing issues (\"connection reset by peer\") instead of blindly retrying on any error we don't know about."}
{"pred": ">public abstract ServiceDefinitionDocumentType ServiceDefinitionDocumentType { get; } [](start = 8, length = 54) Why is this abstract? #Resolved", "gold": "any reason to not have defaults here like you had before? (ARM)?"}
{"pred": "Why did you remove the `paginate_params`?", "gold": "This is a change. The old code was just wrong before, but now here (and one other machine-readable place) we expose the start index as 0 for the first item."}
{"pred": "Why did you remove this?", "gold": "This changes the behavior of the parser, right? Any particular reason to do this aside from the fact that you have to since the function takes a const?"}
{"pred": "I'm not sure if this is the best way to do this, but I'm not sure if there's a better way to do this.", "gold": "Given how simple the Portal implementation is, I wonder if we should move it core... Though we'd have to export it which would be more bytes we can't crawl back..."}
{"pred": "Why do we need to clone the hooks?", "gold": "The more correct way of doing this is `this.s.hooks.clone()` but either way works. Thanks for finding this :+1:"}
{"pred": "`selfNS` is not used in this function.", "gold": "Can we update bool to an enum instead of a string? This helps future extensibility"}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.", "gold": "Should we share, since this is also being used with gsa18f?"}
{"pred": "This should be `crash-data-subrow-`", "gold": "There can be multiple subrows, so it is not a good idea to use `id` there, as id should identify single unique element. Instead you could just add the id of whole table or of whole crash plugin view"}
{"pred": "Why was this removed?", "gold": "Why was this assert removed? Shouldn't we check if the file is in the zip?"}
{"pred": "nit: `reconciled` -> `reconciled`", "gold": "This logic should be handled at informer handle functions i.e. AddFunc, UpdateFunc, DeleteFunc"}
{"pred": "nit: `return len(poolSpec.RaidGroups) == 1`", "gold": "S1008: should use 'return <expr>' instead of 'if <expr> { return <bool> }; return <bool>' (from `gosimple`)"}
{"pred": "Why do we need this?", "gold": "Just to remove branching, use `defaultTitle` explicitly in the test cases. (Is this gofmt'd?)"}
{"pred": "`SampleTransformer.create(SampleType.IN_CODE)` -> `new SampleTransformer(SampleType.IN_CODE)`", "gold": "I don't think you use this variable anywhere. (You call `SampleTransformer.newBuilder()` below)"}
{"pred": "`chirp_reli_hash` returns `CHIRP_DIGEST_MAX` if `result < 0`", "gold": "The digest is in binary and variable size (the digest size is result if > 0). So we can't use xxstrdup."}
{"pred": "Why do we need these methods?", "gold": "We don't need this additional method."}
{"pred": "Why do we need this?", "gold": "We can't do this. Adding a method to an interface is a breaking change. This was an oversight on our part when we converted ClientConfig from a struct to an interface. OutboundConfig was introduced to fix this, the idea being that we should use OutboundConfig everywhere instead of ClientConfig. In case of Dispatcher, we want to use the OutboundConfig and MustOutboundConfig methods instead of ClientConfig, and for streaming, the client needs to attempt to upcast a ClientConfig to OutboundConfig and error out if that's not possible."}
{"pred": "Why do we need the default QoS here?", "gold": "Why not using the constant `PARTICIPANT_QOS_DEFAULT` here?"}
{"pred": "Why do we need this?", "gold": "Shouldn't this be `tm_cpp` to match `temporalImp`? (There are multiple CPP implementations, so 'cpp' is ambiguous.)"}
{"pred": "I think it would be better to use `File.sep` instead of `File::SEPARATOR` here.", "gold": "Need to remove this empty line for rubocop to be happy."}
{"pred": "Why is this disabled?", "gold": "just checking: do we need to remove this because otherwise the `List` operations may not return the entire set of Pods / Namespaces? do you know why we used `alwaysReady` in the first place, I can't remember?"}
{"pred": "Shouldn't this be `mongoClient.s.options.autoEncryption.cryptdConnectionString`?", "gold": "maybe we can replace `mongoClient.s.options.autoEncryption.cryptdConnectionString` with `options.autoEncryption.cryptdConnectionString`?"}
{"pred": "`os_clone_pre` and `os_clone_post` should be called before `os_switch_lib_tls`.", "gold": "But we're already doing os_switch_lib_tls to app a few lines above, so there is now redundancy we should alleviate."}
{"pred": "nit: `ulong? spanId = default`", "gold": "Under what circumstance would we have a span id already? Is this for testing purposes?"}
{"pred": "I don't think this is correct. If the semaphore has already been signaled, it means that it has not been waited on by any queue.", "gold": "The original text can be read to say \"not waited on by queue ...\" meaing that the second queue was supposed to have *waited* for the signal... which is especially confusing when it's the same queue that has signalled the semaphore *twice* without a wait."}
{"pred": "\"lookup timed out waiting for response\"", "gold": "just clarifying the error messages a bit."}
{"pred": "Why do we need this class? Can't we just use `TelemetryRequestTypes`?", "gold": "Have those (and other data like conf...) shared across tracers?"}
{"pred": "Why do we need this file?", "gold": "could we add this file only when we need one?"}
{"pred": "nit: add a period at the end of the sentence", "gold": "This may not even be needed."}
{"pred": "Why do these need to be contribute to any hash?", "gold": "Capitalisation seems inconsistent here?"}
{"pred": "Why is this needed?", "gold": "maybe better Error(string text) and Error(Exception ex) separately?"}
{"pred": "I think this should be `langserver`", "gold": "can you leave the old one in too please? at least for now, otherwise anyone using it now will break."}
{"pred": "why is this needed?", "gold": "Trailing tab, remove it in another PR."}
{"pred": "Why do we need to signal fatal problem here?", "gold": "what about merging the error checking logic to within `errShouldUnload`?"}
{"pred": "Use nested module/class definitions instead of compact style.", "gold": "Probably want Topic.find_by_slug! to handle bogus topics. The next line will try to load articles off of nil otherwise."}
{"pred": "I think it would be better to use `is_same_v<Method, pca::method::svd>()` here.", "gold": "Should it really be done on test side?"}
{"pred": "nit: \"due to its potential usage\" -> \"due to its potential usage\"", "gold": "Can we elaborate on why? I'm guessing because we need the execution role to call FE stopTask during `cleanupTask`, but would be good if we make it clear here."}
{"pred": "Why do we need to pass args again?", "gold": "is there a reason why this is not called from inside `validate`?"}
{"pred": "`rwTimeout` is unused (from `structcheck`)", "gold": ":+1: I much prefer this style for functions with more than a few arguments."}
{"pred": "Why this change?", "gold": "Are these mutually exclusive options (parameters vs qualifiers)? If parameters aren't supported, may want to consider throwing an exception for \"hasParameters\". If parameters and qualifiers are both legit options, then maybe change this to `if (hasQualifiers) { ... } if(!hasQualifiers && !hasParameters)`"}
{"pred": "Why is this removed?", "gold": "Why did you remove this line?"}
{"pred": "I think it would be better to use `invalid_index_name` here.", "gold": "Very unclear error message. Remember that these are messages that your users see. Please be more specific"}
{"pred": "Can we remove these?", "gold": "Can we add these when we need them  "}
{"pred": "Please use `!empty()` instead of `!empty()`", "gold": "I believe you can simplify this to simply `return array_unique(array_filter($authors));` -- the default behavior of array_filter is to filter out empty elements, so the callback should not be required in this situation. Do you mind giving it a try and updating the PR if it works?"}
{"pred": "Why do we need this check?", "gold": "Would it make sense to log a debug warning here?"}
{"pred": "Why is this being removed?", "gold": "\"in the keystore\", but nevermind"}
{"pred": "`node.peers.total_weight () < node.delta()`?", "gold": "This should be done in a separate PR."}
{"pred": "Shouldn't this be `log.warn`?", "gold": "Rather than this maybe `Text.sanitize` would be better here"}
{"pred": "Why do we need the `false` here?", "gold": "lot of places setting default 'false' to static value - noise in PR"}
{"pred": "Shouldn't this be `ORIGINAL_IMAGE_WIDH`?", "gold": "I think you should use `$event->getOriginalFileUrl()` instead of `$sourceFilePath` here."}
{"pred": "`api_quota_configs` -> `api_quota_config`", "gold": "nit: It's a matter of taste, but it would be tighter if this is called `api_quota`."}
{"pred": "Why do we need this import?", "gold": "I noticed in all of these we now have to import the PrecompiledContract under testing. Could also rename the package these are in s/precompiles/precompile to keep them in the same package as they are elsewhere."}
{"pred": "Why this change?", "gold": "doubt this matters..."}
{"pred": "from scapy.consts import *", "gold": "Gets updated versions of `LOOPBACK_INTERFACE`, `LOOPBACK_NAME` when importing scapy."}
{"pred": "nit: can we use `==` here?", "gold": "checking for ref. equality is probably fine here, but it takes a reader longer to navigate the code and figure out whether ref equality is really wanted here vs just using `equals()`"}
{"pred": "nit: rename to `deleteManager`", "gold": "looks like it's not used? Do we plan to use it in the future?"}
{"pred": "Why do we need this change?", "gold": "I think this is an unrelated remark. I thought we had moved toward the practice of using \"Config\" as the structure name, and Option as a functional argument (`func(*Config)`), and Options as a `[]Option`. See api/trace `StartConfig` and `StartOption`, for example. That's why I prefer this struct be called Config."}
{"pred": "`from kinto.core.errors import http_error`", "gold": "nitpick: superfluous parenthesis"}
{"pred": "Why do we need this?", "gold": "If, for a given integration, the tag/measure is always set, it should be added to the strongly-typed tags (here for instance, in GraphQLTags). This way, the underlying dictionary is allocated only in the rare case where users add custom tags"}
{"pred": "why is this needed?", "gold": "The position change of this line may be a hard fork."}
{"pred": "Why did you remove this code?", "gold": "id is unsigned  "}
{"pred": "`_env_vars` -> `_env_vars`", "gold": "It looks like Puppet doesn't provide type validation for options and we don't provide it ourselves as part of the function. Is that something we'd want to do at some point?"}
{"pred": "Why this change?", "gold": "Looks like this didn't need to change."}
{"pred": "Shouldn't this be `self.global_set_option('disable', value)`?", "gold": "I don't understand why this is here and what's the intention with it? Can you elaborate what's the reasoning behind this change?"}
{"pred": "Why do we need to change this?", "gold": "I think @sergeybykov converted (wanted to convert) all `shardID` to `int32` from `int64`. Please check with him."}
{"pred": "`std::ceil((static_cast<double>(creature->getHealth()) / std::min(creature->getMaxHealth(), 1)) * 100);`", "gold": "This will only fix client side (so showing it in-game) server still gonna hold invalid values I guess?"}
{"pred": "nit: space after `=`", "gold": "Shouldn't this be `cls.param.warning`?"}
{"pred": "Why was this removed?", "gold": "This spec can be modified, giving you extra strength (Check this fetch key doesn't work and therefore returns `nil`)"}
{"pred": "`forbidden_hosts = [self.config.options.listen_host] + forbidden_hosts`", "gold": "Could we not just always include `self.config.options.listen_host`? If that is empty, the `address[0]` check should also never be true."}
{"pred": "nit: rename to `targetSplitSize`?", "gold": "Why not just access `ops` directly like before?"}
{"pred": "Why was this removed?", "gold": "Is there even a need to keep the bool?"}
{"pred": "`os.path.dirname(__file__).join(\"tests\", \"integration\", \"nupic\", \"opf\")`", "gold": "wrap to stay under 80 characters"}
{"pred": "Wouldn't it be better to throw an exception here?", "gold": "`return NULL` is more clear than `throw` at least in my reading, and consistent with #3362."}
{"pred": "why is this removed?", "gold": "Both of these are important. Without it, locust won't find my libraries in the cloud."}
{"pred": "Shouldn't this be `ListServices`?", "gold": "This should remain as `ListServices`"}
{"pred": "", "gold": "If no tests, remove this file."}
{"pred": "Should this be `GSUITE_DOMAIN_SUPER_ADMIN_EMAIL`?", "gold": "This will require changes to the docs. I suggest searching the gh-pages branch for the previous variable name."}
{"pred": "Why not `os.path.join(\"lib\", buildVersion.version, \"nvdaHelperRemote.dll\")`?", "gold": "`RemoteHandler` is used in nvda_slave and slave does not have access to `globalVars` currently. Perhaps `globalVars.appDir` should be set to `None` in `globalVarrs by default and set to NVDA directory when they're imported for the first time."}
{"pred": "Why do we need this?", "gold": "In case there is more configuration to be added to the \"inmem\" metrics later (however unlikely that is), we may want to play it safe and create an `InMemConfig` struct and include the disabled flag there. This also gives the config symmetry across the plugins."}
{"pred": "Extra empty line detected at block body beginning.", "gold": "I'll need to pull this out of here since we're sharing this in other tests. Same for `procurement_spec.rb`"}
{"pred": "Shouldn't this be `obs.user.full_name`?", "gold": "what about `observer` as a var name here (and below) rather than `obs` ? -- would be clearer, imo!"}
{"pred": "`KeyError` is a subclass of `KeyError`.", "gold": "could you change this to instead of being a `try.. except` be `message = message.get('message')`"}
{"pred": "I don't think we need this change.", "gold": "Add space between License and nameapace"}
{"pred": "Extra empty line detected at class body beginning.", "gold": "should we have a `before_filter` for auth here?"}
{"pred": "Why do we need to check if the instance is registered?", "gold": "@vincepri I know we discussed moving this up and only calling it once, but I didn't (quickly) see an easy way to generate the right event based on the appropriate action (attach vs detach). Happy to move it around if you have suggestions."}
{"pred": "Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body beginning.", "gold": "Can we use record.update here?"}
{"pred": "Shouldn't this be `rw.headers.SortedItems()`?", "gold": "Shouldn't the exact case option matter here?"}
{"pred": "Shouldn't this be `util.Derived`?", "gold": "Errr, why haven't we noticed this until now?"}
{"pred": "I think it would be better to use `Objects.equals` here.", "gold": "It's a little spooky that this method throws exception if you try to set the attribute to a different value than it was set before, but then does leave the new value set in the attributes?"}
{"pred": "Why did you change the version?", "gold": "Please only increment by 1."}
{"pred": "Why do we need to change this?", "gold": "Sorry I might have missed some context, but what's the reason you choose `Period` over `Duration` or `Interval`? (Thumbs up for using `org.joda.time` instead!)"}
{"pred": "nit: `preventWheel` -> `preventWheel`", "gold": "Please check if is it possible to mark it as private. What's more please add this to the TypeScript definition file."}
{"pred": "`static_cast` is not needed.", "gold": "Maybe move this to `util.h` ?"}
{"pred": "Why is this needed?", "gold": "oops. this won't work will it"}
{"pred": "I don't think this is the right thing to do. If the TLF is a single team, and the handle is a single team, and the TLF is a single team, and the handle is a single team, and the TLF is a single team, and the handle is a single team, and the TLF is a single team, and the handle is a single team, and the TLF is a single team, and the handle is a single team, and the TLF is a single team, and the handle is a single team, and the TLF is a single team, and the handle is a single team, and the", "gold": "@strib I assumed this is what you meant; but let me know if I'm wrong!"}
{"pred": "I don't think you need to change this.", "gold": "I believe the error has changed"}
{"pred": "This should be `params[:q].present? || params[:f].present?`", "gold": "Lint/UnneededDisable: Unnecessary disabling of Naming/PredicateName."}
{"pred": "Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "Should this be removed now?"}
{"pred": "`streamHandle` -> `streamId`", "gold": "streamHandle sounds vague to me. Can you be more specific?"}
{"pred": "`Object.assign({}, cursor.options, cursor.cursorState)`", "gold": "Does everything on cursorState belong in the command options?"}
{"pred": "Shouldn't this be `d.NextArg() || d.NextBlock(0)`?", "gold": "This is clever, but I do admit I think it's kinda weird. We can go with it for now and fix it later if people complain."}
{"pred": "bucketRegex is unused (from `deadcode`)", "gold": "the variable names are not entirely clear. \"bucket\" is essentially the regex that follows gcs naming pattern, right? if so, it should be changed to bucketregex. and then bucketregex, gsregex should be changed to something more specific to what pattern the regex is supposed to match."}
{"pred": "`T extends ApiModel`?", "gold": "I think `ApiModelT` would be clearer than `T`"}
{"pred": "Why did you change the copyright year?", "gold": "Shouldn't this be 2019?"}
{"pred": "Should this be `POD_SUCCEEDED`?", "gold": "We should consider giving this state a more generic name which could be used for flows in similar state in non-containerized Azkban. For instance in the event of a bare-metal executor crashing we could the switch any flows assigned to that executor to this state. Something like `EXECUTE_INFRA_FAILED`, better alternatives should be possible though."}
{"pred": "Why do we need to check `role` here?", "gold": "This should allow `role=definition` and `role=term`, possibly also `role=list`?"}
{"pred": "nit: `return Boolean.parseBoolean(value);`", "gold": "Should this use `boolean` instead of `Boolean`?"}
{"pred": "Why was this removed?", "gold": "Currently in our Zipkin tests, only one passed parameter would instantiate a Resource and checks for its tags populating. I left the If(UseTestResource) clause in the code in case we would like to return to the old resource tag checking, but if it makes more sense I can remove that parameter entirely."}
{"pred": "`isNodeLive` -> `isNodeAlive`?", "gold": "While this is potentially convenient it seems off topic for the PR/Issue. Also if it is kept, in the realm of taste/style I tend to not use get/set/is for things that are not properties of the object. maybe hasLiveNode(String node) thus someone using it might write `if (zkReader.hasLiveNode(\"foo\")) ...` which reads quite nicely."}
{"pred": "nit: `blogSvidPath` is unused (from `deadcode`)", "gold": "What's the difference between blogSvid and the SVID above? Looks like the functions that use these aren't being called currently - can they be removed?"}
{"pred": "`reader.Value` can be null here.", "gold": "can you add numbers with this change? the CLI is a javascript engine and it can worh number - java adds strings vi concatenation"}
{"pred": "Shouldn't this be `TEXT` instead of `TEXT`?", "gold": "Shouldn't this `TEXT` also be dependent on the platform, then?"}
{"pred": "Why do we need this interface? Can't we just use `Value`?", "gold": "Can we name this `TableObject`? I'm not a big fan of the `I` prefix for interfaces and that's not really used in Go. Is it also possible to have the method be unexported? I don't know if that's possible. If it's not, this is good. If it is possible, I'd prefer this method to be unexported."}
{"pred": "Should this be `TBB_INTERFACE_VERSION < 12002`?", "gold": "If tbb.h is included, there is no big sense to include other TBB headers."}
{"pred": "I think it would be better to use `r'^(.+)\\.s3[.\\-][a-z]{2}-[a-z]+-[0-9]{1,}.*'`", "gold": "Let's use the same `S3_HOSTNAME_PATTERN` as above here."}
{"pred": "Can we remove this?", "gold": "This shouldn't be here."}
{"pred": "Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "A `case` statement may be simpler here."}
{"pred": "I think it would be better to move this check into the `calculateTagCount` method.", "gold": "why are we adding the current tag count to new tag count ?"}
{"pred": "Why is this change needed?", "gold": "Are you writing \"none\" to file content? no good"}
{"pred": "`$this->setTargets([$target], $zone);`", "gold": "Should we allow `string|string[]` here?"}
{"pred": "I'm not sure if this is the best way to do this. I think it would be better to use `uppy.warn` instead of `uppy.log`.", "gold": "Is there a reason for logging `error.message` specifically, maybe log the whole error object?"}
{"pred": "Should this be `Microsoft.AspNet.HttpReqIn`?", "gold": "Why is this needed?"}
{"pred": "I'm not sure what is needed here.", "gold": "Nothing. We only expect container-connected events when going via the plugin, not the proxy."}
{"pred": "Why do we need this?", "gold": "We might want to introduce some randomness here in case there are multiple completely separate Preact installations running, i.e. 2 widgets as those will be two roots with a resetting `_domDepth`"}
{"pred": "Why did this change?", "gold": "this seems a bit wrong no? why is this change needed?"}
{"pred": "Shouldn't this be `less than`?", "gold": "Still confusing. Why don't we return something like `'Fee too low: expected X but found Y'`?"}
{"pred": "Shouldn't this be `[]int`?", "gold": "Should be from lowercase `json:\"ports\"` the same is defined in MarshalJSON"}
{"pred": "Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.", "gold": "Simple Notification **Service** (singular)"}
{"pred": "Why is this needed?", "gold": "This code should be executed in NashornEngineFactory"}
{"pred": "Why do we need this?", "gold": "this is not so great as it sets the global rand seed. in tests that invoke this method multiple times for whatever reason, the global seed would be overridden every time the constructor would be called and the instances would have a different seed after every constructor call. it would be better to just pass a new source here as a parameter and do the same within the test. it should simplify things and clean this up"}
{"pred": "I don't think we need a flag for this. If we want to allow unprotected (non EIP155 signed) transactions to be submitted via RPC (default: ${DEFAULT-VALUE}) we should be able to remove it.", "gold": "This looks inverted to me: if `--rpc-require-chainid-in-txs=true`, then shouldn't `unprotectedTransactionsAllowed == false`? Suggest changing this variable to `requireTxReplayProtection` or similar. I think the flag name could be clearer as well, maybe: `--require-tx-replay-protection`."}
