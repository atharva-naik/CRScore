{"gold": "can we also test for `transport=rest`?", "pred": "fix: remove unused import (#100)"}
{"gold": "If record_batch_size is not set in config.ini, this code will trigger a notice about an undefined value. I would suggest either wrapping the setPageSize() call in an `if (!empty(...)) {` check, or else providing a default value in the set call (i.e. `$config->Index->record_batch_size ?? 100`).", "pred": "[SolrBundle] Fixing CS"}
{"gold": "I didn't realize we were hardcoding this, thanks for moving it to an env value.", "pred": "Update analytics.html"}
{"gold": "We are trying to support IE 10-11, so we'll need a polyfill for this one, I think.", "pred": "fix: add missing comma in fileItem template"}
{"gold": "It looks like there's a new `isNavigatingTo( url )` selector for this very purpose so let's use this here instead. This way we just need to use the one selector rather than two. Let's assign that to a similar-named variable here (e.g. `isNavigatingToPostResetURL`) rather than the prop it's used with.", "pred": "Update ResetButton.js"}
{"gold": "I think im2col should only accommodate CPUMat.", "pred": "Fix im2col for 1D images"}
{"gold": "alpha sort the imports", "pred": "Fixing import error in cscc_notifier_test.py (#3188)"}
{"gold": "Can you explain why is this necessary? Is `snprintf()` with four integer arguments unsafe?", "pred": "ras: Fix a bug in the mmio_error function"}
{"gold": "How likely would it be that the keyboard layout for the NVDA main thread differs from the keyboard layout of the currently focused app?", "pred": "Fix for #100"}
{"gold": "Would you mind removing the default parameter above? (I doubt I'll ever use defaults again since you still have to protect against callers explicitly passing `null` or `undefined`)", "pred": "fix(webdriver): fix typo in jsdoc (#102)"}
{"gold": "Also update line 2205 below", "pred": "JasonLeyba: Fixing a typo in a comment."}
{"gold": "n_: It is a good practice to name the variable to indicate what they contain. In this case since `shared` is supposed to have boolean, calling it: `isShared` can help in the readability of the code.", "pred": "fix(provisioner): fix the provisioner name"}
{"gold": "I suppose it's a false-positive error. Maybe there is a way to configure the `eslint-*` package to accept `i.e. .... lower case` syntax  ", "pred": "fix(manualColumnFreeze): fix typo in comment"}
{"gold": "this maynot be a perf issue, if ToHexString() is not actually allocating a string, but returns the caches string value. to be confirmed.", "pred": "Fix typo in comment (#1050)"}
{"gold": "`zap.String(\"image-provider\", provider.Name())` should be in a same line.", "pred": "fix: typo in comment"}
{"gold": "Why this deletion?", "pred": "Fixing a bug in the truncate function"}
{"gold": "This change looks unrelated to the CL description?", "pred": "Fixing test"}
{"gold": "I'm not certain that `res`+`utl` isn't a thing.", "pred": "fix(test): fix dedup test (#1198)"}
{"gold": "This method can cause bugs. Why don't you use list of finalize statuses and then use join by comma and that will give you correct value. Use Apache Commons Lang library List<Integer> list = Arrays.asList(1,2,3,4,5,6,7); String str = org.apache.commons.lang.StringUtils.join(list, \",\"); You can use it at multiple places shown in this diff.", "pred": "[NCL-2525] Fixing the query to fetch active flows"}
{"gold": "Merge with next condition", "pred": "Fix typo in comment"}
{"gold": "Maybe add it when it is used.", "pred": "fix: remove unused interface"}
{"gold": "More clear naming: NONEXISTENT_ENABLED", "pred": "fix: enable cloudsql_acl scanner (#108)"}
{"gold": "why is this change necessary?", "pred": "[SPARK-1010] [SQL] Fix TypeUtil.scala"}
{"gold": "make a SchemaTypeNameConverter.getTypeNameForEmptyType() and call that here.", "pred": "Fixing a bug in the schema type table."}
{"gold": "Use braces on your conditional structures please", "pred": "[FIX] smarty: fix tinyMCE language plugin"}
{"gold": "Great God, I have a question. This \".nebula_history\" file is used to save history commands. Is there a file size limit? When the file is large, does it take a long time to start initialization (loadHistory)? How did you think about this? Thx.", "pred": "fix(graph): fix the bug of graphd"}
{"gold": "Isn't this the same check as two lines above?", "pred": "Fix a bug in the parser."}
{"gold": "Don't redefine, just import the existing one in `cmdline.py`. :)", "pred": "Fix import error in web/app.py"}
{"gold": "why not call `respond_to?(\"#{name}=\")` from the `if` line?", "pred": "Fixing a typo in the docs"}
{"gold": "This was properly set above as `<target>.runfiles/<workspace_name>` (with a fallback to workspace root dir) but never used past this line.", "pred": "Fix typo in comment"}
{"gold": "Are all these namespaces required for this attribute?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Given this may be used and printed in other ways, isn't `debug` more appropriate?", "pred": "(BKR-102) Fixing the beaker_spec_helper"}
{"gold": "Looks like this is unused? Did you mean to call it when clearing the block journal?", "pred": "kbfsblock: add a comment about the blockDiskStore"}
{"gold": "why named alters? how about this.alerts = alerts?", "pred": "Fixing a bug in ExecutorManager."}
{"gold": "not sure if this has to be here or not tbh", "pred": "fix(api): fix stream leader change (#1648)"}
{"gold": "There's a better fix for this in #1741, which should replace this.", "pred": "Fix typo in harness.go (#105)"}
{"gold": "Use swarm.Address not []byte as type, and construct it from actual byteslice or use swarm.NewAddress if it is constructed from hex-encoded string.", "pred": "Fix typo in comment"}
{"gold": "It would be worth factoring this out to a function, but you don't have to do that here.", "pred": "fix test"}
{"gold": "There's no need for `final` in interfaces.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Isn't this case handled as a custom tag in `Span.SetTag()` below? This switch is only for special tags that actually set `Span` properties.", "pred": "Fix OpenTracing integration (#1000)"}
{"gold": "This shouldn't be changed.", "pred": "quitter: Add missing argument to quit()"}
{"gold": "This one is important `2: I102 copyright year is outdated, expected 2014 but got 2012`", "pred": "global: fix copyright year"}
{"gold": "Are these imports needed (BiConsumer and Consumer)? If they are unused imports, then precommit will fail.", "pred": "Remove unused import"}
{"gold": "Why are we catching and logging exceptions? By doing that we make it look like the job has succeeded and it will be removed from the queue - if we didn't do that then it would stay queued...", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "If there are `@param` tags in docblock, there should be `@return` tag also. (applies for a whole file)", "pred": "BAP-14555: Fix cart controller"}
{"gold": "Is the concept of validators exclusive to IBFT2? I wonder if this category should be more explicitly linked to IBFT2.", "pred": "Fix typo in BesuMetricCategory (#2115)"}
{"gold": "Spotless is configured to reject star imports. Please replace with explicit imports.", "pred": "Fix import"}
{"gold": "Remind me why you are using CUDA vocabulary when naming these variables.", "pred": "Fix a bug in the SYCL backend"}
{"gold": "Please turn the iteration order around (instead of `0...size` to `size...0`). The reason is that this sometimes skips indices when removing an item. You can therefore end up with feeds that have counter 0 and are still displayed.", "pred": "Fix typo in comment"}
{"gold": "this is a behavior change. solid_subset=[] represents an empty pipeline where as solid_subset=None is the full pipeline", "pred": "Fix typo in reentrant pipeline execution (#1378)"}
{"gold": "this is a breaking change, any specific reason you want to do this?", "pred": "Fixing a bug in the error message"}
{"gold": "Blocking: we still want read write separation. Node functions should absolutely not write to the chain store and the interface should reflect that. Only the syncer should have this capability in production code. It should be no problem to keep casting chainForTest to a read-write interface, or doing other function decomposition and automatic casting tricks.", "pred": "fix: remove unused interface"}
{"gold": "The PR description says the lowest on-demand request priority is `2^30`. Why the `-1` here?", "pred": "Increased the default worker queue size to 1000"}
{"gold": "checking health again? I think it is not necessary.", "pred": "Removed unused function"}
{"gold": "Need an `if err == nil {break}` above this line so that we don't log/sleep if the retry succeeds.", "pred": "Typha: Fix typo in log message"}
{"gold": "to reiterate my point above, this class is not the actual provided Promise, but rather something a user can provide a Promise to/with. I think a name like `PromiseProvider` is more appropriate.", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "I guess we can only call this from a post-build function, but we might need to check that this target is to be built? I guess target A depends on B which has a post build. We `plz build :B` which adds C as a dep of A. Won't we queue C to be built even though it only needs to build if A needs to be built? That's kinda why I approached this the way I did. I trust you've thought about this but would be good to understand this a bit better.", "pred": "Add a comment to the add_dep function."}
{"gold": "You should use `isinstance()` instead of comparing the class name to a string.", "pred": "Fix typo in timeout handling"}
{"gold": "Why should audio and video elements always return `false` for `isHidden`?", "pred": "Update isHidden.js"}
{"gold": "This obviously won't work for all the other platforms.", "pred": "Update App.cs"}
{"gold": "Isn't he diamond operator Java7+?", "pred": "Fixed the ManipulationTest"}
{"gold": "Prefer adding a second `positive(String, double)` that delegates down to this three-param version. Using `null` in code is generally Not A Great Idea, and it looks ugly.", "pred": "Fixing a typo in the javadoc"}
{"gold": "This pattern, where we add a new parameter without using it, often indicates to me that we've got a leaky interface or abstraction. I see this pattern _a lot_ in this patch, so wondering you have thoughts about it.", "pred": "Fix typo in comment"}
{"gold": "This seems like an improved pattern :)", "pred": "Fix typo in comment"}
{"gold": "`open_id_authentication` is no longer the name of the function, and it's not OpenID specific", "pred": "Fixing a bug in the user controller."}
{"gold": "This didn't require corresponding changes to the test case(s)?", "pred": "Fix wallet balance refresh"}
{"gold": "A question! I think `string` totally works, but what do you think of `*string` for consistency?", "pred": "Fixing a typo in the task config struct"}
{"gold": "Should this be: `aws.infrastructure.cluster.sigs.k8s.io` instead?", "pred": "fix: import path for metav1"}
{"gold": "Not clear on why this change is correct.", "pred": "Fixing a bug in the computation of the shear viscosity."}
{"gold": "Hi Simon. Whether this should return true depends on what byte buffers are used? The same applies to ByteBufferIndexInput, actually... I don't think you can generally tell whether the ByteBuffers the input operates on come from a mmap call or from somewhere else (even direct buffers don't have to be a result of mmap).", "pred": "LUCENE-2974: fix javadoc"}
{"gold": "All stories in this file also need to have the default padding.", "pred": "Update settings stories to use new storybook format"}
{"gold": "I don't think these asserts are necessary, because `subsurface_find_sibling` already searches in the parent. Or am I missing something?", "pred": "subsurface: Fix typo in comment"}
{"gold": "Should this be `number` instead of `id`?", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "I have forgotten why we thought this restriction is necessary. A user registers a Hive/HBase table with us but is not able to use the table with the registered name in DML. Will UPDATE STATs will be on the original name too (and update stats code will find out registered name and use it for Table_uid?). This was the registration concept is almost like an internal implementation idea, at some point could even be done by some utility program for all existing Hive/hBase tables, and the user need not be aware of it? I am struggling with a user would want to register a table, if they cannot use it by that name.", "pred": "Changes to support HBase tables."}
{"gold": "Should most of these non-globals be static?", "pred": "Fixing a typo in the comment"}
{"gold": "Please do not approve PRs without tests!!!!", "pred": "Fixing test_name_with_middle"}
{"gold": "Now that you handle this in `webenginetab.py` you can undo all the changes in this file.", "pred": "Fix webengineview.py"}
{"gold": "I think we should log the exception to a log file instead of printing it. The current behavior (not catching the exception) should lead to an automatic print of the exception to the terminal/console.", "pred": "Update JavaFXApplication.java"}
{"gold": "These changes to the resource helpers have some more far-reaching implications as they also affect calls made in hive-operator, I believe. It's probably OK still, though. Ideally, the resource helper would not be the one doing the logging, since it cannot know the severity, but that is well beyond something that we should tackle for this PR. I would rather have the hive-operator log warnings than have the syncsetinstance controller log errors.", "pred": "Fix typo in apply.go"}
{"gold": "do you really want to change the behavior on foreign key ?", "pred": "Fix export category table map"}
{"gold": "Looks like my bad. Thanks for fixing!", "pred": "event_batch_destroy: fix memory leak"}
{"gold": "I think \"Don't replace variables ...\" would be cleaner.", "pred": "command: Add a way to specify a command's name"}
{"gold": "Do you validate the possible strings? I've not read the code below but we should make sure if a string is supplied it is validate...", "pred": "Fixed docstring"}
{"gold": "I'd recommend using generateDataDiskName here as well -- might as well benefit from the safety that it gives to protect yourself from future changes to w.ID().", "pred": "Fix disk import workflow"}
{"gold": "qq: do we want to include anything in the name to indicate that it is a position in the manifest?", "pred": "[MINOR] Fix javadoc for ContentFile"}
{"gold": "These logs should probably use the `LOGTAG`", "pred": "Fix VR Browser crash"}
{"gold": "From this, it was clear, that we are using our version of wireguard-go. And now it looks like we are using original packages which is confusing.", "pred": "fix: import path for wireguard-go"}
{"gold": "Any particular reason for this? This potentially will make harder to investigate users issues", "pred": "fix: return error code in fail"}
{"gold": "Do you also need to check if Blockly.localConnection_ is non-null?", "pred": "Fix #1008: Fix bug in block dragging."}
{"gold": "Not really a container, and it's not just about non-config data, not sure of a better description, @myronmarston ?", "pred": "Fix typo in World#include"}
{"gold": "The desktop app will load this fine. on iOS I get `TypeError: undefined is not an object (evaluating '_$$_REQUIRE(_dependencyMap[8], \"stream\").Readable.Readable')` if I change it to `const Readable = require('stream').Readable;` or `const { Readable } = require('stream');` I get undefined errors from the stream on iOS: `[TypeError: stream.on is not a function. (In 'stream.on(\"data\", function (chunk) { return chunks.push(chunk); })', 'stream.on' is undefined)]` What am I missing?", "pred": "Fix import error"}
{"gold": "this is needed since the chunk feeder shares memory across calls to the pipeline. this is in order to avoid multiple allocations. this change mimics the behavior of shed and localstore, and copies the data from the call into the in-memory store", "pred": "fix: typo in mock storer"}
{"gold": "wut. We can do this at the beginning of tests if we want right? Why are we depending on init?", "pred": "Fix import path in test"}
{"gold": "Same trick here IMO.", "pred": "Fix race condition in client.processConnect"}
{"gold": "Should be `@origin = element || origin || POINTER`", "pred": "Fix typo in comment"}
{"gold": "this example needs a fix?", "pred": "fix(upgrade): fix upgrade cstor-spc job"}
{"gold": "Is it safe to assume this surface is a toplevel?", "pred": "Fix crash when closing a view"}
{"gold": "we don't need that function", "pred": "Fix for #1086"}
{"gold": "we'll also have to think about adding \"Windows Server 2014\" or whatever they come up with later.", "pred": "Add a new platform"}
{"gold": "curious do we have an API to fetch an inactive flow?", "pred": "[hotfix] Fix the javadoc of ExecutorLoader."}
{"gold": "This branch is not needed anymore because every `vnode` that passes through `h` in compat or core will have the `$$typeof`-property now .", "pred": "fix(vdom): fix typo in upgradeToVNodes"}
{"gold": "Did you mean to use `hasAttribute`? You shouldn't. This does not improve performance and it messes with the readability.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Please import modules and not classes (except for Qt stuff).", "pred": "Fix import"}
{"gold": "Hm... why do we have a \"DummyJavaNode\" in src/main? Looks like, this should have gone into src/test....", "pred": "Fixing dummy node"}
{"gold": "This seems meaningless. If we cannot add any info let us remove this.", "pred": "fix: add missing license header"}
{"gold": "Can you rename `Ports` to `PortsUnsafe`?", "pred": "Fix typo in comment"}
{"gold": "This feels like it could be moved out to your first gem!", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "The expected behaviour for `poll` would be to match what `Deque` does, which is: > Retrieves and removes the head of the queue represented by this deque As such, you shouldn't need the `RequestId` here.", "pred": "Fix typo in javadoc"}
{"gold": "This is super minor, but it'd be nice if this iterated over an arbitrary number of array inputs.", "pred": "Added a couple of missing methods to the ArrayUtil class."}
{"gold": "What is the problem here? The commit message has strange wording \"readlink is defined with restrict pointers\": do you mean \"restricted\"? Is that a well-defined language term? I'm not sure what it means.", "pred": "i#1676: fix a typo in the comment"}
{"gold": "Why are we not wrapping here?", "pred": "Update NameFormatter.java"}
{"gold": "I though that all data objects are being unified in the fashion where all default values are initialized in constructor, are not they?", "pred": "fix cs"}
{"gold": "Does this file actually need to be committed to git? Having to run `make generate` is rather tedious on each PR and it conflicts easily.", "pred": "chore(deps): update flux-core to 0.11.0 (#100)"}
{"gold": "We don't need this anymore, as Google's library handles various auth mechanisms for us. We'll be less explicit about why we're failing but we gain support for several authentication methods- swings and roundabouts!", "pred": "Fix typo in comment"}
{"gold": "No need to speficy attribute here. Moreover in yaml it is default to use lowercase names.", "pred": "fix: add missing fields to config"}
{"gold": "In general I'm a trying to understand the reason behind this PR. Looks like if a blob (name) already exists we check if the contents are identical? In what scenarios this is not the case? When we want to publish a package/asset that has changed but still we want to use the same version?", "pred": "Fixing a build break"}
{"gold": "Can rename `req` to be `opener`, since that is the object, and it wraps `req` internally?", "pred": "Fixing the regex for the netblocks"}
{"gold": "@MichaelDCurran, thoughts on adding a breakpoint format field attribute? It seems almost app specific, but I guess it does seem odd abusing line-prefix. Is there any more generic concept here?", "pred": "Fixing a bug in the getFormatFieldSpeech function."}
{"gold": "This would return a tuple of two dictionaries. You need to combine them and return a dictionary", "pred": "Fixing typo in docstring"}
{"gold": "What do you think of moving the example to the help text of the prompt? and the prompt itself can be \"What is your application's GitHub repository URL?\"", "pred": "fix: remove unused import"}
{"gold": "Break out tests for events into their own tests rather than placing them in other ones. That makes it easier for us to figure out where problems lie and to do a TDD-driven implementation over new APIs.", "pred": "Fix TracerTest"}
{"gold": "Nice use of std::distance. I'm a bit worried about first += 9 though.", "pred": "fixing a bug in the parsing of atom labels"}
{"gold": "Shouldn't this be `app.kubernetes.io/managed-by` as prometheus-operator manages this resource, but this resource isn't a part of prometheus-operator?", "pred": "Update kubelet.go"}
{"gold": "As long as we're being extra-vigilant about NREs, should we check that `httpMethod` and `requestUri` are not null?", "pred": "Fix typo in comment (#1005)"}
{"gold": "No need to have `xrc20` alias", "pred": "fix: fix import path"}
{"gold": "the naming convention I'm been adopting if `_type` for instances of these classes. So maybe `context_config_type` is a better name for this fn", "pred": "Fix typo in pipeline definition"}
{"gold": "Don't call it GPU mining, call it `externalMining`, here and throughout.", "pred": "Fix typo in BlockMiner"}
{"gold": "`within this with` typo, should be `within this width`", "pred": "Update config.php"}
{"gold": "how come this is false?", "pred": "Fix typo in comment"}
{"gold": "How about `Object.prototype.toString`? Or using the `typeof` operator?", "pred": "fix: node-fetch is not a function"}
{"gold": "I know @jzila suggested this, but I disagree: you're really not supposed to save a context in a struct. Can you get by with just saving the `Done()` channel instead? The `ctx` should continue to be passed around explicitly.", "pred": "Fix typo in comment"}
{"gold": "This check isn't right though.", "pred": "Fixing build break"}
{"gold": "maybe `toolkitVersion` instead? It doesn't necessarily have to be called that in the generated code, but in the view model classes, I think it makes it clearer that it is the version of toolkit itself.", "pred": "fix(java): fix typo in DynamicLangXApiView (#102)"}
{"gold": "the response data was added intentionally in #612, i think we could keep the `setFileState` stuff here as a special case, at least for now ", "pred": "fix: typo in xhr upload plugin"}
{"gold": "This isn't really easy to read.", "pred": "Fix race condition in stream.Read"}
{"gold": "This line changed due to go formatting. Format was not there earlier.", "pred": "Fixing the indentation"}
{"gold": "The name \"Without\" in code is a little nebulous. Maybe something more descriptive like TrimPrefix or StripPrefix or WithoutPathPrefix or something like that. (Thoughts?)", "pred": "Fix typo in comment"}
{"gold": "is this test in the move tests? I see what you mean then - it works, but I wonder if we won't lose track that it's being tested here.", "pred": "Fix test"}
{"gold": "I'm not sure if this wanted to be `json:\"tags\"` (which I'd set in my PR) or `json:\"tag\"` that someone elses PR had set. Given that the rest of the fields had their JSON field name set to the same as the struct field name, I opted for `tags`.", "pred": "fix typo"}
{"gold": "since the logic here and in `Proposal` is exactly the same, do you think it makes sense for us to include it elsewhere? I am not opposed to duplicated code when it makes sense, but the reason I first identified this was that I was looking for code in NCR::WorkOrder that was not specific to Work Orders. Seems like fiscal year logic might be helpful for reporting for other clients. In that case, we'd want this scope on those client data classes as well. Might be wrong to include this in the FiscalYear mixin, but it does seem like it should be outside of Proposal and WorkOrder. Does that make sense?", "pred": "Fix typo in budget approver email"}
{"gold": "there is no static method as a go between -- how does this work?", "pred": "Fixing the influxdb writer subscriber"}
{"gold": "Can you please change the name of this class to be something else?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "I think we might prefer generalizing the interface rather than creating an exception. Current design of `h2o_next_token` assumes the input to be a comma-separated list, and allows the caller to specify a different separator when parsing a nested list. As I understand, what we are trying to attain in this PR is to have a way of parsing a flat list of semicolon-separated list. Assuming that is the case, I think it would be better to change the API of the function to accept two separators (i.e. inner and outer), where for our existing use-cases `outer` would be `,`.", "pred": "Fix a bug in h2o_strstr"}
{"gold": "why not recycling? I Lru cache now recycling?", "pred": "Fix typo in comment"}
{"gold": "Why it is now called `PaymentVersionV3`?", "pred": "fix: typo in comment"}
{"gold": "changed for debug purpose?", "pred": "fix: fix the bug of secret sync"}
{"gold": "@cijothomas I needed a way to set the Exporter.ParentProvider when the Processor's gets set. Internal to SDK though.", "pred": "Fix typo in comment (#2087)"}
{"gold": "Talking through this scenario with @srividyacb and she's wondering if there should also be a check of `(from_trunk && node_based_graph.GetEdgeData(eid).flags.road_classification.IsLinkClass())` as highways with trunk classifications can also have this scenario.", "pred": "Fix compilation error in extractor"}
{"gold": "where does `master_certname` come from?", "pred": "(maint) Add q_puppet_agent_version to beaker"}
{"gold": "The line breaking is unnecessary.", "pred": "Update __init__.py"}
{"gold": "why not enable split by space here ?", "pred": "fix bug in dataset loader"}
{"gold": "Shouldn't the operator be && ?", "pred": "Update fpga_mgmt.c"}
{"gold": "My best guess is that you want to use host.name in these parts to get the name of the host ?", "pred": "Fixing the vagrant tests"}
{"gold": "IMO this edge case handling could remain here, just instead of overwriting the `n.nodeType`, the `makeEdgeType` method of `n` should be called, so `n.nodeType = nodeTypeEdge` -> `n.makeEdge()`", "pred": "fix: unmarshal nodeType"}
{"gold": "Just wondering... The two kinds of notifications are now quite different (Channel, text, maybe even icon). Would it make sense to extract the auto download notification to a new class instead of handling everything in the existing `notificationManager`? I have not checked if this will lead to a lot of code duplication, though.", "pred": "Fix bug in DownloadService"}
{"gold": "Do we need to put this on the Call? We only need the API communication between the Encoding and the Transports which is currently done through the Transport.Request. The Call is used by users right?", "pred": "Fix typo in comment"}
{"gold": "`ctx` is unused in GenerateAPIKey", "pred": "Fixing a bug in the filter function"}
{"gold": "Can you judge the type of error?", "pred": "Fix comment"}
{"gold": "Much simpler than a weird and confusing ``convolve`` call!", "pred": "Fix grid interface"}
{"gold": "Huh, this seems weird to me... Surely the suspenders render was called again in order to get the new `<div>Hello second 2</div>` output... Imma take a peak at these tests to understand what's going on", "pred": "fix test"}
{"gold": "Since this is just a helper function to create text, perhaps this could live in a helper? I noticed that we have a few other error/message creators in the application controller as well, but I think this type of function should be re-factored to be part of a helper.", "pred": "Fixing a bug in the failed_destroy_error method"}
{"gold": "Will this mess up parsing the messages by other editors? (vscode, vim ...)", "pred": "Fix typo in pycodestyle configuration"}
{"gold": "Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "pred": "Fixing the path to the Gemfile"}
{"gold": "Why can the pool be null?", "pred": "Fixing a bug in the FilteredStreamAdapter"}
{"gold": "It might be good to have a note here: > work-around for issue #7562 allowing us to differentiate presentational lists from interactive lists (such as of size greater 1 and ARIA list boxes). In firefox, this is possible by the presence of a read-only state, even in content editable.", "pred": "Fix typo in docstring."}
{"gold": "This set of changes is the one part of this that I'm not completely sure is valid. Can someone look over this to make sure I got the E's right?", "pred": "Fixed a typo in the javadoc."}
{"gold": "There doesn't seem to be a reason to copy this here.", "pred": "Fix bootstrap_attempt_legacy"}
{"gold": "We've avoided including h2o headers in BPF programs because it's a runtime dependency. However, IIRC, this is because h2olog was maintained in the separate repository so that h2olog did not know where h2o was installed. Now h2olog can use `H2O_ROOT`, we should add it to BCC's `cflags` in order to include h2o headers in BPF programs.", "pred": "fix build"}
{"gold": "I think the docstring here should include the CLI arg `--alert.query-url` just to make it clear to users which setting this uses.", "pred": "Update thanos-ruler-crd.md"}
{"gold": "Same change just above?", "pred": "Fix typo in comment"}
{"gold": "Could you check the result content rather than just the number of search results please? For example with this test if the search engine suddenly starts returning \"latin n\" for both queries, we won't know about it.", "pred": "Fix tests"}
{"gold": "nit: I think that `workloadID` should suffice for this test... that's what we'd be issuing anyways", "pred": "Fix test data to use correct domain"}
{"gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "pred": "Add spec for mentor edit"}
{"gold": "We should have a rule to detect identical catch branches", "pred": "Fixing ClassTypeResolver to not throw an exception when the class is not found."}
{"gold": "remove these from the targets file.", "pred": "Fixing the default value of MaxClients in the task"}
{"gold": "now that we have the signature in the hive messages, it might be that this must be drastically reduced, since there are limits on the protobuf reader/writers i believe", "pred": "fix: import path for protobuf"}
{"gold": "I recommend that we move this to be optional, as other users might not need it. Can you look at `OPTIONAL_PACKAGES` section, around line 68?", "pred": "Update requirements.txt"}
{"gold": "I usually set idea to never use wildcard import such as `import java.util.*;` Now i use setting from javaslang standard.", "pred": "Remove unused import"}
{"gold": "Where is host['ips'] coming from?", "pred": "Fixing the issue with the ip address being set to 127.0.0.1"}
{"gold": "oh! missed a `:` here; let me fix that; also can get rid of the intermediate variable", "pred": "userns: fix fuzzing"}
{"gold": "Is this necessary?", "pred": "Fixing the status text spec"}
{"gold": "I'd create a different method for each render section.", "pred": "fix: \u4fee\u590delement-react \u7248\u672c\u95ee\u9898"}
{"gold": "Instead of storing the revert flag in the tracer is it possible to use org.hyperledger.besu.ethereum.mainnet.TransactionProcessor.Result#getRevertReason? (via org.hyperledger.besu.ethereum.transaction.TransactionSimulatorResult#getResult)? If a TX reverts without a reason do we get an empty revert reason or a revert reason with zero bytes?", "pred": "Fix typo in EstimateGasOperationTracer"}
{"gold": "I think this should test with and without container reuse if that is implemented in this PR. Probably just make this test parameterized.", "pred": "[SPARK-35805][SQL][TESTS] Fix TestSparkOrcReader"}
{"gold": "These modifications allow BaseFile to translate into a SparkRow with the specID as a column", "pred": "Fix a bug in the projection code."}
{"gold": "is this something we've been missing this whole time?", "pred": "fix(read-preference): fix read preference inheritance"}
{"gold": "nit: this is a package-wide constant so better to narrow the scope like `allEventsSign`.", "pred": "Increase default timeout for analysis query"}
{"gold": "There seems to be some repetition. Does a local function make this code shorter overall?", "pred": "Fixing the thrift generation script"}
{"gold": "Might be cheaper to reuse the `null` assignment of line 313 and set `isHydrating` to null instead WDYT?", "pred": "Fix typo in diffElementNodes"}
{"gold": "Revert this blank line", "pred": "Fixing a typo in the comment."}
{"gold": "This was introduced recently for the Hadoop 3 upgrade. Copy/paste error but definitely causing some of the new test failures.", "pred": "SOLR-3276: Fix test failure due to missing HDFS cluster"}
{"gold": "I think we should only need to do this for `:approve` since we are using `authenticate_user!` for all other actions and that checks for disabled client", "pred": "Fix proposal policy"}
{"gold": "I wonder if we should create new tests for header checks; here for instance we're mixing querystring and headers. Thoughts?", "pred": "Fixing test"}
{"gold": "We should be able to add sensitive by hard-coding the parameters, same as you put into the metadata in apply_helpers.", "pred": "(maint) Fix custom_facts task metadata"}
{"gold": "Why do you think that it is necessary to create this class?", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "replacing the `1` with `io.SeekCurrent` may be good here", "pred": "Fix typo in comment"}
{"gold": "nit: perhaps this file would be better named `jwks_source.go` ?", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "It will be helpful to specify the intended priority as well for the properties within this file.", "pred": "Add a constant for the default value of the plugin load override property."}
{"gold": "Make this private and update all the public functions to not take this argument. The variable you set below should also be private, then in the tests instead of passing the variable in to the function just update the variable. We don't want to expose the testing implementation in the public api if it can be avoided.", "pred": "Fix import path in osinfo_mock.go"}
{"gold": "Do you now why is it a specific table name is used as a default?", "pred": "HIVE-10580: TPCDSQueryTest.test_1000_queries_with_hive_partitioning fails on trunk (<NAME>, reviewed by <NAME>)"}
{"gold": "If all you're doing is checking for the existence of a directory as your \"temp\" directory, why does it matter what OS you're on?", "pred": "Fixing the build"}
{"gold": "nit- would be cleaner to import it once", "pred": "Fix import path"}
{"gold": "Looks like there is a closing parenthesis `)` missing here.", "pred": "Update README.md"}
{"gold": "this one bothers me. There are many places where this one is written to for an error message and just a single callsite is changed.", "pred": "Fixing bug in pair_tlsph.cpp"}
{"gold": "You can put this in `kbfsOpsInit()` in you want, so we don't have to call it in every test.", "pred": "kbfs: fix test"}
{"gold": "`ARM_32` is what clients define as an input to DR, and is not always defined internally: we use just `ARM` to mean AArch32.", "pred": "i#1551: fix typo in comment"}
{"gold": "s/for use/to use for/", "pred": "Fixing a typo in a comment."}
{"gold": "` $event->getAvatarFilename()` this function return `string` or `null`. In this place ` $event->getAvatarFilename()->getValue()` return `Fatal error `", "pred": "Fix user created event projector"}
{"gold": "why not creating a new error type for server's own resource limit exceed error and do conversion within rpc interceptor?", "pred": "Fix import path for serviceerror (#100)"}
{"gold": "Could be a timing thing here. When options are created they'll copy the ref for the current default propagator. If user sets through SDK the global propagator after that, it won't be reflected. Could leave it null here and then when it is used in instrumentation do `options.Propagator ?? Propagators.DefaultTextMapPropagator`. It would be a slight perf hit but it makes it hot-swappable.", "pred": "Fix typo in AspNetInstrumentationOptions (#1047)"}
{"gold": "Unrelated file. Please remove from PR.", "pred": "Fix typo in TransactionSimulator"}
{"gold": "Careful: you only want two newlines after the final header message. (That indicates the end of headers and the start of data.)", "pred": "Fix bug in http request processing"}
{"gold": "This will not work on Python 3 (to which we are transitioning) because `.content` is bytes, not a str. Can you make the pattern a bytes object as well (like so: `b\"pattern\"`)?", "pred": "Update mitmproxy-script-change-https-to-http.py"}
{"gold": "This was to allow the tests to pass when the order of the required was different. Silly, but we don't have an easy way to check for \"equal but order doesn't matter\" in chai.", "pred": "Fix aria-controls required attribute"}
{"gold": "maybe say \"returns the default cost method that returns an object of cost 1\".", "pred": "HbaseDelete::synthPhysicalProperty() was missing a return statement."}
{"gold": "I believe these rules will be enforced both (1) on egress from a local workload, and (2) on ingress **to** a local workload. Right? I understand that we definitely want (1), but do we really want to enforce (2) as well?", "pred": "Fix comment"}
{"gold": "Use `response.asJsonObject()` instead. Also, use `put()` instead of `putOpt()`, `null` as a value is fine.", "pred": "Fixing the SalesforceNetworkPlugin to use the new plugin architecture"}
{"gold": "Are you sure? We've changed it during an introduction of the IME support.", "pred": "#1000 - Fixing test"}
{"gold": "I think here we want the use of `empty()` to take care of empty strings. If you put `dql_filter: ''` in your YAML config ... this will add `->andWhere('')` and it will fail, right?", "pred": "Fixing the sort field"}
{"gold": "this is golang's named return, err is defined, `return` is equivalent to `return err` the current code has no problem", "pred": "fix: p2p broadcast message latency metric (#1029)"}
{"gold": "I don't think this is right; in Rust terms it's like a `&mut String`, in Java `StringBuilder` - it's not a return value from the function which is what `(out)` is for.", "pred": "ostree-gpg-verify-result.h: Fix typo in docs"}
{"gold": "If the label is not binary, should we rename this function?", "pred": "fix bug in binary_cross_entropy (#2567)"}
{"gold": "This is very-very bad idea because of its performance impact", "pred": "Fixing jmeter executor"}
{"gold": "WHY U NOT SORT IMPORTS?", "pred": "Fix import path"}
{"gold": "Put a comma after the last item of a multiline hash.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "How come we need ``Dimensioned`` in the top-level namespace?", "pred": "Bump version to 1.7.1"}
{"gold": "excess whitespace through plugin.", "pred": "npc indicators: fix typo in plugin description"}
{"gold": "What is the problem here? I feel we used this in a lot of places.", "pred": "Fix typo in comment"}
{"gold": "Update the docstring.", "pred": "Fix a bug in RPN"}
{"gold": "delete the empty line \"github.com/pkg/errors\" should be grouped with other third party packages same for the rest", "pred": "Fix import path in test"}
{"gold": "Assigning capabilities to the field here is not the best idea. Semantically this field contains the capabilities returned by the browser after session start. So here we sould better amend capabilities and return them from `init` method to pass later to `startSession` method (that will assign the capabilities returned by the browser to the field).", "pred": "JasonLeyba: Fixing a typo in RemoteWebDriver.java"}
{"gold": "Is this a breaking change, or is the API private?", "pred": "Fix typo in RSpec::Core::Reporter#stop"}
{"gold": "I don't think we need this dependency in this project right now", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "I don't think this is necessary since `CommonLabels` is a public func and every component name is also public constant.", "pred": "fix(brokercell): fix typo in brokercell label key (#1085)"}
{"gold": "The `_example` field should be updated to include an interpreter with an array value.", "pred": "(maint) Add missing _plugin: true to bolt.yaml"}
{"gold": "Put this in the godoc of SupportedProtocols instead. Preferably we would just use one map though. Why not just use this one?", "pred": "Update acme.go"}
{"gold": "I'd feel a little safer if the first argument were a string, not a *string unless there's a particular reason for making it a pointer.", "pred": "Fixing a bug in the stats cron container"}
{"gold": "Can you please revert changes to files in the `thoughtworks` package? This is legacy code and we will eventually phase out RC.", "pred": "Remove unused import"}
{"gold": "You can safely revert changes to this file.", "pred": "[java] Remove unused import"}
{"gold": "This deletion is unnecessary.", "pred": "fix anchor_head.py"}
{"gold": "I'm not a huge fan of this overloading of the prop; accepting very different types of arguments for props like this can be confusing, and wasn't part of the IB. I understand wanting to import the SVG directly, but the IB suggests using `${global._googlesitekitLegacyData.admin.assetsRoot}${userInputSuccessImage}` as the `src`/`smallImage` value here. It'd be great to refactor this to accept components directly in the future, but let's do that all-at-once rather than this hybrid approach that makes the API less clear.", "pred": "Fix small image size in notification."}
{"gold": "I've had this happen recently with IntelliJ, was this intentional?", "pred": "SOLR-14889: Remove unused import"}
{"gold": "Order(1) vs Order(logN) -- not sure it's measurable at the ~200 element size of the table. All of the published comparisons start at ~1000 elements.", "pred": "Fix build error"}
{"gold": "I don't know about this aliasing and 'factory'. Previous version was rather straightforward: `location.CreateLocationResolver`. Perhaps `location.CreateResolver` would be even better? What do we actually gain here from moving DI to a separate sub-package?", "pred": "fix import"}
{"gold": "Use `UpperCamelCase` for function names", "pred": "Fixing a bug in the Engine::SetCallBack function."}
{"gold": "I'm not 100% sold on this idea but I like it in general. Nice compromise between using the 'Date' constructor where possible and falling back to the pre #5880 behavior when it makes sense. However, instead of `Number(value) < 0`, let's do `Number(value) < MIN_YEAR` because `new Date('-2017')` is perfectly valid in JS and I don't want to break the date behavior.", "pred": "Fixing a bug in the date cast"}
{"gold": "Remember to close SOLR-11877 after this", "pred": "SOLR-11877: fix typo in javadoc"}
{"gold": "this change should be reverted", "pred": "Fix a bug in Identifier::toString()"}
{"gold": "This function signature is a bit complicated, some parameters are IN type (stopLoop which is modified from outside), others are OUT (registeredEvent channel which is modified inside function) I suggest the following signature -> SubscribeToRegistrationEvent(identityAddress) returns registeredEvent chan of type (RegisteredEvent not int), Unsubscribe func(), error (in case of any error). That way caller can always cance subscription if needed and check for any errors. Also - unsubscribe function hides any internal details how subscribtion is really implemented", "pred": "Fix typo in comment"}
{"gold": "`.wav`?! cannot we use something slightly more modern and compressed instead? :) I dunno, like `.mp3` or `.aac` or `.ogg`...", "pred": "fix(grunt): fix gruntfile"}
{"gold": "Wouldn't a single signal call be enough? (without the boolean even)", "pred": "Fix client_swap()"}
{"gold": "I suspect that this whole block, which is going to be repeated a number of times, should probably be in a helper. I guess it would need to be given the object and the title and could probably figure out everything else from that?", "pred": "Fix bug in note view"}
{"gold": "Should we expose this attribute in the Asciidoctor.js API ?", "pred": "Add a comment to the Document class"}
{"gold": "I think contains on `Multimap` was broken - it should return true if one of the values is associated with the key? It that right", "pred": "Fix Multimap.contains"}
{"gold": "delete this line", "pred": "tidb-server: fix TiConfiguration default isolation read engines (#10089)"}
{"gold": "Presumably we no longer need `force: true` here.", "pred": "Fixing test setup"}
{"gold": "HIP runtime is compiled using a C++ compiler. So comparison to both NULL as well as 0 does not make sense. Just comparing to NULL is sufficient.", "pred": "Fix hipHostAlloc to use correct pitch"}
{"gold": "these urls are still in `a` tags so we should probably include these links separately for a non-HTML version", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "That's fine though, meaning that you can send to this channel under the server lock. The internalSendLoop will pick up the change when the server lock is released (if loop is blocked trying to grab the server lock). Even the way you do it here (releasing the lock, sending, then reacquiring) does not guarantee that the internalSendLoop will have time to refresh in that interval.", "pred": "Fix typo in comment"}
{"gold": "The name `enableDownloading` implies this is a boolean capability. How about `downloadDir`?", "pred": "SimonStewart: Fixing a typo in the CapabilityType interface"}
{"gold": "Found one internal team is using this method. Will coordinate with them about the migration solution.", "pred": "Added a method to get the default validator name."}
{"gold": "The field `HttpServerErrorCodes` should be called `HttpServerErrorStatuses`", "pred": "Fix typo in comment (#1047)"}
{"gold": "Can you please make each of these in a separate line. It will be easier to keep them sorted, and add/remove.", "pred": "Update version to 0.1.1"}
{"gold": "should we error instead of silently ignoring the `cleanup` param? it defaults to `false`, so someone must have explicitly set it to `true`", "pred": "SOLR-10006: Fix typo in ConfigSetsHandler"}
{"gold": "There is no specific requirement that the root be called `root`, just that there is a single root directory and that it be the first entry in the zip.", "pred": "archive/zip: fix typo in comment"}
{"gold": "perhaps we should encapsulate this logic in a helper method w a test?", "pred": "Add a link to the new user registration page"}
{"gold": "Now that we're only using this repo as a Gem you shouldn't need to `require` an expanded local file path like below.", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "This isn't necessarily a year. It may be months, days, or hours. Can we return `intValue()` directly instead?", "pred": "Fix typo in Timestamps javadoc"}
{"gold": "this is redundant because it gets logged immediately on entering the handleContainerChange function", "pred": "Fix a bug in the managed task event loop"}
{"gold": "`ds.GenericDeploymentConfig.DeploymentNotification` in L128 is nullable.", "pred": "fix: typo"}
{"gold": "this shouldn't be exposed here - this class isn't a carriage for this - its used internally to determine if/how we can mine.", "pred": "Fix CliqueMiningTracker"}
{"gold": "It's fine to leave these checks in. It'll make the exception come from `FirefoxDriver`, and that's probably clearer to a user.", "pred": "JariBakken: Fixing a typo in FirefoxDriver."}
{"gold": "We don't want to include the `IntegrationSpecHelper` for models...mind moving this line out of the loop to be `config.include EnvironmentSpecHelper, type: :model`?", "pred": "Add helper for controller specs"}
{"gold": "Please check the return on these.", "pred": "Fixing test"}
{"gold": "Do we need `==` for true?", "pred": "fix(storage): fix storage.add_tarball"}
{"gold": "Changing the default value may cause BC-breaking. Suggest changing this value in config.", "pred": "[Doc] Fix typo in BaseEMAHook (#1000)"}
{"gold": "how does that happen?", "pred": "[simple_config] fix slider position"}
{"gold": "This is gross/clever. :-)", "pred": "fixing import"}
{"gold": "Take a look at the name of this file. Definitely copy and  ", "pred": "Fixing test_zh_cn_locale.rb"}
{"gold": "Can you check with @mahebbar how to work this error. Should be different from 404.", "pred": "Update volume_info.go"}
{"gold": "Do we still need the upper bound `<3.9`?", "pred": "[SPARK-29615][ML][PYSPARK] Upgrade pyspark to 2.4.3 in setup.py"}
{"gold": "Does this mean `vendor/bin/psalm` is not a symlink (or whatever equivalent Windows has for symlinks) on Windows?", "pred": "Fix psalm"}
{"gold": "@lpabon having a separate package name `aws_test` allows to test the package as if the tester was an external package. If the test package name is the same as the package being tested, the test package can also use methods and variables not exposed to the eventual user.", "pred": "Update aws_test.go"}
{"gold": "The exporter should still be able to test these histogram instrument kinds, right? Is there another reason to remove these?", "pred": "Fix typo in e2e test (#1147)"}
{"gold": "should this increment eval.Round somehow?", "pred": "Fix typo in comment"}
{"gold": "Although this change looks good. Maybe there are other inconsistent cases too?", "pred": "Fixing a bug in the response class"}
{"gold": "This is a way better method name.", "pred": "Fixing the helper method name"}
{"gold": "Prefer single-quoted strings when you don't need string interpolation or special symbols.", "pred": "Fix typo in new_language_confirmations_controller"}
{"gold": "I was wondering if this should allow per role specification, instead of (or in addition to) a generic \"allowed everywhere\". So you could do: `{ separator: ['aria-valuenow', 'aria-valuemin', 'aria-valuemax'] }`. You could still allow the array, and you could add a wildcard option for the \"generic\" case you've got now: `{ '*': ['always-allowed'] }`.", "pred": "Fixing a bug in the validator"}
{"gold": "I'm confused by the name. The string was a Hive string but it isn't any longer? Why should we care? (I imagine I'll find the answer later... there is some different semantic that we want downstream...)", "pred": "Fix for Solaris Studio 12.4 compiler warning 1506"}
{"gold": "Could you please leave the explicit imports?", "pred": "Fix import"}
{"gold": "Why need alias?", "pred": "fix import"}
{"gold": "Shouldn't this be a `libfs.nullIDGetter` (exported, of course)?", "pred": "kbfs: fix test"}
{"gold": "I dislike the messages.go pattern; the strings are only used once and make more sense in context. The other two added reportErrorf() calls in clerk.go have inline strings.", "pred": "Fix typo in error message"}
{"gold": "Seems we don't need it anymore.", "pred": "fix(graph): fix bug of fetch vertices executor (#1637)"}
{"gold": "This might cause problems with the weird way we publish Guidance and Groups in the UI. We will have to make sure that UAT is thorough.", "pred": "Fix typo in guidance model"}
{"gold": "this default needs to be on order 1 minute, I'm not sure why we defaulted to 1 hour below...", "pred": "Fix typo in comment (#109)"}
{"gold": "I figure to make `{env.*}` work, right? I can't think of any other placeholder that makes sense here", "pred": "Fix typo in comment (#1006)"}
{"gold": "Why change the port from 0 to getAvailablePort()?", "pred": "Fix the test case of meta server (#1347)"}
{"gold": "For me would be great don't repeat timeout sending in every get_locator call. Looks like it should be sent into LocatorsManager init. And possibly it should me non mandatory, something like that: `def __init__ (self, locators, timeout=60):`", "pred": "fix test"}
{"gold": "I feel like since now we don't initiate the `opts.projectName` with `opts.ProjectName()`, which means `opts.projectName` and `opts.ProjectName()` they don't necessarily equal to each other, we need to also substitute all usage of `opts.ProjectName()` within `Ask()`, `Validate()`, and `Execute()` to `opts.projectName`. Otherwise if `-p` is set, `opts.ProjectName()` will get expired.", "pred": "fix: bind project name in NewGlobalOpts"}
{"gold": "why do we thinkg that an empty string is ok to return from this method? I think the null should never be passed in here in the first place", "pred": "Fixing a bug in ByteArrayToHexViaLookup32Safe"}
{"gold": "nit: can remove this `else` since we return from the condition above.", "pred": "fix(utils): fix getNodeFromTree to return the actual node"}
{"gold": "You missed `Write<T>(...)`! I'm kidding ofc.", "pred": "Fix typo in comment (#1055)"}
{"gold": "Was there a customer who had this set to an empty string?", "pred": "Fixing bug in subscription upcoming invoice updater"}
{"gold": "I know we have the `reporter` spec below, but what about a unit test for this to explain reasoning behind logic? If I were going to update this decorator, I would assume it wasn't covered by tests because there is no unit test.", "pred": "Fixing the approver email address method"}
{"gold": "it's better to be : void attach(String name, Part part);", "pred": "[resteasy-jaxrs] Fixing javadoc"}
{"gold": "I didn't see where the IOException can get thrown, is this just to match the V1 reader?", "pred": "Fix javadoc"}
{"gold": "We normally suppress this warning with `RDUSED_PARAM(forceRDKit)`", "pred": "fix a bug in the 2D coords code"}
{"gold": "What if `Game::getPlayerByNameWildcard` had not been called before. It would not find a player, wouldn't it?", "pred": "Fix crash in getPlayerByGUID"}
{"gold": "Why upper case \"R\"?", "pred": "Fix typo in ApplicationsSidebar"}
{"gold": "Does this need to return an error or could it return `false, nil`?", "pred": "fix(cli): fix relative dockerfile path (#1825)"}
{"gold": "Can you not change those scopes in public API classes? This applies here and in other places -- protected changed to package-scope for source is not really an API-compatible change.", "pred": "LUCENE-3885: fix javadoc"}
{"gold": "this parameter is only used in POST, please use `getRequest()->request->get('...');` Thanks", "pred": "Fix missing translation in admin"}
{"gold": "Problem number 1: Scoped packages would have a `/` character here. Changing this to `validatePackage` resolves the 403.", "pred": "fix(web): remove unused import"}
{"gold": "I don't quite get why there would be key errors: ``deep_mapped`` is a clone of ``self`` and ``k`` comes from ``self.items()`` so why would the key ever be rejected?", "pred": "Fixed bug in deep_mapped"}
{"gold": "this chain ID determines only from which chain to withdraw, therefore your changes do not accomplish what you want them to accomplish. You'll need changes to `func (aps *hermesPromiseSettler) Withdraw(chainID int64, providerID identity.Identity, hermesID, beneficiary common.Address) error`. The method probably has to include two chain ids: to and from. Currently, the method internally uses: `aps.config.L1ChainID` -> the chain to withdraw to `chainID` -> the chainID that was passed as the chain that the withdrawal is originating from.", "pred": "fix: withdraw endpoint"}
{"gold": "If instead we had `TraceContext.extract` return a bool value as a second return value, we could avoid the byte array comparison in `TraceID.IsValid`. Did you consider that alternative?", "pred": "Fix typo in tracecontext.go (#107)"}
{"gold": "here shouldn't we use `depotFreeLimit`?", "pred": "Fix depot chest max items"}
{"gold": "Could we use the Rails application's secret token instead? Do we actually need our own here?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "so should be fixed here also", "pred": "[SPARK-35235][PYTHON][TESTS] Fix the test case for groupby"}
{"gold": "I would just remove this assert as it's going to get un-maintainable with a long list of valid sizes. Ditto below.", "pred": "Fix typo in comment."}
{"gold": "`HostDataDir` is misleading. Can we rename it to something more relevant ? The constant should also be moved up and reused as necessary.", "pred": "fix(config): fix default config"}
{"gold": "I still feel like we are double-counting the outer IP header here (once in `defaultMTUGRE` and once in `ipsecESPOverhead`) but I'm not that familiar with IPsec.", "pred": "Fix default MTU"}
{"gold": "Not sure what benefit we gain by extending BaseProcessor here, as this seems to be defining a new OnEnd method. Could we modify MeasurementItem to have all the things, and then MeasurementProcessor can be simply extending BaseProcessor<MeasurementItem> (not blocking. just noting some observations in the PR :) )", "pred": "Fix MeasurementProcessor (#2554)"}
{"gold": "This change was not really intended but made by the linter of VS Code. And looking at other packages this looks like a best practise to place interal packages on the top and gh imports afterwards.", "pred": "Fix import path for ddevapp (#1268)"}
{"gold": "This seems like a more appropriate message under `ListenAndServe`. WDYT?", "pred": "Fix typo in comment (#108)"}
{"gold": "Is this not required?", "pred": "test: add test for basic auth with wrong credentials"}
{"gold": "We should start thinking of an object that encapsulates this information :) we might need more arguments in the future.", "pred": "Fixed #1055: The search form is not submitted when the search button is clicked"}
{"gold": "Given that we are (conceptually) searching across multiple self-dependencies, all we can say is that we didn't have a self dependency in which *both* source and dest masks were correct. Since the spec doesn't imagine this case, the valid usage statement assume we can differentiate only wrong source from only wrong dest within a *single* self-dependency -- which we can't across multiple (at least not meaningfully)... so we always return both the source/dest VUID's if we can't find a self-dependency in with *both* are correct.", "pred": "layers: Add test for vkCmdPipelineBarrier with invalid src/dst stage masks"}
{"gold": "rename? MiningCoordinator always exists", "pred": "Fix typo in EthMiningTest"}
{"gold": "Here would be the same case you don't need to call `loadConfigs`, but you would need to reread configs using `getConfig` on each getHost function call, not once per file.", "pred": "fixing ip plugin"}
{"gold": "Unlocking with defer means that this lock is still held curing the call to forgetNode(), below, which I see attempts to acquire `f.mu`, which looks dangerous to me.", "pred": "dokan: fix a bug in Cleanup"}
{"gold": "Does anyone still use the cst out of this method? If not consider deleting", "pred": "fix test"}
{"gold": "Line is too long. [97/80]", "pred": "Add redirect for /ios-on-rails-beta"}
{"gold": "This seems unused.", "pred": "Fix import"}
{"gold": "@luguanglong , Thanks for the fix, can you re-phrase it to sound better something like \"This OS version is currently un-supported by keadm\"", "pred": "Fixing the typo in the comment"}
{"gold": "should probably be called `_DeleteFpInfoAttr` because it removes it. Cleaning gives the impression it is still there. I would also move this to the end of the function `GetAtomicWeightsForFingerprint`.", "pred": "fixed import"}
{"gold": "nit, can we use `VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR` here (granted it isn't else where, maybe worth fixing here or in separate PR)", "pred": "layers: Fix typo in PreCallValidateCmdBindDescriptorSets"}
{"gold": "This will need to be updated in the upcase-exercises repo as well.", "pred": "Fix indentation"}
{"gold": "Think it's worth extracting this to `Exercise#complete?`?", "pred": "Fix typo in Trail#steps_remaining_for"}
{"gold": "This is still a potentially useful public method - should we remove such methods?", "pred": "Fixing the exchange rate"}
{"gold": "I don't understand this change, what is happening here?", "pred": "Add a method to get the default release level for a given language."}
{"gold": "I think its worth stating this is `versionMajor`", "pred": "Fix #10125: Excel cell text info is not working in Excel 2016"}
{"gold": "rebuild: say loads and merges", "pred": "Fixing a typo in the comment"}
{"gold": "Why was this removed here (also in the other file)? Shouldn't we import them so that the reference in the docs below is interpreted correctly?", "pred": "fix: import getDefaultOptions from expect-puppeteer"}
{"gold": "I'd prefer to have a blank line between the class declaration and its first member. Is it possible?", "pred": "[SPARK-28985][PYSPARK] Fix PySparkTestCase to use SparkSession"}
{"gold": "Is it really LEGACY_HELLO if we are using the most up to date HELLO? Perhaps `MONGOS_HELLO` would work here?", "pred": "test(srv-polling): fix test"}
{"gold": "I am afraid this is going to cause problems on Windows where it is not uncommon to have injected threads (CTRL_SHUTDOWN, CTRL_LOGOFF, etc.) we have no privileges to suspend -- and thus retrying will just fail again, and with the new \"synchall failure is fatal and should kill the process\" approach it turns what used to work for us on Windows into process death.", "pred": "i#297: fix comment"}
{"gold": "think it should only be in create_dist", "pred": "Fix typo in build.js"}
{"gold": "Do you plan to support Pod spec change? Like hostPort is added/removed later after Pod creation?", "pred": "Fix a bug in NPL controller"}
{"gold": "Is this behavior correct? It used to return `true`, which should map to `dokan.ExistingDir`. Was that previously a bug?", "pred": "dokan: fix a bug in GetFileInformation"}
{"gold": "What about just printing an empty list in this case? That would make the output more predictable.", "pred": "Fixing a typo in the documentation"}
{"gold": "I looked and couldn't find any usage of `container` in any of the editor component files (js or hbs), so I assume this was used once and didn't get removed?", "pred": "Fix mobiledoc editor not rendering"}
{"gold": "I just updated a number of sites using older versions of Roots onto WP 3.6 and this little function change was required. Multiple search bars were displaying when I used the search widget in a widgetized sidebar. Updated the roots_get_search_form as seen in this change resolved it for me!", "pred": "Update functions.php"}
{"gold": "Fixes test failed in some cases", "pred": "fix: remove unused import"}
{"gold": "what's the prod url for this? just curious. @amirsaber", "pred": "add brave.com to the list of allowed domains"}
{"gold": "Can you please change this to azkaban.jobs.java.opts?", "pred": "Add a constant for the default value of the plugin load override property."}
{"gold": "Here is another concatenation which should be updated. Even though `Source:` and the link are essentially separate, it isn't RTL friendly. This would be another good use for `createInterpolateElement` I think so that we wouldn't need to include all of the classnames in the translation string (or extract them to a placeholder). That would allow us to use the `Link` component as well, rather than using its resulting HTML as a string which will be a pain to maintain if we were to make changes to the base `Link` component.", "pred": "Update AcquisitionPieChart.js"}
{"gold": "I would add an overload `GetCancelledZeroTask()` which calls `GetCancelledZeroTask(CancellationToken.None)`. This is cleaner than requiring the caller to pass `default(CancellationToken)` or `CancellationToken.None`.", "pred": "Fixing build break"}
{"gold": "Would it be equivalent to check if `chain != nullptr` below? Not suggesting a change, just curious.", "pred": "layers: Fix clang-tidy warning in best_practices_state_tracker.cpp"}
{"gold": "Should probably do `auto this_l (shared_from_this ());` and pass/use that instead of `this`. Same a few other places. IOW, replace both `shared_from_this()` and `this` with `this_l`", "pred": "Fix wallet change_async"}
{"gold": "And here. Please, use `'` for apostrophes in changed strings in this file.", "pred": "Fix typo in example"}
{"gold": "assignments should only be cuddled with other assignments (from `wsl`)", "pred": "fix: gas station test (#1248)"}
{"gold": "Please move this to `block_types.go`.", "pred": "Fix typo in comment"}
{"gold": "So this is not needed anymore for all attributes?", "pred": "fix JsonAttribute"}
{"gold": "Happy to get suggestion for better messaging here. Here's what I intended to convey: Something is wrong - the Exception is a hint to what might be the cause The impact of that - tracing wont work.", "pred": "Fix typo in EventSource name (#1007)"}
{"gold": "I think we can remove this function, right? (duplicate with `ses_starter.py`)", "pred": "Fixing the port for the ES service"}
{"gold": "With this fix, I am not even sure we need to overwrite this function.", "pred": "[SPARK-28859][PYTHON] Fix pandas_like_series.py to use SparkSession."}
{"gold": "Why not just import this from `data_transfer`? As a rule copying the same code twice is not a good idea. Also: please run `pylint` on all files in this PR.", "pred": "Fixing a bug in the package entry"}
{"gold": "You've got an absolute path here referencing your home dir :-).", "pred": "(maint) Fix test for new parser"}
{"gold": "Maybe I should do some sorting so that these properties don't keep moving around...", "pred": "Fix JavaParserMetaModel"}
{"gold": "Can we keep this test anyway, as it's part of the spec?", "pred": "Fix test"}
{"gold": "Can be removed", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "It's a minor quibble I know, but I like having the imports ordered by lengt", "pred": "Fix namespace"}
{"gold": "It's better to get the charset from context or other setting to let the user override it.", "pred": "[resteasy] fix compilation error"}
{"gold": "this filename as well needs change", "pred": "fix(cstor-pool): fix import path for cstor pool controller"}
{"gold": "I think we want to remove `omitempty` here", "pred": "Fix typo in comment"}
{"gold": "You cannot move this here because it breaks detach. Just call `tty.Close()` before returning the error from start", "pred": "Fix typo in comment"}
{"gold": "I updated only the implicit roles who needed a update for this new rule to validate.", "pred": "Fixing the implicit role for the table element."}
{"gold": "> // Code generated by protoc-gen-go. DO NOT EDIT.", "pred": "Update pb.pb.go"}
{"gold": "minor: skipOSConfigMetadata, otherwise, the name sounds like a boolean", "pred": "Fix gcloud version in test"}
{"gold": "~~I think lines 65-67 should be moved into this else clause after `type = ...` Else, it is a bit confusing why we check the enclose type validity a second time~~ Nevermind, will do some refactoring, myself. But thanks for \"fixing\" this!", "pred": "Fix NPE in NSRSS20"}
{"gold": "`sessions := endpoints.SessionsDTO{}` and using only `sessions` should be simpler.", "pred": "Added stop method"}
{"gold": "These need to be in the other order to avoid crashing when dcontext == GLOBAL_DCONTEXT (==-1)", "pred": "Fix typo in comment"}
{"gold": "Why not change the other samples?", "pred": "Fixing the port number in the sample app"}
{"gold": "Indentation is mixed up here due to spaces/tabs, I'm guessing.", "pred": "fix(table): fix table headers check"}
{"gold": "Should we provide a little more context in the error message? Maybe throw in something about what operation was being performed?", "pred": "dma: fix poll_interrupt()"}
{"gold": "Project standard is spaces, not tabs. Please fix and then we can merge this.", "pred": "Update PluginBase.php"}
{"gold": "@hgtw is there anything we're worried about with regards to using this cache? Do we want to do staged testing around expeditions before we merge? Curious your thoughts here", "pred": "fix include"}
{"gold": "The purpose of this was to allow pushing filters into the manifest files if we ever use a format other than Parquet. I think overall this is a good change because we can add it back later. Just wanted to note why the unused argument was there.", "pred": "Fix typo in javadoc"}
{"gold": "I think BSON::Decimal128 should always be serialized as Decimal128 regardless of config option.", "pred": "Fixing evolve for mongoid 3.0.x"}
{"gold": "We should probably just move the `require 'bolt/plan_creator'` in `Bolt::CLI` to `Bolt::Application` so it will already be loaded.", "pred": "(maint) Fix bolt_spec_helper"}
{"gold": ">20 [](start = 45, length = 2) Can we override this at runtime? Maybe it should be a command line option with default.", "pred": "Fix typo in comment"}
{"gold": "can just remove it ?", "pred": "Fixing a bug in the service class"}
{"gold": "Better call it `CleanUpMirrorInfo`?", "pred": "Fix typo in comment"}
{"gold": "@shannonwells is there still something missing here?", "pred": "fix: fix typo in comment"}
{"gold": "This could be more indicative of what it is... e.g... `stresstest_time_limit`", "pred": "Fix typo in pending doc"}
{"gold": "Shouldn't we do a `reader_payload_pool_.reset()` here?", "pred": "Fixing bug in PDP creation"}
{"gold": "I'd prefer the nomenclature less tightly coupled to DRAND throughout. I played with renaming the `drand` package to `beacon` but it was too much noise in this change.", "pred": "fix(block): fix typo in block.go (#100)"}
{"gold": "I think I would prefer you declare `self._current_key=None` in the constructor and just return `self._current_key`. That way you can prevent anyone from overwriting `current_key` without needing to use `getattr` here.", "pred": "Fixed bug in DynamicMap where streams were not being passed to DynamicMap."}
{"gold": "I guess I like the name `mode` okay. I can't think of anything better.", "pred": "fix(stdlib/csv): fix fromCSV signature"}
{"gold": "I would create a new method (NewStepWithDefaultTimeout?) for this purpose because timeout<=0 looks like a hidden logic", "pred": "fix: typo in step.go"}
{"gold": "Are these limit changes related?", "pred": "fix(api): fix the wrong comment of events api (#1225)"}
{"gold": "Don't you mean `import scapy.consts`?", "pred": "Fix import error in scapy/layers/inet6.py"}
{"gold": "`ctx` is unused in rollbackPrimary", "pred": "Fix typo in executor.go"}
{"gold": "This is not what title says.", "pred": "Fixing the comment for the first blob page token"}
{"gold": "a fix applies several fixes? maybe this should simply be `applyToNode`", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "U1000: func `fakeGetOk` is unused (from `unused`)", "pred": "Fixing fake clientset"}
{"gold": "Because there is a \"k8s.io/client-go/tools/cache\" below, we can sort out all the \"imports\" here.", "pred": "Fix import path for multierror"}
{"gold": "Nit should be using `goimports` to format the import statements with standard libary imports first, new line, followed by non-standard library imports.", "pred": "Fix import path"}
{"gold": "Do we not have tests for pipeline delete  ", "pred": "fix(delete): fix typo in delete pipeline"}
{"gold": "Good that you mention this constraint in the docstring :)", "pred": "fixing hdfs client"}
{"gold": "remove this blank?", "pred": "fix: import path of workflow (#2742)"}
{"gold": "Partitions is misspelled 8 times in this commit, might make sense to fix the spelling for all of those.", "pred": "Changes to FileScan::FileScan() to set the default value of doUseSearchKey_ to FALSE."}
{"gold": "Please remove this blank line - those are only used to group Python/third-party/qutebrowser imports.", "pred": "qutebrowser: fix typo in comment"}
{"gold": "`insecure` is a global variable (from `gochecknoglobals`)", "pred": "fix: action transfer command"}
{"gold": "Same as above (HTTP in upper-case)", "pred": "Update http.go"}
{"gold": "This is getting repetitive  maybe you could introduce an abstract test case with a `getExpectedUrl($providerReference)` method ?", "pred": "Fix tests"}
{"gold": "I do not think returning `Value{}` is correct here. For example, `reflect.MakeFunc(...).Kind()` would return `reflect.Invalid` instead of `reflect.Func`. Therefore, I think this should panic instead.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Does this work for Custom Elements? iirc we're lacking test cases for them. /cc @andrewiggins @developit", "pred": "fix(dom): fix setProperty"}
{"gold": "Same change just above?", "pred": "Fix typo in comment"}
{"gold": "I suppose `apploader.js` isn't used by WebWorkers. So `self` will always be `window` here.", "pred": "Fix typo in comment"}
{"gold": "Since this var is no longer defined we should remove the `if skip_targets.any?` bit below.", "pred": "(maint) Fix ssh_nodes variable in apply_ssh_block_test"}
{"gold": "I think we should `return arn` as a fallback at the end of this function (otherwise the `['Resource']` entry below could become `None`).", "pred": "fix: remove unused import"}
{"gold": "Why session is started at all, if you need to shut it down e.g. DI should launch noopSession", "pred": "Fix typo in comment"}
{"gold": "nit: can we rename the interface to `wsFileDeleter`", "pred": "fix: remove unused interface"}
{"gold": "Why target cannot be external endpoints?", "pred": "Fix typo in comment"}
{"gold": "We use a suffix \".AUTOCREATED\" for configsets, maybe we can use the same here?", "pred": "Javadoc"}
{"gold": "This one won't be disposed. Should be (something like) `using var openTelemetry = OpenTelemetrySdk.EnableOpenTelemetry(` no?", "pred": "Fix typo in sample (#2580)"}
{"gold": "Why this is in the diff?", "pred": "Fix import"}
{"gold": "How is status determined? When the user calls CloudBackupCreate( src_volume_id ) they can then call CloudBackupStatus( src_volume_id ) Is there something similar for this new API?", "pred": "Fixing the comment for the interface"}
{"gold": "We could pass `excessDomChildren` to `options._catchError` and only do this if an error-boundary catches the error. Not entirely sure if that's better.", "pred": "fix(diff): fix diff function"}
{"gold": "In php8 named parameters were introduced and now it is required to match called method parameter name when setting parameters by array destructing or call_user_func_array() etc.", "pred": "Fixing bug in CombineAssets"}
{"gold": "If instead we had `B3.extractSingleHeader` and `B3.extract` return a bool value as a second return value, we could avoid the byte array comparison in `TraceID.IsValid`. Did you consider that alternative?", "pred": "Fix typo in b3.go (#100)"}
{"gold": "I think this is more of a semantic difference than a typo - `weiter hinzufgen` is like `continue adding` whereas `weitere hinzufgen` is like `add more`. I think it makes sense to change it though  ", "pred": "Update de.php"}
{"gold": "nit: 200 is superfluous", "pred": "Fix test"}
{"gold": "This is testing `unreserved keyword`", "pred": "Fix the test case of meta communication (#1080)"}
{"gold": "paramsNatOrigin doesn't include sUVtoST. I would just remove that definition for now", "pred": "Fix typo in comment"}
{"gold": "It feels like the test should be waiting for the prefetcher to shut down, but I don't have a great reason why other than that it might be confusing for debugging if there are still goroutines from old prefetchers lying. But I guess since `TogglePrefetcher(false)` doesn't actually set the prefetcher to nil, the queue shutdown method will still end up waiting for the shutdown to finish. If that sounds right, nevermind me.", "pred": "block_retrieval_queue_test: fix test"}
{"gold": "AWS Identity and Access Management (IAM)", "pred": "Update ListAccessKeys.java"}
{"gold": "As a long term thing, would it make sense to move the resource names as keys under the requirements map?", "pred": "fix: remove unused import (#101)"}
{"gold": "That doesn't fix the whole problem. The issue lays in this line right here, not the one above. There are two problems with this line: 1. It finds things that aren't cells in the table 2. if it doesn't find anything, it shouldn't return empty here, but continue down to look for row/ column headers.", "pred": "Fixing a bug in the table headers algorithm"}
{"gold": "I am pretty sure that this is infinite recursion as getAllProjects returns the project itself.", "pred": "Fix NoUnusedPinCheckTask"}
{"gold": "Something I didn't catch before I merged this PR, is the hyphenated constant a problem? E.g. should \"data-lists\" be \"data_lists\"? @paulkaplan", "pred": "Added \"operators\" to the list of categories."}
{"gold": "Can you write the test as `if not (conf.use_winpcapy or conf.use_pcap or conf.use_dnet):`", "pred": "Fix typo in the doc"}
{"gold": "we have to include foreign assets on the repository directly because they don't belong to a job? This seems very awkward... Is this a step towards the job-less assets on the repository? Did you consider having `build_asset_job` take in a set of foreign assets instead? I suppose we would then need to subclass it to be a more special `AssetJobDefinition` that can keep track of them.", "pred": "Fix typo in repository decorator (#2255)"}
{"gold": "`-Wstringop-truncation` is a new kind of error detector introduced in GCC 8. As for this patch, these are two false-positives though.", "pred": "Fix a bug in the temp dir creation code."}
{"gold": "Can we port this error msg to v2 too? This one is better, as it explicitly states what sources are allowed.", "pred": "Fix typo in error message"}
{"gold": "The convention so far has been to require directly from the defining file (in this case `../../read_preference') . I think the concern has been mostly about the potential for circular dependency cycles", "pred": "test: fix linting error"}
{"gold": "I suggest expanding dims here to simplify the formatting.", "pred": "Update load_image_from_file.py"}
{"gold": "Why do you need to specify the kinto prefix here?", "pred": "Fix typo in kinto-migrate"}
{"gold": "The `!r` is unnecessary.", "pred": "Fix FPN doc (#102)"}
{"gold": "I didn't see existing tests for this `OpenBucketURL`. Not sure if it's easy to do without mocking these `opener` calls.", "pred": "Fix typo in comment"}
{"gold": "Should we default to `true` ?", "pred": "Fixing a bug in the Go paging template model."}
{"gold": "File is not `goimports`-ed (from `goimports`)", "pred": "fix: remove unused import"}
{"gold": "Shouldn't these options also include `@babel/preset-env`? Also I see you set `babelrc` to `false`, could we rely on our existing `.babelrc` file? Feels like some duplicate configuration otherwise.", "pred": "fix: remove corejs 2 from babel config"}
{"gold": "Nit: We can use `%s` since `disconnectReason` is a string.", "pred": "fix(ws): fix race condition in websocket network"}
{"gold": "I think it's better to create a new example", "pred": "Update lgb_regressor.py"}
{"gold": "The stages are correct, but the more forgiving `kAttachmentRasterOrder` should be used, based on a review of the spec. That should give the same effect of suppressing the false positive conflict between the DEPTH R/W and resolve. > End-of-subpass multisample resolves are treated as color attachment writes for the purposes of synchronization. This applies to resolve operations for both color and depth/stencil attachments. That is, they are considered to execute in the VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT pipeline stage and their writes are synchronized with VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT. Synchronization between rendering within a subpass and any resolve operations at the end of the subpass occurs automatically, without need for explicit dependencies or pipeline barriers.", "pred": "Fix typo in comment"}
{"gold": "To be consistent, I think it should actually just be a single `-`", "pred": "Fix typo in AcidBasePair"}
{"gold": "this seems extraneous.", "pred": "Fix import error in utils.py"}
{"gold": "Ah, I see here that 'LongDomain' is defined as something that contains a subdomain segment that is `maxLengthOfDomainSegment` long (which I think is 63 characters) - I don't think any public ACME servers/Let's Encrypt's staging environment has a restriction on this?   if it does, and the 'pebble' based ACME server does not, then Pebble needs modifying to also fail in these cases as it aims to replicate the ACME RFC as closely as possible", "pred": "test/e2e: add test for cert-manager.io/v1alpha2 Certificate"}
{"gold": "I think you need `-y` here to prevent a user confirmation prompt", "pred": "Add libxml2-dev to R build"}
{"gold": "Repeating: I don't think this should be a core-wide global var. This should be isolated to arch/x86 or at least arch/, maybe inside getter/setters as mentioned above.", "pred": "Fix typo in comment."}
{"gold": "right URL is like in cmdrunner, using search.maven .org", "pred": "Fixing jmeter executor"}
{"gold": "The link to valid syntax is not really applicable for NET2_1, right?", "pred": "Fix typo in comment (#1124)"}
{"gold": "Shouldn't it be more specific, like \"gcppubsub supports all UTF-8 strings\"?", "pred": "pubsub: fix typo in comment"}
{"gold": "Everything in this class is SolrCloud-related, not legacy replication", "pred": "SOLR-14168: Fix test"}
{"gold": "Could just assign directly and eliminate the `newval` var.", "pred": "Fix typo in drbbdup_prepare_redirect (#1018)"}
{"gold": "... with the name of the affected package, or \"all\", followed by a colon,...", "pred": "internal/github: fix typo in issue title comment"}
{"gold": "We'll want to remove this one if we make the assembly version constant.", "pred": "Fix version number in release script (#1108)"}
{"gold": "Can we have a single function here that uses the same subscribers and just changes meta based on context?", "pred": "Update Frontend.php"}
{"gold": "where would ` static startup_kernel_loader skl;` be instantiated? if it's not instantiated anywhere should this be removed?", "pred": "Fixing a typo in the comment"}
{"gold": "I think we should move those util functions that work with drag-drop to @uppy/utils, so they can be shared (maybe later) with drag-drop plugin? Otherwise it will continue to depend on drag-drop module.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Migrate the spec.Labels to locator.Labels ?", "pred": "Fix typo in comment"}
{"gold": "The test case already existed but it never tested properly because of the conditional in the test.", "pred": "fix: s3 test"}
{"gold": "I'm okay with this, but I don't see a lot of benefit to removing unnecessary parens. If extra parens make something more readable (like this) or clarify order of operations even when matching the default, I would say we should keep them.", "pred": "Fix PartitionField equals method"}
{"gold": "@sarowe why was this volatile? It's fishy to see this as the only volatile field.", "pred": "fix javadoc"}
{"gold": "template is not correct?", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Rename the registies to `BBOX_ASSIGNERS` and `BBOX_SAMPLERS` to avoid ambiguity. There is also a registry for dataset sampler.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "This is no longer stubbed on every test. Perhaps it should be, and should be unstubbed in the single case that it matters.", "pred": "(maint) Fixing the provisioning spec"}
{"gold": "This seems much simpler! I'm not sure I follow what you mean by the threading part... Also tests are not liking this constant. Might need a require or to fully qualify this.", "pred": "Fixing the example app"}
{"gold": "Convention is \"FIXME: i#2144\" or \"XXX: i#2144\"", "pred": "Fix typo in comment."}
{"gold": "This should probably be a property instead of a method.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "do we need to consider setting the `state` as well? If so, lot of changes might be required, like, setting to 'Reconciling' in upgrade code, setting to 'error' or 'reconciled' in volumeReconciler functions.", "pred": "fix(upgrade): upgrade cast to 0.8.0 (#1088)"}
{"gold": "Line is too long. [82/80]", "pred": "add_facet_fq_to_solr should be before add_facetting_to_solr"}
{"gold": "Add blank line below license header.", "pred": "Fixing the copyright header"}
{"gold": "I'm not clear on whether this really should be the right behavior. Basically we're saying that a replace table will keep the existing location (as opposed to using defaults). I suspect we don't have create or replace with location semantics, but this is making some assumptions that a replacement is somehow the same as the old. If we were to go with id based pathing convention, this wouldn't work. I don't think this is an issue at this point, but it might make sense to push this down to the location provider.", "pred": "[SPARK-11586][SQL] Fix a typo in comment"}
{"gold": "Just run a global replacement for all `executionproto`.", "pred": "Fix import path for replicationgenpb (#1040)"}
{"gold": "@AutomatedTester @davehunt thoughts on a new keyword argument?", "pred": "Fixing the webdriver.py file"}
{"gold": "Should line 47 be OPAE_ERR?", "pred": "fpga: fix ioctl error handling"}
{"gold": "Not necessary, just write `time.Time{}`", "pred": "pubsub/gcppubsub: fix import path (#1888)"}
{"gold": "As these two strings simply get concatenated for the docs, there's a space missing after the dot here.", "pred": "Fix typo in default value for 'width' setting."}
{"gold": "What about integrations where we don't plug ourselved on OnMethodBegin?", "pred": "Fix typo in comment (#1171)"}
{"gold": "shouldn't **call** return a boolean?", "pred": "Fixing a bug in the visibility_of_all_elements_located class."}
{"gold": "ViewModel classes should not expose any classes from framework.model.", "pred": "chore: update copyright (#101)"}
{"gold": "how would you feel about keeping these tests to be more explicit and having them `assert not _validate...`? or is your view that that is too duplicative of the tests in `test_evaluator.py`?", "pred": "[dagster-core] Add test for config type with multiple fields"}
{"gold": "Why do we use the `winrm_nodes` variable here and not the string `\"winrm_nodes\"` as we were using before?", "pred": "(maint) Fix typo in winrm_nodes test"}
{"gold": "why update Copyright ?", "pred": "Fix the license header (#1080)"}
{"gold": "Does this mean we cannot update statistics with sampling on a table with LOB columns?", "pred": "Bug fix: 10-010110-1111: HBase table with no partition name specified is not being created."}
{"gold": "Look good, but I think a `[flags]` enum would be more future proof? Although i'm not sure if a flags-enum is working from the XML config. What do you think?", "pred": "Fixed ThreadAgnostic attribute"}
{"gold": "Since I believe state will never be anything other than 'expanded' or collapse, you can rewrite this as follows: `return row.treeNode.state === 'expanded' ? 'ui-grid-icon-minus-squared' : 'ui-grid-icon-plus-squared'; `", "pred": "fix(treeBase): fix treeBase to work with new row.treeLevel"}
{"gold": "the latter part can go but isn't the first part of this still sound -- that we assume \"id\"?", "pred": "SOLR-15269: Fix javadoc typo"}
{"gold": "Why is the escaping of @ and $ removed?", "pred": "Fixed a bug in the string formatter."}
{"gold": "Nit: `Http` is redundant in this interface's name.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "what if I set SynchronizableEntitiesPrefix to \"a/b/c/d\" in config?", "pred": "Update cluster.go"}
{"gold": "nit: This error message doesn't mention that the path is a directory, maybe \"Dockerfile path is a directory:%s, please provide path to file.\"", "pred": "fix: init app with dockerfile"}
{"gold": "This is done automatically, you can skip it next time ;)", "pred": "Update copyright"}
{"gold": "This is needed in `set_value` because of `:open-editor` (you could open an editor, close the tab, then close the editor). I don't think it makes any sense to have it here?", "pred": "Fixing the webkit element value setter"}
{"gold": "Perhaps we can assume that profiling is enabled if ProfilingPort is set? And/or configure a default port and frequency, so we don't have to set three config vars every time?", "pred": "Fix typo in comment"}
{"gold": "This nil check won't correctly handle the case where forward_ssh_agent is set to false - it won't be nil but it should still not be set.", "pred": "(BKR-101) Add a check for the box_url"}
{"gold": "We could avoid passing proto since threshold isn't needed.", "pred": "Fix test"}
{"gold": "This route excluding needed for reconnect only when one connection is lost and we trying to establish another. I was thinking to make 2 separate flags for killswitch and reconnect enabling. This way we can keep killswitch working, but we don't need these routes excluded.", "pred": "fix(deps): update dependency github.com/spf13/viper to v1.7.1 (#100)"}
{"gold": "why can this modification avoid crash?", "pred": "fix bug"}
{"gold": "This looks good -- signing out the user if the current user is disabled", "pred": "Fix redirect_if_disabled to work with new clearance"}
{"gold": "The line exceeds 120 characters.", "pred": "Fixing a typo in the comment"}
{"gold": "Let's go ahead and change \"Site\" to \"Project\", since that's the path we've chosen. One less thing to alter in the other issue.", "pred": "Fix typo in app describe"}
{"gold": "I am for this change iff we are sure the information is no longer helpful. I think this could still be valuable for certain scenarios, wbu?", "pred": "fix(cmd): fix typo in `go-filecoin config` output (#1315)"}
{"gold": "I thought we decided on using the latest active version and not the one which is max ramped up.", "pred": "Fixing the issue of image rampup manager"}
{"gold": "can we update this to a `log.Warningf`?", "pred": "fix(cli): fix error message for no public subnets (#2780)"}
{"gold": "can we get something emitted in the logs on non-zero exits to trace back to for problems like this failing on the first invocation?", "pred": "Fixing the docker network connect/disconnect functions"}
{"gold": "Do we need `schema manager` at here ?", "pred": "Fix the test case of DeleteVertexTest (#1003)"}
{"gold": "This won't work because of the permissions on the directory when this is included as a library. But, we may be able to do this. The key would be wrapping this command with either a script or a go binary that ensures the current directory is writable. If the current directory is not writable, it would attempt to make it writable so that we could write out the produced binary. But I'm not sure if that will influence the hash that gets produced for `go.sum` since I am not sure how that is calculated. Alternatively, we can choose a place in `/usr/local` or choose a location that is writable in the go cache and use that. I'll give that a try since it might be needed for the ARM builds if we choose to only include `x86_64` precompiled binaries in the module.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Correct me if I'm wrong, but is this necessary? Why not just use the value returned by `interpreter.Eval` and not mess with the scope? `interpreter.Eval` will return any produced side effects. This means TableObjects as well as any value resulting from any expression statements.", "pred": "fix(repl): fix typo in repl.go"}
{"gold": "This service is global per namespace, not per Alertmanager/Prometheus/ThanosRuler instance. So this approach won't work. But maybe I missing out something, can you describe your use case here?", "pred": "Fix typo in comment"}
{"gold": "Do we need this default? Since we aren't using a sql.NullBool or *bool, an unset column will be interpreted as `false` already... We don't set a default on our other bool fields (e.g. entry admin and downstream columns).", "pred": "Fix typo in comment"}
{"gold": "thanks for moving these over. makes more sense for them to be in the exports_helper", "pred": "Fixing bug in exports helper"}
{"gold": "That import now isn't needed anymore", "pred": "Fix typo in comment"}
{"gold": "Can you update the `Usage` to be an absolute path as well? Something like `/path/to/firebug.xpi`", "pred": "Fixing typo in docstring"}
{"gold": "This class is missing the `MvxPlugin` attribute", "pred": "Fix UWP accelerometer plugin registration"}
{"gold": "What if `wxLang` is returned `None` from `getWxLang`", "pred": "Fix typo in comment"}
{"gold": "Please don't do changing like this unless it _**really**_ cares. BTW. Please look around to infer our naming conventions.", "pred": "fix(storage): fix the bug of ingest extra files (#1484)"}
{"gold": "This is in test code: understanding what we're doing is important in this context.", "pred": "[KULRICE-11060] - Fixing test environment setup"}
{"gold": "prob should still have an example that has multiple option names even if you have to make it up. Or maybe we don't need this method?", "pred": "Fix typo in comment (#2600)"}
{"gold": "I believe respond_to whitelists the formats passed to the block so if we don't want to display html, we can just remove the line format.html...", "pred": "Fixing the filename for the exported plan"}
{"gold": "stylistic nitpick: I _feel_ like we've largely shown errors like this as \"error: \" vs. \"error=\". IMO colon/space reads better.", "pred": "Fix typo in stop.go (#1156)"}
{"gold": "We could put this implementation in `RTPSWriter::create_change_pool` and avoid an extra function.", "pred": "Fix include"}
{"gold": "should this file ends with _test.go?", "pred": "Fix import path"}
{"gold": "It's because of this change. `ss` was unused and it made sense in the program. However I haven't read the IPv6 RFC so I'm unsure of what it does", "pred": "Fix IPv6 hashret()"}
{"gold": "\"Flatten\" is a verb, so I'd probably go with `flattenedIndex` as a variable name here.", "pred": "fix(data-manager): fix addChildAtIndex"}
{"gold": "If it can only be called once, perhaps a more appropriate name is something like `setMaskables`? `addX` sounds like you can add many `X`es by calling it many times", "pred": "fix: remove unused import"}
{"gold": "Nodecfg should be downloading from a private bucket -- these shouldn't be for public consumption. In general these should be generic and expect environment to provide appropriate credentials and bucket.", "pred": "Fix typo in comment"}
{"gold": "Could you please end the file with an empty line?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "This is an incorrect change. The dialect spoken is an important part of the handshake and should be communicated to users.", "pred": "Fixing a typo in the comment"}
{"gold": "Can this be non-exported to avoid direct use? It would be a breaking change but using previous package version would work.", "pred": "Fix comment typo."}
{"gold": "Nit: this is just `return gcerrors.Code(err)`, isn't it?", "pred": "fix(storage/gcs): fix gcs.go"}
{"gold": "I don't know where this came from, but it's not a good idea. This is actually timing out after 5 rounds, not 5 blocks. 5 consecutive null blocks won't be that uncommon. Also when testing with a short block time, this is a very short duration that can contribute to flaky tests.", "pred": "fix: deal proposal"}
{"gold": "In Python 3 when pickling or unpickling objects, the file needs to be opened as binary so that no text encoding/decoding takes place. So for any open calls around pickle loads or dumps, the mode for reading must be rb and the mode for writing must be wb.", "pred": "Fix for #1005"}
{"gold": "did you remove **params.qstring.method** intentionally? if so why?", "pred": "fixing bug in event api"}
{"gold": "What is the current default? Is that inconsistent across uses and that's why this is null?", "pred": "[CALCITE-1708] Add a new property to enable/disable vectorized ORC reader"}
{"gold": "Why did we make this change? How come it wasn't an issue before", "pred": "fix: typo in comment"}
{"gold": "Can you tighten scope by moving to of these variables? i.e. Move to ~4372?", "pred": "layers: Fix invalid descriptor set test"}
{"gold": "Nice to see this `dataverse.rserve.password` fix rolled in.", "pred": "added a TODO"}
{"gold": "How about the following faster alternative that doesn't need `strlen()` at all: if (*tmp_optarg == '\\0' || *endptr != '\\0') { fprintf(...) ... This would treat the bus argument as invalid if it's either empty (`tmp_optarg` points to '\\0') or invalid (`endptr` points to something other that a '\\0'). Actually, the existing code would accept an empty argument and set the bus to `0`, so if (*endptr != '\\0') { fprintf(...) ... would be enough. The check for an empty argument doesn't hurt, though.", "pred": "Fix typo in help message"}
{"gold": "I could be missing something here, but the `from` and `cc` are the same. On the test email sent to gatewaycommunicator, these values are different.", "pred": "Fix feedback mailer"}
{"gold": "I'm honestly scared because act is now a hard requirement for useEffect which it wasn't before... This could break some tests :(", "pred": "fix(test): fix useEffect test"}
{"gold": "Could use election from `info_a.election`, or is this deliberate?", "pred": "Fix active_transactions::update_difficulty"}
{"gold": "looks like this should be `return array(LegacyFormHelper::getType('form'));`", "pred": "Fixing the alias for the EasyAdminExtension"}
{"gold": "Maybe it would simpler to ignore opt_port if type !== 'number'?", "pred": "Fixing a typo in the server.js comment."}
{"gold": "Where was `name` being declared before?", "pred": "Fix typo in vertical extensions"}
{"gold": "nit: use `corev1.ConditionUnknown`", "pred": "Fix typo in test helper"}
{"gold": "You also need to add a similar check on line 992, there's another place where we check `length === 24`", "pred": "fix(mongoose): add missing semicolon"}
{"gold": "nit: can extract the voteProvider as a local variable", "pred": "Fix typo in BftBlockCreatorFactory"}
{"gold": "[0] Not suggesting you change it here, but....kindof weird that there's just not an `assertFuncNotEquals`", "pred": "SOLR-2355: fix test"}
{"gold": "why are we passing 'registryAddress' here? We probably should construct it together with bc. Registry is not something that change?", "pred": "fix typo"}
{"gold": "`.` at the end of the sentence", "pred": "fix(flattenPath): fix typo in doc"}
{"gold": "wouldn't it be useful to split this into an error metric for the timing?", "pred": "fix(hive): fix peer check"}
{"gold": "Not sure if this is good enough. Each generator will have it's own unit test anyway. Ideally, I think I'd want to test that each generator in the yml is actually a valid generator...", "pred": "Fixing test for initials"}
{"gold": "line is 138 characters", "pred": "Fix test"}
{"gold": "Nit: I would leave `Wire` out of the description; if you use this without wire you can still use it.", "pred": "internal/proxy/proxytest: fix comment"}
{"gold": "Nit: each field can be on a separate line to make it visually easier to read.", "pred": "Fix import"}
{"gold": "Do we still have these files? Shouldn't we remove these?", "pred": "Fix typo in get_analysis_statistics"}
{"gold": "A lot of things to do with constants seemed to move since the original commit, so I stuck this here, Is there a better place for it?", "pred": "Fix import path for v1alpha1 (#100)"}
{"gold": "is 10 too small compared to 1000? consider sync chan is unicast only (vs block chan is broadcast + unicast), i would say use 200~400 for BlockSyncChanSize my concern is that this would potentially slowdown sync speed of full-node", "pred": "fix default config"}
{"gold": "A full parse of the plan here on listing the plans will be expensive from both a computation and IO perspective.", "pred": "(maint) Fix error message in plan lookup"}
{"gold": "These constants use the `_PIN` suffix, while the other constants don't use it. I'm not sure what is best, but I would prefer to keep this consistent. Do you have an opinion on which it should be (with or without suffix)?", "pred": "Added missing button constants"}
{"gold": "Hmm... this feels like discovery should come first. perhaps `--discovery-dns-url`? @NicolasMassart any opinions on this or ideas on who it should be run by?", "pred": "Fix BesuCommand"}
{"gold": "why is this needed?", "pred": "Fix typo in comment"}
{"gold": "I wonder if it'd be possible to autogenerate a key from the name within this function if one is not provided explicitly, rather than having all the callsites pass both the name and key (and usually as the same value)? Might give us a good place to implement a `name->key` function that isn't 1:1.", "pred": "Fixing a bug in the ConfigTypeAttributes class."}
{"gold": "@adriancole I do not see a change in the thrift file. Are there unit tests verifying that this manual serialization is compatible with the native Thrift serialization done by classes generated from `.thrift` IDL file?", "pred": "Fix typo in ThriftCodec"}
{"gold": "spelling (variable name, all three changes)", "pred": "Fix: Typo in comment"}
{"gold": "I believe you meant \"specify `desiredUID` and `desiredRole`\"?", "pred": "Fix typo in comment"}
{"gold": "Please follow the import style, move it to its similar group", "pred": "Fix import path for k8s.io/api/networking/v1"}
{"gold": "Do we really need these? This is expanding on an API that we're about to do work on with the error stuff @kriskowal", "pred": "Fix typo in comment"}
{"gold": "passwordModificationTime is no longer used - did the change drop a time check that should be restored? Or should the param get dropped from the methods?", "pred": "Fixing the password validator service bean"}
{"gold": "Would it break here without trim? If so, can we do trim in Startup.cs so we don't need to add this code to every parser?", "pred": "Fixing a bug in the ProcessStart event handler"}
{"gold": "Since we're using Logrus, probably best to use `Infof` to avoid confusion (Logrus' Printf behaves differently to the built in one)", "pred": "Fix iptables test"}
{"gold": "Hm, this looks like a change that should go upstream as well.", "pred": "Fix typo in flyout button"}
{"gold": "let's keep ActionByActionHash and delete getActionByActionHash", "pred": "fix: fix typo in comment (#1003)"}
{"gold": "please use return type", "pred": "Fixing typo"}
{"gold": "This is deliberately at this level.", "pred": "Fix typo in EdgeDriver class"}
{"gold": "I'm going to go ahead and undo this change, I don't think it was intentional.", "pred": "Fixing a bug in the upload worker thread"}
{"gold": "> specialised This isn't a typo in my neck of the woods  ", "pred": "Fix typo in comment (#1003)"}
{"gold": "will change to `storage_target`", "pred": "Fix target test (#107)"}
{"gold": "This would be better as `cls.securitycenter_client`, to match what is being instantiated.", "pred": "Fixing securitycenter_test.py"}
{"gold": "Could we have this initialization as part of the initialize method?", "pred": "Fixed import error"}
{"gold": "This line should be removed as editController is not used from this context anymore.", "pred": "Fix patient photo not being saved"}
{"gold": "This is correct in concept but the method signature doesn't really communicate the same thing. In other words, if the function produces an output table where is it? Its not on the function signature. Can you explain where the output table is created?", "pred": "fix(execute): add missing import"}
{"gold": "For insurance, it's best not to take it directly", "pred": "fix bug"}
{"gold": "change 'value' to keysToSend, here and in other references in this commit. 'value' implies the user is getting the value of the element, rather than just the keys we're sending to it.", "pred": "Fix typo in javadoc"}
{"gold": "is the plan to fully migrate to boltdb and then remove the state save here?", "pred": "Fixing a typo in the comment"}
{"gold": "This should be `output.colorBright`. Unless I'm missing some reason for adding a new theme variable.", "pred": "fix(theme): fix theme style"}
{"gold": "nit: I wonder if these should be moved down to where version is defined, just to keep them all in the same place.", "pred": "Fix version number"}
{"gold": "Is this supported by every implementation of Java (and Android)? Should it be conditional upon `gen_nullable`?", "pred": "Fix Java generator to use the correct package name."}
{"gold": "@briri Thanks! I just caught this too updating my feature branch", "pred": "Fix typo in Phase model"}
{"gold": "I think you should move this block (and the `envpw := os.Getenv(\"RCLONE_CONFIG_PASS\")`) right to the start of the function, then we can remove the duplicate code below", "pred": "Update config.go"}
{"gold": "Is this only to set the node to draining?   I think we can do that inside `Before` or something?", "pred": "Fixing test"}
{"gold": "This should have been moved up above this inner `try` because the log message in the `catch` block does not apply to this.", "pred": "Fix typo in comment (#1008)"}
{"gold": "Do we expect people to use PlanResult directly?", "pred": "(maint) Add a comment about the TargetSpec alias"}
{"gold": "Maybe we should call this something like `errToReturn`?", "pred": "Fix typo in comment"}
{"gold": "should calculate numEpochIn1Year = xxx and <= fairBankEpochNum+numEpochIn1Year a.foundationBonusLastEpoch just happens to be equal to 1 year now, but should not count on that", "pred": "fix: fix typo"}
{"gold": "I wasn't sure if the content type needed to be removed from both the `default` and `usemap` objects - I'm not sure how usemap is used.", "pred": "fix: add role=presentation to img with no alt"}
{"gold": "Duplication of line 28 Please refer your tox -e flake8 It seems that XStrField, XShortField, FieldLenField are not used", "pred": "Fix typo in geneve.py"}
{"gold": "I don't really understand the `self._file_model.index(path)` as parent here - you use `self._root_index` for `rowCount` above, so wouldn't the parent here need to be `self._root_index` as well?", "pred": "Fix typo in filename prompt"}
{"gold": "Do we want validation somewhere that max >= min? Or simply treat the max < min case as ignoring max?", "pred": "LUCENE-3444: fix javadoc"}
{"gold": ":+1: that's a easier example :)", "pred": "Fix NDC renderer for .NET Core 2.0"}
{"gold": "If an external module decorates this interface, such a change will cause it to generate an error", "pred": "fix: add missing return type"}
{"gold": "Oh ha hah, FNM_PERIOD worked out nicely there. Points for co-opting a file system convention.", "pred": "jobtap: fix typo in comment"}
{"gold": "wrong grouping. As you can tell from the other files, we put system packages in the first group, the 3rd party packages in the second group, and our own packages in the third group.", "pred": "fix: import path of action package (#1271)"}
{"gold": "Is `o.name` always set here?", "pred": "Fix typo in comment"}
{"gold": "Can this line be removed, as `SteadyStateDependencies` isn't updated anywhere? Also do we need to check the `TransitionDependencySet` here?", "pred": "Fix typo in comment"}
{"gold": "`plan.present?` and `has_active_subscription?` are equivalent. We can drop this change, while leaving the one on `app/controllers/application_controller.rb`.", "pred": "Fix typo in user model"}
{"gold": "No need for this, as pylint already only turns things off for this function and it's needed for the entire function.", "pred": "Fix a bug in the command class"}
{"gold": "L171 needs to be modified too?", "pred": "Fix typo in comment"}
{"gold": "Why do you compare by nodeid? Simply saying d == e should be enough. Unless we have to objects in memory with the same nodeid. If that is so, something went really wrong.", "pred": "Fix a typo in a comment."}
{"gold": "configs/pvt/retinanet_pvt_t_fpn_1x_coco.py --> configs/pvt/retinanet_pvt-t_fpn_1x_coco.py", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Nit, this could be json:\",omitempty\"", "pred": "Update metadata.go"}
{"gold": "It's kinda funny to read `s.Image.Image` I wonder why it resulted to this way. What would it take to refactor to just `s.Image`?", "pred": "fix(lbwebservice): fix typo in function name"}
{"gold": "nit: I like the idea! can we instead change the tag to `integration-remote` to be more specific? I feel like it's possible for us to use the `deploy` build tag for possibly another scenario", "pred": "Fix typo in comment (#269)"}
{"gold": "Copy and paste error here. Edit: Also missing commas here and in other Perl croaks between some parameters and not others.", "pred": "Fix typo in Mob::SendAppearanceEffect"}
{"gold": "stateRoot or maybe ParentHeader would make more sense from API point of view?", "pred": "Add missing namespace"}
{"gold": "Are you sure that this is no longer needed?", "pred": "Fix bug in PlaybackServiceFlavorHelper"}
{"gold": "Would it help to use SCAN_COLUMNS as base to build SCAN_WITH_STATS_COLUMNS e.g like so `SCAN_WITHSTATS_COLUMNS = ImmutableList.<String>builder().addAll(SCAN_COLUMNS).add(\"value_counts\",....).build()` ?", "pred": "Fix typo in comment"}
{"gold": "`ctx` is unused in ReportStat", "pred": "Fix: Remove unnecessary comments (#147)"}
{"gold": "We don't want to add boost as a dependency when building the Thrift compiler. Sorry.", "pred": "Fixing build error on Mac OS X"}
{"gold": "It's not printing the range. Also I think it's useful to print a warning above stating that the minimum change is -1000.", "pred": "Fix typo in monster spells"}
{"gold": "if name is empty will this become enumerate ? (and cause the unmarshal to fail ?)", "pred": "add schedpolicy delete"}
{"gold": "How about including a flash message that explains the exercises are only available to subscribers of X plan?", "pred": "Fixing the products helper"}
{"gold": "You should also call `e.accept()` and `return` so the key press isn't processed further (as we're leaving insert mode anyways).", "pred": "Fix #100: Add a command line history to the command line widget"}
{"gold": "Freeze mutable objects assigned to constants.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Hmm, this feels hacky. Maybe good enough if it makes the test more stable, but why is timing even an aspect here, since below it should wait for these two things anyway?", "pred": "Update e2e tests to use new opt-in selector."}
{"gold": "Do we want this on by default, or an opt-in (e.g. via some config while add the instrumentation)? I guess a more general question is - what's the bar for the default vs opt-in tags.", "pred": "fix: Fixing the user agent tag (#1168)"}
{"gold": "`status` is just one of the features, named as status is not suitable.", "pred": "fix(graph): fix the build error of graph http service"}
{"gold": "There is an option to hide the subscriptions list from the sidebar. If it is hidden, the filter text should not be displayed.", "pred": "Fix NavListAdapter"}
{"gold": "I'd like for all of this to be dynamically configurable at some point, but it doesn't have to be in this PR. Can add it to the future SIP or create a separate JIRA for it, as you think would be appropriate.", "pred": "SOLR-1056: set default for enableLazyFieldLoading to true"}
{"gold": "move the constructor to down the `namespace`", "pred": "Fixing a bug in the signals"}
{"gold": "Nit: ending with a '.' looks consistent with the fields around it.", "pred": "Update ClusterDeploymentStatus to include the cluster deployment status"}
{"gold": "Audit log will not have a warning about they are using a deprecated path, is it something we must care about?", "pred": "Fix typo in svidv1/service.go (#245)"}
{"gold": "I think you also want to update the condition to add ` || impl.Visibility == TypeMemberVisibility.FamilyOrAssembly`.", "pred": "Fixing a bug in the rule that checks for visibility of members."}
{"gold": "`DepositToRewardingFundBaseGas` is a global variable (from `gochecknoglobals`)", "pred": "fix: remove unused import"}
{"gold": "What do you think of \"operations\"?? Also what do these emojis look like on Linux??", "pred": "Update group.go"}
{"gold": "I like the word \"give\" here. Feels like I'm giving a gift to my team.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Is it possible to use `np.random` module instead?", "pred": "Fix import error in test_common (#15055)"}
{"gold": "``default=None`` implies ``allow_None`` so ``allow_None`` is superfluous here. As a special case, if allow_None=True (which is true by default if the parameter has a default of None when declared) then a value of None is also allowed.", "pred": "Fixed typo in legend_dimensions"}
{"gold": "Is there anything in particular that makes setting up the downstream rolebinding(s) to `system:k3s-controller` burdensome or confusing? This changes looks fine to me but it seems a shame to alias an embedded k3s controller. If we are doing this in other places that I am not aware of then we can dismiss this concern out of hand.", "pred": "Fix typo in comment"}
{"gold": "File is not `goimports`-ed (from `goimports`)", "pred": "Fix import path for go-acd"}
{"gold": "nit: all other types in this project have full names, so maybe a better name would be `OperatingSystem`?", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Why is this needed here?", "pred": "fixing compilation error"}
{"gold": "mmm, why a method declaration should not have the TypeVariableResolutionCapability? Is this ok?", "pred": "Fix typo in javadoc"}
{"gold": "nit: any reason you swapped the ordering?", "pred": "Fix typo in EeaSendRawTransaction"}
{"gold": "can you de-uglify at least this line?.. hard to tell what changed...", "pred": "Update index.js"}
{"gold": "Please can you merge master in before making these changes. I just reinstated a bunch of BPF UTs. Possible that the UTs use this code.", "pred": "Fix typo in comment"}
{"gold": "Do you want to add additional cases for `Bla.__b()` and `self.__c()`? (Just add additional classmethods `__b` and `__c` and the calls to `__init__`)", "pred": "Update class_var.py"}
{"gold": "the recids is never changed after. So, it should contains the exact shown results, whatever are the rights for the user (admin or simple user, restricted collections...)", "pred": "fix typo"}
{"gold": "Shouldn't the docstring mention that the MD5 checksum of `p` is computed each time and verified? Also, could there be use cases where a caller might not want such a check to happen because, eg, a blob storage solution doesn't provide MD5 verification or uses another hash algorithm such as SHA256?", "pred": "storage/gcsblob: fix typo in godoc"}
{"gold": "focusRedirect is used in the powerpnt appModule. We might have to make sure that this does not break. Having said that, I really like this being handled on the events level!", "pred": "Fixed bug in event handling."}
{"gold": "You imports are out of order", "pred": "Fix import path"}
{"gold": "This should not be called Flow Trigger. FlowTrigger should has its own flowTrigger job name, for instance, \"flowtrigger\"", "pred": "Update QuartzScheduler.java"}
{"gold": "File is not `goimports`-ed (from `goimports`)", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Why do we need `\\n` if we already use `WriteLine`? (and `\\n` is not cross platform)", "pred": "Update Program.cs"}
{"gold": "What is instrumentation name used for? I'm not seeing other classes use it, only a getter, constructor, and builder.", "pred": "Fixing formatting"}
{"gold": "@kristofgazso could you review these warnings?", "pred": "Fix typo in SortedPoolEventArgs"}
{"gold": "will delete this.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "~~Indent 2 lines above~~ Disregard. My fault", "pred": "Fix new plan link helper"}
{"gold": "What was the bug that this is fixing?", "pred": "Fix bug in InitCodeTransformer"}
{"gold": "This will always add the authorization header to the request object. Is this the right scope for these two lines? If username/password are not defined, it will encode 'Basic :'", "pred": "Fixing a bug in the remote connection"}
{"gold": "Is this always how Bazel does paths? Would it be nicer to do `-DBAZEL_TEST_DATA_PATH=../com_github_google_flatbuffers/tests/` so this string is not hardcoded in the the source?", "pred": "Fixing a typo in the test_data_path variable."}
{"gold": "Not an expert of ES, so not sure of the impact here.", "pred": "fixing the doc string"}
{"gold": "Who deletes the memory for the granteeList? (or the roleList for that matter)", "pred": "Fix for bug 10-010110-1111 (root user can't see metadata)."}
{"gold": "This loop is missing a lock on subscriptions_mutex.", "pred": "Fix websocket session destructor"}
{"gold": "shouldn't clearance be setting these up for us?", "pred": "Fix routes"}
{"gold": "Need to update the doc for `TelemetrySDK` and `Host` structs deleting references from removed functions.", "pred": "Fix typo in comment"}
{"gold": "I think we should keep that here and add a new method `isSyntacticallyFinal` that returns `super.isFinal()` (and can be used in UnnecessaryModifier). Otherwise the contract of `isFinal` is not respected", "pred": "Fix #1008: RecordDeclaration.isNested() should return true for nested records"}
{"gold": "Is there a reason why we wouldn't want to check this every time? Why are we only checking for the footer and scroll bar when enableCellEditOnFocus is true?", "pred": "fix(core): fix scroll event calculation"}
{"gold": "You need to create an API for this class. This class should follow roughly the same dependency structure than RemoteAvailableInstallersPlayOnLinuxImplementation / RemoteAvailableInstallers. Maybe we could use a inner class here?", "pred": "Fixing import"}
{"gold": "This should not be a case, right? If `run_id` is the same `workflow_id` can't be changed. Actually surprised that it is not part of a key.", "pred": "Fix typo in MySQL visibility store (#1479)"}
{"gold": "How would AQR work for an INSERT/SELECT of one table into another where a LOB column is being copied?", "pred": "10-020211-1404.22.10.20.0000000000000000000000000000000000000000"}
{"gold": "Since these are ultimately different endpoints, it would be nice if we could move them up one level and nuke the common `sds` directory in order to reduce path stutter", "pred": "Fix import path for sds_v2 (#1156)"}
{"gold": "Please check also whether `null` occurs in the rest of `beforeChangeResult` array.", "pred": "Fix typo in Core.js"}
{"gold": "Outdated docs. There is no response, there's an ack.", "pred": "transport: fix typo in comment"}
{"gold": "I'd rather have the container process remove the FIFO after it unblocks. Then `start` can always `Exec()`, and you can catch the \"FIFO does not exist\" error and translate it to a prettier \"someone must have already started the container\".", "pred": "libcontainer: fix typo in comment"}
{"gold": "can you check if there's other similar cases to add nil-check like this?", "pred": "fix: fix typo"}
{"gold": "`<= 64`? I just picked up what you said in #3981 (\"the CN field is limited to 64 characters\") but maybe there's something I don't know where the 64th character is needed (trailing dot or whatever?) Also this sounds like something that could be beautifully unit tested. Sorry for bugging you :grin:", "pred": "Fix dummy cert generation"}
{"gold": "I understand that this grabs a Licenses objects but what is the autocomplete method used for? What does this do in context of the auto_completes controller?", "pred": "Fix license abbreviation"}
{"gold": "I don't really like that way of naming methods based on their arguments. But I can see that the other method names are the same ...", "pred": "Fixing a bug in BlockchainQueries"}
{"gold": "@sekmiller This method correctly strips the leading and trailing slashes (and also \".\" and \"-\"); But I thought the plan was also to replace any multiple slashes between nested folders with a single slash. For example, as implemented now, I can enter \"folder1///folder2\", and it gets saved and displayed like this, with the 3 slashes. I thought we wanted to sanitize it as \"folder1/folder2\".", "pred": "Added a method to generate a random string"}
{"gold": "Looks like the X86 inline assembly is not happy with this type. I will update that", "pred": "Fix build on aarch64"}
{"gold": "Tabs and a space, again.", "pred": "Fixed diary entry title link."}
{"gold": "Please just enclose if blocks with brackets; this has created issues in the past so I'd prefer we don't use them", "pred": "[fixed] quests not being removed from the quest list when they are completed."}
{"gold": "`version` isn't need anymore because it's built into `approve_proposal_url`, yes?", "pred": "Fix approval link in proposal show page"}
{"gold": "Moved to the bottom of the file. `CtrlPDU` sits on `BTLE_DATA` so let's put it after", "pred": "Fix import"}
{"gold": "This ends up requiring the `json` gem, right? Is there any way we can do this to be implementation agnostic (e.g. to let me use `yajl-ruby` for performance reasons (or because my app already brings in a JSON library)", "pred": "add a comment about the helper_method call"}
{"gold": "This seems dangerous. What circumstances lead to the need for a retry? Can that happen more than once? I'm concerned that if we hit the pathological state, this could turn into a CPU spinner. I wonder if we could get the same benefit from just \"trying again\" and failing if it fails the second time.", "pred": "Fix typo in comment"}
{"gold": "If there is a reference to other fields or methods, please do the initialization in the constructor.", "pred": "Fix import order"}
{"gold": "These should be importing from `pill-container`", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Why this change? It will now only show on the bottom of the screen as white text, is it correct behaviour?", "pred": "Fix trade bug"}
{"gold": "Does this need to allocate a string or would a nil value (indicating no header) be a better?", "pred": "Fixing the title field for the show page"}
{"gold": "Nit: Past tense of `reset` is also `reset`.", "pred": "fix: \u4fee\u590d\u7ec4\u4ef6\u7684state\u521d\u59cb\u5316\u95ee\u9898"}
{"gold": "Shouldn't this use `'n'` instead?", "pred": "[Qt] Fix wallet synchronization status command"}
{"gold": "revert back to 'TASK_TYPE_ACTIVITY_TIMEOUT'", "pred": "Fix typo in timerQueueProcessorBase (#2048)"}
{"gold": "Shouldn't we prefer passing a pointer by reference T*&, since these are C++ bindings?", "pred": "Fix compilation error in Engine.cpp"}
{"gold": "nit: Personally I feel that it's cleaner to let `toAntreaPeerForCRD` to take `ingressRule` as a param instead of `ingressRule.From`. It can call `processRefCGs` inside the function and do the ipBlock/AG union within the function itself. It might not be worth the refactor though.", "pred": "Fix a bug in the NetworkPolicyController"}
{"gold": "Pending has been set only for SPC.. why? for other CRs as well, this need to be done.. right?", "pred": "Fixing the version update issue"}
{"gold": "would use an empty string here as default and then check for emptiness in the twig template. I dont like mixing types @core23 what do you think?", "pred": "Fix Vimeo provider"}
{"gold": "How come we need case manipulation for the nextPageToken and not for pageToken?", "pred": "Fix typo in PhpSampleMethodToViewTransformer"}
{"gold": "why use these rather than regular named paths?", "pred": "Add route for admin"}
{"gold": "Hm, I don't think the extra flags are doing any harm here, but it does seem like `--help` is the only flag you could *actually* use with this command. We might eventually want to separate those out.", "pred": "(maint) Fix help for `bolt plan show`"}
{"gold": "We should make this a docstring, so that editors are able to pick it up.", "pred": "Fixing import error in test_utils.py"}
{"gold": "Put a comma after the last parameter of a multiline method call.", "pred": "Fix feature test"}
{"gold": "App cache size is now managed dynamically by the `WebView`. This statement has no effect in the new framework.", "pred": "Fixing the issue with the SalesforceDroidGapActivity"}
{"gold": "VirtualNode has a `hasAttr` function, any reason why you're not using it?", "pred": "Fix alt-text-only rule to not flag empty alt attributes"}
{"gold": "This now throws when running tests (maybe the move to java 11??). Do we want to keep it?", "pred": "Fix typo in HttpAccess.java"}
{"gold": "We can allow 7-char SHA, does not mean we want to show with 7-char in default, please change to `if len() > 10`, then cut.", "pred": "fix(git): fix sha1 encoding"}
{"gold": "this one should also have quotes i guess :)", "pred": "Update en_US.js"}
{"gold": "Using the variable on range scope `mock` in function literal (from `scopelint`)", "pred": "Fix test"}
{"gold": "does this result in a 200 when the dataset is still inprogress/publishing not yet finalized? Seems like 202 is the right code for that (as it was) and the test should be watching for a 202?", "pred": "fixing merge conflict"}
{"gold": "Previously you could only order by the field you were searching by. But for full-text search, you can search across all indexed fields, and it didn't make sense not to have a sorting. For backward compatibility, the javascript code uses indexPath as the orderPath when no orderPath is provided.", "pred": "Fixing a typo in the SmartStorePlugin class"}
{"gold": "VIM didn't like your whitespace.", "pred": "Fix typo in comment"}
{"gold": "Are you sure the namespace should change?", "pred": "Fixing the copyright header"}
{"gold": "@martijn00 I'm not sure why we're keeping the object parameter and return type since this can be done by using MvxApplication<THint> with THint set to object", "pred": "Update IMvxViewModel.cs"}
{"gold": "why do we create a time type here?", "pred": "fix: remove unused import (#1008)"}
{"gold": "Does this style actually need to get loaded in all of these components?", "pred": "Fixing a bug in the ratings page"}
{"gold": "import but not used so you did not resolve compile warnings?", "pred": "[SCB-1065] fix checkstyle"}
{"gold": "This is so much more concise and beautiful than the previous formula  ", "pred": "[fixed] typo in Creature::blockHit"}
{"gold": "Is there any reason not to have the `static` modifier for the logger? _(that would be in keeping with the reference being uppercase)_", "pred": "Fix import"}
{"gold": "It's not about session creation config. It's about passing consumer config parameters to underlying transport - nothing to do with session itself", "pred": "Fixing import"}
{"gold": "Why is there an \"enable\" in the param name? Couldn't it just be `overrideDebug`? Here are everywhere else.", "pred": "Fix comment"}
{"gold": "`published.recently_published_first` reads a little oddly to me. Is this the same thing as `Video.published.ordered`?", "pred": "Fix video controller"}
{"gold": "Encountered this because I had a stray comma. Figured I'd tweak it a bit.", "pred": "fixing the integration test preprocessor"}
{"gold": "qq: Should this include the iptables6-save sim. to the inverse checks above?", "pred": "Fix typo in service loop prevention test"}
{"gold": "im open to explicitly checking NotSet value here but json logic already handles it so kept it this way.", "pred": "Fixing merge"}
{"gold": "The naming of the include file appears to be unlucky.", "pred": "Fixed a bug in the ScriptingEnvironment constructor."}
{"gold": "Bit worried about this. At minimum you should make a copy of the dict here to avoid modifying a user supplied variable.", "pred": "Fix legend positioning in bar plot"}
{"gold": "Is it better to create one before pruning? In case creation fails we don't want to delete the previous one. We create a new one, it is tagged as latest, so the previous can be deleted. `CreateLaunchTemplateVersion` returns the version created, how about directly trying to delete the previous version? Assuming the numbering is strictly increasing.", "pred": "Update aws_machinepool_controller.go"}
{"gold": "Do we require the specific implementation information here?", "pred": "Fix typo"}
{"gold": "How about `exists?(['domain ~* ?', domain.downcase])` ?", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Is this getting used in other places? Can we switch all the places to use the new API you added?", "pred": "Update context.go"}
{"gold": "This need to be checked with linux. AFAIK, we have this file in our bin directory that is a link to the system file.", "pred": "remove comment"}
{"gold": "Shouldn't we import `default`? I can't get here to test.", "pred": "Fix controller loading"}
{"gold": "!!!!!!!!!!!!! @graingert, does this mean that tests haven't been running???", "pred": "Fixing test_server_client.py"}
{"gold": "I've already tried the null-coalescing operator here and got a strange error, so did this the old-fashioned way.", "pred": "Fixing a bug in the tool format"}
{"gold": "This doesn't follow our spacing convention. It's also a little hard to read. Can you reformat?", "pred": "fix(utils): fix list utils"}
{"gold": "The deploy should come before template? EDIT: I see that in other files, we put a separate line and put deploy at the end. What is the reason for this?", "pred": "fix: remove unused import"}
{"gold": "Consider making a constant (e.g. `MetricStreamConfiguration.Drop`).", "pred": "Fix typo in Program.cs (#2016)"}
{"gold": "same question: why not just switch this to range too?", "pred": "fixing import error"}
{"gold": "@chuckatkins most places used an empty string for \"no type\", but a few used `\"unknown\"`. I've converted both cases to `Type::None`. Do you know why there was a distinction before?", "pred": "[Core] Fix compilation error in IO::InquireVariable"}
{"gold": "should we assert for the type for `FeatureGroupData` ? I think it should be 1-Byte type.", "pred": "fix bug in copyDenseFeature"}
{"gold": "As long as you are sure this is definitely correct now... :-)", "pred": "Fixed test_dimension_values_vdim"}
{"gold": "... so that all action buttons have the same height :-)", "pred": "Fix temp basal cancel button"}
{"gold": "Use correct, alpha sorted, include order. Correct order means: 1. Header corresponding to this source (i.e. `\"LatencyTestPublisher.hpp\"`) 2. C system headers 3. C++ system headers 4. Alpha-sorted external libraries headers 5. Alpha-sorted public headers from this project 6. Alpha-sorted private headers", "pred": "Fix compilation error in Windows (#1078)"}
{"gold": "I hate this name, open to suggestions.", "pred": "outbound: fix typo in comment"}
{"gold": "Does this log line work? We need Warningf or just warning without the format string.", "pred": "Fix typo in comment"}
{"gold": "The pull controller would need similar updates.", "pred": "Fix typo in comment (#1000)"}
{"gold": "ignore this.. just didn't want to litter with a commit update to satisfy license plugin", "pred": "Fix typo in license header (#1877)"}
{"gold": "Is this definition needed since it doesn't look like it's being used anywhere?", "pred": "(maint) Fixing the windows install"}
{"gold": "Can this condition be reworded using `if` please?", "pred": "Fix Mongoid::Document.discriminator_key deprecation warning"}
{"gold": "after ||, no need inputs != nullptr", "pred": "fix bug in fetch edge executor"}
{"gold": "Is it just preference or on purpose that using slice of structs instead of slice of pointers?", "pred": "fixing typo"}
{"gold": "This line always confused me   anyway. Good catch!", "pred": "fix(diff): fix typo in diff.js"}
{"gold": "Should we add `ctx` to `BlockServer.Shutdown()` for this purpose? Would be nice, but I don't care too much.", "pred": "journal: fix a typo in the journal block server"}
{"gold": "Duration_t at RTPS level must be serialized using fractions.", "pred": "Fixed bug in deadline QoS"}
{"gold": "\"peer\" has its own meaning within YARPC with its own class of objects. This should probably be \"dispatcher\" too?", "pred": "Fix import path in errors.go (#104)"}
{"gold": "I do not like this line break before `=true`. Maybe starting the list in the next line would help to reduce the indent? This way we could keep this string together.", "pred": "[analyzer] Fix a typo in the clangsa analyzer"}
{"gold": "_plugins should be removed too", "pred": "fix: fix the comment of config.go"}
{"gold": "The rule selector will not include `<input>` and `<area>` elements. Why not make this a new, separate rule altogether?", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "@The-Compiler Is this style okay or would you prefer a common userscript exception base?", "pred": "Fix typo in command-dispatcher.py"}
{"gold": "we'd need to return a MongooseBuffer here instead of the Binary. lets add the subtype option to the buffer schema type as referenced in #1000 instead.", "pred": "fix(schema): fix casting of buffers"}
{"gold": "Let's remove this change.", "pred": "fix(update): ensure selector is not null"}
{"gold": "Could you split this into multiple lines?", "pred": "Fix for #6855: \"not selected\" is spoken for some broken controls"}
{"gold": "This technically works, however it may be safer to use both `getCurrentReferenceURL` and `getCurrentEntityURL` and then make this condition `currentReferenceURL === currentEntityURL`. Currently, this code only works based on the internals of `getCurrentReferenceURL`, so by checking both we would decouple that.", "pred": "Update DashboardSpeed.js"}
{"gold": "It does not recommend capitalization", "pred": "fix(ws): fix typo in error message"}
{"gold": "Minor thing, but can you use 1.9 hash syntax for this?", "pred": "Fix typo in subscription spec"}
{"gold": "I tried to follow the code structure already present.", "pred": "Fixing a bug in the lambda executor"}
{"gold": "seems reasonable to also want to include the 'to' location?", "pred": "Fixing a typo in FileHandler.java"}
{"gold": "Please leave 1 space char between commas here and other places in this PR.", "pred": "Fixed a bug in the test base class."}
{"gold": "hm is this really &&? Not ||? Was it initially correct if any of these things are not set that it needs to recreated?", "pred": "Fix a bug in ThreadsExec::spawn()"}
{"gold": "Please don't use C-style array declarations. IMO our pre-commit ought to be enhanced to not allow this", "pred": "SOLR-14020: Fix typo in package tool"}
{"gold": "@rhc54 This doesn't look like a comprehensive comparison. For `PMIX_STRING` we seem to actually compare the content of the data while here we only compare meta-information which doesn't ensure that values are the same.", "pred": "Fix a bug in the pmix_value_cmp function."}
{"gold": "I think `bypass_frontier_confirmation` conveys the intention better (default false as well)", "pred": "Fix json_handler bootstrap"}
{"gold": "This looks like it goes beyond the scope of removing `BlockHeight()`, in the future please do this in a separate commit at a minimum -- separate PR is fine too.", "pred": "fix import"}
{"gold": "You'll also need to adjust `FakeWebTabAudio` in `tests/helpers/stubs.py`.", "pred": "Fix typo in comment"}
{"gold": "@csrwng what should we do here? This one is from origin.", "pred": "Fix typo in comment"}
{"gold": "Follow alphabetical order.", "pred": "fix typo"}
{"gold": "As far as I can tell, these always get and set the context as an `IReadOnlyDictionary<string, string>`. Can we use that here instead of `object` and get rid of the `as IReadOnlyDictionary<string, string>`?", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "As you only have `{}` as the format string (without anything else in it), this is the same as doing `self._doc.setHtml(html.escape(self._opt.text))`", "pred": "Fix #101: CompletionItemDelegate does not work with PyQt5"}
{"gold": "Where would this be configured? In azkaban.properties?", "pred": "add a new property to enable/disable the flow version control feature"}
{"gold": "1. Use `const` instead of `var` here. 2. Move the check to after the `if (update == null || typeof update !== 'object')`.", "pred": "Fix typo in comment"}
{"gold": "Let's assume that on Linux `eventfd` is always available as a wrapper of the eventfd2 system call. It is supported since linux 2.6.27 + glibc 2.9, as well as from the ancient versions of bionic. In other words, it would be fair to argue that the pair would be available on practically all platforms that provide `pipe2`. Therefore switching from using `pipe2` to `eventfd` on linux unconditionally would not cause issues on our users.", "pred": "fix compilation error on Windows"}
{"gold": "This field could be `final`.", "pred": "#2255 Database transfer consumer: fix typo"}
{"gold": "would be good to have a test for the case when `shutdown!` raises", "pred": "fixing ssh connection close"}
{"gold": "Does upsert pass this check also?", "pred": "Changes to support HBase 0.92.0"}
{"gold": "Apologies reviewers, I did end up pushing another change. I was starting to request SRE-P help to get the apiserver configs from some clusters before and after when I realized I can just log the stdout from the patch command to see if anything was changed or not. Much simpler to verify if my work did or did not make changes to the config during the transition. Also got the spacing issue you mentioned @abhinavdahiya Thanks all.", "pred": "Fix typo in patch_test.go"}
{"gold": "I'm not sure this naming is a good idea; that's the format for macOS xattr metadata files on unsupported filesystems.", "pred": "kbfs: fix comment"}
{"gold": "Metrics/LineLength: Line is too long. [85/80]", "pred": "Fix migration"}
{"gold": "Please remove these imports. The project's style is to use `Assert.assertEquals` and not import static methods in general. This also caused a lot of unnecessary changes.", "pred": "Fix import order"}
{"gold": "thanks. Note that returning at this point might leak memory from the allocations above, so the PR will need to take care of that too.", "pred": "out_http: fix missing return value in http_post()"}
{"gold": "If you really want to rename this, you'll also need to adjust the name in `__init__` and in other places it's used (`browser/commands.py`).", "pred": "Fix fullscreen state"}
{"gold": "As discussed at standup, I gave up on this. Calling `DeleteMapLayerMetadataCommand` felt cleaner anyway because there might be other cleanup that needs to happen. @scolapasta and @matthew-a-dunlap plan to discuss this.", "pred": "Added a comment to MapLayerMetadata"}
{"gold": "Do we need these changes? If so, can you tidy up the messages? Looks like it might have been your testing/debugging changes  ", "pred": "Fix typo in comment"}
{"gold": "where is the default being set?", "pred": "Fixing import path"}
{"gold": "these changes should likely be in the next commit instead", "pred": "Fix a bug in the RPM parser."}
{"gold": "Since you have defined this struct, I would suggest to replace all exist literal structs by this.", "pred": "Add table formatter tests"}
{"gold": "The field name doesn't really capture what this option does. I think `mConfirmDiscardMessage` would be a better choice.", "pred": "Remove unused import"}
{"gold": "what if `$media->getBinaryContent() == Symfony\\Component\\HttpFoundation\\File\\File` does `is_string()` return `true`? ping @greg0ire", "pred": "Fix typo"}
{"gold": "maybe rather than `bool` make this field a `StructDef *` ?", "pred": "fix: generate nested struct accessor for nested_flatbuffer"}
{"gold": "Shall we maybe put this in a `const` like `backgroundTaskTimeout`?", "pred": "Fix typo in comment"}
{"gold": "CI is complaining about this.", "pred": "Fix flaky test (#1047)"}
{"gold": "Let's only change a file if it is really necessary. Such a change does not bring much value and makes it harder to find the original commit in which the method was introduced.", "pred": "fix(engine): fix compilation error"}
{"gold": "I would prefer to set up space between classes in format pattern, `%s %s` and then use `trim()` to remove unnecessary whitespaces. This will also solve stripping whitespaces from the beginning and end of a string `$attributes['class']`", "pred": "fix image extension"}
{"gold": "when Op is illegal should return here?", "pred": "fix(executor): fix compile error (#1088)"}
{"gold": "don't we need to remove the project version from installedVersions?", "pred": "Fixing a bug in FlowRunnerManager."}
{"gold": "the bridge here isn't defined as an accessor / reader to try mask it better. So you need to directly call the iVar `@bridge` here.", "pred": "Fix typo in comment"}
{"gold": "This is intended. Pls revert this.", "pred": "ipset: fix typo in comment"}
{"gold": "Something wrong with cast to `(Comparator<> & Serializable)`, need to be investigated", "pred": "Fix RedBlackTree.ofAll() javadoc"}
{"gold": "I think we need this. Not sure, I'll test.", "pred": "fix: remove unused import"}
{"gold": "I'm going to need to check if google compute requires these steps in this order, or if you can disable iptables after the fact.", "pred": "(maint) Fix typo in google_compute_helper"}
{"gold": "Did go change their tags with the new version?", "pred": "Fix typo in comment"}
{"gold": "I don't recall what we decided here in terms of which source would get priority. As written, the static configuration will overwrite datastore results.", "pred": "Fix typo in federation server (#1183)"}
{"gold": "I think it should still panic for when there are no outputs; might be nice to special-case that though so the message is more explicit.", "pred": "Fix typo in replaceSequenceLabel"}
{"gold": "*NULL_DEREFERENCE:* object `null` is dereferenced by call to `meterSupplier(...)` at line 122.", "pred": "SOLR-10054: Fix javadoc"}
{"gold": "switch over to .mode", "pred": "fix(test): fix test"}
{"gold": "I guess your IDE did some auto-fixing here  ", "pred": "Add test for `hiddenColumns` option"}
{"gold": "This is an unused import failing recommit still.", "pred": "LUCENE-2584: fix javadoc warning"}
{"gold": "I'm concerned that we're conflating multiple things here. There are 2 things that Beaker should really care about: - Network transport - i.e. `ssh` vs `winrm` - Interpreter - i.e. `bash`, `cmd`, `powershell`, etc The problem is that @cowofevil is running Bitvise SSH, and he assumed we should be setting `is_cygwin: false` in node definitions. But that doesn't really accurately convey what we care about, and since Beaker doesn't appear to track network transport apart from interpreter, we end up in a strange state. `is_cygwin: false` appears to end up setting `is_powershell?` to `true`, which IMHO is not accurate or appropriate. Bitvise templates use `ssh` (like Cygwin), but the interpreter used is `cmd`, not `powershell`.", "pred": "(BKR-100) Fixing the rsync transfer of modules"}
{"gold": "I think this is ok for now. This ties into the larger issue of the site not having a consistent method for relaying form input errors. Please make sure the focus gets set on the close button when the dialog opens.", "pred": "fixing the tinymce css path"}
{"gold": "Should these link be removed?", "pred": "docs(samples): fix typo in samples plugin description"}
{"gold": "Please make this a keyword-only argument by adding a `*` argument before `add_undo`.", "pred": "Fix tabbed browser close tab"}
{"gold": "didn't quite follow what this code block is doing.", "pred": "fix: event stream writer test template (#104)"}
{"gold": "this doesn't sound pretty... I would rather we have a proper navigation for all modes - AFAIK TV remote navigation is very similar to normal keyboard, but maybe it just uses another key codes - those should be extracted in a single file and defined there depending on context then", "pred": "Fix typo"}
{"gold": "After diffing the children we check whether the value got out of sync, if it did we update it. We also update the `_prevValue` to prepare for the next event hitting our controlled component", "pred": "fix(patch): fix patching of text nodes"}
{"gold": "It provides a type called Node which is a fully functional bee client. This package is where the dependencies are injected. It is not just a glue-code, it is concept of node.", "pred": "Fix typo in comment"}
{"gold": "I think this will change `''` to `'%'` unconditionally, i.e. there'll be no way to set `''` anymore. This should really only be used for values which make no sense anymore.", "pred": "Fix typo in config manager"}
{"gold": "Nit: this table's row key map -> this table's row keys map", "pred": "Fix javadoc"}
{"gold": "this change should be reverted", "pred": "Fix typo in comment"}
{"gold": "I'm a bit confused about the `os.path.dirname(basedir)` here - is this just to get to the parent directory? Either way, I think I'd prefer just having this in `update_version.py` as it's not needed in qutebrowser itself.", "pred": "Bump version to 1.5.1"}
{"gold": "Revert this change and see below why...", "pred": "Fix test"}
{"gold": "Should not switch to `lvis_v1_instance` here because that base config uses ClassBalancedDataset to oversample the data.", "pred": "Update cascade_mask_rcnn_r50_fpn_1x_coco.py"}
{"gold": "This is an informational message that allows someone to read the console output and understand how the grid node is configured. Please leave.", "pred": "Fixing a bug in the node options"}
{"gold": "This doesn't make sense to me. What does RaiseSingleton mean? To me it sounds like a single object is being.. raised? Not sure.", "pred": "kvdb/api: fix comment"}
{"gold": "What's the benefit of having jobExecutorTests as a member variable? What do you think about making the method static? Afterall, it is a stateless method.", "pred": "Added a test for the JavaProcessJob"}
{"gold": "This looks like it's only downloading things, not really checking their true validity. Especially for the MD object. Should we call `BareRootMetadata.IsValidAndSigned()` in `mdGet`?", "pred": "cmd/dumpmd: add help for dump subcommand"}
{"gold": "Nikoli, I believe that this addresses your concern. One question for you or Jae-Seung is if any allocation from the clone is properly cleaned up when the vector is destroyed. I believe that it should.", "pred": "fix bug in image_data_reader"}
{"gold": "should be `ECSApp`  ", "pred": "Add KindGitOpsConfig to the Kind enum"}
{"gold": "flake8 is going to fail on this having 2 lines", "pred": "Fixing typo in docstring"}
{"gold": "should we make a dir named controllers/scheduler/podchaos", "pred": "Fix import path"}
{"gold": "there seems to be one KeyNode in kubernetes.go of PV.. would it make sense to use it?", "pred": "Fixing import"}
{"gold": "Im gonna be a little annoying here but did you configure your linter correctly? This empty line should not be here. Maybe go to settings and check if `goimports` is enabled?", "pred": "fix: remove unused import"}
{"gold": "Don't think this belongs in this pr", "pred": "Fix emoji plugin"}
{"gold": "We can assert on the existence of Outbounds through ClientConfig calls right? Since this is only for tests, do we need this function?", "pred": "Fix typo in comment"}
{"gold": "@martijn00 so this PR introduces a new ViewModel lifecyle method? It isn't in the PR description/any new docs  ", "pred": "Added missing interface to IMvxViewModel"}
{"gold": "Are these modification duplicate? Or should we move it into base detector.", "pred": "Fix a bug in single stage detector (#4955)"}
{"gold": "Since this is private and single use it should be un-wrapped inside of the two-arg dagSeed method.", "pred": "Fix typo in comment"}
{"gold": "why the order change? Also for the next chunk. (I understand the result will be the same though)", "pred": "[BUGFIX] Use correct array_merge_recursive_overrule() method"}
{"gold": "I wonder if this should just be a single `string`? We don't have any cases where we return different types and it would make the parser simpler to just read a single identifier.", "pred": "Fix typo in comment"}
{"gold": "I don't think this needs to change. Can you go back to the previous implementation?", "pred": "Fix typo in BaseDataReader"}
{"gold": "Bump it 2 lines higher, 'c' > 'u'.", "pred": "Fixing import error"}
{"gold": "Please do not add author here", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Similarly, we should be able to persist action uniformly", "pred": "fix import path"}
{"gold": "I think i'd prefer this override to be in the test helper instead, if that's possible?", "pred": "Fixing the config file"}
{"gold": "This would be better with context added via wrapping or fmt.errorf()", "pred": "Fix typo in comment"}
{"gold": "What's the purpose of this file?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "@bhariharan Why was passcode length requirement allowed to be lowered?", "pred": "Fixing a bug in the passcode manager"}
{"gold": "This file needs a license header, too. Sorry I didn't catch that earlier.", "pred": "Update gcs.go"}
{"gold": "probably don't need `[:]` why not reference into `github.com/algorand/go-algorand/daemon/algod/api/server/lib` here and skip bouncing off daemon/algod/server.go ?", "pred": "Fixing a typo in the example"}
{"gold": "Why reference is converted to table?", "pred": "Fix test"}
{"gold": "should we implement pagination in the fake datastore so the server startup code that paginates entries for trust domain validation can be tested?", "pred": "Fix typo in comment"}
{"gold": "What mechanism will be exposed so the caller knows they're using the vectorized version?", "pred": "Fix typo in comment"}
{"gold": "Can we remove respond_to block its not required here", "pred": "Fix topics controller"}
{"gold": "Do not do that even in example, we demonstrate bad practice", "pred": "Update jaccard.cpp"}
{"gold": "Hm, taking a second look over this, this is why we have the object inheritance structure that we do. This could be divided up by having a custom determine_if_x86_64 in the pswindows/exec hosts and then a default method in hosts.rb. That way all the custom ps windows work is in a single location.", "pred": "(BKR-101) Fix arch detection on OSX"}
{"gold": "We have to `.Complete` now because of empty/null string test cases.", "pred": "Fix test"}
{"gold": "Is there still a way to specify no recursion?", "pred": "(BKR-100) Fixing scp_to to use the correct options"}
{"gold": "How is this name being URI safe and being used programmatically related?", "pred": "Fix typo in comment"}
{"gold": "I think we have to keep this as a fallback for now, else it's a small breaking change :(", "pred": "fix: add missing semicolon"}
{"gold": "nit: shouldn't be part of this PR.", "pred": "fix: test"}
{"gold": "this change looks wrong to me. I think the test is trying to signal that something went wrong by throwing the `Error` here, otherwise the `catch` below will swallow it.", "pred": "fix(test): fix cursor test"}
{"gold": "I'm doubting if this should be `if (_layout.IsThreadAgnostic)`, as ThreadAgnostic stuff could be calculated on every thread. (and thus could be lazy). non-ThreadAgnostic should be calculated on the main thread.", "pred": "Fix #2655 - NLog.Internal.FileTarget.Write(LogEventInfo) - reusableBuilder.Length is not the same as reusableBuilder.Capacity"}
{"gold": "Please use only `Logger` instead of `org.slf4j.Logger`", "pred": "Remove unused import"}
{"gold": "Should this be \"no limiter drop\", since this isn't an absolutely essential activity for the stability of the network?", "pred": "Fix block processor"}
{"gold": "I updated many of the success messages, because most of these operations don't return data if they succeed. This meant many of the operations would print: `Success null` if the script ran successfully.", "pred": "Update delete-account-alias.js"}
{"gold": "Could you simply add it to the previous clause ?", "pred": "Fix test_pyx.py for Python 3."}
{"gold": "@joshyrobot, I think you can just use localeCompare with only the first argument and leave the other arguments out (here and all the other lines changed). It seems to do the right thing, and then we don't have to worry about these extra options.", "pred": "Fixing a bug in the procedure sorter."}
{"gold": "@chengren311 : where does this logic move to?", "pred": "Fixing the execute flow action"}
{"gold": "Can we have a `nil` exception check at `s.scope.ManagedMachinePool`", "pred": "Fix typo in nodegroup_service_test.go"}
{"gold": "Rather than deleting this, should you just reformat it so it's the `*` settings, so if nothing is configured in facets.ini, the existing default behavior continues to work?", "pred": "Fix: missing use statement"}
{"gold": "wrap, single line", "pred": "Fixing the import options form."}
{"gold": "always use brackets for if statements", "pred": "Fix JavaContextCommon"}
{"gold": "`NUnitIntegration` doesn't need to cache this anymore.", "pred": "Fix typo in NUnitIntegration (#1119)"}
{"gold": "Why did you change it to `>=` here?", "pred": "Fixing the query for the access counts"}
{"gold": "Looks like this needs to be updated. There is no need to remove `hadoop.` if Hadoop tables don't use this code path.", "pred": "[SPARK-35761][SQL] Fix the table name of the action in the explain plan of the v2 commands"}
{"gold": "This require isn't need anymore, right?", "pred": "Fixing a typo in the comment."}
{"gold": "a bit weird to see payments crypto package inside connection manager. There probably will be services not having any relation with payments that will use connection manager. Thats why probably ping-ping by itself can be useful without any relation to payments..", "pred": "fix import"}
{"gold": "I like the overall idea here, but I wonder if it would be more clear to define the property in the trait, and then set it in the constructors of the classes using the trait. Alternatively, at a bare minimum, it may be a good idea to add `?? 'Bibliographic'` here, to account for the possibility of the trait being used in a class that does not define the property at all.", "pred": "Fixing a bug in the MarcAdvancedTrait"}
{"gold": "I would prefer to not have a magic number, but construct this value out of other constants we already have.", "pred": "protocol: add a comment about the default congestion window"}
{"gold": "The limitation is if somebody configure another policy with the same name, but it is an edge case we can ignore I guess.", "pred": "Fix typo in comment"}
{"gold": "? The package is named `hashivault`.", "pred": "Fix typo in comment"}
{"gold": "I don't think this should enable xwayland, because it's convenient to toggle xwayland just by setting `xwayland` to `false`", "pred": "config: Fix typo in config_ini_handler"}
{"gold": "Remove this line by accident?", "pred": "Fix import path for fake clientset"}
{"gold": "Calling `.stream()` on a `DomainObjectCollection` is pretty much always a bug, as it doesn't include objects added later (and encourages people to use afterEvaluate). I wonder if we should make this an error prone check?", "pred": "Fix import order"}
{"gold": "Thanks for paying attention to other places this might happen. This one is particularly important; I probably never should have gotten in the habit of CheckErr(), since it does a log.Panic() explicitly, which looks like something else until you look closely. It's supposed to be used places where \"can't happen\" but Things Can Happen.", "pred": "Fix gitignore creation (#1525)"}
{"gold": "What is the different between nw_tos and ip_dscp? Only high 6 bits vs low 6 bits and supported version?", "pred": "Fix typo in ofFlowBuilder.MatchConjID"}
{"gold": "I'm assuming that asSmarts & cxSmiles == asSmarts", "pred": "Fixing a bug in the C++ wrapper"}
{"gold": "Seems like an oversight but I don't think the super would do anything else in this case unless I'm mistaken.", "pred": "Fixed bug in LabelledData."}
{"gold": "Curious, do we consider this as pedantic for example code?", "pred": "Fix typo in InstrumentationWithActivitySource (#2668)"}
{"gold": "Should we convert the entity name to snake case using `Doctrine\\Common\\Inflector\\Inflector::tableize` or similar ? Should a `snaked_name` or whatever be part of the entity metadata in order to use it for form names, ids, & other html attributes ?", "pred": "Fixing the form builder"}
{"gold": "Should be `client.outboundIp`", "pred": "fix: typo in fake client"}
{"gold": "Must these `using` statements not go inside the `namespace` block?", "pred": "Fixed missing using statement"}
{"gold": "Why? I thought the previous way was idiomatic. (Same with the `MetadataVer` stuff above.)", "pred": "fbo: fix mutex level"}
{"gold": "shouldn't we `reject` here instead?", "pred": "Fixing issue with contentuploader not being loaded"}
{"gold": "check err or use gasPriceUnitIOTX, _ := if we are sure action.Core.GasPrice is correct", "pred": "fix: fix print action proto (#1240)"}
{"gold": "Just curious, was wait not used at all before?", "pred": "Fix typo in comment (#118)"}
{"gold": "nit: can we remove this?", "pred": "Fix import path for yaml"}
{"gold": "is it not a problem when one synchronized function is called by other?", "pred": "Fix NotificationStore"}
{"gold": "We (even as admins) shouldn't override the User Preference settings like `email_master`, `email_posts`, `email_kudos`, `email_new_followers`. These all would be set by the user of their choice. Please do remove these attributes from editing//updating. Thanks!", "pred": "Fix account level"}
{"gold": "\"Este :attribute j est anexado.\" sounds better.", "pred": "Update validation.php"}
{"gold": "This line should be repeated for every module that needs testing. One cannot rely on nosetest to automatically discover all the modules. On the bright side, there is no need to change any of the other files.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "This error was unused", "pred": "crypto/tls: fix typo in comment"}
{"gold": "Personally I wish we didn't have a proto for every single little thing we do. RequestShardAction with an enum for the action type would be a lot cleaner imo, but I'm pretty sure that ship has sailed :) Just kvetching.", "pred": "fix: typo in comment (#105)"}
{"gold": "Does this make more sense as `trails/_trail` now?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "synced offline. let's move this to `agent_unix.go` to make the IMDS call, since this is not supported in Windows.", "pred": "Fixing typo in comment"}
{"gold": "Too much indentation here. Should match the lines above, which have four spaces.", "pred": "Add py_test mapping"}
{"gold": "Same here we still need this test to make sure the fallback works.", "pred": "Fix test case name"}
{"gold": "I'm wondering if we can actually base this on a `IMvxPresentationAttribute` instead of the base one.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "could we switch to `undefined` here?", "pred": "fix(unmount): remove unneeded code"}
{"gold": "The cleanup call", "pred": "Fixing a bug in SyncManager"}
{"gold": "I think \"View artist\" is a bit more standard and expected. Or even \"Go to artist\" to take the Spotify terminology as-is.", "pred": "Fixing a bug in the artist view"}
{"gold": "It might make sense to refactor this later so that we use a Bolt-native type to hide sensitive values.", "pred": "(maint) Fix typo in comment"}
{"gold": "We were trying to move away from this to force people to always run tests under py.test.", "pred": "Fixing import error in test_cpp.py"}
{"gold": "1 - create browser specific options class: - chromeoptions - firefoxoptions - argsoptions", "pred": "Fixing the issue with the Firefox driver"}
{"gold": "should be a case insensitive match though no? DOCTYPE and doctype are both widely used", "pred": "fix: proxy_listener_s3.py: fix content-type"}
{"gold": "We must have a `fail ParamNotFound` here for cases where `@account.nil?`.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "How come this change was needed?", "pred": "Fix typo in JsonPropertyCollection.cs (#2283)"}
{"gold": "Why are there only 6 pins here, while below it appears to have 8 ADC inputs? Are pin 2 and 5 used for something else on this board?", "pred": "Update pins.lua"}
{"gold": "I think we need an issue to track that chain sync omits BLS messages, and then to fix and test it!", "pred": "fix(graphsync): fix fetcher test"}
{"gold": "what is this default about? I am not using ngrok atm so would prefer an env var.", "pred": "fixing the asset host"}
{"gold": "@Samuell1 Might be better to say \"Automatically check for plugin updates on login\".", "pred": "Update config.php"}
{"gold": "Thanks for the additional Process helper! Can we also cache the first `Process.GetCurrentProcess()` result in a static field so we don't have to repeatedly call it? It means we would also need to dispose it when the static `_runtimeMetricsWriter` instance is disposed", "pred": "Fix namespace"}
{"gold": "just wondering what is the result of breaking the logic we test here? it seems that in that case we will just not return immediately, but i'm not sure whether the test will fail?", "pred": "Update mock_stats_engine_test.go"}
{"gold": "We should fail the test if this returns `err != nil`.", "pred": "cmd/go: fix TestInferModulePath on Windows"}
{"gold": "What is the drawback of not having this flag as a gating condition to report the metric?", "pred": "Fix typo in comment"}
{"gold": "`getProcessName()` will be less ambiguous, since Caddy has \"apps\" that it runs internally.", "pred": "Add gracefullyStopProcess"}
{"gold": "Is there any way to not hardcode this given we know the size in bytes? The public API has the flexibility of being a Span. Should we maybe not do anything printing DML? The runtime allocates the buffer, but it's a \"scratch memory\" area, The delegate gets it passed in and they decide how to use it. Also, how is DML used if the feature is for macOS support?", "pred": "Fix a typo in the DML dumper."}
{"gold": "How about just override the `buildFilter`? Passing another function here is a little weird.", "pred": "Fix a bug in ScanEdgeProcessor::checkAndBuildContexts (#1010)"}
{"gold": "This should just be a `.Bool()` flag I think, we don't encode anything beyond y/n here. See `$(RUN_CHECK)` and `$(STOP_ON_PKG_FAIL)` for examples of how to pass those in.", "pred": "Fix typo in comment"}
{"gold": "Is this needed?", "pred": "Fix a typo in the comment"}
{"gold": "This code is passing a non localized string when it should be passing in a localized string or it should use the name of the item being deleted.", "pred": "Fix delete lookup value"}
{"gold": "how about moving it under L26", "pred": "fix: import path for k8s.io/api/core/v1 (#100)"}
{"gold": "I think this needs to be tested", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Style/MutableConstant: Freeze mutable objects assigned to constants.", "pred": "Add friendly_id to trail"}
{"gold": "Just a thought, really. If it's a bug that can be probed for (and it can be - see Adrian's repro) then it could as well be a static initialization of a supplier of Deflater instances; if we probe for a buggy JVM, we return the wrapper. If we don't we return the Deflater. This way on non-affected JVMs nothing happens and if we do use the wrapper, we know the JVM is broken.", "pred": "Fix typo in javadoc"}
{"gold": "Looks like this should be publicly accessible for tests in any modules?", "pred": "fix FSTTester"}
{"gold": "Allow putenv is necessary to be able to get environment variables with `getenv`?", "pred": "fix(deps): update dependency symfony/dotenv to v5.3.4"}
{"gold": "use function to check it. - don't do everything in main", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Sorry I'm confused. Why not kwarg this like the others?", "pred": "Update base_rules_engine.py"}
{"gold": "First, any changes here should be synchronized with instr_compute_VSIB_index(). Second, the original looks correct to me: the first letter of the opcode name suffix is the index size, while the second is the memory size. So \"vpgatherdq\" is a d-sized index and q-sized memory. The operand size we store for memory accesses is always the memory size, not the address size, and for VSIB we store a single memory element size. It looks like we have no inside-opnd_t storage of the index size: that's done by dispatch on opcode it seems. I have a bunch of notes of discussions on how to handle VSIB: we decided to bail on encoding too much inside the opnd_t I guess.", "pred": "x86: Fix typo in vex_W_extensions[]"}
{"gold": "Sorry for going back and forth. Adding docstring here would be very helpful for others to understand the need of this method.", "pred": "Fixing a bug in the ExternalProgramTask"}
{"gold": "You introduced a bug here.", "pred": "Fix canSeeCreature()"}
{"gold": "Should we log a warning/error if only one is specified and not the other?", "pred": "Fixing the build"}
{"gold": "`ctx` is unused in GetLatestEvent", "pred": "Fix typo in fake client"}
{"gold": "This looks good to me. Personally, I would have the following for maximum flexibility: * convert peering_port from uint64_t to int. * Set the default value to \"-1\" to specify the value is not set * if the value is -1 then do `config.node.peering_port = network_params.network.default_node_port` That would allow for 0 to mean, select the port number yourself and be more consistent. But I am happy with the change as is, as well.", "pred": "Fix typo in nano_daemon"}
{"gold": "The blank line between the summary and detailed description is better to be kept.", "pred": "fix typo"}
{"gold": "Curiously, are these indents intended or should they be aligned?", "pred": "fix: add missing import"}
{"gold": "What if we changed this to this? roleText=attrs.get('roleText', lambda:getSpeechTextForProperties(reason=reason,role=role)) That will prevent the function from ever needing called in the roletext case, and removes that if.", "pred": "Fix for #10878: NVDA does not announce the state of a checkbox when it is checked or unchecked."}
{"gold": "This will still result in a safe_read_tls_magic on AMD in tls_thread_preinit().", "pred": "Fix for PR 225853: x64: fix master_signal_handler_C() to not use dcontext_t*"}
{"gold": "Can you remove this change?", "pred": "Fixing test"}
{"gold": "Oh, was that a bug in the validation?", "pred": "Fix typo in comment"}
{"gold": "Please use the Google java code style. Basically, add more space characters like in the statements below. Next to method arguments and curly braces. This is currently not checked on CI because it is too inconsistent in the code base but I would prefer new code to be consistent.", "pred": "Fix crash when opening a feed from the feed list"}
{"gold": "Actually, I don't think we need to create object on heap.", "pred": "Update UpdateEdgeTest.cpp"}
{"gold": "this is a file we copy from gRPC, sp ideally it be fixed upstream as well..", "pred": "Fix typo in generate_imports.cc"}
{"gold": "changes like this, just strangle guava usages to be replaced by DelayLimiter into one place", "pred": "Remove unused import"}
{"gold": "PropTypes need to be updated accordingly here. Note that the type also needs updating, not just the case. That is, these should both expect a `PropTypes.elementType` now instead of an `element`.", "pred": "Add default props to Widget"}
{"gold": "maybe extra paren around `strncmp(...) != 0`", "pred": "Fix typo in error message"}
{"gold": "We should call `Windows.onResume `: - When the app is launched for the first time - When the app is resumed after being paused (home button and resume or device goes to sleep) - After a permission prompt is displayed", "pred": "Fix typo in Windows.java"}
{"gold": "Rename to ForksSchedule? Maybe in separate PR.", "pred": "Remove unused import"}
{"gold": "Why a blank line here?", "pred": "Fix import"}
{"gold": "I have a sense that this will actually eventually change to check the actual date so that subscriptions can be deactivated in the future. But I mention that here just to keep you in the loop. We should not make that change now, because it's not needed functionality.", "pred": "Fix typo in comment"}
{"gold": "What is the reasoning for using the negation of `isOption()` instead of simply using `isPositional()` to identify a positional param?", "pred": "Fix typo in EnvironmentVariableDefaultProvider"}
{"gold": "Why would you add those if client version min is set to 1100?", "pred": "Fix crash when player is offline"}
{"gold": "You can delete this, it will now need to live in `gointerfaces` package", "pred": "Update snapshotsync.pb.go"}
{"gold": "Okay, I still don't understand why you have to add `html_safe` here, and it still seems like a very bad idea. It will allow html tags in the title, and keep Rails from escaping literal greater-than or less-than chars not intended as HTML tags. It ought to work to just let Rails do HTML-escaing as normal, without any manual `html_safe` or `strip_tags` or whatever. I am not clear on what problem you are trying to solve, why the straightfoward approach does not work.", "pred": "add a link to the document in the search results"}
{"gold": "What is is subject when it's not the email subject. Why are we having to do this crap? What's calling this with an empty string?", "pred": "Fix typo in MessageList.java"}
{"gold": "Could you also remove the `defaultSamplingProbability` constant from `sampling.go`? It seems to became unused with this change.", "pred": "Fix typo in comment (#1088)"}
{"gold": "can you delete the `generateDeploymentStrategicPatch` function as well?", "pred": "Fix typo in comment"}
{"gold": "I'd keep this at `info` level...", "pred": "Fixing a bug in the UnboundZmqEventBus"}
{"gold": "Don't use DCHECK to debug your code if it's the regular branch you need to handle.", "pred": "Fix clang-tidy warning in LimitPushDownRule.cpp"}
{"gold": "You should return null here instead. Null is an acceptable default value for the image attribute.", "pred": "Remove unused method"}
{"gold": "react bails as well?", "pred": "fix: useErrorBoundary"}
{"gold": "Can you please tell me why you did this?", "pred": "fix: remove unused constant"}
{"gold": "Reading this again it should prob prefer the `videoConstraints.facingMode` value over `facingMode` if the former was already set", "pred": "fix(webcam): fix typo in webcam plugin"}
{"gold": "There's a good bit of class-level stuff that's repeated in our various product types. Think it's worth extracting a...dare I say it...module?", "pred": "Add video_url to video model"}
{"gold": "Please do not modify the `config.Target` field, it should contain exactly what is extracted from the JSON files. Instead, you can either: * Add a getter to the `config` variable (`*compileopts.Config`), so you can simply call `config.WasmAbi()` to get the value. * Use a local variable instead. The getter would be slightly cleaner, as it matches the pattern of other configurations (`CGO_ENABLED`, `GC`, `NeedsStackObjects`, etc).", "pred": "cmd/compile/internal/wasm: fix typo in comment"}
{"gold": "The nil check is not necessary for these. Append checks both sides for nil.", "pred": "Fix test"}
{"gold": "Shouldn't we instead have the SDK apply these, internally? I.e., I would expect to see the dctx entries included in the span as first-class distributed correlations, not as span attributes.", "pred": "Fix typo in trace example (#104)"}
{"gold": "nit: rename this in proto and update impl to `Search` to avoid stutter", "pred": "Fix typo in topology API"}
{"gold": "is it necessary to order by id as a second ordering? this will take place only when several new slider items are created without reordering (position is then null). Wouldn't be better to recalculate position after creating a new item? (right now items with null in position behave differently in administration and on frontend)", "pred": "BAP-14176: Fix slider item grid"}
{"gold": "`ClaimFromRewardingFundBaseGas` is a global variable (from `gochecknoglobals`)", "pred": "fix: gas claim reward"}
{"gold": "How about modifying the NOGIL definition so that it only does anything if the thread safety flag (RDK_BUILD_THREADSAFE_SSS) is set?", "pred": "fixing a bug in the python wrapper"}
{"gold": "blockheighter would be more clear", "pred": "fix: remove unused import"}
{"gold": "This is so weird as a utility function.", "pred": "Fix copyIndexScanData"}
{"gold": "Why? What would happen if you did not?", "pred": "Fix test"}
{"gold": "Unrelated bugfix for NPE.", "pred": "Fixing SmartStore.java"}
{"gold": "What if some extended the `AdminController` and had a check for the old option name? Could that be a valid use case?", "pred": "Fixing the admin controller"}
{"gold": "This will be only available when data-manager is enabled, is there a fallback in case data manager is disabled?", "pred": "Fixing the bug in the event list"}
{"gold": "Do you think we want to move the call to `generateWorkerServiceRecommendedActions` inside `RecommandedActions()`?", "pred": "fix(deploy): add missing space in deploy service template (#2719)"}
{"gold": "The VUIDs in this area are not great, but I think `ValidateQueryPoolStride` should probably be skipped if the query pool was created with type `VK_QUERY_TYPE_PERFORMANCE_QUERY`. VUID-02828 might be a better fit, but again, the existing VUIDs step on each other so it requires a bit of interpretation.", "pred": "layers: Fix typo in VUID message"}
{"gold": "Iguess you should use ToDbKey here", "pred": "Fixing a bug in the store"}
{"gold": "x.tbk is the \"index\" below, and is done in Start()", "pred": "fix: block indexer"}
{"gold": "Do we already have a convention for this? If not, would we consider \"DataDog.IsAppInsights\". And then use \"DataDog.\" prefix for all this settings, environment variables etc..? Such settings are, essentially, public APIs because they may conflict with customer data. Regardless of that , AppInsights has an s at the end :)", "pred": "Fix typo in comment (#1008)"}
{"gold": "this assignment is not necessary if the offsetof() is used in the configmap", "pred": "out_firehose: fix typo in comment"}
{"gold": "I'd rather leave a TODO here at least.", "pred": "Fix typo in comment"}
{"gold": "Shouldn't this be `resource`?", "pred": "Fix test_body_is_transmitted_during_redirect"}
{"gold": "Why does this become blocking for the CPU path? Shouldn't it remain independent of the GPU path?", "pred": "Fix CPU implementation of evaluation layer forward prop."}
{"gold": "Do we need to change occurences where `setup` was called before?", "pred": "Fixing the rvm version"}
{"gold": "Is this TODO still valid? Or are we going to put this somewhere else later?", "pred": "Fixing a bug in the reference resolver"}
{"gold": "We generally don't do parantheses in if conditions in Python. :) this could be better written as `if from_ts is None`", "pred": "Fixing test data generation"}
{"gold": "Odd that we'd set just element 299 of a 2000-byte buffer to null. But I see that this is the way it was before.", "pred": "[TRAFODION-2128] Fix a memory leak in tm_process_req_requestregioninfo"}
{"gold": "ScoreFunc is not used in this PR. Maybe to add it later when needed?", "pred": "fix(p2p): fix typo in p2p interface"}
{"gold": "super nit: I think this might be easier to read as `requestHeadersFromResponseWriter`", "pred": "Fix typo in comment"}
{"gold": "Need to include \"common/base/Base.h\" in front of this line", "pred": "fix: fix the compile error of test case (#1228)"}
{"gold": "Changes in this file should go into a separate PR.", "pred": "Fix import"}
{"gold": "Please ensure that this will not start putting single quotes where double quotes are expected.", "pred": "Fixing a bug in the PHP surface namer."}
{"gold": "`ProvideConfig` was changed, looks like it will not compile for windows, and should be changed too.", "pred": "Fix typo in comment"}
{"gold": "This does not look right, you're listing all private repositories..", "pred": "Fix search"}
{"gold": "An OPTIONS request should respond from _any_ path? Seems weird to me...", "pred": "Add route for the bookmarklet"}
{"gold": "you need to add the content type", "pred": "Fixing the media admin"}
{"gold": "Do we need to distinguish between these two processes? I'm thinking maybe we can have a list of processes and treat them all equally.", "pred": "Fix typo in comment (#1077)"}
{"gold": "This is used only for out-of-line -- so yes this seems right to do for x64. Inlined is aligned separately at the end of prepare_for_clean_call(). There the ifdef is x86_64 or MACOS -- no ARM, why not? Also, please add || MACOS here to match the inlined.", "pred": "Fix build on ARMv7"}
{"gold": "guess I'm wondering if this needs to be refactored to use Schema.joinCondition() or similar?", "pred": "Fix MySQL span store query"}
{"gold": "Does it make sense to restrict this option to `exec` only? You could add it specific to that subcommand using the `method_option`...method. There's an example of it for hosts in the `init` function.", "pred": "(maint) Remove deprecated --xml-time-order option"}
{"gold": "This is very expensive (lots of allocations, lots of data copying). Could we do something like check IndexOf('%') and bypass if no hit?", "pred": "Fixing a bug in the baggage parser (#104)"}
{"gold": "This should be `WorldType.isDeadmanWorld(client.getWorldType())` to be inline with the other WorldType calls.", "pred": "Fix wilderness level check"}
{"gold": "do we also need to change `mlvl_confid` -> `mlvl_confidences`>", "pred": "fix bug"}
{"gold": "I feel slightly that InterfaceExclude is not a clear name - bearing in mind that our config names are, to some extent, an external API. From an external point of view, a clearer name might be IPVSInterfaces. Then it would obviously make sense for the value to be something like 'kube-ipvs0', and it would be a matter of Felix's internal implementation that we choose to exclude those interfaces from our monitoring. Alternatively, if we want to keep this at a level that is more general than just IPVS, perhaps 'UnmonitoredInterfaces'? WDYT?", "pred": "Fix typo in config comment"}
{"gold": "This should be `re.search` with a `^` anchor added to the regex, as what we want here is really any path starting with something like `E:`.", "pred": "Fix #102: Don't expand Windows drive letters in paths"}
{"gold": "Since `IsKubernetesBuiltInResource` at L69 returns false due to lack `networking.istio.io/v1alpha3` in `builtInApiVersions` within `pkg/app/piped/cloudprovider/kubernetes/resourcekey.go`, it will never reach this point.", "pred": "Fix typo in comment"}
{"gold": "Does codecov not run this test? Not sure how else it would not be covered.", "pred": "Fix typo in metric e2e test (#1044)"}
{"gold": "can we add some sample of JSON_DATA format in the usage?", "pred": "fix: multisend command"}
{"gold": "Using `Tracer.Instance` in here is problematic for testing   It will likely cause some other tests to break I think - that's why we started passing in `IScopeManager` EDIT: I see you used `[TracerRestore]` - maybe that'll be enough!", "pred": "Fix typo in comment (#1005)"}
{"gold": "make all of these `static final` fields UPPER_SNAKE - they are constants.", "pred": "Remove commented out code"}
{"gold": "No possible chance for weird overflows here, right?", "pred": "Fixed a bug with DoT shielding."}
{"gold": "Or we could use a Float object to more clearly show as user-settable via non-null?", "pred": "LUCENE-5444: fix javadoc"}
{"gold": "finalizedHeader should be saved in FinalizationManager when we have FinalizationBlockHash != Keccak.Zero", "pred": "fix: reset state to new head state root (#108)"}
{"gold": "Not using ExactName: true would remove the need for manually adding workflow ID as it would be added automatically by Daisy. E.g. 'disk-importer-2-import-ovf-7mn7h' was created from diskImporterDiskName above even though only 'disk-importer-2' was specified. ExactName: true should be used for resources that shouldn't include any temp prefix/suffix, such as disks that will be permanently attached to a created instance. Scratch disk is not one of them.", "pred": "Fix disk import step name"}
{"gold": "If we support multi-index column later, we need to rename to fit the pandas' requirement.", "pred": "[SPARK-28135][PYTHON][ML][FOLLOWUP] Fix type hints for pyspark.ml.feature.VectorAssembler"}
{"gold": "I'm not sure this is really needed. JSONValue type can be used the same as a map as far as operators go, including range. I'd leave this out for now unless there is a strong reason to keep it.", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "sorry for nitpicking but I would love a new line under this line", "pred": "Fix container decaying"}
{"gold": "ChannelImplementation field naming is not clear, is it some kind of standard? Maybe it can be named ChannelID?", "pred": "fix: remove unused accountant id"}
{"gold": "Looks like there is a typo: `expireSnapshots` -> `removeFiles` or whatever name we go with.", "pred": "Fix typo in javadoc"}
{"gold": "Thanks for looking into this. I think it looks a bit strange to have this check inside the for loop. Wouldn't it also work to initialize `idxCurrentSort` with 0 instead?", "pred": "Fix typo in comment"}
{"gold": "Just a small ordering thing: Could you please bring `IMPORTANCE_HIGH` to the bottom and maybe even have one line between it and the Notification IDs?", "pred": "Added a new notification code for when the user has not entered a carb ratio."}
{"gold": "Should this be boost logged?", "pred": "fix typo in comment"}
{"gold": "What is the reason for doing expunge here? This method is purely for converting the timestamp.", "pred": "Fixing pylint errors"}
{"gold": "This calls sanitize twice if the name isn't valid.", "pred": "[SPARK-15498][SQL] Fix TypeToSchema to handle DecimalType"}
{"gold": "Is there an equivalent that'd allow zero or one?", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Is it possible to update/re-evaluate entire metatask object for every repeat? If we decide/need to use a repeatWith resources in let us say labelSelector(bad example) then we would have to add another logic to update those properties.", "pred": "fix(executor): fix repeatWith function (#1776)"}
{"gold": "unnecessary conversion (from `unconvert`)", "pred": "fix: account import command"}
{"gold": "typo in commit message `openening`", "pred": "Fix a typo in the comment."}
{"gold": "User-code doesn't see the internal ADIOS headers anymore. This whole include block should just be `#include <adios2.h>`", "pred": "Update adios2_c_mpi_write.cpp"}
{"gold": "nit: I guess we can omit this (unless you had a reason to specify it)", "pred": "Fix bucket view test"}
{"gold": "Why is Hub public?", "pred": "Fix typo in comment"}
{"gold": "why is this deleted?", "pred": "Fixing a typo in the comment"}
{"gold": "Maybe move that into a partial", "pred": "Add a class to the trail header to make it easier to style"}
{"gold": "Error return value of `dao.Stop` is not checked (from `errcheck`)", "pred": "Fix test"}
{"gold": "util.Warning()? Easier to say.", "pred": "Fix typo in ddev config docroot flag (#1617)"}
{"gold": "this default is kinda superfluous (although i see it was already there before PR )", "pred": "trie: fix test"}
{"gold": "How is this related?", "pred": "Remove unused import"}
{"gold": "I'm breaking one of the rules here, it feels like the right thing to do. Open to alternative suggestions.", "pred": "Fixing the subscription controller"}
{"gold": "The use of `#should` was triggering an rspec depracation warning for me, which is why I switched this to the rspec 3 style.", "pred": "Fixing the tests"}
{"gold": "Why are you setting the CacheChange as REQUESTED when it is not valid (it was erased from history)?", "pred": "Fixed bug in ReaderProxy::requested_changes_set"}
{"gold": "`lodash` shouldn't be grouped under WordPress dependencies", "pred": "fix: remove unused import"}
{"gold": "This needs to be public so that Avro can call it.", "pred": "[MINOR] [SQL] Fix a typo in GenericDataFile.java"}
{"gold": "`Google*` shouldn't be under External dependencies - seems like ESlint is not properly recognizing that these are aliases to internal dependencies.", "pred": "Remove unused import"}
{"gold": "I think he meant the docstring in this constructor. yea we should fix", "pred": "Fix DataFrame constructor with index and columns"}
{"gold": "so .. this basically follows the pattern from JapaneseTokenizer, I think. .. but somehow I don't see where we defined ResourceScheme? We're not referencing the one in kuromoji, right?", "pred": "fix typo"}
{"gold": "It would probably be better to do: const SecurityProtocolType Tls13 = (SecurityProtocolType)12288", "pred": "Fix SkylineTester download for Linux"}
{"gold": "Similar to the above, put this setting back but keep the value as `'{}'`", "pred": "Fix blog settings"}
{"gold": "As discussed in chat - we should run this function within an app context which means that we'd already have a logger configured, and a connection to timescale set up", "pred": "Fixing refresh_listen_count_aggregate"}
{"gold": "I'm curious about why this needed to be removed.", "pred": "Fix about page link"}
{"gold": "why did you remove `zip`? It is used!", "pred": "Update scapy.py"}
{"gold": "Is there any reason that we don't add a similar condition like `ChannelConditionTopic` to the channel?", "pred": "Fix typo in comment"}
{"gold": "before php8 \"goto\" was a reserved word and was not allowed as part of the namespace. Now test checks for validity of plugin namespace according to PSR-4", "pred": "Update Plugin.php"}
{"gold": "nit: I'm not sure it can be addressed in this diff, but it seems odd that NewOutbound supports TLS but NewSingleOutbound does not. As a somewhat naive user I would expect the only difference between these two APIs is how peers are chosen.", "pred": "Fix typo in transport.go (#107)"}
{"gold": "I would advise to enhance the test for the method `CallOneway` - we should have a test very similar to `TestCallSuccess`. We should test: - Success with response (even if it is callOneway) - Success with no response and empty payload - Errors", "pred": "Fix typo in outbound.go (#135)"}
{"gold": "We're already matching +. Not sure why this changed.", "pred": "Fixed email address validation"}
{"gold": "Please add line breaks, so the line doesn't exceed 80 chars.", "pred": "Fixing configuration"}
{"gold": "I initially thought (inccoreclty) this is a breaking change! The public api analyzer is a gift!", "pred": "Fix typo in AspNetCoreInstrumentation (#2176)"}
{"gold": "I'm not sure how this one didn't segfault before.", "pred": "ostree-delta-util: Fix typo in comment"}
{"gold": "Same points as in other test file.", "pred": "Fix typo in comment"}
{"gold": "Did you run gradlew tidy? Wildcard imports shouldn't be there, hence the question.", "pred": "fix checkstyle"}
{"gold": "Put a comma after the last parameter of a multiline method call.", "pred": "Fix typo in TrailWithProgress spec"}
{"gold": "Is this going to restrict the output to *ONLY* ports that are bound to vfio-pci? That's not what we discussed yesterday.", "pred": "fpga: fix fpga_filter_parse_type()"}
{"gold": "Intention is to do the lookup here, I believe (where we can cache it). This would make the call non-pure function though. I'll confirm with lotus. ID addresses are the *only* addresses I expect to actually see here.", "pred": "specs: fix typo in syscalls.go (#1000)"}
{"gold": "electronic medical record file system (EMRFS)", "pred": "Update EMRFSCommandJobFlow.py"}
{"gold": "Put this higher in the list, like after \"bind\", since I guess we're considering the max request body size to be kind of a native/fundamental feature, built directly into the vhosts.", "pred": "Update directives.go"}
{"gold": "oh come on :(", "pred": "fix: remove unused error variable"}
{"gold": "This is an incorrect change. The dialect spoken is an important part of the handshake and should be communicated to users.", "pred": "Fixing a typo in the comment"}
{"gold": "Remove as this is not needed anymore.", "pred": "Fixing gcloud info command"}
{"gold": "This new class is for checking that #4551 works correctly with PlantUML output too.", "pred": "Added a test for the new interface"}
{"gold": "Will this cause all certificates to be re-issued?", "pred": "Fix typo in ingress-shim controller"}
{"gold": "I think tmp is also leaked at the end of this loop if no error cases are encountered.", "pred": "Fix typo in enum_max10_metrics_info"}
{"gold": "The previous version didn't use `keyProjection` because the entire key must be projected. If the key is a struct of multiple columns, then projecting a subset of those columns can easily introduce key collisions that aren't in the original data.", "pred": "Fixing a bug in BuildAvroProjection"}
{"gold": "Why not use StatusOr ? We can't ensure spaceId is greater than zero, especially when AdHocSchemaManager is used.", "pred": "Fix a bug in use space"}
{"gold": "Does it seem we only use that as the json-rpc client? Do we have any other choice? It's a little weird.", "pred": "fix: remove unused import (#2806)"}
{"gold": "Could you split this into multiple lines?", "pred": "Fixed #1004: NVDA now reports the role of the selected item in a list."}
{"gold": "Doesn't the snapshot ID start off as null? It seems like we don't need to set it here.", "pred": "Remove unused import"}
{"gold": "I wondered why `buffer` was passed into `LookupPath`. What is happening here? Is `buffer[:0]` equivalent to `[]V4TrieEntry{}`, and hence `buffer` isn't needed any more?", "pred": "Fix typo in trie.go"}
{"gold": "nit: Ideally we would would use this abstraction everywhere we need this translation. I believe it's needed in the mining worker and the storage and market connectors.", "pred": "fix: use correct parent state root"}
{"gold": "need to fix the error message here", "pred": "Fixing the import issue"}
{"gold": "Unsure of how to handle this one.", "pred": "Fixing a typo in a comment"}
{"gold": "Will this.flowFinished verify with every finished state stated in Status.isStatusFinished method? If so, no need to verify isKilled.", "pred": "Fixed a bug in FlowRunner."}
{"gold": "replace \"Child Workflow\" with \"any workflow\"", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Instead of showing the words \"symbolic link\" under the \"Size\" column, how about we introduce new icons for symbolic link to file and symbolic link to directory?", "pred": "Fix footer"}
{"gold": "Please add back the description of the parameter", "pred": "Fixing typo in comment"}
{"gold": "Superfluous space inserted.", "pred": "Fixing a bug in the GraphiteBrowser where the tree was not being created."}
{"gold": "Didn't fix the problem. `href=\"\"` for SVG will still result in `undefined` getting returned by this function.", "pred": "Fixing a bug in dom.urlPropsFromAttribute"}
{"gold": "This seems like a strange change ... I wouldn't think that a change to access tags in the profiles would result in different bearings in this tests?", "pred": "Fix test"}
{"gold": "As isCaret is False by default, explicitly specifying isCaret=False here is not needed, and is perhaps a little confusing. I'd prefer that anywhere in the codebase that isCaret is only ever specified if it needs to be set to true. Mirroring that of isFocus for setNavigatorObject.", "pred": "Fix review cursor follow focus"}
{"gold": "We can't freeze this and then add something to it in the next line. The `freeze` on line 43 is sufficient. If Rubocop flags this we need to exclude it.", "pred": "JariBakken: Fix typo in comment."}
{"gold": "Why is this needed?", "pred": "Fix consolidateAutomationPolicies"}
{"gold": "Why not put two other routes after this line (221)?", "pred": "Fix typo in comment"}
{"gold": "If FLAGS_meta_server_addrs is not empty, in which case \"toHosts\" return empty array?", "pred": "fix(graph): fix build error"}
{"gold": "There is a function to output a \"JSONBool\" string. That would be a good start for finding uses. But maybe just have a look at where we decide whether it is a numerical or not, thus wrapping quotes around its value. Then you have it all I guess.", "pred": "Fix for #100"}
{"gold": "oops, it should be `data._scol` so that it respects the expression stored in Series. Let me fix it quick.", "pred": "[SPARK-35758][PYTHON] Fix typo in docstrings of `sampled_plot`"}
{"gold": "Thanks for moving this up with the rest of the variables. Much tidier :)", "pred": "Fix typo in visibility help text"}
{"gold": "I think `Rate` is a more precise and concise term for `PaymentPerTime`.", "pred": "payment: fix comment"}
{"gold": "I think this should maybe be: var limit = input.IndexOfAny(new[] { '+', '-', ']' }, **posNext**); You pretty much want to ignore any sign that is before the \"M\". But, if there is a sign somewhere before the M, and also after the M, you'd want to be able to find the sign after the M, right?", "pred": "Fix for #1029: Skyline can't import .raw files with negative ion mobility values"}
{"gold": "if `checkStockNotEmpty` returns a reponse, you must return it or your script will continue its execution.", "pred": "fix bug"}
{"gold": "Any specific reason for this change? klog should work correctly here.", "pred": "fix: import path for k8s.io/api/core/v1"}
{"gold": "we don't mention `last_modified` here?", "pred": "Fix storage.py"}
{"gold": "same deal about the global state maybe interfering as in ActionBrowseTagline", "pred": "fix: hide tagline when no files"}
{"gold": "so sweet to see a test as the first thing", "pred": "Fix test"}
{"gold": "usually when HTTP_PROXY=\"\" (empty), proxy should be disabled. could you set it to NULL when it's empty string?", "pred": "config: fix missing config->http_server_name"}
{"gold": "Can you throw an exception if width or height are both null", "pred": "Fixing a bug in the SimpleResizer"}
{"gold": "This is a breaking change. I guess these might have been intentionally exported.", "pred": "net: fix typo in comment"}
{"gold": "I don't think this is necessary. When options are used to set the split size in the Spark reader, it uses `TableProperties.SPLIT_SIZE` to pass it here. That should work for metadata tables as well, right? The situation that we need to handle in this PR is setting the default, like you had before. We just want to use a metadata split size so you can set it and not have the same split size used (by default) for both metadata and data scans.", "pred": "[CALCITE-2279] Fix typo in javadoc"}
{"gold": "wait a sec, shouldn't this be `'*'`?", "pred": "Add a comment to explain the purpose of the Modulo operator"}
{"gold": "It think you'll want the var for GMI import as well: daisy_workflows/ovf_import/create_gmi.wf.json (Unfortunately there's duplication between the two :/ )", "pred": "Fixing a typo in the daisy import code."}
{"gold": "Nit: Group this with the other commands by moving it down one line.", "pred": "Fixing the Firefox Remote Connection"}
{"gold": "I would like to emphasize that a user can use non-vectorized reads to handle this file so maybe something like \"Cannot perform a vectorized read of ParquetV2 File with encoding %s, disable vectorized reading with $param to read this table/file\"", "pred": "PARQUET-120: Fix VectorizedPageIterator to use the correct dictionary"}
{"gold": "Maybe add `positional=False`. It does not need it more than the other parameters, but one must start somewhere.", "pred": "fix: remove unused import"}
{"gold": "Since we're here, can we use a template?", "pred": "test(max-staleness): fix path to spec files"}
{"gold": "saw you're also doing this in `test_types.py`: `spark = _spark_context()['test'].resources['spark'].resource_fn(None)` since `_spark_context()` uses `spark_session_local` won't the above break the tests?", "pred": "Fix postgres_db_info_resource"}
{"gold": "`has(default)` i think is the preferred way of doing this", "pred": "Fix typo in test name"}
{"gold": "always put a space after a comma", "pred": "added test for scalar space encoder"}
{"gold": "@angmas1 move the else up, next to the closing bracket of the if block. Also, there is no need for the braces as your else statement contains only a single line. Make your if-else block similar to the block in lines 277-280.", "pred": "Fix bug in LFMainActivity"}
{"gold": "@AutomatedTester @davehunt thoughts on a new keyword argument?", "pred": "Update webdriver.py"}
{"gold": "This change shouldn't be necessary for this PR. Please remove it.", "pred": "Fix typo in NodeStatus"}
{"gold": "This variable is mostly unused, how about we make `NewTestCtx` return a pointer?", "pred": "Fix testAlertmanagerInstanceNamespacesAllNs"}
{"gold": "What is the basis of this value?", "pred": "fix: import path"}
{"gold": "Nit: was this extra blank line added intentionally?", "pred": "Fix build error on FreeBSD"}
{"gold": "nit: inconsistent spacing around =", "pred": "Fix typo in exception_record.c"}
{"gold": "We still need this import", "pred": "Fixing missing use statement"}
{"gold": "We are pulling this because we removed \"groupID\" state and put it into the strategy implementations", "pred": "Fix TestBinPackStrategy"}
{"gold": "Is this file actually related to PCA?", "pred": "Fix typo in kmeans_init_test.cpp"}
{"gold": "See above, this should probably remain `isFirstAdmin`.", "pred": "fix: remove unused import"}
{"gold": "Why the change to make it public? The expression interface has the `TypeOf` method?", "pred": "fix(ast): fix typo in ArrayExpression"}
{"gold": "don't mind the snake cases in the test names. If there are in the test cases, it's fine IMO", "pred": "Fix unit test"}
{"gold": "`Id` defines REST resource address and should not be in payload", "pred": "fix: identity registration dto"}
{"gold": "We can omit the underscore and just use `classwise`.", "pred": "fix bug"}
{"gold": "Why not throw an exception instead then?", "pred": "Fix media admin controller"}
{"gold": "Looks like this doesn't need to change. Can you revert this?", "pred": "Fix typo in DataIterator"}
{"gold": "please import it like `from kinto.config import template`", "pred": "Fix cliquet import in run.py"}
{"gold": "There are lots of default value changed, not sure if it break the old behavior.", "pred": "[config] fix bug in Configuration.isIsolationFilterOpen"}
{"gold": "File is not `goimports`-ed (from `goimports`)", "pred": "fix: remove unused import (#1886)"}
{"gold": "parameter should be called removeFromStaticNodes", "pred": "Fix typo in admin module"}
{"gold": "The handler will have an extra property in the marker to signal the implementation is in the provider, for the cases we want to add functionality, for example, custom implementations not in moto.", "pred": "Add a comment to the RequestContext class"}
{"gold": "Is this method actually being used anywhere? If not, I think we should remove it.", "pred": "Fix typo in comment"}
{"gold": "Thanks! I somehow lost this between my far too many branchs.", "pred": "Fixing the issue with the body parameter being null"}
{"gold": "i think this should get put into its own file. This could start to grow :)", "pred": "Fixing import error"}
{"gold": "Can you add a TODO for loading the tarball of the pause image into Docker?", "pred": "Fixing a typo in the comment"}
{"gold": "Is there any value in setting the process to null like this?", "pred": "Fix ProcessJob to use the correct ProcessBuilder"}
{"gold": "This could be a good time to add a check that the prediction and target dimensions (except channel) agree?", "pred": "fix bug in softmax_loss_layer"}
{"gold": "The requirement that OP_isb is bb-final needs to be a rule for clients, just like the rule that syscalls and interrupts must be bb-final: i.e., please add it to the dr_register_bb_event() docs.", "pred": "i#1313: fix build break"}
{"gold": "The translate library has a method to replace the variables.", "pred": "Fixed issue with paging control not showing up"}
{"gold": "i don't think this test case is correct. in both cases inpalce=True returns nothing. We need to compare the ks. Also we probably need to make a copy of it. Otherwise you pollute the following \"ks\" because ks has been changed.", "pred": "TST: add test for Series.isin (#25149)"}
{"gold": "Any proposals how to make the naming somehow include the \"completed\" idea of this hook? `TlsHandshakeCompletedHook` or similar? Or using the `...Start/End...` scheme?", "pred": "tls: add missing hooks to tls_hooks.py"}
{"gold": "it introduces a lot of complexity to the state, can we flush straightaway or create a two level flush store where the questions are read form unflushed data?", "pred": "Fix sync report"}
{"gold": "There are two calls to getUrlFromRouteCache, but you're only urlencoding one of them. Is that intentional? Would it make more sense to do the url-encoding inside the getUrlFromRouteCache function?", "pred": "Fixing the tree link generation"}
{"gold": "Maybe we can use `this.instance.getCell` with `topMost` flag to get `TD` element?", "pred": "fix(editors): fix editor not being created when cellProperties is undefined"}
{"gold": "Change this to Debug Level", "pred": "fix: typo in comment (#1277)"}
{"gold": "I refactored the Aggregate, those are hard to read", "pred": "Fix #4435 - StackTraceUsage is not set correctly when using ${stacktrace} in layout"}
{"gold": "This is now done in the after method, so this test won't pass any more.", "pred": "Fixing test for region"}
{"gold": "What was the point of creating `user_block` if you're then not going to use it ;-)", "pred": "Fixing bug in user authentication."}
{"gold": "@ueshin, I thought we can remove this entire file. Does that require some more works?", "pred": "[SPARK-35739][PYTHON] Fix import error in koalas.utils (#35295)"}
{"gold": "Just `return tokens.string[1:-1]` is enough", "pred": "Fixing a bug in the python evaluator"}
{"gold": "1 trailing blank lines detected.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Isn't this the default max width? In any case I would prefer to see these definitions in the css files.", "pred": "Fixed bug in LeftButton"}
{"gold": "Is this thread-safe? (If not, and if the solution is to introduce locking, let's reconsider how we do the scheme changing instead...)", "pred": "Fix typo in redir directive"}
{"gold": "Looks like this file has tabs instead of spaces.", "pred": "fix import"}
{"gold": "Hmm should we clean up container resources before task resources here? or the order does not really matter here?", "pred": "Fix a bug in docker_task_engine.go"}
{"gold": "Please undo this :wink:", "pred": "Fix download test"}
{"gold": "thanks for adding this missing association", "pred": "Fixing the client model"}
{"gold": "Should I remove this in favor of the HttpsConnectionFilterOptions overload?", "pred": "Fix typo in HttpsApplicationBuilderExtensions.cs (#1007)"}
{"gold": "This shode be nullable, there alway sholud be at least one status in system , if not exist that mean data problme", "pred": "Fix: DbalStatusQuery::getQuery() should return QueryBuilder"}
{"gold": "Spaces not tabs", "pred": "Update Auth.php"}
{"gold": "To get the files inside a directory, please use `readDirStats()`.", "pred": "Fix fs-driver-node"}
{"gold": "might be worth to call these `Isolation` instead of containers here and when presented to the user -- docker/rkt , in addition to cgroups and namespaces, also provide image discovery and filesystem preparation; there's also the security context and probably 1-2 other small things", "pred": "Fixing a typo in the comment."}
{"gold": "File is empty, consider removing?", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "This seems to return the registry_url. The more meaningful URL is the catalog URL, which is the URL the user specifies in `quilt3.login`. The username might also be as useful here if not more useful.", "pred": "Fixing a bug in the quilt provider"}
{"gold": "Was the addition of `GasPriceOracleAddress` here erroneous?", "pred": "Add L1CrossDomainMessengerAddress to config"}
{"gold": "I believe that you are going to have to do some work here to get the env var support for these values to still work correctly, otherwise they will get stored as :department instead of host_tags[:department].", "pred": "(maint) Add missing require"}
{"gold": "How was this causing the exception?", "pred": "Fix SessionStore"}
{"gold": "I still have issues with it loading Simplified Chinese by default over Japanese, since they also share characters and we're not sure if characters are different or not. As-is, this fixes Traditional Chinese and Simplified Chinese, but we're not sure if it'd still screw up Japanese text or not. I maintain that, in my opinion, Japanese should be the only script of this kind loaded by default (Because of Hiragana and Katakana, that aren't shared with any other script) and either variant of Chinese should be loaded only in their respective case.", "pred": "Fixing a bug in the culture switcher."}
{"gold": "Isn't it better to stub AtomatonQuery and yield it here. IIRC it resolves simplest MTQ highlighting cases as nobrainer.", "pred": "fixing javadoc"}
{"gold": "Line is too long. [96/80]", "pred": "Fix indentation"}
{"gold": "My only concern with changing the node selector here is that someone else _could_ have built their own images for other platforms and set them to be used using the flag override on the controller, which in turn this change would break. Perhaps not changing the selector for acmesolver pods makes most sense, and then working on actually having support for Windows? wdyt?", "pred": "Fix typo in comment"}
{"gold": "Why do we need interface `InnerObjectWithSelector`, I searched the usage with this field, it seems nowhere use `GetSelectorSpecs()` methods provided by `InnerObjectWithSelector`", "pred": "fix: import path"}
{"gold": "Do we need this `init` here? We have already called the `InitContext` in `StartModule` directly.", "pred": "fix: context init"}
{"gold": "This `if` is not necessary", "pred": "Fixing a typo in the docstring for get_window_handles"}
{"gold": "should we add a `mangle.json` mapping for this? We could reuse a property name that's only used on component or vnode objects right now, like `__s` (\"next state\").", "pred": "Update diff.js"}
{"gold": "Please update the yard docs to indicate this new option.", "pred": "(maint) Fix beaker's --trace option"}
{"gold": "Can you provide an example in the godoc section on how to use this? From the implementation it looks like the AvailabilityZone field is required for example, otherwise it can fail / error, is that correct?", "pred": "Fix typo in AWSLoadBalancerSpec"}
{"gold": "It would be great if this could be captured by a test.", "pred": "Fix typo in comment"}
{"gold": "1000 -> 100 maybe too much, 200 ish to 500ish maybe a good option", "pred": "fix: remove unused config (#2859)"}
{"gold": "Any reason we need to keep this package's `ChecksumAddress` type or can we get rid of it too?", "pred": "fix: checksum address"}
{"gold": "Above the one that was picked was the Button* prefix, and here it's the Header* prefix. Maybe the Button prefix is more general.", "pred": "Fix restart button"}
{"gold": "I might prefer changing: public Block FindPendingBlock() => FindBlock(PendingHash, BlockTreeLookupOptions.None); public BlockHeader FindPendingHeader() => FindHeader(PendingHash, BlockTreeLookupOptions.None); in IBlockFinder, what do you think?", "pred": "Fixing a bug in BlockTree.FindBlock"}
{"gold": "This is necessary due to a bug in 4.7. Follow HIVE-1561 for getting rid of it.", "pred": "Update sync_status.go"}
{"gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "pred": "Add has_many :products to Topic"}
{"gold": "Some day (tm) I will also get rid of that one. But today is not that day...", "pred": "Fix build"}
{"gold": "Add a space between if and opening parenthesis please (i.e. `if (`)", "pred": "Fixing bug in CombineAssets"}
{"gold": "nit: `rename` instead of `alias`?", "pred": "[SPARK-35965][PYTHON] Fix the type hint of Series.name (#32525)"}
{"gold": "Per AWS docs EC instances have the root mounted at /dev/sda1. This label should be skipped.", "pred": "Fix typo in comment"}
{"gold": "I'm not sure it is a better way to address lose message, if wait here, edge controller cant process message, event from watching api-server will be lost yet, right?", "pred": "Fix typo in comment"}
{"gold": "Please keep the correct alignment, it seems broken now (at least in Github). Can you reverse the test (`if p.value_size is None`)? Also, do you want `6` when `p.value_size is None` or `x + 6`? Maybe, in that case, something like `lambda p, x: x + 6 + (0 if p.value_size is None else p.value_size)` would be easier to read. Or even easier: `lambda p, x: x + 6 + (p.value_size or 0)`.", "pred": "Fix EAP_MD5"}
{"gold": "Can we make sure ECS service treats it as int64 as well?", "pred": "Update container.go"}
{"gold": "Please follow the naming convention for variables, i.e. `windowText`.", "pred": "Fixing a bug in the UIA module."}
{"gold": "alias can be `cast`", "pred": "fix(pkg/apis/openebs.io/v1alpha1): import path for v1alpha1"}
{"gold": "Let's use `%zu` instead of casting to `uint64_t` and using `PRIu64`. The alternative is to change the type of `mmap_errors` to `uint64_t`, though I'd prefer not doing that because some 32-bit platforms might not provide atomic operation support for `uint64_t`.", "pred": "fixup! events: fixup! events: fixup! events: fixup! events: fixup! events: fixup! events: fixup! events: fixup! events: fixup! events: fixup! events: fixup! events: fixup! events: fixup! events"}
{"gold": "I recall there being a reason we had this one set only to suggeation. @carterkozak do you remember why? or is my memory getting corrupted?", "pred": "Fix typo in errorprone config"}
{"gold": "This should now be made into `if (it->second.empty())` ?", "pred": "Fix include path for generated files"}
{"gold": "Do we need to worry about a race condition on this decrement (@The-Compiler)? I'm not sure how the python callbacks work, so this might not need to be something to worry about.", "pred": "Fix webengine search flags"}
{"gold": "Should these assert that the extracted `SpanContext` is remote?", "pred": "fix: remove unused import"}
{"gold": "typo: allow low quality matches.", "pred": "fix doc of ApproxMaxIoUAssigner (#3985)"}
{"gold": "At some point we need to condense down and refactor our \"configs\" as we have too many in too many places and we're starting to get more illegible code. No change necessary but calling out for future reference.", "pred": "Fix typo in comment"}
{"gold": "Can we add the `if label` conditional to this please?", "pred": "Fix typo in aria-hidden option"}
{"gold": "@thunterdb, can we increase the minimal version to almost the latest ones? I was thinking people will mostly use the latest version of mlflow", "pred": "[SPARK-32604][PYTHON] Upgrade pyspark to 3.0.0 in setup.py"}
{"gold": "If the last argument is going to be removed, why would we add it to the API docs? Shouldn't it be private for internal use?", "pred": "docs: fix typo in the jsdoc of the `afterAutofill` hook"}
{"gold": "`Intermediates` or `Intermediate`", "pred": "fix import"}
{"gold": "This is not the right exception class. There is an InvalidSelectorException class that covers bad locators.", "pred": "Fixing the visibility_of method"}
{"gold": "If this code isn't needed, it should be removed.", "pred": "etcdserver: fix bootstrap error message"}
{"gold": "Should the `doRequest` func be a method on the `connection` type instead of passing state from the type?", "pred": "Update go.mod (#100)"}
{"gold": "we'll probably tackle these e2e tests at the end", "pred": "Fix test"}
{"gold": "what is this address pointing to? what are we measuring here? I want to have a better understanding.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Would it be better to pass the dependency status as the parameter into the SQL string? In case the enum value is changed in the future, we don't need to change the code here.", "pred": "fix bug"}
{"gold": "Hah I had `gorename` failing without this too.", "pred": "Update doc.go"}
{"gold": "maybe prefix these with `appsec_` for consistency?", "pred": "Fix typo in appsec_blocking_enabled (#1007)"}
{"gold": "nit: this should be down further with the other github imports", "pred": "Fix import path for x509 package"}
{"gold": "Why is this change necessary or related to the rest of the PR?", "pred": "Fix #10076: NVDA does not start if the user has not logged in."}
{"gold": "Hm, I wonder if the `see:` prefix is even necessary?", "pred": "Fixing issue with console report"}
{"gold": "This should be translated.", "pred": "Fix for missing minutes in misc info"}
{"gold": "I originally had this PR only changing the R package, but then ran into this error > Error: [LightGBM] [Fatal] Cannot change metric during training This is thrown even if you aren't actually CHANGING `metric`. I think the change here in `c_api` is closer to the desired behavior, only throwing an error if the parameter is being changed.", "pred": "fix bug in reset config"}
{"gold": "These changes are just to make cli_spec a little more readable for VS Code users, as there's a bug with the Ruby plugin's syntax highlighting when you use multi-line regex literals.", "pred": "Fix rubocop offenses"}
{"gold": "Shouldn't the global pull secret by in the namespace of the hive-operator? It is part of the operand.", "pred": "Fix typo in clusterdeployment_controller"}
{"gold": "kinesis-mock applies KINESIS_LATENCY to RegisterStreamConsumer actions so I added a sleep here.", "pred": "Fixing test"}
{"gold": "Only V1 or V3 is return from `getMetaVersionFromKV`. So where do we call `updateMetaV2ToV3`?", "pred": "Fix the bug of meta version"}
{"gold": "I think that V0 is missing here, which will prevent plugins that haven't been converted to work.", "pred": "Fix typo in node attestor repository"}
{"gold": "Should we remove this?", "pred": "Update next.config.js"}
{"gold": "Put on top of the import.", "pred": "fix: import path"}
{"gold": "See above, this shouldn't be added.", "pred": "Fix analytics module"}
{"gold": "This'll likely get fixed upstream, we should let them deal with it.", "pred": "Fix typo in ItemMapping"}
{"gold": "Somehow, this field does not seems useful for the exposed package api, only for the tests. Would you consider having an unexported field in `hostFactory func(context.Context, ...libp2p.Option) (host.Host, error)` instead to be set only by a new helper function defined in export_test.go. This is just a suggestion, not a hard requirement for the PR approval.", "pred": "fix: remove unused import"}
{"gold": "As a first argument to these function, please pass the date that should go forward/backward. Also please clarify what is \"n\" (possible values, unit) and what is timeDuration (possible values, unit, as from your code it seems to be \"day\", \"hours\", etc. but from your example it seems to be milliseconds).", "pred": "Update time.js"}
{"gold": "Are you sure you really need this code here? that script will be certainly run in NVDA's main thread, and core would have already called setLanguage.", "pred": "Fix for #101: \"No track playing\" message is shown when no track is playing"}
{"gold": "why is this changed ?", "pred": "Fix the test case TC_TEST_APP_DEPLOYMENT_16"}
{"gold": "Should this be \"the new revision value\"?", "pred": "Fix typo in godoc"}
{"gold": "You have deleted :attribute", "pred": "[no] Add missing validation message"}
{"gold": "The license header should be updated to the Apache one.", "pred": "Fix license header"}
{"gold": "@zacharycmontoya Is there any way to distinguish a `SocketHttpHandler` from another `HttpMessageHandler` request?", "pred": "Fix test name"}
{"gold": "Not sure about this one -- did you check somehow?", "pred": "Fix typo in comment"}
{"gold": "Is there a good reason to keep this at the `pe_ver_win` name now that it's per-host?", "pred": "(maint) Fixing the merge of env_vars"}
{"gold": "Not in the order of display : Front, Ingredient, Nutrition here (which is the right thing), Actually displayed: Front, Nutrition, Ingredients", "pred": "Fix bug in ProductActivity"}
{"gold": "Why delete `StartTime`? This `StartTime` was used to avoid the PID was reused.", "pred": "Update stresschaos.go"}
{"gold": "My concern here, is that if the dump_puppet_log also throws then we will lose the data about the teardown_exception.", "pred": "(maint) Fix typo in error message"}
{"gold": "Should it be `int64_t`?", "pred": "[Jenkins] auto-formatting by clang-format version 6.0.0-1ubuntu2~16.04.1 (tags/RELEASE_600/final)"}
{"gold": "is this value related to something ?", "pred": "Remove unused import"}
{"gold": "Add names to tuple elements ValueTask<(Keccak? Hash, AddTxResult? AddResult)>, should they both be nullable?", "pred": "Add SendTransactionAsync to ITxSender"}
{"gold": "I think it might make more sense to do this in Name.upperCamel; it is the entry point for upper camel strings.", "pred": "Fix Name.toUnderscore() to handle empty namePieces"}
{"gold": "Huh? The point is that a cast isn't necessary", "pred": "Fix test"}
{"gold": "can we name it like `InstallV1Alpha1CRDs` ?", "pred": "fix(maya): fix the spelling of the env variable"}
{"gold": "I need something to match when creating selectorsyncsets so added this label.", "pred": "Add missing import"}
{"gold": "Isn't `nil` the default return value from an empty `rescue` clause? If that's correct, then we could just remove the `nil` line entirely as it doesn't serve a purpose.", "pred": "Fix a typo in the comment"}
{"gold": "Simple Storage **Service**", "pred": "Update s3_add_cors_configuration.rb"}
{"gold": "Wouldn't that cause the obsolete indexes to be downloaded over and over again? After all these are still stored in the repository.", "pred": "Fix typo in comment"}
{"gold": "We might want to move this logic to a Plain Old Ruby Object down the road. Not a blocker.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "move `this.toolbox_.position();` to just after line 1477. Context: the if statement on line 1472 checks whether this is a toolbox with categories, and if so it populates the toolbox. Positioning the toolbox is a reasonable followup to that, and means you don't need an extra if. You may also need to call `this.flyout_.position()` after line 1483, which is the equivalent for the non-category toolbox.", "pred": "Update workspace.js"}
{"gold": "Should the function above be .FirstOrDefault() instead? Otherwise, why check for null and tell ReSharper to ignore the fact that it can never be null?", "pred": "Fix for #1089: 100% CPU usage when opening a document with a peptide group that has no proteins"}
{"gold": "Let's not create new connection, but rather user `common.db` one", "pred": "fixing prefetch plugin"}
{"gold": "Can this use asset_path rather than defining an image_url helper?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Hindley-Milner signatures don't use literal types. They explusively use types. It's deal with that", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Could we just extend PolicyRule with more fields? It was originally designed as the struct required by openflow client, nested structs seem not helping. And for the name of the fields, initialism should be uppercase, OFID and NPName doesn't look good, then maybe FlowID, PolicyName..", "pred": "Fix typo in priority.go"}
{"gold": "I really dislike this alignment approach, as it makes identifying individual functions quite hard, but I kept consistent with the previous style. Since no sorting was evident, I pushed it to the end of the block. Meanwhile, is this supposed to be tested or meaningfully testable somehow?", "pred": "Fix: add missing function to impure list"}
{"gold": "Could also consider modifying the ActiveExecution...", "pred": "fix(executor): fix bug in step delegating executor"}
{"gold": "Does it make sense to change that to a custom error instead of `ValueError`?", "pred": "Fixing a bug in the dictionary name generation"}
{"gold": "I guess this will need to change soon.", "pred": "fix: typo in comment"}
{"gold": "Restore this spacing - not sure why it has to be removed?", "pred": "Fix typo in comment"}
{"gold": "These defines cause issues in base.h leading to failing android builds. Locale independency is now set in multiple spots, in cmake and in base.h. The base.h uses feature test macros wrong. Feature test macros can be used to indicate that a feature should be made available. They do not guarantee that it is available. On the cmake side this is done by the check symbol macros (similar to what autoconf does). On the android side not. I would suggest removing this from base.h and define locale independent in gradle. It is available since android 21 I believe. Is there a way in gradle to set locale independent only if android api >= 21?", "pred": "Fix build on Windows"}
{"gold": "Why not delete these codes?", "pred": "fix(planner): fix the bug of go planner (#1888)"}
{"gold": "If pull message failed after some reties, we should ensure the storaged exit, otherwise it has risk to loss data.", "pred": "[storage] fix a bug in storage server"}
{"gold": "looks like you don't need to import first and count here anymore", "pred": "Update test_dt_utils.py"}
{"gold": "FYI, visibility task processing is local only, meaning pushing something to local ES cluster / local archival endpoint", "pred": "Fix a typo in historyEngineImpl.NotifyNewTransferTasks (#2174)"}
{"gold": "This import can be removed.", "pred": "fix: remove unused import"}
{"gold": "1. Nit: We can have a general helper to identify if a region is pseudo region. We might already have one somewhere. 2. Does any type of ARN support FIPS? If not, we may just move this check in arn package?", "pred": "Fix typo in comment"}
{"gold": "is this phrase completed in a next line? Or forgot to add... what?", "pred": "fixing typo"}
{"gold": "`('train', 5)` and `('train', 1)` are actually the same.", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Would it be too complicated to refactor `currLimit` to be an `int64`?", "pred": "[backpressure] fix typo in comment"}
{"gold": "Would it be more performant to just `include ::RSpec::Core::Pending` here? /cc @myronmarston", "pred": "Fixing a typo in the RSpec adapter."}
{"gold": "Should be podiochaos?", "pred": "fix(iochaos): fix iochaos spec (#1005)"}
{"gold": "Is the `codecs.register(lambda name: None)` gracefully handled by codecs? The lambda is expected to return a tuple of functions (encoder, decoder, stream_reader, stream_writer) (or a CodecInfo object), according to the docs. I've only checked python's built-in help, though.", "pred": "Fixed import error"}
{"gold": "in this case, it could be either instrument name or the view name, which could be invalid. might be better if we can offer very specific message. (not blocking this, we can add this as a follow up,if needed)", "pred": "Fixing a bug in MetricReaderFactory (#1005)"}
{"gold": "I'd rather just send the parameter twice than break encapsulation here. There's already precedence with webelement IDs", "pred": "JasonLeyba: Fixing a typo in the documentation for TargetLocator.window."}
{"gold": "You may put 'open-mmlab://res2net101_v1d_26w_4s' here. MMCV will be updated later.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "May be worth making this more specific, to avoid potential conflicts, maybe `pagespeedDashboardWidget`? Or `webVitalsDashboardWidget`?", "pred": "Update store name"}
{"gold": "I guess this assignment is now redundant?", "pred": "fix: remove extra space"}
{"gold": "See above note re: blockNum synchronization.", "pred": "Fix typo in comment"}
{"gold": "wonder if we could avoid doing named imports if we type aliased `backoff.Backoff` in the `.../agent/common/backoff` package?", "pred": "Fix import path for clock package (#1002)"}
{"gold": "Or maybe put into alphabetical order with the other #includes.", "pred": "Fix include path for instr_create.h"}
{"gold": "This runs the entire duration of the program; this change is not needed.", "pred": "Fixing a typo in the comment"}
{"gold": "I don't feel well about the `ALWAYS_UPDATE` option   &nbsp; sounds like a workaround. I can imagine that some of the plugins want to observe all options. Maybe, in that case, we can reuse the `CONFIG_KEYS` that would return an empty array for observing all settings and `false` for disabling observing at all? I just thinking aloud - Like `CONFIG_KEYS` sounds reasonable. We could support and maintain it in the future, even after implementing the \"observability\" to the MetaManager then `ALWAYS_UPDATE` ... I don't know :)", "pred": "Fix typo in touchScroll plugin"}
{"gold": "A \"tab difference\"? As in, there are tab characters somewhere? This disabling of clang-format for all the code here seems like overkill. Are you sure there's not some other solution? I don't really understand the problem though. Do you mean clang-format-diff?", "pred": "Fix typo in comment."}
{"gold": "Could you please leave the explicit imports?", "pred": "Fix import"}
{"gold": "Can we check for containsKey here?", "pred": "fix: remove unused import (#100)"}
{"gold": "Exit successfully. We served the help the user wanted.", "pred": "go/types/typeutil: fix typo in example"}
{"gold": "Had to rename this because `InitialPackage()` already existed.", "pred": "Fix comment"}
{"gold": "Can we put this in a different helper?", "pred": "Fix integration spec helper"}
{"gold": "I'm not sure where your 31 comes from? I see 15 here and 2 above for pc and flags, for 17 total beyond the SIMD.", "pred": "i#1000: Fix clean call on ARM"}
{"gold": "If you want, you could change this to `allowCors(response` (like in \"version\", above) to allow Cross-Origin Resource Sharing. I'm sort of wondering what's returned if no API terms of use are set.", "pred": "added getVersion method to Info bean"}
{"gold": "Why do we need to override this if all we're doing is passing it up?", "pred": "Fix indentation"}
{"gold": "Just wondering whether it's safe to send all CQDs to the child compiler. As this missing CQD is causing trouble, maybe some other user CQDs that now get sent could also cause the statement to fail? Also, if I have a table with a nullable unique column, should I have to set this CQD to create another table like it, or should the CREATE TABLE LIKE work without the CQD?", "pred": "Changes to support new metadata tables."}
{"gold": "EARLIEST_TESTED_RELEASE might be slightly more clear", "pred": "test_images: Fix import"}
{"gold": "I think replacing `.*` with `\\s*` from after the hash makes sense, but not the rest of the changes.", "pred": "Fix a typo in the pylint message."}
{"gold": "interesting .. did not know varint tag covered bool as well", "pred": "Fix typo in comment"}
{"gold": "Could you please elaborate the reason for not using `gkc_summary` like the values above? I ask this, because I assume what we want to collect is a histogram of event loop latency, and we use `gkc_summary` for collecting histograms.", "pred": "Fixing a typo in the comment."}
{"gold": "getHash should be a public and without an `_` if used here.", "pred": "Fixing a bug in the Block.prototype.getTransactionHashes() method."}
{"gold": "Unrelated to these changes -- we will probably want some special handling for genesis block validation.", "pred": "fix: typo in comment (#1008)"}
{"gold": "This is probably overkill since we don't actually need to pass this specific interface anywhere, but I don't mind it!", "pred": "Fix typo in comment"}
{"gold": "@janos I moved this back here, to avoid having multiple add peer calls being handled. I think it's either this or a global lock across the whole function. I think this is a better approach, especially since `hive.Broadcast` is blocking . We can remove the map entry on errors if needed. LMKWYT?", "pred": "fix(p2p): fix typo in comment"}
{"gold": "Minor: can we put the conditional outside of the partial?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "We need to find something more efficient than this. We can probably just check the first element and assume the type list is consistent..", "pred": "Fixing a typo in the async sniffer"}
{"gold": "How \" via service code in response to event.\"? I don't think we'll get in the no schedule option to the release. We should probably wait for some customer feedback first to make sure we're addressing different event-triggers the best way", "pred": "Fix typo in cron.go"}
{"gold": "Please move unrelated formatting changes to their own PR (same with the resources.py file).", "pred": "Fix import error in test_model_handle.py"}
{"gold": "Make this a public attribute (remove the leading `_`) if you want to access it from the outside.", "pred": "Fixing a bug in the fullscreen command."}
{"gold": "this conditional is useless now so it should be removed", "pred": "Fixed typo"}
{"gold": "`vecofstructs->size()` already returns a `uoffset_t`. So if you just change the type of `i`, you don't need any casts.", "pred": "Fix test"}
{"gold": "Nit: Maybe merge this with the configProto check on line 208? Don't feel that strongly though, please keep separate if you prefer.", "pred": "fix: remove unused import (#108)"}
{"gold": "I know we already did this in 4.0 so carry on, but I'm facepalming here we should've made an overrided setMessageHandler that sets ismaster to true when hello is present. Esp in 4.0 where we already have some overrides written. We can keep going here and maybe open a ticket to some effect of that solution", "pred": "test(buffering): fix test description"}
{"gold": "I believe we could use `link_to` here (although not super important). Also, we should internationalize this value. I'm not 100% sure what our process is for adding new UI strings these days (e.g. skip the specs that will fail if we add a new key to only one language, use Google Translate to translate the value for us, some other option).", "pred": "Fixing the link to the json api"}
{"gold": "This was already in vkGetPhysicalDeviceDisplayProperties2KHR...", "pred": "layers: Fix crash in GetPhysicalDeviceDisplayPlanePropertiesKHR"}
{"gold": "nit: I'd expect a public method called IsDockerEngineRunning to return a boolean yes/no, not the error message. Can we change either the return value or the name? Something like `CallDockerEngine`", "pred": "Fix typo in comment"}
{"gold": "If i remembered correctly, type_name is '{RESOURCE_TYPE}/{RESOURCE_NAME}', if type_name is 700 max then name cannot exceed that size", "pred": "Fixing the type of the parent_type_name column in the resource table."}
{"gold": "When calling functions with keyword arguments: please provide the arguments as keyword arguments, not positional arguments.", "pred": "Fixing a bug in the size prefixing code."}
{"gold": "We may follow the argument order: conv_cfg, norm_cfg, act_cfg.", "pred": "fix a bug in BasicResBlock (#226)"}
{"gold": "`options['binary'] = WebDriver::Chrome.path` if set?", "pred": "Add support for Firefox"}
{"gold": "folly library should be put on the top.", "pred": "Fixing include path for ThriftServer.h"}
{"gold": "Do we have to restrict this to SVG elements? I think setting namespaced attributes on normal dom elements (while not as common) is still valid, so perhaps we can save some bytes by removing the `isSvg` check?", "pred": "fix: \u4fee\u590dclass\u5c5e\u6027\u7684bug"}
{"gold": "Please add it to the `REMOVED_HOOKS` constant.", "pred": "Fix linting"}
{"gold": "This variable needs `.v1` at the end of it, or the tests below need it. There are some test failures as a result", "pred": "test(fieldset): add test for fieldset with no legend"}
{"gold": "Is this access protected so that only admins can access this route?", "pred": "Fixing the scope parameter"}
{"gold": "What happens if the minimum x coord is > 0? This will incorrectly set it as zero, right?", "pred": "output_layout: fix typo in comment"}
{"gold": "I think you want to look at current pending + batchSize and if that is > o.maxp no?", "pred": "Fix typo in comment"}
{"gold": "Should this be `codes.Error`? `codes.Internal` was an error status before.", "pred": "Fix test"}
{"gold": "I don't think you need these lines.", "pred": "Fixing the twitter_detail bug"}
{"gold": "You didn't mean to export this, right?", "pred": "journal: fix comment"}
{"gold": "Simple Notification **Service** (singular)", "pred": "Update sns-ruby-example-show-topics.rb"}
{"gold": "Do we still need this?", "pred": "client: add comment about gatewayOFPort"}
{"gold": "We do have a disconnect between the privateMarkerTransactionFactory.getSender() call and the createPrivateMarkerTransaction() call. When the plugin receives the call to create the PMT it does not know what the sender was returned by the other call. At a minimum we need to pass in the sender to the second call. I would prefer that the plugin does the locking if that is necessary. If you are using random keys you don't have to lock! Besu could signal to the plugin when a PMT was un- or successfully added to the pool using a callback. Callback could be null if this is not needed. The plugin would have to be able to get the nonce for a certain key from besu. What do you think?", "pred": "Remove debug logging"}
{"gold": "This is a bit inconsistent with the `ErrorStartHourGreaterThanEnd` in the previous file. Wouldn't `ErrorDefault``fit better here?", "pred": "fix: image editor not working in IE11"}
{"gold": "I think it will revert the change @antoninbas did on purpose 05eee251c9c53400277def576f92d614ca234898", "pred": "Fix typo in test name"}
{"gold": "nit: a switch perhaps?", "pred": "Fix typo in comment"}
{"gold": "Would it make sense for `opensearch_description_tag` to have default values for the title and href attributes?", "pred": "Add meta tag for google webmaster tools"}
{"gold": "Just noticed this while debugging -- it's unlikely to be causing issues in practice.", "pred": "journal/mdops: fix comment"}
{"gold": "That seems unrelated - did that fix a random test failure you noticed while working on this issue?", "pred": "Update e2e test to match new UI."}
{"gold": "This kind of concern should be handled in the `TableMetadata` update methods. This is similar to `metadata.rollbackTo`, which not only sets the current version, but also updates the table history. I think that all of those methods should add the current object's `file.location()` to the previous metadata location list, if it is non-null. That way, the caller never needs to remember to update it.", "pred": "HIVE-18822: Fix typo in BaseMetastoreTableOperations.java (<NAME>, reviewed by <NAME>)"}
{"gold": "We need to know why all the tensors are detached in `get_bboxed`.", "pred": "fix bug in flip_tensor"}
{"gold": "Unrelated but shouldn't this raise `attribute-defined-outside-init`?", "pred": "Fix typo in class_attributes.py"}
{"gold": "I would rather no have this as a `kwarg` as it encourages \"growth\" which lead to an unweildy constructor in other classes. Let's add a method or property to take care of this instead as I think it's usage is going to be quite low.", "pred": "Fixing the service.py file"}
{"gold": "You just changed my life :) I grew very attached to this safe nav approach when working with Groovy years ago `obj?.method`. Glad to see its now a part of Ruby!", "pred": "Fix bug in num_answered_questions"}
{"gold": "do you mean 'clearfix' class?", "pred": "Fix guidance edit form"}
{"gold": "`causalConsistency` is already defined on `SessionOptions`. We do not need to duplicate it here.", "pred": "Fixing typo in docs"}
{"gold": "This should not be included since there are no code changes.", "pred": "Fix checkstyle"}
{"gold": "If all we need just response 200, then we could use `c.Status(http.StatusOK)` here.", "pred": "Fix #1042: Fix the bug of wiki repo name"}
{"gold": "Should be checking for error here", "pred": "Fixing a typo in the comment"}
{"gold": "Put a space between `(array)` and `$this` and I'll merge it", "pred": "Fixing form widget"}
{"gold": "You could add this to stack.go, which has similar functions (to avoid yet another small file). None of these are likely to be implemented considering what TinyGo is designed for.", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "the class names `NotificationHolder` and `NotificationsHolder` are fairly difficult to quickly tell apart, particularly since they are often used close to each other", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Avoid wildcard imports", "pred": "Remove unused import"}
{"gold": "Need to do this to unblock mockgen. The interface method needs to be public to be visible in another package. The right fix is to delete this test only interface method", "pred": "Update contract.go"}
{"gold": "same question here as I have on the other file regarding doing this check here vs L112 vs not at all", "pred": "fix(mongo): fix parsing of mongodb+srv:// urls"}
{"gold": "Adding `// +build !windows` (as a separate line) will do the same for Windows. So while you are at it we might add it as well.", "pred": "fuse: update import path"}
{"gold": "this is used as important way of mocking for unit tests, FYI", "pred": "fixing typo"}
{"gold": "Sorry, should have been clearer, I meant adding this to the ``Histogram`` options one line above.", "pred": "Added a default style for the error bars."}
{"gold": "Just ignorance on my part, but what is the significance of the change from C23NHe2 to C23NHx2?", "pred": "Fix test"}
{"gold": "What about tuples or pandas series? Do we want to support lots of different types or force a single type?", "pred": "Fixed histogram docstring"}
{"gold": "Small thing, without the check above this will throw a NoNodeException if the path doesn't exist. Maybe this can be wrapped in a try/catch just for the NoNodeException, so that the more user-friendly message used above can be thrown instead: `throw new KeeperException.NoNodeException(\"No collection found at path: \" + path);` Just a thought, I'm not even sure it's worth it.", "pred": "SOLR-10206: Fix typo in ZkStateReader"}
{"gold": "I don't know why this worked before, but we should be explicit on not verifying that a blank string (allowed as a way to remove a url/download_url) is a valid url as it is not.", "pred": "Fix validation of project url"}
{"gold": "Do we want to raise an error here instead of warning? Or would it be better to just see if Bolt happens to succeed, and let it fail on it's own if it fails? I'd lean towards raising an error, but that's different from \"removing support\".", "pred": "(maint) Fix typo in deprecation warning"}
{"gold": "This is kind of confusing with the other `filter_options`.", "pred": "(maint) Fix typo in comment"}
{"gold": "Could the `deleteFromFavorites` happen when `head == nil` because it's not initialized yet somehow but not because TLF doesn't exist? I was concerned if this would make it possible in any way to have favorites seemingly deleted on a device while it's not actually happened on server.", "pred": "kbfs: fix a bug in DeleteFavorite"}
{"gold": "It doesn't look like this particular \"rowCount\" variable is used anywhere. I suppose we could delete it. The code change is harmless though.", "pred": "Bug fix: drop schema should not drop volatile schema"}
{"gold": "Hmm, probably we should instead write whatever `status` is returned instead of coding a special case.", "pred": "Fix typo in comment"}
{"gold": "Could using the pointer-to-struct approach here cause confusion later? We've had several problems of that kind in the past. What does it mean if the struct is non-nil but its fields are nil? Is that even allowed? (libcalico-go question) Are there any validation requirements for this new rule addition; should it only be allowed if `Protocol == TCP`, for example?", "pred": "Fix typo in comment"}
{"gold": "why this recursive relationship definition?", "pred": "add has_many :comments to user model"}
{"gold": "More sentence, less list please. > Encoding of the handler. This field is optional. We don't need to mention exactly what it's used for because that list can expand (as it has already in this change).", "pred": "Fix typo in comment"}
{"gold": "Not part of this PR, but should the section above say what the name of the metric is for each method?", "pred": "Fix typo in comment (#100)"}
{"gold": "there are changes that are upcoming to this section. For now, this works (to demo the usage of Gauge), and the changes to this section are coming as separate PRs.", "pred": "fix: add missing break statement (#215)"}
{"gold": "This is equivalent to stdout. Why not just replace stdin with stdout in `IsProcessBackground`?", "pred": "fix: terminal: fix panic when terminal is closed"}
{"gold": "Rather than test for nullptr, just treat the pointer as a bool, i.e. `if(p_jmsg[\"compress_method\"])`", "pred": "fixing dataman"}
{"gold": "Can we move the remaining code of this method to a new method? I don't like the `return;` here, we could try to replace it with an `if ... else ...` syntax. What do you think?", "pred": "Fixing bug in library feature panel"}
{"gold": "nitpick: _and collections_", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "I believe these need to be explicitly initialized in `proxy_send_prepare`", "pred": "fix typo"}
{"gold": "This is unnecessary. The declaration of `t0` on line 179 is still in scope inside the `except` block.", "pred": "Fixing a bug in the task process"}
{"gold": "The `border_color_`... properties don't support solid colors, not only this one. Maybe `@param solid_color` should be used instead of adding this note to every one of them?", "pred": "Fixing a typo in the comment."}
{"gold": "We don't need this file, we can use the one that is in the grid-ui directory", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "FYI: inlined this method in the internal review.", "pred": "Fix typo in BazelIgnoreParser"}
{"gold": "Werid, the checksum between this file and the one on branch `develop` is the same not sure why it's showing a diff", "pred": "Remove unused import"}
{"gold": "Prometheus doesn't have concept of Meter (like OTLP does).. Trying to see if this is a good approach to use the meter name as namespace, to avoid name collisions, when same instrument name is used across multiple instruments, from different Meter.", "pred": "Fix typo in PrometheusExporter (#1078)"}
{"gold": "The formatting of this is a bit strange; I'd suggest collapsing this back to a single line, and moving the `&&` to the beginning of the second line to meet the line length restriction.", "pred": "Fixing a bug in the library card controller."}
{"gold": "One or the other should be non-NULL. If segments is NULL, the alloc above will have size zero, which we do not allow (there's no header): it should assert in debug build. So there should be asserts that one is non-NULL at the top, and if there really needs to be some kind of defensive check down here, it should cover the alloc too.", "pred": "Fix a bug in the module_data_t copy constructor."}
{"gold": "I'm surprised rubocop isn't picking up singe quotes?", "pred": "Add a method to get the user's name"}
{"gold": "Is this line still needed?", "pred": "Add a test for the new parser"}
{"gold": "Maybe use specific values for all the watt.times fields? Even better, have a const for it at the top of the file?", "pred": "Fixed bug in the creation of the SEDP endpoints"}
{"gold": "nit: UNICODE_BRAILLE_TABLE or something might be a better name for this. IMO, braille-patterns.cti is a terrible name. This table allows Unicode braille characters to be used anywhere to produce raw dots.", "pred": "Update brailleTables.py"}
{"gold": "Why are we removing the option to skip machine pool generation?", "pred": "fix: add missing comment"}
{"gold": "\"Request line\" here too.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Please remove this.", "pred": "Fix loot item auto loot"}
{"gold": "Weird bug. Combining those joins and group calls was triggering AREL to generate the sql cache inside of will_paginate before the final call. This is a harmless workaround, but hints that will_paginate might becoming seriously deprecated.", "pred": "Fixing affiliated accounts"}
{"gold": "This can be simplified as discussed before.", "pred": "Fixing the analysis model"}
{"gold": "Does `internal` or `test` in the file name actually do anything here? Or is that just to show these functions are only for tests?", "pred": "fix(execute): fix import path for flux"}
{"gold": "does this boolean indicate unsafe serialization?", "pred": "Add test for transaction deserialization"}
{"gold": "Maybe rewrite to `Is only implemented for React Native`? (I assume that is the case).", "pred": "Fix Realm.deleteFile() docs"}
{"gold": "Do we not need this in Java because Java *is* handling map responses?", "pred": "Fixing a bug in the page streaming config."}
{"gold": "Maybe \"For configuring which scheduler messages can be received.\"?", "pred": "Fix typo in docstring"}
{"gold": "It will stop working with orm, so this is not a good fix, Try using some method in a common interface", "pred": "Fixing bug in sync thumbs command"}
{"gold": "`s` is not necessarily the same as `sampler` - sampler could be null and this crazy lambda underneath falls back to something. So please use `s`", "pred": "Fixing the build (#107)"}
{"gold": "This code is a bit confusing. Should HttpParameterType set to the original one or it is always BODY?", "pred": "fixing pojo operation generator"}
{"gold": "Why did this change?", "pred": "Fix a bug in the remote execution client."}
{"gold": "nit: `status` collides with imported package named `status`", "pred": "Fix typo in dynamodbv1.go"}
{"gold": "\"memory pressure could be decreased\" --> \"to avoid memory pressure\"", "pred": "ledger: fix typo in comment"}
{"gold": "I think it would make sense to fetch the cache values after deleting the listens and making sure they are what we expect.", "pred": "Fix test_timescale_listen_store.py"}
{"gold": "I'm thinking about covering this change with the test. Can you do that?", "pred": "fix(collapsible-columns): fix collapsibleColumns plugin"}
{"gold": "Not sure if it's a good idea to remove stop channel. If user cancels connection how will you stop pinger?", "pred": "Fix typo in comment"}
{"gold": "Could you please add a `TODO` here that we won't need `docker.AuthConfiguration` anymore when we migrate to SDK's pull image?", "pred": "Fix typo in comment"}
{"gold": "Is there a scenario were we want to get an arbitrary set of blobs that don't share a common root?", "pred": "Fixing the build break"}
{"gold": "Can you leave a note about why we are skipping regex tests?", "pred": "fix(test): fix client side encryption tests"}
{"gold": "This was the only caller of CreateRepo, so I inlined it.", "pred": "fix(cmds/init): fix typo in init command"}
{"gold": "As this is already a child of `auth`, I think we can shorten this to `path`", "pred": "Fix typo in VaultAuth struct"}
{"gold": "This call should use element, not 0 I think.", "pred": "Fix for #4284: UIATextInfo.copy() now works with UIA text fields."}
{"gold": "This is missing the definition of `fetch_until_empty_page` - it needs to go in the config section above.", "pred": "Update swift.go"}
{"gold": "I don't think this one needs to be changed since the only previous path is already an absolute one.", "pred": "JariBakken: Fixing the path to Firefox on Mac OS X."}
{"gold": "Since we kept the original constructor we might not need this change now.", "pred": "Fix typo in BaseExpireSnapshotsSparkAction"}
{"gold": "There is already a log in `BaseMetastoreTableOperations` for this. It has the location, but not the table name. Maybe just add table name to that one.", "pred": "HIVE-18820: Fix HiveTableOperations#refreshFromMetadataLocation() (<NAME>, reviewed by <NAME>)"}
{"gold": "This should be in the last group.", "pred": "fix: import path"}
{"gold": "I believe you should either remove this or rename the PR. You can't change the behavior of the tracer (even to fix a bug) in a PR named \"unit test improvements\"", "pred": "Fix typo in error message (#1007)"}
{"gold": "I've gone with this group name, however I'm open to suggestions on alternatives!", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "should this be GOQUORUM", "pred": "Add PLUGINS to default JSON-RPC APIs"}
{"gold": "I think checkCoinbase is not skipping checking coinbase. Instead, true-> checking num(coinbase tx) = 1, false -> checking num(coinbase tx) = 0.", "pred": "fix byzantine node"}
{"gold": "same here, move it out", "pred": "fix test"}
{"gold": "Can you elaborate on why you need different behavior depending on Tools being built independently or not?", "pred": "Fix missing include in Kokkos_Profiling.hpp"}
{"gold": "because of the above if statement will requires both ex_save and guid_save to be true, this code will always return 'example answer'. This should be revised with `example_answer.present?` and `guidance.present?`", "pred": "Fix bug in annotations controller"}
{"gold": "why not context from stdlib?", "pred": "Fix import path"}
{"gold": "Just saw this and wasn't able to hold myself from renaming :-).", "pred": "Fixing the CRC32 generation"}
{"gold": "Can we keep the other assertion too? I think it's helpful to ensure that the uninstall function was called too", "pred": "fix(core): fix tests"}
{"gold": "`warn_with` prefixes the message with `WARNING:`, right? So this will put `WARNING:` twice. It would be good to verify all the warnings look good after this change, given how easy it is to make a simple mistake like this :(.", "pred": "Fix warning message for shared example groups"}
{"gold": "FYI In the message queue I use the term \"stamp\" to refer to the time-like mark associated with each message. It's opaque to the queue/pool and should make no difference if the stamps and age limit were converted to seconds. So this could then become `Stamper` with `CurrentStamp()` method, no reference to \"blocks\" or height etc. The wrapper struct could be `StampedMessage. The interpretation as block height is deferred to the user/constructor that hooks things up, the \"business logic\". This is just an observation, take or ignore as you wish.", "pred": "fix import"}
{"gold": "Can we remove the `TODO` statement here? (as this is actually fixed in this PR)", "pred": "fix: remove_xml_preamble should not remove xml preamble from response"}
{"gold": "m prefix no longer in code style", "pred": "Fix a bug where the account would not be saved after changing the sort type."}
{"gold": "need to filter the entities in buffer as well", "pred": "kvstore: fix typo in kvstore_buffer.go"}
{"gold": "Please add spaces before and after the equals sign", "pred": "Update FastBlurTransformation.java"}
{"gold": "This file could also be cleaned up/deleted. But lets do this separately after ensuring all the event logging has been ported to the current logmxevent_traf.cpp file completely.", "pred": "Fixing compilation error"}
{"gold": ":thinking:, the line number here is the line of the example (`example.location`), that's probably why I finally chose to display the example title because it's what can be found on this line, and saying that the error is from there is confusing. But presenting the actual failures is indeed better, so maybe we can get the failure actual line number from the exception backtrace and then output two distinct lines for failures like this one?", "pred": "Fix formatting of spec output"}
{"gold": "We shouldn't add this as a new `kwarg` here. This should all be done on the options class", "pred": "Fixing the docstring for the chrome driver"}
{"gold": "Should this be `OS_VOLUME_SUPPORT` to match the symbol key names?", "pred": "(maint) Add missing comma"}
{"gold": "In C, file scope variables are already initialized to 0 so the \"= NULL\" is redundant. Not a big deal.", "pred": "Fix typo in heaptrace.c"}
{"gold": "on line 40, the `relevantNode` can change and therefore the `doc` might change too for the lookup on line 43. I think this code should be moved to where the `doc` is actually being used", "pred": "fix(aria-disabled): ignore aria-disabled on non-form elements"}
{"gold": "nit: just to be similar to others, can you change to interpolation?", "pred": "Fix typo in exception message (#1017)"}
{"gold": "Would this make more sense as an option on an Issuer resource (specifically on the CA issuer) rather than as a flag? It's not ideal that we have a flag that _looks_ like it could be 'global' but is actually not IMO. Also, if Istio is reading the CSR object, is it possible for it to read the CA from the CSR itself too and append the two instead? Not sure if we ever decided whether to use annotations for this purpose @JoshVanL?", "pred": "Fix typo in comment"}
{"gold": "Because this acts as a coordination point between client and server, it should go in core.py instead of const.py (so eventually the server could use it to guarantee that it delivers dates in the expected format).", "pred": "Added a new enum for the target type"}
{"gold": "expected statement, found 'else' (and 1 more errors)", "pred": "Fix typo in comment"}
{"gold": "IMO this doesn't need to be in the `kbfs` repo. And I don't like setting the byte. We can always compare with the randomly generated `TlfID`.", "pred": "kbfs/libkbfs: fix a bug in FakeID"}
{"gold": "What's the difference from ModuleName in `pkg/apis/meta/v1alpha1/types.go`?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "We shouldn't be changing this task as we are trying to break our dependency on it and switch to using the shipped version.", "pred": "Fixing a typo in the comment"}
{"gold": "Shouldn't we have a low bar for generating out-of-line context switch, i.e., if we need save more than n (3?) simd or m (4) gprs we should go out-of-line? And it should be || instead &&. It seems the bar is still very high after this change.", "pred": "Fix clean call optimization for ARM64"}
{"gold": "Should the API have a dependency on the SDK?", "pred": "Fix metric package import (#100)"}
{"gold": "Is this a sometimes leaky test?", "pred": "test(NODE-3028): fix typo in change-streams spec"}
{"gold": "It should be possible to create a test case that enter the loop. That would be a good enough test case for me. Have a look at the extern type inference test cases that already exist. Since you can just pick the type variables the extern type use, you should be able to create a conflict that requires this loop to fix.", "pred": "Fix a bug in the constraint generator."}
{"gold": "It might make sense to log this.", "pred": "Fix for #1088: wxPython 4.0.0.b1 is not supported"}
{"gold": "Line is too long. [84/80]", "pred": "Fix deep_copy method in Blacklight::Configuration"}
{"gold": "nice touch since Google likes to change things every now and then.", "pred": "Update options.py"}
{"gold": "Thank you this is so much nicer than the old `Rails.configuration.branding['blah']['blah']['blah']` :)", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "nit: Would you mind alpha-sorting this?", "pred": "Add missing resource type to resource_type.py"}
{"gold": "For my understanding, the DATA manifest & DELETE manifest could share the same read / write path so I think we could use the common reader+writer. Is there any other reason that we need to make them separate paths ?", "pred": "Fix javadoc"}
{"gold": "that change should be sufficient for avoiding the override of contact_us_url helper. The one defined at the .yml it is within a hash so no problem should arise.", "pred": "Fixing the email subject for the feedback email"}
{"gold": "We actually had a discussion about this exactly in #3470, some languages seem to go for one, some for the other  ", "pred": "Update de.php"}
{"gold": "Is PHP the first dynamic MVVM language with grpc streaming support?", "pred": "fixing the build"}
{"gold": "the `if` isn't necessary here; it's safe to call `delete` on `nullptr`", "pred": "Fix for bug 2222161: SmilesMolSupplier::next() does not reset the stream"}
{"gold": "Change if the method's name finally changes to `clear_history` as proposed elsewhere", "pred": "Fix compilation error in DataWriter (#2215)"}
{"gold": "can this one also be moved to the top of the file?", "pred": "fix: [NVDA] Fixing the help message when no help is available."}
{"gold": "So if I understand this correctly the externalEntities should be computed and stored in GroupMember, while current code usage of GroupMemberPod will be migrated to GroupMember later?", "pred": "Fix typo in comment"}
{"gold": "Don't we have tests to change after this breaking change? probably we're not using hard coded strings in our tests when we create a `Span`?", "pred": "Add more tags"}
{"gold": "will this fail if the env variable doesn't exist? Is this the preferred behaviour?", "pred": "Update bigquery.py"}
{"gold": "bad line wrap", "pred": "Fixing a bug in the SpatialPooler"}
{"gold": "What does the `8` here represent? Can you give it a name?", "pred": "Fix bootstrap_server receive_header_action"}
{"gold": "`MPRester(os.environ[\"MP_API_KEY\"])` can be left simply as `MPRester()` and it will pick up the API key from the environment. What is the purpose of this file otherwise? Is it better suited for `dev_scripts`, or a test?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Looks like there may be more changes to this file than intended?", "pred": "Update schema.rb"}
{"gold": "when message type is not expected, contine to next loop instead of return to finish infinite loop", "pred": "fix: fix the bug of cloud message"}
{"gold": "This change was not really intended but made by the linter of VS Code. And looking at other packages this looks like a best practise to place interal packages on the top and gh imports afterwards.", "pred": "Fix import path for exec package"}
{"gold": "instanceID should stay the same for a AWSMachine?", "pred": "fix: remove providerID from validation"}
{"gold": "Since this is a dict don't you want `False` or do we clean that up elsewhere?", "pred": "Fixing the test"}
{"gold": "what's the reason you had to add the `host` argument to all `get_work` calls?", "pred": "fix import"}
{"gold": "This will never be a dataset so we can simplify the code here", "pred": "fixed permission root command"}
{"gold": "This should be moved into the PrivacyBlockProcessor instead of adding the constructor here.", "pred": "Fix typo in comment"}
{"gold": "nit: Remove \"insightfilestore\". I think \"insightstore\" is good enough and as I see we are using that name at other places too.", "pred": "Fix the import path of the insight package"}
{"gold": "It looks like you've removed `bisect_round_finished` but kept `bisect_round_started`. Seems a little odd that they aren't paired. Not sure if there's anything to do about that though...", "pred": "Fix bisect progress formatter"}
{"gold": "I'm not sure how to fix the lint and mypy warnings on this line. I could just ignore them, but I feel like the linter should know this exists.", "pred": "tests: fix percentage test"}
{"gold": "why remove `Symbol`?", "pred": "fix(session): fix typo in Aspect.SKIP_SESSION"}
{"gold": "Why are currency signs considered punctuation? They technically fall under the BMP range for Currency Symbols `\\u20A0-\\u20CF` (covered in `getUnicodeNonBmpRegExp`, which is itself a misnomer)", "pred": "Update punctuation.js"}
{"gold": "You have forgotten a coma `,`", "pred": "Fix setup.py"}
{"gold": "For different datasets, we may want to save the images differently. Sometimes the datasets are categorized into several subfolders, and we want to keep it when saving visualization results, and sometimes we just want to save all images in `out_dir`. An argument may be added to control the behavior.", "pred": "fix bug"}
{"gold": "if `other` could have a guaranteed `0` byte in it, this whole `if` could be removed, and above you could just add `|| c2 == '\\0'` to get the same effect?", "pred": "Fixing a bug in FlexBuffers.java"}
{"gold": "nit: can this be a primitive value?", "pred": "Fix checkstyle"}
{"gold": "This maybe not what we want. If `rewrite` occurred before, `r.URL.Path` contains the result and we should use it. Otherwise `rewrite` middleware will disfunction when combining with `browser`.", "pred": "Fixing a bug in the browse handler"}
{"gold": "Why change this?", "pred": "Fixing a bug in the engine."}
{"gold": "  _nitpick_ Isn't it now actually NotLogFakeHttpExceptions**Error**Listener ?", "pred": "fix cs"}
{"gold": "Why not just look for the \"type\" property instead of creating a ResourceType property?", "pred": "Fixing the resource schema generation"}
{"gold": "should use `bc.config.Blockchain.ChainID`", "pred": "blockchain: fix typo in comment"}
{"gold": "this doesn't need to know about NativeClient", "pred": "Fix typo in ElasticsearchStorageProperties"}
{"gold": "I know we discussed if we should add in the resource_name to the hash, and I actually don't think it's required. The violation hash was recently updated (not released) to include the violated rule, so when the next release goes out, user's findings will get updated. The resource name doesn't hurt to have here, but not required.", "pred": "Fixing the violation access"}
{"gold": "The variable name is also misleading imo. The width from the buffer comes from `wl_shm_buffer_get_width` (or a similar EGL thing), which is what gets encoded into `surface->texture->width`.", "pred": "surface: fix typo in comment"}
{"gold": "Why are you using these tags to carry these msids?", "pred": "Fixing a bug in the InfluxDB output plugin"}
{"gold": "flb_strdup() should do the work here. note: use Fluent Bit memory wrappers", "pred": "config: fix memory leak in flb_config_set_property()"}
{"gold": "This line should be separated from the package declaration by one line as it is not the package description.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "shadow: declaration of \"err\" shadows declaration at line 410 (from `govet`)", "pred": "fix: test case"}
{"gold": "Maybe next time better to make separate PR?", "pred": "Fix import path"}
{"gold": "line 316 also handles this case, need to simplify the logic.", "pred": "fix mask_test_mixins.py"}
{"gold": "We used to have a simple check for bucket and object names, we then decided to remove it and rely on the backend service to check for the name. Is there any reason to add an empty name check now?", "pred": "storage/gcsblob: fix typo in comment"}
{"gold": "Line too long", "pred": "Fixed bug in sendSync"}
{"gold": "This isn't aligned though.", "pred": "[fixed] typo in spells.cpp"}
{"gold": "it is mean -> it means PAAHead does not support test-time augmentation.", "pred": "Fix a typo in PAAHead (#4355)"}
{"gold": "@lnielsen-cern thanks. I missed it :(", "pred": "BibCatalog: fix import"}
{"gold": "@tofumatt, has it been changed intentionally? It doesn't seem to be required in IB, plus we haven't had `content-drilldown` before... If it has been changed intentionally, then should we update the `AnalyticsDashboardWidget` component to be use `content-drilldown` instead of `content-pages` as well?", "pred": "Fix: AnalyticsAdSenseDashboardWidgetTopPagesTable links"}
{"gold": "nit: don't think an extra line is needed here; as retrying is an installed library and should be grouped with the rest of the installed library.", "pred": "Fix import error in gcp_api.py (#104)"}
{"gold": "This should be a bool", "pred": "Fix typo in prometheus spec"}
{"gold": "`if (llvm::dyn_cast_or_null<swift::WeakStorageType>(GetSwiftType(compiler_type).getPointer())` ?", "pred": "[Swift] Fix a crash in GetReferentType."}
{"gold": "The `generateVariantWorkloadManifests` function below relies on the config manifests specified in Git, but it was passed with the newly created canary's manifests where their name was updated.", "pred": "Fix typo in comment"}
{"gold": "are this docs neccesary ?", "pred": "fix: remove unused use statement"}
{"gold": "Can you please revert changes to files in the `thoughtworks` package? This is legacy code and we will eventually phase out RC.", "pred": "JasonLeyba: Fixing a compilation error."}
{"gold": "This change suppose to resolve issue #2968. `loss_weight` should be of length 2, the second entry is ignored.", "pred": "fix bug"}
{"gold": "Is there an easy way to check for conflict suffix to avoid false positives here?", "pred": "Fixing a bug in the ignore file"}
{"gold": "`apply_prep.run_task` also seems like it can just use `@context.run_task`", "pred": "(maint) Fix plugin_hooks_spec"}
{"gold": "do you have any idea on how to fix it?", "pred": "Fixing a bug in the library menu."}
{"gold": "You don't need to fix this (you've done so many iterations). But for next time, you can make this into a docstring so it'll have a nicer descriptive name when the tests are running.", "pred": "Fixing test"}
{"gold": "When does 'expiresAt' change? Do you need this?", "pred": "Fix ENI attachment string representation"}
{"gold": "There are enums for genders + `PLAYERSEX_LAST`.", "pred": "Fix Outfits::getOutfitByLookType()"}
{"gold": "Should this use the constants as well? Or intentionally covering the fact that the constants may change", "pred": "[rollup] fix test"}
{"gold": "The case of a negative size (= keep all elements) was not handled in this function.", "pred": "Fixing a bug in the TopNContainer"}
{"gold": "I think we should keep this dynamic config knob for operations purpose.", "pred": "Fix typo in system config (#2045)"}
{"gold": "Was this intentional? Perhaps this could be replaced with another way to check the offsets?", "pred": "Fix test_characterOffsets.py"}
{"gold": "the buckets are created via the stackset, customers don't need to provide them", "pred": "Fix typo in pipeline.go"}
{"gold": "This doesn't have the same behavior as before. Maybe you want `reverse_merge` (and it either just works or we implement it on `Blacklight::Solr::Request`)", "pred": "add comment about solr_path"}
{"gold": "This should be ` /$(ghc_find #{config[:ghc]})/ ` instead of ` /#{ghc_version}/ `, I think.", "pred": "Fix typo in cabal update"}
{"gold": "We should deprecate this at some point.", "pred": "Fix typo in getSyncProfile"}
{"gold": "Move these two arguments before `loss_cls`.", "pred": "Update fcos_head.py"}
{"gold": "[Super NIT]: i := serialNumber if i == 0 { i = mathrand.Int63n(...) }", "pred": "Fix typo in comment"}
{"gold": "-f short form here collided with --force. :)", "pred": "Fix typo in help text"}
{"gold": "I think it is better to describe in the release note that `rerender()` was removed.", "pred": "Add test for cloneElement"}
{"gold": "We could also test this easily with `runpy.run_module`, what do you think?", "pred": "version.py: bump version to 0.13"}
{"gold": "Is it OK to fall through if it's not assignable? I was kind of surprised when the tests passed. Maybe one of the options below ends up working? For the new tests, this panics because `**not assignable uuid.UUID to []uint8**`. `uuid.UUID` is an array, not a slice.", "pred": "Fix typo in comment"}
{"gold": "I know this is after the fact but imo blockAPI should be blockMiningAPI.", "pred": "fix(node): fix typo in comment"}
{"gold": "it's just a pattern as it was. SystemAttributeCode should have it's own definition and validate by it", "pred": "fix attribute code pattern"}
{"gold": "Similar to the code block when we use prefix, maybe we can unify them to base?", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "I think `Duration` is useful for this action and we shouldn't ignore it.", "pred": "fix: fix podchaos validate (#2026)"}
{"gold": "Everything below here can be replaced with `return s.err, len(p) - len(s.dataForWriting)`.", "pred": "Fix typo in comment"}
{"gold": "Again, we can also guard `g_host_hip_lock_arrays.atomic`, can't we?", "pred": "[HIP] Fix hip_runtime_api.cc compilation error"}
{"gold": "Variable name should start from lowercase latter", "pred": "Fix import simple product command handler"}
{"gold": "Why has this timeout doubled?", "pred": "Fix typo in comment"}
{"gold": "Should IptablesPostWriteCheckIntervalSecs be set back to its previous smaller value, if use of the iptables lock is disabled?", "pred": "Fix typo in comment"}
{"gold": "You're missing a `return` here, but I'll add it :smile:", "pred": "webengine: fix typo in comment"}
{"gold": "Can you try adding back this assertion? I'd like to assert that the texture has been created in the same context as the renderer.", "pred": "gles2: Fix typo in comment"}
{"gold": "This won't work with Python 3 because it will already be a string. In that case we need to use `decode_header` from utils.", "pred": "Fix typo in comment"}
{"gold": "Why is the respond_to check here?", "pred": "Fixing the discriminator key validation"}
{"gold": "@orklah are you sure it's the same as `$chars[$i]`? It looks like `$i` is changed above, after `$char` assignment.", "pred": "Fixing a bug in the function docblock manipulator"}
{"gold": "I have a question? How do I construct a indexManager for testcase?", "pred": "Fix the test case of DeleteVertexProcessor (#1082)"}
{"gold": "These checks aren't needed. See pluginmgr.c : opae_plugin_mgr_load_dflt_plugins( ).", "pred": "Fixing a typo in the plugin configure function"}
{"gold": "Please take a care about prefixing.", "pred": "Fixing the search request"}
{"gold": "this line doesn't match what the rest says", "pred": "Fix typo in WorldUpdater javadoc"}
{"gold": "Since it's not working for linux, maybe leave the !linux in there as well?", "pred": "Fix build on linux"}
{"gold": "Should we remove the key-value pair entirely? Same for workflows in general. We have a \"sourceExists\" method that checks if a key is there if I remember correctly.", "pred": "fix(include): fix bug in include workflow"}
{"gold": "Unrelated bug fix", "pred": "Fixing issue with soql sync down target"}
{"gold": "We probably want to let the translation library handle the string replacement for these as well.", "pred": "Fix typo in package install notification"}
{"gold": "should combine these 2 list (list_gossip and list_db) into just one list command, and show the discrepancy between the 2 if any.", "pred": "Fix typo in admin membership command"}
{"gold": "What do you think about prefixing the Policy method names with `can_`?", "pred": "fix proposal policy"}
{"gold": "Based on the docs, credential process can return a key `SessionToken`", "pred": "Fixing a typo in the comment"}
{"gold": "I think this if should be removed (see issue)", "pred": "fixing issue with birthdate"}
{"gold": "I would avoid importing `felix/ipsets` package because this package is the windows equivalent and should be at the same level of `felix/ipsets`. We could add linux specific dependencies into `felix/ipsets` later and it will break Windows build.", "pred": "Fix import path for libcalico-go"}
{"gold": "nitpick: Please move this down to the other imports, as it's a Python stdlib import.", "pred": "doc: Fix typo in doc generation script"}
{"gold": "\"for getting started guides\" reads a bit weird, like it's missing punctuation. Maybe just \"for a tutorial\"?", "pred": "Fix typo in comment"}
{"gold": "This looks like a dead parameter -- maybe a copy and paste error. If it's truly unused, maybe you can open a separate PR to simply delete it, and then it's one less detail to worry about here.", "pred": "Fixing a typo in the Formats class"}
{"gold": "Nit: Should we add support for `int` and `uint` in the `values.New()` function? That would allow us to to handle all of these types in one case. Maybe there's a good reason why we don't do that already, but I'm not sure what it is.", "pred": "Fix typo in vertica row reader"}
{"gold": "if you are not dealing with cache now, please revert these changes. On their own they make little sense", "pred": "Fix typo in javadoc"}
{"gold": "Wearing my extra-douche-bag hat I would say not spaces on a blank line. Maybe at some point we could have some automated process remove these things. For now I would not bother changing it.", "pred": "Fix bug in NodeGenerator"}
{"gold": "I think it would be better to use an `ItemUpdatedEvent` like for the \"prefer streaming\" preference. We already have a ton of events that need to be handled in all list fragments that just do the same everywhere. I think we could even remove some of the existing events in the future.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "I think we have to manually write a down for this migration.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "I don't think we still need this check, but I'd leave it as an assertion for now.", "pred": "[SPARK-35898][PYTHON] Fix typo in Koalas DataFrame docstring (#35065)"}
{"gold": "Since this may be the case, wondering if we should call the param `updated_at_i` or something so that we don't run into a problem distinguishing them down the road?", "pred": "Fixing the cart spec"}
{"gold": "wondering why we need to join the paths here; seems evt.commandLine only takes whatever appExe is", "pred": "Fixing the build break"}
{"gold": "1.not format code 2.failed but still continue? 3.\"UTF-8\" can changed to java.nio.charset.StandardCharsets.UTF_8.name()", "pred": "[ISSUE #1008] fix config center client"}
{"gold": "I'm wondering if we should add this to a `utils` module in `astroid`. Porting the util to `pylint` doesn't make sense as we would need to duplicate the globals that are being used in the function, but importing from `brain` also feels weird. @Pierre-Sassoulas Do you have an opinion?", "pred": "Fix typo in comment"}
{"gold": "This seems different than what we do for corrupted request headers. I would like to determine the correct behavior and consolidate this logic.", "pred": "Fix typo in comment"}
{"gold": "Please make the change in the CAI inventory, rather than changing the scanner.", "pred": "Fixing a bug in the run data"}
{"gold": "adding this `abstract` is a breaking API change. Even though I agree it makes perfect sense to have it, we can't break this API until PMD 7.0.0. We should revert this particular change. We could make a reminder ticket like we did with #463 for 6.0.0", "pred": "Remove unused import"}
{"gold": "This is following the existing convention, but I'm not sure the convention is a good one. I think it would be better to have one shared example group: - It means we don't need to add new example groups twice every time. - If the shared example group looks large, that makes it more obvious that our team models have too much shared behavior. I don't want to do anything about this right now (I'm pretty sure I can wipe out this shared example group when I change team plans), but it's good to keep in mind.", "pred": "Fixing spec"}
{"gold": "I do not think we need to do a source code change to handle this. We could set the subnetwork to default to /32 (/128 for ipv6 ipv4-mapped)", "pred": "Fix clang-tidy"}
{"gold": "It looks good overall! The only issue I have is that the description string is now duplicated twice right? Once in the struct and once in the parameter string? Maybe let's pass the struct to the command so that `ostree_option_context_parse` can set it as the summary? Similar to what we do in rpm-ostree.", "pred": "builtin-remote: Fix typo in help text"}
{"gold": "This states very clearly that this is a derivative of Chrome and not Chromium. Do we need to extract an abstract `ChromiumCommandExecutor` and have both Edge and Chrome derive from that?", "pred": "Fixing javadoc link"}
{"gold": "it seems to me, the issue lies on `isEnum()` itself, returning false for something that is an enum. I'd rather change it there than here.", "pred": "Fixing a bug in the CompareObjectsWithEqualsRule."}
{"gold": "Please use `{}` instead of `dict()`", "pred": "Fix typo in qute scheme handler."}
{"gold": "I have concerns about using this in more places before #3278 - I'll take a look at that again shortly.", "pred": "Fix import"}
{"gold": "new field needs to be asserted", "pred": "fix test"}
{"gold": "when send log failed, why update the last sent log id?", "pred": "Fix a bug in the host log appender"}
{"gold": "what was the problem with the previous order? `prepend` comes conceptually before `append`, i.e. `insert before` should be before `insert after`, I think", "pred": "Fix Tuple0 javadoc"}
{"gold": "Why is this necessary? Could you provide some context?", "pred": "Fixing the comment for the backup status"}
{"gold": "Is there a recommended quote style for attributes? I see single and double here, double further down.", "pred": "Added missing import"}
{"gold": "Please use an atomic bool.", "pred": "Fix race condition in session_test"}
{"gold": "Consider naming this class `SpanExtensions` to follow C# conventions.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "FYI @lucaspimentel and @colin-higgins since you have already approved, I wanted to point out this required change. By fixing `FrameworkDescription` to use the correct logger, it created a cycle between these two static constructors, so I'm removing this log line and delaying it to when it's actually constructed later in the Tracer. Let me know if you find that acceptable or have any suggestions.", "pred": "Fix typo in FrameworkDescription (#1005)"}
{"gold": "Ah, so we are going to need to update node/host files for this to work?", "pred": "(maint) Fix typo in vcloud pooling"}
{"gold": "This code is new and not tested well. While we may drop the log level before we ship 4.0, right now this is extremely helpful to users.", "pred": "Fix typo in Container class"}
{"gold": "used named path (`proposals_path`) instead?", "pred": "Fixing ObservationsController"}
{"gold": "Am I misreading something, or is there a mismatched parenthesis here? Please let me know whether or not this is cause for concern -- just wanted to be totally sure before merging, since I can't test this from here. Thanks!", "pred": "Fixing a bug in the Sierra translator"}
{"gold": "Might we want a hook to allow emitting metrics or logs in the case of a permitted empty service header response (or similar UpdateSpanWithErr on empty service header in response if strict enforcement is desired by the caller)?", "pred": "Fix typo in outbound.go (#118)"}
{"gold": "if using dict.get, this could just be `kwargs.get('protocol', 'https')`", "pred": "Fix docstring for AzureBlobClient (#1006)"}
{"gold": "Add docs to the new methods here", "pred": "fix: remove unused method"}
{"gold": "what does it mean enabled?", "pred": "Fix memory limit pruning"}
{"gold": "Getting an error when calling with db.execSQL (in sqlcipher 4.3.0, pragma returns ok).", "pred": "Fix for SmartStore.changeKey()"}
{"gold": "Maybe we could remove `\" \" + ctx.Tr(\"dashboard\")` completely?", "pred": "Fix typo in dashboard.go (#1105)"}
{"gold": "Simple Storage **Service**", "pred": "Update copy_object_encrypt_copy.rb"}
{"gold": "Let's add some assertions here to ensure we don't panic. Length of results. Conditionally cast second result to error.", "pred": "Fix json handler example"}
{"gold": "Where did we take this default from?", "pred": "Update KestrelServerLimits.cs"}
{"gold": "Let's move these down to be after all required arguments rather than in between.", "pred": "Fix typo in baseSelectors.js"}
{"gold": "Should we just null the Map and let the GC handle the memory? Clearing just removes items, but not capacity, so this would leave some memory on the table.", "pred": "Fix for #1006: FlatBuffers.Net.Tests.TestTypes.TestTable.TestTable() failed"}
{"gold": "did you mean to delete this line?", "pred": "Fix typo in comment"}
{"gold": "Should we use logger instead?", "pred": "added a method to get the datasetfieldtype of a datasetfield"}
{"gold": "I think it would be preferred to do `expect(helper).to be_analytics`", "pred": "Fix analytics_helper_spec"}
{"gold": "Actually, I think it's okay to just change to `if isinstance(key, (str)) or is_list_like(key):` and `key = list(key) if is_list_like(key) else key` for simplicity for now.", "pred": "DOC: Fix typo in DataFrame.loc docstring (#22155)"}
{"gold": "If there any other tests, I would make it optional there also.", "pred": "Fix resetor_test.go (#1002)"}
{"gold": "This can be removed too, right?", "pred": "Add routes for new pages"}
{"gold": "If you're going to allow people to specify multiple SMTP servers, you should also properly export/import them.", "pred": "Fixing bug in settings export"}
{"gold": "nit: Can we prefix these variables with `AspNetCore`?", "pred": "Fix typo in CpuPercentage metric name (#1007)"}
{"gold": "Can this also include a quick test for transpiling by name?", "pred": "Fix YAML plan spec"}
{"gold": "This TODO can be removed", "pred": "fix(client): fix typo in client_rest.go"}
{"gold": "can we make tabAccessibilityIdentifier = null as default?", "pred": "Fixing namespace"}
{"gold": "Should we print this error?", "pred": "fix: shutdown pusher before processor"}
{"gold": "For which reason do we need to convert this to int here?", "pred": "fix bug in multiclass_nms"}
{"gold": "FWIW, wondering if the error is interesting here (I actually arrived at this code initially to change `supportsFreezer()` to return a `bool`", "pred": "Fix typo in freezer_unsupported.go"}
{"gold": "Does this still need to be a partial? is the intention down the line to move back towards a conditionally different title?", "pred": "Fix typo in plan title"}
{"gold": "seems like `RegistryURL` is missing? Same for a few other places that create `archer.Environment` below.", "pred": "Fixing test"}
{"gold": "Are these imports needed?", "pred": "Fix import"}
{"gold": "I think you can remove the `(isIE11 ? it.skip : it)(` above, if you're going to skip the test this way.", "pred": "test(text): add test for text.formControlValue"}
{"gold": "IMO we should instead fix the above call to do `long actualChecksumIn = Long.reverseBytes(in.readLong());` to get the actual checksum value? This way the below error message would also be correct?", "pred": "Fix a bug in CopyOneFile."}
{"gold": "I think we also need something similar for `rebuild-index`?", "pred": "Fix typo in prune.go"}
{"gold": "I think convention is snake case for import naming?", "pred": "Fix import path in server/cli/run.go (#1007)"}
{"gold": "i think haspk is false?", "pred": "DB-1100: Fixing the bug in the index scan for the case of double read"}
{"gold": "you should add this to the cover command too (but let's have a more general convo about whether it's a flag or config option)", "pred": "Fix typo in test_flags.go"}
{"gold": "instead of passing in pointer to empty struct, we should make it optional and support passing nil and use default cfg if it is nil.", "pred": "Fix history archiver test (#2015)"}
{"gold": "A fair bit faster, although still not great, hence also adding a hashkey.", "pred": "fixing bug in hashable json"}
{"gold": "If we're going to leave this in here, how about we at least pull it into partial?", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "This `context` is used correctly, there is nothing left TO DO.", "pred": "fix: testctl install"}
{"gold": "If `docs` is an empty array there will be an error", "pred": "fix(countDocuments): fix countDocuments"}
{"gold": "Is it really necessary to have the user specify this, or can the reverse proxy infer QUIC from the upstream's Alt-Svc headers?", "pred": "fix: static upstream host"}
{"gold": "just remove the entire variable.", "pred": "Fix typo in comment"}
{"gold": "Maybe we should put that in the option description?", "pred": "(maint) Fix typo in --boltdir help text"}
{"gold": "Why do we need to make this optional? Isn't the idea of the builder that if you don't need this value you just don't call the `keyFilePath ` method?", "pred": "Fix typo in BesuNodeConfigurationBuilder"}
{"gold": "Shall we do the same for ORC and Avro?", "pred": "Fix typo in Parquet.java"}
{"gold": "Should be a space between line", "pred": "Fixing the copyright header"}
{"gold": "if not behind interface then equally we can use SecureRandom.GetBytes directly, otherwise let us push it behind ISecureRandom so we can test with this class wherever used", "pred": "Fixing a bug in the key generation"}
{"gold": "Probably will undo this change for now, as I'm just targeting Weekly Iteration in this PR.", "pred": "Fix video tutorial image"}
{"gold": "Unused parameter warning? How comes we did not catch that before? In any case please open another PR for this.", "pred": "Fixing a typo in the test."}
{"gold": "I recommend move all openimage related logic to a new function", "pred": "fix a bug in average_precision (#395)"}
{"gold": "We shouldn't have a bool for this. If there is a path passed, then we use it. Resource may or may not be empty.", "pred": "fix(cgroup): fix cgroup type"}
{"gold": "I like how you used the count on the translate call to handle this.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Do we need to do this from the outside, or is there a spot in the handler code where we can do this automatically? (I haven't studied it closely yet... just wondering if you've already thought it through or if it's worth taking a closer look).", "pred": "[BUGFIX] Fixing the query builder to use the correct query string"}
{"gold": "[Checkstyle] INFO: Using the '._' form of import should be avoided - java.util._.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "So, why everything is in memory but the permission backend?", "pred": "tests: Fix tests for cliquet"}
{"gold": "Are you sure it should be null and not an empty List?", "pred": "Fix typo in UiSetupWizardImplementation"}
{"gold": "Unfortunately I think the assumption of \"empty\" means the default dependency section is not correct. For a project.json file the default dependencies section is a shared section between all the different target frameworks and our TargetGroup being empty may map to many different target frameworks so they aren't really equated.", "pred": "Fixing a typo in the comment"}
{"gold": "This test was verifying the wrong thing.", "pred": "Fixing test"}
{"gold": "pls pr a name change fro muon here too separately.", "pred": "fix(build): fix build script"}
{"gold": "nit: we can use `defer opts.spinner.Stop(\"Error!\")` after l.180 to make it slightly neater", "pred": "fix: remove unused code"}
{"gold": "This is declared in the wrong block", "pred": "Fix typo in comment"}
{"gold": "In fact it would be useful for debug, i prefer combine them into one debug level log.", "pred": "fix bug"}
{"gold": "We would need to localize them eventually too, just FYI", "pred": "Update alertDefine.js"}
{"gold": "It looks like the proto code needs to change the function name from set_name to set_type to be consistent.", "pred": "Fixing bug in sequential model"}
{"gold": "I think we can avoid using this pattern for this use case.", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Could you please change this to `#ifndef __linux__`? That's when we use our own implementation instead of `posix_spawnp`.", "pred": "Fix missing include"}
{"gold": "Nit: put the `&&` on the previous line so that a reader knows that there's more to the statement at a casual glance.", "pred": "Fixing a bug in NodeStatus.hasCapacity"}
{"gold": "Technically the \"right\" variables to use would be the ones in `libgit/autogit_node_wrappers.go\", which define how the tlf types map to subdirs for autogit specifically. (They would have to be exported.) But this is fine too I guess, just a little dirtier.", "pred": "Fix typo in comment"}
{"gold": "Should there be a template or something associated with this email? Right now it's identical to `notification_for_approver`", "pred": "Fixing the mailer to use the correct from_email"}
{"gold": "i hope there is some extension in phpstan for this", "pred": "fix slider controller"}
{"gold": "We don't store empty dictionary entries anymore: they bring no benefits, only trouble.", "pred": "Fixing a bug in Dictionary."}
{"gold": "Optional: This function is C++ specific and could be declared as `static`.", "pred": "Fix typo in cpp_generator.h"}
{"gold": "we can't remove functions as that would introduce backward compatibility issues in our java client. So we should also have a function with the original arguments: ` public Roles getRoles(String domainName, Boolean members) { return getRoles(domainName, members, null, null); } ` For the Go client we don't have a wrapper so no option but to update your client code as necessary, but for java we have the wrapper thus we always maintain backward compatibility", "pred": "ZMSClient: add missing @Override annotation"}
{"gold": "I'd recommend keeping this in `warn_deprecation` and not adding an override of `warn`.", "pred": "Fix deprecation warning for Ruby 2.7"}
{"gold": "I think we should use a `blitz` bin instead", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Why not make the ``derived_vdims`` flag (or similar, ``validate_vdims`` maybe?) an explicit argument to ``validate``?", "pred": "Fixing typo in error message"}
{"gold": "was it not possible to do this at the filter or porx driver layer? We typically try to avoid driver-specific things in the SDK layer", "pred": "Fix a bug in create volume"}
{"gold": "please update the year. it can be setup in intellij template.", "pred": "fixing the package name"}
{"gold": "what's the use-case for this?", "pred": "Add test for SLF4J logging with multiple arguments"}
{"gold": "nit: `as_index must be an boolean` -> `as_index must be a boolean`", "pred": "DOC: Fix typo in groupby docstring (#24548)"}
{"gold": "What is the goal of that method ? And what are `$currentVersion` and `$newVersion` ? Are they Thelia or Module version ? :)", "pred": "[FIX] BaseModuleInterface: add missing method"}
{"gold": "Is there an advantage to this vs setting `this.version` in the constructor? Cleaner this way, at the top?", "pred": "fix: remove unused import"}
{"gold": "Fix for URISyntaxException.", "pred": "Fixing the login url"}
{"gold": "Would be good to UT this case", "pred": "Fix bug in route update handling"}
{"gold": "Why we need to add this?", "pred": "chore: update eslint config"}
{"gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "pred": "Fixing test"}
{"gold": "This is ok to change since I believe that these were added just in main and not in public release.", "pred": "fix(api): add missing fields to JSInfo (#1581)"}
{"gold": "Not needed in this PR, just want to make sure people think about this (maybe make an issue)? This is a lot of strings in a row. It will be hard/impossible for someone reading the code to see that everything is in the correct position. I recommend creating a struct instead of passing seven strings in a row. A similar problem exists on most of the `MakeFoo(...)` style methods in this change.", "pred": "Fix import"}
{"gold": "_jaw drops_ I would have sworn I wrote those lines. Good catch.", "pred": "Fix bug in SarifLogger where we were not writing the run.endTime property."}
{"gold": "This needs to be tested.", "pred": "fix(axe): remove unnecessary call to axe.configure"}
{"gold": "I believe you're missing the comparison after 'be'", "pred": "Fixing the embedded one spec"}
{"gold": "move 103~105 to in front of 97?", "pred": "fix: typo"}
{"gold": "Lots of unnecessary imports left in this file.", "pred": "Remove unused import"}
{"gold": "Does this actually produce different code?", "pred": "layers: Fix typo in ValidateDescriptorSetBindingData"}
{"gold": "This should account for whitespace. Simply putting `.trim()` on the attribute value should do.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "I don't think we need these. Simpler just to put `routetable.TargetType...` inline below.", "pred": "Fix typo in comment"}
{"gold": "Nested if statement. You can merge both statements nested together to create one", "pred": "Fixing the port detection for S3"}
{"gold": "Nitpick: add a space after the comma. Also, we should consider that the format of the version could change in the future so we could get something that is not a parsable integer.", "pred": "Fix test"}
{"gold": "For your reference in future, I sugguest to use the `ASSERT_*` family.", "pred": "fix test case"}
{"gold": "no need to import `fmt/format.h` here since the `KimInit` class is derived from `Pointers`. Any class derived from `Pointers` can assumed that `lmptype.h`, `mpi.h`, `cstddef`, `cstdio`, `string`, `utils.h` and `fmt/format.h` are already included through `pointers.h`.", "pred": "Fixing include"}
{"gold": "Can we have prefix of `OPENEBS_IO` e.g.: `OPENEBS_IO_INSTANCE_NAME`", "pred": "fix(upgrade): fix import path for castemplate"}
{"gold": "Might as well fix these bare returns by making them `return errors.New(...` directly.", "pred": "folder_branch_ops: add GetOrCreateRootNode"}
{"gold": "we can use import here", "pred": "Fix typo in Benchmarks"}
{"gold": "thx for removing these", "pred": "Fix echo example"}
{"gold": "I snuck this one in as well as checkstyle crashing (on files from resources) caused an unfinished xml to be written, and it wasn't obvious where that XML was", "pred": "Fix typo in XmlReportFailuresSupplier"}
{"gold": "How is this different than \"good case\"?", "pred": "Fix test"}
{"gold": "the last parameter name should be `serviceName` as is in the implementation  ", "pred": "fix: typo"}
{"gold": "@ftomassetti - okay, this is a little meh.", "pred": "Fixed test"}
{"gold": "Note, changed initial capitalisation of this for consistency. Can do it the other way around too if that'd be better. :wink:", "pred": "os: fix comment typo in os_unix.go"}
{"gold": "hey, aren't we supposed to be passing in two parameters here?", "pred": "fix(axe): fix axe.source"}
{"gold": "please keep alphabetical ordering :)", "pred": "fixing require path"}
{"gold": "Selenium must compile against Java 6. Revert this line.", "pred": "JasonLeyba: Removing unused import."}
{"gold": "what is that `\"\"`, the adapterType? can you add `\"\" /* adapterType */`... in other places as well... might be cleaner if it's a pointer or some varargs at the end but don't have any strong preference..", "pred": "Fix typo in pullsubscription reconciler (#1006)"}
{"gold": "This check is a little odd, and will still mess up with empty strings `''` because empty string is falsy. Can we change this to `|| _this.getValue(path) == null`?", "pred": "fix(document): don't set default on _id"}
{"gold": "Just a minor suggestion: If you `parseInt` when you access the attribute then you shouldn't have to do it twice in the ternary.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "This change in particular is strange. I'm not sure why it would now be necessary. The previous default would've been true, and the default behavior without a new net-ssh version should be unchanged.", "pred": "(maint) Fix typo in spec"}
{"gold": "Why is that? Should be redundant as the default value exists.", "pred": "Fix typo in BatchActionFormModel"}
{"gold": "Are all fields beginning with \"Debug\" automatically `;local` ? (I guess so, but just checking.)", "pred": "Fix typo in comment"}
{"gold": "While I think it makes sense to update the mapping programmatically, I don't see much value in exposing it as part of the table API. We want to keep the Table API small, so if we can handle this by using a separate API that consumes and produces JSON, then that is preferred. Also, we may have more than one mapping in the future, so keeping this decoupled also helps out for those use cases. For now, let's build a utility class to perform these updates. We can always add this to the public API later if we choose to.", "pred": "Fix javadoc"}
{"gold": "We would want ssmp to wake up every 3 seconds if there are no other requests to it and do some cleanup tasks. So, it is not clear why do you want to set this to 0.", "pred": "Bug 12888: Fixing a bug in SsmpGlobals::work()"}
{"gold": "Is this really necessary? I would expect these types to be included with the loop below.", "pred": "Fix typo in comment"}
{"gold": "You could do span<byte> and it's magic of typecast to int for better efficiency", "pred": "Fix Jaeger exporter (#1085)"}
{"gold": "Looks like you've covered `-webkit-transform`, but what about `-ms-transform`?", "pred": "fix: remove console.log"}
{"gold": "Is there something missing from the message here?", "pred": "Fix for #1089 - NotifyDataSetChanged is not called on the main thread"}
{"gold": "Hmm, what does this syntax mean?", "pred": "fix import"}
{"gold": "should this be callerTypeTask?", "pred": "Fix typo in comment (#2019)"}
{"gold": "Currently update is set as @plan.editable_by?(@user.id) Which one is the correct behavior? I can see a case for only owners/co-owners to be able to set visibility, test status, and other plan details", "pred": "Fix typo in PlanPolicy"}
{"gold": "Maybe make it configurable? Or store the actual level index in DB, making this binary search obsolete?", "pred": "fix: remove unused constant"}
{"gold": "Nit: this file doesn't need to change. Can you revert this to avoid git conflicts?", "pred": "HIVE-19970: TestHiveTableBase.java fails with NPE (<NAME>, reviewed by <NAME>)"}
{"gold": "There's no reason for this to be a callback now technically but as per our tech decision, we want all handlers to use `useCallback` now", "pred": "Update HelpMenu.js"}
{"gold": "This isn't strictly part of this PR, but could you move `multiSigString` from `crypto/multisig.go` into this list of `HashID` values? Now that we have other things being hashed into addresses (specifically, these new logic addresses), it's important that the hash input for multisig addrs is domain-separated from logic addresses.", "pred": "Add HashID for NetPrioRequest"}
{"gold": "nit: you could have named it just \"TestCase\" (if django's TestCase was imported differently)", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "the bridge here isn't defined as an accessor / reader to try mask it better. So you need to directly call the iVar `@bridge` here.", "pred": "Fix typo in comment"}
{"gold": "All the callers of `ExtractSomeIfAny`, always pass `true` to `synthetic_value`. Can we get rid of the extra argument?", "pred": "[Swift] Fix a typo in a comment"}
{"gold": "Better to use the absolute path.", "pred": "fix: remove unused import"}
{"gold": "this is 16 hours, is that enough?", "pred": "increased channel expiry buffer to 3000"}
{"gold": "  removing boilerplate. You could also add a `StartSpan` with varargs to inline string attributes.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Can you replace these single letter variables with full names?", "pred": "fix: ethapi backend"}
{"gold": "At first I wasn't sure, but now I think I'm sold on making PrepareRequest an action over adding a state object to the context.", "pred": "Fixing ConnectionFilterContext to be public"}
{"gold": "Would it be too greedy to preg_replace `VuFind (\\d+\\.?)+` with `'VuFind ' . $this->to` anywhere in the string? This would update something like 'Finna (VuFind 7.1.0)' as well. Just a thought, please disregard if you'd like to keep it as is.", "pred": "Fix upgrade script to work with new config"}
{"gold": "BTW for brevity, you can remove `getZkStateReader().` here and elsewhere since ZkController has a convenience method for the cluster state.", "pred": "SOLR-4806: Fix typo in javadoc"}
{"gold": "If there are no manifests, then entries should be `CloseableIterable.empty()`, not the manifest iterable. That doesn't need to be closeable.", "pred": "Fix FindFiles to use the correct snapshot"}
{"gold": "this class should be named `ArrayInitializationVerbosenessTest` to work", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Do we want to allow users to disable `console` as well? The schema currently says that it only permits a hash for `console`.", "pred": "(maint) Fix rubocop warning"}
{"gold": "It would be very helpful to describe succinctly either inline or by linking to an issue going into depth why each test is not working. If we merge like this your knowledge of what is going on is lost and other people in the code need to do a ton of reading before understanding when/how/if we should unskip.", "pred": "test: fix test"}
{"gold": "As this is a `useEffect` this could be a cause for concern! Note that `useEffect` re-runs when a dependency changes **not** when a dependency is truthy (the previous code does look a bit like it's expecting that)", "pred": "Fix: LegacyAdSenseDashboardWidgetOverview should not render if there is no data."}
{"gold": "Should we be doing this with `make_unique` or something?", "pred": "Fixing typo in comment"}
{"gold": "we don't want to set default values for this. Since it is the actual email, we want to make sure we are always passing in the `user` and `proposal` . we have a default value of `nil` for modifier because sometimes will update a proposal via `rails console` in which case there will be no recorded modifier.", "pred": "Fix proposal mailer"}
{"gold": "Yes this import was in the wrong place, but should ideally be in the first list of imports (among `go/build`, `go/token`, etc.). You may move it there, or just revert this change as it's actually unrelated.", "pred": "Fix import"}
{"gold": "It's unnecessary to duplicate the `name`.", "pred": "Fix typo in StrictUnusedVariable"}
{"gold": "this was a mistake when adding phpstan strict plugin", "pred": "Fix CS"}
{"gold": "Nit: I think it should be `to handle` here.", "pred": "fix: \u4fee\u590ddiffChildren\u51fd\u6570\u4e2d\uff0c\u5f53oldChildren\u4e3anull\u65f6\uff0cnewChildren\u4e3aundefined\u65f6\uff0c\u4f1a\u5bfc\u81f4\u62a5\u9519\u7684\u95ee\u9898"}
{"gold": "Please don't make unrelated changes or let your tools make unrelated changes.", "pred": "Fixing a bug in the IMAP search"}
{"gold": "`numAccounts` is a global variable (from `gochecknoglobals`)", "pred": "fix: typo in account create cmd"}
{"gold": "Is the ID correctly normalized at this point?", "pred": "Fixing plugin manager"}
{"gold": "if 0 is a special constant meaning \"no limit\" let's make it a constant and name it correctly :)", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Curious about the reason behind this change", "pred": "Fix typo in comment"}
{"gold": "wait, i thought the cborstore was for state tree?", "pred": "fix: remove unnecessary log"}
{"gold": "This logic is now duplicated here and in `_delete_temporary_files`... Maybe do it all at once - find temp files, delete them, and fix the logical keys?", "pred": "Fixing the package build"}
{"gold": "How about name it with NullResponseTypeProcessor", "pred": "fixing import"}
{"gold": "Maybe `Log::Fatal` here? `[LightGBM] [Fatal] Check failed: feat_is_unconstrained at ...` (and kernel death in case of Jupyter Notebook) seems to be not so informative and user-friendly.", "pred": "fix a bug in dataset_loader.cc"}
{"gold": "Not sure I like the name ``_apply``. Even though ``_process`` is supposed to process elements already, how about ``_process_element`` which processes elements, *excluding* Overlays/NdOverlays.", "pred": "Fixing a typo in the decimate docstring."}
{"gold": "Let's use this constant when ASG is created as well (currently hardcoded).", "pred": "fix: remove unused import"}
{"gold": "Oh is `bucket` actually higher cardinality than `eventname`?", "pred": "Fix typo in package_hashes.sql"}
{"gold": "You can't rely on QtWebEngine being available - but why do you need to import this here at all?", "pred": "qutebrowser.browser.webkit: Remove unused import"}
{"gold": "How did you determine these - and how can we be confident that nothing is missing?", "pred": "Fix typo in appveyor.yml"}
{"gold": "What is this page going to do that is different than the products index we already have?", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Couldn't you just write this as an if/else or a guard clause like on line 87? Just seems a bit weird doing this conditional assignment for essentially an if/else.", "pred": "Fix Firefox version detection"}
{"gold": "Is this intended to be here? Seems it belongs to a different PR.", "pred": "Fix typo in comment"}
{"gold": "These changes, while harmless, were no longer needed with newer versions of System.Console thanks to @ianhays", "pred": "Fix #1050: Console runner does not work on .NET Core 2.0"}
{"gold": "Umm... this isn't relevant to this PR", "pred": "fix import error"}
{"gold": "While All make some sense here it doesn't make a lot of sense in the SkipOnFramework context. I wonder if we really need to expose anything more here. You can just blindly use 0.", "pred": "Fix typo in enum name"}
{"gold": "Actually, this is not correct. Package `cmd/bee` doe snot have any notion of commands or even libraries used for them. It is as simple as possible, just calling the function from `cmd/bee/cmd` which actually implements commands.", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "This change is causing tests to fail because users sits at `/app/users`, not `/app/admin/users`", "pred": "Fixing the router"}
{"gold": "Could you provide more information on what exactly each of those three options do?", "pred": "Update config.php"}
{"gold": "Why this line break?", "pred": "Fix LinuxTraceSession.TraceFilePath"}
{"gold": "We're importing this twice with different aliases.", "pred": "Fix import path for admissionregistrationv1"}
{"gold": "We should avoid adding a pandera dependency to Dagster itself.", "pred": "Bump protobuf from 3.13.0 to 3.14.0 (#108)"}
{"gold": "Can be replaced with `org.jkiss.utils.ArrayUtils#add`.", "pred": "#10852 fix compilation error"}
{"gold": "While we're here, this line (and a few others) should be `customThreadPool.submit(() -> IOUtils.closeQuietly(overseer);` I have no idea why we're creating a collection and a stream for a single object.", "pred": "Fix typo in ZkController"}
{"gold": "Should these restrictions also be reflected in the API docs?", "pred": "Fix typo in validation error message"}
{"gold": "What about the request headers if someone uses `request_header`? :thinking:", "pred": "Fix typo in comment"}
{"gold": "Verify that external-dns allows setting this parameter multiple times (that it's not \"last one wins\").", "pred": "Fix typo in external-dns deployment"}
{"gold": "Maybe 2 host/ip values could be used in the example?", "pred": "Fix typo in docker.networks.name"}
{"gold": "We're only testing `RateLimiter.Allowed(Span)`, so I think we can use a mock `ITraceContext` instead of a real `Tracer` or `TraceContext`.", "pred": "Fix typo in RateLimiterTests (#1010)"}
{"gold": "IMO, this is the wrong way to associate a model with a trainer... Why the string when you actually have a trainer object?", "pred": "Fix typo in model_builder.cpp"}
{"gold": "Wondering if we can directly put types here & for other similar ledger_processor items like rai::block_type::state", "pred": "Fix ledger_processor::block_impl"}
{"gold": "As `DeleteFiles` is not only used for prune this function deserves its own file. Maybe something like `delete_files.go` or `parallel.go`?", "pred": "prune: fix typo in comment"}
{"gold": "It should be simplified character. `` -> ``", "pred": "Update validation.php"}
{"gold": "I am pretty sure it breaks the visitor pattern, visitor should have no knowledge about the structure of what it is visiting or control over visiting mechanism", "pred": "Fixing typo in TrieVisitor interface"}
{"gold": "'A' instead of 'An' here", "pred": "Remove unused import"}
{"gold": "Can you flip it back (here and in other places)? It is more natural to represent \"10 seconds\" as `10 * time.Second`.", "pred": "Fixing import path"}
{"gold": "Why was this necessary? You should just use the `dask_classifier` defined below this. With this change, you'd only be doing the local predict on arrays each time, but we want to test on all of DataFrame, Array, and sparse matrix.", "pred": "[python] Fix test_classifier (#3797)"}
{"gold": "To me, this is sort of weird to have a completely separate page for this. Can we extract the different stuff (github, videos, downloads) presentation from the top of `app/views/purchases/show.html.erb` and reuse it on this page. I worry that we'll change things with fulfillment or copy and have to change it in multiple places.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Please revert the lines above. Not touching unrelated code keeps the git history clean.", "pred": "Remove unused import"}
{"gold": "`short_version` and `version_info`", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "This is supposed to be `status`. Why did you change this?", "pred": "Fix comment"}
{"gold": "I will change all of these at some point next week.", "pred": "Update package.md"}
{"gold": "I made this change because, while trying to debug, in Visual Studio, the `IntegrationSignatureTests`, this property getter was hit and interfered with my ability to complete the debugging.", "pred": "Fix typo in comment (#1112)"}
{"gold": "nit: `\"Unexpected error while calculating: unable to convert %T to %T: %v\"`", "pred": "fix(health): fix health check for deployment"}
{"gold": "I'd actually recommend not putting this in the `SampleConfig`, it's intended more for properties that are inherent of the discovery format. Add a method `getSampleAppName(String apiTypeName)` to `SampleNamer` and override it in the language specific `SampleNamer`s if needed. Then assign it in the transformer.", "pred": "Fix typo in javadoc"}
{"gold": "Do we need to export these new functions? I thought the plan going forward was to keep util imports separated to make circular imports less likely and possibly do better chunk splitting. Since only new code references these files, we can scope the import to the specific files.", "pred": "fix(index): export all helpers"}
{"gold": "Rails will autorequire `acts_as_editable` once it encounters the constant `ActsAsEditable`. Thus if we move `ActiveRecord::Base.send :include, ActsAsEditable` from _acts_as_editable.rb_ to this file, the require line will not be needed anymore. Instead of requiring the file ourselves, we will let Rails do it for us. This fix will also remove the need to explicitly require `acts_as_editable` in _mock_active_record_base.rb_.", "pred": "Update from Subversion r706887"}
{"gold": "I think we should name this `grpcMethodName` or similar. That is what this refers to, right? The fact that it is upper camel is an implementation.", "pred": "fix: remove unused import"}
{"gold": "What if .. appears, but not as the first character, eg \"errors/../../../../../../../../../../../\"?", "pred": "fpga: fix build error on 32-bit platforms"}
{"gold": "Thanks, this should make things a bit easier for people who pick up the codebase but aren't a `curation center`", "pred": "fix typo"}
{"gold": "why not removing it?", "pred": "Fixing the default timezone id"}
{"gold": "same nit here: maybe word as - \"disables validation of the temporal cluster's server certificate\"", "pred": "Fix typo in flag name (#100)"}
{"gold": "Nit: other statements use all caps for SQL reserved words. Should this be `SHOW TABLES`?", "pred": "[FLINK-11158][table-planner-blink] Fix TestFlinkCatalogDatabase"}
{"gold": "Do we need this? isLuaIdentifier() is used not only in extract_next_token() but also in extract_prev_toke(). I wonder whether the change for isLuaIdentifier() has an impact on extract_prev_toke() or not. If you are not sure, keep isLuaIdentifier() as is. If you are sure, could you write your conviction to the commit log.", "pred": "Fix a typo in the comment."}
{"gold": "This line should actually be: `if c.KubernetesProvider == config.ProviderAKS && c.Wireguard.EncryptHostTraffic {` because we only need to tweak the MTU like this on AKS.", "pred": "Update comment"}
{"gold": "Do we need to change this flag as well?", "pred": "fix(cmd): fix typo in description of the --env flag"}
{"gold": "Including the source twice here makes the filesize jump to 432kb. Is there any way to minimize repeating it?", "pred": "fix(grunt): fix gruntfile"}
{"gold": "This should only be sent if the driver is speaking to a W3C conformant remote, so we need an if-condition check like we have in the Python bindings.", "pred": "JasonLeyba: Fixing a typo in the switchTo().window() method."}
{"gold": "Only one line of code? What a simple issue!", "pred": "(maint) Fix typo in comment"}
{"gold": "Conceptual question: why do history and matching need throttler at all? Shouldn't throttling to be handled on FE only?", "pred": "Fix a bug in the rate limiter"}
{"gold": "Would this be possible: `addCNP` has already processed the CNP to an internalNP, just hasn't added this internalNP to the `internalNetworkPolicyStore`. In this case, `reprocessCNP` will skip processing this CNP and `addCNP` will just add the \"old\" internalNP to `internalNetworkPolicyStore`.", "pred": "Fix a typo in comment"}
{"gold": "Minor: you can access `current_user` in here directly - don't need to pass it in. Unless you prefer passing it explicitly?", "pred": "Fix carts helper"}
{"gold": "What is the purpose of `&` on this line?", "pred": "Fixing the sort order of the attributes hash."}
{"gold": "See above, the `isValidWebDataStreamID` implementation from before is actually correct. What we need here instead is a new `isValidMeasurementID` function.", "pred": "Update isValidWebDataStreamID.js"}
{"gold": "Should be an error... it is important for the admin of the server attempting to create the leafnode connection to see the error asap.", "pred": "Fix typo in comment"}
{"gold": "Could you split these conditions up over multiple lines please.", "pred": "Fix for #1008: NVDA does not speak the placeholder text of a combo box when it is focused."}
{"gold": "I think we can just change this to `Split` instead of `SplitN`. I don't think we need to limit the number of parts in the tag.", "pred": "fix: tag parse"}
{"gold": "So this is actually a mistake that I introduced without realizing it, and have known would need to be fixed when we get here  . The format of the ports directive is \"host:container\". We only want the host port to change, not the internal container ports. The ports variable probably needs to be a map which maps external -> internal ports.", "pred": "Fixing the docker-compose file"}
{"gold": "An alternate approach would be to always initialize shardInfo with a dummy (non-nil) value, which could protect against other uses before it's initialized (I couldn't find any though). But I can change it to do it that way instead.", "pred": "Fix typo in comment"}
{"gold": "Maybe we can just put the entire `DirEntry` in here? I can imagine it might be useful for debugging to get the block ID/refnonce, encrypted size, key gen, data version, etc. What do you think?", "pred": "Fix typo in session_info.go"}
{"gold": "For the commit message: The paragraphs seem to be out of order? The `Would not work because` refers to the stuff before, but there is a `This may seem pointless, but` in-between.", "pred": "Fix typo in comment"}
{"gold": "Why did you remove these packages from the prelude, will your new functions not work without this change?", "pred": "fix(flux): add missing prelude package"}
{"gold": "We'd better reserve enough space before using kvKeys to avoid extra malloc.", "pred": "fix(storage): fix a bug in GetProcessor::asyncProcess (#1107)"}
{"gold": "would it make sense to return empty or error if label doesn't exists?", "pred": "Fix GetLocalPVType()"}
{"gold": "Don't penalize everyone with 250ms delay b/c some machines have problems.", "pred": "Fix rmDir on Windows"}
{"gold": "Probably want a space after the second %s?", "pred": "fix SortedCidSet.Equals"}
{"gold": "This seems like an internal error still?", "pred": "Fixing linting errors (#1186)"}
{"gold": "Line is too long. [94/80]", "pred": "Update purchases_controller_spec.rb"}
{"gold": "out of curiosity, why creating another struct to wrap it?", "pred": "Fix typo in comment"}
{"gold": "discipline vs. Discipline? Not sure of which is correct. Also not sure if there is already an existing string const.", "pred": "* Fixed a bug with the discipline timer."}
{"gold": "I believe this will break common resources, as they are defined in a common file, but must generate classes in service-specific namespace, so using protoFile to determine package of the generated class would not work, because common_resources namespace does not match service namespace.", "pred": "fix(common): fix resource name config"}
{"gold": "How about `SPARK_DEFAULT_SERIES_NAME`?", "pred": "Add a comment about the natural order column"}
{"gold": "The other properties are in `commit.status-check`, not `commit.status-checks`. Could you remove the extra `s`?", "pred": "HBASE-14460 [branch-1] Increase default commit.retry.total-timeout-ms to 24 hours"}
{"gold": "Side note: I'd love to see more of these fields exposed on configuration.", "pred": "Fix authentication tests"}
{"gold": "In the case of accounts generated by API clients, what name gets put for the `inviter_name` or `invited_by` record?", "pred": "Fixing the invitation email to use the correct name"}
{"gold": "I think this class is only relevant for updating the QbftConfigOptions based on the transitions config, so probably not.", "pred": "Fixing typo in MutableQbftConfigOptions"}
{"gold": "what is the number thrown by Geth?", "pred": "Fixing the error code for execution error"}
{"gold": "This would still crash on malformed database connection string like \"test\"", "pred": "fix: checkDatabaseConfigMatch"}
{"gold": "it is not an interface, maybe we can move to another package?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Same here. Can we use `this.instance.getSettings()` to get `tableMeta`?", "pred": "Fix typo in comment"}
{"gold": "Not sure whether this validation is useful.", "pred": "libcontainer/cgroups/fs: fix cpu.weight"}
{"gold": "Various things to note here: - Why would `question` ever be falsey (or `None`) here, i.e. why the `if question`? - Why would `question` ever not have that attribute? You set it in `Question.__init__`, so that check does nothing at all (and generally, `hasattr()` should be avoided if possible). - Why do you want to yank `None` (what does that do?) rather than e.g. show an error if there's nothing to yank?", "pred": "Fix for #100"}
{"gold": "If this is needed for testing, you should use `pytest --log-cli-level=INFO` instead.", "pred": "fixing bug in s3select"}
{"gold": "We should drop ipify in all places i guess", "pred": "fix: remove unused import"}
{"gold": "Add explanations around these variables - what do they mean, how they should be configured, etc.", "pred": "fix: remove unused field"}
{"gold": "One thing tho - I would really appreciate any advice on where to move this to, so that it's called on initialisation of the website.", "pred": "Update site_controller.rb"}
{"gold": "To much tabs here (1 tab)", "pred": "Update GauntletConfig.cs"}
{"gold": "This is not maintaining retention time for logs as we are deleting only 1000 entries and we might end up with huge number of rows spanning over multiple months over a period of time if the cluster generates more rows as we are restricting ourselves to delete only 24k rows/day. Like I pointed out earlier a better would be to probably run this clean up every hour with some batch_size in a loop while there are records to be deleted(i.e older than 12 weeks) and committing each batch.", "pred": "fix bug"}
{"gold": "I don't like this helper func :-). Yeah, definitely don't like.", "pred": "fix test case (#1009)"}
{"gold": "Same here. This should remain unchanged. Please, add it back.", "pred": "Update PageSpeed Insights test to use new API response."}
{"gold": "@kvwalker should this method have `ignoreUndefined` supported as an `option`?", "pred": "fix(collection): fix typo in collection.js"}
{"gold": "we dont use a `sugaredlogger` anywhere else in clutch, just curious why were using it here?", "pred": "Fix linting errors in storer.go (#109)"}
{"gold": "Not evident from looking at this diff but the queue is already being cleared four lines below.", "pred": "Fixing a bug in the server callback"}
{"gold": "Why is this a 'transaction' and not in the block header?", "pred": "Fix typo in comment"}
{"gold": "This doesn't fit the abstraction level. Should we have a property bag for extra stuff?", "pred": "Fixing a typo in ConnectionFilterContext"}
{"gold": "Looks like it is pretty easy to miss it when adding new files under `ci`. Hopefully, this doesn't happen too often.", "pred": "Fix build_sdist.py"}
{"gold": "do we really need the `Ready` call if startup fails midway?", "pred": "fix: typo in comment"}
{"gold": "You can avoid changing the code if there are parameter defaults. right ?", "pred": "Fix AddVerticesTest"}
{"gold": "I wonder why the newline disappeared here? I guess we'll merge and see how SauceLabs fares across the supported browsers.", "pred": "fix test"}
{"gold": "I know this is legal, but I prefer we put brackets on our calls", "pred": "Fixed reloadworld command."}
{"gold": "AWS Identity and Access Management (IAM)", "pred": "Update DeleteServerCertificate.java"}
{"gold": "We keep who wrote the code anonymous.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Two things to make the code more error-proof and simplify it: 1. To be safe, this should be: `! isUndefined( decimal ) && ! isUndefined( decimal.value )` 2. The other clause that you changed below can be combined with that since `decimal` isn't used anywhere else, and so there's no point to re-check whether it's not undefined. In other words, this should become: `! isUndefined( decimal ) && ! isUndefined( decimal.value ) && 1000 > number`, and then you can remove the `decimal = decimal.value` assignment and replace it with line 146 (assignment of `readableNumber`).", "pred": "Fix readableLargeNumber"}
{"gold": "Wouldn't composite outbounds compose the transport, such that it would still be represented as a single transport?", "pred": "Fix typo in outbound.go"}
{"gold": "nit: there is no need for a new line here, usually we tend to put an object creation and its deferred deletion next to each other. It helps not forgetting about the cleanup.", "pred": "Fix typo in test name"}
{"gold": "Feel free to use the full notation with my email address: `Maxime Steinhausser <maxime.steinhausser@gmail.com>` :smile:", "pred": "minor #1252 Fix CS (javiereguiluz)"}
{"gold": "This was unused across the codebase", "pred": "Fix typo in comment"}
{"gold": "Should we put in which account we were trying to look up?", "pred": "fix(js): Fixing typo in comment (#1660)"}
{"gold": "either SUPPORTED_TYPECLASS or supported_typeclass. Camelcase only for class names.", "pred": "Add a new inventory type for GCP IAM roles."}
{"gold": "This is not going to work. You need to add a migration to the database.", "pred": "Fix typo in schema"}
{"gold": "Should these methods be renamed in this PR?", "pred": "Fix resumeGroupPlayback"}
{"gold": "we need to include the `metricStreamName` which is invalid, so users know whats causing the issue.", "pred": "Fixing a bug in MetricReaderFactory (#1005)"}
{"gold": "Please run Platform tests `DiaSessionTests`.", "pred": "Fixing a bug in the PDB reader"}
{"gold": "This is debug-build-only: we want a release-build notice. SYSLOG takes the name w/o the MSG and no _STRING. Args are via events.mc specifiers.", "pred": "Fix typo in comment."}
{"gold": "is it possible to have both forms here? I was hoping we wouldn't be introducing more cases where we had to check the upper and lowercase version of URI options.", "pred": "fix(node-mongodb-native): fix parsing of srv connection string"}
{"gold": "Does the name suffix hardcode something? Not clear how changing the name fixes this.", "pred": "Fix typo in benchmark name"}
{"gold": "Is undispatched same as queued? getQueuedFlows?", "pred": "[NCL-4265] Add missing @Description annotation to JmxExecutorManagerMBean"}
{"gold": "See above, same for all similar cases below.", "pred": "Update connection info tests to use `createTestRegistry`"}
{"gold": "Why is this done twice?", "pred": "Fix test"}
{"gold": "This sync can ensure that the condition of the child node is consistent with the parent node, but I still don't understand when the child will be overwritten, and this behavior is not what we expected?", "pred": "Fix typo in comment"}
{"gold": "This was renamed to avoid any confusion with the more general case of debugging via `plz debug`", "pred": "Fix typo in test_environment.go"}
{"gold": "String valStr = (String)val; valStr.substring(0, Math.min(valStr.length(), prefixLength)) Make it clean.", "pred": "Fix bug in Converter.convertUtf8ToBytes"}
{"gold": "Sorry, this still makes no sense.. the value of any union or enum is simply a name integer constant, it has nothing to do with the `BASE_TYPE_` enum. This value should be `0`. In particular: `Every union has the NONE field, which always has value 0`.", "pred": "Fix enum parsing in proto mode"}
{"gold": "Looks like getAzkabanURL() is added after concrete Alerter (Emailer)::getAzkabanURL(), so that Override annotation is needed.", "pred": "[AIRFLOW-118] Fixing typo in Alerter interface"}
{"gold": "The above 3 lines can be written as: `mask = segms[i].astype(bool)`", "pred": "fix bug in base_detector.py"}
{"gold": "File is not `gofmt`-ed with `-s` (from `gofmt`)", "pred": "fix: remove unused import"}
{"gold": "Thought it's good to have this logged down so that we can check the used value in the logs.", "pred": "Update bootstrap.cpp"}
{"gold": "I don't think you can call this optional unless it's a pointer - remove this?", "pred": "Update AWSMachine_types.go"}
{"gold": "@naofum please use `isEmpty`method instead", "pred": "Fix offline mode"}
{"gold": "i think this is unrelated and needs to be reverted. need to discuss at sync.", "pred": "Fix LLVM 5.0 build"}
{"gold": "Are we eventually moving those type interfaces from plugin project to datatype project? If not, then we'd have a dependency from core onto plugins, which seems a little counter-intuitive to me.", "pred": "Fix import"}
{"gold": "Love how we can finally use async/await in the codebase.", "pred": "Fix typo in Connection.prototype.setClient"}
{"gold": "Very minor: this line could be moved to a more narrow scope, inside `if (!representative.decode_account (representative_text))` Other than that, LGTM", "pred": "Fix RPC wallet_representative_set"}
{"gold": "when is this consumed? I'm probably missing it but I can't find it right now", "pred": "Fix comment in connection.go"}
{"gold": "I think we also need to add the rollupGroupExprList() to the cache key. If we rebuild the list above from a ValueIdSet on line 418 above, it is probably going to be in the same order, regardless whether it was ROLLUP(a,b) or ROLLUP(b,a).", "pred": "Fix for bug 10-010120-1101"}
{"gold": "can use `getParamTypeName` instead", "pred": "fix: remove unused import (#100)"}
{"gold": "Why send the parameters? They're accessible directly from `$this->request` so there's no need to inject them in the method", "pred": "Fixed typo"}
{"gold": "Tiny nit: I would prefer `not selected_file` or `len(selected_file) == 0`, as if choose_file starts returning, for example, tuples instead of lists, this won't break.", "pred": "Fixing a bug in the browser plugin."}
{"gold": "How will this code behave with hostnames that contain hyphens?", "pred": "etcd: fix typo in comment"}
{"gold": "I think this is redundant since \"NullForEmpty\" already calls \"Trim()\".", "pred": "Fix #1400: MoleculeAccessionNumbers.ToString() should not throw NullReferenceException"}
{"gold": "Change this to IDs too?", "pred": "Update cloudbackup.go"}
{"gold": "private static final, and it should be located in raidsoverlay, as it's not needed in the plugin. also the name could be a bit better, DC_SCOUT_RAIDS or similiar.", "pred": "Remove unused import"}
{"gold": "attr_value is 128 bytes?", "pred": "Fixing a bug in the perf_attributes parser"}
{"gold": "if it's unpredictable - why uppercase it at all?", "pred": "Fixing a bug in HTTPRequest"}
{"gold": "Please remove all these debug prints. It doesn't look good.", "pred": "fix: fix the error of golint"}
{"gold": "Consumers of this interface should not be required to provide `sampleHeight`. This should be an expected consensus parameter.", "pred": "fix typo in comment"}
{"gold": "I don't believe this is the right fix. If startTime comes after closeTime, then it means some other event triggered invocation of this code path like workflow timeout. In this case we should still try to fire the cron on previous value so we should just return start the delta between startTime and closeTime immediately.", "pred": "Fix typo in comment"}
{"gold": "Not sure if we need tag here, it is an implementation detail in portworx that isn't exposed in openstorage", "pred": "Update cloudbackup.go"}
{"gold": "I wonder if it would be cleaner to refactor all of this similar to the SolrMarc driver, so we have a property with Summon field names associated with types, and we iterate through it in a loop... that way we don't have to repeat the loop code four times with different variable names.", "pred": "Fixing a bug in the Summon class"}
{"gold": "Need the `solrClientCache.close();` further down in the method be removed since a shared cache is now used?", "pred": "SOLR-10066: Fix typo in javadoc"}
{"gold": "according to the PR (schema changes?) these 2 field should be removed?", "pred": "Fix import path in comment"}
{"gold": "Panic here if `exp.Target.StressChaos.CintainerName` is nil.", "pred": "fix: fix the bug of stresschaos (#1371)"}
{"gold": "This allows for some hacks like returning an iterator that matches more docs than the scorer. I liked the previous approach that returned an iterator better.", "pred": "LUCENE-2783: remove commented out code"}
{"gold": "Aren't there already logs for this from the underlying file system implementation?", "pred": "Fix IcebergInputFormat"}
{"gold": "It would be good to have a test in here that demonstrates the new munge functionality; I can help set that up if you're not sure how.", "pred": "Fixing test"}
{"gold": "`retrials` isn't the word you intend. I think you mean `retries` and to that end, can the var name just be `max_retries`?", "pred": "Fixing the kubernetes namespace parameter"}
{"gold": "Value in product should contain 255 characters or less.", "pred": "Fix: Shopware6ChannelForm - Fix attributeProductMetaTitle"}
{"gold": "line is 133 characters (from `lll`)", "pred": "Fix the bug of timeout calculation"}
{"gold": "since we're calling the file .rspec-local, I think we should rename local_options to project_options and use local_options for .rspec-local - WDYT?", "pred": "Fix typo in comment"}
{"gold": "Will we want to refactor this when we drop rsolr 1.x support?", "pred": "Fixing the solr connection to use the new solr_config method"}
{"gold": "should this really be multiple IPs?", "pred": "Fix typo in comment"}
{"gold": "Hmm, is that partial used in multiple places? Maybe we can just move that file in here.", "pred": "Update from Subversion r708872"}
{"gold": "Should be 2014-2016", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Looks like my fault for sure in trying to handle international inputs regardless of locale. I think the correct fix is actually to get rid of TrySplitColumns and use ParseDsvFields instead. It is what gets used in the end, and it already has logic for dealing with quoted fields.", "pred": "Fix #1200: Importing FASTA file with a space in the sequence name"}
{"gold": "similarly here, are the these cursors not being closed when the client is closed?", "pred": "test: fix find test"}
{"gold": "Or maybe `func(args ...string) Policy` to make it dynamic in case of any future policy that may require more than one args.", "pred": "Add comment to staticUpstream"}
{"gold": "Should this happen even if the above failed?", "pred": "Fix typo in comment"}
{"gold": "Please dont change this .", "pred": "Update README.md (#106)"}
{"gold": "There is a strange $b that looks wrong.", "pred": "Fix active_transactions::cleanup_election"}
{"gold": "Is it still important to have `speakEntry` here? It is checked before this value `containerContainsText` is used in the \"General\" section.", "pred": "Fix for #10088: Incorrect speech for table in Firefox"}
{"gold": "It is `$JAVA_HOME/bin`, not `$JAVA_HOME`, which should be added.", "pred": "Fix typo in comment"}
{"gold": "Should move this to within the `#else` block as it's only used there.", "pred": "Fix uuid generation on windows"}
{"gold": "is this a common rule to wait one extra second after ajax? I'm thinking about moving this extra wait into waitForAjax method.", "pred": "Fix typo in ProductListPage"}
{"gold": "Maybe you can correct the typo \"if\" too :)", "pred": "[TASK] Add missing abstract method to AbstractSolrTask"}
{"gold": "I'd prefer a name less chat-specific, since later on we could have other app types that want the same behavior. Maybe `IdentifyAndAllowTrackBreaks`?", "pred": "keybase1: fix typo in comment"}
{"gold": "I think I was involved in writing that caster, but I never fully understood the `import_mpi4py` thing. Why is importing mpi4py still necessary at that point? I would think if the user is passing a communicator from python code, they must already have imported mpi4py themselves, or does that not propagate through into the wrapping layer?", "pred": "Fix MPI4PY communicator conversion"}
{"gold": "This seems like a more interesting change. Maybe we should re-name the PR", "pred": "Fix typo in http_cache.go"}
{"gold": "Nit: implement the methods for these interfaces explicitly in this file for consistency. It can be passthrough.", "pred": "Fix typo in comment (#1108)"}
{"gold": "Not directly related to your PR, but I think here we should create a Type enum (MAP, ARRAY, PRIMITIVE) instead of having 3 flags.", "pred": "fix(csharp): fix csharp common transformer"}
{"gold": "Do you want this to be a stack variable? The work method might return at any time (example: when the parent queue fills up) and then get called again, which would cause this variable to become false again. I'm wondering if this variable should be a member instead?", "pred": "Changes to ExHbaseScanSQTaskTcb::work() to handle the case where the scan is not done."}
{"gold": "You could reserve a const space to save the extra computation.", "pred": "Fix the bug of parsing host key (#1155)"}
{"gold": "Did you consider adding rooted paths like `C:\\ProgramData` and paths with flipped separators?", "pred": "Fix typo in Path.Combine benchmark"}
{"gold": "does this line cause a panic if it is above the if condition ?", "pred": "fix: dns server start error"}
{"gold": "Maybe `LibraryDetailsPanelType` would be clearer.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "minor nit - add \"persist-filesystem\" and \"persist-directory\" into commit message, as its something people may search on (maybe applies to a few other commit messages)", "pred": "Fix typo in comment"}
{"gold": "I verified offline with @jeremyg-lunarg this should be removed.", "pred": "layers: Fix typo in ValidateEventStageMask"}
{"gold": "This should be removed? If not, typo in incldued_wf", "pred": "fix: include workflow name"}
{"gold": "Sorry for the delay on this! It looks like Circle CI isn't running tests on some of the PRs, but this doesn't look like it would work   I might be missing something, but are the tests all passing locally?", "pred": "fix(theme): fix typo in theme.ts"}
{"gold": "Do you think the godoc should mention that all delimiters will be suffixed with `/`?", "pred": "Update caddyfile.go"}
{"gold": "what if I want to load my own, a different, data URI in Private Browsing mode? I do this often on desktop (e.g., `data:text/html,&times;`). admittedly, I wouldn't expect this to be done by a non-developer, but this will certainly cause a minor bug.", "pred": "Fix for bug 708866 - [Android] Navigation bar doesn't show up when navigating to a page with a fragment"}
{"gold": "I remember the sequence number 0 is kept for the data files for iceberg v1, so in theory the sequence number from delete files should start from 1. So setting it to 0 as the default value sounds correct.", "pred": "Fix checkstyle"}
{"gold": "For all these MYSQL queries unsigned is required. I have tested again and without unsigned these queries are failing.", "pred": "Fixing a bug in the image version dao"}
{"gold": "Are there tests for this? What happens when you get to limit?", "pred": "fix(editorNoteStatuses): fix default state"}
{"gold": "Whole thing could be collapsed to `data['config']['transport'] ||= 'local' if target.name == 'localhost'`.", "pred": "(maint) Fix typo in bolt.yaml"}
{"gold": "maybe throw in `&& mServiceConnection.isBound()`, there are cases where the connection might die", "pred": "Fix typo in OpenPgpKeyPreference"}
{"gold": "Can we add Istanbul with this first EIP please? (or as a separate issue)", "pred": "Fixing typo in EIP1234Enabled property name"}
{"gold": "I don't understand this change", "pred": "snapshot: fix typo in comment"}
{"gold": "Let's allow translators for this string to be translated: `self.show_warning(_('Invalid Public key'))`", "pred": "fix: encrypt message"}
{"gold": "This needs to work with `role=form` too.", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "This should be before the if on line 1028, which should turn into an else if", "pred": "Fix #1000: Make sure that the connection is not null before trying to call its getTargetBlock() method."}
{"gold": "Not really introduced by this PR, but I don't recall why these have to be pointers, while `PodSelector` / `NSSelector` do not. Do you know the reason?", "pred": "Fix typo in ClusterNetworkPolicySpecBuilder"}
{"gold": "Is there a reason why we are ignoring the ackDelay if it would result in a value smaller than the min? Why not `max(sample - ackDelay, minRTT)`?", "pred": "Fix comment"}
{"gold": "Here's an example of how the files in the `NotYetGenerated` directory drifted out of sync from the generated files. When we made the equality comparers internal, we neglected to fix this one.", "pred": "Fixing a typo in the comment"}
{"gold": "nice. we should do this elsewhere too. We have a lot of repeated stuff in the policies", "pred": "Fix typo in policy"}
{"gold": "Small formatting thing, but can you remove the space before the semicolon?", "pred": "Add test for default argument referencing a field in a different class"}
{"gold": "Not new, but nit: _writeLeng*th*.", "pred": "Fix typo in comment (#1004)"}
{"gold": "Our habit is to go ahead and put a description line (or more) in front of every function, not just non-test or exported functions.", "pred": "Fix test"}
{"gold": "Remove this file from the PR", "pred": "Fix import path for volume package"}
{"gold": "I think that for cloud variables, the default value in the prompt should be the variable name without the cloud prefix; this is slightly different from the scratch 2.0 behavior, but I think would ultimately lead to less confusion. Proposing code changes below:", "pred": "Fix variable rename bug"}
{"gold": "I think I would rather fish this interface through than use it as the basis for heuristics.", "pred": "Fix typo in comment"}
{"gold": "Probably not worth making this line-ending change, since it is the only change to this file.", "pred": "Fix typo in comment"}
{"gold": "Is this the correct place for this assert? Does this routine rely on it being 64, or was this only for testing?", "pred": "i#1508: Fix build break on Windows."}
{"gold": "No pb please", "pred": "Fix import path"}
{"gold": "We need to add indexes here on both `subscriber_id` and `changeset_id` or things will quickly collapse as we build up subscribers ;-) What I would suggest is a unique index on `[:subscriber_id, :changeset_id]` which will also make duplicate entries impossible, and an ordinary index on `[:changeset_id]` for finding the subscribers to a changeset.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "use the context versions of everything, e.g. `PostMessageContext` and thread it through the functions. will save you a bunch of refactoring trouble later on.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "\"not to be used elsewhere other than\"", "pred": "Fix typo in implements"}
{"gold": "Thanks for the contribution, @coolderli ! I also think the newPosDeleteWriter need the properties setting ...", "pred": "[SPARK-35865][SQL] Fix the ParquetWriterBuilder in SparkAppenderFactory"}
{"gold": "These additions seem unrelated to this change?", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Could we move this to a class for Hadoop configuration properties, like `org.apache.iceberg.hadoop.ConfigProperties`?", "pred": "Add missing property"}
{"gold": "The related statements should also be deleted.", "pred": "fix: fix typo in chaos collector (#1005)"}
{"gold": "Shouldn't this line be removed?", "pred": "Fixing ELB connection to use the correct parameter name."}
{"gold": "Just move this into `const.py`. It already has similar stuff. Also, make it uppercase since it's a const.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Issue is that `currentMode = newMode;` is called at the end of the method. Passcode screen will come up, but since the activity thinks current mode is biometric check we don't check passcode when submitted.", "pred": "Fix biometric auth on Android 10"}
{"gold": "Need change it back?", "pred": "Update ScanAnalyzer.java"}
{"gold": "Didn't we delete this file a while back because it isn't used but people think that it's a security vulnerability that it's checked in?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "nit: Looks like this can be removed now", "pred": "Fix typo in comment"}
{"gold": "Can probably remove the lines above it too (L60-62), since ProvisionDefaultCA() makes sure the map isn't nil.", "pred": "pki: fix typo in comment"}
{"gold": "Do you think it's worth erroring out? It's likely that this is a configuration error that the user might want to know about?", "pred": "Fix typo in status.c"}
{"gold": "I think the functional test should not change here, this is probably a test in itself :)", "pred": "added a test for a TODO with a note"}
{"gold": "Why this to be a public function?", "pred": "Fix import path of bluemonday"}
{"gold": "I think we can remove the timing for export env vars", "pred": "Fix typo in `travis.rb`"}
{"gold": "wrong import grouping", "pred": "Update proxy.go"}
{"gold": "There is a doubled semicolon ;)", "pred": "Fix typo in PreferenceController"}
{"gold": "I'm wondering why this isn't <openssl/md5.h>. Seems like one would have to copy the md5.h file into the source tree somewhere for this to compile cleanly. Maybe you meant to use angle brackets instead of quotes?", "pred": "Update math.h"}
{"gold": "shouldn't **call** return a boolean?", "pred": "Fixing a bug in the visibility_of_all_elements_located class."}
{"gold": "We don't need to cast to client here. (well, from spell gem not AA etc) We should also make sure the charm is a casted spell before calling SendSpellBarEnable.", "pred": "Fixed a bug where the client would crash when casting a spell with no target."}
{"gold": "This is not an `id`. This should either be `invocation_time` or `invocated_at` to be consistent with what we are using elsewhere, and also to better rerflect the column's DateTime type. Also, within the context of this table, there is no idea of what `invocation` is. I know that `scanner` may not be future-proof, but we need to find something more descriptive. Perhaps one possibility is to call this `audit_time`.", "pred": "Fixing the db migration script"}
{"gold": "should the 'Receiver' be the clawback address in case of clawback transaction?", "pred": "Fix typo in comment"}
{"gold": "@ashishranjan738 -- Where are these consts used? in which pkg?", "pred": "Fix typo in volume command help text"}
{"gold": "The only change I would suggest is moving these lines back below the `templates_path` variable to keep the diffs smaller.", "pred": "Fixing docs build"}
{"gold": "Having it above kept the block info in the cached changes, which could end up confusing things quite a bit.", "pred": "Fix unembedBlockChanges"}
{"gold": "If the execute_task returns an `ExecutionResult`, the passing of a block would be unnecessary. Instead, the `ExecutionResult` could be presented to the user in some standardized way (iterating over the result of each node, etc.).", "pred": "(maint) Fix typo in help message"}
{"gold": "Not sure why we make a new channel here. If we don't use this channel, how about creating it inside the `Connect`?", "pred": "Fix typo in comment"}
{"gold": "There are two question here: 1. If you only modify lastLogId, but the `iter` is not modified, I really don't know whether we can succeed. 2. We will check the if the term has changed in `replicateLogs` (if rollback really happen, the term must have been updated), so I really doubt whether the problem should be fixed in this way. Or you could describe it in more details.", "pred": "raft: fix a bug in processAppendLogResponses"}
{"gold": "Hello @jDolba, I have reviewed your PR and I found one problem. `$step->getFormType()` can return `FormTypeInterface`. You cannot use interface as key for an array. Can you find some better way to fix this? Thank you.", "pred": "[Form] Fix typo in OrderFlow"}
{"gold": "i was confused by keyword \"inventory\" here. my understanding is this starts the osconfig-agent which covers inventory lookup and package-management(correct me if i am wrong).", "pred": "Update inventory.sh"}
{"gold": "These are really meant to be the keys in the capabilities, not the keys of values within the capabilities", "pred": "SimonStewart: Fixing a typo in the CapabilityType interface"}
{"gold": "This breaks tests on IE because this will import an `esm` bundle. For that reason `sinon` is available as a global in our test suite and never imported. The global is aliased to the proper `es5` file.", "pred": "Fix lint error"}
{"gold": "Maybe move all the Loss Recovery constants to a separate file.", "pred": "fix import"}
{"gold": "this field is added so that we can find disk name by device name from attachments", "pred": "disk: add validate"}
{"gold": "Unnecessary new line", "pred": "Remove unused import"}
{"gold": "First determine if the namespace already exists, so it's clearer that it's handling namespaces that aren't included in the `c.config.Namespaces`", "pred": "Fix a bug in the currentState() function"}
{"gold": "What changed in the styles that means we don't need this?", "pred": "Add download links for 480p and 360p"}
{"gold": "This pattern should be applied to the other instance where NewtonsoftEscapeJProperty is used and you can remove the NewtonsoftEscapeJProperty method.", "pred": "Fixing the build break"}
{"gold": "Something to mention in the next changelog/release notes. It will be good to get histogram working consistently with everything else.", "pred": "Fixed histogram docstring"}
{"gold": "What does this contain? Is it PVC namespace or is it openebs?", "pred": "fix(helm): add missing quotes in helm chart (#1027)"}
{"gold": "Design note: Using local concrete data types on a feature abstraction makes it hard to generalize / replace. This is tolerable so long as this remains a kestrel exclusive feature, but we'd need a different design if this were ever moved to HttpAbstractions.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "this will break R package, you should update the R files accordingly. BTW, the call state should be in the last argument.", "pred": "fix typo in R-package (#3098)"}
{"gold": "Shouldn't we throw an exception if the context is null instead ?", "pred": "Fix CS"}
{"gold": "These should both be const, not var right?", "pred": "Bump version to v0.3.0-alpha1"}
{"gold": "Rename the directory, match_costers -> match_costs", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "I don't think this should go in the model tests, since it is done in the resource. `PaginatedDeleteTest` seems more appropriate", "pred": "Fixing tests"}
{"gold": "It would be better to just change RWD to throw IllegalStateException if you attempt to execute a command after quit (unless it's a second call to quit())", "pred": "Fixing a typo in the javadoc"}
{"gold": "Could we move this to an example test to allow the compiler to help us ensure it stays up-to-date in the future?", "pred": "Fix typo in comment (#108)"}
{"gold": "Maybe we could update these to use $future and then check on stderr? that way when we deprecate stdout we can not have to delete tests.", "pred": "(maint) Fix CLI spec"}
{"gold": "Remove this since it always has to be set afterwards.", "pred": "Fix typo in Http2ContinuationFrame.cs (#1044)"}
{"gold": "These two tests were causing us to use too many goroutines with `-race` using the default block change size, I think due to prefetching.", "pred": "test: add test for unmerged write with conflicts"}
{"gold": "Is that `try..except` block really needed? I mean, when it could fail?", "pred": "Fixing a bug in the leaf node"}
{"gold": "If you only want to run a specific group of tests you can always use `.only` like `it.only()` or `describe.only()`. It may not speed up the globbing process as much as this change here :)", "pred": "Fixing karma config"}
{"gold": "nit: I'd probably rename this to `BATCH_SIZE_RANGES`, to use a slightly more descriptive name.", "pred": "Update lambda_handler.py"}
{"gold": "aren't these the wrong way around?", "pred": "Fixed menu entry swapper plugin"}
{"gold": "Lets call this getConfigSetService and maybe rename the field now (or later)", "pred": "AMBARI-10267. Ambari Server fails to start on CentOS 6.5 (aonishuk)"}
{"gold": "Could / should we make these constants and give them a type?", "pred": "Fix import path for klogr"}
{"gold": "lets stick with lowercase for consistency.", "pred": "Add comment about the annotation"}
{"gold": "ordering of imports went wrong", "pred": "Fix import path for corev1 (#110)"}
{"gold": "I think these can all be .name() to get the value we are looking for", "pred": "Fix AllDataFilesTable"}
{"gold": "Is this a good place for these test cases?", "pred": "Add test for missing function call"}
{"gold": "Did you mean to leave the print statement?", "pred": "Fixing a bug in the Job class"}
{"gold": "I would do `new BN(Interpreter.LOCKTIME_THRESHOLD)`", "pred": "Interpreter: fix comment"}
{"gold": "@ftomassetti I turned the tree walking algorithms into iterators so you don't have to visit every node when you only wanted a few, like for a `findFirst`.", "pred": "Remove unused import"}
{"gold": "Need to add type name here to be compatible with proto string representation.", "pred": "Fix timerTypeToReason function (#1387)"}
{"gold": "This is to let people know that the tooling is doing something during a build. Please leave.", "pred": "Fix typo in BazelBuild"}
{"gold": "Why is the principal changing here?", "pred": "Fix test_record_create_with_invalid_type"}
{"gold": "Naming nit: let's use `AZURE_STORAGE_` prefix for consistency with the other ones.", "pred": "storage/azblob: fix a typo in the comment (#2088)"}
{"gold": "I'm a bit confused. We have an actual `ProgressBar` Uppy React wrapper component that we are testing. Why do we need a mock for it?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "can we use `github.com/pkg/errors`?", "pred": "fix: import path for k8s.io/api/core/v1"}
{"gold": "I changed the name of the arguments here just to help make the code clearer.", "pred": "fix(flux): fix type inference for function calls"}
{"gold": "I think either 'avoiding calls to the function' or 'to avoid calling the function ...' would be read better.", "pred": "Fixed docstring"}
{"gold": "@sfricke-samsung -- thanks. saves a few atomic ops which is always good :) The TODO is there to track that this object is storing *both* vectors of shared_ptr and plain pointers to the same data. The shared are to ensure scope, and the plain are for backwards compatibility with existing code that consumed a plain pointer vector (and some code that still does). That should be cleaned up.", "pred": "Fix a typo in SyncOpBeginRenderPass"}
{"gold": "minor: typo (knowMetricsTypes -> knownMetricsTypes)", "pred": "Fix namespace"}
{"gold": "This adds a case-insensitive flag to the type in the RangeSpec, but I don't think RangeSpecs are written to handle case-insensitive comparisons. Take a look at the methods that deal with comparisons when building RangeSpecs, in file Range.cpp. So, I think you would have to do one of two things: a) disable the RangeSpec transformation for case-insensitive comparison operators (the easy way) or b) change the RangeSpec methods to handle case-insensitive comparisons.", "pred": "Changes to support the new predicate pushdown feature."}
{"gold": "I would throw an exception if the type is not solved", "pred": "fix: MethodResolutionLogic.inferTypes() should not throw UnsupportedOperationException"}
{"gold": "if remove `dt.skipLoad` - then this tests will run. You probably mean opposite?", "pred": "skip difficulty test for now"}
{"gold": "I feel like we do this in a lot of places should we move that out into its own PR?", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Already asked you in Matrix, but I'll do it here again so it can be discussed publicly. Why?", "pred": "Fix blurhashing"}
{"gold": "I think here should be a comma before remove, in all the cases", "pred": "Fix typo in R1705 message"}
{"gold": "Single quote is used by default in this project.", "pred": "fix a bug in ohem_sampler"}
{"gold": "S1023: redundant `return` statement (from `gosimple`)", "pred": "Fix typo in comment"}
{"gold": "`ctx` is unused in Close", "pred": "fix: webhook"}
{"gold": "I'm confused. This exception is thrown when `HeurekaCategory` is not found in database. But this exception extends Http exception. Why? What has database search common with http? If the only reason is that it is the same in the whole project, then fine. But then we have even bigger problem - we don't know how to use exceptions.", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Is it necessary to add the suffix `on_head`, because it belongs to` bbox_head`?", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Hmm, I wonder if this should just be e.g. `--with-grub-2.02` instead. (Not sure Autoconf supports periods in these switches.) Today's modern GRUB is tomorrow's ancient GRUB. :) Or maybe we should be specific about the feature this is enabling, which might be safer given that each distro carries so many patches. E.g. `--without-grub-efi-16-suffixes`?", "pred": "build: fix --with-builtin-grub2-mkconfig"}
{"gold": "Add a GetSerialPortOutput method to Instance that way you don't need to access the client, also it makes the call cleaner as you don't have the odd i.Client and path.Base(i.Project), path.Base(i.Zone)", "pred": "Fix import path for daisyCompute.Client."}
{"gold": "Line is too long. [104/80]", "pred": "Add redirect for /ruby-on-rails-for-ios-developers"}
{"gold": "Since CD updates (assignment & power state) are now done in this controller...", "pred": "Fix typo in comment"}
{"gold": "Hmm I'd rather not support this option going forward - it seems like a one-off just to work around this particular issue. Would it be fine to just remove the `deepStackTrace` option? The rest of the PR looks great - I love the idea of switching to sets.", "pred": "fix(docs): fix typo in ParallelValidateError docs"}
{"gold": "on the one hand I like how little this is doing. On the other hand, `inbound_mail_parser` is doing most of the work here so maybe it's not as helpful as I originally thought", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "This line is too long", "pred": "Fixed persistence test"}
{"gold": "This isn't a fatal error, we don't want to crash just because we can't set configs, we have sane defaults set", "pred": "Fixing a bug in the config polling loop"}
{"gold": "I wondered why `buffer` was passed into `LookupPath`. What is happening here? Is `buffer[:0]` equivalent to `[]V4TrieEntry{}`, and hence `buffer` isn't needed any more?", "pred": "Fix typo in comment"}
{"gold": "I don't really like the name of this file, especially the encoding of an implementation detail (the fact that it's a table) in the name. Can we just use `_message_body.html.erb` instead maybe?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Feel better not to expose our internal implementation in API/CRD, so no need to mention agent here. Consider: EnableLogging indicates whether or not to generate logs when rules are matched. Default to false.", "pred": "Fix typo in comment"}
{"gold": "use `NebulaKeyUtilsV3::dataVersionValue()` to replace the literal value?", "pred": "fix rocksdb engine"}
{"gold": "No need for the `\\` here, inside parentheses whitespace is ignored by Python.", "pred": "Fixing a bug in the url module."}
{"gold": "This doesn't seem like the right expected result... it should be the same as the `clientCert` var defined above.", "pred": "Fix test"}
{"gold": "need to rename this now.", "pred": "surface: fix typo in comment"}
{"gold": "NIT: This shouldn't be a TODO. It is just a note isn't it?", "pred": "Fix test"}
{"gold": "I changed this to an error, that seems more appropriate than a warning here.", "pred": "Fixing a bug in the command dispatcher."}
{"gold": "This change could mute unit test failure, but it is better to update unit tests", "pred": "fix: fix test case (#1245)"}
{"gold": "All other places that access `notificationIdsInUse` are in methods with descriptive names. We should do the same here. Maybe `markNotificationIdAsFree()`?", "pred": "Fix NPE in NotificationData"}
{"gold": "keep as `ErrNotFound`, it is the same convention as in other packages", "pred": "fix: import error"}
{"gold": "Same here, we need to call `callback` in else branch", "pred": "Fixing bug in ip.js"}
{"gold": "At this point we already check that the record is valid and so it could never be nulll", "pred": "Fixing the cert refresh notification task"}
{"gold": "Would it not be more sensible just to move setting of the title to later in the method rather than duplicating it here?", "pred": "Fix bug in user controller"}
{"gold": "why not do it in `reclaimExpiredSessions`? and `pushSessionToCache` can delete", "pred": "fix bug"}
{"gold": "out_channels/num_outs/type are unnecessary", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "You can create an issue for it and put it on the backlog so we don't forget it.", "pred": "Update null_dictionary.js"}
{"gold": "So now we are checking twice, both here and in `weaveCIDRsFromConfig`. Not great. I suggest changing the `ok` return of `weaveCIDRsFromConfig` to a messsage (or error?) instead, which we can then log.", "pred": "Fix comment"}
{"gold": "An alternative to setting format to the default in Package.__init__ would be to set it in create_package. I think we can assume all packages are created by create_package, but not necessarily by build_package.", "pred": "Fix typo in install command"}
{"gold": "Let's add fee recipient as well.", "pred": "fix: mining block"}
{"gold": "No need for those with `super-init-not-called`, as pylint already only turns things off for this function and it's needed for the entire function.", "pred": "Fix download target for Python 3"}
{"gold": "I think there's another spot for this in DefaultCapabilityMatcher", "pred": "Add a new capability to the interface"}
{"gold": "this name seems pretty vague -- thoughts on a more descriptive method name?", "pred": "Fix proposal decorator"}
{"gold": "what changed in this line?", "pred": "Fix typo in MeterFactory (#2550)"}
{"gold": "Instead of doing this let's add another function similar to `hasZeroData` for selecting the `reportArgs` since this is all sourced from selected values. Then `hasZeroData` can use this internally, as well as the component itself. Since this function would be internal just for the purpose of avoiding duplication, we don't need to expose it on the component the same way though.", "pred": "Update AdminBarClicks.js"}
{"gold": "This line was useful for auto-completion, I think it should be re-added with specifying the var name (`$exception`) and simplifying the FQCN.", "pred": "Fixed typo"}
{"gold": "This looks like you're not collecting everything from the error channel.", "pred": "Fix typo in comment"}
{"gold": "This currently violates the Law of Demeter. Using `checkout.plan_name` is the quick resolution.", "pred": "Fixing the subject line for the receipt email"}
{"gold": "is there any scenario when `$temporaryFilename` can be null?", "pred": "Fixing typo in Image class"}
{"gold": "this is for the `boolean isRoot = root == rowType` check, which seems to be on purpose, but maybe you could double check whether using ref. equality here is still wanted? Same for `SparkTypeToType`", "pred": "[FLINK-11404][table-common] Fix FlinkTypeToType"}
{"gold": "No need to damage after `roots_drag_icon_update_position`, this is already done in `roots_drag_icon_update_position`", "pred": "drag-icon: fix drag icon not being destroyed"}
{"gold": "Have you tested exporting to ONNX with `device=cuda`?", "pred": "Fix a bug in the model_zoo.py (#102)"}
{"gold": "Do we also need to validate `envName` flag then? `appName` and `envName` are used in `initLogsSvc` which are called by `svc logs` from within `Execute()`", "pred": "fix(cli): fix typo in job logs command (#1002)"}
{"gold": "@LukeTowers I think I would prefer that we don't force it, on the basis that: a) some people would be opting to configure their web server to protect against this kind of attack and would disable this feature in October CMS to get a small performance increase. b) it might be a bit misleading to say that `app.trustedHosts` set to `false` disables the feature entirely, just to have it be overridden here regardless.", "pred": "Update Auth.php"}
{"gold": "i like that you are trying to correct the naming, but its making the PR longer :( i guess in future we can do such changes in separate PRs", "pred": "Fix typo in comment"}
{"gold": "Are we marking what the browser's accessibility tree says or what screen readers with those browsers say?", "pred": "test(text): add test for accessibleTextVirtual"}
{"gold": "This method should behave as intended, to block until it reads an EOF from the other side.", "pred": "Fix typo in comment"}
{"gold": "I prefer starts with `Failed to xxx`, how about `Failed to perform health check on xxx`?", "pred": "Fix typo in health check cron job"}
{"gold": "All these calls make me think we should refactor how traces are started and allow \"source tags\" that we initialize a trace with. I'd like to do this in a follow up.", "pred": "Fix AzureAppServices integration (#1086)"}
{"gold": "This file shouldn't be in this PR", "pred": "Update builtin_test.go"}
{"gold": "This now causes `LessSpecificReturnStatement - src/somefile.php:9:32 - The type 'non-empty-list<5|string>' is more general than the declared return type 'non-empty-list<string>' for takesList`, which seems correct to me. The type `non-empty-list<5|string>` contains the type `non-empty-list<string>`. Thoughts?", "pred": "Add test for invalid array assignment"}
{"gold": "Are you going to change that back?", "pred": "Fix typo in RestrictedDefaultPrivacyController"}
{"gold": "we have a standard format for putting these together elsewhere, it does the filter check first and errors out and then sets based on the value. i think this should be adjusted to do that. there's no logical change, just an approach change.", "pred": "Fix makefile"}
{"gold": "Note this should be `delay` instead of `scale` here. I'll fix this in my branch.", "pred": "Fixing a bug in the functions menu"}
{"gold": "`on` likely still needs a bind, similar to `this.resetProgress = this.resetProgress.bind(this)` correct?", "pred": "fix: add missing semicolon"}
{"gold": "Considering the trade-off between training speed and accuracy, multi-scale training is temporarily kept. More elegant implementation will be adopted in the future.", "pred": "fix import error in yolox (#10025)"}
{"gold": "Can you move this up along with the other builtin libraries?", "pred": "Fix import path for ttime"}
{"gold": "I actually think it makes sense to reposition this checkbox after the notifyForPendingUpdateCheckBox. The current order of check boxes is a bit arbitrary now.", "pred": "Fix #10042: General settings panel: \"Notify for pending update on startup\" checkbox is not disabled when secure mode is enabled"}
{"gold": "Why do we have both `before` and `after`? Naively I would expect this to work as follows: `plz query changed` with no arguments compares the current working directory state to the last commit (i.e. HEAD, i.e. a noop when directly on a git commit). `plz query changed --since [reflike]` compare the current working directory state to the given reflike. So for CI I would expect to run something like `plz query changed --since @{upstream} (or origin/master I guess)`. And on merge I'd either run everything or just `plz query changed --since HEAD^` (given our workflow) - I don't think I'd ever want to do anything else. Either way I think before and after are slightly confusing terms here.", "pred": "cmd/build: fix typo in help text"}
{"gold": "Is there a reason why we can't use `~dst`? It feels like that could be good enough.I would like to avoid extending the filter syntax unless there's an urgent need. :)", "pred": "Fix FDst to use the new server_conn.address_string"}
{"gold": "Why local and not UTC?", "pred": "Fix typo in BlockHeader"}
{"gold": "2012 is a retryable error. Will avoiding rgenerating it here cause a difference in behavior in createServer() ?", "pred": "*** empty log message ***"}
{"gold": "move to line 14 below", "pred": "[factory] fix import path"}
{"gold": "the method name should match teh docs", "pred": "Fixing a bug in Rectangle2D"}
{"gold": "Won't this happen automatically when we flip the default version in the config?", "pred": "folder_branch_ops_test: fix a typo"}
{"gold": "This would also change back to /var/www/html/docroot if we go that way.", "pred": "Fix test"}
{"gold": "This still needs to use the new option. We'll need tests for it too.", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "We are no longer including file name in the source files.", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "no need for this. Devise provides us with `current_user` and `user_signed_in?` helpers.", "pred": "Add a before_filter to set the locale"}
{"gold": "Would `Object.equals(capability.getName(), NAME)` would be safer, as you wouldn't have to do null checks?", "pred": "Fix typo in EthProtocol"}
{"gold": "Hmm, I wonder if we should revert #1862 instead? BTW, what failure do you get w/o this line?", "pred": "Fix typo in example_spec"}
{"gold": "since there are several places where we do 1) get secret key ref and 2) validate URL, maybe it's worth having a common method? it could also trim spaces as done here (but not at the other places currently).", "pred": "Fix typo in slack config generator (#1165)"}
{"gold": "TestNormalize... I would also split them", "pred": "Fix typo in test name"}
{"gold": "All changes to this file are going to conflict with #7599. Please revert these as well. They will be addressed during the Python 3 transition.", "pred": "Fix for #1008."}
{"gold": "Just thought, using spinlock (busy wait with compare and swap) that generates 2 random numbers inside rlock. We know that collisions are rare and we don't need that \"large\" write lock really but lock namely for \"rand\". Or least use a separate Lock (Mutex), namely for \"rand\" (wrap it into method). Mutex will use some sort of spinlock as well but it may use some linked list to make it more fair.", "pred": "Fix typo in comment"}
{"gold": "Can we grab it directly from `__pkginfo__` as that is the source of truth for the version?", "pred": "Fix typo in comment"}
{"gold": "We can revert this to reduce the diff of the PR.", "pred": "[java] Remove unused import"}
{"gold": "This looks weird. `isCloud` should define if it is a cloud or no. Here it does it partially, and it can be overriden by protoPkg value (which also an argument to this function). Please make sure that isCloud completely defines the cloud thing. (i.e. it an be as straightforward as moving `protoPkg.contains(\"cloud\")` from here to the place where `assembleGoImportPath` is called.", "pred": "fix: bazel build file view (#105)"}
{"gold": "Declaring fileflags to be of type LobTgtFileFlags would eliminate the need for all this casting. And would be safer. (Not a show-stopper though.)", "pred": "Fix for Solaris compiler error"}
{"gold": "This change prevents a user understanding how their server is configured. Best to leave at `info` level.", "pred": "Fixing docker image name"}
{"gold": "Typically we would add something to the build system environment to differentiate this; also is there an alternative that can be used with older OpenSSL? Other folks who are committers will need to decide if it is worth supporting an older and likely quite vulnerable (to hacks) OpenSSL library.", "pred": "Fix SSL handshake error handling"}
{"gold": "`readActiveBlockProducersByHeightTests` is a global variable (from `gochecknoglobals`)", "pred": "Fix test"}
{"gold": "Falls back on `Constants.ID` if there's no custom field set.", "pred": "Fixing bug in SyncManager"}
{"gold": "I believe this is what we want to rearrange: this in.skip() should not be happening here, in the open method, but in the setOffset() method itself. Because we want to be able to change that offset after the initial open. The setOffset() method will need to throw an IOException, if it's called while the InputStream is still null; or if the skip() call itself results in an IOException()", "pred": "FileAccessIO: Fix typo in javadoc"}
{"gold": "In case the method is `void`, there won't be any children and `getChild(0)` throws. We'll need to check with `isVoid()` for that case. I'll update this when I merge.", "pred": "fix for bug 278455 - [1.5][compiler] MethodNameDeclaration.isVarargs() returns false for varargs methods"}
{"gold": "If the yarpc.Interceptors wrapper will be added to any user interceptor, why not do it transitively. Can save one step for users. Same apply to filter.", "pred": "Update example.go"}
{"gold": "Is there anything we should do in the event we're unable to renaming the directory?", "pred": "etcd: fix typo in comment"}
{"gold": "How is this env var populated? Can this be retrieved from cluster metadata?", "pred": "Fix typo in comment (#127)"}
{"gold": "Should probably skip the success event here, since it could be a noop.", "pred": "Fix typo in comment"}
{"gold": "I added this here because people cards (which depends on cardBuilder) had this added in blurhash. Not sure when this is used though cc @JustAMan", "pred": "Fix typo in chaptercardbuilder.js"}
{"gold": "Let's keep this line in the docstring, to let end users know they shouldn't be using this directly.", "pred": "secrets/driver: fix typo in comment"}
{"gold": "can do the same for other validateXXX()", "pred": "fix: fix typo in protocol_test.go"}
{"gold": "Why is this necessary?", "pred": "Fixed a bug in the PublisherImpl::get_participant() method."}
{"gold": "Please move this import upper to other similar imports", "pred": "[DOC] Fix doc build (#3469)"}
{"gold": "Include the key word \"translated\". Otherwise the reader will find this confusing.", "pred": "i#1574: Fix typo in comment"}
{"gold": "why. is this called per request? if so this also adds a lock internally. can we not add this at the moment until analyzed as this assumption isnt carried to the several other impls. the only other consumer of this is the http api and that isnt hit often enough for specializations.", "pred": "Fix typo in ElasticsearchStorage.java (#1558)"}
{"gold": "I believe this means dependent checks can no longer operate on virtual nodes, which is something we've been pushing for lately. We may need to find a different way to solve this issue, as I don't think we want to cause a regression while fixing a bug.", "pred": "fix: remove unused import"}
{"gold": "ditto about use of `abspath`", "pred": "Fix typo in PostgreSQL storage backend"}
{"gold": "this reduces the runtime by 50 times", "pred": "Euler05: Fixing formatting"}
{"gold": "Probably best not to have an empty test....", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "direct `newInstance` call is also deprecated now", "pred": "Fix TryTest"}
{"gold": "We have a bit of a convention where imports are split into three blocks: first Go standard library, then imports from outside the repo, then imports from inside the repo.", "pred": "Fix import"}
{"gold": "Why was this change needed?", "pred": "Fix javadoc"}
{"gold": "can you use this opportunity to remove `.readlines()` useless list creation? (`addresses = [l for l in fd if l.find(\"netmask\") >= 0]`)", "pred": "Fix for ifconfig on FreeBSD"}
{"gold": "Why does this check differ from `plan_ssh.rb`?", "pred": "(maint) Fix typo in test"}
{"gold": "File is not `goimports`-ed (from `goimports`)", "pred": "fix: remove unused import (#2017)"}
{"gold": "It was @lodejard who initially suggested this pattern. I think that it had something to do about prioritizing future writes even if there was a pending write operation ready to handle the newly requested write. I'm not sure I fully understood the explanation for having up to 3 pending write requests, because only having one queued write at a time still makes sense to me. I'll talk to him about it.", "pred": "Fixing a typo in the comment"}
{"gold": "We have cli --online_weight_clear in cli.cpp", "pred": "Update bootstrap.cpp"}
{"gold": "So the request.Headers is a map of []string. Are you sure that the HTTP library doesn't already do this split for us?", "pred": "Fix typo in http server attributes (#1006)"}
{"gold": "How is this message used? Can we remove the \"crashed executor/container\" part which is an implementation detail?", "pred": "Fixing a bug in the web utils"}
{"gold": "Instead of building in routing for a browser-specific command, could you refactor the HttpCommandExecutor to allow arbitrary commands to be registered?", "pred": "Fixing typo in HttpCommandExecutor"}
{"gold": "Space after `=`.", "pred": "Fixing video availability check"}
{"gold": "if just need to do something after createInvocation just override and call super first is enough?", "pred": "Fix compilation error"}
{"gold": "By the way, I fixed `announce` method (missing `super` call to announce JDK version)", "pred": "Fix Scala build spec"}
{"gold": "I'm not sure about that... This line can produce <code>ClassCastException</code> if <code>Comparator</code> do not check this.", "pred": "Fix typo in TreeSet.java"}
{"gold": "There wasn't any special reason for this to return a pointer, right?", "pred": "mdops: fix comment"}
{"gold": "Why the need for a `ConcurrentHashMap`?", "pred": "Fix import"}
{"gold": "New code should use strict equality `===`", "pred": "Fix bug in note sorting"}
{"gold": "`expect(resources['Notify[local pid]']['events'][0]['desired_value']).to match(/(\\d+)/)` seems clearer.", "pred": "Fixing the test for apply"}
{"gold": "Removed now-unneeded param.", "pred": "kbfs/libkbfs: fix build"}
{"gold": "(NON-blocking, this can be tracked in follow up issue) @anorth @mishmosh is the toplevel getting too crowded? Should we have a `network` grandparent command, or maybe a `stats` command?", "pred": "fix(docs): fix typo in README (#1055)"}
{"gold": "The `_x` function needs to be imported at the top of the file (in addition to `__`)", "pred": "Update Analytics stories to use new storybook format."}
{"gold": "This is functionally equivalent to the code it replaces.", "pred": "Fix test"}
{"gold": "can you change the field name here to \"InterfaceAssociationProtocol\"? same for the Config struct in agent/ecscni/types.go. i think it's better to keep the field name consistent between agent and acs payload", "pred": "fix: eni ipv4 address type"}
{"gold": "See above, same for the other cases.", "pred": "Update widget tests description."}
{"gold": "Shouldn't line 313 be public \\<T\\> SettableGauge\\<T\\> **settable**Gauge(String name) { ? It would also be good to call it a few times and with differnet types (Long, Integer, String) in the test as well.", "pred": "Fix typo in javadoc"}
{"gold": "I would prefer to just fix the occurences of this new check rather than disable them", "pred": "Fix a bug in the bare super call detection"}
{"gold": "The tests should be fixed in #4841, so this is no longer needed", "pred": "Fix test"}
{"gold": "I think it should been in `SharedKernel` module.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Can we add some description for this field?  ", "pred": "Fix typo in comment"}
{"gold": "Should its name be Time or Duration? I can see them both.", "pred": "Fix typo in ProtoConverter"}
{"gold": "Is this used anywhere?", "pred": "fix: typo in comment (#1007)"}
{"gold": "I believe that you can use `assert` instead of `require` here and in the following lines", "pred": "Fix test"}
{"gold": "In `storagemarket.go` you used `nil` for an unwanted out parameter. Do something consistent (nil seems fine if supported).", "pred": "fix: typo in comment (#1016)"}
{"gold": "is this a new pattern we use in bee? interesting", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "If you think this PR works, i'll clean this up before resubmitting.", "pred": "s3: fix mkdir error handling"}
{"gold": "are you sure you can read version by this artifactid?", "pred": "Update Const.java"}
{"gold": "We can get rid of this import then.", "pred": "[java] Remove unused import"}
{"gold": "Should we do our own vtable?", "pred": "Fix typo in comment"}
{"gold": "This is the actual fix.", "pred": "Update application.rb"}
{"gold": "If sync has really a negative impact, this is just moving the issue from 10sec to 60sec. Wonder if you should not expose the (auto)sync params so users can decide.", "pred": "fix(pkg/log): fix default cache idx expiration"}
{"gold": "should be called => will be called", "pred": "Fix typo in comment"}
{"gold": "not sure whether we should do this. It may cause problem that delegates upgrade their nodes at different time, that they will have different \"last block time\", some use \"commit time\", some use \"block time\". Potential solution: Only use block time after berling, and then delete it in the next version after berling. Open to discussion.", "pred": "fix: round calculation"}
{"gold": "So one question I have is why is the error coming back from `buildReplicaPositions` not an `Assign.AssignmentException`? Is it because it is wrapped in a `SolrException` from the remote node?", "pred": "SOLR-5064: fix typo in javadoc"}
{"gold": "`dt` won't work for some reason?", "pred": "Fix test_debug_logger_object"}
{"gold": "Is this because \"KOALAS_USAGE_LOGGER\" can be `None` ??", "pred": "[SPARK-35802][PYTHON][TEST] Fix the test failure in Python 3.10"}
{"gold": "I like it but maybe the better name will be EthGasPriceConstants or EthGasPriceEstimatorConstants? but Constants not Config", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "I would inline the constructor as well", "pred": "Fix unit test"}
{"gold": "I'm not confident about this...", "pred": "Fix the test case for scanner"}
{"gold": "There is also `v1alpha1.CertificateRequestKind` I think?", "pred": "Fix import path for pki package"}
{"gold": "Can we rename it to make it less confusing? Instead of \"sender-gcpbroker\", maybe name it to \"retryable-sender\"", "pred": "fix(test): fix sender job name"}
{"gold": "So looking at the definition of the `literal()` function in this class, it seems it's possible for it to return null. I guess it's not a concern as we would get NPE on the above call at line 136 when trying to call `.to` if `literal()` returned `null` before even getting to this part that calls `literal().value()`, but something I thought I'd bring up. Perhaps something we might follow up on in another issue or possibly I just missed the workflow that makes `literal()`'s result non-null by the time this `bindLiteralOperration` is called.", "pred": "Fix typo in UnboundPredicate"}
{"gold": "Why did you break the line? It looks like it is under 80 characters without the break and it is inside parens so no need for backslash anyway", "pred": "Fixing a bug in the test."}
{"gold": "@guolinke Don't you mind to rename this variable to `DATATABLE_INSTALLED`, for the consistency with other variables (for example, there are `PANDAS_INSTALLED` but not `PD_INSTALLED`). Also, `DT` is a little bit confusing: sometimes `dt` is used for `datetime`.", "pred": "Fix import error in utils.py"}
{"gold": "We're fine with double quotes here. Just for future reference.", "pred": "Fix typo in profile formatter"}
{"gold": "can we keep this around? We should make sure we can distinguish between properly wrapped errors and \"unwrapped\" errors", "pred": "Fixing a typo in the error message"}
{"gold": "`RecordPipelineShaderStage()` might change `topology_at_rasterizer `, according to shader code, so we should check `pInputAssemblyState `first.", "pred": "layers: Fix crash in pipeline state validation"}
{"gold": "Should we just inline the assets here? I can't think of an advantage to having them in a separate file.", "pred": "Update webpack.config.js"}
{"gold": "detectStaleEndpoints to be more specific?", "pred": "Fix typo in comment"}
{"gold": "Please create a new issue for addressing this (if there isn't one already), so it doesn't get lost.", "pred": "Fixed a bug in the Python test."}
{"gold": "Nothing was ever coming out of this channel because its already being consumed. Create a new channel here and feed it in HandleNewHead method.", "pred": "fix: fix typo in comment (#114)"}
{"gold": "AWS Identity and Access Management (IAM)", "pred": "Update GetPolicy.java"}
{"gold": "This is deliberately at this level.", "pred": "Fix typo in EdgeDriver class"}
{"gold": "payload entered on command line is in hex-encoded format should use same processing as in ioctl/cmd/action/actiontransfer.go", "pred": "stake2transfer: fix typo in help text"}
{"gold": "should this be kept in the `else` branch?", "pred": "fix pricing group fixture"}
{"gold": "Why not put this below \"strings\"?", "pred": "Fix import path for compute package"}
{"gold": "Make it `internal` if it's just for testing.", "pred": "Fixing a typo in the LibuvTransportOptions.cs file (#1015)"}
{"gold": "What is triggering this message in this file?", "pred": "Fixing a typo in the example"}
{"gold": "Are you sure this should be removed?", "pred": "Fix typo in comment."}
{"gold": "What's that good for? The field is initialized in the constructor.", "pred": "Fixing a typo in the comment"}
{"gold": "This shouldn't be necessary (same below). Do you have a traceback for me?", "pred": "Fix for SSL connections"}
{"gold": "No newline needed here.", "pred": "libcontainer/intelrdt: fix import path"}
{"gold": "Why a separate block?", "pred": "kbfs/libkbfs: remove unused import"}
{"gold": "Probably better to ask @AssadHashmi or another AArch64 expert for a review rather than me -- @AssadHashmi if you could confirm that these status registers are 64-bit despite having only a few fields?", "pred": "i#1551: Fix reg_get_size for ARM64"}
{"gold": "`purpose` and `coin_type` and `account` would mimic the BIP-0044 wording, but it's up to you.", "pred": "fix bip44 derivation"}
{"gold": "Is this the critical change? It does seem wrong to use Select() instead of Checked = true. Not sure why that would pass sometimes and not others, though.", "pred": "Fix for #1069: Q-value graph is not updated when changing the Q-value"}
{"gold": "Seems a little low, but is this an installer default?", "pred": "Fix typo in vsphere cloud builder"}
{"gold": "Maybe we could provide our own `configure` function that includes `logger._logger = None` because I don't see a use case in kinto for using `reset_logger` besides configuring the logger.", "pred": "Fix typo"}
{"gold": "This will cause the same breakage that was caused when we added Proof to Block. Be sure to let people (infra?) know ahead of time", "pred": "fix: block.go"}
{"gold": "Fixed the test; @strib want to validate that this is okay? Seems to be consistent new GC behavior.", "pred": "Fix test"}
{"gold": "Afaict, nothing cares", "pred": "Fix test"}
{"gold": "I must be missing something, but why does not having a node cache imply not neededing to re-embed the block changes, in particular? Isn't it just the fact that we don't do any writes?", "pred": "kbfs/libkbfs: fix a typo in a comment"}
{"gold": "Are these changes from `class` to `struct` breaking if called from an older version of `Datadog.Trace.ClrProfiler.Managed`?", "pred": "Fix NameValueHeadersCollection"}
{"gold": "These are just aliases now", "pred": "Fix import"}
{"gold": "Does this mean we can remove `raw` from `_head_contents` partial?", "pred": "Fix video title"}
{"gold": "`isDestroyed` is a function, not a property. This condition will always return false.", "pred": "fix(capacitor): fix splash screen on windows"}
{"gold": "Why are we adding these versions?", "pred": "Update version.go"}
{"gold": "fyi, you can do this by doing `.info(\"string %s %s\", formatparam, formatparam2)` instead of doing a string format with `\"str\" % (params)` the idea is that it'll only do the string interpolation if logging is enabled for this level, which theoretically is an optimisation, but in this case probably isn't important", "pred": "Fixing a bug in the spotify import script."}
{"gold": "Would this work, as a one liner? `setTimeout(window.location.reload, 5000);`", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Can you move `crypto/tls` into the block at the top with all the other stdlib imports?", "pred": "Fixing import path for aws-sdk-go"}
{"gold": "What is the motivation for this change?", "pred": "Fixing typo in config."}
{"gold": "OK, so the concrete implementation will loop? But then it's important that this method waits for a while before it returns no messages. To be specific, a GCP implementation that set `ReturnImmediately` to true or false would both satisfy this requirement, but the first would cause busy-waiting.", "pred": "Fix typo in comment"}
{"gold": "The data structure of `MatchClauseContext` may need to be redesigned.", "pred": "Fix MatchValidator::validateImpl()"}
{"gold": "You say on the issue that something has to be receiving while the messages are being published. But here it's possible that the publish goroutine starts, and maybe even completes, before Receive is ever called.", "pred": "pubsub: fix testSendReceive"}
{"gold": "how do we know that the step in question is an approval type step?", "pred": "Fix typo in proposals controller"}
{"gold": "JMX offers normal APIs for this. I don't think you want the glassfish one.", "pred": "KevinMenard: Removing unused import."}
{"gold": "Is this still Java 8 compatible? @danieldietrich do we need a separate, modularized Java 9 release also?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Should update the user input address and filter modes and pass those in fillSamplerDescriptor ?", "pred": "Fixing a typo in the hipTextureDesc_t struct"}
{"gold": "This object should be in `lib/music/show.rb` and you should also wrap this object in the `Faker::Music::Show`.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "I think logic will have to move to bolt since the vague discussions around bolt run plan --noop is that it would just skip any tasks that don't support_noop rather than error. This is fine until we actually elaborate that though.", "pred": "(maint) Fix run_task function"}
{"gold": "File is not `goimports`-ed", "pred": "fix import"}
{"gold": "why should unknown raise a 403?", "pred": "Fixing tests"}
{"gold": "The true clause of your condition, can't this just be c._nextState since `assign({}, c._nextState)` is equal to returning c._nextState, or am I misunderstanding something here?", "pred": "Fix typo in comment"}
{"gold": "nit: align the leftmost quotes", "pred": "Fixing a typo in the docstring."}
{"gold": "Probably \"server port\" -> \"TCP port\"", "pred": "Fix typo in comment"}
{"gold": "can you use FilterCodec instead?", "pred": "LUCENE-8006: Fix javadoc"}
{"gold": "I know there's only two values but I find it a bit confusing that it's true/false. Could you change it to a string enum with values \"portrait\" and \"landscape\"? Then when calling printToPdf you can just do `landscape: Setting.value('export.pdfPageOrientation') === 'landscape'`", "pred": "Fix setting description"}
{"gold": "I think this migration should fail for MDBX if it uses old table names", "pred": "Fix migration 1000000000000000000000000000000000000000000000000000000000000"}
{"gold": "Should this be negated? `!@options[:hosts_file].nil?` Otherwise it'll enter the `if` statement and `nil` will be passed to `HostsFileParser.parse_hosts_file`, which I'm assuming is bad.", "pred": "(BKR-100) Fixing a bug in the hosts file parser"}
{"gold": "I'm doubting if adding a bool here is a good idea. Maybe it should be an option object? Otherwise it's hard to extend. But an option object is a bit strange in a fluent API? What do you think @snakefoot ?", "pred": "Fix typo in comment"}
{"gold": "This is used in o.a.l.sandbox.search.PhraseWildcardQuery.", "pred": "LUCENE-4864: Fix javadoc"}
{"gold": "view should be loaded on start for both statedb and factory", "pred": "stateDB: fix typo in comment (#1007)"}
{"gold": "Why rename? Just curious...", "pred": "Fix typo in comment"}
{"gold": "Is this needed? I think it calls the super function that already does that.", "pred": "Fix video controls toggler"}
{"gold": "This might slow down the inference time, are we sure we need to do that?", "pred": "Update bbox_head.py"}
{"gold": "This would read better if you add \"Skip code/lines\" or (exclude/hide code if you follow my earlier suggestion\")", "pred": "Fix typo in comment (#1885)"}
{"gold": "Looks like glassfish went a bit nuts doing a refactor", "pred": "Remove unused import"}
{"gold": "nit: allocate the list using the number of processors.", "pred": "Fixing a bug in BatchSpanProcessor (#100)"}
{"gold": "Was this change triggered by baseline?", "pred": "[SPARK-11382][SQL] Fix PartitionSpec.partitionToPath to handle null values"}
{"gold": "This code was doing nothing as far as I can tell and was making the SQL find nothing with the new version of Rails. Remove it unless someone can explain why it is there.", "pred": "Fixing the order of the orgs in the top 5"}
{"gold": "Setting browser based login as the default for `RestAPIExplorer`.", "pred": "Update RestExplorerApp.java"}
{"gold": "maybe we can do this in Init function?", "pred": "fix bug in data parallel tree learner"}
{"gold": "How about if request ID not set, service should generate a random uuid?", "pred": "Fix typo in reset workflow execution (#1386)"}
{"gold": "minor: this is an opportunity for you to split these long lines into multiple lines :)", "pred": "Fix test"}
{"gold": "It would be nice to have exception dumped somewhere (debug logs, info logs).", "pred": "Fixing bug in requests parser"}
{"gold": "So I don't think this is right, as discussed on #657.", "pred": "internal/pubsub: fix typo in comment (#1388)"}
{"gold": "should the group_id = \"{0}\" be group_id = %s You'd still keep the {} for the group_members_{} for the tablename but make the filter clause parameterized.", "pred": "fixing group_members query"}
{"gold": "Path can contain variable pattern in the middle. Also, `$` is not enough to tell if this is JMeter variable. We have correct variable detecting somewhere in our code.", "pred": "Fixing bug in hierarchic http request"}
{"gold": "@bennothommo can you revert this section? It shouldn't be required.", "pred": "Update FormTest.php"}
{"gold": "Minor: maybe move the above to a `#fiscal_year` method?", "pred": "fixing cart_id"}
{"gold": "You should use the current directory instead - it's a temporary directory that will get removed when the test is done.", "pred": "Fix test_build_package_format_env_var"}
{"gold": "I think we don't need synchronization here.", "pred": "Fixing test"}
{"gold": "I don't think this should be changed since on the reactive side we don't support anonymous users.", "pred": "Fix typo in OAuth2AuthorizedClientArgumentResolver"}
{"gold": "Maybe this `if` should be on line 118?", "pred": "Fixing a bug in the counter cache"}
{"gold": "Cool. (I thought I had fixed this already in #812.)", "pred": "Fixing a typo in the comment."}
{"gold": "I intend to do this as soon as I have tests passing.", "pred": "(maint) Remove unused constant"}
{"gold": "Please remove the `test_*` from the filename - otherwise pytest will try to collect tests from it.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Did you file a bug to follow up on this?", "pred": "session: fix typo in comment"}
{"gold": "Looks like these 4 lines didn't actually change. Can you revert the whitespace changes here?", "pred": "[SPARK-35819][SQL] Fix the Parquet vectorization config name"}
{"gold": "This can't be merged with any usage of `require 'pathname'` in lib, it's not always available and we don't want false positives for people (where they don't realise they needed to requite it). Its also unnecessary, no other formatter uses it to look up failure locations. See the exception presenter etc for how we format lines.", "pred": "Fix typo in comment"}
{"gold": "It would be nice to fix the indentation above.", "pred": "fixed test"}
{"gold": "`short_names` is still optional, so `=` that indicates it has to stay there.", "pred": "Add missing function to stubs"}
{"gold": "missing calling of this method", "pred": "Fix typo in firelens_logging_driver capability (#2018)"}
{"gold": "We could get rid of this dependency being forced on clients by changing the `StackConfiguration` interface abstraction to deal with strings instead of `cloudformation.Parameters` and `cloudformation.Tags`, and internally to the `cloudformation` package translate the input strings into the `service/cloudformation` package specific values hiding that from consumers. I don't think that should be taken on as part of this PR, but I think we should consider doing it at some point.", "pred": "fix: remove unused import"}
{"gold": "`StressChaos` does not contains a field .spec.action", "pred": "fix: remove unused import (#1267)"}
{"gold": "Non-int literal strings are no longer coercible to int, I think this is an improvement. Without this change it now reports `InvalidArgument`.", "pred": "Add test for invalid argument type"}
{"gold": "I this used anyplace?", "pred": "Fix missing include in layer_validation_tests.cpp"}
{"gold": "Why was this change required?", "pred": "HIVE-10580: TestHiveMetastore fails with NPE (<NAME> via <NAME>)"}
{"gold": "I like that we have this attribute here. However, I think the way we use it right now might be confusing in the future. For example, when only camunda admin is checked, this exception will be instantiated with a message and `missingAdminRole` is `false`. I think that is counter-intuitive. I would expect this exception to have `missingAdminRole` set to `true`. With this explicit information, the exception message could now be generated inside this exception class with the text block that is currently used in the authorization manager. We could maybe generally reuse that text block then also for the case where a user is no admin and also has none of the required permissions. I haven't tried it myself but I think it would be great if we could streamline those things a bit more if we're working on it now. Let me know what you think.  ", "pred": "chore(engine): remove unused import"}
{"gold": "Not sure why we're creating a new `ByteBuffer` here, ideally this refers to the existing one?", "pred": "Update Monster.java"}
{"gold": "Same here re: `STORE_NAME` to `MODULES_SEARCH_CONSOLE`.", "pred": "Fix import error in legacy-notifications."}
{"gold": "I could've sworn I got a `403` myself when I got that response locally. Is `200` what the API would send back for a `permission: false` tag?", "pred": "Update Analytics e2e test to use new selector."}
{"gold": "This attribute was intentionally private. - lets force usage of factory `NewIdentityManager()` - lets ramake to `NewIdentityManager(keydir string)` -> `NewIdentityManager(keystore keystoreManager)`", "pred": "fix(identity): fix import"}
{"gold": "Is this too frequent?", "pred": "Fixing typo in redis transport name"}
{"gold": "will this not make it possible to use a zip file, e.g. on other importers who do not have to support it ?", "pred": "Update UploadModel.php"}
{"gold": "Needs to be mentioned in `__all__` below.", "pred": "Fix import"}
{"gold": "What if the app's signal handler, executed at pre-syscall for epoll_pwait, executes its own epoll_pwait? For that matter: what happens natively if that happens? I would not expect the kernel to keep a stack -- does that clobber the kernel's stored pre-syscall mask?", "pred": "Fix a typo in the comment"}
{"gold": "Nit: missing a space. I think we should phrase the new content a little differently. \"It is important\" isn't very clear. I think it should be \"offsets will be returned in sorted order.\"", "pred": "[CALCITE-2228] Add javadoc for DataFile.splitOffsets()"}
{"gold": "Can you remove this blank line and put the added import in sorted order (likely your editor will do this)", "pred": "Remove unused import"}
{"gold": "Even if `pthread_create()` for `ocsp_updater_thread()` fails, `h2o` can continue to serve. But I'm a little worried whether `h2o` should continue to serve in this case. How about you?", "pred": "Fix a typo in the OCSP stapling updater thread"}
{"gold": "I like introduction of these constants for account/container creation, but the `ACCOUNT_CHOOSE` one isn't needed I think. This should instead be an \"empty\" value (either `''` or `0`), to indicate more clearly that this field is not filled. It should be the same for choosing a container.", "pred": "Fix import"}
{"gold": "I noticed that passing in `[]` for the locales argument instead of 'undefined' seems to have the same effect. I think that's preferred over passing in `undefined` as a value, and unfortunately passing in `null` seems to throw an error.", "pred": "Fix #1385: Add missing block type to isShadowArgumentReporter"}
{"gold": "1. `0` is redundant. 2. We should save result of `strings.LastIndex(DbCfg.Host, \":\")` to a variable and reuse.", "pred": "fix: \u4fee\u590d\u6570\u636e\u5e93\u8fde\u63a5\u9519\u8bef"}
{"gold": "Do you envision \"new\" servers not supporting header, or is it more a way to test mix of old and new? If so, we could make it a \"private\" (non exported) option.", "pred": "Fix typo in comment"}
{"gold": "For future reference. Try not to do refactoring in the same PR which solves some bug or implements some feature. Not to clutter reading. Do it in separate PR.", "pred": "fix: typo in comment"}
{"gold": "I'm not sure about changing the flag name. unit is more accurate, but for I think for most people asset is also a fine name to use.", "pred": "Fix asset info command"}
{"gold": "Which windows gets activated? A random other window?", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Just to make sure, this is totally lossless? If I put a v2 there, then it gets upgraded to v3, but my function expects v2, then this is fine and nothing is lost?", "pred": "fix(pubsub): fix typo in pubsub/pubsub.go (#100)"}
{"gold": "In the past, we have 3 Flink streaming jobs (1 for each AWS region) writing to the same table. We need to write to 3 different watermark table properties (1 for each region). Watermark consumer then use the min value to determine the overall table watermark. A provider pattern similar to `WRITE_LOCATION_PROVIDER_IMPL` can work. A default impl could be a single property name. not sure if there is a simpler way to achieve this.", "pred": "[CALCITE-1184] Add a property to disable the merge cardinality check"}
{"gold": "Can you change this to `ResolvedUsersMap` and build a new map with both readers/writers? That way, we get the nice side effect of not exposing the internal map of the handle, and simplifying the callers a bit.", "pred": "Fix a bug in the tlfhandle tests"}
{"gold": "I typically try to avoid nested ternary expressions. Can we rewrite this as if statements? Worst case, can we break it out into its own function?", "pred": "test: fix test-mongocryptd-topology.js"}
{"gold": "Do we still support handshakes without SNI present?", "pred": "Fix typo in comment"}
{"gold": "Maybe it's because I work too much on a centralized logging system but it could be great to add a \"category\" like \"attribute\", \"substitution\", \"include directive\", \"macro\", \"extension\"...", "pred": "fix: restore passthroughs in substitutions"}
{"gold": "it have no sense in python -> it makes no sense in python", "pred": "Fixing the bug in the name normalization"}
{"gold": "maybe just do a separate implementation of the pool for openvpn case? It's a bit confusing having two methods here.", "pred": "Fix typo in comment"}
{"gold": "how is it possible to have a `topology` that is falsey when we had to call `topology.connect` in order to get here?", "pred": "fix(topology): fix topology creation"}
{"gold": "Do we need this expectation? If we don't call this method on `PlanFinder` there's no way for the `10` to be returned. Seems somewhat redundant. What do you think?", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "We need to do the same for edgecore", "pred": "fix: edgesite config"}
{"gold": "This fix has nothing to do with the product change. Just a fix I am making for the test issue.", "pred": "Fixing unit test"}
{"gold": "Don't know what should be the default. Lets keep BatchingProcessor for now. And revisit the area after beta.", "pred": "Fixing the build (#105)"}
{"gold": "Ah that's how it's happening, it's probably using the `require_relative` in the optimised one and that counts as a different require to the bare one.", "pred": "Fix typo in comment"}
{"gold": "What happens if there is no NIB/XIB with that name?", "pred": "Fixing typo in MvxSimpleTableViewSource"}
{"gold": "this is not necessary?", "pred": "fix: remove unused import"}
{"gold": "typo: `asmsecrets \"github...`", "pred": "Fix import path for volume resource"}
{"gold": "I think that the JSON encoding should be handled by the control itself, not the sanitization function. This should only confirm that the input is correct, not reformat it  ", "pred": "Fixing a syntax error in the sanitization function"}
{"gold": "Should we put a TODO here to route the http.Transport through here?", "pred": "fix(inbound): fix typo in comment"}
{"gold": "Sorry, could you explain more about the issue? Doesn't ComputerName already default to local computer? > -ComputerName Specifies one or more Hyper-V hosts on which the virtual switch is to be configured. NetBIOS names, IP addresses, and fully qualified domain names are allowable. The default is the local computer. Use localhost or a dot (.) to specify the local computer explicitly.", "pred": "Fixing the issue with the management interface"}
{"gold": "`allowError` is a big vague. Does this mean the test case is asserting that an error should occur? If it means \"maybe an error can occur, and that's okay\" -- what's an example of this?", "pred": "Fix typo in comment"}
{"gold": "return statements should not be cuddled if block has more than two lines (from `wsl`)", "pred": "fix: xrc20 cmd"}
{"gold": "Why does VirtualMachineMetrics have to implement Metric?", "pred": "Fix import order"}
{"gold": "line is 121 characters", "pred": "fix test case"}
{"gold": "How's that linked esbench looking with slice?", "pred": "fix(dom): fix setProperty for svg elements"}
{"gold": "The split and join was probably done to ensure that this still works on Windows because os.path.dirname works differently depending on the os you're running under :(. It would probably be a little better to do `dirname, _, fn = path.rpartition('/')` if you want something cleaner than the split/join.", "pred": "Fixing FTP remote file system"}
{"gold": "This is not the right approach. The `Distributor` maintains a model of the current state of the Grid. That model already contains the information about every active session. We don't need to modify `SessionMap` to expose it further.", "pred": "Added a method to get the session id from a session map."}
{"gold": "Can you make this a member var as all the other deadlines? Then you can drop the param to resetTimer() and simplify some of the code below iiuc.", "pred": "Fix typo in comment"}
{"gold": "I don't understand the reason for the changes from unique_ptr to ROMOL_SPTR that you made in this file. The pointers aren't being shared or used elsewhere so I don't think there's any reason to make them shared. Did I miss something?", "pred": "fix test"}
{"gold": "why change the variable name at all?", "pred": "SOLR-14627: Fix typo in javadoc"}
{"gold": "Since I'm still trying to keep these straight in my head, can you elaborate on what problem this solves?", "pred": "fix: getFlattenedTree should not return shadow nodes"}
{"gold": "Prefer TextUtils.isEmpty() which handles getReportSpamRecipient() being null", "pred": "Fix typo in MessageViewFragment.java"}
{"gold": "Couldn't you just write this as an if/else or a guard clause like on line 87? Just seems a bit weird doing this conditional assignment for essentially an if/else.", "pred": "Fix Firefox version detection"}
{"gold": "Do we actually use Include anywhere yet or is this just for completion?", "pred": "Fixing the build break"}
{"gold": "It still bugs me this was misspelled in the standard and now the wrong spelling is the commonly used one :wink:", "pred": "Fix a typo in the docs."}
{"gold": "seems we missed de-uglifying this one", "pred": "Fix typo in libraryoptions.js"}
{"gold": "i guess these types & cron / retry specific belong to a dedicated util / struct", "pred": "Add TransactionPolicyActive to transaction policy"}
{"gold": "Also update line 2205 below", "pred": "JasonLeyba: Fixing a typo in a comment."}
{"gold": "`direction` is referenced nowhere. Do I miss something?", "pred": "fix(checkbox): fix checkbox label position"}
{"gold": "The two places this was used have been removed so we can fully remove this dependency.", "pred": "Fix linting error"}
{"gold": "This is a duplicate generation of the same file as below.", "pred": "fix: import path"}
{"gold": "We may deprecate `gpus` if `gpu_ids` is specified.", "pred": "Update train.py"}
{"gold": "Right now this is experimental and deeply flaky. We left this at `info` to make debugging user reports a lot easier.", "pred": "Fixing a bug in the connection class"}
{"gold": "unnecessary spaces here are doubling the size of this otherwise extremely useful addition", "pred": "fix: export h function"}
{"gold": "I think we should use `FileExistsPolicy.Overwrite` instead. Files _should_ always be newer, but in the unlikely case they wouldn't be, I'm afraid some files would be overwritten and other not, leading to inconsistencies that will be hard to figure out.", "pred": "Fixing the build script"}
{"gold": "this should probably be removed", "pred": "fix test"}
{"gold": "Nit: I would actually prefer that pretty JSON is the default, with a flag for compressed JSON. Can we acheive that easily?", "pred": "Fix test"}
{"gold": "Will need to think about this one. `additionalIngressRules` feels a bit opaque in terms of eventual outcome.", "pred": "Fix typo in AWS VPC documentation"}
{"gold": "Can we avoid making this public with the other updates?", "pred": "Fix ORC schema util"}
{"gold": "Why did you change this equal instead of less or equal?", "pred": "fix bug"}
{"gold": "missing final for the blockHash field", "pred": "Update WorldStateArchive.java"}
{"gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "pred": "Add factory_girl_rails to spec_helper"}
{"gold": "`x_float` instead of `float_x`.", "pred": "Update l2norm.py"}
{"gold": "Is this for `No Babel config ...` from ESLint? If so, it will be fixed in my ES6 PR.", "pred": "fix: remove unused import"}
{"gold": "Not important, but the code used to keep checking other cases even after one of them failed, and now it's not. Fine either way for me, just noticing.", "pred": "Fix test"}
{"gold": "I think I saw this line in last PR, you can update your base branch and rebase to avoid this. And it would be awesome if you can rebase instead of merge each time you push PR to the `moby` branch, that will make the commits history clearer.", "pred": "Fix import path for docker client"}
{"gold": "If this can change the PC of this thread, it requires handling: we can't blindly execute the syscall and lose control of the thread when the flags include CONTEXT_CONTROL. (Note that most docs imply that setting your own context this way is not supported or has undefined or unpredictable results: any idea how often that's the case, or does it generally work?) We need to handle in a similar fashion to NtContinue or setting another thread's context to ensure we retain control.", "pred": "Fix a bug in the NtSetContextThread syscall."}
{"gold": "@huzaifaiftikhar Changed the endpoint as suggested by Stephane in the latest commit.", "pred": "Update OpenFoodAPIService.java"}
{"gold": "There's no core.Number yet. ;)", "pred": "Add TODO"}
{"gold": "..., ...will be posted.", "pred": "fix: import path"}
{"gold": "Can you update this function to be `ShowHeader`? There is only one use of it at the moment in `tools/fast/series/get_head_block_height.go`.", "pred": "fix(go-filecoin): fix typo in show block command"}
{"gold": "@akarve, this disables `tqdm` by default, is it intended? Also name `QUILT_USE_TQDM` might be too specific, IMHO `QUILT_INTERACTIVE` or `QUILT_PROGRESS_BARS` or something might be better.", "pred": "Fix quilt-server URL"}
{"gold": "unrelated but just changing for consistency with code below it", "pred": "Fix ENI attachment test"}
{"gold": "This will call `componentWillUpdate()` for mounts because the else clause is removed. It should only be called for updates.", "pred": "Fix typo in comment"}
{"gold": "We should add write inheritance too.", "pred": "Fixing permissions inheritance tree"}
{"gold": "Please rename this to `LAMBDA_JAVA_OPTS`, and add a short description to the README.", "pred": "fix: remove unused import"}
{"gold": "Should be in the same import group.", "pred": "Fix import path"}
{"gold": "Operator precedence is very confusing here. Care to add parentheses? ` ((version or 0x0303) >= 0x0200)` Same below.", "pred": "Fix TLSMsgListField"}
{"gold": "javaparser-core has no dependencies and it should stay that way. So no log4j. And even then there would have been a preference for slf4j.", "pred": "Remove unused import"}
{"gold": "Why not just retest all? it's not expensive (I think).", "pred": "Added .csv to the list of tabular data formats"}
{"gold": "ecr and ecr0 aren't deterministically named here. This change will just cause confusion in the git history. Could you either: a) fix this and make it deterministic b) regenerate the mock until it doesn't flip definitions for ecr and ecr0", "pred": "Fixing import path for mock_ecr"}
{"gold": "This looks like bash... does this work in ruby? Or is the idea to inject the entire script into the subsequent commands?", "pred": "Add libxml2-dev to R build"}
{"gold": "I don't understand why this change is in this PR?", "pred": "Fixing a bug in the TraceContextPropagator (#107)"}
{"gold": "It's a little hard to tell from the diff, but as a result of this PR, the only non-deprecated helpers are: - `has_facet_values?` (probably not long for this world) - `render_facet_partials` (perhaps part of a future component) - `render_facet_limit` (possibly obsolete once components get traction) - `facet_field_in_params` (a little tricky to deprecate at the moment) - `facet_field_presenter`", "pred": "Remove unused include"}
{"gold": "The right-hand part shouldn't use `__proto__`. Should be just `PersonObject.__proto__ = Realm.Object`.", "pred": "Fixing the example code in the docs"}
{"gold": "the == case might be legit, or not? If there is no task written since last read, but we trigger a new read, would the min == max? Or should the upper layer handle that case?", "pred": "Fix typo in task_manager.go (#104)"}
{"gold": "Good catch! But is it guaranteed that `old_size < new_size` here? If not, wouldn't we want to take `min(old_size, new_size)` as the copy length?", "pred": "Fix pool_realloc_size"}
{"gold": "This is the only one that worries me a bit. It would be good if Brendan signed off on it.", "pred": "Fixing a bug in the installer"}
{"gold": "`LongRunningOperationDetailView` already has `isEmptyOperation`.", "pred": "Fix typo in OptionalArrayMethodView.java"}
{"gold": "This will always add the authorization header to the request object. Is this the right scope for these two lines? If username/password are not defined, it will encode 'Basic :'", "pred": "Fixing a bug in the remote connection"}
{"gold": "Don't think a scope adds much value for us here. Also, for future reference, you don't need to use the `self.all` it is implied. Could just be: `scope :updated_at_desc, -> { order(updated_at: :desc) }` No need to change this one now though, it works.", "pred": "add theme.rb"}
{"gold": "I believe `Base.` is unnecessary in this case, as the class already extends `Base`.", "pred": "Fix a bug in the Faker::Number.number method"}
{"gold": "Couldn't this result in images being scaled too small when the width is less than the height assuming the width is still what is being passed here?", "pred": "Fixing image url"}
{"gold": "Here also, let's not cache value on top of file, but use `plugins.getConfig(\"api\").offline_mode` directly where it is needed", "pred": "fix: remove unused variable"}
{"gold": "You can combine the two checks into a single `!empty()` check.", "pred": "Fixing a bug in the library card controller."}
{"gold": "Should we add a warning for anything over say 8M? Just suggesting that is not recommended?", "pred": "Fix typo in comment"}
{"gold": "Looks like there are no callers left of this function.", "pred": "fix import"}
{"gold": "Should there still be a ` bool` trailing `showOutput`?", "pred": "Fix comment"}
{"gold": "Did we can change to v1", "pred": "fix: import path for controller-runtime"}
{"gold": "Can you please double check that this won't break anything?", "pred": "Fix typo in comment"}
{"gold": "optionals, shouldn't need to be stated explicitly", "pred": "Fixing the IPC socket path"}
{"gold": "That seems quite low - why not just 0x5130ffff?", "pred": "Fix version number"}
{"gold": "Why is this needed ?", "pred": "fixing netmask"}
{"gold": "`Bolt::Config.user_path` returns `nil` if there's no homedir, so this will still error in that case.", "pred": "(maint) Fix module_name for windows"}
{"gold": "nit: use %s for strings and %v for objects.", "pred": "Fix typo in comment"}
{"gold": "Same as before, the properties already exists in parent", "pred": "fix: add missing property"}
{"gold": "This fix is not quite correct. The `%s` should be replaced with `version` and the `%d` on line 39 should be replaced with `datetime.datetime.now().year`.", "pred": "[python] fix version in nuget package (#3760)"}
{"gold": "Maybe we should only set active = false if `strcmp(type, \"pause\") == 0`?", "pred": "backend/session/logind: fix typo in comment"}
{"gold": "Same here. and all others.", "pred": "JariBakken: Fixing FirefoxDriver#bridge_class"}
{"gold": "Intentionally committed? I'm not against it, we already have a way to get goroutines without killing the process: `/keybase/.kbfs_profiles/goroutine`.", "pred": "kbfsfuse: fix import path"}
{"gold": "I think this blank line may be removed", "pred": "Fixed a bug in the RTPSDomain::createParticipant() method."}
{"gold": "I think this should be a keyword-only argument, i.e. do `def add(self, url, title, *, toggle=False):` and adjust the caller to do `toggle=toggle`.", "pred": "Fix typo in comment"}
{"gold": "@aimanrosli23 Judging from the commit description, I do not know why this file got changed so much. Could you help to double confirm if you do not revert the changes brought by commits: SHA-1: 643623147a1feaddd734ddd84604e1d8e9dcebee * MdeModulePkg/SdMmcPciHcDxe: Send SEND_STATUS at lower frequency SHA-1: 49accdedf956f175041040e677163b7cbb746283 * MdeModulePkg/SdMmcPciHcDxe: Hook SwitchClockFreq after SD clock start", "pred": "Add EmmcSwitchBusWidth() prototype"}
{"gold": "How about YAML.load_file()", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Maybe make this `volatile` or atomic as this can be set/read from different threads? Also, separately you may want to check if some of the methods here need to be `synchronized`.", "pred": "Fixing a typo in a metric name."}
{"gold": "Check the return value of the drmgr ones.", "pred": "Fix a bug in drwrap_exit()"}
{"gold": "This should be `'cache'`", "pred": "Update FileUpload.php"}
{"gold": "The name \"old\" might cause confusion here. After installation, the \"old\" repo is at an archived path, and the new migrated repo is at the old path. Maybe something like \"target\" or \"canonical\"?", "pred": "Fix typo in comment"}
{"gold": "I think this is somewhat definitive proof that this error exists in `core` rather than `native`. We are correctly resolving the `readPreference` in the previous line, but you are able to identify that eventually the command generated in `core` is not decorated with the passed `readPreference`. Did you try to solve this there already?", "pred": "fix(collection): fix aggregate with explain (#1025)"}
{"gold": "During genesis sync it can unwind 5M blocks?", "pred": "Fix typo in comment"}
{"gold": "was it caused by the removal of removeTaskQueueManager() from this test?", "pred": "Fixing test case (#1287)"}
{"gold": "Wouldn't it just be easier to force search_session to return `with_indifferent_access`? Since you've done the hard work already, I don't think there's a problem doing it this way, but..", "pred": "Fix item_page_entry_info helper method"}
{"gold": "So, such tasks that could possibly not meet the deadline will never have a chance to run? I think this is not nice behavior, especially for those projects who has sometimes some very small tasks after the big one.", "pred": "Fix bug in proc_resources_suspend_check()"}
{"gold": "You should add the check above this line instead. If string is empty, don't even call the function.", "pred": "Fix LuaScriptInterface::luaItemTypeCreate"}
{"gold": "If clientCert attribute doesn't exist for some reason I set it to false.", "pred": "Fixing a bug in DynamoDBCertRecordStoreConnection"}
{"gold": "Do we need `app_host_flags` variable? We can directly concat with `flags`. `sh.cmd curl_cmd(unless Travis::Build.config&.ssl&.verify ? flags + ' -k' : flags, location, static_file_location), cmd_opts` right?", "pred": "Fix typo in caching"}
{"gold": "Walk should actually be completed (`onWalkCompleted`) after the event is stopped.   This also makes it possible for monster to walk by smaller paths.", "pred": "- Fix walk bug"}
{"gold": "typo in `weather` (should be `whether`)", "pred": "fix: remove unused import"}
{"gold": "Thoughts on having the URI as the param, instead of a boolean? The default value would be the normal prod image, and then your test would override with the staging image.", "pred": "Fix typo in upgrade command help text"}
{"gold": "I'm surprised this is needed, but we should probably assert num_scan == 1 at least, otherwise I expect the file is pretty broken.", "pred": "Fixing a bug in the AAPairs reader."}
{"gold": "Could we set a default value for `partitions` and `{0, network::NetworkUtils::getAvailablePort()}` ?", "pred": "Fix AddEdgesTest"}
{"gold": "Needs xml docs. The API names alone don't provide enough explanation about what these mean and how to set them. Also, we should provide some validation of inputs, such as MaxTime must be > MinTime, MinimumRate must be >= 0, etc. Consider making the properties readonly and adding a constructor that does these validations.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Would it make sense to create an empty file here, perhaps in a tmp dir, instead of checking empty files into Git?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "This change is due to `clang_format` and is not related to this PR.", "pred": "Fix for array length in C# generator"}
{"gold": "Why did you not add the signals to the call of block_all_signals_except() and instead baked them into the function? Ok, if you had a good reason for it, otherwise I would add it to the except list of the function call, since that's what it was meant for.", "pred": "Fix a bug in the signal handling code."}
{"gold": "Could this be done by mocking objects instead? I feel like this is changing too much of the actual logic just for the tests.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "why not just use `ManifestContent` instead of `Integer`?", "pred": "Added missing import"}
{"gold": "can we do that in TxValidator?", "pred": "Fix typo in comment"}
{"gold": "We definitely want some detailed and thoughtful docs being added to this type.", "pred": "Fix typo in comment"}
{"gold": "We would like this code to run, even when `config.XDPEnabled` is false, so that Felix can clean up its own XDP state after a restart.", "pred": "dataplane: fix typo in comment"}
{"gold": "If the status is `ERR_SPACE_NOT_FOUND` why return `SUCCEEDED` ?", "pred": "fix(kvstore): fix typo (#1885)"}
{"gold": "It is is more appropriate to use `downsample_first`. If `downsample_first=True`, the downsample block is the first block and it is used for ResNet. If `downsample_first=False`, the downsample block is the last block, which is used by Hourglass network.", "pred": "fix bug"}
{"gold": "Would you mind removing the default parameter above? (I doubt I'll ever use defaults again since you still have to protect against callers explicitly passing `null` or `undefined`)", "pred": "fix(webdriver): fix typo in jsdoc (#220)"}
{"gold": "I don't know if there are strict conventions about this, but I think the name of the warning should be the diagnosis, not the suggested course of action. In this case, that would mean changing the name of the warning to `interactive-exit` or something like that.", "pred": "Fix typo in docstring"}
{"gold": "If `crt.Spec.CommonName` is not set, and `cert.Subject.CommonName` *is* set, we are not correctly handling it here.", "pred": "Fix typo in comment"}
{"gold": "This isn't a test, so it shouldn't be named `test_init`. You could name it `cmdhistory_init` or so.", "pred": "Fix test_prompt.py"}
{"gold": "why is this pulling from `self.spark_version` config section rather than the `spark` config section (`py-packages` appears to pull from a config section called `spark`)", "pred": "[AIRFLOW-XXX] Fix typo in docstring (#5055)"}
{"gold": "nit: Think it can be one line..", "pred": "Fix test"}
{"gold": "please inline imports", "pred": "fix(engine): remove unused import"}
{"gold": "This check is still correct in some cases, but I guess erroring out is acceptable if someone explicitly asked for an impossible cgroup configuration (now that we could in principle nest things). I would like to see a test for this though.", "pred": "Fix a typo in a comment"}
{"gold": "Should we update integral to operate on a single column as well?", "pred": "chore(flux): update flux test skip list"}
{"gold": "Doesn't belong to this PR", "pred": "Fix typo in comment"}
{"gold": "Just for my own understanding, does aws ecs API take this token as a new input attribute? Which version of the aws sdk? I did not find it in the official aws sdk doc.", "pred": "Update comments to reflect new API"}
{"gold": "Could we shorten this constant to maybe `FEATURE_USER_AUTH`?", "pred": "Added a comment to UserAccount"}
{"gold": "Any particular reason for 8? I feel like we could probably handle more...", "pred": "keybase/kbfs/libkbfs: fix import"}
{"gold": "Try to use factory association declaration for default values, so it could minimal the line length. You may write in fetch_job factory like association :repository, factory: :repository.", "pred": "Fix codeset admin test"}
{"gold": "Should the \"cancelled\" class be added regardless of the proposal's state?", "pred": "Fixing the email status table"}
{"gold": "nit: random whitespace change, let's try to keep these out of commits unless there are other useful changes.", "pred": "fix(mongo_client): remove commented out code"}
{"gold": "Seems kinda dangerous - what if models length is different from paths length?", "pred": "Fix typo in populate.js"}
{"gold": "set real one plz (get it from DB).", "pred": "Fix typo in stageSenders"}
{"gold": "Should this be initialized to zeroes?", "pred": "Fix typo in uafu_irq_set"}
{"gold": "The query is already built at this point, so I don't think this particular change actually helps wrt SOLR-10732? (and the `base.size()==0` case is already trivially optimized in `SolrIndexSearcher.numDocs(Query, DocSet)`)", "pred": "LUCENE-3999: Fix javadocs"}
{"gold": "re-add the type in the annotation here", "pred": "Fix wilderness locations plugin"}
{"gold": "Could we simpify it as `cmd.Stderr = &bytes.Buffer{}`?", "pred": "Fixing the latest release version URL"}
{"gold": "there's enough \"nots\" in here that while it's correct by my review, I'd like to see a small unit test (just passing in an expired and non-expired cert)", "pred": "Fix typo in comment (#1007)"}
{"gold": "File is not `goimports`-ed (from `goimports`)", "pred": "Fix import path for size package (#10)"}
{"gold": "The config option should probably have a more specific name. Also it's not for all gridded data but specifically for Images (and its subclasses).", "pred": "Fixed a bug in the Config class."}
{"gold": "Be careful. This is not a preference but an option in a dialog.", "pred": "Fix test"}
{"gold": "this will modify the incoming object, which may not be desirable in some cases. i think we should stick with the local var, override it with deployment.ClusterName if deployment.ClusterName not empty", "pred": "Fix typo in deployment description"}
{"gold": "Is this not required?", "pred": "test: add test for basic auth with wrong credentials"}
{"gold": "You're using scare quotes on these terms instead of defining them.", "pred": "Fix #1000: Add missing goog.require for goog.asserts.assert."}
{"gold": "These should both be const, not var right?", "pred": "Bump version to v0.3.0-alpha1"}
{"gold": "Can you catch a more specific exception here? Thanks :-)", "pred": "Fix settings file name"}
{"gold": "This is a bug during handling the recover logic in `common chaos` controller, I fixed in this request when I found it.", "pred": "Fix typo in comment"}
{"gold": "During testing, we adopt the score threshold specified in the config file. Here the threshold is only used for visualization, and the variable name `score_thr` can be misleading. Renaming it to `show_score_thr` would be better.", "pred": "fix bug"}
{"gold": "can you make this `nav-primary` please? i'd like to roll with this since the `<ul>` class is `nav`, and primary is the name of the navigation menu", "pred": "Update header.php"}
{"gold": "@georgehrke Just out of curiosity. Couldn't you combine at least the combine the regex for '-' and '' with groups?", "pred": "Fix typo in CalendarListItem"}
{"gold": "I think this is objectively better than looking up the object by name. As a follow-up, I'm going to see whether we do this name-based lookup somewhere else and switch to your method.", "pred": "[lldb] Fix a typo in a comment."}
{"gold": "Why are you dividing by scale in the LTR case but not the RTL case?", "pred": "Fix flyout header image positioning"}
{"gold": "Update after command rename", "pred": "Fix typo in comment"}
{"gold": "I added this change to fix a bug with the legacy settings wrapper which was preventing it from working properly with the other modules  ", "pred": "Fix typo in legacy settings wrapper."}
{"gold": "isn't AZKABAN_FLOW_VERSION_2_0 more explicit?", "pred": "Update Constants.java"}
{"gold": "Please don't leave an empty default", "pred": "Fix crash when trying to sign in with OneDrive"}
{"gold": "This isn't directly related, but the `import React from 'react';` below should be removed. We never import this directly and any modules from it we need are imported through `@wordpress/element`. This was probably added automatically at some point, but we also provide this automatically via `ProvidePlugin`.", "pred": "Update copyright year"}
{"gold": "You can also use `echo: false` instead. Either is fine; I'm just pointing it out.", "pred": "Fix R installation on OS X"}
{"gold": "what's the reason for this moved line?", "pred": "Fix typo in CsvLayout"}
{"gold": "I don't really follow what is happening here, but it looks like this _could_ conflict with the logic on the lines above... should this be an `else if`?", "pred": "Fix #1078"}
{"gold": "`s => s.IsHidden == false` What's the purpose of adding this?", "pred": "Fixing the bug in GetStartAndEndLineNumbers"}
{"gold": "I would name this `clef-ethereum-address`. We already have a bunch of addresses in Bee, and people might wrongly think that this is yet another address", "pred": "fix: add missing import"}
{"gold": "you can just remove this", "pred": "fixing test case"}
{"gold": "I think we should avoid creating a dummy CR in the case of SPC. Please see if we can avoid this since we will not be patching anything in this CR.", "pred": "fix(upgrade): fix upgrade task name"}
{"gold": "Honestly not sure myself, but do you think it makes sense to move this conditional into the partial?", "pred": "Fixing the product page"}
{"gold": "As discussed in IRC (just so it doesn't get lost): This probably should be `-basedir-`, not `-prefix-`", "pred": "Fix quitter.py to use the new exit code."}
{"gold": "basepath can be absoluta path and this needs to be supported", "pred": "fix(db): remove TODO"}
{"gold": "Didn't get to the commit message", "pred": "Fix a typo in ConfigPanelWidget::addPosition()"}
{"gold": "What about raising `ActionView::MissingTemplate` instead? That's what HighVoltage does.", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Is it kept for compatibility?", "pred": "nano::json_handler::account_balance"}
{"gold": "I would find it pretty reasonable to add a MinerSigner method on the state view that puts these together.", "pred": "fix(storage): fix lint"}
{"gold": "It's stored in `PodDBAdapter.VERSION`. I usually use the expected release version code for that change. As this will be released in AntennaPod 2.2.0, the code would be `2020000`.", "pred": "Fix typo in migration"}
{"gold": "What about method name itself? Do we run this for SQL too?", "pred": "Fixing a bug in the update task"}
{"gold": "`instanceUrl` should be `cs1.salesforce.com`. `communityUrl` would be `mobilesdk.cs1.my.salesforce.com`.", "pred": "Update SalesforceHybridTestActivity.java"}
{"gold": "Let's use `if(name != nullptr)` to remove ambiguity", "pred": "Fixing adios2_variable_name"}
{"gold": "I wonder if it would make sense to have a separate namer for metadata? Metadata files tend to be expressed in a different language from the repo language, and have mutually exclusive concepts. So, `PackageMetadataNamer`.", "pred": "Added getReleaseAnnotation() method to SurfaceNamer."}
{"gold": "This rule is quite specific to qbft and so I don't think it should be part of the common rules. Would rather the common bft code didn't know anything about contract based voting/validator governance.", "pred": "[BFT-21] Fixing import"}
{"gold": "This makes our life harder than it needs to be. A Set is unordered by definition. Please remove this method from Set and add it to SortedSet, but with no default implementation. We need to duplicate it then to LinkedHashSet but that's ok, it is the best we can do. Could you please add it also to SortedMap and LinkedHashMap? We are then able to close the original issue.", "pred": "Fix typo in Set.removeAll() JavaDoc"}
{"gold": "we can replace `for` with `params.update(response_headers)`", "pred": "Fixing a bug in the S3Connection class."}
{"gold": "Any chance this is available in .NET Core 2.0 now?", "pred": "Fix #1052 - Kestrel HTTPS does not work with certificate from Azure Key Vault (#1053)"}
{"gold": "I wonder if it's necessary to let app pass in the context. What app level context should be sent? If no, is it enough for p2p agent to compose a context with network info there?", "pred": "fix: remove unused import (#1385)"}
{"gold": "Why do we need both includes here?", "pred": "fixing merge conflict"}
{"gold": "SmartStoreInspectorTest expected results in a certain order", "pred": "Fixing SmartStore to use the correct database"}
{"gold": "I think that you need something like `m_using_random_node.emplace(m_io_thread_pool->get_local_thread_id());`", "pred": "Fixing a bug in the JAG reader."}
{"gold": "I don't think we need to maintain a separate set. The problem here is that the \"assignment\" that is killed for this variable is not really an assignment. If we just don't `assign` the variable with the non-existent value, it will not be reported. I pushed a fix.", "pred": "Fix UnusedAssignmentRule to not report unused assignments to fields"}
{"gold": "Let me know if this is too pervasive. It is currently a private method in `BaseTableScan`. It seems both `SparkBatchQueryScan` and `SparkMergeScan` need to know the scan-specific split size when planning tasks. Therefore, I made it open. Another approach is to move all the `planTasks` logic to scan implementations, but for the combine tasks by partition feature, it requires grouping scan tasks by partition first, instead of returning them in an iterator fashion. I'm not sure if this is OK. `SparkMergeScan` also seems to re-implemented its own plan tasks logic.", "pred": "Fixing a typo in the javadoc"}
{"gold": "Not sure what is this change doing?", "pred": "Fix typo in comment"}
{"gold": "this is funky. either don't take` minutes` as keyword arg or take both `minutes` and `days` and pass all of them on to `timedelta`. i'm guessing you're aiming for backwards compatibility, but i don't think it's worth it given how confusing this is. atlernatively, make `mins=60*24*30` the default. and that brings me to another issue, `mins=None` is not a very useful default.", "pred": "Fixing issue with revoke_user_code_tokens"}
{"gold": "Please use a tab for indentation instead of spaces.", "pred": "Fix typo in javadoc"}
{"gold": "I can't believe we didn't see this typo before :))", "pred": "fix: remove unused import"}
{"gold": "If the logger isn't used, it probably doesn't need to be added.", "pred": "Fix import error in crawler.py (#2110)"}
{"gold": "These files should in `/javascript/brython`", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "minor, you can squash these into one `if`", "pred": "Fix lint error"}
{"gold": "Used regexes to do most of this, hence different methods of string creation of UUIDs. I plan to follow up with an additional change to remove direct references to google/pborman UUID so `uuid.New()` and `uuid.NewRandom()` will instead use our `primitives.UUID`.", "pred": "Fixing a typo in the test name (#1013)"}
{"gold": "Add a TODO here to revisit if this was problematic.", "pred": "Fix for issue 1088: 100% CPU usage when opening a document with a large number of peptides"}
{"gold": "Note generally it -> It", "pred": "Fix a typo in SSDHead (#1009)"}
{"gold": "Is this relevant to this PR?", "pred": "Fix bug in model factory"}
{"gold": "Can we instead ensure that `opts[:run_in_parellel]` will always be a boolean? Otherwise we'll have to account for the case when it's a non-boolean value in multiple places, such as any/every other `if` statement.", "pred": "(BKR-100) Fix block_on to work with run_in_parallel"}
{"gold": "Is this just moved out of the other files? It doesn't seem like this was generated like the other files.", "pred": "Fix import path in net.go (#1148)"}
{"gold": "I started out doing everything `async`, but it was getting in the way of debugging, so I switched back to all synchronous until I got things working. We should probably move everything back to `async` and remove the synchronous versions.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "this looks already too complicated...", "pred": "Fix test"}
{"gold": "As for the testings, we better to verify the actual effects of the compaction. Of course, you could do it in future.", "pred": "Fix rocksdb test"}
{"gold": "should we add a TODO here?", "pred": "Fix typo in Catalog.java (#1010)"}
{"gold": "This can be inlined below as `GoogleSitekitDashboardDetails` is an unnecessary wrapper now.", "pred": "Update dashboard-details.js"}
{"gold": "NewVHS -> NewVersionHistories this one looks better", "pred": "Fixing test (#1084)"}
{"gold": "Is this `@missing_text` ?", "pred": "JariBakken: Fixing a typo in the comment."}
{"gold": "Minor suggestion, but wouldn't it be cleaner to simply replace PACKAGE_NAME_FORMAT to all the optional path, then check that the path is empty in validate_package_name? We might also want a helper function to pull out the package name and sub-package path.", "pred": "Add a comment about the config template"}
{"gold": "we should have a way to insert components into a i18n string. so that we could define a translation string like `'%{filename} is being edited'`, and inject the filename `<span/>` at the right place. I imagine there must be a language where the `Editing` text should come after the file name. we can think about that later tho.", "pred": "fix: fileCardFor"}
{"gold": "Probably want break instead of continue.", "pred": "Fix typo in enum_thermalmgmt_metrics"}
{"gold": "This was on purpose that I would set logging (NoLog=false) and a dummy logger below. The idea is to have better code coverage and test of debug/trace statements. Any reason you have removed this?", "pred": "fix: testMQTTDefaultOptions"}
{"gold": "does adding a `Stream.<String>empty()` help here?", "pred": "Fix typo in comment"}
{"gold": "This is not being used anymore, so can be removed.", "pred": "fix: disable cloudsql_acl scanner (#118)"}
{"gold": "Is it called some where?", "pred": "Fix typo in comment"}
{"gold": "Please remove this extra blank line.", "pred": "fix(template): import path for forked template"}
{"gold": "this is really the key, if you don't set this then gradle doesn't wire up the tasks that produce various files inside these configurations as inputs... I think we were just getting lucky before.", "pred": "Fix typo in CheckUnusedDependenciesTask"}
{"gold": "Sorry if I'm missing something here, but shouldn't this message be about failing to match with an *empty* selector, and/or perhaps even an empty *tag* instead of selector? The message seems a bit disconnected from what we're testing?", "pred": "Add test for NewSnapshot"}
{"gold": "nit: please move these inside namespace.", "pred": "Fixing copyright header"}
{"gold": "may users try to abuse it?", "pred": "fix: hermes url flag"}
{"gold": "why is this space removed?", "pred": "Fixing a bug in the FlatBufferBuilder"}
{"gold": "Can we remove this other line now then?", "pred": "Fix build error on Windows (#108)"}
{"gold": "There's a comma missing here at the end :wink:", "pred": "Fix #1052: Add missing file to perfect files"}
{"gold": "Why is this not required any longer?", "pred": "Fixing the build break"}
{"gold": "Indentation seems a bit fucked up here. Run `go fmt`.", "pred": "Fix import path of admin module"}
{"gold": "any chance in == nil? same below", "pred": "fix: fix the bug of GetLogs (#1085)"}
{"gold": "We would change the source code of h2o so that certain syscalls will be invoked through the `h2o_sysfn` macro.", "pred": "fix typo"}
{"gold": "the name kTimelineCannotBeSignalled is confusing. It's not that a TimelineSemphore cannot be signaled... it's the \"VK_KHR_timeline_semaphore is enabled *variant* of the \"binary cannot be signaled\" message. We should probably have a consistent naming scheme to clarify. kBinaryCannotBeSignalledAltTimeline or hide the complexity in Get*VUID functions as needed somehow (pass in the extension structure?)", "pred": "layers: Fix semaphore submit state error message"}
{"gold": "Could you add a type hint? `percentiles: Optional[List[float]] = None`", "pred": "Fix typo in DataFrame.describe docstring (#100)"}
{"gold": "Maybe putting ones they've used before first would be good, but this is fine for now.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "I don't think we need these. Simpler just to put `routetable.TargetType...` inline below.", "pred": "Fix typo in comment"}
{"gold": "Why this instead of the old way?", "pred": "Fixing a bug in the dispatcher"}
{"gold": "Just combining the inner if/else blocks like this is what I originally meant (I didn't mean replacing all the invisible checks in the outer if, I realize that would have been a functionality change regarding the rule) This should now be equivalent to `if (RuleB(Pets, LivelikeBreakCharmOnInvis) || IsInvisible(formerpet))` (the second check for the rule being false after the `||` would be implied, anything after the `||` would only be evaluated if the rule was false)", "pred": "fix(Core/Player): Fix SetInvisible()"}
{"gold": "We don't want to write this back to the definition do we? Probably just want to create a local variable for it.", "pred": "Fix typo in comment"}
{"gold": "Good catch! Could you please move this to `PlaybackService.this.onPlaybackEnded`? I think it's more clean if everything is in one single place.", "pred": "Fix playback service"}
{"gold": "We're trying to avoid X.org specific code. So I'm not a fan of this. Can't this be achieved in display server agnostic way?", "pred": "LXQtTaskButton: fix crash when clicking on a task button"}
{"gold": "This class can be removed?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "File is not `goimports`-ed (from `goimports`)", "pred": "fix: import path"}
{"gold": "To minimize the possibility of regret, perhaps we name this `ZapLogger`.", "pred": "Fix typo in comment (#114)"}
{"gold": "This looks a little weird, but it's a feature of the gem we're using. You can give it a symbol representing the method you want called on current_user.", "pred": "Fix typo in config example"}
{"gold": "`Anomaly` imported here, but not used. Please run the changed files through pylint with nupic pylint config and fix pylint findings related to your changes.", "pred": "Fixing the path to the exp generator script."}
{"gold": "We needed this testutils file after all  ", "pred": "fix(test): fix testUtils.fixtureSetup"}
{"gold": "line is 161 characters (from `lll`)", "pred": "fix: tsf test"}
{"gold": "Please re-format/groupimport this line. You might need a little manual work.", "pred": "fix: import error (#10)"}
{"gold": "minor, you can just use `wf` instead of `worker.wf`", "pred": "Fix typo in daisy_worker.go (#100)"}
{"gold": "I would suggest putting this in the resources directory with the same package as of this test class. Then you can utilize the method azkaban.utils.TestUtils#readResource to read it as string.", "pred": "Fixing the unit test"}
{"gold": "could not import github.com/openebs/maya/pkg/upgrade/templates (invalid package name: \"\") (from `typecheck`)", "pred": "fix(replica): import path for errors package"}
{"gold": "a official -> an official", "pred": "Fixing the comment in PrometheusExporterTests.cs (#1014)"}
{"gold": "I only want the proxy request for this to run for kinesalite.", "pred": "Fixing a bug in the Kinesis proxy listener"}
{"gold": "White space boya?", "pred": "Fixing a bug in the datepicker"}
{"gold": "Maybe ditch these since `StackSummary` is not used anymore.", "pred": "Fix typo in comment"}
{"gold": "suggest to indicate the value range & meaning in docstring", "pred": "fix bug"}
{"gold": "not sure if it works with prometheus by default, otherwise we will have to add this into prometheus config also", "pred": "Update jiva-exporter.go"}
{"gold": "The rule renderer isn't meant to be stateful so probably best to move this out of here", "pred": "Fix import path in chain_builder.go"}
{"gold": "passing in a `nil` here just so that the tests can pass in an alternative implementation seems weird, but I don't know what the convention is for doing something like this - @briandowns?", "pred": "Fix typo in comment"}
{"gold": "IMO `dot` should be preferred. Remember `aXe`?", "pred": "fix: remove unused require"}
{"gold": "Not a huge deal but this will block tests, also, don't they stay open by default now?", "pred": "Fixing a bug in the AppDomain.Instance test"}
{"gold": "Could you make it a local constant for now ?", "pred": "Fix typo in comment"}
{"gold": "What is this `collection_id` field here?", "pred": "Fixing a bug in the user resource."}
{"gold": "Is there a reason why we don't use logging for this?", "pred": "Fix a bug in the automaton"}
{"gold": "Exceptions should be placed in application layer -> infrastructure is aware of application - not the other way around", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "IIRC issue mentioned reporting _symbolic message_ - so in this case it would be `line-too-long`.", "pred": "Fix test_simple_json_output"}
{"gold": "Is this intended to be `spells[spell_id].reflectable` here? Edit: Should be `spells[spell_id].feedbackable`, right?", "pred": "* Fixed a bug in the spells.lua file."}
{"gold": "How should we set this for existing teams?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "It would be nice if we could verify that this is in fact the error we expected. But that's a latent issue, something for the backlog.", "pred": "Fix typo in test name"}
{"gold": "I hate then some internal process specific middleware leaks into connection manager :( todo later.", "pred": "Fix import"}
{"gold": "Reflects where these files were moved for `pkg_resources`.", "pred": "Fixing setup.py to include the new nupic.bindings.cpp file."}
{"gold": "This should be computed('i18n.locale'....", "pred": "Fix linting error"}
{"gold": "Can you explain to me what goes wrong here? Can the test be adjusted to set up working routing instead?", "pred": "Fix typo in comment"}
{"gold": "We can get rid of this import then.", "pred": "[java] Remove unused import"}
{"gold": "Not sure how useful is unlock event.", "pred": "Fixing typo in morqa transport"}
{"gold": "Consider make the second argument a `encoderOptions` which includes the `lowercaseFields` just like opening a collection.", "pred": "fix import path"}
{"gold": "What is the value of renaming this to `ctx`? We generally prefer the longer names because they are easier to read and to type.", "pred": "HIVE-25788: HiveIcebergOutputCommitter should not use deprecated API (<NAME>, reviewed by <NAME>)"}
{"gold": "Hm. This could be a case of left-sided driving, having u-turn lanes on the right side. Good catch, but looks good to me.", "pred": "Fix bug in simple intersection detection"}
{"gold": "There was a [JsonPropertyName(\"success\")] here it did serialize fine for me, so I am not sure what was the matter? Also maybe uppercase?", "pred": "fix: add missing using"}
{"gold": "we can just use read env here, pretty sure", "pred": "Fix typo in comment"}
{"gold": "Could you replace local hook with global hook `afterModifyTransformStart`?", "pred": "fix: mergeCells plugin"}
{"gold": "You seem to be basing your PRs off an commit, which keeps reintroducing these changes, which makes it harder to review your PRs.", "pred": "Fixing bug in FileArchive.listing()"}
{"gold": "Maybe it would simpler to ignore opt_port if type !== 'number'?", "pred": "Fixing a typo in the server.js comment."}
{"gold": "As far as I can tell, `IDictionary<string, object>` implements `IEnumerable<KeyValuePair,string, object>>` so we are just making it more generic. From the issue, I understood that we want to maintain sequence/order. I believe `IEnumerable<>` won't fix the issue.", "pred": "Fix typo in SpanContext (#107)"}
{"gold": "This change prevents a user understanding how their server is configured. Best to leave at `info` level.", "pred": "Fixing docker image name"}
{"gold": "I will add the following to the list: - api.SpecScale - api.SpecSticky", "pred": "fix: remove unused import"}
{"gold": "As defaultSendPort is being removed, and I don't like TODOs on examples, please remove the whole line", "pred": "Fixed a bug in the client"}
{"gold": "since we are now no longer expecting an input of float to return an empty string, i have removed this test case.", "pred": "Fix typo in test (#1000)"}
{"gold": "It would be cleaner if you were to pack the name&desc in a `MetricName` and pass it to `MakeCounter`", "pred": "Fix typo in counter.go"}
{"gold": "Do you know why do we need this?", "pred": "Fix InternalsVisibleTo attribute (#1000)"}
{"gold": "I guess this using is what causes the build to fail", "pred": "Remove unused usings"}
{"gold": "I like the explicit unregister approach.", "pred": "Fix asio backend to use the correct messageq_t type."}
{"gold": "We should able to use 0x30 as summary, and make 0x80 reserved for future.", "pred": "Fix typo in MetricType (#1004)"}
{"gold": "This allows strategic exclusion of http spans.", "pred": "Fix typo in comment (#1076)"}
{"gold": "why not just `string[]` instead of nullable", "pred": "fix: remove unused property"}
{"gold": "How does this work? Why isn't each tag after the first picked up as a new arg/flag?", "pred": "cmd/go: fix build tags for go list"}
{"gold": "This key is actually yet to be determined. Meeting with the backend team and Garner to discuss.", "pred": "Fix typo in ContainerId constant (#1087)"}
{"gold": "Why remove the crash protection? We're just going to get a bug filed on it.", "pred": "layers: Fix typo in ValidateImageUpdate"}
{"gold": "Maybe be consistent and name it `FRAME_OPTIONS`.", "pred": "fix: add missing header"}
{"gold": "This check/exception is a guard for the next few lines of code. It shouldn't be necessary now. In fact, I don't think you need the if (parentConnection.type == Blockly.INPUT_VALUE) branch at all.", "pred": "Fixing a bug in the connection logic."}
{"gold": "Could probably move these constants too?", "pred": "Add test for _parse_provisioning_output"}
{"gold": "Maybe 'failed' instead of 'missing'. Also do we really need to write ticket numbers here?", "pred": "fix: proposal pinger"}
{"gold": "Test used to use old bouncycastle dependency which isn't needed anymore from Hadoop. Switched to use builtin Java split.", "pred": "Remove unused import"}
{"gold": "nit: I think this would be more readable as \"Some language names contain Unicode characters\".", "pred": "Fix #5783: eSpeak voices are now case-insensitive"}
{"gold": "Thanks for adding the header, but I don't think 2017 is a very accurate guess here. Could you do a quick search with git blame and change this accordingly?", "pred": "Fixing the import of winreg in the win32_util module."}
{"gold": "Oh interesting - does web-test-runner not resolve package.json files?", "pred": "Fix linting error"}
{"gold": "Is there a way to derive this value from the locale itself? I feel hardcoding the prefix in the props isn't the right approach, but I'm not sure what the locale file contains exactly.", "pred": "Fix datepicker example"}
{"gold": "I'd much rather see these warnings in our devtools (`debug/index.js`). Strings contribute quite a bit to our file size and moving them there would prevent bloating core.", "pred": "Fix setComponentProps"}
{"gold": "Use `String.format(Locale.US, ...) to avoid the `Lint` warning.", "pred": "Fix SmartStoreInspectorActivity to use the new SmartStoreInspectorFragment"}
{"gold": "nit: ServiceReference represents a reference to a v1.Service.", "pred": "Fix typo in PodReference struct"}
{"gold": "since it changes to the array, how about change the name to `DeviceNames`", "pred": "Update gcpchaos.go"}
{"gold": "Can we avoid this. upgrade engine code should take care of this.", "pred": "Fixing a typo in the comment"}
{"gold": "should also be alphabetized or at least grouped and alphabetized within group", "pred": "Increased max link age to 1 week"}
{"gold": "No need for this, as pylint already only turns things off for this function and it's needed for the entire function.", "pred": "Fix typo in comment"}
{"gold": "nit: can we remove \"can't\" from the error message?", "pred": "Fix typo in comment"}
{"gold": "instead of modifying 'Status' which impacts the state diagram, how about using some annotations on CVR? This can probably help for our upgrade as well. Is this possible? cc: @AmitKumarDas", "pred": "fix(replica): fix the issue of updating the status of cstorvolumereplica"}
{"gold": "Rename this as KubernetesGPGURL - >KubernetesUbuntuGPGURL , Modify it where ever it is used.", "pred": "fix: update kubeedge download url (#102)"}
{"gold": "I'm not totally sure I like the idea of putting a default fee here, but I guess so long as we make sure to track the default fee of bitcoin core, we're good. We should really also take a look at the byte size of the transaction, and use that to determine what the fee should be. But that could also be a different PR.", "pred": "Fix require path for util/BinaryParser"}
{"gold": "oh yeah, `tail`, `update`, `prepend`, `append`, `subSequence`, `trim` just became effectively constant (without memory leak) :)", "pred": "Update collection.md"}
{"gold": "Can you add back a deprecated `destroyLinks` method for backward compatibility? It can simply proxy `destroyResourceLinks`, and we can remove it in the next major release.", "pred": "Fixing the resource tag destroy method"}
{"gold": "A reminder that we should discuss whether to rename this to \"sockets\" or \"listeners\".", "pred": "caddyhttp: fix typo in comment"}
{"gold": "Why do you need to include this using declaration?", "pred": "Fixing compilation error in Fast DDS (#1026)"}
{"gold": "@halter73 where is this file generated from?", "pred": "Fixing a bug in the new parser"}
{"gold": "What do these `#if TRUE` accomplish?", "pred": "Fixing the package versions file"}
{"gold": "Probably a good optimization to have this, but I don't think it's strictly required. For \"legacy\" Activity flows we pass them through an ActivitySource for sampling. So the logic below should also catch these?", "pred": "fix: instrumentation null activity (#2066)"}
{"gold": "@jessieay Intentionally moving away from passing a param?", "pred": "Fix proposal link in proposal_link_text email"}
{"gold": "I think you could condense this code considerably by getting rid of the initialization and foreach loop and simply saying: `$firstname = trim(implode(' ', $nameArr));` What do you think?", "pred": "Fixing PAIA user parsing"}
{"gold": "hmm, we actually should _add_ `'use strict'` everywhere  ", "pred": "fix: remove user agent check"}
{"gold": "it's not just fetching override properties here, right?", "pred": "Fixing a bug in the project loader"}
{"gold": "Is it worth logging the error?", "pred": "Fix typo in comment"}
{"gold": "What's the point of this class?", "pred": "Fixing import error"}
{"gold": "I'm being picky here, but I think I would prefer `toggle` to be kept here and just change the condition to `contentType !== 'movies' && contentType !== 'mixed'` or `!['movies', 'mixed'].includes(contentType)`.", "pred": "Fix: Library options editor not showing embedded episode infos"}
{"gold": "Please put this down with the other \"github.com\" imports.", "pred": "kbfs/libkbfs: fix import path for sort"}
{"gold": "Minor but probably want `push_front_preference` to have a trailing `_a` to be consistent with the other parameter", "pred": "Fix block processor"}
{"gold": "Nit: the formatting is a bit off. I would expect this to be 2 indentations from `this.expr = ...` but this is 8 spaces, not 4. Also, most places leave the `);` on the last line of the method arguments.", "pred": "Fix InclusiveManifestEvaluator to use the correct projection"}
{"gold": "Ack, @chrisdunelm snuck this class extension past me. This is not a pattern I want to have used...", "pred": "Fixing a typo in a comment."}
{"gold": "nitpick: I wonder if we should name it `flush` only (?)", "pred": "Fix typo in kinto.config.py"}
{"gold": "Why gauges, not counters?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Just making a note here that this may break pre GWs between pre 2.2.0 and 2.2.0 servers. Not sure, will have to experiment/dig a bit more.", "pred": "fix(gateway): fix gateway reply subject length"}
{"gold": "Shall we rename this status to CONTAINER_FAILED? ^^ cc: @sshardool", "pred": "Fixing a bug in the web UI"}
{"gold": "Thinking out loud here: I believe the only reason we need `peer.ID` as a parameter to this method is because we are not persisting blocks from pubsub (instead we are refetching them). If nodes persist the blocks they received over pubsub then I think we can guarantee peers we share a connection with (i.e. that are in the peer tracker) will always have the blocks we are fetching (else how would have we gotten the pubsub message). I imagine the concept of an `initialPeer` can go away once #2962 lands since the peers in the tracker will have the block. Although I don't think that covers the case of fetching blocks our peers have deemed semantically invalid and thus not stored...", "pred": "fix(graphsync): increase request timeout to 10 minutes (#1005)"}
{"gold": "I know it has no effect but my eyes can't help. Is that line not too long?", "pred": "Fix typo in CEL matcher docs (#2637)"}
{"gold": "Does that mean we disable service loop prevention for packet generated by local host?", "pred": "Fix typo in comment"}
{"gold": "It seems a little odd to have both `host.is_cygwin?` *and* `host.cygwin_installed?` defined (with a possibility of having `is_cygwin?` be `true`, but `cygwin_installed?` returning `false`). Do the docs clearly explain the difference?", "pred": "(maint) Fix typo in comment"}
{"gold": "Does this mean manifests will be written with the v2 schema (i.e. with sequence numbers) even though `TableMetadata` is v1 and the manifest list is written with v1? And this should work because we do a projection on read and sequence number is optional?", "pred": "Fix javadoc"}
{"gold": "Should we be sharing this property key with the read? Maybe it should be belong to the file-scan-task object itself?", "pred": "[SPARK-11559][SQL] Add a new option to control the number of partitions in the output table"}
{"gold": "Nice! Good idea to move these out of the main struct.", "pred": "Fix typo in test_fields.go"}
{"gold": "Thanks for paying attention to other places this might happen. This one is particularly important; I probably never should have gotten in the habit of CheckErr(), since it does a log.Panic() explicitly, which looks like something else until you look closely. It's supposed to be used places where \"can't happen\" but Things Can Happen.", "pred": "Fix gitignore creation (#1814)"}
{"gold": "Converting this to an enum makes it obvious that I combined things that don't really belong together. It would probably be better to create two enums `StoreType` and `TransportType` (in more appropriate locations). That also makes it necessary to have (at least) two `ServerSettings` classes. `IncomingServerSettings` and `OutgoingServerSettings`. Also, the naming is inconsistent. Maybe it would be better to make the string that is used for import/export explicit, e.g. WEBDAV(\"WebDAV\").", "pred": "Remove unused import"}
{"gold": "It's out of scope for this PR, but I don't find this utility's name to be particularly intuitive. It speaks to nothing of what it does. Does it create a token list? Process one? Get one? `tokenListToArray` would be nice.", "pred": "fix(utils): tokenList should return an array"}
{"gold": "The message for this check used the existence of a label to determine the output, which doesn't work with the current schema. So I updated it since the data only needed to know a label was present and not what it was.", "pred": "fix: fix label"}
{"gold": "nit: \"The current project does not have requested application\"", "pred": "fix: typo in webapi"}
{"gold": "Extend Unit test for this class", "pred": "fix: attribute code pattern"}
{"gold": "This is this a copy / paste error from above.", "pred": "Fix typo in AppSecRules constant (#1057)"}
{"gold": "this package has to be renamed to `typeinference`", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "This cancels the above null-check I guess.", "pred": "Fix typo in test case"}
{"gold": "change to timerIntervalInMillis", "pred": "[SCB-1010] fix typo in Configuration.java"}
{"gold": "`any rules` should be `any roles`", "pred": "Update account.php"}
{"gold": "Why does the method need to be renamed? I would just keep the old name and update the other uses (which are only tests). That way, we can reduce code duplication.", "pred": "Fix crash in AllEpisodesFragment"}
{"gold": "I'm not sure if this is going to work - I think it's fine to keep them hardcoded here, as the statusbar can still show `:`, `/` and `?` even if the key is rebound.", "pred": "Fix typo in comment"}
{"gold": "@tmetzke shouldn't we replace this library with the `2.12.1` instead of removing it?", "pred": "[KARAF-1088] Fixing the test"}
{"gold": "uint64 seems excessive here. Should we reduce to a uint32 @whyrusleeping ?", "pred": "fix(miner): fix comment"}
{"gold": "Hmm, I thought this was getting used. These are used elsewhere as a cached value (in `svc deploy` it's `o.targetApp`) but I guess since storage doesn't actually need to validate that the app exists, just that there are local services, we never used it.", "pred": "Fix typo in comment"}
{"gold": "To keep it simple, how would you feel about just using r.RemoteAddr? Since every request comes through here I want it to be as lean as possible. Frankly I'm OK with the port showing up in the log; maybe it'd even be useful to someone.", "pred": "Fix typo in comment"}
{"gold": "grant bonus depends on both `admin{}` stored in statedb, and `P2Start/End` in local struct, which is kind of weird at Kamchatka height, we add the bonus Start/End epoch into `admin{}`, so it solely depends on `admin{}` stored in statedb", "pred": "fix: fix typo"}
{"gold": "Use single quote to wrap the str.", "pred": "fix bug in RandomFlip (#100)"}
{"gold": "Is the plan to rename this later?", "pred": "Fix typo in JsonRpcError (#2498)"}
{"gold": "Is there a reason why we need a special case for Email at this point? Is the idea that other methods can turn into Email even if it's not configured as a top-level option?", "pred": "fix bug"}
{"gold": "This wording is a bit ambiguos, I first thought it meant the directory has no entries in it. maybe \"dir\" -> \"dir string\"?", "pred": "journal: fix comment"}
{"gold": "Why do we need both `HPX::m_hpx_initialized` and `HPX:: m_was_initialized`?", "pred": "Fix HPX compilation error"}
{"gold": "also check RPCName?", "pred": "Fix typo in comment"}
{"gold": "Remove unused import", "pred": "Fix typo in OAuth2LoginAuthenticationWebFilter"}
{"gold": "I assume there will never be a scenario where justValidate is expected to be true on a restart", "pred": "fix: restart: don't close listener fds"}
{"gold": "Report listeners are synchronized, even 'though the cache is thread-safe... I've not profiled it, but it may be a cause of contingency. Any better way around this? Also, do listeners **really** need to be synchronized? Can't we just make them thread-safe?", "pred": "Fix typo in PMD class"}
{"gold": "I don't think this is correct. When `compiler` is not given in `.travis.yml`, the announcement will be `--version`, which results in \"`command not found`\" (though not critical), and the cache slug will lack this information (also not critical).", "pred": "Add clang as a valid compiler for C"}
{"gold": "Why do this rather than `args = []` in the function signature?", "pred": "fix(method): fix method call"}
{"gold": "I think we probably *should* do validation of whether there is a suitable implementation if local-validation is true. I'm not sure how useful that actually is though", "pred": "(maint) Fix typo in bolt-server.rb"}
{"gold": "@StrikerRUS here may need to concat two data by col.", "pred": "fix typo in doc (#1344)"}
{"gold": "Why the space?", "pred": "JavadocComment: add missing @Override"}
{"gold": "please resolve the extra indentation", "pred": "Update ZalcanoConfig.java"}
{"gold": "More proof that this check is needed always.", "pred": "Fix for #1082: LibraryManager.LoadLibraryList() should not throw exception if the library list is already loaded"}
{"gold": "`m_al_comms` now contains smart pointers.", "pred": "Fix memory leak in lbann_comm destructor"}
{"gold": "Did you do a test run with the compare script? I'm nervous about what happens on all the generators...", "pred": "Fixing the issue with the generated code for the C# client."}
{"gold": "For a client, we store host, as string c.host. That is what we use for monitoring and statsz. Not sure if its useful here or not. Looks like probably not.", "pred": "Fix typo in comment"}
{"gold": "This change is suspicious. Why did the number of partitions increase?", "pred": "[MINOR] Fix TestDataSourceOptions"}
{"gold": "I'm still new to this area, so please forgive what may be a stupid question: When would this be false? And do we have a test for that situation?", "pred": "Fix proposal policy"}
{"gold": "Should there be any changes to this file at all?", "pred": "Fix for issue 1060:  \"Insert Peptides\" checkbox not remembered"}
{"gold": "The only field being used is the KeyType; Instead, we can probably just make a `keyType` variable here.", "pred": "caddyhttp: fix tls config parsing"}
{"gold": "This should be done by code-gen change happening in the hydra repo. I am tweaking it just to get CI into a 'passing' state", "pred": "Update swagger-petstore.js"}
{"gold": "Cleaned up when I originally added support for passing `screenContext` here (and later `viewContext`) but that was removed.", "pred": "Fix typo in customRender docs"}
{"gold": "This looks like a bunch of whitespace fixing that's unrelated. Can you revert?", "pred": "Fix a typo in the C++ mangled name check."}
{"gold": "should be removed instead", "pred": "minor #22506 [EasyAdminBundle] Fix AppKernel (javiereguiluz)"}
{"gold": "should use randomization ?", "pred": "LUCENE-5763: fix test"}
{"gold": "returning nil because we want to mayactl to exit with 0 status code.", "pred": "fix(volume): volume info command"}
{"gold": "Is this change relevant to the PR? (and I believe we should use `text/plain` considering the fact that it can be displayed using web browsers...)", "pred": "Fix a typo in the example"}
{"gold": "`[Flags]` is now auto-generated by an argument to the `EnumHint`. (The attributes happen to come out in this order. I don't think it's worth controlling the order.) #Resolved", "pred": "Fixing SuppressionStates enum"}
{"gold": "I think same here - in general we don't need to use Setters / Getters since configParams isn't a public API.", "pred": "Fix typo in comment"}
{"gold": "Why using `fmt.Sprintf` where `fmt.Sprint` would do the work (notice no `f` in function name)?", "pred": "fix: typo"}
{"gold": "Extraneous blank line.", "pred": "Fix for #4678: NVDA does not read the contents of a table in a PDF document."}
{"gold": "nit: syntax : neither -> nor", "pred": "fix(wallet): fix typo in error message"}
{"gold": "Is it safe to assume that these two keys are always present? `this[string]` will throw a `KeyNotFoundException` if they are not.", "pred": "Fix log4net instrumentation (#1330)"}
{"gold": "Is the `flowDefinitionId` sufficient to uniquely identify the flow or does it need to be the tuple `<flowId,flowDefinitionId>` ?", "pred": "Fixing a bug in the concurrent execution check"}
{"gold": "Shouldn't it be in the reverse order? `DateTime::createFromInterface()` returns `self` and accepts `DateTimeInterface`.", "pred": "Fix DateTime::createFromFormat signature"}
{"gold": "this check is now redundant. The rest of the function downwards basically does the same thing but with safer checks.", "pred": "fix: add missing mime type for .mjs files"}
{"gold": "Please could you remove the useless space.", "pred": "Fixing a bug in the Feature loop"}
{"gold": "What's the point of this block (and isn't it effectively dead code)?", "pred": "LUCENE-3847: fix javadoc"}
{"gold": "Put a comma after the last parameter of a multiline method call.", "pred": "Fix forum sign on"}
{"gold": "Newline at end of file plz", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Can this be refactored to avoid including the aws sdk in the types that we expose? I know it's not being exposed directly through the types we expose, but I do worry that it might make it easier to accidentally do that in the future and not realize it as easily.", "pred": "fix: import path for reflect package"}
{"gold": "Hi thomas, i would propose to indicate in the name, that only the indextime is updated, otherwise somebody might think the whole items is getting updated. I would propose something like \"updateIndexTimeByItem(Item $item)\"", "pred": "Fixing the queue test"}
{"gold": "This is not the right exception class. There is an InvalidSelectorException class that covers bad locators.", "pred": "Fixing the visibility_of method to work with the new selenium version"}
{"gold": "I assume this came from format?", "pred": "Fixing a typo in the cuda_test_exec_space.hpp file."}
{"gold": "I'd suggest a default value of `false` just to make sure existing tasks are ok when they get deserialized after an update to a version containing this code.", "pred": "[TASK] Add missing use statement"}
{"gold": "Do we really need this? Seems like it would pollute the logs pretty badly.", "pred": "key_manager_standard: fix typo in comment"}
{"gold": "`Vector<byte>.Count` should Jit to const when intrinsic; not sure when `Vector.IsHardwareAccelerated == false` ; however we know `readonly static int` does Jit to const.", "pred": "Fix typo in comment"}
{"gold": "Can we use a skipIf decorator instead?", "pred": "Fixing tests"}
{"gold": "Missing version tags", "pred": "Fix Number.number documentation"}
{"gold": "I think this should also filter out `validate_resolve_reference` hooks.", "pred": "(maint) Fix typo in task show"}
{"gold": "unrelated, but required fix as metrics branch got broken with the latest main->metrics merge and conflict resolution.", "pred": "Fixing namespace"}
{"gold": "Feel free to remove this line", "pred": "Fix copyright year in globalCommands.py"}
{"gold": "~~Should this match the key updated above?~~ :+1:", "pred": "Fixing the test"}
{"gold": "`gofmt` allows a more compact form `defer func() { _ = f.Close() }()` or just add `// nolint:errcheck` before `defer`.", "pred": "Fix typo in comment"}
{"gold": "collateral is in FIL", "pred": "fix(test): fix import"}
{"gold": "We should not create channel of node which are not connected.", "pred": "fix: fix the bug of channel event queue"}
{"gold": "I think the docstring should say something like \"Alias for the `source` option\" or something similar.", "pred": "Fix typo in MongoCredentials documentation"}
{"gold": "Please use properties without suffix `_fr` so they can work across different languages as @teolemon mentioned", "pred": "Add missing field to Product"}
{"gold": "Declaration here is `static` but the definition at the bottom is non-static?", "pred": "fixup! http3client: fixup! http3client: fixup! http3client: fixup! http3client: fixup! http3client: fixup! http3client: fixup! http3client: fixup! http3client: fixup! http3client: fix"}
{"gold": "Hi @myml, thanks for the contribution! `blob` and `blob/driver` are both in the same module, so you shouldn't need to split this change up into multiple Pull Requests. Also, I'd like to see it working, including the implementation for `s3blob` and `gcsblob` (these should be easy, just pass-through to the provider) and `fileblob` (might be trickier...), and a test in `drivertest/drivertest.go`.", "pred": "storage: fix typo in godoc for WriterOptions.BufferSize"}
{"gold": "Was it a bug?", "pred": "Fix typo in comment"}
{"gold": "# `attr_value['string'] is not None` probably not required as `attr_value['string'] == value` check is already being done", "pred": "Fix proxy type"}
{"gold": "You're accessing private variables here - `last_hovered_link` should be public in `TabData`. As for `tabbed_browser._now_focused`, I think you can use `tabbed_browser.widget.currentWidget()` instead.", "pred": "Fix #101: Add support for {selection} in the url:host variable"}
{"gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "We should file a bug for this - we don't need the extensions class if there are no operations on the client", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Is it possible to import from k8s instead of copy in? :)", "pred": "fix: use correct path for volume data"}
{"gold": "`@param float` can be dropped here.", "pred": "Fix typo in comment"}
{"gold": "maybe we can leave this change un-reverted.", "pred": "Update CoprocessIterator.java"}
{"gold": "I wouldn't make MethodDeclarator an AccessNode, nor an Annotatable. It's the MethodDeclaration that can be annotated, and has info about the modifiers, and is already an AccessNode", "pred": "Fixing javadoc"}
{"gold": "delete this class", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Replacing `+` (1 or more) with `*` (0 or more) would've also done the trick.", "pred": "Fixed populator view"}
{"gold": "I've been meaning to fix this for a while. Thanks.", "pred": "Fix a bug in TDTWriter::TDTWriter()"}
{"gold": "This is adding multiple processor pipelines. I guess you wanted to add multiple processors to the same, single pipeline?", "pred": "Fix typo in Program.cs (#2486)"}
{"gold": "If you need str(x[0]) here, you'll probably need str(x) the line after that I suppose. Also, shouldn't we use `raw()` here instead of `str()`?", "pred": "Fix for Python 3.x"}
{"gold": "3.6 seconds? what does it stand for?", "pred": "HBASE-11050 TwoPhaseCommitter.java should be package private"}
{"gold": "If the command fails, is stdout nil or \"\"?", "pred": "(maint) Fix typo in acceptance/tests/ssl_utils.rb"}
{"gold": "Why is api-version now removed in the generated code?", "pred": "Fixing validation test"}
{"gold": "We may register all built-in optimizers of PyTorch here to simplify the builder.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "No need for this new variable.", "pred": "Fix a bug in WrapInNameSpace"}
{"gold": "doesn't this enqueue a double render or is that safeguarded somehow", "pred": "Fix typo in comment"}
{"gold": "But now you may get DATA RACE reports because c.acc is sometimes changed. I wonder if we should not rework that whole sending subs through route.", "pred": "Fix randomClient()"}
{"gold": "Use `ADIADIOS2_HAVE_HDF5`, not `ADIOS_HAVE_PHDF5`", "pred": "Fixed a bug in the ADIOS Open method"}
{"gold": "Would be nice to put this in a separate context named `\"with a string and a non-string\"` (since that's what it is -- it's definitely not a non-string and a string!).", "pred": "Fix typo in spec description"}
{"gold": "Should MAX_PERTABLE_ENTRY here be 10 ?", "pred": "Fix for CID 136411 (Uninitialized scalar field)"}
{"gold": "Should move these out of frame into a static class? Similar to reason phrases?", "pred": "Fixing a typo in the comment"}
{"gold": "That means we still create `UseLane` instructions but threat them like `Suppressed`? Can we maybe change this in the pre-processing so that we will just emit `Suppress` instructions in these cases?", "pred": "Fix build"}
{"gold": "no need to move here, iotex-proto is outside of iotex-core and considered same as iotex-address, go-pkgs", "pred": "fix: import path"}
{"gold": "Looks like a clang-format style violation: should turn Travis red.", "pred": "Fix typo in comment."}
{"gold": "I think we need some YARD docs here, particularly to list all the color symbols that are valid. Otherwise users will have to look at the source to discover that.", "pred": "Fix typo in README"}
{"gold": "Not sure if this needs a doc block or not since it's completely internal, but   for cleaning this up. (@felixarntz docs?)", "pred": "Fix import path"}
{"gold": "The change here is to address what exactly?", "pred": "Fix LLVM build mode for benchmarks"}
{"gold": "Is this really an Option? IIUC, you compute it automatically for the URLOpener case, why would we require a user to fill it in when using the constructor? I.e., can't we drop this and use `adal.MSIAvailable` instead? If that call is expensive, cache it on `bucket`, not `Options`.", "pred": "Fix comment"}
{"gold": "Was this done automatically or by hand?", "pred": "Fix a bug in the ExplicitBitVect constructor."}
{"gold": "This looks like it will only work for the first child, since after that we've overridden `desired_group`. Should we have a separate variable for this?", "pred": "(maint) Fix typo in comment"}
{"gold": "Should this be a constant somewhere?", "pred": "layers: Fix typo in validation cache path"}
{"gold": "nit: sort alphabetically.", "pred": "Fix InternalsVisibleTo for Benchmarks (#2314)"}
{"gold": "Now, It's redundant, I suppose.", "pred": "SOLR-15049: Fix javadoc error"}
{"gold": "nit: The format recognized by tooling is `// Deprecated: [..]` so you likely want this to be, // Deprecated: Use \"go.uber.org/yarpc/peer/peerlist/v2\".Implementation instead.", "pred": "fix typo in comment"}
{"gold": "nit: 1. when formatting input strings, make sure to place them in quotes so we could identify white space issues. i.e. '%s' 2. If there is untyped, non-nil error, you want to log the error string as well.", "pred": "fix: telemetry lookup"}
{"gold": "I believe this can be fixed with the original code if you just omit the \".dll\" file extension so it reads `[DllImport(\"Datadog.Trace.ClrProfiler.Native\")]`. On Windows it would look for `Datadog.Trace.ClrProfiler.Native.dll` and Linux/Mac it would look for `Datadog.Trace.ClrProfiler.Native.so`.", "pred": "Fix typo in NativeMethods (#1008)"}
{"gold": "couldn't we just read the boolean as a string (I would assume that this return \"true\" or \"false\"), migrate if to its new value and keep using the same pref key?", "pred": "Fix #1005: UpdateManager: Don't change the cleanup value if it's already set to 0"}
{"gold": "If these variables are only used in main function, move these to the beginning of that function. If there is a foreseeable reason to have them as global statics just let me know.", "pred": "[svn r3888] --"}
{"gold": "This one was wrong.", "pred": "Fixing a bug in the code that was causing the SARIF Explorer to crash when the user double-clicked on a result."}
{"gold": "What happens if nodes throughout a hierarchy are modified (as they would be)? It looks like we're going to `Reset` once for each `NodeID` affected.", "pred": "observer: add a comment about the meaning of the context"}
{"gold": "> Note that allocation of vmheap fails upon initializing dynamoRIO 64 on WoW64 processes. Thus, we need to pass -reachable_heap to avoid having to make this allocation. This should be solved by changing the default `vmheap_size` to be much smaller than 8GB for x64 DR inside WOW64.", "pred": "Fix typo in comment"}
{"gold": "Is it really worth expanding our public API for this? After all, isn't calling this the same as calling `notification.fully_formatted(...).lines`? If so, I'd rather not widen our API (and thus, increase our maintenance burden) when it's so simple to get all the lines already.", "pred": "Fix typo in comment"}
{"gold": "Is it necessary to keep this class around just to define this constant? Or can we place it somewhere else?", "pred": "Fixing the package name for the snippet set runner."}
{"gold": "Question - do we cache NetworkPolicy itself? If so, here we can point to NetworkPolicy?", "pred": "Fix typo in comment"}
{"gold": "For my view, `Register` means the process of **insert node resource to etcd through api-server**, which is called by upstream rather than here, how about changing the func name to `OnConnected`?", "pred": "fix: import error"}
{"gold": "I would prefer an active verb for this property, e.g. `initializeTelemetry`. The reason is that this property refers to something the engine does once on startup. Other properties that use passive voice (e.g. `authorizationEnabled`) refer to a state of the engine during its lifetime.", "pred": "chore(engine): update telemetry endpoint"}
{"gold": "please use new line to maintain reasonable line width", "pred": "Fixing the NodeJS generator to not generate the required parameters for the method if the method is not a POST method."}
{"gold": "I would skip this check or add an internal server error response.", "pred": "Fixing a typo in the comment"}
{"gold": "missing `{` here (and then `}` after `notary_password = config.notary_password`); it's only going to do the first one", "pred": "fix(build): fix build error"}
{"gold": "This is odd because it's actually in our generated SiteSettingsPath, not in the SiteLocalSettingsPath (wp-config-ddev.php). Are these two files swapped somehow? I'd expect SiteSettingsPath to be wp-config.php and SiteLocalSettingsPath to be wp-config-ddev.php. BTW, I'm *way* ok with renaming that to SiteDdevSettingsPath.", "pred": "Fix test"}
{"gold": "It seems like this must necessarily be a stopgap. Can you please add a TODO(#xyz) to point to the appropriate issue?", "pred": "Fix import path for exec package"}
{"gold": "Is the return signature necessary since we never actually return if there is a problem (I'm referring to the call to `logrus.Fatalf`). Let's pick a pattern and stick with it.", "pred": "fix: agent start error"}
{"gold": "@btecu why is this override needed here? I'm not seeing a `new` being used here.", "pred": "Fix barcode not showing up"}
{"gold": "Should it not be more something like: `MaxAccountConnectionsExceeded` here?", "pred": "Fixing a bug in leafNodeFinishConnectProcess"}
{"gold": "minor: use a non-default CE service account for testing (since default is handled in a specific way in the code)", "pred": "Fix test"}
{"gold": "This is how I ran the 512MiB test. It's probably too much data for a fixture, and makes for longer functional tests (although still less than a minute on my laptop).", "pred": "fix(test): fix test"}
{"gold": "So we weren't able to hide the fact that the file wasn't pre-generated and had to introduce this \"option\" to detect that?", "pred": "Fixing a bug in the symlink resolution"}
{"gold": "Agree that exporting these maps is the best tradeoff, just registering my ongoing discontent with the lack of `const` collections.", "pred": "Fix import path for yarpcerrors (#136)"}
{"gold": "This could probably use `const` as well?", "pred": "Fix typo in webkitcaret.py"}
{"gold": "it doesn't look like these need to be exported?", "pred": "Fix typo in comment"}
{"gold": "I think you should remove \"fmt\" here. And change `fmt.Errorf` to `errors.Errorf`.", "pred": "Fix import path"}
{"gold": "Here's the `resources` attribute @jferris. I'm not against renaming `Product` to `Resource`, and this one... something else.", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "If the context is unused, this is equivalent to `var wg errgroup.Group`.", "pred": "Fix typo in comment"}
{"gold": "very minor: I'd prefer these two added rows are switched so that fragsizeIsMinimum directly follows fragsize", "pred": "LUCENE-3355: add missing javadoc"}
{"gold": "Given that 115 returns `True`, why would this be `False` here?", "pred": "Fixing a bug in the is_local_interface function."}
{"gold": "Please move this test method just below `oauth2LoginWithOneClientConfiguredThenRedirectForAuthorization()`", "pred": "Fix test"}
{"gold": "Why this new configuration?", "pred": "Fixed a bug in LatencyTestPublisher.cpp"}
{"gold": "I don't think that we need to check `hasArray` here. I think the reason why this didn't previously check `hasArray` is that the array passed to `DataByteArray` must start at offset 0 and be valid through the array length, so a copy was needed in almost every case. It may be simpler to change this to use `ByteBuffers.toByteArray` and pass the result to create `DataByteArray`.", "pred": "Fixing Iceberg Pig Input Format"}
{"gold": "`spanReference` -> `baggage`  ", "pred": "Fixing the comments for the Add method in the BoundCounterMetricSdk (#1066)"}
{"gold": "Why the `/-/verdaccio/` ?", "pred": "fix(web): fix logo path"}
{"gold": "Has been waiting for a million years ", "pred": "fix: test case for pushAddonsTemplateToS3Bucket"}
{"gold": "Minor grammar detail: the 'than' is unnecessary", "pred": "Update messages.js"}
{"gold": "I think you can just simply fix this line to `self[:2].to_pandas()`", "pred": "DOC: Fix Series.item docstring (#28654)"}
{"gold": "if we are returning the `ws` here when passing in `se:cdp` we can just return it straight or do we have to make a request to get the `ws` address?", "pred": "fix(webdriver): fix typo in error message (#1030)"}
{"gold": "I could add a resolver for this (like above) but it seems more sensible to just change the one reference!", "pred": "Update index.js"}
{"gold": "not sure \"actual\" adds value - secondsSinceParent is probably closer.", "pred": "Fix typo in comment"}
{"gold": "Line is too long. [94/80]", "pred": "add comment about why we need to pass extra_controller_params to get_facet_field_response"}
{"gold": "The error should be `At least :number items are required`", "pred": "Update image_size.php"}
{"gold": "singleCaseSwitch: should rewrite switch statement to if statement (from `gocritic`)", "pred": "fix: typo in simulator"}
{"gold": "Could combine this with `encryptionKeyGetter` to have a single `keyGetter` interface. I'm not sure which way is better.", "pred": "kbfs/libkbfs: fix comment"}
{"gold": "Is there any security issue here? If we integrate with Hive security (and I don't know if we have or not) is there some notion of re-authentication at connection time?", "pred": "HIVE-10250 : HiveServer2 should not crash if HBase is not available (Sreeni via Xuefu)"}
{"gold": "Does this mean we do not support writeConcern on `createCollection`?", "pred": "fix(createCollection): add missing fields to illegalCommandFields (#2654)"}
{"gold": "I guess `sid` was for `sessionID`, but now it looks strange: `sid.ID`.", "pred": "Fix test"}
{"gold": "We'll need `infrav1.SecurityGroupBastion` as well", "pred": "fix: security group rule description"}
{"gold": "This `fileName` should probably be `remote` and be relative to the Fs root as per normal rclone usage.", "pred": "Fix typo in Rcat"}
{"gold": "That way we are back to having just one index on k_0 So we can really compare the execution times with and without re-indexing", "pred": "Fixing SmartStoreLoadTest"}
{"gold": "Expression that uses a negation pattern to exclude all characters that aren't in the expression.", "pred": "Fix attachment view layout"}
{"gold": "Similar to my suggestion for HTTP, let's remove this and use `ServiceHeader` instead.", "pred": "Add a comment about the meaning of the \"Rpc-Both-Response-Error\" header."}
{"gold": "The serviceDirOnHost[0:1] was completely wrong. It wasn't just Windows, glad you got this fixed!", "pred": "Fix typo in comment"}
{"gold": "Would membership take 10+ seconds to detect the failed node?", "pred": "Fix e2e test failure due to missing import"}
{"gold": "hmm, in this case perhaps the whole try-except could be removed altogether? because if the file does not exist, it's already returning `None`. In any other case it should actually probably fail with the exception, no?", "pred": "Fix markdown sanitization"}
{"gold": "This function does not need to be public", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "  Any chance we can get a CSS class for this? I know it's just in one place but feels like a dangerous precedent to set.", "pred": "Fix setup form error notice."}
{"gold": "> && this.Extensions.ContainsKey(\"nextMethodName\") [](start = 96, length = 48) From line 124, looks like we don't need `&& this.Extensions.ContainsKey(\"nextMethodName\")` condition or we don't need line 124 #Closed", "pred": "Fixing the issue with the pageable extension."}
{"gold": "Moving this code from compat to core shaves 47 bytes out of compat and only adds 6 bytes to core so I thought it was worth it.", "pred": "Fix forwardRef for functional components"}
{"gold": "Please use \".NET Core 3\" - i'm trying hard to use one form, and this is the one MS advices", "pred": "Fix typo in comment"}
{"gold": "Unrelated to this change, but this is a fix for when TestDoStartCgroupInitHappyPath has a failure after the test goroutine has already exited.", "pred": "Fix typo in comment"}
{"gold": "Hmm, I'd really expect this to work, and yet it doesn't. I'll investigate later, though it might get Monday until I get the time.", "pred": "Fix misc.feature"}
{"gold": "Does this changes affect process building dynamic libraries anyhow?", "pred": "fix test"}
{"gold": "Could you limit what is imported here?", "pred": "Fix import"}
{"gold": "just to clarify - on line 1074 we update `zip_file_content` for non-local lambdas, but never store it, which means lambda never picks it up", "pred": "fix: lambda handler not set for java runtimes"}
{"gold": "Golang naming convention is to use camel case `icmpPktWithTypeCode` Often the linter will complain", "pred": "Fix typo in test name"}
{"gold": "We can do away with assigning the response here too.", "pred": "Fixing Zipkin exporter (#105)"}
{"gold": "Bumping the newViewportHeight", "pred": "fix(flexibleHeight): fix bug where grid would not resize when the grid was hidden"}
{"gold": "Is this change correct? Looks like a typo and not sure this should be changed?", "pred": "Fix typo in HLL javadoc"}
{"gold": "I checked the tests coverage and strangely it look like those three lines are not covered (?!). Do you have the same result on your side ?", "pred": "Fixing a bug in the linter."}
{"gold": "nit: please try to avoid changing end of the file (it adds a noise to the code review, but does not provide too much value)", "pred": "Fixing the namespace"}
{"gold": "I don't see the \"only\" part reflected in the code but maybe I'm missing it. Also, the indentation is misleading: the `.SelectMany` calls are perfectly aligned but are *not* operating on the same \"level\". I'd expect the second `SelectMany` to be on the same height as the inner `Where`, just break `pathObj => pathObj<HERE>.Where` and lines won't be that long.", "pred": "Fixing the issue with the x-ms-azure-resource models"}
{"gold": "It seems like most of these will never be nil, are they optional just in case?", "pred": "(maint) Fix typo in Target type"}
{"gold": "`.addColumn(\"c1\", IntegerType.INT, true)` means `PkHandle=true`, maybe should add `.setPkHandle(true)` in line 31", "pred": "Fix TableCodecTest"}
{"gold": "how about `Cannot encode row key with non-integer type` directly?", "pred": "Fix RowKey.java"}
{"gold": "The method names `fetchUnfinishedExecutions` and `fetchUnfinishedFlows` are too similar to each other. Would it be better to use the name `fetchUnfinishedFlowsMetadata` since you are only fetching metadata info about the flow?", "pred": "[hotfix] Fix the javadoc of ExecutorLoader"}
{"gold": "Note that `sudo` is not available by default on BSDs; there are a few places in the codebase here where that's explicitly worked around by using `su`.", "pred": "Fix tmate"}
{"gold": "ultra nit: missing Oxford comma :P", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "This is not supported in Spark 3.0.0-rc2 yet. I'd skip this for now.", "pred": "[SPARK-12588][PYSPARK] Fix the doc of SparkFrameMethods"}
{"gold": "BLOCKING: Why does `Query` return an `*exec.FunctionSignature`?", "pred": "fix(message): fix comment"}
{"gold": "please move this down to immediately above the assignment to `c.dirtyBcache`", "pred": "config: fix comment"}
{"gold": "Don't need the `, err` part since you've already handled it.", "pred": "Update example"}
{"gold": "Please add two additional SECTIONs that show that this also works if the dative bond is in the reactant (reaction SMARTS `[O:1]->[H+]>>[O:1].[H+]`) or in the agents (reaction SMARTS `[O:1][H]>N->[Cu]>[O:1].[H]`)", "pred": "Fixing test case for github #2604"}
{"gold": "What happens if the certificate rotation fails and we are prematurely removing this file?", "pred": "Fix typo in comment"}
{"gold": "does this change belong here?", "pred": "Fix typo in comment"}
{"gold": "This returns an error", "pred": "Fixing a typo in the workflow.go file"}
{"gold": "If we think we might someday write a native nftables backend, do you think it would make sense to just use generic dataplane configuration? e.g, `dataplane = iptables | ebpf | nftables`, but for now selecting `nftables` uses iptables in nft compat mode?", "pred": "Fix typo in comment"}
{"gold": "Looks like that helper function is general enough that it should reside in testhelpers", "pred": "test: fix test"}
{"gold": "This isn't incorrect IMO, but I think it would be better to fix this in drupal7PostStartAction and also in drupal6PostStartAction. It seems to me like those were both somehow neglected on this. Use drupal8PostStartAction as example. Congrats on your first golang PR! Please make sure to test it manually.", "pred": "Fix typo in comment (#2455)"}
{"gold": "I'd like to ensure that the error message at least has some reference to the flag that is not allowed. Something like `/ERROR(.+)--hosts/` would work.", "pred": "(maint) Fix provision subcommand test"}
{"gold": "Should we say \"specifying two public subnets\"?", "pred": "fix(aws): fix subnet selection prompt"}
{"gold": "Issue number? When? Why?", "pred": "Fix typo in comment (#1075)"}
{"gold": "You should not rely on `PitchCommand` being imported into speech. Please import it from `speech.commands`.", "pred": "Fix import error"}
{"gold": "Is this a constant used in the Nessie project itself? If so, perhaps you might consider a follow up for adding `NessieCatalogProperties` class at some point, to help make them more clear to users looking to adopt Nessie coming from the Iceberg repo itself  ", "pred": "Fix test"}
{"gold": "maybe we should rename: MinTaskID -> MinTaskIDExclusive, MaxTaskID -> MaxTaskIDInclusive,", "pred": "Fix comment in taskqueue_db.go (#2076)"}
{"gold": "You may need to make this configurable if we expect people to be able to use the normal Nvidia runtime on other Linux distributions like Ubuntu or Debian.", "pred": "Fixing the build"}
{"gold": "Originally the DenyExport was a subscribe permission because it meant that if on this LN connection, if we deny export of \"foo\" it means that it would reject a subscription (hence subscribe permission) on \"foo\" from the other side. Now you are changing to simply not allowing this server to publish on \"foo\". I am not saying this is wrong, but we completely flip the meaning.", "pred": "Fix typo in leaf node config"}
{"gold": "> k1 src0 src2 -> dst s/src2/src1/ nit: k1 is actually src0 according to instr_get_src(instr, 0) which makes this a little confusing", "pred": "Fix typo in comment"}
{"gold": "I believe that you meant to have the following on the second one, right ? `dataDirStat.Mode()^0077`", "pred": "Fix typo in kmd_controller.go"}
{"gold": "The reason a `ByteCount` is used here, is that the H2 mapping in gQUIC requires this layer violation, which is why `CloseRemote` is not part of the public API. This layer violation will be resolved in IETF QUIC", "pred": "Fix typo in comment"}
{"gold": "I dig the helper function!", "pred": "* Fix spells that are beneficial but not detrimental."}
{"gold": "Please add the Copyright header.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Is this the best way to import `FileSystemTarget`?", "pred": "Fix import"}
{"gold": "Wait -- os_local_state_t.tid is thread_id_t though, so we need to read a pointer-sized value via READ_TLS_SLOT_IMM, rather than changing these locals to ints. Maybe have a READ_TLS_TIDSZ_SLOT_IMM or sthg.", "pred": "Fix a typo in a comment."}
{"gold": "Don't use ! in the messages because it isn't used on xplat. There is a SOSPrefix define that can be used (blank on xplat and ! on Windows). Do we really need 3 newlines?", "pred": "Fix typo in comment"}
{"gold": "print out what we got here in the error", "pred": "Fix typo in dagster_home_path (#1005)"}
{"gold": "Does this need to be global?", "pred": "Fix typo in comment"}
{"gold": "Yep, could be simplified. Now looks like other *Map.values() impls", "pred": "Fix typo in TreeMap.values()"}
{"gold": "This method will be for debug?", "pred": "Fix test"}
{"gold": "// Key returns the private key for a specified name that was encrypted with the // provided password. If the private key does not exists it creates a new one // with a name and the password, and returns with `created` set to true.", "pred": "Fix import"}
{"gold": "Adding the type hints revealed that it was necessary to distinguish between a ``PackageEntity`` and a ``ClassEntity``, because the ``ClassEntity`` has additional attributes that were dynamically added in the previous code, which confused ``mypy``.", "pred": "fixing the class diagram"}
{"gold": "These two functions should be available now.", "pred": "DOC: Fix typo in pandas.DataFrame.blocks (#25814)"}
{"gold": "`fi` is what the result of Stat is called elsewhere in this file not `finfo`", "pred": "Fix typo in comment"}
{"gold": "I'm confused; are we just dropping these methods without deprecation?", "pred": "Fix typo in spec"}
{"gold": "can we use PC's time to version in Distributed Systems?", "pred": "fix(storage): fix add edge processor"}
{"gold": "is this \"unless\" actually needed?", "pred": "Fix comment date tooltip"}
{"gold": "We don't accept empty words for lookup anymore, again", "pred": "LUCENE-8252: Fix typo in javadoc"}
{"gold": "We'll have to account for CI installations being faster than local ones. Do y'all think we should leave it at < 30 green / < 50 orange | >= 50 red or lower our thresholds?", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "No need for this to be `W3C_` since there is no JWP equivalent", "pred": "Add new command for getting window size"}
{"gold": "As far as I can tell, there's nothing that creates an instance of `Random` or that calls `rand` or `seed`. Am I missing it? If not, let's remove the `Random` class since we don't really need it and we can move the definitions of `shuffle` into `RSpec::Core::Ordering`. One less type :).", "pred": "Fix typo in Ordering module doc"}
{"gold": "Is this ever actually used?", "pred": "Fix typo in comment"}
{"gold": "this section of the codebase should be noted as a candidate for caching, and as a place where multiple tipsets is making things extra tricky", "pred": "fix: waiter receiptFromTipSet"}
{"gold": "Do we need to save the existing value of the stolen reg somehow?", "pred": "i#1504: Fix typo in comment"}
{"gold": "maxResults should come from FLAGS once #244 is submitted.", "pred": "Fixing lint errors in admin_directory_client.py"}
{"gold": "is this wanted?", "pred": "Fix typo in test collection name (#1077)"}
{"gold": "What exception is actually happening here? AFAIK `pytest.importorskip` with just return `None` if there's nothing to import. Which means that this check'd always return `True`. `pytest.importorskip` is specifically designed to trigger skipping the current test anyway so I don't know why you would wrap it like this.", "pred": "Fixing a bug in the docker_utils.py"}
{"gold": "Does it send requests with urlencoded bodies anywhere? I thought it sends only json. Maybe content-type should be `application/json` by default?", "pred": "JariBakken: Fix typo in comment"}
{"gold": "I'm not sure about adding more flags here when we're trying to simplify things, I thought we were going to check for patches changes to decide if we needed to update or not?", "pred": "Fix typo in help message"}
{"gold": "`testExecutionPb` is a global variable (from `gochecknoglobals`)", "pred": "fix test"}
{"gold": "~Method is public and removing it would be a BC Break, you can deprecate it if you want.~", "pred": "Fixing image provider"}
{"gold": "this got me a little confused when reading `build.log`. The err is printed with a log.Error later on but that ends up after the stack trace.", "pred": "Fix panic in interpreter"}
{"gold": "Can we make these more explicitly for Rust only? It seems like JS and Go use flags with their name in them.", "pred": "Fix typo in usage string."}
{"gold": "Should unsupported query parameters just be ignored? I think that's more common than error out.", "pred": "blob/gcsblob: fix comment"}
{"gold": "Actually can we avoid mentioning `Register._UNSET_NAMESPACE`. I thought of it as an implementation detail of the simpler concept of \"being unset\". Perhaps the docs become more natural if we remove the \"If called without arguments or with ...\" part and just say \"you have to call this function without arguments at the end of any file it has been used. That is to ensure blah blah\". Something like that. Just a suggestion.", "pred": "Fix typo in docs"}
{"gold": "I assume it raises COMError? If so perhaps best to just catch that specifically, so as to not hide other more critical errors.", "pred": "Fix for #100: Quicknav iterator now works with multiple selection."}
{"gold": "Since minify can generate errors, it should at least go after the errors middleware. And you definitely don't want to be minifying after the gzip writer has closed.", "pred": "caddy: update directives list"}
{"gold": "nit: we could remove the `config` field as it is a duplicate of the `provider.config` field.", "pred": "Fix typo in comment"}
{"gold": "Nit: from the Internet.", "pred": "Fixing the forseti server installer"}
{"gold": "this is internal package, move to bottom and run 'make fmt'", "pred": "fix: import path of bip39 (#1064)"}
{"gold": "Why is this better than ApplicationStopping?", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Maybe worth expanding that these 2 are supported by cert-manager but other values exist", "pred": "Fix typo in challenge type"}
{"gold": "Why was this merged? It should have raised some questions IMO @core23 @OskarStark . It's already in 3 releases now, so we can't revert it can we? How can we fix this? Please have a look at #1065", "pred": "Fixing the media extension"}
{"gold": "What if `node.jsonRpcConfiguration().getAuthenticationPublicKeyFile()` is empty string, would that cause a problem here?", "pred": "Fixing typo in ProcessBesuNodeRunner"}
{"gold": "The `omitempty` struct tag does not do anything for non-pointer structs. I think we may need to consider making both of these fields pointers, so that they are excluded from output when not set, and also to make it easier to compare to the zero value. That said, I'm happy to merge this now and open an issue to verify the behaviour is as we want ahead of cutting v0.6.0.", "pred": "Update certificate.go"}
{"gold": "I think this is should absolutely be `==`, as the interface cannot control the implementation of equals (and it's part of the contract of the enclosing function). Can we add this interface to the exceptions of the rule?", "pred": "Fix typo in error message"}
{"gold": "It looks like the UID is the only other thing that we use from `namespace`, so I suggest to copy that out and lose `namespace`, so we don't have to worry about setting it to nil.", "pred": "Fix typo in comment"}
{"gold": "Can we define this constant in the`deploy` pkg instead? this would allow us to keep it private", "pred": "Add BitbucketV1 provider name"}
{"gold": "I don't like this fixture name, should be a noun like `initialized_linter` ? But it's outside of the scope of this MR.", "pred": "Fix typo in test_pylint_plugin.py"}
{"gold": "Could we keep this as a static reference (JsonPrinter.jsonAsDatasetDto(releasedVersion); and perhaps change the constructor line to just be a static set method and use that here instead? (I suspect it was the warning that 'static methods should be accessed in a static manner' from my IDE that caused me to make this change in the first place...) (I can make a PR to your branch if you want.)", "pred": "Fixing export service"}
{"gold": "Keys.COMMAND seems to be an alias to Keys.META. That isn't mentioned?", "pred": "JariBakken: Fixing javadoc."}
{"gold": "This should go in `ConfigLocal` (and then re-generate the mocks).", "pred": "Fix typo in comment"}
{"gold": "Nitty but entry.get for the same thing", "pred": "Fixing release test case"}
{"gold": "Might not hurt to mention the function never returns (since this all ends in `execve`) so `main` never actually runs.", "pred": "fix: remove unused import"}
{"gold": "nit: add new line after this block", "pred": "Fix typo in KestrelServerOptionsLoggerExtensions (#12555)"}
{"gold": "I believe there is some javascript that also uses this 60px number for calculations. I think I'd rather keep the number in px instead of rem to make that correspondence easier to see. If 3.25rem != 60px, can you also change the other place where `60` is used to in the JS?", "pred": "Fix #1088: Toolbox menu text is not visible in Firefox"}
{"gold": "retrying is an installed 3rd party library just like jinja and sendgrid; perhaps try grouping all of them together?", "pred": "Fix import error in sendgrid_util.py (#100)"}
{"gold": "you could always use List.listIterator with previous() and hasPrevious() to traverse all kinds of j.u.List backwards. No need for special cases for ArrayList and Vector.", "pred": "Fixed a bug in List.reverse()"}
{"gold": "remove the bitmap of index 1 from the list not the 0th one. because when we keep on undoing, it would be better if we end up with the original image rather than some randomly edited image. I am not sure whether only just removing bitmap from the list would clear memory. I think you should call bitmap.recycle before removing that bitmap from the list.", "pred": "fix: fix out of memory error"}
{"gold": "this is a existing file so let's keep 2019", "pred": "Fix license header (#10)"}
{"gold": "can you change this instead to just `type.toString()` and then you wouldn't have to expose the getBitMask in the enum. (Alternatively you could have used `type.hashCode()` but that doesn't feel as nice)", "pred": "Fixing RemoteNetworkConnection"}
{"gold": "AsReadOnly() would be better here", "pred": "Fixing test"}
{"gold": "I suggest that we use `query_based_sync` instead of `partial_sync`.", "pred": "Fix typo in Collection.js"}
{"gold": "How does the user use this? By converting the type using `As` function and add the header? Maybe add an example on how.", "pred": "azureblob: fix typo in comment"}
{"gold": "I'm trying to understand the effects of this change. Is setting this to something other than the old default (that is, `initCodeTransformer = new InitCodeTransformer()`) generally necessary, or are we doing this only to support Python?", "pred": "chore: remove commented out code (#108)"}
{"gold": "\"Constructor\" isn't a standard term in Go or this project, although we use it informally amongst ourselves. And I think it will confuse people coming from languages like Java. So can we leave this as it was?", "pred": "docstore: fix typo in docstore.go"}
{"gold": "Why do we have to change the test dir?", "pred": "[test] Fix test_ctu_failure.py"}
{"gold": "This should test the flattened tree instead. details > summary works across shadow tree boundaries.", "pred": "Fixing a bug in dom.isNativelyFocusable"}
{"gold": "Not sure I am a big fan of these duplicated Log classes.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "It's long-winded, but the convention is to give constants a common prefix which, see `reasonDomainVerified` .", "pred": "acme: fix import path"}
{"gold": "Using lanes later down, this threshold could be reduced for similar effects. Otherwise we look a bit to far.", "pred": "Update constants.h"}
{"gold": "Let's get more verbose about names. struct `wq_conda_environment`: if it can really only be used for conda. struct `wq_software_environment`: if it has potential use outside of conda.", "pred": "Fix typo in comment"}
{"gold": "Should we set this back to `false` inside each `t.Run`? so that we can have more than one testcase that can have paginated responses", "pred": "Fix test"}
{"gold": "What about using `dataManifests == null || deleteManifests == null`?", "pred": "Fix typo in javadoc"}
{"gold": "The `HitsThresholdChecker` should be created once and shared within the collectors ? We also don't need to use the `GlobalHitsThresholdChecker` if the executor is null or if there is a single slice.", "pred": "LUCENE-5744: Fix javadoc"}
{"gold": "move this to below `antrea.io` import section", "pred": "Fix import path for intstr"}
{"gold": "Seems likely to confuse people. What if we moved it into ActivitySourceAdapter and made it private?", "pred": "Fix typo in ActivityExtensions (#1054)"}
{"gold": "gas price don't need to be a multiple cuz we support allll gas prices now", "pred": "ethapi: fix typo in comment"}
{"gold": "We are exposing implementation details in the interface. What if there is no processes involved in an implementation of `ITestRequestSender`?", "pred": "Fixing the build break"}
{"gold": "It would be awesome not to handle the broad exception here. Instead, raise a custom exception, something like `ModelNotSetException`, from the `require_model()`, and then handle it here with a nicer message to tell the user to set the model first.", "pred": "Fixing the error message"}
{"gold": "This already exists under the `theme` lang key, please remove this.", "pred": "Update messages.php"}
{"gold": "Let's add a simple inline HOC around the default export below to provide the value as a prop (no need to introduce a reusable function for this yet).", "pred": "Update SetupUsingGCP.js"}
{"gold": "I believe that you end up printing out the result of the assignment here instead of the netmask.", "pred": "Fixing the Vagrantfile template to use the correct network interface"}
{"gold": "We have to update the filename here.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "The `--cpp-field-case` looks like `--cpp-field-style` instead of `-case`. - 'unchanged' - leave unchanged (default); - 'upper_camel' -upper camel case; - 'lower_camel' - lower camel case.", "pred": "Fix typo in --cpp-std help text."}
{"gold": "I haven't thought about this a lot yet, but if we were to try this change, we'd still need to keep the code to delete it from the `.origin` file for backcompat.", "pred": "admin: Fix typo in error message"}
{"gold": "In my opinion I think it is possible to add `private final` here", "pred": "Remove unused import"}
{"gold": "Feel like \"exit\" doesn't convey that the packet will be dropped. \"drop-and-exit\" or \"error-exit\" maybe?", "pred": "Fix typo in comment"}
{"gold": "How do you feel about \"The Main actor\" instead of \"A Main actor\", while we're already here changing the message?", "pred": "Fix typo in error message"}
{"gold": "I cannot see that this new permission is used anywhere? And if the new zk handler is covered by `zk-read`, should not also existing `ZookeeperInfoHandler` handler implement PermissionNameProvider and declare the same permission, for consistency?", "pred": "[BACKLOG-20856] - fix permission name provider"}
{"gold": "Is this reasonable?", "pred": "Fix as_spark_type for np.ndarray"}
{"gold": "We may move this TODO to Line15.", "pred": "Update autoaugment.py"}
{"gold": "You have to verify the return type. If it's a reponse, return it. Otherwise do nothing.", "pred": "fix bug"}
{"gold": "No. Keep the header include and do `extern template ...` to skip the instantiation from that compile unit. (I pushed a fix directly to your branch)", "pred": "Fixing a typo in the Kokkos benchmark"}
{"gold": "these tests are currently somewhat nonsensical. This code expands to `a, b = {}.keys` when it really should be expanding to `a, b = {}.keys()` -- though fixing this causes the test to fail so I suspect something worse is going on here that I don't quite understand?", "pred": "Fix test_python3_checker.py"}
{"gold": "Why did this need to change?", "pred": "Fixing test case"}
{"gold": "/go/pkg/mod/golang.org/x/xerrors@v0.0.0-20190410155217-1f06c39b4373/adaptor_go1_13.go:16:21: Frame not declared by package errors (from `typecheck`)", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Probably doesn't go here because I think it's specific to the HTTP API layer. This class is too internal to declare such a name.", "pred": "SOLR-10687: Fix javadoc"}
{"gold": "in preparation of directly writing the /health endpoint one day.. we should have content checks.", "pred": "Fix ITZipkinMetricsHealth (#177)"}
{"gold": "question (non-blocking): Is there a benefit from using `%q` instead of `%s`?", "pred": "Fix typo in comment"}
{"gold": "I would suggest to keep two empty lines between functions in cpp files", "pred": "fix bug"}
{"gold": "This change causes the test to fail on both rocm-1.9.x and rocm-head.", "pred": "Fix typo in test name"}
{"gold": "I'd consider moving all fix related stuff to a distinct package to avoid contaminating the base package", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Use `os.path.join` for path concatenation.", "pred": "Fix typo in comment"}
{"gold": "Use upper case: YOLACTHead, YOLACTProtonet, YOLACTSegmHead", "pred": "fix: remove unused import (#7222)"}
{"gold": "The driver tests should be updated to use the concrete type instead of the driver directly; right now your test coverage of the concrete type is 0%.", "pred": "fix: update test harness to use new key id"}
{"gold": "I would prefer the message to be more actionable. Like 'There should be no space between & and the variable name' or something similar.", "pred": "Fixing a bug in the comment analyzer"}
{"gold": "The image attribute is not supposed to be the text of the node. I'd rather keep it separate (the previous `@Text` attribute was fine). A practical reason for that is in the future, other languages may have a way to get the text of their node, in which case that wouldn't be fetched with `getImage`, for compatibility, but probably with a `getText` method, or `getSourceCode` like in #1728. Also we *may* deprecate or otherwise put `getImage` out of use as soon as 7.0, given its contract is super loose.", "pred": "Remove unused import"}
{"gold": "The `[] +` seems weird to me. Why is it there?", "pred": "Fixing the rspec_config.rb file"}
{"gold": "Not sure if this constant is defined at the right place style-wise. Maybe move it up to before 'belongs_to' like DISCOUNT_TYPES in coupon.rb?", "pred": "Add validation for email uniqueness"}
{"gold": "What about a line with just spaces/tabs? Or a line with a couple spaces followed by a `#`?", "pred": "Fix typo in comment"}
{"gold": "if funder_is is not blank (L375) there is not need to check if org_id is not blank (L379) since you will never enter in the if (L374).", "pred": "Fixing bug in OrgAdmin::TemplatesController#index"}
{"gold": "Don't need this-> here.", "pred": "Fix crash when auto-attacking"}
{"gold": "I'm a little concerned about relying on a private module, as they could change the implementation at some point, I'd like to have some test to validate this is working as intended.", "pred": "Fixing import error in metadata_server_test.py (#2175)"}
{"gold": "There might other values that we don't support here (eg. `[]`). So it might be safer to check for the supported types instead (string or number).", "pred": "Fixing bug in resource.py"}
{"gold": "FYI, It won't have any benefit to move from trivial types.", "pred": "Fix bug in GoExecutor::prepareFrom()"}
{"gold": "i missed these discussions- but ` \"secrets-ssm-environment-variables\"` is what was agreed upon with cp?", "pred": "fix(agent): fix typo in capability name"}
{"gold": "whats the difference between this package and `github.com/golang/protobuf` ? or did vscode just decided this was the package it wanted to used?", "pred": "fix: remove unused import (#1175)"}
{"gold": "Just asking: What does this line do? Does it add the stylesheet from the parent to the dialog?", "pred": "Fix typo in RepositoriesPanel"}
{"gold": "Including the scikit-learn dependency here would pull in scikit-learn for everyone who depends on Dagster. If you put it in the setup.py under docs_snippets, we'd avoid that problem (although I think it's already there).", "pred": "Bump tox-pip-version from 0.0.7 to 0.0.8 (#100)"}
{"gold": "Why remove this?", "pred": "fix bug"}
{"gold": "Why remove this? It seems like we should keep this around as a regression test, unless we can guarantee this will never be called without a model set (does your new code guarantee that?)", "pred": "Fix test_completion_item_focus"}
{"gold": "Because this defaults to `{}` if `global._googlesitekitUserData?.permissions` is `false`-y, the checks below around `state.capabilities` always result in the `!! capabilities === true` path. This shouldn't have a default value of `{}` if there's the possibility that `global._googlesitekitUserData?.permissions` can be `undefined`/`false`/`null` legitimately.", "pred": "fix(permissions): fix typo in permission error action type"}
{"gold": "Please add a space after the comma here (generally, with arguments there's always a space after commas).", "pred": "Fix bug in repeat_command"}
{"gold": "From the context, should it say \"Flags defined in this class must be used with caution...\" ?", "pred": "Fix typo in ExperimentalEIPs class javadoc (#2977)"}
{"gold": "We don't need this file, we can use the one that is in the grid-ui directory", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "\"Exported key for account\"?", "pred": "Update i18n.go"}
{"gold": "Normally we use Environment.NewLine unless you really want it to always be \\r\\n", "pred": "Fix #1050: Add .tsv to the list of supported file extensions"}
{"gold": "why did you remove `verifyHeaders`?", "pred": "Fix typo in comment"}
{"gold": "Thanks for cleaning up these deprecated calls", "pred": "Fixing the issue with the registration controller"}
{"gold": "@akarve this breaks error catching logic on the front end, I'll fix this. That's why I prefer to use some machine-friendly error codes that won't change frequently.", "pred": "Fix bug in user creation"}
{"gold": "We support process remoteQuery for Service. Why are we removing it ?", "pred": "fix: fix resource type"}
{"gold": "This is specifically for testing?", "pred": "(maint) Fix typo in transport_api"}
{"gold": "I think this is related to the social stats and probably does not need to be removed.", "pred": "fixing tags controller"}
{"gold": "Yep, jsdoc again .. It seems that when the plugin description is wrapped within `eslint-disable/enable` expression it's not generated at all. After adding the `@class AutoColumnSize` tag right after the `@plugin` tag the plugin appears in the docs. Please review the other plugins.", "pred": "fix(autoColumnSize): fix import"}
{"gold": "This usage of the result doesn't look quite right. I would not expect the first page of values to be empty if there were multiple pages of results. This also obscures the error case when no values are returned (handled in the next `if` block) by returning a more generic error from the Azure SDK from `result.NextWithContext()`.", "pred": "fix: azure client GetVirtualMachineResourceID"}
{"gold": "unknown field AddressDetails in struct literal (from `typecheck`)", "pred": "fix: typo in GetBlockOrActionByHash (#100)"}
{"gold": "Just noticed, are we specifically missing the addition of `SharedConfigState: session.SharedConfigEnable` ?", "pred": "Fix typo in comment"}
{"gold": "Not sure what this is. Bad merge?", "pred": "Fix for #1012: 100% CPU usage when opening a .sky file"}
{"gold": "I think this may be a RW lock.", "pred": "Fix typo in comment"}
{"gold": "Perhaps we should tuck this away into a dedicated subdir and name it `config` or something similar? Or maybe it would be happy living in `common`?", "pred": "pluginhelper: add comment"}
{"gold": "Doing a select query inside of a loop like this is not ideal. We should fetch recipes once and then loop through it in memory to perform this check", "pred": "Fix crash when searching for recipes"}
{"gold": "too long here. (104 > 100)", "pred": "[SPARK-35649][PYTHON] Fix the docstring of Index.to_numpy (#32024)"}
{"gold": "Use TryGetValue instead of catching exception", "pred": "Fixing a bug in the subprotocol handler"}
{"gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "pred": "Add test for mentor edit"}
{"gold": "I think this method should be either: - a static method of `RTPSWriter` to avoid a StatelessWriter redefinition of the function. - a setter in the `CacheChange_t` struct.", "pred": "Fixed a typo in the comment."}
{"gold": "You add a stream back reference for trailers, and all of the sudden we have tight coupling!  ", "pred": "Fix typo in Http2OutputProducer.cs (#1007)"}
{"gold": "I don't think we use `AspNetAmbientContext` anymore since . We can probably delete this file.", "pred": "Fix missing using (#1249)"}
{"gold": "Please avoid committing build artifacts, as they produce unnecessary conflicts and noise.", "pred": "Update bundle.js"}
{"gold": "this is vendored code so i would hesitate to make random changes to it", "pred": "Fixing a bug in the retry wrapper"}
{"gold": "We are using a different style for JSON tags. `ethAddress` - camalCase `referral_code` - snake_case", "pred": "fix: payoutInfo struct"}
{"gold": "Should this be `\"Microsoft.AspNetCore.Http.DefaultHttpContext\"`?", "pred": "Fix HttpContext integration name (#1007)"}
{"gold": "removed asserts from `Vector` as it's stable enough and it may hinder inlining, even if turned off :/", "pred": "Fix ArrayType.grouped() javadoc"}
{"gold": "Do we want to raise on the function or on the decorator?", "pred": "Fix typo in comment"}
{"gold": "How complex is to to replace `album_*` with `release_*` everywhere in the `Listen` class and places that use it?", "pred": "fix listen model"}
{"gold": "You haven't changed any of the callers of `.Add` to check the return value, so we're now ignoring duplicates. Please fix that.", "pred": "fix(namespaces): remove unused code"}
{"gold": "@straker should this not push to `vnode._cache.isHiddenWithCSS`?", "pred": "Fixing isHiddenWithCSS to return true for display: none"}
{"gold": "\"an interface\" in conceptual sense vs \"interfaces\" or \"set of interfaces\", referring to the Go interfaces - database/sql uses the latter, should we?", "pred": "runtimevar: fix typo in driver package doc (#1785)"}
{"gold": "This now checks nearly all errors that can occur. How about explicitly listing cases where we want it to retry? I think there are not many cases where we want that, as the many added conditions in the last years show :)", "pred": "Fix: DownloadService: wrong variable name"}
{"gold": "Can you make this accept an action instead?", "pred": "kbfs: fix a typo in prefetcher.go"}
{"gold": "Tab inconsistency here (3 spaces instead of 2 spaces)", "pred": "Added a step to check for the presence of a link with a specific text"}
{"gold": "these change means we are changing epoch to 1 hour?", "pred": "update genesis config"}
{"gold": "Why this is defined in the middle of imports?", "pred": "Fixed import error"}
{"gold": "Could you move this to the original position?", "pred": "Fix import error in test_utils.py"}
{"gold": "Is there a test that'd have caught this?", "pred": "Fix typo in source.go"}
{"gold": "ListWorkflowExecutionsRequest <- this can be nil?", "pred": "Fixing test case (#1035)"}
{"gold": "Do we need to continue to support the old link, or is it dead dead dead?", "pred": "(maint) Fix stub_forge_on to use the correct hostname"}
{"gold": "Do we need `ConcurrentDictionary`? `Dictionary` can be safely read from multiple threads. See `GlobalTags`.", "pred": "Fix typo in comment (#1007)"}
{"gold": "this seems like more of a Debugf statement", "pred": "Fix typo in comment"}
{"gold": "We're capturing cb_state non-const, but the function is const so, safe enough, but after going to reader/writer locks we're all going to have to key a careful eye on anything in this pattern.", "pred": "layers: Fix typo in comment"}
{"gold": "Probably want to wrap the endpoint discovery work that follows in this `if` statement instead of returning early. This will make it easier to add additional request code generation logic in the future. e.g. if we add any code generation after the endpoint discovery block this check will cause it to be skipped.", "pred": "Fix typo in test name (#2657)"}
{"gold": "This test was giving a false positive because my change caused it to throw a different error that contained `createElement` when it should've been throwing this error. Caught this by looking at the code coverage and noticing that the line under the condition I changed was no longer covered lol.", "pred": "test(debug): add test for #100"}
{"gold": "I think this is added to wrong file. You wanted to add to cmd/agent/, right?", "pred": "Fix typo in comment"}
{"gold": "Each `ExpectedCondition` implements `java.util.Function` These are expected to be stateless. This condition will leak previous `elementText` on the second usage, which doesn't seem ideal.", "pred": "Fixing ExpectedConditions.java"}
{"gold": "Could we consider a more explicit name, like `devicePciAddress`?", "pred": "Fix typo in comment"}
{"gold": "Why change this from a foreach? I can't see it gaining anything here and code styles shouldn't change just for the sake of it.", "pred": "Fixing a bug in the WindowsUtils.quote method."}
{"gold": "Is this supposed to be part of this PR?", "pred": "fixing solr service"}
{"gold": "DRY, worth extracting this method to axe.utils", "pred": "Fixing linting errors"}
{"gold": "I think there's another spot for this in DefaultCapabilityMatcher", "pred": "Add a new capability to the interface"}
{"gold": "`QtOSError` inherits `OSError`, so I don't think it's needed to list them both here.", "pred": "keyconfig: fix saving key config"}
{"gold": "Instead of patching vendor, let's update the version of sdk-go to a more recent one that doesn't have this line.", "pred": "Fix typo in comment"}
{"gold": "Don't think this should be here. The default is set somewhere else.", "pred": "Fix typo in default config"}
{"gold": "Not really important in this PR, but does BlazeMeter describe \"progress\" values anywhere? It might be nice to have a set of constants like `PROGRESS_DOWNLOADING_IMAGE`, `PROGRESS_BOOTING`, `PROGRESS_RUNNING_TEST`, etc in our BZA client.", "pred": "Fixing cloud test"}
{"gold": "nit: `<p>` after the line", "pred": "Fix javadoc"}
{"gold": "Should we include the files with otf extension here, too? If not, I wonder why we do allow them in the source but we don't include them as per the setup", "pred": "Fixing the setup.py file to include the new files."}
{"gold": "i think it's OK to leave this?", "pred": "fix: remove unused code"}
{"gold": "Does this need to be public? The only reference to `FlinkTypeVisitor` that I see in this PR is here, so I'm not sure why this is needed.", "pred": "[FLINK-26775][table-planner-blink] Fix import order in FlinkTypeVisitor"}
{"gold": "No line at end of file warning", "pred": "Fix #10556: NVDA menu: \"Exit\" is not translated in French"}
{"gold": "This looks unused, shouldn't it point to inner processor in any way?", "pred": "Fixing namespace"}
{"gold": "There may be a few isolated cases where the FirstN node is added during preCodeGen. Please see GenPreCode.cpp RelRoot::preCodeGen(). The example given there about Order by where sort is added in optimizer, or a FirstN where the N value is to be specified with a param seem to be cases where we would add the FirstN later. Will current change cause such views to marked as updateable? This is minor and could be resolved later, if any change is necessary.", "pred": "Fix for bug 10-010110-1111 (RelRoot::isUpdatableBasic() was not checking for a FirstN node)."}
{"gold": "I think you should compose the %sClient part using the Name class, and then do the remaining composition with plain concatenation. Side question: why does the return type name look like it is a client type name?", "pred": "fix: go surface namer"}
{"gold": "All stories in this file also need the default padding.", "pred": "Update PageSpeed Insights stories to use new HOC."}
{"gold": "Curious - what would be the actual value?  ", "pred": "Fix typo in test name (#2070)"}
{"gold": "Is it necessary to record the palette in the checkpoint? Any reason?", "pred": "Update train_detector.py"}
{"gold": "Not sure how to best do this without creating a new connection to the server everytime. Do this in another thread?", "pred": "Fix import"}
{"gold": "should we have a similar test for gsa18f procurements?", "pred": "Fixing spec"}
{"gold": "change `v.recipient` to address.Address, so can use `AccountState(v,recipient)`", "pred": "fix: test"}
{"gold": "Open to doing away with this altogether and maybe injecting this logic somehow into `requires_approval_notice?` in LinearDispatcher.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "remove this and always enable tracer, just set the default timeout to something higher (20 seconds)", "pred": "Fixing typo in JsonRpc config"}
{"gold": "Can we give this field a more descriptive name? When I use a variable named `icon` I normally expect an `Image` object.", "pred": "Fixing scriptDTO"}
{"gold": "can't these just use the global `include` and `exclude` flags?", "pred": "cmd/build: fix typo in help text"}
{"gold": "Is this still necessary?", "pred": "Update bbox_util.py"}
{"gold": "Interesting! Happen to catch an exception message or anything I can look into?", "pred": "Fix typo in prometheus example (#108)"}
{"gold": "did this get moved to mpromise? I don't recall if it's in that lib or not.", "pred": "Fix typo in Promise.prototype.resolve"}
{"gold": "json objects should be `camelCase`", "pred": "Fix typo in provider mode config"}
{"gold": "QuarterGiBSectorSize? SectorSize265MiB? Spelling out 256 seems overly verbose.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Maybe with this change we can remove `using OpenTelemetry.Logs`.", "pred": "Fixing LogRecordTest.cs (#1005)"}
{"gold": "Fix this name too.", "pred": "Fixing a bug in the add project handler"}
{"gold": "why this is an issue?", "pred": "BibFormatObject: fix for record_get_field_value()"}
{"gold": "The condition should be inverse?", "pred": "Fix typehint"}
{"gold": "this seems to be a property key name, so should it be a inside configurationkey.java?", "pred": "Update Constants.java"}
{"gold": "G204: Subprocess launching should be audited (from `gosec`)", "pred": "Fix volume destroy"}
{"gold": "Please add docs here. And also warn users that this mode should be avoided whenever possible, because any blocking IO will make the keep-alive-thread not run.", "pred": "Fixing a bug in the Task class"}
{"gold": "We shouldn't require dimension values to be a string. They just need to be scalar values (probably we could check whether it's either a string or a number). Something more important to cover in the validation here though is to ensure that a map of `dimensionName => dimensionValue` is passed. The keys here actually need to be strings. For example someone shouldn't be able to pass an array of values.", "pred": "Fixing typo in isValidDimensions"}
{"gold": "let's do a pointer cast of nil, similar to the `MapRouter` above", "pred": "Fix import path in router.go"}
{"gold": "action should use a prefix of `hfg` rather than `neve` as we plan to bootstrap this as a standalone library. Moreover, previously filter/actions used in this library was using the same pattern.", "pred": "Fixing the builder"}
{"gold": "I'm halfway tempted to disable this for all https connections. Do you know of any clients that actually renegotiate for any reason?", "pred": "Fix typo in comment (#1958)"}
{"gold": "shouldn't **call** return a boolean?", "pred": "Fixing a bug in the visibility_of_all_elements_located class."}
{"gold": "I don't think you need the blank import here. This one uses awsdynamodb directly.", "pred": "docstore/awsdynamodb: fix example"}
{"gold": "I think this should be initialized to `null` instead of a predicate. There is no need to run an extra predicate (with an extra method dispatch for each row in a data file. That's a tight loop so we should do more work here to avoid it. Instead of using `isDeleted.or`, this should test whether `isDeleted` is `null` and either initialize `isDeleted` or call `isDeleted.or`.", "pred": "Fix typo in DeleteFilter"}
{"gold": "What is this and the next entry in config_handler used for?", "pred": "[analyzer] Fix clangsa_args_cfg_file handling"}
{"gold": "will your editor integrate `gofmt`, `goimports`, etc...?", "pred": "upstreamca: fix typo in comment"}
{"gold": "looks like the code is not properly formatted. for example here are some missing spaces in **if** command. please take care and reformat the code using default android formatting.", "pred": "fix: product photos fragment"}
{"gold": "Please add some valid examples to help message like `\"4:10\"`, `\"4:\"`, `\":10\"`", "pred": "Fixing a bug in the filtering arguments."}
{"gold": "Is it only Symbols we're worried about converting? Is it not safe to just call `to_s` anyway?", "pred": "Fix typo in deprecation message"}
{"gold": "Note for those who come across this later: It was moved to `testhelpers.mining.go` so that `testhelpers.NewDaemon` and the `mining/worker_test.go` can share it.", "pred": "fix: remove unused import"}
{"gold": "What about `sort_by(&:in_progress?)`? Maybe with a `.reverse` thrown in?", "pred": "Add missing end to class"}
{"gold": "Flag is removed because it is only gRPC now.", "pred": "fix(cli): add missing flag for grpc"}
{"gold": "Might be better to rephrase to: Please refer to the ``init scenario`` command in order to generate a custom ``molecule`` scenario. Since you aren't customizing the default scenario since it already exists, right?", "pred": "Fixing typo in role init command"}
{"gold": "Shall we merge these `if` for `path lib` and then do the `attrname` one. I'm trying to count `if`-calls and its getting late but I think we can reduce the number checks needed to get into L648 from 3 to 2 if you understand what I mean  ", "pred": "Fix a bug in the encoding checker"}
{"gold": "why depend on recovery???", "pred": "fix: import path for tags package"}
{"gold": "the done channel only aims to be closed, so `chan struct{}` is better then `chan interface{}`", "pred": "Fix comment"}
{"gold": "Do you mean to have gas_oracle changes in this PR?", "pred": "Fix typo in comment"}
{"gold": "Is this effectively requiring browsers support javascript?", "pred": "Add form to email modal"}
{"gold": "Lowercase `boolean` - use the primitive type.", "pred": "Fix lint error"}
{"gold": "This isn't the correct logic. if allowOverride == true and !blobExists then upload. Just don't do the exist check if allowOverride is set to true.", "pred": "Fixing the build"}
{"gold": "Can you replace these by `else if` please?", "pred": "Fix typo in comment"}
{"gold": "Would be nice if the field had a unique class name that could be used to target it, instead of `fromRange`   But doesn't seem to be a common thing in the code base.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Does this code fit on one line under 80 characters? It would be more consistent with our existing style.", "pred": "Fixing a bug in the header checker"}
{"gold": "Not a requirement here. But i see a change in naming convention. We can rename the function to `CstorSparsePoolArtifactsFor070`.", "pred": "Fixing the typo in the comment"}
{"gold": "Why do you configure the UART like this? It's already configured by default.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Wow. Good catch. \"This `#include` was brought to you by the department of redundancy department.\" ;)", "pred": "Remove duplicate include"}
{"gold": "Well it's actually calling `AuthorizeOrder` and this seems like a DebugLevel message to me, maybe it should be dropped entirely.", "pred": "Fix import path for acme package"}
{"gold": "Should this be using the `CUDA_SAFE_CALL` macro here?", "pred": "Fix a bug in cuda_resize_scratch_space"}
{"gold": "What cases do you see as being valid for not having any tests to run? If a test project doesn't have any tests to run we should avoid running it at the project level.", "pred": "Fixed a bug in the console runner where the wrong assembly was being reported as having no tests to run."}
{"gold": "and is it possible that mset.mirror.msgs be nil? because if so, then you would get a panic also because of that.", "pred": "Fix race condition in stream.processMirrorMsgs"}
{"gold": "`next->opaque` should not be cleared.", "pred": "surface: fix typo in comment"}
{"gold": "already what? I know what, but seems like smth. is missing in this sentence", "pred": "Fix typo in comment"}
{"gold": "Can you put spaces after the `{`and before the `}`", "pred": "Fix proposal activity card"}
{"gold": "We said we would put `[ ]` around the version. `[forseti-security] [v2.3.0]`", "pred": "Fixing the log format for the syslog handler."}
{"gold": "Seems len(cnb[0]) will be the length after the write since of the *v thing we saw no?", "pred": "Fix typo in comment"}
{"gold": "can we make use of storagepoolclaim type rather than the generic interface{} type?", "pred": "fix: typo in comment"}
{"gold": "this should happen before the `go k.manage()`, otherwise the node will always try the bootnodes first", "pred": "fix: kad: fix typo in comment"}
{"gold": "Is this actually a lint related change?", "pred": "Fix bug in procedure definition"}
{"gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "pred": "Remove autoload for SchemaOrg"}
{"gold": "what does this do that str_param does not?", "pred": "Fixing a bug in the parameter parsing"}
{"gold": "For GCP we included the API name (see below) so you can distinguish between uses other than `blob` once they exist, WDYT?", "pred": "Update grpc_dial_option.go"}
{"gold": "what would you think about doing this include on-demand within S3ObjectStore methods and then failing in a loud way?", "pred": "Fix import"}
{"gold": "May be better make `stopped` atomic, then it can be just `for (auto i (node.store.latest_begin (transaction_a, next_frontier_account)), n (node.store.latest_end ()); i != n && && !stopped && elections_count < max_elections; ++i)`", "pred": "Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Re"}
{"gold": "In `src/storage/InternalStorageServiceHandler.h ` file, the client in `client->future_chainAddEdges ` should be InterStorageServiceAsyncClient?", "pred": "Fix a bug in GraphStorageClient::addEdges() (#1148)"}
{"gold": "`go.sum` needs to be updated for this. Please run `go mod tidy`", "pred": "Fix import path for namespace-labeler (#109)"}
{"gold": "Not sure if this was discussed previously, but is there a specific use case in mind for having this as an API field rather than a configuration option on the controller manager? Is there a specific use case in mind where one would want to choose different backends for individual Clusters/Machines vs having it a global configuration for an instance of the infrastructure provider?", "pred": "fix: add missing import"}
{"gold": "Same thing with the OtlpExporter", "pred": "Fixing the OtlpExporterOptions (#108)"}
{"gold": "Should not be removed.", "pred": "fix typo"}
{"gold": "Not a blocker for anything, but should this be moved to beaker-pe? Is that ticketed anywhere?", "pred": "(maint) Fix require path for install_utils"}
{"gold": "this shouldn't be beforeClickOn, but rather beforeSubmit? and added to WebDriverEventListener. Since submit does not synthesize the 'click' events, this isn't accurate.", "pred": "SimonStewart: Fixing the build"}
{"gold": "this ternary operator is hiding an `if/else` within an `if/else` - any chance we could move the logic ELSEwhere? (see what I did there -- ?? :100: )", "pred": "Fixing the email address for the NCR application"}
{"gold": "Is this really internal? Or will the API be different in PMD 7.0.0? Well, the interface doesn't offer much functionality anyway...", "pred": "Fix typo in javadoc"}
{"gold": "Does it have to be arrays? Isn't it ragged 'data' (i.e multiple elements of different lengths)?", "pred": "Added a default value for the gridded attribute."}
{"gold": "Per my understanding, this flag only impacts \"NoCleanup\" disk. If so, we may name it more clear. The reason of this ask is because I plan to add some other flag to force cleanup for other non-NoCleanup disks.", "pred": "Fixing a typo in the ovf importer"}
{"gold": "In my changes for `RequiresDistributionAndOrdering`, this class went away and is replaced by an inner class. I think that pattern worked well. Maybe we could do that before this one to reduce the number of changes here.", "pred": "[MINOR] Fix import order"}
{"gold": "Shouldn't this be called `hp` instead of `life`?", "pred": "Fix typo in item_parse_attributes.cpp"}
{"gold": "Because the default value of allowedOrigins is * (all origins), so it isn't necessary to set again at all.", "pred": "fix typo"}
{"gold": "Undo this modification", "pred": "Fix reload"}
{"gold": "Please check my thoughts here... I changed the test to not `ToString()` attribute values. This was important to test things when `net.peer.port` was both an int or a string, but I was unsure if Zipkin supported non-string attributes.", "pred": "Fix Zipkin exporter test (#1058)"}
{"gold": "Looks like you made changes on `CameraResultType` class, but didn't commit them. And you also have to do the changes on the types in @capacitor/core", "pred": "fix(android): fix camera plugin"}
{"gold": "Can you explain the history of the bug a bit, and why this fixes it?", "pred": "Fix build"}
{"gold": "What do you think about `mentor_mail_to` or `mentor_mail_to_link` in order to match Rails' `mail_to` method, which is what this calls? I'm not sure about this suggestion...", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Looks like this will make the check in every loop. Consider extracting the null check.", "pred": "Fixing a bug in the metric exporter (#105)"}
{"gold": "Maybe `it \"can safely be reset when there are not yet any shared example groups\"`? That's the edge case that wasn't working, right?", "pred": "Fix typo in spec description"}
{"gold": "naming: please use `asmfactory`", "pred": "Fixing import path for factory"}
{"gold": "FYI you could use a raw string for this which removes the need for escaping the inner quotes.", "pred": "Fix a bug in the Go client."}
{"gold": "2 blank lines here (between functions)", "pred": "Add test for get_selection"}
{"gold": "Nit: we try to avoid whitespace changes because they can easily cause unnecessary commit conflicts.", "pred": "Fix checkstyle"}
{"gold": "As mentioned below, I'm not sure why this is only allowing refs that are tagged with `*` at the start!", "pred": "Fix typo in comment"}
{"gold": "Don't forget the {} symbols, and please use EqualsBuilder and HashcodeBuilder as possible", "pred": "Fix typo in BackgroundRepository"}
{"gold": "Allocate buffer once outside loop.", "pred": "Fix test"}
{"gold": "It would be better to check that system.nodes[1]->network.port is somewhere in the target without specifying its exact position. But it is a very minor point and I have no string opinion on it just thought I'd mention it because our tests in general have too implementation detail.", "pred": "Add test for network filter"}
{"gold": "Should this be in a bundle?", "pred": "fixed typo in exception message"}
{"gold": "When Activity is lost (more precisely, ExecutionContext is lost) in the HttpModule we restore the root (HttpIn) Activity. That makes this assert invalid. I tried to fix the HttpModule so that it restores the Activity that was last running, but it is impossible to retrieve do to the way ExecutionContext works. It isn't an issue to remove the assert, but it is unnerving. Any instrumentation running in IIS reliant on Activity.Current could run into trouble.", "pred": "Fix typo in comment (#2276)"}
{"gold": "what was the point in moving handlers registration into a separate method?", "pred": "Fix typo in comment"}
{"gold": "At this point we probably want to ensure there's a store command set.", "pred": "Fix typo in comment"}
{"gold": "This code is way too complicated for what it does. I don't want to be a PITA, but what can you consider rewriting it in a simpler way? I'm talking about the whole `_getDerivationIndexes` function", "pred": "fix: typo in HDPrivateKey.js"}
{"gold": "Don't throw base exception, specify more precise type", "pred": "Fixing bug in sign method"}
{"gold": "Recursive -> Recursively converted -> convert", "pred": "fix: remove unnecessary import (#102)"}
{"gold": "why is this object API only? I think the reason why we didn't do this before was because this code was shared with Java which doesn't have value structs.", "pred": "Fix for #5000: C# generator generates invalid code for structs with no fields"}
{"gold": "just to confirm, so backend will deal with both old format and new format?", "pred": "fix(acs): fix acs url"}
{"gold": "huh, look at that, I wasn't aware you could constrain a type by Enum", "pred": "Fixing the build"}
{"gold": "Even though the debug parameter is effectively ignored, should this default to `false` instead of `true`?", "pred": "Fixing a typo in the python bindings"}
{"gold": "What is the purpose of this interface? Unlike ParamDocView, it doesn't seem to be used anywhere to enable polymorphism", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "We added a library to generate a UUID for the request_id directive \"github.com/nu7hatch/gouuid\" can we uses the same one for what you want rather than add another dependency? Or if the google one is better can we remove the nu7hatch library?", "pred": "Fix import path"}
{"gold": "Shouldn't this be `i * Interval`? You're multiplying nanos with a Duration, I'm not sure what's the result :)", "pred": "Fixing a bug in the pinger"}
{"gold": "I guess it's not no-access to match Windows where guard pages are readable.", "pred": "Fix typo in comment"}
{"gold": "Not a blocker, but would probably be useful to have a `scope :non_pending_approvers` on the `Proposal` model.", "pred": "Fix bug in proposal approval"}
{"gold": "Add trailing comma", "pred": "Added a comment to the TaskProcess class."}
{"gold": "I see someone say SIGKILL can not be caught by process. The original code here about `SIGKILL` is useless?", "pred": "fix(modules): fix modules start"}
{"gold": "As it is a mobile only theme, please make sure the option appears only on mobile", "pred": "Fix: Settings: Fix typo in setting name"}
{"gold": "Would like a docstring and type annotations here", "pred": "Fixing a bug in the get_non_negative_param function"}
{"gold": "This is an API change. Why was it made?", "pred": "Added shard_key_fields= method to mongoid shardable"}
{"gold": "Please move using inside namespace.", "pred": "Fixing the copyright header"}
{"gold": "shall we create some enum flags for setasmain shouldprocess and pos?", "pred": "Fixing a bug in the block validator"}
{"gold": "Should this `PUPPET_AGENT_STARTUP_MODE` have a corresponding yardoc change?", "pred": "(maint) Add missing `puppet-agent` to `puppet-agent-dev-tools`"}
{"gold": "Why not simply remove the `pytest` import now that it's not needed anymore? :wink:", "pred": "tests/end2end/features/test_caret_bdd.py: Remove pytestmark"}
{"gold": "Yeah, not filled in yet.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "don't use style. Use a class instead. reducing `col-xs-12` down to 8 or 6 or whatever should do the trick", "pred": "Fix typo in event form"}
{"gold": "should we also do `reloadCache` when database is null?", "pred": "Fix typo in Catalog.java"}
{"gold": "Why not just return QueryMol directly? Why require the copy?", "pred": "Fix typo in MCSWrapper.cpp"}
{"gold": "Could you add a docstring?", "pred": "Update retry_test.py"}
{"gold": "looks like you added newlines after blocks in a few files - I generally like newlines before/after multi-line blocks _except_ when the end the block is directly nested inside another block (eg: two `end`s next to each other) what do you think?", "pred": "Fixing bug in display_search_ui? helper method"}
{"gold": "@jlerbsc 's fix in #2918 in action - thanks! :smiling_face_with_three_hearts:", "pred": "Fix EqualsVisitor"}
{"gold": "nitpick: Please lower-case `Zero_count` (as it's a literal argument name) and `Argument` here.", "pred": "Fix typo in arginfo.py"}
{"gold": "change the name of the function to match its functionality? account IsIssuing?", "pred": "Fix typo in comment"}
{"gold": "for later: add docstring (can just copy paste Pandas')", "pred": "[SPARK-34845][PYTHON] Fix the docstring of `compute` in `pyspark.sql.DataFrame` (#32044)"}
{"gold": "nit: @sonofachamp pointed out to me that the idiomatic way is \"archermocks\" (lowercase for package names)", "pred": "fixing import path for mocks"}
{"gold": "Ugh I'm stupid, can you change this to `yarpc.InternalErrorf`?", "pred": "fix(transport): fix import"}
{"gold": "We instantiate some metadata tables in tests so I kept the old constructor too. Won't harm if someone is using it directly too.", "pred": "Fix checkstyle"}
{"gold": "I think the better place to put this might be `lib/options/PopulateOptions.js`. That should make it easier - checking options in `populate()` can get confusing.", "pred": "fix(populate): fix populate query options"}
{"gold": "Lets have simple function arguments here, because now struct `traversal.Params` started to have 2 purposes: 1. used as contract in DTO between consumer-provider 2. as function parameters for internal code calls", "pred": "fix comment"}
{"gold": "Probably best not to have an empty test....", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "`image_tag` in the `testimonials` files?", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "I believe flow.toObject() method is throwing NPE if SLA option list (i.e. this.executionOptions.getSlaOptions()) is null or one of the value in the list (i.e. this.executionOptions.getSlaOptions()) is null. If that is the case we could fix root cause of NPE in the ExecutableFlow.toObject() method. The corresponding code to populate SLA options can be modified as follows. final List<Map<String, Object>> slaOptions = Optional.ofNullable(this.executionOptions.getSlaOptions()).orElse(Collections.emptyList()).stream() .filter(Objects::nonNull) .map(slaOption -> slaOption.toObject()) .collect(Collectors.toList());", "pred": "[NGRINDER-100] Fix the bug that the execution flow data is not saved in the database."}
{"gold": "So I haven't tested this - but since the icon location is just directly dumped into the img _src_ attribute, won't this cause issues with Ghost blogs in a subdirectory? If I'm misunderstanding what the purpose of the default is then let me know  ", "pred": "Fix: Settings - Cover image not showing (#1665)"}
{"gold": "Why swallow the exception here rather than propagate it?", "pred": "Fixing MPI_Init in test_adios2_engine_ssc"}
{"gold": "How about `column_index_names`? `column_names` sounds ambiguous.", "pred": "Update internal_frame.py"}
{"gold": "+1 on this. Do we want to have it as `WRITE_METRICS_MODE_COLUMN_CONF_PREFIX` to be consistent with defaults? Is there a possibility we will have `READ_METRICS_MODE_COLUMN_CONF_PREFIX`? Not sure.", "pred": "[CALCITE-2269] Add a new property to control the default value of the write.metadata.metrics.default property"}
{"gold": "Shall we use different inputs for `PySpark < 2.4` where `transpose` won't work with different data types.", "pred": "[SPARK-32585][PYTHON][TEST] Add test case for DataFrame.cumprod"}
{"gold": "we should sort the headers like in spark: public packages, then pyspark, then internal", "pred": "fix: remove unused import"}
{"gold": "looks like we should drop this var from the transport options struct", "pred": "fix: grpc client max send msg size"}
{"gold": "Ah, yeah, this is the test for the validation that I mentioned in a remark above about relaxing the validation.", "pred": "Add test for renewBefore being smaller than the duration"}
{"gold": "For tensors, it is better to illustrate the shape.", "pred": "fix anchor_inside_flags"}
{"gold": "This was removed in a recent PR for the admin bar, but should have been kept. It's been restored in the other admin bar PR but I've added it here to for completeness.", "pred": "Update test to use new data structure"}
{"gold": "nit: probably swap the if condition and `if/else` and check `NETCOREAPP2_1` which looks more natural.", "pred": "Fix typo in test (#1926)"}
{"gold": "for the tag, should it be `requestor_rtt` since the other is `responder_rtt`?", "pred": "Fixing a bug in the export service tracking check."}
{"gold": "The one sad part of this is that is will generate a lot of overhead if you loop through a vector, since it obtains the vector every time. But with the current API there is no alternative I guess, and it is better to have the option than not.", "pred": "Update monster.go"}
{"gold": "nit: there should be a newline between `types` and `go-ipfs-files`.", "pred": "fix import"}
{"gold": "would be nice to have this as a parameter (Options), re: technical debt discussions", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "complete ignorance here  but is it ok to import this from `com.sun`? can it break under non-oracle JREs?", "pred": "Fix import"}
{"gold": "Is this some way of saying that the span is going to be sampled? I'm basing this question on the condition I saw for the `OnEnd` to be called - `mustExport := s.spanContext.IsSampled() &&  )`. Shouldn't the condition be `s.spanContext.IsSampled()` to match the condition for calling the `OnEnd`?", "pred": "Fix typo in comment"}
{"gold": "just calling UpdateSnapshotInfo() should be fine", "pred": "fix(cvr): update cvr status after reconciling version"}
{"gold": "Was `DefaultLogMessageRateLimit` not configurable anywhere?", "pred": "Fix rate limiting for logs (#1078)"}
{"gold": "Please use the `assert` instead. Same below.", "pred": "Fix test"}
{"gold": "Owww, I think I found a typo. `suche`", "pred": "[1.0] Updated translations from translation tool"}
{"gold": "This can happen because we could get `PhantomNodes` that are not admissible as source/target right?", "pred": "Fixing a bug in the search algorithm."}
{"gold": "Should we add a note here to file a bug if this ever happens?", "pred": "crypto/tls: fix typo in comment"}
{"gold": "overflow is still possible, isn't it?", "pred": "fix(market): fix typo in comment"}
{"gold": "This seems more like a personal preference, so maybe this should be in your `~/.rspec`?", "pred": "Fixing the paperclip matcher"}
{"gold": "To avoid a circular import between pcapdnet and automaton", "pred": "Fix scapy.config.conf.recv_error on Windows"}
{"gold": "Please remove this blank line.", "pred": "Fix a bug in the command dispatcher."}
{"gold": "it feels that the WorkloadIdentityCondition should be added to this Status... And if you have workload identity enabled, but not working, then you can mark that condition failed, and also Mark the ready false... not entirely sure though", "pred": "Fix typo in auditlogsource_controller.go (#1005)"}
{"gold": "I think these got refactored to `LvlFindInChain` to better conform with the coding guidelines. I think MarkL left these in for backwards compatibility.", "pred": "layers: Fix typo in ValidatePipelineUnlocked"}
{"gold": "It's fine for this PR, but in the future try to minimize unrelated changes.", "pred": "[SPARK-31588][PYTHON] Fix type hint for Series.str.cat (#2882)"}
{"gold": "The library -> modules and filters -> filter path changes are breaking changes or?", "pred": "Fix typo in ansible.rst"}
{"gold": "Can we encapsulate this check (`os.environ.get(\"TEST_TARGET\") == \"AWS_CLOUD\"`) into a small config/util function? (and also use it in `integration/conftest.py`) (I'd generally try to avoid accessing `os.environ` directly across the codebase. I'm aware that we're already doing this in a few places, but maybe we can start pulling things out - this will also help us create more systematic config/environment abstractions as we go...)", "pred": "fix: remove unused import"}
{"gold": "An `if` statement would be better here. Functions, concat and reverse are all very expensive.", "pred": "Update h.js"}
{"gold": "`Log here: connect to default factory for goerli network <address>`", "pred": "Fix typo in comment"}
{"gold": "nits, should add `break` to avoid redundant iterations.", "pred": "fix: add missing import"}
{"gold": "I think we want an exception here, there should never be a transfer to a nonexisting account.", "pred": "Fix test"}
{"gold": "This code is new and not tested well. While we may drop the log level before we ship 4.0, right now this is extremely helpful to users.", "pred": "Fix typo in Container class"}
{"gold": "Can we make these asserts more strict/precise? I remember this test helped to spot the issue of inconsistent results on different platforms due to using `sort` instead of `stable_sort`.", "pred": "[python] fix test_sklearn.py (#2515)"}
{"gold": "I thought about adjusting for case here as well? For example `.rb,rb,.RB,.rb` would all map to ruby interpreter specified? Is that too much \"magic\"? Is there a sane workflow that someone would choose to map `.rb` to one interpreter and `.RB` to another?", "pred": "(maint) Fix rubocop warning"}
{"gold": "In this and the one below, should we assert `self != NULL` first?", "pred": "ostree-sysroot: Add missing semicolon"}
{"gold": "Why this is needed?", "pred": "fix test"}
{"gold": "we already have .meta() so I don't think we want get_meta() for PackageEntry", "pred": "Fixing bug in package entry"}
{"gold": "question: can we always get the startts from dagrequest?", "pred": "[KYLIN-4179] Fix the bug of CoprocessorIterator"}
{"gold": "Nit-picking, but this can be simplified to reference `properties[ 0 ]` since that is already retrieved 2 lines above.", "pred": "Update AccountSelect test to use new API."}
{"gold": "This technically works because we call `get_targets` before we remove the target, so it's bound to have been resolved. But I'm not sure I would like to rely on that assumption. Should we also remove it from `@unresolved_targets` to be safe?", "pred": "(maint) Fix typo in comment"}
{"gold": "So what happens if I try to get code on a EOA?", "pred": "Fix typo in AbstractCallOperation"}
{"gold": "Can't we return an empty list and then just compare the lengths? Thereby removing this `if`.", "pred": "Fix a bug in the variables checker"}
{"gold": "Mb change it to 'doesPassRestrictions()'? Doesn't sound enough like a boolean-returning method to me.", "pred": "fix: addFile is not a function"}
{"gold": "TODO: in fact At when used with noncurrent time should not return a next index. only latest should..", "pred": "fix: remove unused import"}
{"gold": "There are scenario's where we skip an update with a placeholder, in this case tmp returns null with render, this is not an array so we `[null]` it", "pred": "fix(diff): fix diffing of top level fragments"}
{"gold": "@danieldietrich, this wasn't tested so I presumed it wasn't working before either :p", "pred": "Unapply: add missing @Unapply annotation"}
{"gold": "Please leave two empty lines after the `use` statement", "pred": "[BUGFIX] Fixing wrong use statement"}
{"gold": "Please move this import in the 3rd group which is for external dependencies", "pred": "Fix import path"}
{"gold": "So what exactly is this fixing? The unit test is passing with or without this change.", "pred": "Fixing a bug in the path hash function."}
{"gold": "auto targetFile = fs::FileUtils::joinPath(newPath, folly::stringPrintf(\"%019ld.wal\", it->first));", "pred": "Fix a bug in FileBasedWal::linkCurrentWAL (#1018)"}
{"gold": "I don't see any place that checks whether the from snapshot is an ancestor of the to snapshot. That seems like a requirement for this to work correctly to me.", "pred": "Fix typo in SnapshotUtil"}
{"gold": "Other calls to getHelpText() are wrapped in an `isset()` check. Would it make sense to be consistent, and either restore that here or remove it elsewhere?", "pred": "Fixing bug in the connection class"}
{"gold": "Why the change? If `output_stream` is set to something non-nil, it seems odd (and potentially wrong) to overwrite it....", "pred": "Fix typo in RSpec::Core::Runner#run"}
{"gold": "Thinking this should have an underscore.", "pred": "Fix typo in workflow column name"}
{"gold": "To accommodate the change to the method being private.", "pred": "Fix test_message_state_scope"}
{"gold": "Shouldn't we traverse all definitions and apply this rule over all model definitions in the doc", "pred": "Fixing the test case."}
{"gold": "Please rename this class that it ends with the suffix \"Test\" - otherwise the tests won't be executed.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "As a JS file, this should also receive our standard file header.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "I take it memQuotaRatio is an \"out\" parameter at line 1810? Also, why use MIN_QUOTA in both the cases of memQuota being too low and too high? Contrast this code with RelRoot::codeGen where we set MIN_QUOTA only in the too low case.", "pred": "[TRAFODION-1668] Fix a bug in the hash join code generator."}
{"gold": "It looks like for newpullsubscription, we have two functions. One for pullsubscription with default, one for pullsubscription without default. If you remove setdefault here, then there is no differences between these two functions.", "pred": "Fix typo in pullsubscription_test.go (#104)"}
{"gold": "not dramatic, but why 32bits if we allow a range that is smaller than 8?", "pred": "[CGP-28] Add AssetParams.Creator to the Go API"}
{"gold": "- Use type from `service_discovery/dto/price.go` - Rename `Price` -> `Money`", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "one space missing at the beginning", "pred": "Fix Either.java"}
{"gold": "I worry that having `Platform` as `string` instead of `*string` would result in it getting overriden with `\"\"` if the environment manifest config doesn't specify `platform`   . If it gets overridden as `\"\"`, that could be a problem for users that are not using `linux/amd64` right? If this indeed is a potential impact, could we double check in `ApplyEnv`'s unit test? Same with the `Platform` in `TaskConfig`. Sorry for not seeing this in my previous review!!!  ", "pred": "fix: typo in comment (#11198)"}
{"gold": "I like the new directory `/api`, what is the thinking behind `/external`?", "pred": "fix(grunt): fix grunt-contrib-qunit test urls"}
{"gold": "staticcheck flags this: replace with `for k := ..`", "pred": "fix: account claim refresh"}
{"gold": "There's already a sleep right above", "pred": "GMLAN: Fix typo in GMLAN_InitDiagnostics"}
{"gold": "This feels hacky, is there a better way?", "pred": "Fix: AssertionFinder: don't add assertion if it's already there"}
{"gold": "Can we move this logic into the `boto.compat` module? Then it's just `from boto.compat import OrderedDict` instead. Also, this is introducing a new dependency. What about users on 2.6.x that don't have the OrderedDict module installed? We may need to fall back to an ordinary `dict` so that existing code in the wild does not break.", "pred": "fixing import"}
{"gold": "\"Gets the JSON serialization settings.\" would be better?", "pred": "Update AzureBodyDuration.cs"}
{"gold": "The endpoint should be in plural `/files`.", "pred": "fix: typo in comment"}
{"gold": "??? Why do we need to have a different API in Python? Oh, wait, I see what you did. It's to fake the namespaces. Given that I don't think the namespaces are necessary, and that less of these should be exposed anyway, I think these should go.", "pred": "Fix AtomPDBResidueInfo::residueName"}
{"gold": "I think this line is gofmt issue? @daixiang0", "pred": "fix: context init"}
{"gold": "probably better to assert the values directly; technically you could pass this test with an implementation that always returned \"\" for the subrepo for example.", "pred": "Fix test"}
{"gold": "line is 161 characters (from `lll`)", "pred": "fix: tsf test"}
{"gold": "Are these changes needed?", "pred": "Fix checkstyle"}
{"gold": "It seems like reducing the sensitivity would make the test failure less likely to occur, but not fix the issue?", "pred": "Fixing a typo in the comment"}
{"gold": "missing use statement for importing the full namespace", "pred": "Add missing use statement"}
{"gold": "Generally error messages in Go shouldn't start with capital letter. I see this rule is broken in many places here. Why?", "pred": "Fix typo in comment"}
{"gold": "These test checks if selection coordinates don't return negative values in that edge cases. Please revert the changes and set `autoWrapCol` and `autoWrapRow` to `false` to the Handsontable instance. This change applies to the entire Core_selection.spec.js file.", "pred": "test(selection): add test for getSelected()"}
{"gold": "I would prefer flag SkipGasPricingValidation", "pred": "Fix typo in TransactionProcessor"}
{"gold": "could be `const &` ?", "pred": "Fix wallets_store_iterator_impl::operator++"}
{"gold": "The docs should also be updated with the new option.", "pred": "Fix default locale"}
{"gold": "Name is _way_ to generic for this patch to be accepted I think. Can you rename it to maybe `send_sns_notification` or something else you find suitable?", "pred": "Fixing the email sending function"}
{"gold": "Out of the scope.", "pred": "Fix typo in example"}
{"gold": "I think we need an if block to check that if this API is really missing. We wouldn't want to override the browser's implementation.", "pred": "Update polyfill.js"}
{"gold": "I was wondering, things like EDITOR_TYPE, VALIDATOR_TYPE, RENDERER_TYPE are not obligatory. Therefore if the custom editor will be registered with this method, `name` will be set to `undefined`. Should we handle this scenario?", "pred": "Fix typo in comment"}
{"gold": "This line should not be removed, as it is not the description of the package, but a copyright header.", "pred": "fix: import path for p2p package"}
{"gold": "Wouldn't it be more space efficient to make this a `byte` enum or bitfield?", "pred": "Fix comment"}
{"gold": "Flake8 doesn't like the assignment, but non-use of `e` here. I think we can just remove the try/except here for `cursor.execute(sql)`.", "pred": "Fixing typo in postgres target"}
{"gold": "Maybe add short example list: .... type body declarations, such as AnnotationMembers, Methods, Fields", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "These are really meant to be the keys in the capabilities, not the keys of values within the capabilities", "pred": "SimonStewart: Fixing a typo in the CapabilityType interface"}
{"gold": "It is debatable whether we have to default this. I did this to avoid breaking custom implementations.", "pred": "Remove commented out code"}
{"gold": "# `attr_value['string'] is not None` probably not required as `attr_value['string'] == value` check is already being done", "pred": "Fix proxy type"}
{"gold": "we shouldn't need the \"addon\" rename", "pred": "fix: remove unused import"}
{"gold": "These are covered by routing constraints.", "pred": "Add new deck"}
{"gold": "Could we use just a normal string here?", "pred": "Fix typo in comment"}
{"gold": "`isFunction(Symbol)` triggers a `ReferenceError` if Symbol is undefined. Using `typeof Symbol === 'function'` is OK however.", "pred": "fix(types): add missing import"}
{"gold": "Is there an else clause (with a lock.unlock ()) missing here as well? If we think we do not need an else clause then lets add an else clause containing assert zero.", "pred": "Fix a bug in election scheduler."}
{"gold": "do we foresee `32` ever changing? (as well as its use in error checking in `clerk.go`) if \"no\" this is fine, if \"yes\" it's probably still fine", "pred": "Fix typo in example"}
{"gold": "you don't need to create a enum for this, java allows you to switch on a string ;) (since java 7?)", "pred": "SimonStewart: Fixing a typo in the javadoc"}
{"gold": "This should be `modelPromises.roles = this.get('store').query('role', ...` and the promise body should just `return roles;`. This is because the `model()` hook will pause for the returned promises to be resolved before continuing so when returning `RSVP.hash` you end up with a hash containing the values returned from the promises so the controller and everything else relying on the `model` object doesn't need to worry about things being async.", "pred": "Fix typo in route"}
{"gold": "This is basically a repeat of `main-is-top-level.js`. I suggest having these 3 checks point to the same evaluate file. You can change what element they test through the rule selector as well as the check.json options property. So you would have `main-is-top-level.json`, `banner-is-top-level.json` and `contentinfo-is-top-level.json` each point to `landmark-is-top-level.js`, and pass in a different `options` object which tells it what element you're trying to test.", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Why do we need this check? setCore already handles nulls.", "pred": "Fix package listeners"}
{"gold": "good catch, thanks. This is going to make the user experience much better.", "pred": "Fix a bug in the inject function."}
{"gold": "TODO: remove this unused import", "pred": "Fix lint error"}
{"gold": "Hmm leaking the library name out in the Workload API doesn't seem great. Do we want to catch these errors and return a canned \"could not parse token\" or something instead?", "pred": "Fix typo in test name (#2873)"}
{"gold": "I think `-f gradlew` is better for code unity", "pred": "Fixing the build script"}
{"gold": "Is there precedent for this config key? What other keys are similar? The others in this file start with `table.exec.iceberg`. Is there a reason for not continuing with that convention?", "pred": "[FLINK-11106][docs] Fix typo in FlinkConfigOptions"}
{"gold": "Can we avoid no-change changes being committed - they make it harder to distinguish actual changes from code editor changes", "pred": "Remove unnecessary using"}
{"gold": "AWS Identity and Access Management (IAM)", "pred": "Update UpdateServerCertificate.java"}
{"gold": "You dont use this dependency anymore", "pred": "fix: remove unused import"}
{"gold": "Here is the test that checks that the sqlcipher in use was compiled with the right flags", "pred": "Fixing test"}
{"gold": "Turns out that if the hosts are not in an `array`, an `Exception` is not thrown anymore :-( It simply returns `null`. So, we need to attempt to parse a `string` outside the `catch` block for it to work.", "pred": "Fixing bug where login server was not being set in the login server manager"}
{"gold": "this test only covers the happy path. what about no acceptable rest template found?", "pred": "[SCB-1005] fix checkstyle"}
{"gold": "Since this is in a test, I imagine that the choice of `info` level was deliberate.", "pred": "Fixing DistributorTest"}
{"gold": "this should probably be named somewhere if you want to reuse it.", "pred": "Fix import path in test"}
{"gold": "needs a rename to not include AWS", "pred": "Add a comment to the libvirt constants"}
{"gold": "Isn't sigma have `double` type?", "pred": "Update compute_kernel.cpp"}
{"gold": "May be better use nano::keypair that generates ramdom value?", "pred": "Fix wallet_create_seed test"}
{"gold": "I think the more complete solution will save off a `ignoreUndefined` in the base class for the bulk operation (with a default of `false`), and use that for calculations. Was there a reason you didn't want to support the option from the operation level?", "pred": "fix(bulk): fix typo in comment"}
{"gold": "The catch (Exception e) block that follows does an updateSync, which will get a SmartStore instance (while logging out is taking place) - and then terrible things will happen - a database gets created for the outgoing user that won't be openable by the returning user causing the app to crash at logout. This is a somewhat superficial fix - SmartStore should not return an instance for an outgoing user.", "pred": "Fix sync manager"}
{"gold": "huh does this work without a `Return`?", "pred": "Update codestar_test.go"}
{"gold": "Don't think we want this line, right? (Plus \"failing\" is spelled wrong).", "pred": "Fix typo in comment"}
{"gold": "I think it would be more clear to have local-feed-hiding all in one place (bottom of this method?). Further up the method, there already is some code that hides the website icon, for example.", "pred": "Fix typo in FeedItemMenuHandler"}
{"gold": "Why remove this one? It doesn't work yet, but we'll add it sooner or later.", "pred": "Fix menu icon"}
{"gold": "Why did you remove the struct tags?", "pred": "docstore: add test for docstore.Map"}
{"gold": "Let's be neutral with tag names. Let's just have \"ReportURL\"", "pred": "Fixing a bug in the final status reporter"}
{"gold": "Use an explicit time to ensure conversion is not copy-paste and wrong.", "pred": "Fix typo in test name (#100)"}
{"gold": "The logic now is to look for `<account_out` if that is present return the string starting from there. If it is not present look for `<error` and return the string from there (which can produce malformed XML because you do not check if the closing tag matches). If this is also not found return an empty `<account_out/>`. This `<error>` output is also not consistent with the other two functions you mentioned. Do the other two RPCs not report an error?", "pred": "Fix a bug in the lookup_account_poll function."}
{"gold": "Use nested module/class definitions instead of compact style.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Do you think we need to keep this in, or is it just leftover personal debugging? Seems like it wouldn't be too useful most of the time, but I don't care too much if you want to keep it.", "pred": "kbfs/libkbfs: increase timeout for individual tests"}
{"gold": "showNPCs is not needed", "pred": "Update FreezeTimersOverlay.java"}
{"gold": "Docstring for public function pls", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "This should use `t.Errorf` instead. You want the second part of the test to run even when the first part fails.", "pred": "Fix test"}
{"gold": "Should this if block better be changed to `#if H2O_USE_LIBUV \\n #else ... #endif`? The reason I wonder is because that's the way the QUIC context is being initilaized at the beginning of this function. Though I would not expect practical difference between the two approaches, because ATM the only case where we create QUIC connections is when the protocol selector is set to non-zero, and because when it is set to non-zero `h2o_quiy_close_all_connections` becomes a no-op.", "pred": "fix build"}
{"gold": "`Object.is` is an ES6 feature of JS so I don't think we can use it here (or we have to change our browser support matrix or specify that an Object.is polyfill is pre-req of `preact/hooks`). Should we just do an `===` check in `preact/hooks` and provide a `Object.is` polyfill and version of `useReducer` in `preact/compat`?", "pred": "fix: useReducer init function"}
{"gold": "This was a bug I picked up by using the TS interface as a guide, this seems like it was / is the intention, also is a bug in master (needs port)", "pred": "fix(cli): add-user command should not require a password"}
{"gold": "It would be helpful to explicit here what this really means and assumes.", "pred": "SOLR-14046: Add missing javadocs for CollectionAdminParams"}
{"gold": "`ExpectedBalances` is a global variable (from `gochecknoglobals`)", "pred": "fix: typo in comment (#103)"}
{"gold": "This is another place where I'd feel more comfortable with declaring the class private. We can always make it public in the future if someone makes a case for that, but I prefer to err on the side of privateness for things like this that 99% of RSpec users won't have a reason to use.", "pred": "Fix typo in SnippetExtractor"}
{"gold": "Feels like this should be left as is and add a new createClientWithIssuers or something like that. Avoid all the \"\"", "pred": "Fix test"}
{"gold": "Minor unrelated bug in the IDP flow where the error wasn't getting displayed as a `Toast`.", "pred": "Fixing the error message"}
{"gold": "I thought we got rid of this thing?", "pred": "test: remove unused import"}
{"gold": "Please convert int params as well.", "pred": "Fix CS"}
{"gold": "Fixed bug in implementation. Now I can run the validator from the VS Tools menu, double-click on an output line, and navigate to the site of the issue.", "pred": "Fixing a bug in the VS driver that was causing the \"Run\" button to be disabled."}
{"gold": "Can we rename this field to `HttpServerErrorCodes` or `HttpServerErrorStatuses`? It will contain a list of status _codes_, not a list of _errors_. (Personally I prefer \"codes\" over \"statuses\", but we can't change `DD_HTTP_SERVER_ERROR_CODES`.)", "pred": "Fix typo in ConfigurationKeys (#1106)"}
{"gold": "would you please use: flb_utils_bool(...) here ?, that function wraps the on/off/true/false stuff.", "pred": "systemd: fix typo in comment"}
{"gold": "`invocationInfoTokensToRedact: null` (I really like the convention of using a named parameter whenever the value doesn't communicate the meaning, such as for literal values.)", "pred": "Fixing a bug in the command line driver."}
{"gold": "maybe renamed to `async_simple_test` if we consider supporting aug test later on?", "pred": "Update base_detector.py"}
{"gold": "So where is default_attributes now? Is it used anywhere else still? If not, can it be removed along with any tests of it?", "pred": "Fixing a typo in the documentation."}
{"gold": "We could move this to the base class and remove all these changes. What do you think?", "pred": "Fixing the bug in the DoubleSumAggregator (#1044)"}
{"gold": "While we're doing some translation work, could you extract this button text and the other static text from the view?", "pred": "Update feature spec to reflect new beta trail page"}
{"gold": "Nit: Please fix indentation (note: Azkaban uses 2 spaces and not tabs).", "pred": "[NCL-2569] Fixing the build"}
{"gold": "This change is necessary because the schema version is ignored unless a schema is specified. I think that has always been the intent.", "pred": "Fix test case"}
{"gold": "The api/docs/release.dox changelog message is missing: maybe you planned to add it once NtAllocateVirtualMemoryEx and NtMapViewOfSectionEx support is in? I would say, add it here in the same diff that raises max_supported_os_version.", "pred": "Fix typo in dr_get_os_version() (#1004)"}
{"gold": "Just do: `return node.hasAttribute('aria-hidden')`", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "pred": "Fixing test"}
{"gold": "Do we need `_processDataPoisoned`? Can the name or the id of the current process ever change? Or the machine name?", "pred": "Fix typo in comment (#1017)"}
{"gold": "Did it not work out to wait until after containerd and kubelet are started?", "pred": "fix(agent): fix agent setup"}
{"gold": "variable names suggestions from me: - damageboost, ITEM_PARSE_DAMAGEBOOST, \"damage boost +x%\" - healingboost, ITEM_PARSE_HEALINGBOOST, \"healing power +y%\" - managainboost, ITEM_PARSE_MANAGAINBOOST, \"mana restoration +z%\" alternatively the other names can stay, because \"increase\" convention isn't that bad, just change mana values to: - \"increasemanarestored\", ITEM_PARSE_INCREASEMANARESTORED, \"mana restoration +z%\"", "pred": "Fix typo in item_parse_attributes.cpp"}
{"gold": "Why can't this be determined by 'PARTIAL_SUCCESS' in the `status` field?", "pred": "Fixing a bug in the schema"}
{"gold": "Does it make sense to generate a Exception here? Maybe yes, because it wouldn't make sense to generate a path without the id of the media right?", "pred": "fix(IdGenerator): Fix IdGenerator"}
{"gold": "This should be made private.", "pred": "Remove commented out code"}
{"gold": "perhaps this is better modeled as a pkg-level var?", "pred": "Fix typo in comment"}
{"gold": "I don't think there is a maximum scale, neither for Hive nor for Trafodion. The only condition right now is that the scale can't exceed the precision. Example of a valid scale: DECIMAL(18,18). The maximum of 6 digits applies only to TIMESTAMP columns, where we don't support resolution below microseconds.", "pred": "Added missing include"}
{"gold": "`ctx` is unused in UpdateProjectStaticUser", "pred": "fix: webapi fake"}
{"gold": "Why is this not the default, and why only for JS?", "pred": "Fix JS example for date-time format"}
{"gold": "A repository has many badges so we should also add type column in scope.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Now a hash set, so can't index into it.", "pred": "Fix test"}
{"gold": "@jpogran Does this seem like a reasonable way to know if we're in powershell vs. CMD or *sh?", "pred": "Fix for Ruby 2.7"}
{"gold": "1.toLowerCase(Locale.US)? 2.where is accept bug fix?", "pred": "fix: BodyProcessorCreator"}
{"gold": "We should still be providing something to the user in the case of a `KeyError` instead of a stack trace!?", "pred": "Fix test_execute_with_invalid_driver"}
{"gold": "check Lukasz's fix with NonceReserving - is that not better?", "pred": "Fixing bug in deposit transaction"}
{"gold": "Would you explain why here please? E.g. from the PR description > the renderer expects to be able to use the secondary color as the fill for a shadow.", "pred": "Update field_colour.js"}
{"gold": "Lock needs to go to `RecoverFromDb` instead. Here it may cause deadlocks. My convention was that un-exported functions do not lock, only exported ones (with name starting with a capital letter)", "pred": "Fix typo"}
{"gold": "German keyboard would also be used in Austria and Switzerland, so this should have included `.at` and `.ch`.", "pred": "Fix German keyboard"}
{"gold": "since this makes the indexer thing really only used for a single table, now, you can put in a TODO for me to cleanup and simplify this", "pred": "Fix typo in CompositeIndexer"}
{"gold": "Should we have this path passed from the Azkaban properties? If this is the standard path for nscd even outside LinkedIn, then we can keep it.", "pred": "fix: remove unused import"}
{"gold": "Could be a non-public field. `allowNoSubject`", "pred": "fix(jetstream): fix stream template creation (#1686)"}
{"gold": "Don't think this is quite right - think the build one also needs an `IsOriginalTarget` (c.f. code in `src/build`)", "pred": "Fix a bug in the remote execution client."}
{"gold": "what about adding typehints instead? I don't think we need to add docblocks for every private methods.", "pred": "Fixing autocomplete"}
{"gold": "Is it fine to pass the \"-o compression=on\" in the middle instead of at the end ?", "pred": "fix(cstor-volume-replica): fix the issue of volume replica creation"}
{"gold": "Probably make them all keyword arguments.", "pred": "(maint) Fix typo in comment"}
{"gold": "Why not just check the backdrop setting here as well for the time being? We can combine the code later but at least then it would be configurable if people like the backgrounds.", "pred": "Fixing a bug in the track selection page."}
{"gold": "why are we turning this one into a Warning?", "pred": "Fixing the validation error message."}
{"gold": "Wouldn't it be better to use double quotes for the opening parenthesis ?", "pred": "Fix for bug 1982566: CPD: \"...\" is not shown in the tree"}
{"gold": "Remove the cast", "pred": "Fix crash in IOLoginData::savePlayer"}
{"gold": "What criteria do we use to bump the copyright years? An update to the module?", "pred": "Fix typo in comment"}
{"gold": "should we rm line 269?", "pred": "fix resize (#100)"}
{"gold": "Perhaps the code at `source/core.py:564: postNvdaStartup.notify()` should be queued instead? If we are saying the loop must have started before NVDA's startup is complete, then the `postNvdaStartup` action is incorrect.", "pred": "Fixing a bug in the NVDASpyLib module."}
{"gold": "Needed this for testing locally with mail view but not used for any tests. Might be nice to have some seed scripts at some point.", "pred": "Fixing cart factory"}
{"gold": "wait, if we only do this for successful status codes won't we miss a whole slew of responses? We should be checking this for all codes right?", "pred": "Fix outbound callWithPeer"}
{"gold": "Adding in the service yaml `library.yaml` here.", "pred": "Fixing test."}
{"gold": "Why is this dereference needed?", "pred": "Fix typo in comment"}
{"gold": "Might want to add that this only happens if you have write permissions to the folder.", "pred": "kbfs_autogit: fix typo in comment"}
{"gold": "Adding a small blurb about why someone would want to enable this flag would help clarify what it is for. Such as something about when providing a custom retry handler and how`ShouldRetry` will be handled with and without the flag enabled.", "pred": "Update aws-sdk-go to v1.1.10"}
{"gold": "assume the user will be able to register for a custom service name in future?", "pred": "thrift: fix Register"}
{"gold": "The extra two empty lines seem unnecessary. Please review your diffs more carefully.", "pred": "Fix build error"}
{"gold": "What the reason to embed the Oracle?", "pred": "fix: add missing method to interface"}
{"gold": "Shouldn't this happen automatically with High Voltage?", "pred": "Add routes for purchases"}
{"gold": "This is changed because we need `projectId` to be printed as `$projectId` in PHP.", "pred": "fix: init code transformer"}
{"gold": "This title change seems more accurate to me however not sure if this will confuse users.", "pred": "Fix template history button"}
{"gold": "Here (and on line 158 as well), would it be more efficient to use the String end_with() method? Not tested", "pred": "Fixing a bug in the wikipedia parser"}
{"gold": "Why are you creating a new (second) `RAMHandler` here? Is this just an oversight from deleting the previous code?", "pred": "Fixing a bug in the logging module."}
{"gold": "Move the line 27 to line 31 is better?", "pred": "fix(storage): fix create edge index failed (#1704)"}
{"gold": "In slack I mentioned we should only do this if the update is from some other device, to make sure our own updates don't cause issues. Maybe the revision check above is good enough to prevent this, but I just want to make sure you thought about it.", "pred": "libkbfs: fix a bug in folderBranchOps.applyMDUpdatesLocked"}
{"gold": "I would instead explain that random is the default, but you can switch back to defined, or another ordering scheme.", "pred": "remove profile_examples"}
{"gold": "Is there a reason you left this at 0?", "pred": "fix: remove extra space"}
{"gold": "The value of `key` will never be `null` at this point, because `getKey()` will generate a value if it is `null`.", "pred": "Fix typo in javadoc"}
{"gold": "NIT: You should first check if AdoNetExcludedTypes.Count is greater than 0 before calling Contains (fast-path)", "pred": "Fixing a bug in the DbCommand integration (#1177)"}
{"gold": "should rearrange so as to follow import ordering.", "pred": "fix(ndm): import path for ndm api"}
{"gold": "what is the use case for create workflow with completed state?", "pred": "Fixing test (#2455)"}
{"gold": "Probably best not to have an empty test....", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Missing the license", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Looks like this was previously guarded by `EnableCleanupReplicationTask` flag. Now looks like this is always needed. Just want to confirm the intention is if `GlobalNamespace` is enabled then we want run cleanupReplicationTasks in all cases?", "pred": "Fix a bug in replication task processor (#1012)"}
{"gold": "Potentially it'll be good to remove all of them excluding \"tbb/tbb.h\" But let's do it next time  ", "pred": "Fixing include path for tbb"}
{"gold": "I would just mention which tolerance - namely as reported by ``sys.float_info``", "pred": "Fixing is_nan function"}
{"gold": ":+1: Ideally this'll become something you could pass in to the config", "pred": "fixing proposals controller"}
{"gold": "Should using `thenValue` to replace `then` ?", "pred": "Fix a bug in replicateLogs (#1107)"}
{"gold": "This follows the convention of each callback starting with the `IsIntegrationEnabled` check.", "pred": "Fix typo in comment (#1002)"}
{"gold": "this is not required to be part of this PR right? (With UpDownCounter being absent in .NET, we can make this hardcoded for now, i think)", "pred": "Fix SumMetricAggregatorLong (#1000)"}
{"gold": "Add the PipeFactory here", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "please add `var _ impltypes.ChaosImpl = (*Delegate)(nil)`", "pred": "fix: fix import error (#2065)"}
{"gold": "nit: is this added deliberately?", "pred": "Fix javadoc"}
{"gold": "Given the number of tests which need this (I think I counted seven) should we maybe just install this one globally? Is there even a place to do that? Something in `test_helper` maybe?", "pred": "Fixing test"}
{"gold": "we don't use this anymore, so we can delete it.", "pred": "fix(node): fix applyWriteConcern"}
{"gold": "nit: change to \"Telemetry configuration loaded from '%s'\"", "pred": "Fix typo in telemetry.go"}
{"gold": "Why did this value change?", "pred": "Fix test"}
{"gold": "maybe `duckpubsubv1alpha1` ?", "pred": "Fix import path for duckv1 (#1137)"}
{"gold": "The id is not mandatory for web extensions. Could you update this to support a web extension without an id?", "pred": "Fixing bug in FirefoxProfile."}
{"gold": "I actually prefer them to be defined here. Client who calls `lib` should define the args, not `lib` itself.", "pred": "Fixing the test (#100)"}
{"gold": "I think this should've been done with the `defer`-named-return trick. I'll submit a PR for it.", "pred": "Fix tty.go"}
{"gold": "The bind address should be configurable.", "pred": "Remove unused import"}
{"gold": "Maybe the empty `delete()` should be implemented as default in the interface.", "pred": "Fix typo in comment"}
{"gold": "How to ensure CMAKE_SOURCE_DIR is set correctly?", "pred": "Fix HDF5OutputLayerTest."}
{"gold": "safer to make a copy of incoming *big.Int", "pred": "fix: typo in comment"}
{"gold": "how did we choose this value? does this hold good for Windows too?", "pred": "Fix comment"}
{"gold": "To follow the other build tags, maybe we can call it `criu`?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Should we load this from the config file too?", "pred": "(maint) Update default transport options"}
{"gold": "Can you file an issue for this?", "pred": "Fix typo in comment"}
{"gold": "@nbbeeken what were the cases where `!!this[kIsMaster]` was yielding an incorrect value? we should try to cover them in the tests", "pred": "fix(connection): fix connection timeout error message (#3475)"}
{"gold": "This whole function feels messy. I don't have a better idea at the moment though.", "pred": "(maint) Fix typo in comment"}
{"gold": "should use Number instead of Long", "pred": "Fixing SetNetworkConnection to use the correct ConnectionType"}
{"gold": "Can you rename this and the file `InfluxDBProvider` and `influxdb_provider.go` respectively?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "This is the real culprit, as now vlen will always be a Number (and known to the compiler as such). You could probably go one step further and avoid the ToBoolean on `vchildren` as well by writing something like `vlen = (vchildren !== undefined) ? vchildren.length : 0` if that matches the contract.", "pred": "fix: fix typo"}
{"gold": "missing space before `TextView`", "pred": "Fix NutritionProductFragment"}
{"gold": "so this attribute is used as u8 in code, but saves as int32? Why?", "pred": "Fixed a bug in the map loading code."}
{"gold": "can RDSE be added to the list? It has its capnp files.", "pred": "Fixing import error in encoders"}
{"gold": "These functions only ever read from the API and should always be reading from a cache, so I have made that explicit by expecting a Reader here and supplying a `cache.Cache` as the client.", "pred": "Fix typo in comment"}
{"gold": "No, we can't skip any of the mangling after the suspend point: this should follow the other mangling and undo its push.", "pred": "Fix typo in comment."}
{"gold": "this is generated code.. these changes will need to be made in the code generator to have them stick.", "pred": "Update 0000-00-00-Tutorial.md"}
{"gold": "Should we abstract this into a reusable utility so it doesn't have to get repeated in every test file needing Shadow DOM support?", "pred": "Fixing test"}
{"gold": "Maybe we rename this to `command_monitoring.test.js` to match the directory name change? Or would you rather do that as part of the greater test cleanup? I'm fine either way.", "pred": "Fixing test"}
{"gold": "Why is this change necessary? `handleSingle()` will cast it to a string, no?", "pred": "Fixing a bug in the $options handler."}
{"gold": "This newly added method should be well defined, should it return `TableIdentifier` or just `String`?", "pred": "Fix javadoc"}
{"gold": "have a relation with a product", "pred": "Fix typo"}
{"gold": "I guess that there is still a window here, because the GC could happen between the `PodExist` and `Delete` calls. Would it be better instead to check `err` and allow it if it says \"pod has already been deleted\"?", "pred": "Fix health test"}
{"gold": "SQLAlchemy's session management does magic to make sure that if the rollback fails you still get the original exception that caused the rollback. Also it looks nicer.", "pred": "Fixing a bug in the db task history"}
{"gold": "This switch statement can be removed. Just return q.items[act.Nonce] != nil", "pred": "fix: typo"}
{"gold": "I think `==` for nodes is more readable than equals. An equals calls looks like it could be recursing, because intuitively two nodes are equal if their subtree are the equal. But everywhere you replaced, we don't want to test whether the subtrees are structurally equal, we want to know whether they're the same. Only `==` captures this intent, using equals obscures this. Not to mention that equals may NPE and is in that sense less ergonomic. I think we should enhance the rule with a list of types for which `==` is correct. Edit: in the meantime i think we could suppress those new violations...", "pred": "Fixing a bug in AvoidInstantiatingObjectsInLoopsRule"}
{"gold": "What's the scenario for passing multiple filters?", "pred": "Fix typo in help text"}
{"gold": "move to after check log.empty()", "pred": "Fix a bug in Part::commitLogs()"}
{"gold": "This line needs to be removed", "pred": "- added a comment"}
{"gold": "Can we delete such const like `CloudBuildSourceEvent` and `CloudBuildSourceBuildId` since all those are contained under schemas/v1?", "pred": "fix: typo in CloudBuildSourceEvent (#100)"}
{"gold": "This is unused.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Any reason not to put `using System.Collections.Generic` (guess there shouldn't be naming conflicts)?", "pred": "Fix typo in HttpInstrumentationOptions (#2036)"}
{"gold": "Could the name of this controller just be shortened to `TwitterCardsController`? Is the `Player` there adding information?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Backends with hostnames that depend on the request are always up?", "pred": "Fix typo in comment"}
{"gold": "I'd rather catch those to `utils.py` and raise a simple ValueError from them. From the resource point of view, these are details of implementation", "pred": "Fix import"}
{"gold": "make this 1.0 ? I don't think all that many people do `language: julia` without any `julia:` specifiers, but may as well keep that possible?", "pred": "julia: use nightly"}
{"gold": "nit: `AZURE_KEYVAULT_AUTH_VIA_CLI` is defined by us, so it might be helpful to differentiate it from azure's env names. Maybe starts with `GOCDK`.", "pred": "secrets/azurekeyvault: fix typo in godoc (#2556)"}
{"gold": "Depend on interfaces not on structures", "pred": "fix typo"}
{"gold": "This fix looks good. My concern, don't forget to fix metad too!", "pred": "fix a bug in signal handler"}
{"gold": "Just noticed this nil context. Perhaps plumb through ctx too, or change to `Debug`?", "pred": "kbfs: fix a typo in a comment"}
{"gold": "Does it send requests with urlencoded bodies anywhere? I thought it sends only json. Maybe content-type should be `application/json` by default?", "pred": "JariBakken: Fix typo in comment"}
{"gold": "Again use of `constexpr` is recomended.", "pred": "Fixed compilation error in RemoteServerAttributes.cpp"}
{"gold": "Minor point but I would call this ``redim_graph`` instead.", "pred": "Fix import error in graph_redim"}
{"gold": "As I was trying to figure out how the error messages are written out, since they are returned from `getOrCreate` and `reconcile`, it looks like we are using plain `klog` to write them out instead of using the logger from the scope above", "pred": "fix: remove unused import"}
{"gold": "Now it's double logging, is not it? Because `service.ipForward.Enable()` logs extra `warning`", "pred": "Fix typo in comment"}
{"gold": "Whatever the decision is about the request type to use, this should only match what is needed and not the other one.", "pred": "added route for export"}
{"gold": "...and in turn, this should probably be var updatePreviews = true; if (!(localConnection && localConnection.type == Blockly.OUTPUT_VALUE) && (Blockly.localConnection_ && Blockly.highlightedConnection_)) { since the first clause is a no-op. If you want to leave it this way for clarity, that's fine too.", "pred": "Fix #1000: Fix bug in drag-and-drop"}
{"gold": "Please remove this TODO, since they will not apply anymore after you are done. :) Can you please remove this everywhere else in this PR?", "pred": "Fixing a typo in the BigqueryRulesEngine docstring (#108)"}
{"gold": "This seems like an incomplete schema definition. will that have any effect on the tests?", "pred": "Add test for duplicate field name in struct"}
{"gold": "The testing cases are failing because `SetHeader` does not only handle cases where input are from files. It also reads categorical feature indices from the config parameters (see the part outside the `if (filename != nullptr) { ... }`). Skipping `SetHeader` directly here will cause errors when we load data from numpy or pandas arrays (where `filename == nullptr`) and use categorical features. So I think we should move the the check `filename != nullptr && CheckCanLoadFromBin(filename) == \"\"` into `SetHeader`. That is, we change `if (filename != nullptr) { ... }` into `if (filename != nullptr && CheckCanLoadFromBin(filename) == \"\") { ... }`", "pred": "Fix a bug in DatasetLoader"}
{"gold": "I think we should change the variable name of `err` in `if err, ok := err.(*exec.ExitError); ok `, this re-assignment of `err` still affects the next `else` branch", "pred": "fix(background): fix typo in log message"}
{"gold": "`Status` has identical semantics with `StatusOr<bool>`.", "pred": "Fix the build error of meta client (#1150)"}
{"gold": "why is this named in a different style from other paths?", "pred": "Fix typo in comment"}
{"gold": "Swapped these to ensure that we aren't passing a nil cluster in to util.IsPaused", "pred": "Fix typo in aws_cluster_controller.go"}
{"gold": "I don't see pkgManager used anywhere, is there a reason we need this?", "pred": "Add zypper to package managers"}
{"gold": "A bit late, but I don't think this is necessary, as all callers will send absolute paths. And if you ever get a relative path, resolving it with `toAbsolutePath()` leads to it being relative to whatever CWD the app is started with, while the typical resolving of relative `instanceDir` is to resolve it relative to CoreContainer#coreRootDirectory.", "pred": "SOLR-10056: Fix javadoc"}
{"gold": "There's an awful lot of test failures here because `localFieldPathType.schema` may not contain a `getters` array.", "pred": "fix(populate): fix populate with custom foreignField"}
{"gold": "Mysql allows for `||` concatenation (e.g. `firstname||' '||surname`) if you enable it: `set sql_mode=PIPES_AS_CONCAT;`. I think this check is safer though", "pred": "Add scope for users with active accounts"}
{"gold": "NOTE: this is the default ENS registry address. If the ENS suite is deployed from the current builds to any chain, it will always be found at this address.", "pred": "Fix import path"}
{"gold": "I'm curious why you are using `draw` in this route file?", "pred": "Fix routes"}
{"gold": "Those variables are only been used once, I think we don't need to create them at all, just pass values to the `GetRawDiff` directly.", "pred": "fix: diff command"}
{"gold": "I like the idea of replacing all the `#if NET461` with `#if NETFRAMEWORK`... is that worth doing now? Means fewer changes if we go to 4.7.2 at some point  ", "pred": "Fixing build"}
{"gold": "to fix the docs build failure, make this const var named without the suffix `Name`", "pred": "Fix comment"}
{"gold": "This bugfix also included, in case a subjectAlternativeName was present in the cert, then URIs (e.g SVID SPIFFE auth) would not have been attempted.", "pred": "Fix typo in comment"}
{"gold": "Same here. Feels like the wrong location.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Please make `_path_suggestion` public (i.e. remove the `_`) in `downloads.py`.", "pred": "Fix import"}
{"gold": "Woah, these flag names gotta get shorter. (Edit: I'll try to suggest some if needed, will think on it.)", "pred": "Fix flag name"}
{"gold": "Is this the code that's supposed to use the Rails app's only when in Rails4? What's the point of the first `if app.respond_to?(:secrets)`, both the `if` and the `elsif` have the same body, is only the second one needed? If `app.config` has a `secret_key_base`, then use it, the end. Is there a need for first checking if `app.respond_to?(:secrets)`?", "pred": "Fixing the load order of the blacklight_advanced_search gem"}
{"gold": "Does this not apply to C enums on Linux?", "pred": "Fix a bug in the enum_impl_strategy."}
{"gold": "Should this check if the error is `RetryableWriteError` before adding the label?", "pred": "Fix linting error"}
{"gold": "Oh wow, that's one complicated require :)", "pred": "fix: remove unused import"}
{"gold": "do you mean how to \"use\"", "pred": "Update context_example.go"}
{"gold": "We can't really test this anymore since ref and props.ref are at the backing node level now", "pred": "Fix test"}
{"gold": "Did you intend to set this in the constructor?", "pred": "Fix typo in BaseDataReader"}
{"gold": "This looks fine as a first approach, and can we put a TODO here about ubuntu 18.04 being hardcoded?", "pred": "Fix typo in comment"}
{"gold": "This isn't strictly needed since lmdb / leveldb data that is unencoded does not require OpenCV IO. I think `DataLayer` should only require lmdb / leveldb. If one tries to use encoded data without OpenCV the `DataTransformer` guards will report the dependency failure.", "pred": "fixing include"}
{"gold": "Should we take out this change? This was only in there to try to brute force the start of the apiserver yesterday.", "pred": "Fix typo in hiveapi-cluster-role-binding.yaml"}
{"gold": "I worry that this association name is a bit confusing. Yoz was asking me about the concept of completion yesterday, which is why I think of it. It wasn't clear to him exactly what it was. what about calling this a `step_completer` ? we know that a proposal has many steps, so I think that might be clearer. in the future, we also might want the rename the `approver` relation because a step is not always an approval these days.", "pred": "Add missing has_many :steps association to Proposal"}
{"gold": "Just add a to-do saying we need to add api-version in the check some time in the future when we enable the single-swagger spec mode for validation.", "pred": "Fixing the spelling of the word subscriptionid"}
{"gold": "@lunika Please see this. It allows us to do `Propel::getConnection()` easily, as we have only one database.", "pred": "fix(Thelia): fix thelia service container"}
{"gold": "Not related to this particular cast but I wonder if we shouldn't have a cast helper that would log if null to gain visibility.", "pred": "Fix AspNetWebApi2Integration.OnActionExecuted (#1052)"}
{"gold": "why do we need to explicitly declare these fields?", "pred": "fix: remove ts-ignore"}
{"gold": "Note that there are multiple OAI servers -- that's why `$serverClass` is a variable here. You'll want to fetch `$serverClass` from the service manager rather than a hard-coded value, and also set up a module.config.php for the authority record version, `VuFind\\OAI\\Server\\Auth`. Should be easy enough since it can share the same factory.", "pred": "Fix OAI-PMH controller"}
{"gold": "This is no longer needed and should be removed.", "pred": "(BKR-100) Add test for validate_host"}
{"gold": "could use named return params here to avoid declaring the opts, and using naked returns instead.", "pred": "Fix typo in comment"}
{"gold": "this is an unrelated fix. I noticed when an instagram carousel post is mixed with images and videos, the videos don't come with thumbnails, so I am adding a fallback thumbnail for this case.", "pred": "Update Instagram.js"}
{"gold": "\"... after protocol version 1\"?", "pred": "fix(sync): fix syncer interface"}
{"gold": "Is there a unit test that covers this regexp? I am afraid that changing it might break things =/", "pred": "Fix typo in mib.py"}
{"gold": "This change is okay IMO because an `@` variable in Ruby is not a reference -- `@` variables are instance variables. Also, it's never used by the Ruby transformers.", "pred": "Fix typo in RubyNameFormatter"}
{"gold": "Why this change was needed? Because in `po` files it's with curly braces?", "pred": "Fix payment image upload cest"}
{"gold": "Wait -- where did this change come from? This seems unrelated to trace building and seems like it could affect basic execution, unlike the rest of this PR which is all under the off-by-default trace option. Please separate this into its own PR and probably ask @AssadHashmi to review.", "pred": "[ARM] Fix a bug in the ARM branch patcher."}
{"gold": "seems to be redundant (mention `docusaurus`   )", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Can we combine this with the Rollback API? We could still support the `rollback` method here, but combine `Rollback` and `CherryPick` into something like `ManageSnapshots`. Then we could reuse logic for enforcing checks of the current snapshot. What do you think?", "pred": "Fix javadoc"}
{"gold": "Maybe just `env_prefix`, I don't think this is referring to the WQ manager.", "pred": "Update amazon_batch_amazon_ids.c"}
{"gold": "Unrelated line change :)", "pred": "Remove unused import"}
{"gold": "I raised an eyebrow at making `net` depend on `k8s.io`, but it seems we're already doing that.", "pred": "Fix import path"}
{"gold": "I think ticket meant, not applying replacement in this method, but rather applying encodeSomeHtml to each and every localization string", "pred": "fixing bug in encodeSomeHtml"}
{"gold": "ticket for the 4.0 epic?", "pred": "fix(node): fix linting error"}
{"gold": "`cfg.model.get('neck')` will return None if neck does not exist, thus we can omit the default value.", "pred": "fix bug"}
{"gold": "Trailing whitespace detected.", "pred": "remove unused method"}
{"gold": "I don't see why a `cxxflags` key is necessary? C flags are important in the target file because they define things like the float ABI. But these flags are also used for C++. I can't think of a reason why you would want to configure C++ flags in a target file.", "pred": "Fix typo in target spec"}
{"gold": "Update year range in Copyright notice, and elsewhere too.", "pred": "Fix typo in comment"}
{"gold": "Can we update this PR to not be a breaking change? i.e. if a user specifies `accessKeyID`, it is still used. But if a user specifies `accessKeyIDSecretRef`, it takes precedence?", "pred": "Fix typo in comment"}
{"gold": "You don't actually need both tests here as \"truthiness\" means that `\"0\"` is false and hence the first test will be true...", "pred": "Fixing bug in users controller"}
{"gold": "Everything else in here is using `I18n`. Should we do that here to be consistent?", "pred": "fixed user downgrades subscription feature"}
{"gold": "What do you think about changing the ordering to be `<protocol>:<cidr>:<port>`? I think it matches the most with what we previously had so that it doesn't change too much for our users.", "pred": "Fix config comment"}
{"gold": "I'm fairly sure this precondition is always true due to the mod (%)", "pred": "Fixing a typo in the comment"}
{"gold": "I love seeing diffs like this one, adding a `String` message to an otherwise cryptic `assert`! It makes me realize you must have had a hellacious debugging session!", "pred": "LUCENE-6056: Fix assert in ReaderPool"}
{"gold": "1. No logger exists to produce a message 2. Can't assume the latest version because missed version means 0.", "pred": "Fixing a bug in loadConfigFromFile"}
{"gold": "I saw a wrong reuse of the cache between a partial analysis of a single file and a full run where errors due to lack of context on the first partial run was reported on the full run. Shouldn't we use a hash that is composer.lock + psalm.xml + command line to be safe?", "pred": "Fixing a bug in the Config class"}
{"gold": "Could you also update it in `at_time`?", "pred": "[SPARK-28854][PYTHON][DOCS] Add missing import in koalas.Series.between_time (#1988)"}
{"gold": "Because schema is non-final we can't just switch this to a lambda", "pred": "[SPARK-35889][SQL] Fix the typo in the comment of HadoopFsRelation"}
{"gold": "proposal: **always** add the exception to the end of the message. So no need to to pass exception twice (implicit and explicit). Need a lot of changes.", "pred": "Fixing build error"}
{"gold": "why? event.getInvocationType is not you want?", "pred": "Fixed typo in InvocationStartProcessingEventListener"}
{"gold": "nit: how about `GitSHA`?", "pred": "Update server.go"}
{"gold": "If you move the other functions, this should also be moved to `makeflow_gc.h`.", "pred": "fix a typo"}
{"gold": "This whole block bugs me. Expire_time to me suggest that an absolute time of when something happens and duration is an interval of time. While the code looks correct, it feels awkward to read.", "pred": "Fix bug in redis_connection.py"}
{"gold": "Can we add `_dom` as an argument to createVNode here? I think it might be shorter (could totally be wrong!)", "pred": "fix(vdom): coerceToVNode should not clone vnode if it has already been used"}
{"gold": "I think that the iret handling is not yet good.", "pred": "Fix typo in comment"}
{"gold": "Huh, that's kinda weird. I get it, but it's unexpected to me...", "pred": "fix: remove unnecessary brackets"}
{"gold": "why is this removed? it is important when you upload from stream of unknown size", "pred": "fix: tag.DoneSplit should return total count"}
{"gold": "Out of curiosity, why is this needed? Does it enforce what class can be assigned?", "pred": "add api_token to proposal"}
{"gold": "non-blocking: Now that we have a handful of statements which deal with creating a listener, it may make sense to introduce a `createListener` method or something similar", "pred": "Fix typo in comment"}
{"gold": "factory should be stateless if possible, looks like much complexity added", "pred": "Fixing a typo in the comment"}
{"gold": "Could you please add short description for the default value as well?", "pred": "Fixing a typo in the BigQueryLoadTask docstring"}
{"gold": "Leave a TODO message to say we will fix the log level in the future, once committing the block and the state become a transaction", "pred": "Fix typo"}
{"gold": "this can be integer", "pred": "[CALCITE-2274] Add a new property to set the default value of the write.delete.parquet.compression-level property"}
{"gold": "nitpick: Please remove the blank line here", "pred": "Fix #1004: Completion popup is not visible in dark theme"}
{"gold": "What is this for? The only methods I can see by that name in the rails doc are generating a foreign key name from a model class name but you seem to be giving a key name as argument?", "pred": "Fixing a typo in the way model"}
{"gold": "Is this second check necessary? we know that just after the plugin was created its metricRegistry is null, it's set only after `initializeMetrics` has been called.", "pred": "Fixing a bug in the CoreContainer."}
{"gold": "shouldn't this be `return TALKACTION_BREAK;` as the player does not meet the required group access?", "pred": "Fix: Typo in comment"}
{"gold": "does this still work if minerNode1 has already proposed a block before 2 & 3 are stopped?", "pred": "Fix CliqueMiningAcceptanceTest"}
{"gold": "I am wondering if we can either make this a feature or have a way to turn it off in production. My concern is that we might be adding more of these kind of code in the future.", "pred": "Update topicreconciler_test.go"}
{"gold": "We can just use `.stack()` here? Then I guess we can reuse when supporting multi-index columns.", "pred": "[SPARK-35858][PYTHON] Fix the test failure in pandas_on_k8s.py"}
{"gold": "What are the possibilities here? Since we plan on supporting .net standard 2.0 from day 1, we might as well tackle that now.", "pred": "Fix typo in App.config (#1046)"}
{"gold": "should the parameters be called reference or context?", "pred": "Fix typo in comment (#1118)"}
{"gold": "Do we need to also change `length` here (and below) to `bytesize`? Perhaps we ought to make a copy of `in_buffer` encoded as binary and then the existing algorithm should work.", "pred": "Fix for #1005"}
{"gold": "This should be `toDisplayString()` to not contain e.g. passwords.", "pred": "Fix: Download dialog not showing"}
{"gold": "Can we just say that having a non-nil `autocomplete_path` implies that autocomplete is enabled?", "pred": "Fixing the spelling of the spell_max config option."}
{"gold": "Note that the package github.com/golang/protobuf/proto is deprecated. We're instructed to use the \"google.golang.org/protobuf/proto\" package instead. I didn't want to change it now to avoid intrusive changes whose consequences are, currently, unknown.", "pred": "fix: remove unused import"}
{"gold": "Are these gone routes? Do we need to 301 them?", "pred": "Fix typo in routes"}
{"gold": "move them to internal group of imports", "pred": "Fix import path"}
{"gold": "can we rewrite this as: `ignored event '%s' for cstor pool '%s'`", "pred": "Fixing the typo in cstorpool_controller.go"}
{"gold": "not all client data types have an approving official (eg: 18F does not). do we still want to include the relation here?", "pred": "Fixing test case"}
{"gold": "This change should also probably go into the corresponding method of the abstract By class?", "pred": "KristianRosenvold: Fixing javadoc"}
{"gold": "why this remove?", "pred": "Fix redirect to login page"}
{"gold": "As the test failures indicate, making this change is going to mean changing everything which currently implements this interface.", "pred": "Fix typo in comment"}
{"gold": "Do we want to redirect this to the forum or something in case people have it linked/bookmarked?", "pred": "Fix typo in redirect"}
{"gold": "@peterzimon came up with this 'NM' piece as a placeholder for New Member initials, without this the screen looks broken. It changes to normal initials calculation once email or name is entered. Lmk if you'd like to put something different here ;)", "pred": "Fix linting error"}
{"gold": "@kevinansfield Would be cool if you can take a   if this is the best way to add `subscriptions` info on member model. This uses the transform + separate model definition way which seemed to be the right way from other references in Admin  ", "pred": "fix(model): add missing comma"}
{"gold": "This is the common way of dealing with optional dependencies", "pred": "Fix import error in plot.py"}
{"gold": "nit: we can replace all `kr` in this file with like `src`.", "pred": "Fix typo in test helper (#100)"}
{"gold": "same concern here as above", "pred": "fix(read_preference): fix typo in ReadPreference.fromOptions"}
{"gold": "Thank you for this, I gather this repairs failures that I've seen in another PR.", "pred": "Fix Mongoid::Criteria#raw to return the results"}
{"gold": "This place probably makes sense to me. We can consider exposing an argument to make the dedup step optional (I am not sure it is a good idea but I want to think this through together). The dedup step we are adding is going to trigger a shuffle. Technically, we are fine in the existing expire snapshots action as it does the dedup in `except`. The question is what kind of performance impact deduplicating here will have. We only have duplicates if multiple manifests reference the same files. In `rewrite_manifests` procedure, we rewrite all manifests, meaning we produce a snapshot with new manifests where entries are old data files. Also, there are updates and deletes that may rewrite manifests. I think deduplicating here makes sense to me in all cases. Thoughts, @rdblue @flyrain @RussellSpitzer @karuppayya?", "pred": "[SPARK-35508][SQL] Fix the comment of BaseSparkAction"}
{"gold": "can we move the code before deleteNodeFromDB ? this way even if the node crashes after remove config we can still re-run decommission again ?", "pred": "Fix typo in comment"}
{"gold": "Seems the default value of `melt`'s `var_name` at namespace.py should be changed as well.", "pred": "DOC: Fix typo in DataFrame.melt docstring (#22714)"}
{"gold": "I think botocore's serializer should already create the correct headers. However, they are currently not used in `_botocore_parser_integration_test`(line #217). Maybe we could remove the headers here and just use a fallback in the `_botocore_parser_integration_test` (i.e. use the given headers if they are set, otherwise use the headers generated by botocore's serializer)?", "pred": "Add test for query parser path params with slashes"}
{"gold": "This code is passing a non localized string when it should be passing in a localized string or it should use the name of the item being deleted.", "pred": "Fix delete charge modal"}
{"gold": "in case you want to rename one of the plugins when instantiating, from options?", "pred": "fix(provider): fix provider name"}
{"gold": "This default variable should be moved into a config variable, created by `package_context`, and read from `config\\package_layout.json`.", "pred": "Fixing the analyze command"}
{"gold": "Can I ask you to add a new line after `const` assignment? I believe that this increases the code readability by encapsulating assignment and logic (expecting) blocks.", "pred": "test: add test for stretchAllColumnsWidth"}
{"gold": "So the intention is you configure with `-CMAKE_CXX_FLAGS=\"-D KOKKOS_IMPL_TURN_OFF_CUDA_HOST_INIT_CHECK\"`?", "pred": "Fixing a bug in cuda_internal.hpp"}
{"gold": "This was a bug.", "pred": "Fix typo in comment"}
{"gold": "Is OK that we don't have some placeholder?", "pred": "fix image extension"}
{"gold": "Sectorbuilder behaves differently depending on whether it's given 1 or more threads. It won't seal if only given 1.", "pred": "fix: typo in comment"}
{"gold": "Sort of believe We should put MetricManager in constructor parameter given this case.", "pred": "Fix import order"}
{"gold": "Do we need to check `fieldId` is larger than 1000?", "pred": "Remove commented out code"}
{"gold": "I think this should be called after the if below (the one for disable positive acks)", "pred": "Fixed a bug in StatefulWriter::unsent_change_added_to_history()"}
{"gold": "I'd like to avoid changing this method since it is public and using a URI will probably change behavior for users passing strings (String -> URI -> Path instead of String -> Path).", "pred": "[SPARK-12596][SQL] Fix a typo in SparkTableUtil"}
{"gold": "Should these restore the stashed env after the test runs?", "pred": "Fix import path for shareddefaults"}
{"gold": "We're calculating the full list of kwargs here (even if the first element of the list would return True) so we could improve performance by using a generator line 408 in ``for default_node in all_defaults:``.", "pred": "Fix is_default_argument to work with Python 3."}
{"gold": "Can ndelta differ depending on when the deltas are compacted? That is, when intermediate updates are dropped?", "pred": "[CORDA-1945] Fixing typo in comment"}
{"gold": "Our checkstyle config likes it better when the `<p>` is before the first word of the next paragraph, and not on a blank line", "pred": "Fix typo in XPathRule javadoc"}
{"gold": "This looks to be the only place where we return early before the close below, so if the \"double close\" is bothering people, closing manually here (and removing the `defer`) could be an option", "pred": "Fix typo in criuSwrk"}
{"gold": "This task can probably be deleted since we don't need gulp to run Jest.", "pred": "Update gulpfile.js"}
{"gold": "Doesn't this need to include `Errno::ECONNRESET` to fix the issue?", "pred": "JariBakken: Fix SocketPoller to work with Ruby 1.8.7"}
{"gold": "never heard of a qirector... what's their role again? (also should be 'for a movie')", "pred": "Fix Faker::Movie.quote"}
{"gold": "Implement the \"collect all props for one vertex\" logic inside QueryVertexPropsProcessor", "pred": "Fix a bug in QueryBoundProcessor (#1021)"}
{"gold": "This is to prevent parsing things like \"1.1\" as \"1\" until we implement it properly.", "pred": "rai::uint256_union::decode_dec: fix"}
{"gold": "Can we change `_getCheckpointParentDir` to be a public function explicitly? It seems like something that clients of experiment runner may wish to use.", "pred": "Fixing import error in test_experiment_runner.py"}
{"gold": "Why is a restart necessary?", "pred": "Fix #10057: Advanced settings panel: browse mode checkbox is not checked by default"}
{"gold": "Should setting the task runtime also go under the above if condition?", "pred": "Fixing a bug in the GPU resource handling"}
{"gold": "SPIRE uses the leadingLowerCase convention for unexported constants", "pred": "Fix import path for regexp"}
{"gold": "The newest JSchema code generator orders `System` usings first.", "pred": "Fixing merge conflict"}
{"gold": "I understand that we want to have a possibility to configure the IcebergInputFormat to be case sensitive or case insensitive since it can be used by other MR jobs as well. Do we want to allow the users of Hive to shot themselves on the foot and enable case sensitivity? My first guess would be that we should not use the configuration here, just go with `false`, but if you have some specific use-case in your mind I can be easily convinced  ", "pred": "HIVE-25855: HiveIcebergSerDe should not use ColumnProjectionUtils.getReadColumnNames() (<NAME>, reviewed by <NAME>)"}
{"gold": "Will the above call to cStorPoolAddEventHandler() get executed in the same thread as this line?", "pred": "Fixing the issue in cStorPoolEventHandler"}
{"gold": "I don't think alloca instructions are always at the start of the entry block. I think it would be safer to check the entire entry block for alloca instructions, just in case some are not the first instruction. (Technically they can be anywhere in the function but we check in other places that this isn't possible).", "pred": "cmd/compile: fix typo in comment"}
{"gold": "Why isn't this 4789 (which I think is the Felix default)?", "pred": "Fix typo in comment"}
{"gold": "Can this be `Import operations failure`? In addition, is this the right time to change the variable names? e.g. `ReasonImportOperationsFailure`, `ReasonImportFailure`, `ReasonImportSuccessful`, `ReasonCreateResourceFailure`, `ReasonImportResourceSuccessful` Naming convention that i have assumed here is as follows: `Reason<Action><Entity/Adjective of the Entity><Sucess/Failure>`", "pred": "Fix typo in comment"}
{"gold": "I suspect this isn't needed because I think `rb_intern` gets marked already.", "pred": "Fix a bug in the binary protocol accelerator."}
{"gold": "This change is incorrect: the current log level is correct.", "pred": "Selenium 2.0rc1: Fixing the build"}
{"gold": "Can you add a space before the equal sign? There are a couple other places where spaces are missing in this PR.", "pred": "LUCENE-4884: remove unused constant"}
{"gold": "Please follow the todo naming convention.", "pred": "Fix typo in ExecutorServlet"}
{"gold": "These are no longer used and changes should instead be made directly to the files in `deploy/chart/crds`   /assign @JoshVanL /unassign", "pred": "Fix typo in comment"}
{"gold": "Is this really necessary to work around this way? The old version works fine with me when converting to ONNX.", "pred": "Update yolov3_head.py"}
{"gold": "Same as above: don't start error strings with a capital letter, and don't fix unneeded things in an unrelated commit ;)", "pred": "Fix typo in s3blob.go"}
{"gold": "Is this a testing debug statement?", "pred": "fixing bug in scp"}
{"gold": "you'll need to wrap the _whole thing_ within this async call (or refactor it so everything below is in a new temporary function). The code below this section depends on a value for `object` after the parsing occurs, but what you're doing here is kicking off a race condition where `object` is null, but _might_ parse quickly enough to assign it the parsed parts. Instead, you need to do everything that depends on the parsed object in the callback of `parse`.", "pred": "Update index.js"}
{"gold": "This is now going to be protecting `stopped` when it doesn't need to. If you are going to do this then can you make `stopped` non-atomic and protect it in `stop`. It's cheap to make a `unique_lock` fyi, it's just a pointer to a mutex and a `bool`. The `lk.lock ()` in the loop is superfluous so probably shouldn't have been there to begin with.", "pred": "Fix typo"}
{"gold": "Lets not give packages names if we dont have to. If a package requires a rename, we should change the actual name while/if we can.", "pred": "fix: remove unused import"}
{"gold": "Not sure I see where this is coming from. This is a bug fix? Should be mentioned in the commit message? Same below.", "pred": "i#1576: Fix build break on Windows"}
{"gold": "I reverted this change in the last commit, I think we should revert it here. I know this leads to confusing test output for skipped tests, but I would prefer to tackle that in a separate PR specifically focused on that problem. In fact, I think the issue might really be with the leak checker, and not how this test runner is defined. Please make a ticket for this (if it doesn't already exist) and revert this change", "pred": "fix(test): fix test suite name"}
{"gold": "Can this part be done in `dataset.get_ann_info`? Just like CocoDataset converts xywh to xyxy in `_parse_ann_info`", "pred": "fix typo in docstring (#1002)"}
{"gold": "Should we change the name of this test struct to be `testTracerProvider` as well?", "pred": "Fix typo in trace/global_test.go (#1076)"}
{"gold": "\"google.golang.org/grpc\" should be together with \"go.uber.org/zap\" all \"\"github.com/iotexproject/iotex-core/*\" stay together", "pred": "fix: remove unused import"}
{"gold": "No need for a separate variable here - just call `utils.read_file` directly below.", "pred": "Fix typo in webengine tab"}
{"gold": "Thanks for the fixing, small question, Here the message just be written to the channel, will it be blocked?", "pred": "fix: \u4fee\u590d\u533f\u540d\u901a\u9053\u7684bug"}
{"gold": "maybe we will have something like `Bodies []byte(\"bodies\")` instead of them being a number? with numbers we are making it harder to insert stages mid-process.", "pred": "fix typo"}
{"gold": "out of curiosity, why making this change? If no real reason, could you restore to avoid unnecessary changes of several generated files?", "pred": "Fix typo in Endpoint.GroupMember"}
{"gold": "Could we public events if `manager.serStatus()`?", "pred": "Fix typo in comment"}
{"gold": "could be misread as `<body>`, maybe something redundant but very clear like \"before the closing `</body>` tag\"?", "pred": "fix: remove extra space"}
{"gold": "This test is specifically checking behavior on sync I/O (note there are tests with Write in the name, and other tests with WriteAsync). Enable sync I/O here.", "pred": "Fix typo in comment (#1020)"}
{"gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "nit: Should we have something like `volumeName@snapShotname` and this will be filled only if it is a clone creation", "pred": "Fix typo in CStorVolumeClaimSpec struct"}
{"gold": "This seems like an improved pattern :)", "pred": "Fix typo in comment"}
{"gold": "I think it would be better to have a separate configuration option for specifying which HDFS interaction layer to use instead of using the existing hadoop version option. I think there are still cases where things might have to rely on Hadoop version for other things, and overwriting that information with \"snakebite\" would make that difficult. The existing hadoop version option could still be used to distinguish the different HDFS CLI flavours.", "pred": "fixing a bug in the hadoop command"}
{"gold": "Why are we filtering content twice? It seems like just filtering it in PAL should work.", "pred": "(maint) Fix task list outputter"}
{"gold": "These should probably move to `constants.js`", "pred": "Fix linting error"}
{"gold": "Again, you don't want to depend on glassfish.", "pred": "Remove unused import"}
{"gold": "it should be `Faker::Space.launch_vehicle`, otherwise it will crash", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Isn't it quite expensive to check whether the file exists on every write?", "pred": "Fix #1005 - NLog.Targets.FileTarget.ArchiveEvery is not working"}
{"gold": "Please hide this behind a flag and add a setter function to the builder.", "pred": "JasonLeyba: Fixing a bug in the webdriver.Builder.prototype.build() method."}
{"gold": "old api should be deprecated if we don't intend on using it anymore. Again this should happen through swagger api and then removed from next release. We should also release not this as a breaking change. (same with all the other cloudsnap api renames.", "pred": "Fix comment"}
{"gold": "so strange...... canTcpListen is to detect, if this transport can init when customers deployed vertx and servlet rest transport, we must detect which one will be used only both of them refused to init is a problem. we have already print that......", "pred": "fix vertx rest transport"}
{"gold": "Did you mean for this to be `FORM`, instead of `FROM`?", "pred": "Fixing merge conflict"}
{"gold": "What are your thoughts on the long term solution for the naming of this variable? Do you think we should revert the logic when we are ready to make the next set of breaking API changes?", "pred": "Fix typo in AWSMachineSpec"}
{"gold": "There's a syntax error on this line.", "pred": "Fixing the spec command"}
{"gold": "You lose the value of `result` when you `goto out`", "pred": "Update fpga_port_errors.c"}
{"gold": "Just a style thing, why not `this.ratio_ || 0`?", "pred": "Fixing scrollbar.js"}
{"gold": "I think the stdlib's `net.IP` has a `Mask()` method, does that do what we need?", "pred": "Fix CIDRFromCalicoNet"}
{"gold": "Why does substitute need to be public? Are we allowing/encouraging variable usage when using Daisy as a library?", "pred": "Fix typo in comment"}
{"gold": "We should probably use ctrl-enter if `tab` is given, just like in `follow_selected`?", "pred": "webengine: fix typo in comment"}
{"gold": "This file looks like anti pattern `ServiceLocator` and lucky it's not used anywhere. Can I remove it? (in separate PR).", "pred": "Fix typo in comment"}
{"gold": "we can just have this method call the next, passing in the file metadatas (deduplication of logic)", "pred": "fix for #2880"}
{"gold": "What happens here if you send the `wheelEvent` directly to the `tabbed_browser` and let it take care of propagating it to its children (i.e. the focused tab)? If that works, I guess that'd be cleaner.", "pred": "Fix tab bar icon size"}
{"gold": "it seems python 2 don't support `end=''`. @StrikerRUS @henry0312 any better solution? or we drop the support of python 2?", "pred": "Fix import error in sklearn.py (#1285)"}
{"gold": "This test already exists in the object_tracker layer.", "pred": "layers: Fix typo in comment"}
{"gold": "Same here, can we presume if `privacyParameters` is set we need goQuorum handling? Or is there a goQuorum sub option in `privacyParametes`?", "pred": "Fix typo in EthGetCode"}
{"gold": "The addition of delete files in `newManifests` far above the addition of data files threw me a bit. Is it intentional to ensure the delete files are at the front of the list?", "pred": "Fix bug in FastAppend"}
{"gold": "Interesting. The call to `Array(groups)` below this would seem to indicate this doesn't _have_ to be an array. I think the problem is actually that passing a hash to `Array()` actually converts the hash to an array of key/value pairs rather than wrapping it in an array. So maybe `Array(groups)` should be `groups = [groups] unless groups.is_a?(Array)`.", "pred": "(maint) Fix typo in comment"}
{"gold": "This is not a particularly good default but we need it to keep the old behavior.", "pred": "Added a new property to enable/disable the use of the new GC."}
{"gold": "We have other tests to assert all properties of a condition are valid. It's enough to assert the condition is not nil here.", "pred": "fix test"}
{"gold": "shouldn't the import be renamed `crdv1alpha1` by convention? It seems that you took care of renaming everywhere else...", "pred": "Fix import path for openflow package"}
{"gold": "nit: Can Linux-specific paths be moved to a conditionally-compiled file for Linux?", "pred": "bump min supported cni version to 0.3.1"}
{"gold": "This is not the right approach. The `Distributor` maintains a model of the current state of the Grid. That model already contains the information about every active session. We don't need to modify `SessionMap` to expose it further.", "pred": "Added a method to get the session id from a session map."}
{"gold": "Git doc seems to suggest `for-push` is a optimization. Do we have a plan/ticket for treating them differently?", "pred": "Fix typo in comment"}
{"gold": "This not necessary since you moved the layers to `contrib/`.", "pred": "Fix typo in comment"}
{"gold": "I think this also needs to be removed from `resources/bolt_bash_completion.sh`, `rakelib/pwsh.rake`, `lib/bolt_spec/plans.rb`, and `lib/bolt/config/options.rb`.", "pred": "(maint) Add --no-pager option to bolt command"}
{"gold": "I fixed this today with a direct push to master. My build was failing otherwise.", "pred": "Fixing test"}
{"gold": "not sure why this is in a \"rule\" child package from the interface...", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Not needed, please remove.", "pred": "Fix folder title not being displayed in the sidebar"}
{"gold": "Shouldn't the logic be: * the result is a mismatch if either is a unix path but the other is not * if both are unix paths, then perform case-sensitive comparison * if both are not unix paths, then perform case-insensitive comparison", "pred": "fixup! fixup! fixup! fixup! fixup! fixup! fixup! fixup! fixup! fixup! fixup! fixup! fixup! fixup! fixup! fixup! fixup! fixup! fixup! fixup! fixup! fix"}
{"gold": "This is just rearranging it alphabetically", "pred": "fix: remove unused imports"}
{"gold": "I think this disables it for the rest of the file - you should be able to use it inside of the function instead.", "pred": "Fix test_chromium_version_unpatched"}
{"gold": "this could receive the MediaInterface directly or an identifier, it is correct to type it with int|string? or just use mixed?", "pred": "Fix CS"}
{"gold": "Why not return `Object[]`?", "pred": "LUCENE-2963: fix javadoc"}
{"gold": "Looks like we are trying to match the new ordering of fields in `ManifestFile`. Earlier, we co-located `...FilesCount` with `...RowsCount` to match the ordering of methods in `ManifestFile` and args in constructors. Is this change intentional?", "pred": "[BACKLOG-10865] - Fixing compilation error"}
{"gold": "You're already setting drop loot to false just above.", "pred": "[fixed] summoning monsters"}
{"gold": "`once` is very generic and doesn't specify it's purpose - `closeOnce`?", "pred": "Fix typo in comment"}
{"gold": "Why did this need to change from `private`? Oh for the test below. And this is only a test class too.  ", "pred": "HIVE-25790: Fix HiveTableBaseTest#metadataLocation() (<NAME>, reviewed by <NAME>)"}
{"gold": "Should test the `has?` method here", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "I think you want to be asserting/clicking $saveLink, not $link.", "pred": "Fixing test"}
{"gold": "We don't have `target_name` on `@sensor` - why introduce it for `@asset_sensor`? If we do want to introduce it everywhere, can we just call it `job_name` to avoid introducing a new term?", "pred": "Fix typo in sensor docs (#3965)"}
{"gold": "Missing copyright header (+other new files).", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Could we do the flag check here as well to check whether or not we have enabled the \"Handle without timezone\" flag here as well? We may be using this not on the read path (like in the migrate/snapshot code) and it would be good to catch it here as well and make sure users know what is happening.", "pred": "[SPARK-15459][SQL] Fix the bug of converting decimal to double in TypeToSparkType"}
{"gold": "why is the file named `pipeline_definition_definition_sensor`?", "pred": "Fix import"}
{"gold": "None not needed, can just be `return`. not important for this release", "pred": "Fixing a bug in the timescale connection"}
{"gold": "I think it's missing closing `</p>` tags in line 108 and 109 unless they don't matter...", "pred": "fix: remove unused template"}
{"gold": "So it seems that loading a script file from the classpath needs to be enabled explicitly now since this is `false` by default. Is it possible to enable this via the YAML config file in a Camunda Platform Run distribution?", "pred": "fix(engine): remove unused field"}
{"gold": "can we delete any code in the provider implementation? i imagine the entire thing is unused now?", "pred": "fix: remove unused import"}
{"gold": "I suggest we remove all these unused functions. I don't expect any external projects to be importing packages from `cert-manager/test/...`", "pred": "Fix typo in comment"}
{"gold": "Looks like the template argument doesn't resolve by default so you need `std::lock_guard<std::mutex> lck`", "pred": "Fixing a bug in the metadata thread"}
{"gold": "Are we removing this public method? Could it be useful to someone? Maybe we could implement it once in Node using the metamodel", "pred": "Fix ArrayCreationLevel.removeDimension()"}
{"gold": "I think this method is unused now?", "pred": "Fix Plan#subscription_interval"}
{"gold": "I know we discussed this before and decided to reuse the AntreaPolicy gate. But do you think realization status will introduce much overhead or not?", "pred": "Fix typo in comment"}
{"gold": "please add a blank line at the end of this file. Applicable to similar cases below", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "This is not really needed, the line added in `GridNodeConfiguration.java` is what really fixes the `remoteHost` regression.", "pred": "Fixing a bug in the registration request."}
{"gold": "filterCache can be null", "pred": "LUCENE-5344: Fix typo in comment"}
{"gold": "File is not `goimports`-ed (from `goimports`)", "pred": "Fix import path"}
{"gold": "If strstr returns NULL, the check on 378 won't fire, because param_name will be at least SET_PARAM_CMD_LEN.", "pred": "Fixing a bug in the set parameter command"}
{"gold": "Does this change affect the performance of other algorithms, except KMeans?", "pred": "Update sum_singlepass.cpp"}
{"gold": "What do these changes have to do with the request ID?", "pred": "net/http/httptest: fix TestListenerAddrEqual"}
{"gold": "I'm kind of surprised this doesn't require `typename`?", "pred": "Fixing a typo in the Kokkos example."}
{"gold": "nit: move this one down.", "pred": "Fix import path in agreement package"}
{"gold": "maybe 'standard Tukey boxplot definition' if it is standard? Otherwise sounds like it is just *a* definition for boxplots...", "pred": "Fixed BoxWhisker docstring"}
{"gold": "I feel we should not fix this.", "pred": "Bump version to v0.0.0-master+4888186"}
{"gold": "I think these are not necessary", "pred": "Fix compilation error in test_UDPv4Transport"}
{"gold": "Please update the user guide too.", "pred": "[analyzer] Add a new option to the analyzer to allow the user to specify the number of threads to use for the analysis."}
{"gold": "If you use `compact('name', 'code')` here, you'll get an associative array, which might make the rest of the code more readable (instead of using hard-coded 0/1 indexes).", "pred": "Fix location caching"}
{"gold": "Should it be 2011-14 instead ;-)", "pred": "Fixing typo in license header"}
{"gold": "I want to write some type of test for this but there are not Getter methods to assert this value. I tried to extract the value via the stats that are exposed without luck.", "pred": "Fix typo in comment (#100)"}
{"gold": "This needs to take the group id, not the gsuite id.", "pred": "fix: add missing import"}
{"gold": "These should use the constants defined in JsonTests.cs", "pred": "Fixing a typo in the comment"}
{"gold": "Kind of unrelated to this PR, but let's update this to `getDataErrorComponent( 'search-console', error.message, false, false, false, error )` so that everything is passed as expected.", "pred": "Update Search Console widget to use new widget API."}
{"gold": ":obj:\\`dataset\\` cannot be correctly rendered", "pred": "fix: add missing import (#100)"}
{"gold": "I think `email` is something we get from devise, and I think the goal of putting it in the generator was not to tie others to that particular implementation?", "pred": "Fix typo in user bookmark method"}
{"gold": "If the span producers pushing to the queue do so faster than the this can drain, it will cause this to hang. I'm guessing we can update the `enqueue` method to check if the `stopCh` is closed and not send any more spans while this flushes what has already been pushed.", "pred": "Fix typo in batchspanprocessor (#1088)"}
{"gold": "Not sure about that, an array is iterable right? But if I pass array, that clear method wont work", "pred": "Fix CS"}
{"gold": "make sure the config changes stuck. are there any invalid config values? maybe write tests around empty `trust_domain`, negative/missing `ttl`, invalid `key_size`, etc...", "pred": "Fix import path in test"}
{"gold": "Why are you changing this?", "pred": "Fixing the gruntfile"}
{"gold": "@phirefly Can we look at a list of RWAs, or ask someone to double-check that this format is correct? Otherwise :shipit:", "pred": "Add expense_type to expense model"}
{"gold": "Still request a local sort for bin-packing based on the defined table sort order.", "pred": "Fix Spark3BinPackStrategy"}
{"gold": "As with the other PR, user name is better.", "pred": "Fix request_model"}
{"gold": "a peer's accounting lock is held during `Pay`. we should avoid adding additional blockchain calls here if possible.", "pred": "fix(pay): fix typo in pay.go"}
{"gold": "Maybe wording could be improved. Is this \"not enabled\" or it is \"not available\". Not sure about that.", "pred": "Fix linting errors in sync-constructor.js"}
{"gold": "I looked at the new `conditionalBranchesEvaluated` function and it looks like the part added is a duplicate of the line above?", "pred": "fix: task reconciler should not update task status when task pod is not found (#1106)"}
{"gold": "can you put this flag in `blockRefInfo` instead? It would be a shame to add one more file per block, especially since we've run into inode limits. I guess `blockRefInfo` should maybe then be renamed to `blockInfo` or something. But we're stuck with the filename.", "pred": "Fix comment."}
{"gold": "Shouldn't we keep other parameters if only IP is empty? Or maybe return an error if it's a mandatory argument?", "pred": "Fix typo in consumer config parser"}
{"gold": "Was this just wrong before? The names indicated types but type wasn't specified. I guess the tests passed as comparison worked with ``type=None``?", "pred": "Fixed test_idxmapping_add_dimension"}
{"gold": "icebergCol.name() is the unqualified column name", "pred": "Fix typo in OrcMetrics"}
{"gold": "It's generally a bad idea to use mutable types like lists as default values for parameters. Lots of strange, difficult to debug side effects can occur. I see that there was already one example of this prior to this commit which probably explains why it seemed innocuous to add more but I'm going to rework this before committing to master.", "pred": "Fixing typo in metric alarm"}
{"gold": "We run prettier as an eslint plugin, so this harmful", "pred": "chore: update eslint config"}
{"gold": "Check if the TypeDescriptor and MemberDescriptor includes are necessary", "pred": "Fixed compilation error in HelloWorldPublisher"}
{"gold": "delete the empty line here.", "pred": "fix: remove unused import"}
{"gold": "Line is too long. [89/80]", "pred": "Fix typo in subscription spec"}
{"gold": "You don't need to expose this method to do what you want. There are already public addNewGetMapping, addNewPostMapping, and addNewDeleteMapping methods.", "pred": "Fixing a bug in the JsonHttpRemoteConfig class."}
{"gold": "This test passes in `dev`. Why wouldn't this work?", "pred": "Fix typo in test name (#1015)"}
{"gold": "ARN -> Amazon Resource Number (ARN)", "pred": "Update lambda_function.py"}
{"gold": "Why not use the overload that takes an instance?", "pred": "Fix typo in comment (#1041)"}
{"gold": "`Blockchian` is a misspelling of `Blockchain` (from `misspell`)", "pred": "fix: import path of iotex-core (#1274)"}
{"gold": "`agent/gpu/nvidia_gpu_manager_unix.go:47: struct field lock has json tag but is not exported`", "pred": "fix: nvidia gpu manager"}
{"gold": "nit: better rename to `TEST_QUEUE_ARN` or `TEST_EVENT_SOURCE_ARN`", "pred": "fix: lambda test"}
{"gold": "Would this mean that podMonitorSelectors suffer from the same issue if they are the only configuration set?", "pred": "Fix typo in comment"}
{"gold": "`ctx` is unused in GetEnvironment", "pred": "Fix typo in comment"}
{"gold": "We usually use OkDialog()", "pred": "Fix #1050: Show text in the line list"}
{"gold": "could we please change that to something that indicates that this feature is not \"production\" ready!", "pred": "Fix typo in BesuCommand"}
{"gold": "swim -> swin. Other configs and file names also should be modified.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "nit: arg description for \"key\"?", "pred": "Fixing a typo in the bigquery client."}
{"gold": "If we don't have a `dir` yet, we wouldn't need to do a sync right? If so, perhaps we can just `getStoredDir()` like `Attr()`?", "pred": "Fix typo in tlf.go"}
{"gold": "I still don't seem to fully understand this. Why are we testing the host if DR_HOST_NOT_TARGET is not set?", "pred": "i#1505: Fix typo in elf_loader.c"}
{"gold": "in the current implementation, both schemes are supported (you can call either `/bzz` or `/v1/bzz`). i would suggest to keep it this way", "pred": "fix(bzz): fix test"}
{"gold": "hmm, I think we can just do `new Error(assembly.error)` and that should set `error.message` correctly too. I don't know why it was done this way with a separate `.message` assignment before :sweat_smile: Should we do `error.assembly = assembly` so the template editor can access it that way, rather than parsing `error.details`?", "pred": "fix: remove unused import"}
{"gold": "This should never be empty. The access field always needs a value of at least `c:0` or `r:0`", "pred": "[BUGFIX] Fixing typo in Typo3PageIndexer"}
{"gold": "Another question is, do we want to call `os.Getenv()` every time we parse a file? That seems a lot.", "pred": "fix(parser): use the new libflux API"}
{"gold": "minor: please rename all occurrences of `A` to `T`. please also rename `v` to `value`.", "pred": "Add Tuple.of()"}
{"gold": "Do we want it to be so dynamic? My first idea was to base it on SyncConfig.BeamSync .", "pred": "Fix ParallelSync test"}
{"gold": "can you change this instead to just `type.toString()` and then you wouldn't have to expose the getBitMask in the enum. (Alternatively you could have used `type.hashCode()` but that doesn't feel as nice)", "pred": "Fixing RemoteNetworkConnection"}
{"gold": "I'm confused by these tests. Shouldn't the template string `@importance_type@` have been replaced with the actual value of `importance_type`?", "pred": "[python] fix test_plot_importance (#3075)"}
{"gold": "Let's keep using NewKeeper so that it got covered by tests.", "pred": "Fix typo in keeper/keeper_test.go (#100)"}
{"gold": "I only see new imports. Is there any functional change in this file?", "pred": "SOLR-15989: Remove unused import"}
{"gold": "ineffectual assignment to `err` (from `ineffassign`)", "pred": "Fix linting error"}
{"gold": "Would you mind removing the default parameter above? (I doubt I'll ever use defaults again since you still have to protect against callers explicitly passing `null` or `undefined`)", "pred": "fix(webdriver): fix typo in jsdoc"}
{"gold": "Make sure the old logging functions still work, but add deprecation warnings (unfortunately Python suppresses deprecation warnings by default, so I'm not sure if anyone'll notice).", "pred": "Fixing bug in FindMolChiralCenters"}
{"gold": "Not directly related to the topic of this ticket: I think this API design is a bit confusing. To disable delemetry, I would write `managementService.enableTelemetry(false)` which is not intuitive to read. Maybe `toggleTelemetry` instead of `enableTelemetry` is more clear.", "pred": "chore(test): fix test"}
{"gold": "Again I suggest returning `AnnotatedCodeLocation[][]`.", "pred": "Fix bug in error list where the error message was not being displayed."}
{"gold": "We should probably require an increased verbosity to output for anything below the cluster itself to avoid spamming the logs. It would also be good to give additional context as to what we are attempting to reconcile since the controller has multiple workers.", "pred": "fix: remove unused import"}
{"gold": "Not needed anymore", "pred": "Add missing field to OptionsNetwork"}
{"gold": "Am I right in thinking this completely avoids the situation where `enable_calltarget_state_by_ref` is `true`, but the managed integrations don't expect a by ref argument? For example, if there's an exception here, that seems like a fatal problem, as we would have a mismatch for jit rewriting? We should disable instrumentation entirely in that case shouldn't we? i.e. if this (or the existing `EnableByRefInstrumentation`) calls fail, should we bail out of this method entirely as we can't safely instrument?", "pred": "Fix typo in ByRef instrumentation (#1366)"}
{"gold": "nit: spaces seem off", "pred": "Fix typo in comment"}
{"gold": "shouldn't the em parameter be called ec?", "pred": "Fixed a bug in PBFParser"}
{"gold": "Please change this to use o.DidSign(o) as implements this logic without performing any of these checks that duplicate something that JWT can do correctly. If the JWT deserialized properly, and DidSign returns true, the JWT was signed by one of the listed operator keys.", "pred": "Fix typo in comment"}
{"gold": "Talking about style, IMO extracting either `getComponent()` or `getPubDate()` to variables would make this line easier to read.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "package header missing", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Just a thought (doesn't change the output or anything) - do you think we'll ever want to access the other properties of `oldVNode` from within `_childDidSuspend`? If so we could pass `oldVNode` here and then check these properties in the _childDidSuspend implementation. I don't have strong feelings either way, just occurred to me.", "pred": "Fix typo in comment"}
{"gold": "We should be configuring the base paths somewhere..", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "May also need to test the normal functionality with min/max_sizes", "pred": "fix: remove else block"}
{"gold": "We can remove this one. It's just a random one I got for free for testing.", "pred": "Update mainnet.go"}
{"gold": "File is not `goimports`-ed (from `goimports`)", "pred": "fix: import path of actpool (#1073)"}
{"gold": "(maybe this should be MyDevice or just removed entirely?)", "pred": "fix: add files button"}
{"gold": "Can you do a nil check here, as the task isn't always nil here?", "pred": "fix(payload): fix typo in payload_handler_test.go"}
{"gold": "`lodash` shouldn't be grouped under WordPress dependencies", "pred": "Remove commented out code"}
{"gold": "Does order matter? Should we sort by enode key to make duplication checking easier?", "pred": "Update discovery configuration"}
{"gold": "Can you explain this too? This seems to go beyond linting.", "pred": "docs: fix typo in acmeauth docs (#3526)"}
{"gold": "I just moved this into the render.js UT file since this test doesn't actually use an components", "pred": "Add test for #1008"}
{"gold": "We do have to capture and check the err here right? I don't think we need to capture the location of the file though for this context.", "pred": "Fix typo in config.go (#148)"}
{"gold": "an unused import", "pred": "fix import"}
{"gold": "If this value doesn't exist (do an `, ok := ...` check), we should initialize and store it", "pred": "Fix typo in comment"}
{"gold": "Would use parenthesis to explicitly state the associations of operands ```js const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || (-(2 ** 53) - 1)", "pred": "fix(minSafeInteger): use Number.MIN_SAFE_INTEGER if available"}
{"gold": "This handle is now private to pyserial, but if there is no public function to retrieve it I guess this is the best we can do.", "pred": "Fixing serial.Serial on Windows"}
{"gold": "This function is what **the compositor** calls when it wants to fullscreen a client, not what the client calls.", "pred": "xdg-shell: fix typo in comment"}
{"gold": "s/not existed Pod/non-existing Pod", "pred": "Fix typo in traceflow test"}
{"gold": "Why did we not leave this as just `svcDescriber`?", "pred": "Fix typo in comment"}
{"gold": "nit: I think we've been (in)consistent in leaving a blank line here.", "pred": "Fix import error in group_dao.py (#100)"}
{"gold": "Maybe we can change it to a more generic name like source_id.", "pred": "Fixing the violation table name"}
{"gold": "What's the theory on why this could fix the hang? It seems like the call to `GetRootNodeForTest` will always need to call into the crypto object before returning an error, and so it should block on that `c` receive, after which the test immediately drains `errCh`. So I don't quite see how buffering would help...", "pred": "kbfs: fix test failure due to missing import"}
{"gold": "Maybe add an assert in arch_init or somewhere?", "pred": "i#157: Fix decoding of VEX.W=1 in 32-bit mode."}
{"gold": "I wonder what does this `// nolint` ignore? And what are the standards that you choose which error to fix and which to ignore?", "pred": "fix: network delay testcase (#1363)"}
{"gold": "what about the line below, forceUpdateCollection?", "pred": "SOLR-10076: Fix HttpSolrCall retry logic"}
{"gold": "Doesn't this go in the opposite direction of #1051 / #1062 by putting platform-specific logic back into this module?", "pred": "(maint) Fix cmd_line to use the correct prepend_commands"}
{"gold": "I think this is the only line in JS legacy code that should be updated based on the renaming. `global.googlesitekit.setup.isAuthenticated = response.authenticated;` would be sufficient to keep the old name for the legacy JS data (which will be phased out in the long term) while supporting the new name in the API route. All updates to the JS components above wouldn't be necessary.", "pred": "Fix undefined variable."}
{"gold": "Technically, this would allow `pingWaitTime` to be `false`. I don't know if it matters here.", "pred": "fix(axe-core): fix axe-core-4.0.0-beta.3 compatibility (#101)"}
{"gold": "I only want the proxy request for this to run for kinesalite. So this just returns true if the KINESIS_PROVIDER is kinesis-mock", "pred": "Fixing test"}
{"gold": "Please add your name to the list of copyright holders.", "pred": "Fix copyright header"}
{"gold": "Maybe maxRetryTimes should be bigger than 2. Return Max(maxRestryTime, 2)?", "pred": "[DUBBO] Fix typo in IpPortManager"}
{"gold": "Call `userName` is good enough, `signedUserName` is narrowing the actual usage of this method.", "pred": "Fix typo in comment"}
{"gold": "How would you feel about a static method to express intent?", "pred": "Fix typo in ProcessExit event handler (#1007)"}
{"gold": "Do we know for sure that no other code changed its value? (Maybe some weird testing use case or something) Why not just use the actual value instead of risk lying?", "pred": "Update tls.go"}
{"gold": "the partInstall.go isn't an auto-generated file, and the part.sql doesn't exists either.", "pred": "fix: remove unused import"}
{"gold": "`k` is unused in PutHash", "pred": "Fix typo in comment"}
{"gold": "Use IOUtils instead", "pred": "Update Utils.java"}
{"gold": "It's not related to the line of code, but I don't know how to write it in a more proper place. Looks like `e2e/myst-provider/db/myst.db` should be in `.gitignore` file and should not be commited.", "pred": "fix(identity): fix identity manager fake"}
{"gold": "nice touch since Google likes to change things every now and then.", "pred": "Update options.py"}
{"gold": "Make `CircuitBreakerManager` implement `PluginInfoInitialized`", "pred": "SOLR-15266: Fix typo in SolrCore.java"}
{"gold": "This is extra awkward, QVariant.convert() takes a QMetaType which takes the value of a QMetaType.Type.", "pred": "Fix typo in comment"}
{"gold": "Nit: finished -> finish, \"done passing it\" -> \"passed it\".", "pred": "fix: remove unused import"}
{"gold": "Maybe mention that it will be saved to the filesystem otherwise?", "pred": "Fixing the autoload path"}
{"gold": "Probably cleaner and more general to do this: string,Format(\"Column {0}\", i+1) That way if the local language has a convention like \"3 column, this is\" it still works.", "pred": "Fix #1000: Tooltips for import transition list columns"}
{"gold": "This can be uniformed too", "pred": "Fix typo"}
{"gold": "It looks to me that this does not have to be exported.", "pred": "Fix typo in mock_test.go"}
{"gold": "It looks like this is only used in order to extract the snippet file names from GapicProviderFactory. I wonder if it would be better expose the snippet file names directly, without exposing a test-only function in non-test code.", "pred": "Fix typo in ApiConfig.java"}
{"gold": "Another question: this is being removed, but I don't see a corresponding removal if it being called? Was it never used (or am I just missing it)? (is it related to what was in the onclick that got removed, i.e. was that supposed to call this and not something in the backing bean?)", "pred": "fixed bug with dataset field type not being updated"}
{"gold": "Suggestion: `.. does not have an Approved condition set to true`", "pred": "Fix typo in comment"}
{"gold": "I would say that client class should have default of False and Cloud prov should enable deleting.", "pred": "fixing blazemeter uploader"}
{"gold": "Did this remove the BOM or something?", "pred": "Fixing a typo in the comment"}
{"gold": "This makes the BlockHeaderValidator mutable, and IMHO should not be done. Note we have a builder that has the exact same method, so instead of mutating a produced BlockHeaderValidator we should hook into wherever the builder is being created.", "pred": "Fix typo in BlockHeaderValidator"}
{"gold": "May be add information about parameters to the doc string while at it?", "pred": "added a function to get the current output device name"}
{"gold": "Naming of this sounds a bit awkward. Perhaps priv_legacy_getTransactionCount or priv_legacyGetTransactionCount?", "pred": "Add new RPC methods"}
{"gold": "This one should probably be added to the list in #24 . It's possibly indicative of an issue, but there isn't a VUID for it.", "pred": "layers: Fix typo in comment"}
{"gold": "Why this indentation change? Seems the original indentation would be fine, and leaves more room.", "pred": "Fixing the build_network_url function to use the correct API version."}
{"gold": "Would be nice to know what the `update` argument does in the docstring.", "pred": "Fixed bug in MultiDimensionalMapping."}
{"gold": "I think we can just use `io.BytesIO` here.", "pred": "fix import"}
{"gold": "This ensures that the User-Agent header matches during replay.", "pred": "Fix typo in gcp_test.go (#1106)"}
{"gold": "What units are used for this default?", "pred": "Changes to default values for USTAT_MIN_ROWCOUNT_FOR_LOW_SAMPLE and USTAT_MIN_ROWCOUNT_FOR_SAMPLE."}
{"gold": "I am wondering if it makes sense to make this a flag to `flatc` rather than a preprocessor flag, since this is generated code, it would make more sense to simply omit this code completely if the flag is not specified", "pred": "Update Ability.cs"}
{"gold": "Doesn't this change the behavior (edit: oh, I see, never mind).", "pred": "Fix #100: Don't ask to save when closing the last tab"}
{"gold": "I think you need a `do` at the end of this line.", "pred": "Fix typo in GemStone install script"}
{"gold": "Not passing in a `:params` key here.", "pred": "Fix sort link to use current_sort_field.key"}
{"gold": "Feels like this should be an option and not the default. Leaving them running would give you immediate response to claims, which might be what some people would want. Hibernation is AWS only right now and probably other clouds will just disregard the setting but arguably validation should be rejecting attempts to create / update powerstate on gcp/azure/etc. I'd pitch we put this onto the pool spec and make you opt in.", "pred": "Fix typo in clusterclaim_controller.go"}
{"gold": "I think I saw somewhere that it has been fixed and that you can use #NETCOREAPP3_0_OR_GREATER but I may be wrong.", "pred": "Fix test condition"}
{"gold": "what's the second part for?", "pred": "fix: fix typo"}
{"gold": "It's not clear to me what the \"super\" test above is for. As far as I can see, the test runs a spellcheck for \"super\" but then uses \"fob\" as the index into suggestions, which will never find an entry.", "pred": "LUCENE-5783: fix test"}
{"gold": "revert this file change", "pred": "fix: remove unused import"}
{"gold": "I think this is the most elegant way to allow us to still fail on `I`.", "pred": "Fix typo in test file"}
{"gold": "Wouldn't it be better to use a sql `IN ( :exact_value )` ?", "pred": "Fix search in admin"}
{"gold": "So far this is not working as expected... working to further investigate WinRM protocol and the gems behavior.", "pred": "Fixing the winrm transport"}
{"gold": "So now there're two ways to get requests: `ScenarioExecutor.get_requests()` and `Scenario.get_requests()`. To avoid confusion we should probably make `Scenario.get_requests()` method private, or hide it in some other way.", "pred": "Fixing a bug in the ApacheBenchmarkExecutor"}
{"gold": "This existed already, but seeing as you are changing the variable to have an explicit type it could be made a const reference to remove a copy.", "pred": "Fix bootstrap server"}
{"gold": "I don't think this code is being tested; this method can be removed without the test failing", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "@codepoet2017390 You have already initialized this ArrayList in the onPreExecute method then why do it here too?", "pred": "Fix for #100"}
{"gold": "This covers the `RESTRICT_ACCESS=true` x non-gsa pair, but we probably want to test the three other permutations: (`RA=true`, gsa), (`RA=false`, non-gsa), (`RA=false`, gsa)", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Please don't do this - if you want to disable code permanently delete the code, if you need to disable it to test don't commit. Such sections are very poorly highlighted during review and can cause unspotted issues slipping through the process...", "pred": "Fixing a typo in the focusManager.js"}
{"gold": "I'm starting too feel we have too much abstraction and too many interfaces here. But this method is definitely the most confusing IMO. For one, it's called \"Get*\" but it does not return anything... I don't have a good understanding of what's going on anymore, so it's hard for me to suggest an alternative, but it's pretty clear to me that this interface needs to be rethought. An interface where all the parameters are themselves arbitrary objects (`interface{}`), whose actual type depends on the specific interface implementation, is not a helpful abstraction", "pred": "Fix import path for conntrack package"}
{"gold": "It fills me with endless sadness that we can't use Selenium's own `SessionId` here.", "pred": "[java] Remove unused import"}
{"gold": "Interesting. So you've found that it's faster to request only the \"Stat\" without the data so long as this is the typical path?", "pred": "SOLR-10066: Fix typo in ZkStateReader javadoc"}
{"gold": "Is this a future fix? I thought the local identifier scope and the package issue were the same one.", "pred": "chore(flux): update flux test skip list"}
{"gold": "Not super important, but this line could be split up.", "pred": "Fixing a typo in the name of the class."}
{"gold": "Maybe we should better call the dispose function without checking the value of `item.data` (since the dispose function is setup before `data` is set up).", "pred": "fix a bug in the context dispose function"}
{"gold": "Why set to GPU, is it CPU?", "pred": "fix bug in SyncedMemory::to_cpu()"}
{"gold": "This should be `computed('i18n.locale'....`", "pred": "Fix linting error"}
{"gold": "can we not expose the channel directly? or at least expose it as a read only channel?", "pred": "Fix typo in comment"}
{"gold": "Can we add a `--with-bashcompdir` here to override this? I'd like to be able to do unprivileged builds.", "pred": "build: fix bison detection"}
{"gold": "We will be removing this maya/volume package completely. Do not use this.", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Why you think that `model_ptr` will be `nullptr` when memory allocation is failed? I think `new daal_knn::Model(column_count)` would throw `std::bad_alloc` if `operator new` is not overloaded. Is it overloaded by DAAL in the way it simply returns `nullptr` in case of bad allocation?", "pred": "Update knn_train_kernel.cpp"}
{"gold": "Where does this 0.001 come from? Is this from the network collateral cost function, which happens to be hardcoded right now? I think it's going to rot very quickly: it depends on sector size and (probably) block height.", "pred": "fix(cmd/lotus-miner/create): fix help text for create miner command"}
{"gold": "Please update the license header in each source file. For more information see: #2697", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "!numbers -> numbers", "pred": "Fix typo in comment."}
{"gold": "so we don't have universal rules afterwards? In that case I'd remove this entirely (and maybe some places where it's used get cleaner) since we shouldn't ever add a universal rule. Not only because it's way simpler in TS, I'm also just super skeptical about \"universal\". In case of this rule, even control characters may have their place in Swaggers, e.g. in `examples` sections where you can have raw response bodies where control characters are perfectly valid.", "pred": "Fixing a typo in the comment"}
{"gold": "You're welcome to surface this option through the API, but I'm not going to make this the default behavior.", "pred": "fix(exec): fix typo in exec"}
{"gold": "Just a thought that any further extensions of `buildBinaryFor` signature could be done as `buildBinaryFor(..., opts... BuildOptions)` for better readability.", "pred": "fix: build binary for all platforms"}
{"gold": "I'll fix the InMemoryExporter right after this PR lands", "pred": "Fixing the build error (#206)"}
{"gold": "Good call, none of these are technically invalid", "pred": "layers: Fix typo in ValidateCreateSwapchain"}
{"gold": "this one should be updated too", "pred": "Fix build script (#1042)"}
{"gold": "maybe need to add microserviceId too.", "pred": "fix: fix typo (#105)"}
{"gold": "I'm curious, do you create this commit at the very end by rebasing and taking the value you had after moving everything ?", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "It's no longer possible to use `modifyRow` to trim rows and that's ok to use TrimRows instead. But I think we should move this test to TrimRows plugin tests as `trimRows` setting is not a part of the `core`.", "pred": "Fix test"}
{"gold": "The function seems to either return \"default\" or return the extension stripping the preceding dot. Does the fact mean that we can no longer register `.default` as an extension?", "pred": "Fix build"}
{"gold": "this may require a statefile version update", "pred": "Update container.go"}
{"gold": "I like when `@deprecated` contains how to resolve it - eg. \"use `SplFileObject::fgetcsv()` instead\". The information in upgrade notes is usefull only during upgrade.", "pred": "fix CS"}
{"gold": "Nice to see that your local environment is up-to-date now for these changes.", "pred": "Fix import path for mock"}
{"gold": "Instead of setting it to null, i think lets set it to {}", "pred": "Fixing the router"}
{"gold": "We should bump this before releasing and remove all legacy fields that are safe to do so. Since we cannot have multiple versions anyway there's little value in walking around with the \"alpha\" stamp.", "pred": "Fix import path"}
{"gold": "I might suggest a different name for the `DEEPBIND` config.h macro. Perhaps `FLUX_DEEPBIND` to give a hint in the code that we're using a locally provided define.", "pred": "build: fix build with clang 11"}
{"gold": "Code generated by protoc-gen-go. **DO NOT EDIT.**. The correct way to fix `deprecated` in this file may be updating the protoc / protobuf / grpc and regenerate this file.", "pred": "Update bpfki.pb.go"}
{"gold": "We should make sure that we cover the testcases in a new unit test class.", "pred": "Fixed import"}
{"gold": "Is this only used in test code? Is there future utility in it for production code? If not, it would be nice if this could be moved into a test package. I'm not sure how hard that would be. CC @laser", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Super curious how you noticed this, as SPIRE itself currently only configures once...?", "pred": "Fix typo in comment"}
{"gold": "This `startsWith` seems a bit brittle because in the code base we'll occasionally spell it \"DataFile\".", "pred": "fixing typo in NotFoundExceptionHandler"}
{"gold": "if it keeps reconnecting for too long, how should we get alerted?", "pred": "add a method to get the db connection"}
{"gold": "it's better to use single name style in one name.", "pred": "Fix for bug #1008."}
{"gold": "As defaultSendPort is being removed, and I don't like TODOs on examples, please remove the whole line", "pred": "Fixed bug in EprosimaServer"}
{"gold": "Should we return `nil` when `err == errChangeSetEmpty` instead of calling l.103 `WaitUntilStackUpdateCompleteWithContext`?", "pred": "fix(cli): fix typo in dns delegation code (#1134)"}
{"gold": "Hmmm I thought spotless would wrap this line, but it doesn't seem to complain about it", "pred": "Fix typo in javadoc"}
{"gold": "I think this will require updating the api version. we are planning to do this anyways, so perhaps we can lump this in so we don't have to update too many times?", "pred": "Update selector.go"}
{"gold": "revert this for parity", "pred": "Fix for #1166"}
{"gold": "INCR_BATCH and DECR_BATCH could be exposed as tuneable command line options but that might be too low level to expose. I think keeping private for now where \"in the know\" folks could use to try and tune makes sense. These values were choosen mostly \"at random\" and have worked out for us thus far.", "pred": "Fix valgrind.h include guard"}
{"gold": "Currently this isn't very clean because we have to re-use some of the predefined parser types - the demo uses WRITER_U_CTAGS but there should be some support for custom writer type.", "pred": "Fixed a bug in the tag writer."}
{"gold": "I think this was left it accidentally :)", "pred": "Fixing request spec helper"}
{"gold": "Can you finish re-ordering this list to match the one that was deleted?", "pred": "Fix typo in comment"}
{"gold": "Do we need to check if `exp.Target.StressChaos` is `nil`?", "pred": "fix: fix the wrong comment (#1015)"}
{"gold": "AWS Identity and Access Management (IAM)", "pred": "Update CreateAccessKey.java"}
{"gold": "not calling this is going to impact current functionality which depends on PVC.. let us still call this and set the values to default as 'none' (or empty) by handling the error from 'get' operation", "pred": "Update e2e-test.yaml"}
{"gold": "`!=` is no the same as `<`", "pred": "[media] fme: fix build error"}
{"gold": "No need to create a dir for transformer. Simply move transformer.py into mmdet/models/utils/", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Can't you just add `SelectSubscriptionActivity` directly to the manifest instead of opening `MainActivity` that then starts it?", "pred": "Fix crash when opening the app from a deeplink"}
{"gold": "Maybe say \"the spec's %check section\" so it's clearer what we mean.", "pred": "Fix typo in comment"}
{"gold": "I think after change this check `rowInMapper === null` is always false, so it's useless.", "pred": "fix(column-sorting): fix row index mapping"}
{"gold": "ClockIpLpi2c4.Enable() is required. The same change is required for enablePeripheralClocks().", "pred": "Update clocks.go"}
{"gold": "nit: this should be `SHA` since it is an acronym for `Secure Hash Algorithm`, no?", "pred": "Fix typo in PrometheusSpec (#102)"}
{"gold": "Not sure if Intl can be defined but not `Intl.DateTimeFormat`. Both seem to have the same percentage on CanIUse.", "pred": "fix(timezone): fix timezone detection"}
{"gold": "PTAL, looks like the order of PVC & PV is reversed for different storage-engine types, for Jiva/CStor the args sent to sendEventOrIgnore are `PV, PVCName`.", "pred": "Fix typo in comment"}
{"gold": "Remove the trailing white space", "pred": "Update PhimpMe.java"}
{"gold": "No need to modify this.", "pred": "fix: update mmcv version (#100)"}
{"gold": "would be nice at some point to clean this signature up... not relevant for this PR", "pred": "fix(dnsaddr): fix import path"}
{"gold": "Here, is it `null` because it is `null` in `$fieldConfiguration`, or because it has been set to `null` above in the `array_replace` ? If it doesn't exists at all in `$fieldConfiguration`, I think you should add `type => 'text'` above in the `array_replace`.", "pred": "Fixing a bug in the DoctrineORMTypeGuesser"}
{"gold": "I was thinking about this for #2928 too, which also uses `endsWith`... Presumably `SomeOtherObject` would match `endsWith(\"Object\")`, meaning that something more sophisticated like splitting it then iterating right to left would be needed in order to do this robustly?", "pred": "Fix JavaParserFacade.findContainingTypeDeclOrObjectCreationExpr()"}
{"gold": "I think this name is a bit confusing because if you asked someone what type of exporter they were using they would probably say Zipkin or Jaeger, etc. How about `ProcessorType` with `Simple` and `Batch` definitions?", "pred": "Fix typo in ZipkinExporterOptions (#1016)"}
{"gold": "`req` is unused in RecreatePipedKey", "pred": "Fix typo in webapi/piped/fake/fake.go (#2252)"}
{"gold": "The \"Adsense\" term needs to be capitalized - I just noticed this was wrong through ACs and IB, so not a problem of the PR itself really. I'll quickly fix it.", "pred": "Fix typo in AdSense setup component."}
{"gold": "do which methods need to be registered? is it basically just the ones that are directly referenced in ParDo calls? (The Beam GoDoc doesn't say anything about it. :/ )", "pred": "Remove unused function"}
{"gold": "@bmckinney does this mean that the bibtex citation will be available via API?", "pred": "fixed bug in access bean"}
{"gold": "We should probably tag the cliquet-fxa version as well.", "pred": "Fix requirements"}
{"gold": "IIRC we need to use memset, because an empty brace is not C99 comformant, and because we cannot use `{0}` because how the struct is organized is not defined in POSIX (the initializer cannot be `{0}` if the first property of the struct is a struct).", "pred": "Fix build on FreeBSD"}
{"gold": "Will we be adding this to `AppliedTo` as well? If not, any reason why not?", "pred": "Fix typo in NetworkPolicyPeer (#106)"}
{"gold": "Just a note that this feels weird being on the base NVDAObject rather than IAccessible, but right now, I understand that's how it has to be because we fire MSAA caret events on the focus object regardless of whether it's IAccessible. I think we should consider restricting these caret events to focus objects that are IAccessible subclasses in future, but that change is probably too risky for this PR. CC @MichaelDCurran for his thoughts.", "pred": "Fixed a bug in the focus handling code."}
{"gold": "This change and other similar ones should not be part of this commit. This commit is about adding a ImageUploadType not fixing controllers and stuff.", "pred": "Update PaymentController.php"}
{"gold": "I am a bit confused about PING here. Ping is implied and it overlaps with \"$SYS.REQ.ACCOUNT.%s.%s\" where the last token is what is requested (CONNZ) and the one before is the requested account id.", "pred": "Fixing a typo in the comment."}
{"gold": "nit: use the OptSubFolder constants. Also in the client you are using \"maxdepth\" but in the server the constant for \"depth\" is being used.", "pred": "api: fix cloud-migrate status response"}
{"gold": "I also moved this to `/verdaccio/storage` since it's written in runtime, and the approach here is to make the configuration by default read-only.", "pred": "fix: test for config file"}
{"gold": "nit: s/has cancel method/has a cancel method", "pred": "fix: nodejs gapic context (#118)"}
{"gold": "Useless assignment to variable - `second_quiz`. Use `_` or `_second_quiz` as a variable name to indicate that it won't be used.", "pred": "Add test for quiz#last_question"}
{"gold": "Is this still needed since there's the `GzipPrecompressed` type?", "pred": "Fix typo in gzip.go"}
{"gold": "this is spelled wrong and also not used so remove it", "pred": "Fixing import error in CLAClassifierRegion"}
{"gold": "It might be right here that's the issue ^", "pred": "Fix typo in javadoc"}
{"gold": "@danieldietrich let's leave existing extension. Here we just mark `keyComparator()` with `@Deprecated` annotation", "pred": "Fix typo in SortedMap javadoc"}
{"gold": "This breaks CI. I am not sure why you need to include io.h in this file especially on linux.", "pred": "Update main.cpp"}
{"gold": "this seems equivalent", "pred": "fix(render): fix replaceNode"}
{"gold": "change size to 50MB criticial, 10MB warn... change count to 50k critical, 5k warn...", "pred": "Fix typo in config.go (#1181)"}
{"gold": "This has nothing to do with master/slave replication. Is this something we want to change too? If so, I guess this is an aggregation?", "pred": "fixing a bug in the pivot facet component"}
{"gold": "Maybe it makes sense to mention that those zombies are not forever, but only up to the moment when the parent process exits? Is that correct according to your observations, @benoittgt ? Please disregard this note if zombies remain after.", "pred": "Fix typo in comment"}
{"gold": "moto mock setup needs to happen before boto usage.", "pred": "Fixing a typo in the patch"}
{"gold": "`hasattr(cb, 'first_metric_only') and cb.first_metric_only` -> `getattr(cb, 'first_metric_only', False)`", "pred": "fix typo in python code (#2862)"}
{"gold": "no newline for function", "pred": "Fix typo in comment"}
{"gold": "This makes me feel icky. We could also go the route of making `wlr_output.scale` a double instead of a float, but that would be a more widely reaching change.", "pred": "wlroots: fix typo in config_head_handle_set_scale"}
{"gold": "Again, would be awesome if you could remove the tabs in these 3-4 lines as well.", "pred": "Fix a bug in XMLColumns"}
{"gold": "You're moving multiple times from `step.name`; you're not allowed to do that. Instead you have to copy the `step.name` string and (if you want to) move once at the very last.", "pred": "Fix typo in makeRouteStep"}
{"gold": "What about `may not end`? @jancborchardt", "pred": "Fix missing semicolon"}
{"gold": "If you think about it, the status should be PermissionDenied?", "pred": "Fix typo in comment"}
{"gold": "Calculation looks good but don't know what format etc grafana expects this to be in.", "pred": "Fixing a bug in the mapping job queue"}
{"gold": "nit: We could use the `to_str(..)` util here. (let's not bother changing for this PR..   )", "pred": "Fix test_docker_client.py"}
{"gold": "Can you rename alias to `executiongenpb`. The rule is package+\"pb\" for `temporal-proto` and package+\"genpb\" for server protos.", "pred": "Fix import path for tasklistpb (#105)"}
{"gold": "Any noticeable performance hit? Any other way to avoid the allocation and copy even of the array?", "pred": "Fix typo in comment"}
{"gold": "What if you remove this line entirely from here?", "pred": "Fix typo in comment"}
{"gold": "`on_lateral` can also be implemented", "pred": "Fix bug in PAFPN (#100)"}
{"gold": "Please add a space between `if` and `(`.", "pred": "Fix itunes adapter"}
{"gold": "This statuses might have been better off with some custom status type. However, good for now.", "pred": "Fixing import path"}
{"gold": "Thanks for catching the bug. Here your change lets `v4IPNet` and `v6IPNet` take the first IPv4/IPv6 address in `addrList`. Maybe choose the last one also works and makes code simpler? What's your idea? @tnqn", "pred": "Fix typo in comment"}
{"gold": "nitpick: you can name this variable just `details`", "pred": "Fixing the user resource to return the correct error code"}
{"gold": "The character class in the regex should probably be \"[a-zA-Z0-9_]\".", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Please also increment `Settings.VERSION` and update `AccountSettings`.", "pred": "Update GlobalSettings.java"}
{"gold": "I think this should just say \"build <date>\". And when builddate wasn't set, e.g. somebody built weave with 'go build' or some other way, this should return \"unknown\".", "pred": "Fix import"}
{"gold": "Can we move this into a separate var and call it `desc` like below?", "pred": "Fix typo in comment"}
{"gold": "why RpcSchema need this annotations?", "pred": "[SCB-100] fix compile error"}
{"gold": "Not sure it makes sense to send the reply if we did not delete from the map, but I guess it does not hurt..", "pred": "Fix typo in comment"}
{"gold": "Most of these variables can be moved after `return` or to the body of `if` statement.", "pred": "Fixing a bug in the DataMap.createRow method."}
{"gold": "nit: Is this actually just a http \"unauthorised\" response? Or is that too vague? If this is the right way to go ... is \"token\" the right word\" Or do we want to say something else?", "pred": "Add error code for invalid private key"}
{"gold": "We check for `$future` in PuppetDB::Config, so this won't change behavior if you don't have `future` set.", "pred": "(maint) Fix puppetdb_client method"}
{"gold": "I think you should remove `if isinstance(by, str):`,. We also should fix the error message `raise ValueError('Not a valid index: TODO')` to match with pandas'", "pred": "[SPARK-25775][PYTHON] Fix type hint for DataFrame.groupby (#21605)"}
{"gold": "Curious - do we want this to be `OTel.GrpcHandler.Request`? For example, if someone is debugging a crash dump, they would get some hint that it was added by OpenTelemetry.", "pred": "fix(instrumentation-grpc): fix activity name (#2074)"}
{"gold": "nit: unnecessary `</p>`", "pred": "Fix typo in TableOperations javadoc (#1008)"}
{"gold": "Should just be `#ifdef ADIOS2_HAVE_HDF5`", "pred": "Fixed a bug in the ADIOS Open method"}
{"gold": "FYI: I deployed a stack with multiple lengths for the stack name and resource id to cloudformation, to see how it truncates the parts for the final FunctionName", "pred": "Fix bug in default resource name generation"}
{"gold": "Did we not use this field @_@", "pred": "Fixing a bug in the load balanced web service manifest"}
{"gold": "shouldn't this be `android_keystore_name`?", "pred": "Fix brave_safetynet_api_key config"}
{"gold": "Double check the issuers package too :)", "pred": "Fix typo in comment"}
{"gold": "This is out of date right? Now that `_is_first_level_self_reference` uses it as well? Perhaps we should make the docstring more general and not refer to method names that could change.", "pred": "Fix typo in comment"}
{"gold": "This test alone takes around 10-12 minutes to run. It has 20 subtests each of which takes around one minute. We should see if we there are redundant subtests that we can remove, or look for a way to optimize them.", "pred": "fix: remove unused import (#1007)"}
{"gold": "Good call, we need to keep that check :+1:", "pred": "fix: remove unnecessary semicolon"}
{"gold": "Should the interface have 2 `ParseHeaders` methods?", "pred": "Fix typo in HttpParser<TRequestHandler>"}
{"gold": "Nit: Does this make more sense as `iceberg.hive.metadata...`? The rest of the configs seem to start with `iceberg.hive`.", "pred": "Fix HiveTableOperations to use the correct method name"}
{"gold": "Is `baseURL` not required?", "pred": "Fix typo in validation error message"}
{"gold": "Just delete it, `embedding_rpn_head` is not a `Detector` which should have `show_result`.", "pred": "Fix a bug in embedding_rpn_head.py (#3655)"}
{"gold": "Where do we _get_ tag values? edit: I mean, where are these `GetFoo()` methods called from? It just seems weird to me that we are getting tag values from spans. I thought we only ever _set_ tags on spans.", "pred": "Fix typo in WebServerSpanExtensions (#1000)"}
{"gold": "This seems like log spam. Maybe expose the encoding as a method and log at the point of interest?", "pred": "Fix typo in zip.go"}
{"gold": "I looked up that one, and it seems correct: Authentification is French, Authentication seems to be correct", "pred": "Add PCO_PROTOCOL_TYPES for IPv6"}
{"gold": "Can we print a more human-friendly warning here, saying that plotting won't work or something along those lines?", "pred": "Added a comment to the plot class."}
{"gold": "@mhils didn't we try to get rid of these (now empty) wrapper classes?", "pred": "Fix import"}
{"gold": "I would avoid importing `felix/ipsets` package because this package is the windows equivalent and should be at the same level of `felix/ipsets`. We could add linux specific dependencies into `felix/ipsets` later and it will break Windows build.", "pred": "Fix import path for libcalico-go"}
{"gold": "Maybe, `import` would be a better name.", "pred": "Fix javadoc"}
{"gold": "Wouldn't we want `PARAMETER_MAX_RESULTS` in here as well? (I might be miunderstanding how this is used)", "pred": "Fixing a typo in the javadoc."}
{"gold": "We can re-use the config in our tests.", "pred": "Update spec_helper.rb"}
{"gold": "Wouldn't we have the same issue with the internal libevent? IIRC, the integration is pretty close to an exact duplicate. Or does the libevent m4 code already take that into account when setting this variable? PMIx _requires_ libevent, so it isn't like pmix_libevent_support can be anything other than 1. I'm okay with leaving this question for separate resolution - just wondering why we don't have the same issue here.", "pred": "Fix typo in pmix_check_libs.m4"}
{"gold": "The actual User-Agent string uses \"CriOS\" not \"CRiOS\"", "pred": "Update tls.go"}
{"gold": "Unused code deletion. Is that a desired thing? No implementation of this actually used this indexer, so removing it seemed reasonable (and was suggested by the compiler). Maybe this had an indexer so plugins could use it? This change is definitely pushing the limits of what is appropriate in a \"cleanup\" as it is changing public API surface area.", "pred": "Add missing method to IKeyValueStoreWithBatching"}
{"gold": "We'd lose the data here from the original teardown_exception and only get the dump_exception - I fear that that could make the actual error difficult to track if it cascades.", "pred": "(maint) Fix typo in error message"}
{"gold": "At this point in `diff()` we should know if we're dealing with a `component` or a native `html` element. We can reuse that information in this if-statement here :+1:", "pred": "fix(diff): fix diffing of svg elements"}
{"gold": "somewhere in reward protocol, we need to do if epoch is Fairbank { a.foundationBonusP2StartEpoch = genesis.xxx a.foundationBonusP2EndEpoch = genesis.yyy p.state(sm, adminKey, &a) } that is to write the 2 new values at Fairbank height then this logic can follow", "pred": "fix: fix typo"}
{"gold": "Dropping and recreating would delete all t he previous records, are they any important?", "pred": "Fixing the import issue"}
{"gold": "While it is technically OK to use `m.GetPaths()` here, and it's a mock code so it doesn't really matter, I'd still like to have `m.Path(\"devices\")` used here, because since commit 714c91e9f73a1512808476eb532b4aa36bbb7530 we're not supposed to use GetPaths() for anything other than state save/restore.", "pred": "Fix mock cgroup manager"}
{"gold": "Let's be consistent everywhere: either \"Disable\"/\"Enable\" or \"Disabled\"/\"Enabled\". I'm voting for the latter.:)", "pred": "Fix typo in comment"}
{"gold": "this works and is the smallest possible change but we could definitely fail earlier", "pred": "Fix BesuCommand"}
{"gold": "Should not have snuck in here right? This is a golang 1.17 feature, wii definitely want to update these", "pred": "Fix build error on arm64"}
{"gold": "Could you explain the logic with prevFolderId?", "pred": "Fix notes screen component"}
{"gold": "Please add license header", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "It bothers me that the user calls `initialize` without also calling `finalize`. It seems to me that we're essentially making `lbann_comm` a singleton object. Going further down this path, we would put `initialize` inside `lbann_comm`'s constructor and `finalize` in the destructor. This has it's own weirdness - the user must make sure it's lifespan matches the beginning and end of the program. We may also run into the case where someone might want multiple instances of `lbann_comm`, but this is not too important.", "pred": "Fixing typo in comment"}
{"gold": "We should probably make a unique_ptr<ROMol> typedef in ROMol.h and start using that liberally.", "pred": "fix test"}
{"gold": "Can you add missing asterisk?", "pred": "Update default-settings.js"}
{"gold": "late to the party, but I bet it meant to be `capitalizeLettersAfterNumbers` :)", "pred": "Fixing a bug in the Name class"}
{"gold": "The Activity is recreated on configuration changes and the value of the field is lost. So, e.g. pressing 'send' once will display the error message. If you rotate the device and press 'send' again, the message will show another time. Use `onSaveInstanceState()` and `onRetainInstanceState()` to save and restore the value of the field.", "pred": "Fix typo in MessageCompose.java"}
{"gold": "Looks like a \"find and replace\" unintended change here", "pred": "Fix typo in reloadOptions"}
{"gold": "haven't we got rid off `randomSP` recently? (I think `not learn` implied that)", "pred": "Fixing bug in SPRegion.py"}
{"gold": "Why we need use `in.GetStatus()` function here? Can we use `in.Status.xxxx` directly?", "pred": "fix(chaos): fix chaos-mesh chaos-controller-manager panic"}
{"gold": "@cretz Just a thought: what if another renewal process updates the certificate between the beginning of this for loop (above on line 67) and actually calling RenewCert? Even though we have a read lock on the certCache, something else could have renewed it by now, and finished, which would cause this certificate to be renewed twice. Could you double-check my thinking here and see if that's a plausible 'race' condition? I wonder if the lock needs to be put over this whole function. (It's still early here; I could be wrong...)", "pred": "fix(renew): fix renewal of managed certificates"}
{"gold": "We don't need this for the PInvoke?", "pred": "Fix build break in debuggers."}
{"gold": "nits, I think add a log (using s.logger) to show why does this return with no error is better.", "pred": "Fix typo in comment"}
{"gold": "Btw, It would be nice if we have some tests for those validation functions.", "pred": "Fix typo (#1875)"}
{"gold": "Should this be called something that indicates its function, rather than its content? validationMessagePrefix, or similar?", "pred": "Fix typo in PathTemplateCheckView"}
{"gold": "Please remove this line", "pred": "Fix copyright year in keyCommands.py"}
{"gold": "You could change the name of the command line switch too. Short options are typically one character after hyphen. wxWidgets' command line parser seems to handle `-nd` without confusing it with `-n` or `-d` but I'm not sure if that's by design or by accident. I'd remove the short option. `--no-daemon` is with hyphen but the rest of Manager and client uses underscore. Please change that.", "pred": "Fix typo in comment"}
{"gold": "File is not `goimports`-ed (from `goimports`)", "pred": "Fix typo in flag name"}
{"gold": "Why are we mentioning toybox in this message? AND it still says \"tdnf error\". What's the actual error? Should it be resolved instead of flagged?", "pred": "Fix typo in rpm repo cloner"}
{"gold": "You can remove these if they've been resolved in NODE-3405 and this isn't depending on it", "pred": "test(gridfs): add test for GridFS stream with no callback"}
{"gold": "don't need the class here if its empty", "pred": "Fix link to write plan"}
{"gold": "This should be computed('i18n.locale'....", "pred": "Fix appointment index route"}
{"gold": "Please add return and return type description to docstring of this method.", "pred": "fix: BigQueryClient.wait_for_job() should not raise exception if job is cancelled"}
{"gold": "What does 1 << 32 do? In irb typing this yields 4294967296. I didn't find the append operator in Numeric or Integer.", "pred": "Fix contributor controller"}
{"gold": "We generally use metadata for this sort of thing, indeed there is a `metadata[:execution_result]`.", "pred": "Fix typo in RSpec::Core::ExampleGroup#description"}
{"gold": "This was very confusing until I realized this might refer to the *bokeh* use of the word 'streaming'.", "pred": "Fix SpreadPlot"}
{"gold": "Can you rename this as `tasksToContainerStates` ? If you do that, you can rename the lock as well", "pred": "Fix typo in comment"}
{"gold": "Fixing `lint` warnings that have existed for a while.", "pred": "Fixing a bug in the UserAccountManager"}
{"gold": "An iterator **of {\\@code n} sequential elements,** where each element ~are~ **is the** given {\\@code element}.", "pred": "Fix typo in Iterator.fill() javadoc"}
{"gold": "If all of the `SqlCommandIntegrationName` values are the same, can we just remove it from `IAdoNetClientData` entirely and put the constant there?", "pred": "Fix MySql integration name (#1004)"}
{"gold": "Maybe regroup this import with the other cert-manager packages.", "pred": "Fix license header"}
{"gold": "There are spaces missing ;) Just have a look at the code style of the `if` statement above", "pred": "Fix crash when changing theme"}
{"gold": "We should pass the size limit as a parameter to Drain so that we don't take messages out of the pool and then drop them. It's ok to merge as is, I will file an issue.", "pred": "fix: typo in comment (#2047)"}
{"gold": "Patch lists are used in many places so this is going to break other updates. This should just be a local change in emit_special_ibl_xfer() to pass the second-to-last instruction instead of the last instruction.", "pred": "Fix typo in comment"}
{"gold": "@argakiig previous work was above live threshold, causing the high difficulty to bleed into other blocks when genesis open was processed in tests.", "pred": "Update genesis block"}
{"gold": "Metrics/LineLength: Line is too long. [89/80]", "pred": "Fix migration"}
{"gold": "Please also extend the config tests now to include the new field.", "pred": "systemconfig: add missing import"}
{"gold": "I think it's wise to keep the behavior backwards-compatible (so `false` as default)", "pred": "Fix JsonLayout.Attributes property"}
{"gold": "We don't need this line, do we?", "pred": "Fixing typo in comment"}
{"gold": "I don't know if we've actually had this problem on Upcase. I'd lean towards having a blank file unless (like on robots) we see multiple errors per week from this crawler.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "I'm not good at picking colors, if anyone else has a preference.", "pred": "Fix typo in render_decorations"}
{"gold": "Note that even if you cancel the timer, the refreshFolders function might still be running since it's async. Could that be a problem for the test units? One big issue I had with tests is they sometimes would work and sometimes fail randomly, and that's because there are still code running in the background. One example was the ItemChange class, which saves data asynchronously. So I've implemented a waitForAllSaved(), which can be used for test units, to make sure nothing is running once the test ends. So just wondering if we might end up with this issue here.", "pred": "Fix folders screen refresh"}
{"gold": "can we make this something more descriptive? like... types should compile? I'm still not sure exactly what this is testing... this says \"Exported types\" - but what does tsd actually look at?", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "this method is need for full screen video button to appear in players", "pred": "Fixing the issue with the video capture permission"}
{"gold": "Why is this a pointer?", "pred": "Fix typo in comment"}
{"gold": "nit: Space after comma", "pred": "Fix checkstyle"}
{"gold": "A similar field is already define in `scapy/layers/bluetooth.py`. Can you merge both definitions ?", "pred": "Fix for issue #110"}
{"gold": "`std::strtok` isn't necessary. The `std::string::find_first_of` is better C++ alternative to `std::strtok`. For example, see `CheckedError Parser::ParseEnumFromString` method.", "pred": "Fixing a bug in the C++ generator."}
{"gold": "This property is already declared in a parent with the same visibility/type/value. This one is redundant.", "pred": "Fix DocblockTypeLocation"}
{"gold": "This is required, otherwise multiprocessing will (for some reason) crash", "pred": "Fixing test_interactive_session_with_autorun"}
{"gold": "Please put in a separate line-separated block", "pred": "Remove unused import"}
{"gold": "Should error be eaten? If so, not clear why", "pred": "Fix typo in comment"}
{"gold": "This attribute is not defined if the condition is not met. Instead, you could define another RouteFactory (e.g. `BucketRouteFactory` with a class attribute like `allow_empty_list`)", "pred": "Fixing the authorization policy."}
{"gold": "Can we use the existing `InstalledTimestamp` function?", "pred": "fix: remove extra space"}
{"gold": "weird naming: `is` but `fields` (plural or singular ?) . If the method checks if the fragment has an invalid value, then \"hasInvalidValue\" or \"containsInvalidValue\" is fine no ?", "pred": "Fix #1088 : Add product activity crashing when clicking on the back button"}
{"gold": "Does this mean that `listenbrainz.org/user/iliekcomputers` will start getting 404s?", "pred": "Fixing a bug in the user profile page."}
{"gold": "Line is too long. [82/80]", "pred": "remove commented out code"}
{"gold": "That's a strange name =)", "pred": "Fix typo in CANSocket docstring"}
{"gold": "Thoughts on this? I'm not crazy about the brittleness of this but haven't found a good way to test more generically that a specific (custom) template has been rendered.", "pred": "Fixing the spec for the communicart mailer"}
{"gold": "Have we reached binding-level agreement on the `subscribe` terminology? My only concern is that it doesn't seem descriptive enough and may be confused with subscribing for notifications.", "pred": "Add missing method to Results prototype"}
{"gold": "would it not be safer to move this condition to the `addLink` method?", "pred": "Fix typo in comment"}
{"gold": "I think this might read better: > some apps need the response headers before starting to stream content with http2, so it's important to explicitly flush the headers to the client before streaming the data.", "pred": "Fix typo in comment"}
{"gold": "What does this return if there is no partition? I think that we should consider adding a struct type that describes this tuple. That way, we can use an empty struct for unpartitioned and a non-empty struct for tasks that are combined by partition. We could also support more combinations, like combining across day partitions by not across bucket partitions or similar.", "pred": "[CALCITE-2344] Add javadoc for FileScanTask.spec()"}
{"gold": "Also, it might be worth returning this for the above lookup on `kbfsRepoDir` as well, which could happen if someone tries to delete a repo in a TLF that has never had any repos at all.", "pred": "kbfs: fix a typo in a comment"}
{"gold": "Can this be `Hidden: true` as we already have a bunch of flags that are printed on `--help` and this seems like an average person should not care about it.", "pred": "Fixing flag name"}
{"gold": "Wouldn't this set $strictVariables = true when Config::get returns false?", "pred": "Fix twig auto reload"}
{"gold": "was this meant to be checked in?", "pred": "Remove unused import"}
{"gold": "check spaces after const name...", "pred": "fix(reconnect): remove unused constant"}
{"gold": "If the GPU setting is enabled, resourceFields.NvidiaGPUManager will be nil, right?", "pred": "Fix typo in nvidia driver version attribute name (#1837)"}
{"gold": "We should probably verify that it's readable too", "pred": "Fix typo in help message"}
{"gold": "See, here's an example where you removed the variable but kept the call, which makes sense.", "pred": "Fixing a bug in the XML reader."}
{"gold": "Please use `request.getTitle()` instead of `feed.getHumanReadableIdentifier()`: In this case, `feed` does not have a human readable title yet", "pred": "Fixed a bug in FeedParserTask."}
{"gold": "I think the wording on the left is better", "pred": "fix(clef): fix typo in comment"}
{"gold": "Please update the method described to point out that it maintains a chain of interceptors and they will be called in the same order passed in the options.", "pred": "Fix typo in comment (#107)"}
{"gold": "Is this case purely hypothetical or did it solve an issue that occurred in your testing? I'm trying to understand this change a little better", "pred": "Fix loading of the managed profiler (#1002)"}
{"gold": "Use instead `convert.Int32ToString` that was added in #762 for this purpose.", "pred": "Fix a bug in replication task processor (#1078)"}
{"gold": "If key is present, tree.put(k,v) needs to return a new instance for Maps and the same instance for Sets. Therefore we currently perform an additional 'contains' check for Sets. A future optimization may add an additional flag `replace` to the backing HAMT.put() / RedBlackTree.insert() methods. Sets set it to replace=false, Maps set it to replace=true. But for now this solution is working for us.", "pred": "Fix typo in HashSet.java"}
{"gold": "This is a regression test for code I found while working on this.", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "I'm wondering if we need to delete jsonStr and jsonAttr after the json_extract_path_text call to avoid unnecessary heap pressure. Though if json_extract_path_text itself does new's on the same heap, we'd get heap fragmentation. Another approach would be to allocate these on the stack instead, avoiding both concerns: char jsonStr[len1+1]; char jsonAttr[len2+1]; ...", "pred": "Fix a bug in the json_object_field_text function."}
{"gold": "Does it come as `str`?", "pred": "Fixing typo in lambda_handler"}
{"gold": "This should actually read as the following `for (int i = 0; i < allergens.size(); i++)`", "pred": "Fix typo"}
{"gold": "This is so useful and safety, I want to propose making AppendBool, AppendInt, etc. all private functions, and forcing us to use AppendValue(j, values.New(false)), etc.", "pred": "fix: collist table builder"}
{"gold": "Really, really small nit   I believe there's 3x tabs in here? And should it be just 2x?", "pred": "fix: useImperativeHandle args check"}
{"gold": "Perhaps note that rclone can't do this yet?", "pred": "fix: add missing comma in s3 config"}
{"gold": "You probably don't need to set an empty config here.", "pred": "fix(client): fix request error"}
{"gold": "I think you are missing `cftime.DatetimeAllLeap` here. That said, all of these are subclasses of `cftime.datetime`, so I think you could get away with just using `cftime.datetime` here, rather than enumerating all of the different subclasses (since `cftime_types` is only used for instance checks).", "pred": "Remove unused import"}
{"gold": "don't we need to set this label on pool pods? I don't see them being set", "pred": "fix(cspc): add missing import (#2881)"}
{"gold": "can remove, it isn't reachable.", "pred": "fix: brute_force method for CPU"}
{"gold": "`expect(cancellation).to be_can_downgrade_instead` would be preferred :rainbow: :rainbow:", "pred": "Fix typo in spec"}
{"gold": "Gross. The OS should timeout writes for completely unresponsive clients to begin with. Long term, the better solution is to enforce a minimum minimum data rate for responses. This might require a way to cancel LibuvAwaitables, but it definitely not OK to immediately kill the socket and any ongoing writes just because the request processing loop completed. You could consider doing that after some kind of timeout, but at that point you might as well just enforce a minimum rate.", "pred": "Fix LibuvConnectionListener.StartAsync (#1089)"}
{"gold": "If this is not used, we should just delete the line.", "pred": "Fixing a bug in the mesh reader."}
{"gold": "Are there other callers to this function. How will they be impacted.", "pred": "fix(kubectl): fix the error message of kubectl exec"}
{"gold": "Let's be consistent. The majority of boto code does not use relative imports. Let's just stick to the existing standard of \"from boto.package.subpackage import Thing\".", "pred": "Added a comment to the NotReadyToAuthenticate exception."}
{"gold": "Suggestion: specify `arity` for this option.", "pred": "Fix typo in BesuCommand"}
{"gold": "This is a parameter available for the matplotlib backend IIRC. In which case, it is good to see this support added to the Bokeh backend.", "pred": "Fixed spikes plot to use line_properties"}
{"gold": "trim has performance impact and this is the lowest level library... seems the trim if occurs should happen in the UI or Query controller instead..", "pred": "Fix typo in Span.java"}
{"gold": "Probably also needed for the `http.client.FOUND` below?", "pred": "Fix test_http_client_request_timeout"}
{"gold": "Can you also add this to Compiler.md ?", "pred": "Fix typo in flatc --help output"}
{"gold": "!numbers -> numbers", "pred": "Fix typo in comment."}
{"gold": "This description doesn't seem quite right for the longrunning case - `longrunning` isn't an orgname.", "pred": "fix: remove extra asterisk (#100)"}
{"gold": "maybe give it a more descriptive name, e.g. `competitiveFilter`", "pred": "LUCENE-1046: remove commented out code"}
{"gold": "This occurrence of \"master\" is unrelated to master/slave replication. Maybe simply remove the word \"master\" or replace it with \"reference\" but \"primary\" doesn't really make sense.", "pred": "Fixing a bug in the JWTVerificationkeyResolver"}
{"gold": "BLOCKING: This is a problem. We shouldn't be introducing new dependencies on proofs into actors. The miner has some dependencies that should be removed (#2555). This could be accomplished either by moving `proofs.Mode` to `types.ProofsMode` or by forgoing a new type altogether and replacing it with a boolean. The later would have the additional advantage of reducing the number of types we have to export through ABI. I get why `proofs.Mode` has value as a type over a boolean, but I'm not sure it's worth it here.", "pred": "fix import"}
{"gold": "We probably want to log the fact that a `MessageId` was not present in the response. In addition the `RequestID` from `request.Request` should be included in the message so that the user is aware of the issue.", "pred": "Fixing a bug in the test"}
{"gold": "It feels a bit strange to re-assign that here, as that line itself has no context on why it's reassigned. I'd prefer if we could pass `{ propertyID: webPropertyId }` below instead (that's how we do that elsewhere too). This also applies to other similar re-assignments below - let's rather pass the values within the objects as applicable, since then there is more clear context on why this \"rename\" / \"reassignment\" is necessary (because of an object expecting specific properties).", "pred": "Update test to use new fixtures."}
{"gold": "remove this in the new pr aswell when moving compare to plugins as discussed.", "pred": "fixed gruntfile"}
{"gold": "check varHolder is nullptr is redundant, ExecutionContext ensure", "pred": "fix(graph): fix bug in yield clause"}
{"gold": "Make these frozen constants?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Please use something like html.escape() to ensure that the text is totally safe to include within html. &lt; is not enough.", "pred": "Fix #10217: NVDA's browse mode message dialog is not localized"}
{"gold": "why is a buffered channel larger than 1 needed here? the separate goroutines can just try to write to the channel with a select-default block, and then it is not needed. i find the current implementation a bit convoluted, maybe we could simplify it a bit? not sure why it is needed for example to communicate an empty result. these patterns can be simplified using waitgroups", "pred": "retrieval: fix comment"}
{"gold": "There seem to be more changes in here than I'd expect (mostly `limit: 255` additions).", "pred": "Update schema.rb"}
{"gold": "I'm not sure, but I think it's `Tenant`", "pred": "Fix TraceparentLengthV0 (#1180)"}
{"gold": "Not sure if it's an issue, but this is a breaking change in a public API. Maybe we should add as an overload without optional parameter instead and delegate the existing call to this one?", "pred": "Fix typo in comment (#1044)"}
{"gold": "as opposed to exposing the chooser function and increasing our API exposure for the purpose of tests, can we move the HTTP transport config test into this package?", "pred": "fix(outbound): fix typo"}
{"gold": "This is using the legacy DRM interface. DPMS levels have been removed from the atomic interface IIRC. Should we handle DPMS levels at all?", "pred": "drm: fix typo in error message"}
{"gold": "I think this was correct before. The nonce passed in here is the nonce at a block (which is the next nonce not yet used, e.g. 0 if the account was never used, 1 if only the tx with nonce 0 has been sent). So if the in-block nonce is 12, then a transaction with nonce 12 cannot have been included yet.", "pred": "Fix typo in comment"}
{"gold": "Please name the file ShareExtension.js, as you import it under this name (also could you convert it to TypeScript please?)", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Not sure if we need it, but if we set it, be sure to add `,omitempty`.", "pred": "fix: remove unused field"}
{"gold": "It's the whole `PublicHeader` that will change soon, and we should state that here, not in the member functions. If Jana's proposal for a new header is accepted, we might also want to rename the fields here. For example, there won't be a dedicated version flag anymore, so a more appropriate name might be `ContainsVersion` instead of `VersionFlag`.", "pred": "Fix typo in error message"}
{"gold": "I think `element` can stay of type `Character` because `Character` is a final class. The we do not need the cast in the line below.", "pred": "Fix typo in CharSeq.java"}
{"gold": "Not sure, if we should do it the other way round. If you ask be in the middle of the night, whether Interface should return true as \"isInterface\" and what Annotation would return. I'd tell you, Annotations should return false.... I want to say, on first glance, I'd say, it's easier to have \"isInterface\" and \"isAnnotation\" rather than \"isInterface\", \"isAnnotation\" and \"isRegularInterface\"... But I see, we also have \"isRegularClass\".... We still have the possibility to change the semantics of those APIs in PMD 7 *Update:* Or in other words: What is less surprising? That isInterface returns true for annotations or that it returns false?", "pred": "Fix typo in javadoc"}
{"gold": "This will potentially skip package results. Do we really want that?", "pred": "Fix typo in error message"}
{"gold": "Please remove `HIP_UNSUPPORTED`", "pred": "[HIPIFY][CUDA] Add missing CUDA error code mapping"}
{"gold": "if this is a \"Status\" type then the variable name \"Stats\" (which implies \"statistics\") seems wrong (or at least confusing to me)", "pred": "fix typo"}
{"gold": "maybe will be better to put it into the default worker's config rather than hardcoding the address?", "pred": "fix(worker): fix export keystore path"}
{"gold": "It seems like this is not meant to test the option failure, but rather that `raw` can be set. This may be a superfluous test now, and we might want to delete it.", "pred": "test: fix find test"}
{"gold": "This is already done by `view_set_fullscreen`", "pred": "Fix typo in comment"}
{"gold": "mmm I followed the convention of this collection. It has Add, Remove, RemoveAll, so All sounds reasonable. Else It would likely be AddPeer, RemovePeer, RemovePeers and Peers.", "pred": "Fix bug in peer ring"}
{"gold": "_nitpick_ I'm thinking about whether this method should be in the previous commit or not. I know it's not yet used there, but in theory, neither do UUID itself.", "pred": "fix: fixed return type of FlagFacade::getAll()"}
{"gold": "\"break\" is right? You skip the line 768.", "pred": "Fix a bug in replicateLogs"}
{"gold": "Can this use the route helper instead?", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Why is this field exported and others aren't?", "pred": "wire: fix typo in trace example (#104)"}
{"gold": "should we rename this like `mongodb_srv_tests.js`?", "pred": "Added test file to run"}
{"gold": "This should still have a value when there is no page title, e.g. just `__( 'Search Traffic Summary', 'google-site-kit' )`.", "pred": "Update SearchConsoleDashboardWidgetSiteStats.js"}
{"gold": "Oops.. meant to link to SplitOp here. I'll clean up in my next commit", "pred": "SOLR-15899: Fix import order"}
{"gold": "Remove these unnecessary imports that you've added.", "pred": "Remove unused import"}
{"gold": "That space shouldn't be here :wink: This lead to an exception whenever a page with an error was loaded, e.g. an inexistent host - I just fixed that :smile:", "pred": "Fix typo in UrlType enum"}
{"gold": "It seems this is not the way to fix issue #505.", "pred": "Fixing a bug in TLSServerAutomaton."}
{"gold": "Please take a look at the docstring of `F.binary_cross_entropy_with_logits`. `weight` should be a tensor that matches the input tensor shape. It is Not the class-aware weight. `pos_weight` should be a vector with a length equal to the number of classes.", "pred": "fix typo in binary_cross_entropy (#3585)"}
{"gold": "Same here, merge with an existing test.", "pred": "Fix test name"}
{"gold": "@aimanrosli23 Could you help to confirm if you do not revert the change in below commit: SHA-1: 643623147a1feaddd734ddd84604e1d8e9dcebee * MdeModulePkg/SdMmcPciHcDxe: Send SEND_STATUS at lower frequency", "pred": "MdeModulePkg/SdMmcDxe: Fix the build error in EDK2."}
{"gold": "Can we do this without a breaking API change? What about adding a different name to convert directly to a Schema?", "pred": "Fix typo in javadoc"}
{"gold": "Why do we need to pull bluebird in here?", "pred": "test(connection): fix test for node 0.10"}
{"gold": "If *two* threads successfully download the same project into two different temp dirs, and one of them successfully renames one to its final destination, the `if`on line 102 will be false _in the other thread_, and it would leave its temp dir behind.", "pred": "Fixing the flow preparer to use the correct flow execution id"}
{"gold": "I would appreciate it if you could rename `link` to `all_link` so that the roles of the two links (the other is `target_link`) become clearer.", "pred": "fix a typo in the comment"}
{"gold": "Is there a reason not to use `smi.create_expectedIndex` here (and in other places)? The `smi.create_expectedIndex` function will also check to make sure that you don't accidentally skip or duplicate any indexes. With the goal of avoiding errors in the test. It does mean that you have to be diligent with how the expected indexes are created, which can be annoying too. My logic was that it is better to be annoyed by constraints during development time than to find out some time later that the test didn't do what I thought.", "pred": "Fixing test"}
{"gold": "Put a comma after the last parameter of a multiline method call.", "pred": "add stripe customer id to checkout"}
{"gold": "I don't know if we even need this parameter.", "pred": "fix: remove extra space"}
{"gold": "What is the new result of this file if we keep it the same than before? It's just to picture easily what changed in this MR :) (thinking is hard)", "pred": "Fix typo in test"}
{"gold": "This needs to be synchronous for the timeout to work.", "pred": "Fix flaky test (#1355)"}
{"gold": "Can you break this onto multiple lines?", "pred": "Fixing the email template for the purchase reminder"}
{"gold": "OK, it looks like all children have bit 4 set, but it doesn't really matter at this split point: just informative, nothing reads it.", "pred": "ARM: AArch64: Fix typo in A32_ext_bit19."}
{"gold": "Sorry for the very basic question but why do we still have a DNSZone CRD in light of the DNSEndpoint, I don't fully understand the differences.", "pred": "Fix typo in DNSZoneSpec"}
{"gold": "Looks like loop with overhead. You can: - create SID - test private function `sessionIsUnique()`", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "In my opinion, it would be better to have two separate settings. One that stores if sorting is enabled and one that stores the order. That allows to toggle automatic sort without having to re-select the order.", "pred": "Remove unused import"}
{"gold": "/me can't wait to rename this repo :)", "pred": "Fix import path in main.go"}
{"gold": "nit: maybe call these `loadCollection()/loadDb()`", "pred": "fix(index_information): fix missing require"}
{"gold": "Did you consider just do `return Task is an external data dependency and data does not exist (yet?).'`? Less `None`'s and `ifs`.", "pred": "Fixing a typo in the docstring of the Task class"}
{"gold": "Some day, we really need to make these toolbars pluggable..", "pred": "Fixing the email link to use the correct document id."}
{"gold": "This should be `pygment=False` like in `browsertab.py`", "pred": "Fix webengine action"}
{"gold": "Should this be moved down (or up) to under the client lock instead of server lock?", "pred": "Fix typo in comment"}
{"gold": "Why are we removing this?", "pred": "fpga: fix a bug in xfpga_fpgaGetMetricsByIndex"}
{"gold": "What do you think about using `self.id` ?", "pred": "add a method to get the cart"}
{"gold": "Please log once here at Error level \"Failed to connect to Typha, will retry...\"", "pred": "Typha: Fix typo in log message"}
{"gold": "Can you revert this change? The `VERSION` value will be updated after maintainer determines the version at release.", "pred": "Bump version to 2.18.1"}
{"gold": "It could be better if we use the up case letter to specify the constant string name. Such as QUALIFIED_SERVICE_NAME_KEY can let the user know it's a constant string.", "pred": "[NMS] Fixing the spelling of the constant"}
{"gold": "This should be `@configuration.failure_exit_code`, we don't want to hard code 1.", "pred": "Fix typo in RSpec::Core::Runner#run_specs"}
{"gold": "Changed per review in Blockly.", "pred": "Fix #1350: FieldVariable.onItemSelected is not called when selecting a variable from the dropdown menu"}
{"gold": "Hi @wenyingd . so what's the original dst MAC of the reply packet from kube-proxy?", "pred": "Fix typo in comment"}
{"gold": "Note: I wasn't sure what the right wording would be for this, so I used existing language from elsewhere in the codebase.", "pred": "Fix typo in misdesign checker"}
{"gold": "Docstring for `platform`.", "pred": "Fixing config_file path for ansible-lint"}
{"gold": "This should be called before any `os.Exit` otherwise it could still mess up things.", "pred": "Fix typo in error handling"}
{"gold": "shouldn't this be `short` ?", "pred": "Update Color.java"}
{"gold": "Can you please paste the output of `volume list` command which will show capacity of a openebs volume.", "pred": "fix(cmd): fix volume list output"}
{"gold": "I'd make this a `throw new NullPointerException(\"metric == null\");` instead", "pred": "Fix typo in javadoc"}
{"gold": "Include should be order lexicographically.", "pred": "Fixed a bug in the ScriptingEnvironment constructor."}
{"gold": "We need to pass in the Activity context here, so that LoginActivity is used, and so that LoginActivity can get onActivityResult from the PasscodeActivity. Without this, the application context is used, and we don't get a callback when the passcode is done.", "pred": "fixing the issue with the passcode length"}
{"gold": "Can you move these to the top please, for consistency with other models - normally we put scopes immediately after the associations at the top of the model. As to names I agree with @gravitystorm that these names may be confusing but I'm not sure the ones I suggested are perfect either so I'm not really sure what's best. The goal of my names was just to separate point which could be ordered (as `ordered`) from those which can't (as `unordered`) but I realise that may not be very clear from the names.", "pred": "Fixing a bug in the tracepoint model"}
{"gold": "Looks like the episode should also not be deleted when repeating", "pred": "Fix crash when marking episode as played"}
{"gold": "I feel like goimports would move this import line by the other non-std packages... can you double-check that? Run goimports or set up your editor to run it on save. :+1:", "pred": "Fix import path"}
{"gold": "`options['binary'] = WebDriver::Chrome.path` if set?", "pred": "Add support for Firefox"}
{"gold": "File is not `goimports`-ed (from `goimports`)", "pred": "fix: badgerdb default value"}
{"gold": "Nit: Supported -> Enabled.", "pred": "Fix typo in comment (#1005)"}
{"gold": "Yay! I was too lazy to fix this.", "pred": "Fix import test"}
{"gold": "other declaration of errors (from `typecheck`)", "pred": "fix(pkg/apis/openebs.io/v1alpha1): import path for clientset"}
{"gold": "nit: error starts with capital letter", "pred": "fix: remove unused import"}
{"gold": "the original code ignores \\Draft and \\Recent, whereas your change will not. what this matters, i'm not sure.", "pred": "Fix IMAP store to use the correct flags"}
{"gold": "Why was this necessary?", "pred": "quota: fix test"}
{"gold": "Can you also do this for Cover?", "pred": "Fix typo in test_results_file description"}
{"gold": "So I tried adding this VU a long time ago, thought it would be this simple of a check, but turns out there were other validation in the way for getting here in `ValidateImageAspectMask` I assume that is what is failing CI here, realized it would require some more refactoring", "pred": "layers: Fix typo in ValidateImageSubresourceRange"}
{"gold": "This method is not needed for postgresql, by default sum function omits null values so we can remove this file", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Can you provide a `--with-systemdsystemgeneratordir` option here? So that I can do unprivileged installs without completely turning off systemd. I can add it as a follow-up PR too.", "pred": "build: fix typo in configure.ac"}
{"gold": "`classification` is misspelled", "pred": "Fixing a bug in the model.py file"}
{"gold": "Can you change this to `sampleInitCode`?", "pred": "Fixing a bug in the sample transformer."}
{"gold": "I added a startTs information in `TiDagRequest` output. Not really sure if it is useful? @zhexuany", "pred": "Fixing a bug in the TiDAGRequest toString() method."}
{"gold": "This prevents margin/border/padding CSS from affecting the width/height (otherwise in Chrome a width and height of 1 would result in a rect size of 5x5).", "pred": "fix(focus-trap): fix focus trap in IE11"}
{"gold": "prefer to just add this to the `verify_authorized` exception list above since we're already making exceptions.", "pred": "fix typo"}
{"gold": "was there a reason to not loop over parent classes here?", "pred": "Fix for issue #116"}
{"gold": "@billybonks Why move `import Ember from 'ember';` to the top?", "pred": "Fixing linting error"}
{"gold": "Everything's so simple (a `ThreeStateWorkflow`) until it isn't :smirk:", "pred": "add comment to approval model"}
{"gold": "I don't quite understand where the NaNs come from...", "pred": "Added test for contours with levels"}
{"gold": "File is not `goimports`-ed", "pred": "Fix typo in LoadTestConfig"}
{"gold": "I wonder if we should look at moving the Python stuff to a plugin and doing this there rather than adding to core plz at this point?", "pred": "Fix typo in config.go"}
{"gold": "This is the actual bug fix. I prob should have broken this out into two PRs.", "pred": "Fix syntax check"}
{"gold": "I am not sure if we need this, we already have DifficultyBombDelays", "pred": "Fix typo in comment"}
{"gold": "move to finally - I can see at least one return that would omit it, also any exception and so on", "pred": "Fixing the build"}
{"gold": "remove `genesisConfig.GravityChainStartHeight == 0`", "pred": "fix: fix the bug of gravity chain voting (#1028)"}
{"gold": "this might kill whole application if `var-dumper` will not be installed. What about two separate file_exists conditions (monorepo/project)?", "pred": "Fix autoload path"}
{"gold": "Hrm. Maybe this isn't the correct spot to run this? Because it errors if the app type doesn't support settings. But we want to check that before running it.", "pred": "Fix typo in config.go (#141)"}
{"gold": "Why are you changing this name ?", "pred": "Fixing a bug in pretty_routes"}
{"gold": "as we discussed, maybe it would be better to - [ ] set OVERRIDE_IN_DOCKER=1 in the Dockerfile - [ ] replace the if statement with `os.path.exists(\"/run/.containerenv\")` as @dfangl suggested", "pred": "fix: docker detection"}
{"gold": "I like this style of doing things better than having super big conditional without explanation. Even though I know this won't be re-used it's nice to have a function if only for clarity.", "pred": "fix: is_ancestor_name() should return True if the node is the ancestor"}
{"gold": "Our preference here is to either have inline statements e.g. `@group_level -= 1 if @group_level > 0` but stylistically here I think `return @group_level if @group_level == 0` might be nicer. As it stands however our rubocop is picking this up as a fail :(", "pred": "Fix RSpec 3.0.0 compatibility"}
{"gold": "Spark3 Is supported in OSS Iceberg, Do you mean this particular function is not supported in Spark3? If so I think we should have a more clear reason why", "pred": "Fix test class name"}
{"gold": "something about the arbitrary file access part here makes me nervous. Can we keep the `if not path.endswith(\".ipynb\")` check from before here as well? Just imagining a weird attack scenario where somebody somehow uses this to get access to confidental files or something", "pred": "Fix typo in error message"}
{"gold": "I wonder if we should push this and the search_params_logic into the blacklight config.", "pred": "remove deprecation warning for solr_search_params_logic="}
{"gold": "don't need this line, since it is not tested here?", "pred": "fix: test"}
{"gold": "I wonder if adding this new param in the middle of the param list might screw up some existing code that is depending on the old parameter order. Might be better to add it to the end of the parameter list?", "pred": "Fixed a bug in the EMR connection."}
{"gold": "I wonder if this absolute path is gonna affect the build-cache relocatability of these compile tasks??", "pred": "Fix typo in errorprone plugin configuration"}
{"gold": "possible bug if `fullResponse` is false", "pred": "fix(command): fix readConcern and writeConcern options"}
{"gold": "nitpick: Please only `import string` here and use `string.ascii_lowercase` - I really like to see what module stuff is coming from without looking at the imports.", "pred": "Remove unused import"}
{"gold": "nitpick: the only reason we have a catch for every one of these promises is because the test isn't properly chaining promises (returning them within each `then`). We could reduce the `catch` with `console.dir` to a single instance if that was done", "pred": "Update logout.js"}
{"gold": "why do this?", "pred": "NebulaCodec: fix test case"}
{"gold": "For consistency, would it not be best to also replace the first class name? `traceLog('Class ' . static::class . ' has been deprecated, use ' . SystemMediaLibrary::class . ' instead.')`", "pred": "Fix deprecated class name"}
{"gold": "this should be `EnabledAdminAPI` and the json string should then be `enableAdminAPI`", "pred": "Fix typo in prometheus spec (#108)"}
{"gold": "Noticed some missing imports in manage.py so thought I'd add them", "pred": "Fix import order"}
{"gold": "as a future improvement, maybe we should just change `ForAllFlowRecordsDo` so that `updateOrSendFlowRecord` uses a flow record pointer instead of a copy of stored flow record. This whole code is executed with the lock any way.", "pred": "Fix typo in flow_exporter.go"}
{"gold": "I am not sure what GitHub wants to tell me with this icon here :)", "pred": "Fix typo in StringLiteral.java"}
{"gold": "can we also check for smaller zoom levels returning valid error codes?", "pred": "Fixing test"}
{"gold": "1) These names are not great, doesn't help explain what they do. 2) Instead of methods like this that hard code some number of = and *, why not a method that takes the string, defaults to a char to surround with, and a width? 3) Do we really even need headers like this in the output? Maybe we ditch them.", "pred": "Fixing the build"}
{"gold": "The autocomplete editor shouldn't change its own behavior, I assume that `autoWrapCol` and `autoWrapRow` options should be set to `false` in handsontable editor.", "pred": "fix(test): fix autocomplete test"}
{"gold": "out of curiosity, with IPv6 introduced, why there's no change to the expected output of openflow in the test?", "pred": "Fix testInstallTunnelFlows"}
{"gold": "nit: grammar: instruction", "pred": "i#1569: fix decode_eflags_usage()"}
{"gold": "We can revert this to reduce the diff of the PR.", "pred": "[java] Remove unused import"}
{"gold": "i think this missed the reconciler to callsite change", "pred": "Fix typo in hiveconfig_controller.go"}
{"gold": "Please reuse `getClientConfigPath`.", "pred": "fix: surface namer for grpc client (#100)"}
{"gold": "Should we use the shared chai-addon.js file here? Actually we should consolidate any `chai.use` calls, I see 20 instances, quick win?", "pred": "fix: remove unused import"}
{"gold": "Maybe move _agreedCapabilities and _availableCapabilities from List to SortedSet ? We could order them by code and then by version already.", "pred": "Fixing a bug in the Hello message handler"}
{"gold": "I see the `+1` issue, but we used to check if `o.lss != nil` and we don't anymore, so we are sure that it won't be nil here, right?", "pred": "Fix consumer.go"}
{"gold": "why is the `send` needed?", "pred": "Fix citation modal title"}
{"gold": "Is this necessary? If so, we need to update the docstring.", "pred": "fix bbox2result"}
{"gold": "Checking for actionable here instead of grabbing the first pending approval. I tested this with proposal ID 265 on staging.", "pred": "fixing bug in current_approver_email_address"}
{"gold": "I made this change because I wasn't getting printouts of the 'result' value when the assert was inlined for some reason. I think it's related to creating new CallbackCheckers maybe?", "pred": "Fix test_qtbot_waitsignal_timeout"}
{"gold": "nit: the correct name is \"request line\", so let's use the right one here :)", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "This should now use `[]`, so it crashes if the var is missing", "pred": "fixing the catalog url"}
{"gold": "you could use `bpf_map_update_elem` with `BPF_EXIST`", "pred": "bpf: Fix typo in nat_l4_csum_ipv4"}
{"gold": "thanks for noticing this! But I think we should not have it in this PR.", "pred": "Fix typo in S3OutputFile"}
{"gold": "A few things: - This may not serialize because I think the property for the sequence number on an input is `.sequenceNumber`. - There should be tests to cover these statements - Indentation is incorrect (should be two spaces, as similar to the statements above)", "pred": "Fix Transaction.prototype.lockUntilDate"}
{"gold": "If this is a base method that could be used by others, should you hardcode 'GCS uploader' here?", "pred": "Fixing the filename template for the notifications"}
{"gold": "just a little thing: let's introduce a `final int bound = length - back.length();` that saves us calculating the bound each time checking the loop condition.", "pred": "Fix typo in CharSeq.java"}
{"gold": "I think that this should be a POST method, as it changes the state. Get requests should not change the state. With different method, I would suggest to have the handler under `\"/settlements/{peer}\"` path.", "pred": "Fix typo in comment"}
{"gold": "This is the default value?", "pred": "fix: remove unused import"}
{"gold": "The spaces are actually legitimate here: in python, you: - first import standard library modules (hint: time is one) - then import 3rd party library modules - then import the modules from you project (here kinto). Between each block you need an empty line.", "pred": "Fix import"}
{"gold": "Haha, whoa, I'm not sure how I let that one go by. :)", "pred": "cmd/compile: fix typo in comment"}
{"gold": "FWIW: We have FileUtil.generateOriginalExtension for tabular files but it uses a hardcoded list rather than the properties file.", "pred": "Fixed bug in DownloadInstanceWriter"}
{"gold": "I would consider extracting this logic in to a helper function to make it a bit more readable, but that's just my opinion.", "pred": "Fix typo in wireguard driver"}
{"gold": "Are all fields beginning with \"Debug\" automatically `;local` ? (I guess so, but just checking.)", "pred": "Fix typo in comment"}
{"gold": "We should let this module inherits from the EvalHook supported in MMCV, and only override the `__init__` function by adding the warnings. The other functions can use those in MMCV.", "pred": "fix typo in docs (#4167)"}
{"gold": "Let's use prepared statements here instead  ", "pred": "#10111 PG: fix role name"}
{"gold": "Just leaving this in one place but thanks so much for re-organising all these imports.  ", "pred": "Fix import path"}
{"gold": "Ditto, here and below", "pred": "Fix instrumentation test"}
{"gold": "Let's move the check outside the `for`-loop so that we don't have to do it for every prop. If we change it to check for `vnode.type === 'string'` we can automatically skip checking text nodes which don't have props  ", "pred": "fix(debug): fix debug"}
{"gold": "Seems like the docstring here should simply be \"Deprecated; use `hooks` instead.\".", "pred": "Fixed TablePlot docstring"}
{"gold": "It would be nice to have an `attr` in `styles.xml` for this, so we don't need the same `if` statement in multiple places", "pred": "Fixed crash when opening the feed item list"}
{"gold": "How about `null: false` on these two lines? Also `t.timestamps null: false`?", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "This recommendation isn't very helpful because it isn't clear what \"the metastore\" is. How about this instead: \"To fix this, use an alternative metastore\".", "pred": "HIVE-24275: Fix flaky test TestHiveMetaStoreClient.testGetTable (Shelley Xu via <NAME>)"}
{"gold": "The `SymbolTable` deals only with symbols, I think we can just call this `isUsed` here.", "pred": "Fixing a bug in the symbol table."}
{"gold": "Please hide this behind a flag and add a setter function to the builder.", "pred": "JasonLeyba: Fixing a bug in the Firefox driver."}
{"gold": "Just a side-node, no need to change it here: The term \"recent\" might be confusing at a later point in time.", "pred": "Fix EC2 VPC model"}
{"gold": "When can it be undefined? Wouldn't that be a bug?", "pred": "Fixing test"}
{"gold": "JMX offers normal APIs for this. I don't think you want the glassfish one.", "pred": "KevinMenard: Removing unused import"}
{"gold": "Could you remove `,' at the end?", "pred": "Fixing typo in KoalasBoxPlot"}
{"gold": "Maybe it would simpler to ignore opt_port if type !== 'number'?", "pred": "Fixing a typo in the server.js comment."}
{"gold": "do you want to rename the codec tag here too?", "pred": "[docs] Add comment about AccountData.SpendingKey"}
{"gold": "These command names are specific to Chromium-based browsers. Please move to `ChromiumDriverCommand`", "pred": "Added new commands to DriverCommand interface"}
{"gold": "Hm.. should we auto-patch? I am less sure on this yet as `percentile_approx` seems a Spark function and auto-patching it in Koalas seems a bit counterintuitive.", "pred": "[SPARK-35780][PYTHON] Fix the usage logger import error in Koalas (#3307)"}
{"gold": "I found domain use in `AllFeedsTest::getAllFeedExportCreationData` and class AllFeedsTest is descendant of `FunctionalTestCase`. I think so we can rewrite this too..", "pred": "fix functional tests"}
{"gold": "I am wondering if it is better to consolidate all committer checkpoint states into a single structure, e.g. Pojo class or Avro record which are Flink supported state types for schema evolution.", "pred": "[FLINK-11714][table] Fix typo in IcebergFilesCommitter"}
{"gold": "I assume this is a performance optimization to only check this once when creating the signal filter? While you're at it, maybe make `BLACKLIST` a set instead?", "pred": "Fix a bug in the signal filter"}
{"gold": "Please use async/await and try/catch", "pred": "Fixing database driver node"}
{"gold": "Like I said, this code looks incorrect. Why is it still looking up the attribute? Why is it getting the type from `nested->type.struct_def` instead of `field.nested_flatbuffer`? Are you running `generate_code.sh`, because I think `nested->type.struct_def` would be null?", "pred": "fix: generate nested struct accessor for nested_flatbuffer"}
{"gold": "Actually, I'm not sure why lines 1663-1668 are here. Looks like Push descriptors aren't used in the test at all. @ziga-lunarg?", "pred": "layers: Fix descriptor_update_template_entry_with_inline_uniform_block test"}
{"gold": "Don't we still want to check it it's a keyword?", "pred": "fix: remove commented out code (#123)"}
{"gold": "this can just me `link_text` :tomato:", "pred": "Fixing the attachment decorator"}
{"gold": "What if the Series contains null values?", "pred": "TST: add test for explode on empty series (#3606)"}
{"gold": "Every place you see a change like this, it's because `PhysicalLocation` is now its own object, not an array of `PhysicalLocationComponent` objects. The `Uri` is the key into the `FileInfo` dictionary.", "pred": "Fixing a test that was failing due to a change in the way the test data is serialized."}
{"gold": "Like in atss_head", "pred": "fix import error"}
{"gold": "nit : I think it would be better to have the multiplier being calculated along with `pool.numPendingWholeBlocks`, so that we could always multiply the feePerByte with that multiplier. Not only that it would be faster, but it would also have constant time. btw - Correct me if I'm wrong, but with this change, you're practically rolling back your previous change while making it `pool.expFeeFactor` adjustable, right ?", "pred": "[pool] fix test"}
{"gold": "Is there a reason we _wouldn't_ want to do this? A bit of a security hole :grimacing:", "pred": "Add commentable_type to comments controller"}
{"gold": "Please add a copyright notice to all new files. Is there a tool to check and auto update copyright notices?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "A new translation dump should be made after this change (removing the \"Email\" message)", "pred": "Fix: Email field is not required"}
{"gold": "CI is failing saying `expected [TypeError: null is not an object (evaluating 'implicitNodes(role).map')] to equal null`.", "pred": "Fix implicitNodes"}
{"gold": "@JoviDeCroock I replaced the refs here with simple assignments.", "pred": "Add test for createRoot()"}
{"gold": "nit: Could we use VisibleForTesting annotation here?", "pred": "HIVE-10280: TestHiveMetastore fails with NPE (<NAME>, reviewed by <NAME>)"}
{"gold": "Can we create some post records to assert sort_by", "pred": "Fixing test"}
{"gold": "is this necessary?", "pred": "fix: typo in comment (#124)"}
{"gold": "What is the purpose of this? It seems like it is used to indicate whether there is a filter on a span. But what filter? Could there eventually be multiple filters per span? Just not understanding.", "pred": "Fix typo in comment (#1005)"}
{"gold": "using a certain type instead of using string directly.", "pred": "Update chaos condition reason to be a string"}
{"gold": "fix trailing ,", "pred": "test: add test for conflict rename"}
{"gold": "I've fixed it for this change but for future reference there's no point doing string substitution for a single value like that - it will just slow things down. Just use `:mlat => trace.latitude` etc instead.", "pred": "Fixing trace view"}
{"gold": "The form no logger needs validation?", "pred": "Fix namespace"}
{"gold": "there'd be more changes in the area, when we implement \"clean-up\" of aggregators if no new updates. (i think we currently send metricitem to exporters with zero as value)", "pred": "Fixing typo in MetricsSdk.cs (#1009)"}
{"gold": "Usually we only keep the assertions that are relevant to the specification (ie. the test title). For example, the test on the values of id and details is not properly relevant for the spec _collections are isolated by bucket_. I suggest that you only keep the assertions regarding `details` in dedicated tests similar to `test_unknown_collection_raises_404` from `test_views_records.py`, but for each of bucket, group, collection and record in the other `test_views_` files.", "pred": "Fixing test_create_permissions_can_be_added_on_collections"}
{"gold": "The test sources are ok though, you don't need to remove those changes", "pred": "Fix test case"}
{"gold": "`maxWidth: width * 2,` Potentially, this will be the same as `getImageUrl`: 80px or 500px. I can't verify this - need for normal LiveTV tuner.", "pred": "Fixing a typo in the mediaInfo.js file"}
{"gold": "Not really related to this issue but should we use fuzzy search here as well (like for apps)?", "pred": "Fix filter"}
{"gold": "isn't the usual capitalization for subcommands force-qr? (don't care too much about it)", "pred": "kbfstool: add a note about the md command"}
{"gold": "Do you know how many repos have hit this?", "pred": "Fix typo in error-prone summary"}
{"gold": "I'll be interested to see if our gettext rake tasks will pick up on this text to translate", "pred": "fix: remove extra space in plans table"}
{"gold": "I think you need to change line 928 value from 6 to 7 too, since now table will have 7 values", "pred": "Fix LuaScriptInterface::pushInstantSpell"}
{"gold": "Does `f0[::-1, :]` mean all the rows taken in a reverse order?", "pred": "fix test"}
{"gold": "Looks like there are strange characters here.", "pred": "Fixed a typo in the JavaProcessJobTest"}
{"gold": "It is better to have a check to ensure the format is valid.", "pred": "fix: fix the bug of the wrong status of the experiment"}
{"gold": "How about `nextAlreadyDefined` variable name in method signature?", "pred": "Fixing a typo in the LRO description. (#2885)"}
{"gold": "In older SDK versions the data converter was called 3 times but now it is 2. This is because logic was changed deep in the interceptor chains on when values are serialized and encoded and such. Previously we invoked the data converter on results _even if there was an error_ (and most of the time they were nil). Now we don't do such a thing, resulting in fewer calls.", "pred": "fix test"}
{"gold": "formatting... can this import go next to the other sources ones?", "pred": "Fix typo in comment"}
{"gold": "I don't understand why anyone would pass 0? If you don't want to attach to an existing process you just wouldn't pass -attach. I would remove that sentence and make 0 an invalid argument.", "pred": "Fix typo in -early and -late options."}
{"gold": "This change is responsible for #2775", "pred": "Fix a bug in the thread pool"}
{"gold": "Should we add this to the other \"never\" verification in lines 71-73 above, too?", "pred": "Fix flaky test (#1027)"}
{"gold": "Fixed this since it no longer needed to be switched from a generator to a list, this was missed when I cleaned up the dataset code in an earlier PR.", "pred": "fix: add missing import (#100)"}
{"gold": "This is an informational message that allows someone to read the console output and understand how the grid node is configured. Please leave.", "pred": "Fixing a bug in the node options"}
{"gold": "Can we convert this to an arel as below ContributorFact .joins(:project).where(projects: { id: project_id}) .where('name_id = ? or name_id in (?)', name_id, AnalysisAlias.select(:preferred_name_id) .joins(:project) .where(commit_name_id: name_id) )", "pred": "Fix contributor fact query"}
{"gold": "Does this cause issues if you have lots of load on the machine? Having a global variable for this seems like a bad idea IMO.", "pred": "Fix import"}
{"gold": "We probably don't need to print the msg with e.getMessage(). It will be printed by the logger since we are passing the exception as a parameter.", "pred": "Fix BesuCommand"}
{"gold": "Can we get a test with multiple directories as per the initial example?", "pred": "Fix flake8 errors"}
{"gold": "I assume this is because you were seeing cases where left was a negative number? When?", "pred": "Fix for #1002: status bar detection fails when the status bar is not on the desktop"}
{"gold": "this is undoing recent changes for increased consistency of include file statements. please restore to the original.", "pred": "fix_deposit.cpp: fix missing include"}
{"gold": "If these are applied in order, should `LambdaMethoReference` come after `OptionalOrElseMethodInvocation`", "pred": "Add missing check to baseline"}
{"gold": "Why this rename?", "pred": "Fixing a typo in the documentation"}
{"gold": "Why do we do this check here? `sys.version_info` cannot be less than 3.3 as pylint does not support older versions. I think we should avoid popping `__main__` altogether.", "pred": "Fix mock_main"}
{"gold": "This can be removed too.", "pred": "Fix the test_config.py"}
{"gold": "I'm a little worried about the new extra calls to `MakeMdId`, since in most local-server KBFS profiles, hashing is the biggest CPU user, and not re-using the value calculated by the client will result in even more hashing. That said, I understand why you did it this way, and I don't have a concrete suggestion on how to make it better. Just something to keep in mind; plus it might be worth comparing the test speed before and after this change to make sure it didn't slow things down too much.", "pred": "libkbfs: fix a typo in a comment"}
{"gold": "`lodash` shouldn't be grouped under WordPress dependencies", "pred": "Remove commented out code"}
{"gold": "Just curious, but how did you work out that Aleksey Sadovoy, Peter Vgner and Joseph Lee contributed to this file? Did you look at the repository history?", "pred": "Fixed a typo in the comment."}
{"gold": "You could call OnStopRude() directly here to do the same thing.", "pred": "Fix LibuvConnectionListener Dispose (#1088)"}
{"gold": "This TODO and this `sort` depend on how the UI looks like. So I think we should fix the UI before continuing on updating this web API. For example, in case the UI flow is as below, this API will receive a Piped ID and then return just ones belonging to that Piped. - User picks where they want to deploy first (select one Piped and one cloud provider) - Then API will be called to show the list of suggested apps for that Piped and cloud provider - User picks app they want to create", "pred": "Fix typo in webapi.go (#109)"}
{"gold": "This command rolls back the volume data to the specified snapshot. Once the roll back to snapshot is successful, all the data changes made after the snapshot was taken will be post. This command should be used cautiously and only when there is an issue with the current state of the data.", "pred": "fix: import path"}
{"gold": "should this be a separate/new functional test?", "pred": "Fixing test"}
{"gold": "Can these also assert at least the length of arrays returned and ideally contents?", "pred": "Fix typo in query_cache_spec"}
{"gold": "`hasattr(task, 'param_visibilities')` is more concise with the same effect, but either one works.", "pred": "Fixed a bug in the scheduler."}
{"gold": "I would hedge this a little, maybe `Positional arguments appear to be out of order`. After all, it's just a guess.", "pred": "Fix typo in docstring"}
{"gold": "you can directly call show() method from **SnackBarHandler.show(coordinatorLayout, getString(no_account_signed_in)).show();** no need to create an extra object and then call the show method.", "pred": "Fix typo"}
{"gold": "concatHosts may be a better func name to explain this?", "pred": "fix: NetworkUtils::toHosts()"}
{"gold": "A function that returns empty string.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "If it's not the root package, or if it is the root package but we don't add the psudo :pleasings rule there, print an error.", "pred": "Fix a bug in the Go package parser."}
{"gold": "can delete this line", "pred": "fix: import path"}
{"gold": "Will it still be an issue if all the models use the same data set?", "pred": "Fixing a bug in the generic data store."}
{"gold": "How does this controller_name method work? Does this method grab the context of the url request? Wouldn't this always result in 'widget'?", "pred": "Fix widget controller"}
{"gold": "Let's get rid of these for the final version and if you get rid of the macro I left last time I'd be more than grateful.", "pred": "input_chunk: fix missing include"}
{"gold": "Instead of `DELETE_MARK`, how about `IS_DELETED`? I don't think that \"mark\" is clear enough to describe what this is. Similarly, I think the docs should be \"Whether the row has been deleted\". There's no need to include \"delete mark\" because that's identifying something that is not defined (this column is _deleted and \"mark\" is not introduced), and \"or not\" is unnecessary because it is implied by \"whether\".", "pred": "Fix typo in comment"}
{"gold": "Does it make sense to have this very thin wrapper that only calls `create_dependencies`? And maybe having `create_dependencies` return a set would be better than convert here?", "pred": "Fix a bug in the progress bar."}
{"gold": "How about renaming `escape` to `use_path_normalized` or something to better indicate that it is a selection between `path` and `path_normalized`?", "pred": "fix build"}
{"gold": "Interface members are always `static final` right?", "pred": "Update Accountable.java"}
{"gold": "It seems to me that this could be in the runtime_nintendoswitch.go file, or is there a reason to keep it separate?", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "I was actually looking at this code over the weekend and wondering whether we were trying to link here. I assume it's been cargo culted from something else in the compiler.", "pred": "[gardening] Fix typo in comment"}
{"gold": "nice extraction of the form for being used at new/edit. We should have more of these", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Are the coefficients the actual bug fix?", "pred": "fixing torsion angle potential"}
{"gold": "Why are the error code options in a list and not a tuple?", "pred": "fixing postgres target"}
{"gold": "Need alignment with the preceding line.", "pred": "Fixing test"}
{"gold": "Changing from a static method to a constant is inessential to Type Transactions and has a long reach, adding many unneeded files and diff lines.", "pred": "Fix MainnetProtocolSchedule"}
{"gold": "There is one caveat: javaslang.collection.Iterator is Iterable. With Iterator it does not work. Let's revert this line. Does this happen elsewhere, too? I will double-check the code...", "pred": "Fix typo in TreeSet.ofAll"}
{"gold": "Why change the default value of `is_diff`?", "pred": "Fix typo in comment"}
{"gold": "I think tacking on `,<7` would be a wise precaution in case of future incompatible changes in tenacity.", "pred": "Fix setup.py"}
{"gold": "I don't think is necessary to remove the return type", "pred": "Fix typo"}
{"gold": "Also added this check, since client secret is not used except in the IP bypass scenario.", "pred": "Fixing issue with refresh token"}
{"gold": "That's unrelated, but shouldn't there also be a call to `setInternalWebPropertyID`, making it empty, for this case? Otherwise, when selecting to create a new property, any previous internal web property ID will still be in state, potentially causing problems.", "pred": "Fix property ID not being set on property edit."}
{"gold": "I wonder if we should trigger a PHP error and ensure it ends up in the log?", "pred": "Fix test"}
{"gold": "The `move_topic` action be a `post` request since it changes the state of the object.", "pred": "Fixing test"}
{"gold": "Should we just return a non-nil metadata from `Test`?", "pred": "Fix test results"}
{"gold": "Noticing this is really just the same as cart_notification_email. Would be nice to be able to view custom templates. I may update this with some set up that will make viewing specific custom emails easily.", "pred": "Fix mail preview"}
{"gold": "please don't use wildcard imports", "pred": "SOLR-14016: Remove unused import"}
{"gold": "Should we even fix this test? IMO it should be refactored to check that values are recalculated after `setSourceDataAtCell` and `setSourceDataAtRowProp` calls. This will be the correct way to alter the data since now and we're not testing this use case.", "pred": "test(Formulas): add test for `getFormula` method"}
{"gold": "I'm not sure if this is standard practice, but I would prefer to leave this initialization here, if only to show that such a variable exists in this file (instead of inferring it from the globals). It can also cause weird issues if, for example, `init` isn't run before other methods.", "pred": "Fix typo in comment"}
{"gold": "This isn't how you throw an exception in C++. I'd suggest you take a look elsewhere in the RDKit C++ codebase and see how ValueError exceptions are thrown. Hint: there's a function called `throw_value_error()` that you may find useful.", "pred": "Fix MorganFingerprintHelper"}
{"gold": "Was changing this to a write transaction required?", "pred": "Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Revert \"Re"}
{"gold": "nit: I think \"They\"?", "pred": "fix: remove unused import"}
{"gold": "is it a result of some multiplication or some other meaningful number? would be nice to display as a power of something or the mult", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "I think this class is a good example of where Payload could significantly improve things. I'm okay with this class as it stands. If you merge this in, I'd like to have a go at refactoring it after introducing Payload.", "pred": "Add mentor to the list of features"}
{"gold": "Just a small tip: I think you don't need to include pytest here. You can run tests using: - `pytest tests/path/to/my/test` under the virtualenv to run a single test. - `pytest tests/` under the virtualenv to run all the tests. - `make tests` to run all the tests for all python versions, like travis do. Hope this helps! :)", "pred": "Fix import error in test_colander_ext.py"}
{"gold": "Might be worth sorting the replacement items so this is deterministic.", "pred": "Fixed import error"}
{"gold": "Should we set the default `TargetNamespace ` to `chaos-testing`? I noticed that the installation script defaults to chaos-testing.", "pred": "Fix typo in comment"}
{"gold": "Why was this `Task.Yield` removed? It was added in purpose.", "pred": "Update MvxAsyncHelpers.cs"}
{"gold": "You'll also want to do this below, for the `optionalFieldConfigs`. See `GapicMethodConfig.java:180`.", "pred": "fix: remove unused import (#101)"}
{"gold": "We'd better use \"spaceId\" as variable name here. Because i can't figure out the really type for \"space\" at the first glimpse due to \"auto\" used.", "pred": "Fix a bug in GoExecutor::prepareOver()"}
{"gold": "I assume we have a package reference somewhere that pulls down the nuget package?", "pred": "Fix build"}
{"gold": "But why introduce publish on `accConnsEventSubjNew` subject if we never subscribe on that subject. What is the plan then? Replace subscription on \"old\" with \"new\" at one point? Not sure about all that..", "pred": "Fix typo in comment"}
{"gold": "can we use `nullptr` for consistency?", "pred": "Fix typo in comment"}
{"gold": "strange, for templating\\EngineBundle it was `\\Symfony\\Bundle\\FrameworkBundle\\`", "pred": "Fix typo"}
{"gold": "But if we're on the merge deployment, and the next one is the booted deployment, we'll still be inserting between the merge and booted deployment, right? It seems like we would need e.g. `met_merge` and `met_booted` vars to keep track.", "pred": "ostree-sysroot-simple: Fix typo in comment"}
{"gold": "Can you put the output of this into data, and list which roles are invalid? Same thing with abstract role. I know that's not strictly part of this PR, but it'd make the messaging about this a bunch better.", "pred": "fix(aria-role): allow aria-role to be used on abstract roles"}
{"gold": "rename ibftTwo arg to bft", "pred": "Fix import"}
{"gold": "Should we go ahead and push `agent_is_crawler?` into the `skip_session_tracking?` method?", "pred": "Fixing bug in search context"}
{"gold": "How about we raise a warning here and simply change to use self.data_infos = self.load_annotations(self.ann_file)", "pred": "Update custom_dataset.py"}
{"gold": "Please remove this line to comply with the standard for copyright headers.", "pred": "Fix import of nvwave in espeak driver"}
{"gold": "seems incorrect - for 5 validators it will tell that 3 is enough to seal and you need 4 2/3 * 5 is 3.3", "pred": "Fixing a bug in the calculation of the minimum number of sealers for finalization"}
{"gold": "Nit: please remove unnecessary whitespace changes.", "pred": "Fix checkstyle"}
{"gold": "Is this captured in a test?", "pred": "fix: sample method to view transformer"}
{"gold": "This is used in o.a.l.sandbox.search.LargeNumHitsTopDocsCollector.", "pred": "LUCENE-5784: Remove unused import"}
{"gold": "We may also do the same for `schedule_2x.py` and `schedule_20e.py`.", "pred": "Update config"}
{"gold": "Should foreign key here be something like `diary_entry_id`? Or above, in `diary_entry.rb`, it should be `diary_entry_id`?", "pred": "Fix user.rb"}
{"gold": "session is a new term. Should we call more like currentCommandBatch or something else?", "pred": "Fix comment (#1287)"}
{"gold": "Will go fmt before squash.", "pred": "Fixing namespace handler test (#1316)"}
{"gold": "Setting this to `true` means that it will always get merged in. The way merging is done here is that if a value is its zero value (`false` for `bool`), the value is considered unchanged. In order for this to work, you'll need to change this to be a `*bool` type instead.", "pred": "Fix default config"}
{"gold": "It was decided that blockSignerAddress is not only redundant (use the miner owner public key instead which is already stored), but does not belong in config.", "pred": "fix(bootstrap): fix bootstrap config"}
{"gold": "are we not asking for trouble here by not pinning this? or does 3.* imply all of the draft versions we'd try to validate?", "pred": "Bump version to 0.1.1"}
{"gold": "No, we want to compare `tm_py` and `tm_cpp` in this test.", "pred": "Fixing test to use new name of temporalImp"}
{"gold": "Let me know if we'd rather have this as an env variable.", "pred": "fix(pkg/reconciler/broker/trigger): fix typo (#1008)"}
{"gold": "question: what is happening here?", "pred": "Fix typo in vault_service_account.go"}
{"gold": "\\[Checkstyle\\] ERROR: 'protected' modifier out of order with the JLS suggestions\\.", "pred": "Fix typo in AbstractSetTest"}
{"gold": "Can we use EJSON from bson here? and in doing so avoid bringing in the deprecated `mongodb-extjson` lib `const { EJSON } = require('bson')`", "pred": "Add missing import"}
{"gold": "So this parameter is now deprecated?", "pred": "Fixed GridPlot docstring"}
{"gold": "Actually, it looks like HAVE_RSEQ is only used to determine whether the rseq.h header is around, which then only determines whether the regression test is built: it does not affect whether the core handles an application using rseq. The core rseq mangling code and all the code in rseq_linux.c is always enabled. I believe the idea is that we want DR built on one machine to work on as many others as possible, rather than requiring a custom build for every variant of kernel feature or whatnot. What is the top-level problem being solved here? If it requires disabling or enabling the core handling rseq, probably a separate option should be put in place and maybe HAVE_RSEQ renamed to make it clearer what its consequences are.", "pred": "Fix rseq_shared_fragment_flushtime_update() to use rseq_tls_ptr()"}
{"gold": "I don't see a corresponding call to freeSelectorSet... am I missing something?", "pred": "Fix import path in cache/subscriber.go (#1219)"}
{"gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "pred": "Fix auth_callbacks_controller_spec"}
{"gold": "Is this part of spec?", "pred": "Fixing typo in HttpFlavorKey (#100)"}
{"gold": "Hmm, do we need to do this for Windows too? It won't have this private loader TLS issue but it will run DR code in a separate thread before DR init is fully done which I think violates some assumptions. For Windows we would move this wait from win32/os.c to win32/callback.s intercept_new_thread where it checks whether it's a client thread right before calling dynamo_thread_init. If you do not want to deal with Windows you could bail on my suggestion and leave the issue open (or maybe file a new issue) for Windows, or if you want to put the suggested core/win32/ change in place and your new test passes on Appveyor we could then claim to have fully solved this related issue too for all platforms.", "pred": "i#100: Fix a bug in client_thread_run() where the stack pointer was not being set properly."}
{"gold": "We can remove this function and use `lambda_function_name(..)` in this file instead.", "pred": "Fixing bug in kinesis_get_latest_records"}
{"gold": "nitpick: `ApplicationVersion` could be `AppVersion`. It's smaller but gives the same understanding for purposes of the field.", "pred": "Fix typo in metrics package"}
{"gold": "nit: maybe prefer `resp = &workflowservice.PollWorkflowTaskQueueResponse{}` over adding another function exit points especially for non-error cases?", "pred": "Fixing a typo in the comment (#110)"}
{"gold": "Do we specifically need to keep the read preference as a symbol for use elsewhere? If not, I think it would be cleaner to just modify the options before caching them in the `client_options` method so that we don't do this check every time. If we do need it a a symbol elsewhere, I'd suggest either putting `return @client if @client` at the top of the method (and changing the assignment below from `||=` to `=`) or moving this within the parenthetical block in the last assignment so that we don't repeat this work.", "pred": "Fix Mongoid::Clients.with_name to return a Client instance"}
{"gold": "Since this is for video only, should it be called `preferredVideoMimeType`? If we add it for pictures later, it will likely need to be a different option.", "pred": "Update webcam.js"}
{"gold": "That doesn't make sense. LayoutEntry doesn't match the generator concept.", "pred": "Fix typo in comment"}
{"gold": "I think the customer visible strings should be \"Service\" instead of \"Svc\" to make it obvious to them", "pred": "Fixing test"}
{"gold": "Explain why this property is necessary?", "pred": "Fixing JavaProcessJobTest"}
{"gold": "It should accept executions as the input", "pred": "fix: typo in comment"}
{"gold": "Is this limitation necessary?", "pred": "fix bug"}
{"gold": ":question: Should there be validation to ensure that only one of these attributes is used?", "pred": "Update issuer.go"}
{"gold": "I would recommend using Psr\\Container\\ContainerInterface here instead of Interop\\Container\\ContainerInterface; both currently work, but the Interop version is deprecated and will eventually be removed, so using the Psr version will save us time in the future.", "pred": "Fix namespace"}
{"gold": "This would also change back to /var/www/html/docroot if we go that way.", "pred": "Fix test"}
{"gold": "Does this need to be public? Can't one of the helper functions below pass the data? If it really needs to be public, could it be write-protected?", "pred": "Remove commented out code"}
{"gold": "Thanks. Now that you've improved this we should just init and expose the StorageAPI on the node, like the other.s", "pred": "fix(api): fix typo in comment"}
{"gold": "it will be better if you can provide some examples", "pred": "Fix Key.compareTo()"}
{"gold": "\"return type\" and \"response type\" have never really been contrasted before, and it's unclear what their meaning is here. Could you clarify?", "pred": "fix: add missing import (#112)"}
{"gold": "Import order has been violated here.", "pred": "Fix import"}
{"gold": "Are you suggesting deleting the concept of message querying from plumbing (sounds like more trouble than its worth) or suggesting deleting the snapshot based implementation?", "pred": "fix: typo in comment (#100)"}
{"gold": "I recommend using StringSliceVarP to resolve the label flag, like `-l key1=value1,key2=value2`. What do you think?", "pred": "fix: add missing space in comment (#3266)"}
{"gold": "@Samuell1 Will assigning the same icons array to all the tabs result in, for example, a primary tab called \"Colours\" and secondary tab called \"Colours\" having the same icon?", "pred": "Fixing a bug in the form widget."}
{"gold": "A docstring for this function please.", "pred": "Fix for #1055."}
{"gold": "heads up @JunTaoLuo", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": ".GetMethod() cannot return null now, correct?", "pred": "Fix #1003 - AsyncTaskMethodBuilder is not supported in .NET 4.5"}
{"gold": "Same thing here, I think the proper fix is elsewhere.", "pred": "Fix typo"}
{"gold": "errno is a global variable that might be set by any system library call. It is dangerous to rely on it except right after the system call where it is set. But in this code, it looks like the library call is buried inside ExpLOBInterfaceSelectCursor. It would be safer if the latter function saved errno after whatever system library call it calls, and returns that as an \"out\" parameter, which this code could then check.", "pred": "Changes to support HDFS 0.20.0."}
{"gold": "`hasattr` is kinda terrible; just append extra info in the subclass.", "pred": "Fix typo in comment"}
{"gold": "Fair warning, the way that exception block is written won't work in python3 Python 3.2.3 (default, Jun 8 2012, 05:36:09) [GCC 4.7.0 20120507 (Red Hat 4.7.0-5)] on linux2 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. > > > try: > > > ... raise ValueError(\"foo\") > > > ... except ValueError,e: > > > File \"<stdin>\", line 3 > > > except ValueError, e: > > > ^ > > > SyntaxError: invalid syntax", "pred": "Fixing the default time range for the graph"}
{"gold": "This only updates the metadata and not the actual thing you are trying to solve for the docker hypervisor.", "pred": "(BKR-100) Fix ssh connection to container"}
{"gold": "should this package be internal? don't we want to use it e.g. in go-contrib?", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Just curious, why did you make this change?", "pred": "go/search: fix comment typo"}
{"gold": "Can you handle error cases such as `pd.get_dummies(pdf, prefix={\"A\": \"foo\"})`?", "pred": "[SPARK-35895][PYTHON] Fix the error message in get_dummies (#32245)"}
{"gold": "Where is this environment variable being set?", "pred": "Fixing a typo in the comment"}
{"gold": "`module_class ` is already a class and `type(module_class)` always returns `<class 'type'>`", "pred": "Fix typo in registry.py (#123)"}
{"gold": "Nit: The lambda can be replaced with a method reference: `SparkOrcWriter::new` I think.", "pred": "[SPARK-11589][SQL] Fix the bug of SparkFileWriterFactory"}
{"gold": "It would be nice to have a docstring that says what range of integer-like objects will be accepted, as well as what the int_like argument is meant for.", "pred": "Fixed indentation"}
{"gold": "How do we manage updates to this view down the road?", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "We can revert this to reduce the diff of the PR.", "pred": "[java] Remove unused import"}
{"gold": "I think we should refactor or drop this test, as it is not testing the points format now, but IndexingChain/FieldsInfos' logic. Maybe we could rename the test `testMergeMissing` and configure the first segment to not have the `id` field at all.", "pred": "fix typo"}
{"gold": "not sure I follow why all this goes away?", "pred": "Fix typo in bisect progress formatter"}
{"gold": "Is this `{clipboard}` or `{primary}`, as the deprecation message for `:paste-primary` says?", "pred": "Fix test_insert_mode"}
{"gold": "Human unreadable. IMHO user should input MYST value: 0.0006 @chompomonim, opinions?", "pred": "Fix typo in openvpn flag"}
{"gold": "May be you could elaborate on why you removed this? I see some of this logic has been moved to ia2Web, but couldn't there be cases outside ia2Web (i.e. UIA) in which case ROLE_TABLEROW and ROLE_TABLECOLUMN are mapped to objects, in which case these objects will be of presentation type content erroneously?", "pred": "Fix for #4687: NVDAObject.table should return None if the table is not supported."}
{"gold": "This is not consistent. Either rename the first to `tradePlayerItem` (which is ugly) or the second to `partnerTradeItem` (:+1:)", "pred": "Fix trade bug"}
{"gold": "is there a reason we don't want to gx this dependency?", "pred": "Update deps.sh"}
{"gold": "I'd suggest to add \"ATI \" and \"Intel(R) \" to this list", "pred": "Fix typo in comment"}
{"gold": "This is using a different lang key, we should switch it to using the new key and remove the old key if it is no longer used.", "pred": "Fix status widget"}
{"gold": "shouldn't this work? nodesRegex = regexp.MustCompile(api.SpecNodes + \"=(('[0-9A-Za-z,_-]+')|([0-9A-Za-z_-]+)),?\")", "pred": "fix(api): fix regex for scale"}
{"gold": "You mentioned this change was prompted because the `before_create` action was actually a defect. This will be done only for a new record; why is `before_validation`, which will be called repeatedly as accounts get updated and saved, correct whereas `before_create` is not? It looks like one would want to assign and activation code, etc., only once.", "pred": "Fixing typo in comment"}
{"gold": "What's the rationale for a default setting to not use a GlobalSamplingRate of 1? I don't know much about the sampling rate stuff", "pred": "Fix typo in comment (#1007)"}
{"gold": "Don't we know if it's 64 by this point? Do we have to test for the directory on every call, or can't we just split the value based on the platform?", "pred": "(maint) Fix windows acceptance tests"}
{"gold": "It's not async", "pred": "Fix #105: Add missing menu item"}
{"gold": "Maybe we could add some use of `exporterOptions` in this example, otherwise the proper code would replace this variable name with an underscore?", "pred": "Fix typo in OTLP exporter example (#2067)"}
{"gold": "Maybe would be better to rename it to \"onEveryKey\" or \"fireOnEveryKey\".", "pred": "Fixing search widget"}
{"gold": "if we're switching to calling FileDownloadHelper, we can just call that directly from the xhtml (see line 357 for example) and then remove this method completely. This is because the other thing it does is check PrivateURLUser, but the FileDownloadHelper method already does that. (and while we're at it, we can remove the method from FileUtil as this is the only place that method is called)", "pred": "Fixing FilePage.java"}
{"gold": "is `fullName` still required as a parameter?", "pred": "fix: add missing @Override annotation (#102)"}
{"gold": "This informational message is important to users. Please leave.", "pred": "Fixing the legacy RC support"}
{"gold": "Why do we want to remove this one? Are we planning to substitute it?", "pred": "fix: use correct variable name for app domain (#1048)"}
{"gold": "We may create an issue to track this so we don't forget?", "pred": "Fix import path in test"}
{"gold": "This file has the executable bit set.", "pred": "Add a comment to explain the purpose of the before_action"}
{"gold": "Improve the formatting of the message `.Infof(\"setting db capacity to: %v\", db.capacity)` There is a space before `:` and this way it is easier to see the formatting.", "pred": "db/badger: fix typo in comment"}
{"gold": "This lock cannot be released here, as it is protecting m_RTPSParticipants and the participant reference.", "pred": "Fixed typo in RTPSDomainImpl::find_local_participant"}
{"gold": "we'll need this in `_findAndModify` too", "pred": "fix(query): fix find method"}
{"gold": "This is the fix for the crash. The function to create the intent to launch this activity requires `dbName`, so it has to be set to `null`. In such cases, the value for `dbName` will be set to `null` and cause issues throughout this activity. This adds a default value if the explicitly assigned value in `null`.", "pred": "Fix SmartStoreInspectorActivity"}
{"gold": "Shouldn't we also trigger vision update here, so that if someone has caret highlighting enabled the correct character is highlighted?", "pred": "Fix #10851: Word 365 UIA notification causes NVDA to announce edit functions"}
{"gold": "Woah, how does this change, which includes semicolons, result in the baseline change? Are the semicolon chars just part of the internal representation of the import type?", "pred": "fix typo"}
{"gold": "Can't you just use runnvda.bat here?", "pred": "Fix #10075: NVDA location data is not updated when switching between source and installed"}
{"gold": "these definitions of UNUSED aren't the same as the one you imported, so callers should be fixed (if any)", "pred": "Fixing a typo in the comment"}
{"gold": "is type a free string too?", "pred": "Fix typo in comment"}
{"gold": "here input could be a normal function or an instance of torch.nn.Module.", "pred": "fix: fix the bug of onnxruntime backend (#100)"}
{"gold": "Example output: \"19.03.git.a7f4a860d0c\" At some point `nixpkgsVersion` was renamed to `version` since someone may use an old channel we fallback to `nixpkgsVersion` for backwards compatibility.", "pred": "nix: use `nix-env -q` to check for nix"}
{"gold": "Class import is therefore redundant I guess :)", "pred": "fix(language): fix swagger annotation"}
{"gold": "If parsing fails, don't act as no IP specified. Error out.", "pred": "Fix typo in node.go"}
{"gold": "... here the semicolon wanted to run away from the enum ;)", "pred": "Update OverviewFragment.java"}
{"gold": "Note that this is in the context of SolrCloud, so \"secondary\" doesn't apply and should be instead follower", "pred": "SOLR-14866: Fix typo in ReplicateFromLeader"}
{"gold": "This one is a query parameter and probably really should be ID and in fact I'm mystified as to how this is working because the controller code definitely wants a number for that parameter so the test framework must be converting it back to an ID as best I can tell.", "pred": "Fixing test for changeset query"}
{"gold": "Need to ensure this is set to TRU for LOB datatype access too not just for hive .", "pred": "Fix a bug in FileScan::preCodeGen()"}
{"gold": "You're using the Sphinx docstring style here (maybe because it's the default in PyCharm?). Instead, you should use the NumPy style (that you've also used in other places) to be more consistent with the rest of the project.", "pred": "[SPARK-35955][PYTHON] Fix Series.to_pandas() to return correct dtype (#32059)"}
{"gold": "Don't really need this since the rest of the method will no-op but it's also safe to return early.", "pred": "Fix typo in KestrelServerOptionsLoggerExtensions (#1856)"}
{"gold": "Don't use relative paths. src directory is already on the include search path", "pred": "Fix compilation error in RTPSMessageCreator.cpp"}
{"gold": "this file can be removed", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Do we have test cases that name is null?", "pred": "fixing test"}
{"gold": "in a separate PR, I'll check for a table that is empty/all-null and skip this function call completely.", "pred": "fix(stdlib): fix typo in sumintagg.go (#1824)"}
{"gold": "We really, really want to catch _everything_ here. It is safe to leave `azkabanEventReporter` set to null.", "pred": "Fixing a bug in WebUtils"}
{"gold": "Can't we add the check here?", "pred": "Fix typo in comment"}
{"gold": "body is being used here for the first time without every being populated. This will error. To run tests do `./go clean test_py` and that will run the Firefox tests", "pred": "Fixing the issue with the remote connection"}
{"gold": "Tell me if you have a better field name for this.", "pred": "Fix typo in comment"}
{"gold": "FYI, I have a branch I started to improve this. Nuke can read the target frameworks from the project files, so we don't have to do this mess. Ran into some other issues so it didn't take priority", "pred": "Fix build"}
{"gold": "This is just `mol->atomNeightors()`, is it?", "pred": "fixing a bug in getNbrAtomAndBondIds"}
{"gold": "This alias is just for a single occurrence. Maybe it ins't necessary?", "pred": "Update infer_kernel_gpu.hpp"}
{"gold": "You can delete this `NONE` case.", "pred": "Fixing a bug in the C++ generator."}
{"gold": "@cnorthrop -- here is a test with a name change. Is this going to affect your internal CI?", "pred": "layers: Add test for VK_KHR_maintenance1"}
{"gold": "Nit: `Headless` is one word, not two, and so doesn't need camelcasing in this way.", "pred": "SimonStewart: Fixing a typo in the ChromeDriverCommand class."}
{"gold": "I think this will cause a warning, can you set the default to zero (`0`)?", "pred": "Fix typo in core.py"}
{"gold": "confusing naming. Identity from \"id\" package :/ why we need alias here? (and in other imports)", "pred": "Fix import"}
{"gold": "It'd be nice to fix up existing configs with the change - that'd mean adding the option to `RENAMED_OPTIONS` in `config.py` and adding something like `_get_value_transformer({'true': '', 'false': '*'})` to `CHANGED_OPTIONS`. I think I never tried adding an option to both, but it should work.", "pred": "Add a setting to disable the keyhint popup"}
{"gold": "Perhaps use the new `.keys()` method here instead?", "pred": "Fix test case for array access"}
{"gold": "We don't need this option because plan-preview is comparing between 2 commits, not using the live state.", "pred": "Fix typo in comment"}
{"gold": "I'm not sure about putting this in the options. I would see it living in an object and then being queried on through a class - a more object oriented, ruby solution.", "pred": "(BKR-111) Add a step method that takes a hash of options"}
{"gold": "So `Status` returns metrics?", "pred": "Fix typo in amdgpu_pm_info"}
{"gold": "Can we make a generic method say, `set_infographic_view` and in that method we can check the 4 values (outside_committers, portfolio_projects, outside_projects, affiliated_committers) and check against params[:action] and params[:view] and then trigger the respective method dynamically as it takes the standard argument(s) for all the four methods. What do you think?", "pred": "Fix organization controller"}
{"gold": "Why would this be called to copy a non-Date object?", "pred": "Fix IcebergDateObjectInspectorHive3"}
{"gold": "This alignment issue had not appear because no multiple `Boolmsg`s had been serialized at once.", "pred": "Fix boolmsg serialization"}
{"gold": "Why are we not implementing a BooleanDefaultFalse struct and replacing all of these config vars that default to false with that? Are \"default false\" config vars not affected by this bug?", "pred": "fix(agent): fix typo in default config"}
{"gold": "Replaced this method with a ruby idiomatic setter.", "pred": "fixing role access level"}
{"gold": "wrong place hehe", "pred": "Update README.md to reflect new name"}
{"gold": "Can this be `test -e /var/run/mysqld/mysqld.sock` instead of `ls`? Using `ls` for noninteractive stuff is a recipe for sadness, IMHO. /cc @tianon", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Are these `dependent: destroy` attributes intended to implement cascading deletes? I had assumed they were added because of the `paranoia` gem, but since that is no longer part of this PR, are they here as a best practice?", "pred": "Add a scope to proposals to only return proposals that are not archived"}
{"gold": "This approach would work only if there's a guarantee that the stream does not get freed before `establish_tunnel` is called, even though it _may_ enter CLOSE_WAIT state (at which point `stream->tunnel` is set to NULL). I do not think that assumption holds. Hence the alternate approach.", "pred": "Fix a typo in tunnel.c"}
{"gold": "Did you mean to remove the periods here while newly adding to other locations?", "pred": "Fix typo in nano_pow_server_config"}
{"gold": "the check can now be `if newLen < 0`", "pred": "Fix a bug in blockPutState.removeOtherBps"}
{"gold": "If we're going to clean up this package, can we also remove those two `_` imports that appear to serve no purpose? (FWIW, they're also in the manager package too...)", "pred": "fix: remove unused import"}
{"gold": "Won't this leak like a sieve? The caller can't delete this as one is a unique_ptr and one is not.", "pred": "Fix compilation error in MMFFAromCollection.cpp"}
{"gold": "form => from", "pred": "fix(storage): fix localstorage"}
{"gold": "Ok, we can't switch it now, because the properties are a field of the interface Rule - which makes it public API. Maybe we should remove it here in the (Java) API in 7.0.0? The only API left would be, when using a rule and setting the properties in the ruleset xml. There the type doesn't matter - since the String is then automatically converted into a Pattern.", "pred": "Fix typo in javadoc"}
{"gold": "Pass in null here, instead of a value? Maaaaybe we should add an overload for `GapicProductConfig.create` that matches the original signature and passes through null? I don't feel strongly about that though, so happy to leave asis if you prefer.", "pred": "fix: go gapic surface transformer test (#100)"}
{"gold": "Include all compounds parts from the very beginning for the case check to work later", "pred": "LUCENE-5794: Fix CheckCompoundPattern to not break on hyphens"}
{"gold": "if the user specifies a url scheme on the cli this is going to cause problems, no?", "pred": "fix: remove unused code"}
{"gold": "How about that `scaleFactor`?", "pred": "Fix typo in settings."}
{"gold": "`assert(is_int($result));` would be preferable I think, even if we know it can't ever be false", "pred": "Fixing a bug in the NonDivArithmeticOpAnalyzer"}
{"gold": "I'm unfortunately unable to review whether you've changed everything that used to use cartIds", "pred": "fix CS"}
{"gold": "Please don't touch unrelated files to keep the git history clean", "pred": "Remove unused import"}
{"gold": "Per our style guide, I don't think we indent `private` keyword. Would you mind fixing that?", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Will this change the input `heatmap`? Is this behavior expected or not?", "pred": "fix bug"}
{"gold": "If I'm reading this right, this changes the parameter name so it'd constitute a breaking change :cold_sweat: Are we missing a test that should have been failing up until now?", "pred": "Fix typo in strings.lastIndexAny"}
{"gold": "Need copyright/license info.", "pred": "Update SnsApplication.java"}
{"gold": "Is this `info log` necessary? If it is not useful, can you consider deleting it?", "pred": "fix: import path of admissionv1beta1 (#3746)"}
{"gold": "Unrelated change, but seems to be the correct purpose of the test.", "pred": "Fix test"}
{"gold": "Should it be `'uppy-input-`?", "pred": "fix: add missing comma"}
{"gold": "what's the reasoning to keep these always true or dead-code blocks?", "pred": "fixing a bug in the mtrace function"}
{"gold": "It would be a good practice to do `.off('click', '.tab-buttons > div').on('click', '.tab-buttons > div', function() {`", "pred": "Update index.js"}
{"gold": "I suggest that we rely on `--controllers='*,gateway-shim'` for now, and we can then move from `--controllers='*,gateway-shim'` to automatically enabling the Gateway API support on startup using the discovery API in 1.6 or 1.7, what do you think? Note that the logic I wrote in e5436df521015057e77de3fe02c174ea8a863b93 should also use this `GatewaySolverEnabled` flag I think.", "pred": "Fix typo in comment"}
{"gold": "I moved the instantiation of the signature algorithm here, to execute it before the native libraries are configured. Otherwise the wrong signature algorithm could be configured in a future release when more than one is supported in Besu.", "pred": "Fix BesuCommand to use the correct logger (#2125)"}
{"gold": "Why remove this?", "pred": "Fix typo in docstring"}
{"gold": "`this.ieService_` should be initialized to null in the constructor.", "pred": "[java] Add missing @return tag to Builder.edge()"}
{"gold": "Why not `ebpf::BPF bpf;`? Assuming that the instance is not huge, I do not think there is a good reason to use a pointer when it can be retained as a value.", "pred": "Fix build error"}
{"gold": "nit: move to last block", "pred": "Fix import path for metav1"}
{"gold": "nit: I'm under the impression that `log` is the convention for golang, and that the `er` suffix is usually reserved for interfaces", "pred": "Fix import path in agent/config/config.go"}
{"gold": "Why is IsolationLevel fully qualified? System.Data is already in scope? What do I miss?", "pred": "Fix typo in comment"}
{"gold": "do we still need SanityCheck()? seems they all return nil now", "pred": "fix: remove unused import"}
{"gold": "What I am missing in this PR, and I think we discussed that on the weekly meeting, is that all the code snippets that advise using `loadData` should be changed to one of the two new methods. Otherwise we send confusing mixed signals by promoting `loadData` everywhere in the guides. `loadData` is not deprecated, but is legacy.", "pred": "Fix typo in comment"}
{"gold": "Line is too long. [100/80]", "pred": "Fix typo"}
{"gold": "I suggest \"no parent snapshot found, will read all data\\n\".", "pred": "lxd/backup: Fix typo in backup.go"}
{"gold": "`LogManager.ThrowExceptions = true` has very special meaning when unit-testing. Why the change to `LogFactory.ThrowExceptions = true` and enabling after the config-load?", "pred": "Fix unit test"}
{"gold": "It should be return \"''\"; I will fix it", "pred": "Fixed a bug in the string formatter"}
{"gold": "This is wrong, should be `entry.getValue()`", "pred": "fixing test"}
{"gold": "nit: why can't we combine the two add operations into one so that we add `{\"nameCertificates\": []}` to `/spec/servingCerts` ?", "pred": "Fix typo in comment"}
{"gold": "These whitespace only changes make it very difficult to review this change. Is there any way you could separate just the code changes into one PR and the whitespace only fixes into another? Or are they sufficiently merged together at this point? Chrome is having a real tough time rendering these large diffs.", "pred": "Fix build break in sos.cpp"}
{"gold": "why does this suddenly need a config ref", "pred": "Added a comment to RoomHandler"}
{"gold": "Unfortunately, I couldn't find a way to get karma to conditionally load stuff from a CDN, so I had to include it.", "pred": "fix(karma): fix karma config"}
{"gold": "Those functions are not currently wrapped, so I don't think it is necessary to exclude them (at least for now).", "pred": "ENH: add vnl_vector_fixed to the list of excluded classes"}
{"gold": "Nit: since this is now a private function rather than a variable, would it make sense to move it after the public functions in this file for readability?", "pred": "Fix import path for clock package"}
{"gold": "I'm assuming that MolDraw2Qt drops the alpha channel?", "pred": "Fix for Qt4 compilation"}
{"gold": "the code looks good to me, but I just wonder if it is a real use case: (de)serializing a single integer.", "pred": "Fix typo in test name (#40626)"}
{"gold": "Pls remove the print statements. Also, you do not need the if statement.", "pred": "Fixing composition.py"}
{"gold": "Thanks for this fix @eltone !   Wondering if we should make this a bit more resilient to upstream changes, e.g., via a regex replacement. Not critical, though - we can pick that up in a follow-up PR.. Thanks", "pred": "Fix moto patching for Python 3.8"}
{"gold": "Should this be instead a configurable option?", "pred": "fix: typo in comment"}
{"gold": "unit test needs an update?", "pred": "Fix typo in disk creation"}
{"gold": "I realised that this is not used anywhere", "pred": "fix: add missing super call"}
{"gold": "why add the default branch? this may cause there exist multiple configWatchers that notify the eventsCh at the same time?", "pred": "Fix typo in comment"}
{"gold": "This line appears to have caused the regression. What is it supposed to be doing?", "pred": "sam/usb: fix typo in comment"}
{"gold": "# `attr_value['string'] is not None` probably not required as `attr_value['string'] == value` check is already being done", "pred": "Fix proxy type"}
{"gold": "@alanwest I noticed this while changing the code. I think we _might_ run into some race condition - if a scraper happens to hit the HTTP server before we could add the reader, what would happen (I guess we will hit exception, which turns into HTTP 500)? I haven't looked into the HTTP server logic. I think it _might_ be OKAY. A better version could be - we only start the HTTP server once the exporter/reader are fully ready and both are hooked up to the provider.", "pred": "Fix typo in PrometheusExporter (#1005)"}
{"gold": "As for Owin, I think we should exclude this URL in `IsNotServerLifeCheck` too?", "pred": "Fix typo in AspNetCore integration test (#1088)"}
{"gold": "Does it make sense to just fold these options back into the exporter options? My thinking is that this option is unlike the processor/metric reader options in that it actually is about the exporter itself.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "here is `:seconds` missing", "pred": "Update auth.php"}
{"gold": "change of name is not needed", "pred": "Fix test"}
{"gold": "Hm .. so this case doesn't work anymore?", "pred": "TST: fix test_rename_series_inplace (#23435)"}
{"gold": "Please indent this so it lines up with the `(`", "pred": "Fix import"}
{"gold": "We should still register the script. Just not enqueue it.", "pred": "Update scripts.php"}
{"gold": "I think this can stay as a method. And we can write our own attribute_change(name) as required.", "pred": "Fixing the changes method to return the correct values"}
{"gold": "@alexshikov @Cheesebaron I might be missing something but isn't the viewType parameter here the actual layout resource id? Why would the GetItemLayoutId method need to be called again? On line 127, the exact same method is called except this time passing in the index of the object in the backing data source, which makes sense - the template selector can return the layout id based on the index of the item in the list.", "pred": "Fix for #3588 - MvxRecyclerViewHolder.OnCreateViewHolder is not called"}
{"gold": "Can you change this to use `.format()`?", "pred": "Fixing a bug in the BigQuery client."}
{"gold": "Maybe the parameter should be consulted higher up the stack so that we only set dropEncap if we're rendering a workload egress chain and the flag is set?", "pred": "Fix comment"}
{"gold": "new casing is less ELiTE", "pred": "fix typo in sectorbuilder interface"}
{"gold": "This leaks EGL/GL implementation details into the generic renderer interface.", "pred": "render/wlr_renderer: fix typo in comment"}
{"gold": "Maybe add *key* i.e. `\"The \\\\`deploy.on\\\\` key should be a hash (dictionary).`", "pred": "Fix typo in apt_sources_config_error message"}
{"gold": "its be good also change $code na $id, actual name is misleading and that was probably actual error generator", "pred": "Fix StatusGridBuilder"}
{"gold": "I changed the name of the key, to make deployment easier.", "pred": "Fix import error in redislistenstore.py"}
{"gold": "isn't this going to be true by default? if yes, then let's have the env var named `ECS_DISABLE_SPOT_INSTANCE_DRAINING` and have default as false.", "pred": "Fix typo in environmentConfig"}
{"gold": "Do you think we might need this anywhere else in HoloViews?", "pred": "Fix import error in dimension.py"}
{"gold": "@MrTimscampi don't we want to remove this term entirely? Might as well do it now if that's the case.", "pred": "Fix getDisplayPlayMethod"}
{"gold": "I have followed the convention of `cp`", "pred": "add missing require"}
{"gold": "The docs say it's `false|null`", "pred": "Fix mysqli::autocommit() signature"}
{"gold": "Thinking on it more, I actually really like your idea to rename `type` to `factor`.", "pred": "Update circuit_breaker.go"}
{"gold": "This error message is redundant. All of this information is included in the stack trace. In general it's a good idea to avoid using method names in error messages. Chances are the method will be renamed at some point, but the string won't be updated accordingly. Then you'll end up with a very confusing error message. I suggest changing the message to: \"Failed to unblock network loads. Missing INTERNET permission?\"", "pred": "Fix typo in comment"}
{"gold": "Feel free to add your own name while at it.", "pred": "Fix typo in shlobj.py"}
{"gold": "`signer` is a global variable (from `gochecknoglobals`)", "pred": "fix import"}
{"gold": "shouldn't this be `&& opts[:localize]` (i.e. both nil and false skip localization?)", "pred": "Fix typo in comment"}
{"gold": "This can also be removed.", "pred": "Fix import order"}
{"gold": "Not critical but \"common\" is not that helpful in the commit title. Maybe go with \"libkvs/txn:\" for this one?", "pred": "Fix typo in documentation"}
{"gold": "It's been a while, but I just noticed this was wrong: It migrated `True` to `when-searching` (so people with `scrolling.bar = True` suddenly didn't have scrollbars anymore) and `False` to never. Instead, it should migrate `True` to `always` (no behavior change) and `False` to `when-searching` (so people notice the new feature). I fixed this in cc0f5fc6d400e12833ba729049e31d16cf836d53.", "pred": "Fix typo in migration code"}
{"gold": ".decode(sys.getfilesystemencoding()) will be better. Although I think rrdtool should accept bytes..", "pred": "Fix RRDReader.fs_path encoding"}
{"gold": "An interface call per header might be more expensive than we want to pay. Do we really need this to be abstracted? I think a parser abstraction makes sense, but it seems to me like a separate abstraction for handling headers (one by one) might be an overkill.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Resharper annotations, always +1", "pred": "Fix #2885 - StackTraceUsage.WithoutSourceInformation is not working on .NET Core"}
{"gold": "same here, CryptoSm2 won't be changed once command is compiled", "pred": "fix: typo in account create add command"}
{"gold": "Loading the login page after the certificate has been loaded. Views can only be loaded from UI thread.", "pred": "Fixing the issue with the webview not loading the page"}
{"gold": "Technically it doesn't belong here; let me remove it.", "pred": "Fix typo in config validator"}
{"gold": "remember to update the hash once the upstream PR is merged  ", "pred": "fix(stepfunctions): update stepfunctions-local patch (#4677)"}
{"gold": "Sends the incoming message to the decryptor, which will then forward it to the interface once processing is complete.", "pred": "Fixing issue with push notification not being received"}
{"gold": "FYI This will go the other way, with nil being the correct value for \"no params\"", "pred": "fix: fix typo in comment (#1002)"}
{"gold": "Is this necessary? Are there duplicates in your LibKeyIndex?", "pred": "Fix for issue 1460: 1460.1460.1460.1460.1460.1460.1460.1460.1460.1460.1460"}
{"gold": "Why will the gomock files be regenerated? It seems to be irrelevant", "pred": "[FAB-14104] Fixing the mock file"}
{"gold": "I'm very curious about why using buffered-channel. Is there something wrong to use an unbuffered channel with zero capacity?", "pred": "Fix typo"}
{"gold": "It seems like you accidentally pulled some unrelated changes to util_test into this.", "pred": "Fix import error in test_luigi_task"}
{"gold": "do not toucm NDM please - there will be lots of conflicts", "pred": "Remove unused usings"}
{"gold": "This looks legitimate - Would cause a classCastException. But have we ever seen it in the wild?", "pred": "Fixing a bug in the XLSX writer"}
{"gold": "This looks out of scope for this particular PR.", "pred": "Fix typo in testinfra documentation"}
{"gold": "Don't need () if only one.", "pred": "Fix comment typo (#1118)"}
{"gold": "Why not have mailPort as int since your are already parsing while calling t.connect ?", "pred": "Added a default constructor to AbstractMailer"}
{"gold": "In the future, do not remove these trailing commas as they have the purpose of making append-diffs easier to read. :)", "pred": "Fix setup.py"}
{"gold": "Was this added by accident? It doesn't seem related to Syndetics, and I don't think it should be necessary in core VuFind (but maybe it's related to one of your local customizations).", "pred": "Fixing a bug in the SolrDefault class."}
{"gold": "i know the ergonomics are a little nicer with map[string]bool, but I prefer map[string]struct{} for sets for a few reasons: 1 - optimized storage (not very relevant here) 2 - don't have to think about the conditions where the key exists in the map or if the value could somehow be false", "pred": "Fix typo in comment"}
{"gold": "This is very unclear what Server means. We need a better name, maybe ServerExtension?", "pred": "Remove unused import"}
{"gold": "I wonder if we should trigger a PHP error and ensure it ends up in the log?", "pred": "Fix test"}
{"gold": "Hmmm not sure about this. Is it fine @ar2rsawseen?", "pred": "Fixed bug in decodeHtml function"}
{"gold": "Why do you prefer `go` over `run`?", "pred": "added javadoc"}
{"gold": "Unintentional, please remove", "pred": "Fixing unit test"}
{"gold": "What was the reason behind moving this?", "pred": "Add a comment to Subscription#deliver_welcome_emails"}
{"gold": "Did you mean to put that `join` after the `map` rather than inside it? Also should it be `safe_join` or is interpolating it into an `_html` resource going to have much the same effect>", "pred": "Fix gpx notification mailer"}
{"gold": "`Indicates if this Realm has been closed.`?", "pred": "Fix Realm.isInTransaction type (#2168)"}
{"gold": "how is this change adding corr to Series? Do all the methods that are added to Frame automatically get added to Series?", "pred": "BUG: Fix typo in pandas.Series.to_dict (#14582)"}
{"gold": "Just a heads up for anyone else reviewing this, this logic and all the repetitions of it should be greatly simplified by subsequent work relating to issue #2552.", "pred": "fix: fix a typo in syncer.go (#100)"}
{"gold": "@billwert I have kept the `1000` InvocationsPerIteration, but do note this is very small for the small types.", "pred": "Fixing the Sort benchmark"}
{"gold": "Unrelated whitespace change.", "pred": "Fix typo in statusbar.py"}
{"gold": "Slight formatting issue here. There should be a space after the asterisk.", "pred": "Remove unused function"}
{"gold": "Slight preference for declaring variables inline rather than at the top of the function. That way you can use const for both of these.", "pred": "fix(isHidden): add missing semicolon"}
{"gold": "this is a duplicate file of the one in demo-schema. please remove this file.", "pred": "Update TestMgr.java"}
{"gold": "Nit: unified names between geth and contracts", "pred": "fix: remove unused flag"}
{"gold": "Necessary? Could you just use DefaultBuildState here?", "pred": "Fix test"}
{"gold": "linked hashmap retains order", "pred": "Remove unused import"}
{"gold": "And the old names for these variables made more sense imo.", "pred": "Fix build"}
{"gold": "Are you sure this change is correct?", "pred": "Fix typo in comment"}
{"gold": "The previously linked bug does not apply anymore? If so, this is LGTM!", "pred": "Fix test_view_image"}
{"gold": "Why are we renaming all of the tests?", "pred": "Fix test"}
{"gold": "Instead of having this logic, would it make sense to require *users* to encompass the specified IPv6 address within `[` and `]`? Why the magic handling here?", "pred": "Fixing a typo in the comment"}
{"gold": "Why not also replace this one with calls to `GetProp<ROMol,T>`?", "pred": "Fixing a bug in the python wrapper"}
{"gold": "Still need to remove trailing spaces on this line", "pred": "Fix bug in KNNClassifier."}
{"gold": "Please use the `@Experimental` annotation on this", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "I found ~10 more instances of this typo. we can fix those in subsequent PRs.", "pred": "Fix typo in comment"}
{"gold": "How about making metricNamespace an option, and by default it's the same as `component`? e.g.m Init(component, WithMetricNamespace(\"trigger\"))", "pred": "Fix typo in comment"}
{"gold": "Just checking: no need for case manipulation?", "pred": "fix typo in javadoc"}
{"gold": "Same as above, not that descriptive", "pred": "Fix typo in GrpcMetadataGeneratorTool"}
{"gold": "> i#4670 signl-interrupted special ibl xfer frag: Unlink if signal pending nit: This looks like one of many commits with the text before the colon. nit: On the long side: 56 or 60 chars is what some views show Spelling error.", "pred": "Fix typo in comment"}
{"gold": "Should we need to invoke pthread_cancel ?", "pred": "lib: in_lib: fix pipe read error handling"}
{"gold": "this is auto generated file so no changes are allowed here", "pred": "ZMSResources: add missing @PathParam annotation"}
{"gold": "All buttons are submit buttons, except if they are `type=reset` or `type=button`. I suggest you do an exclude of those, rather than only include `button[type=submit]`.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "can you please make this multi line, this version is hard to read.", "pred": "Fix typo in perl_version"}
{"gold": "For consistency, it's best to either always use strict equality (`===`) or loose equality (`==`) in `typeof` checks, and to not mix them.", "pred": "Fix #1045: Horizontal flyout does not scroll to the top when switching between blocks"}
{"gold": "Work Orders would never have only one approver, right?", "pred": "Fix typo in factory"}
{"gold": "`code` is written to the message as a `byte`, so I think it's better to declare it in the enum as `byte` as well to avoid a narrowing primitive conversion from `int` to `byte` in runtime.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "This is the only \"extra\" change here.", "pred": "Fix: DashboardTopEarningPagesWidget."}
{"gold": "Please TODO and link to an issue for changing this.", "pred": "fix: remove unused SignedMessageValidator interface (#1007)"}
{"gold": "Can we make the script output trailing commas?", "pred": "Update en_US.js"}
{"gold": "This file should get a file header  ", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "maybe we need process the os error more safely and friendly when open file failed, because this error is very common when cpu has a high pressure, crash directly is danger.", "pred": "fix build"}
{"gold": "we need to pay attention not to use this flag everywhere.", "pred": "fix: gas price flag"}
{"gold": "curious about this change, since it is not mentioned in the commit message and now we have `uint8` all over the place", "pred": "Add missing import"}
{"gold": "wait, are we not mising `WithStamp` here?", "pred": "fix: typo in comment"}
{"gold": "oh. didn't know we store this stage progress.", "pred": "Fix typo in comment"}
{"gold": "Going with definition from here: > Does Unicode have private-use characters? > A: Yes. There are three ranges of private-use characters in the standard. The main range in the BMP is U+E000..U+F8FF, containing 6,400 private-use characters. That range is often referred to as the Private Use Area (PUA). But there are also two large ranges of supplementary private-use characters, consisting of most of the code points on Planes 15 and 16: U+F0000..U+FFFFD and U+100000..U+10FFFD. Together those ranges allocate another 131,068 private-use characters. Altogether, then, there are 137,468 private-use characters in Unicode. It looks like we are only ignoring ones in BMP and not the supplementary private-use characters. Shouldn't we consider the supplementary ones too?", "pred": "Fixing a bug in the getUnicodeNonBmpRegExp function"}
{"gold": "This change is un-tested and requires testing", "pred": "Fix return type of array_slice"}
{"gold": "Should the docstring mention the vscode option?", "pred": "Fixed logo param in notebook extension"}
{"gold": "ISTM that since `artman` know the \"real\" value of the GAPIC config name, it should pass that value to toolkit, rather than toolkit guessing the name based on a heuristic. Then again, I don't know what this value actually does for Java codegen...", "pred": "fix: update package metadata transformer (#100)"}
{"gold": "Please back out the import changes in files you haven't touched. I think these happen if you run goimports without having the vendor directory populated", "pred": "Fix import path for iptables"}
{"gold": "Should this be `ISocketOutput<T> where T : struct`?", "pred": "Fix typo in comment"}
{"gold": "In which case will this actually return 0? If there is no snapshot, then there is no `Snapshot` object, right?", "pred": "Fix javadoc"}
{"gold": "This part of code is valuable and necessary. Can we move it to another place for a more clear logic and only check it once? For example, move it to line 133 before delving into each module.", "pred": "fix: remove unused import (#5089)"}
{"gold": "Are we at all worried that changing pins will cause release hiccups? I think we've decided that relaxing pins should be safe but adding pins has caused us build issues in the past - so I think we're fine?", "pred": "Update setup.py"}
{"gold": "could you please explain a bit where these numbers come from? for example: why is there no `swarm.EncryptedSectionSize`?", "pred": "fix(metadata): fix import"}
{"gold": "s/object content/blob object/ (for consistency with the `Size` docs)", "pred": "Fix typo in godoc"}
{"gold": "Rather than deleting this entirely, could we just emit it as a `warn` or `info` log line?", "pred": "Fix typo in error message"}
{"gold": "Is there a chance of this being a BC break of somekind? I.e. what if an old instance of Caddy is running in a cluster with a newer one?", "pred": "acme: fix typo in comment"}
{"gold": "Thanks for this... is this the only place where the rollback is needed? Are there others?", "pred": "Fixing a bug in the CAI data access class."}
{"gold": "Should this also be a pointer? What happens if there are no BLS messages? I guess that's what this test is exercising, and Lotus also uses a non-pointer here.", "pred": "Fix test"}
{"gold": "This was definitely a subtle bug right here.", "pred": "Fix typo in comment"}
{"gold": "If this method gets all the emails, it should be named appropriately. **all_emails** or just **emails**.", "pred": "Update github_api.rb"}
{"gold": "Can we still random, but if we randomly get a port is used before, we randomly pick again?", "pred": "fix(p2p): fix test"}
{"gold": "I would rather no have this as a `kwarg` as it encourages \"growth\" which lead to an unweildy constructor in other classes. Let's add a method or property to take care of this instead as I think it's usage is going to be quite low.", "pred": "Fixing the service.py file"}
{"gold": "what if a purchaser is also an approver? or would that not happen?", "pred": "Fixing the gsa18f_if_restricted! method"}
{"gold": "Not sure why this change. You forgot to handle the case where the user has dynamic fees disabled and there are no fee estimates available. He should be able to sweep none-the-less (as he is using static fees anyway). The line with `config.fee_per_kb()` below, that you have deleted, handled that.", "pred": "Fix sweeping"}
{"gold": "sorry, I wasn't familiar with this TopLevelCondition... What it would be in this case? The AuditsLogReady condition?", "pred": "Fix typo in AuditLogsSourceStatus (#1005)"}
{"gold": "Where does the `alloc` field get set?", "pred": "fix(flux): fix typo in comment"}
{"gold": "looks expensive to do it on each query", "pred": "fix(postgres): fix postgres setup"}
{"gold": "@rhyolight -- but weren't we supposed to be standardizing on using underscores in file names (versus camelcase)?", "pred": "Update nyc_taxi_params.py"}
{"gold": "Can this simply call `in_memory.empty?` ?", "pred": "Fix empty? for embedded documents"}
{"gold": "The styling/wording here probably needs some thought. It's more of a placeholder.", "pred": "Fix typo in comment"}
{"gold": "Using a plural route helps in detecting the path automatically for `= form_for @password_reset`.", "pred": "Add route for password reset"}
{"gold": "Is `metadata` required on all tests? I actually just removed the metadata field entirely from a few tests in my PR.", "pred": "test(node): remove unused import"}
{"gold": "seems reasonable to also want to include the 'to' location?", "pred": "Fixing a typo in FileHandler"}
{"gold": "I don't think we need to necessarily check if that returned true or not, we should just remove the shutdown hook. Since nothing would check or do anything with this flag anyways.", "pred": "Added a method to create a temporary file."}
{"gold": "Better to push getting policy details into a func we can reuse later.", "pred": "fix(cvc): remove unused import"}
{"gold": "optional: while there's nothing to do, a good way to catch bugs (where we use an outbound without calling `Start`) might be to have this outbound verify that `Start` is called before `Call` or `Stop`", "pred": "Update outbound.go"}
{"gold": "Not a blocker by any means, but I think there is value in keeping the local imports in a separate group.", "pred": "Fix import path for cluster-api"}
{"gold": "nit - I would test the error message as well. For panic, you might need to see if the stack contains the error message, instead of equaling.", "pred": "Fixing test"}
{"gold": "Didn't we have specific logic for handling slices vs structs?", "pred": "fix: update compute/storage client to v1.0.0 (#112)"}
{"gold": "`c_str()` is not needed.", "pred": "Fix quest journal message not being sent to players"}
{"gold": "The handler will be installed twice if you don't remove the below one.", "pred": "Fix typo in comment"}
{"gold": "How about putting `epochLength` (or something like that) in place of `a` just to make it easier to read", "pred": "Fix typo in EthashConfigOptions"}
{"gold": "Wouldn't this still fire afterwards if you created one called `pleasings`? or am I missing something?", "pred": "Fix typo in comment"}
{"gold": "I don't love this syntax; it doesn't match anything we're currently doing and it's not obvious. Why isn't this `/keybase/private/jzila,kb_bot/.kbfs_autogit/public/jzila/kbp.git`?", "pred": "Fix typo in comment"}
{"gold": "Does a type-hint work instead of casting? `return ofAll(toList().<U> zipWith(that, mapper));` (Probably not, just a question.)", "pred": "fix Queue.zip"}
{"gold": "Are these required?", "pred": "Fix test"}
{"gold": "This is consistent for all clients that we will check yes? Seems like we should just use the singleton, maybe pass it to the parse function or since clients have a server pointer set it at server start and just access that way without locks?", "pred": "Fix typo in comment"}
{"gold": "Note that this is a bug, that should be fixed on master. `DECIMAL_LITERAL` cannot match any token, because it's declared with a `#`.", "pred": "Fix typo in JavaTokenizer"}
{"gold": "Don't need extra line here.", "pred": "Fix import path for nats-server"}
{"gold": "For the first look, this change is strange. Were we passing these tests before?", "pred": "Fix test"}
{"gold": "On Windows, doesn't `os.Args[0]` include the `.exe`? What if you run the program like `caddy.exe`?", "pred": "Fixing a typo in the comment"}
{"gold": "I don't see anywhere where `ServiceConfiguration` interface implementation would return any kind of error. Not sure if its needed, but we could ALWAYS return a valid 'pseudo' configuration without possibility of error.", "pred": "Fix typo in openvpn_config_negotiator.go"}
{"gold": "Do we actually want to split on `\\r`? I thought that the \"newline sequence\" was only `\\r\\n` on windows.", "pred": "Fix test"}
{"gold": "Nit: these lines are duplicated from above. They can be refactored by setting etype in a conditional and putting 282 and 283 below that.", "pred": "fixing json_generator to write out the type spec for a map"}
{"gold": "I would do an s.Notice(\"Initiating Shutdown...\") then after Shutdown() do the original Server Exiting.", "pred": "Fixing a typo in the signal handler"}
{"gold": "Not sure with how many seconds on average are we dealing with but maybe it's better to have hh:mm:ss format in logs - you can make it with `TimeSpan.FromSeconds(seconds).ToString()`", "pred": "Fixing a bug in refunds"}
{"gold": "Why is this required? The user should be able to omit it and use the defaults.", "pred": "Fix typo in comment"}
{"gold": "I don't think the naming of this setting conveys what it does. Maybe something like \"Ignore mouse movement triggered by other applications\"", "pred": "Fix mouse settings panel"}
{"gold": "Didn't went with backwards compatibility since it's still in beta", "pred": "Fix typo in OpenTelemetryProtocolExporterEventSource (#2170)"}
{"gold": "Perhaps bondsToCut must be None or non empty.", "pred": "fix typo in python wrapper"}
{"gold": "See above, we could avoid adding that (same applies below).", "pred": "Fix lint error."}
{"gold": "should use Number instead of Long", "pred": "Fixing SetNetworkConnection to use the correct ConnectionType"}
{"gold": "Should the rest of the file be updated to use `expect` or should this test use the same format as the rest of the tests?", "pred": "test: fix test-connection-string-options"}
{"gold": "How would you feel about a different approach where the `DeleteAWSRecordSets` gets passed the zone ID and zone name rather than the `DNSZone`?", "pred": "Fix typo in comment"}
{"gold": "it seems `random.uniform(0, 1)` similar to `random.randint(2)`, all have 1/2 probabilities.", "pred": "fix bug"}
{"gold": "Added to support EBS volume creation, used like this: blockDeviceMap = [] blockDeviceMap.append( {'DeviceName':'/dev/sdc', 'VirtualName' : 'ephemeral0'}) blockDeviceMap.append( {'DeviceName':'/dev/sdh', 'Ebs': {'VolumeSize' : '100'} })", "pred": "Fixing a bug in the autoscaling connection."}
{"gold": "We shouldn't depend that url is `mysterium` - it can be just `testRequestURL`. Also, `URL` has to be upper-case.", "pred": "Fix typo in comment"}
{"gold": "We could delay this look-up now and only do it in the non-skip case. I suspect this is true for (almost) all of the top-level refactored functions.", "pred": "layers: Fix typo in GetPhysicalDeviceImageFormatProperties2"}
{"gold": "Typically, to be simple, we could reserve a const length space.", "pred": "Fix a bug in the MetaServiceUtils::schemaTagKey (#1134)"}
{"gold": "Need to add a license and copyright header to each file.", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "If I'm not mistaken, this line is now outside of the `if signed_out?` block, right? Any concerns about that? Seems odd that we wouldn't accept coupons for signed in users, but I want to make sure we understand the ramifications of this change.", "pred": "Fixing the checkout form"}
{"gold": "Please remove the unused import of DBPDataSource.", "pred": "#10811 PG: fix typo in PostgrePrivilege"}
{"gold": "I think you should add some extra message here saying it was originally sent as an error, for diagnosability.", "pred": "Fixing the build break"}
{"gold": "I believe that all the changes in this file are not valid for v1.2 of the Avalon toolkit.", "pred": "fix test"}
{"gold": "we cannot change the behavior of the processRole - that method is used in lots of places. this call must be done only in the method where templates are being handled.", "pred": "Fixing the issue of updating the role auditEnabled flag"}
{"gold": "I think we probably want to follow the same naming convention that we do with `execAgentConfigFileNameTemplate` (using the SHA in the name of the file). This file might be confgurable in the future and when that happens we will be ready. Plus it's pretty much the same code that we already use for the config file.", "pred": "Fixing the path to the exec agent config dir"}
{"gold": "If following above, this would be: end_time = time(0) + manual_wall_time_option, which is simpler. Also, make the check manual_wall_time_option > 0, otherwise negative times would terminate the worker right away.", "pred": "Fix typo in comment"}
{"gold": "If we aren't using `errors.Is` we don't need the `Unwrap` as we have `Cause` which is what pkg/errors uses.", "pred": "Fix typo in comment"}
{"gold": "redundant empty line", "pred": "fix: import path of channelq (#2625)"}
{"gold": "The config.lua.dist still shows `houseAccountOwner`", "pred": "Fix configmanager"}
{"gold": "I think we can leave this import and use non FQNs in the code.", "pred": "Fixing CS"}
{"gold": "I'd rather just send the parameter twice than break encapsulation here. There's already precedence with webelement IDs", "pred": "JasonLeyba: Fixing a typo in the documentation for TargetLocator.window()"}
{"gold": "We should probably exit early if there are no items in the list.", "pred": "Fixing a bug in the push to feed task"}
{"gold": "As we can't use old names we should warn in whats new for 2.12 that this can happen.", "pred": "Fix test_missing_docstring_param_type_raises_doc.py"}
{"gold": "good job finding this package, I hope it's actively maintained", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "same changes as in hipEnvVar.cpp", "pred": "Update getDevicePCIBusNum.cpp"}
{"gold": "NULL check should be before this line", "pred": "Fix build"}
{"gold": "Seems like client.getlocalplayer is being called a lot, would it be worth it to do final Player player = client.getlocalplayer?", "pred": "Fix Wilderness Locations plugin"}
{"gold": "this change is not correct. 3-valued boolean logic requires that comparison of null to another value during intermediate operations should make the result null and not false. The place where null becomes false is at the very end of that expression. As an example, with the changed logic, this expression will return incorrect result. select * from t where not (a = 1); if a is null, the where predicate will become true which is incorrect. With the original 3-valued result, the where pred will become false and not return any result.", "pred": "Changes to fix a bug in the code that handles nulls in the comparison clause."}
{"gold": "This can already be done with `{>Detected-Locale}`, why make another way to do it?", "pred": "Fix typo in comment"}
{"gold": "These changes just match the logic update in the next method that was done previously - to assure the whole set of files is valid rather than that there is at least one that would be changed.", "pred": "fixed bug in dataset page"}
{"gold": "Why setting the status to Continue as at the end it is written OK? Status should be written only once.", "pred": "Fix typo in comment"}
{"gold": "Howdy! You'll want to do this same thing (replace `hydrateParamCache` with `proofs/bin/paramcache` and then do the copy) in `smartdeps`, too.", "pred": "fix(deps): update dependency github.com/pmezard/go-difflib to v1.0.0 (#100)"}
{"gold": "nit : Remove the extra lines", "pred": "cmd/snapshot: fix typo in comment"}
{"gold": "Instead of adding a new option, I wonder if we could decide on a port that would disable listening. For instance, port set to 0 means that we use default port 4222. Setting to -1 means that we let OS pick a random free port. We could say anything negative lower than -1 (say -2) means disabled? You don't have to update the PR for that, just wondering if that would be better or not and let's see what others think.", "pred": "fix: typo in comment"}
{"gold": "Should we add some default case if non of the above return some analyzer name? Something like `unknown analyzer`?", "pred": "Fixing the bug in the analyzer name extraction"}
{"gold": "Nvm. The original version is best... *hides from the angry rubocop*", "pred": "Fix typo in Lorem.characters"}
{"gold": "we can drop this and use the returned body above, right?", "pred": "Fixing a typo in the client example."}
{"gold": "Is echoing enabled on purpose here or it's a remainder of your tests?", "pred": "Fix typo in rvm_1_9.rb"}
{"gold": "I think this should just be worked into the next message and follow the verbosity of it.", "pred": "(maint) Fix typo in run_command"}
{"gold": "This also needs to be reverted.", "pred": "Update selectors.js"}
{"gold": "`FromCommand` seems to fit better, since with my suggestion below, all pauses will raise a signal on `needPause`. Also maybe the format `journalPauseConflict` and `journalPauseCommand` is better, since the journal isn't necessarily paused yet once we raise a pause signal.", "pred": "Fix typo in comment"}
{"gold": "This is fix from another PR #120.", "pred": "Fix typo in comment (#100)"}
{"gold": "I *think* it makes sense to try the more general dictionary (i.e standard python literals) format first. Might be other implications I haven't figured out yet. Then again, ``MultiInterface`` is pretty new so it probably doesn't matter wrt backwards compatibility.", "pred": "Fixed bug in MultiInterface"}
{"gold": "lol that variable name", "pred": "Fix typo"}
{"gold": "Upper case is reserved for our versions of top-level chains i.e. the `FORWARD` chain jumps to `cali-FORWARD`.", "pred": "Fix typo in chain names"}
{"gold": "json_handler::receive () has already started a read tx that can be used here right?", "pred": "Fix receive command"}
{"gold": "We should add the definition to `.storybook/config.js` as well.", "pred": "Update tests to use new API endpoint."}
{"gold": "I don't believe this is correct. Consider the query, \"select a from t1x where not(b = 0 and c = 0)\". When B and C are both null, both equal predicates evaluate to null, and the AND evaluates to null. The NOT then also evaluates to null. The WHERE clause should treat the result of the NOT as false. But with this fix, the result of the AND will be false, making the NOT true. There needs to be three cases here for ITM_AND: If the first operand is false, then the AND is false. If the first operand is true, then the result is the second operand. If the first operand is null, then if the second operand is false, the result is false otherwise the result is null. Similar logic needs to be added to the ITM_OR case.", "pred": "Changes to fix a bug in the code that was causing the compiler to crash."}
{"gold": "`bound/2` is generally the previous bound that we tested, except when `bound` is equal to 1. It won't break in that case since callers are not supposed to call advance on a target that is lte the current doc ID, but this might still make room for bugs?", "pred": "fix javadoc"}
{"gold": "Can we remove `raw`, `fullResult`, and `serializeFunctions`?", "pred": "docs(admin): fix typo in Admin.js"}
{"gold": "[Nit] I don't have a proposed suggestion, but security seems too generic of a name here.", "pred": "Fix typo in comment (#1005)"}
{"gold": "do we need to force a buildConfig here? I know it's in muon, but that might actually be making things harder for people", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Shouldn't need this-> here.", "pred": "Fixed a bug where the client would crash when trying to fire a ranged weapon."}
{"gold": "Why delete this?", "pred": "fix import error in mmdet/models/roi_heads/bbox_heads/convfc_bbox_head.py (#5285)"}
{"gold": "This line is here to be compatible with the current way `refs` work, right?", "pred": "fix(extend): return the extended object"}
{"gold": "Hmm, I wonder if we can safely assume all decimals should be displayed as $$...ok for now I suppose.", "pred": "Fix typo in template"}
{"gold": "Good spec :). Very clear and easy to see what it's doing.", "pred": "Fix typo in example description"}
{"gold": "Shouldn't we need to sanitize the `params[:filter]` from a defined expected values?", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Should we bite the bullet and poll for the full 5 minutes that AWS recommends? If we do that, we'll probably want to leave some kind of breadcrumb in the event log to let users know why it's taking so long to launch.", "pred": "Fix import in run_launcher.py (#4387)"}
{"gold": "Guava changed `Objects` -> `MoreObjects`", "pred": "SOLR-14286: Remove unused import"}
{"gold": "All these hand generated mocks can be deleted. I think we already moved everything to gomocks.", "pred": "Fix mocks package import (#115)"}
{"gold": "what about string/number etc _ids? this will fail.", "pred": "Fixing a bug in the Document.equals method"}
{"gold": "Looks like the test had a bug prior to this.", "pred": "Fix test"}
{"gold": "Should start with joplin://x-callback-url/. Also maybe create a helper function to check if a url is valid?", "pred": "fix(electron): fix electron app wrapper"}
{"gold": "PR works great. Just out of curiosity: why all the id changes?  ", "pred": "Fix typo in blog post"}
{"gold": "config map first value is wrong, it aims to define the \"value type\", that value will lead to an undefined behavior.", "pred": "service: fix config parser"}
{"gold": "This doesn't make sense. The thing being constructed is a blob.Bucket. \"Constructing\" the pointer is trivial.", "pred": "blob/fileblob: fix typo in comment"}
{"gold": "Outch. A configuration/parsing refactor is on the radar but this seems more pressing.", "pred": "Fix typo in test file"}
{"gold": "Unfortunately this won't work when the \"All time\" range is chosen because `memberStats.days` will be `\"all-time\"` and not a number. What you could do instead is to use `memberStats.stats` as the dependent key and use `Object.keys(memberStats.stats.total_on_date)[0]` to grab the first date in the range and build the label from there.", "pred": "Fix typo in component name"}
{"gold": "Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "pred": "Fix video trail feature spec"}
{"gold": "We need this left in as `axe.configure` is for the top-level page `axe` and we still need to configure the axe script inside the iframe as well (so both have to be configured),", "pred": "fix(test): fix test"}
{"gold": "is this rule serviceimpacting? I'm thinking it's mostly around the modeling of pageable in the swagger, thoughts?", "pred": "Fixing the validation message for RPCs"}
{"gold": "same here, replace `ks` and `kc` to something more related to Source.", "pred": "Fix typo in comment (#1010)"}
{"gold": "We should probably ask here if `dict` contains a key with the appropiate value, and leave a trace in case it doesn't, to make it easier to debug for developers.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "this should only be indented 2 spaces", "pred": "(maint) Fix typo in spec"}
{"gold": "Nit, these Err not nils should be `t.Fatalf` not error. We want to the test to stop if this error occurs.", "pred": "Fixing test"}
{"gold": "shouldn't every `Boolean` in this pr be `boolean`?", "pred": "add missing import"}
{"gold": "This `if` is not necessary", "pred": "Fixing the docstring for get_window_handles"}
{"gold": "Are you using this anywhere? (I couldn't find it.)", "pred": "Fixing the generic parameter task name (#1005)"}
{"gold": "Can be inlined", "pred": "Fix typo in step.go"}
{"gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "pred": "Fixing test"}
{"gold": "Please use `kinto.core.utils.json`", "pred": "Fix import"}
{"gold": "Since we're returning the error with the same content, we don't need to log it here; it will get bubbled up and emitted that way.", "pred": "Fix typo in comment"}
{"gold": "What happens if someone import `typing` and thus uses `@typing.final` instead?", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Better remove this dependency altogether", "pred": "Update setup.py"}
{"gold": "Could you please move the declaration to httpclient.h? I think we have a consistent pattern in declaring global variables in header files.", "pred": "fixup! use h2o_mem_clear_recycle() for h2o_socket_buffer_prototype"}
{"gold": "We will also need to add this to the spec.", "pred": "Fix typo in DataFile.java"}
{"gold": "In startEvaluator, we have the paysetHint; we should use it to preinitialize the state delta allocation. The number of transactions and the deltas are typically growing in a linear fashion, so preallocating twice as much in the array initializer would be a good idea.", "pred": "Fix typo in makeRoundCowState"}
{"gold": "we shouldn't add a bunch of static initializers 'everywhere' in the code. Probably just one would be good, during the construction of the 'RemoteWebDriver' class.", "pred": "JasonLeyba: Fixing javadoc error in By.java"}
{"gold": "Would it be possible to move the creation of the `new { Prop = (object)_value }` out of the benchmark? In the current version, the benchmark includes the cost of creating and serializing the object, while if possible it should be the cost of serialization only.", "pred": "Fix typo in JsonSourceGeneratorBenchmarks (#50060)"}
{"gold": "only dev and local", "pred": "fix(deps): update dependency symfony/webpack-encore-bundle to v1.16.2"}
{"gold": "This should not be nullable, instead it should be `->default(0);`", "pred": "Fix migration"}
{"gold": "What about `selectedColumns`? I believe it is frequently used throughout the project.", "pred": "Fix IcebergGenerics"}
{"gold": "I thought we switched the approach from a payload to boost attribute? Besides; it's not clear we need this toggle at all since the user could arrange for this behavior simply by having the new DelimitedBoost filter thing in the chain.", "pred": "fix typo"}
{"gold": "the previous code used 'export' when platform is cisco-5, presumably because 'env' cannot be used to load variables? I have no idea if that's the case but this env vs export logic is not here", "pred": "Fixing a bug in the environment_string method."}
{"gold": "I'm wondering if we need to add some type of validation here that the SecretCount != 0... Or do we think it would be valid to have a SecretCount of 0?", "pred": "fix: add missing json tag for AWSMachineSpec.CloudInit"}
{"gold": "This test is being skipped. I unskipped it, and it failed in the same way for both `slaveOk: false` and `secondaryOk: false`. I'm not sure how else to test this broken test.", "pred": "fix(test): fix linting error"}
{"gold": "I don't believe that we need a pointer to an interface for the `to` side of this since we're just assigning a value to the to field.", "pred": "Fix import path"}
{"gold": "No blank line after the docstring.", "pred": "Fix typo in repeat command"}
{"gold": "nit: move this to the group below.", "pred": "blobvar: fix import path in test"}
{"gold": "This is fine, but maybe we should change the variable name to \"bufferSize_as_uint\"? Or \"...uint32\"?", "pred": "Changes to Sort::generateTdb() to allow for a larger buffer size."}
{"gold": "Use snake_case for variable names.", "pred": "Fix spelling suggestions for solr 4.x"}
{"gold": "Obviously, don't merge this to master.", "pred": "Fixing test"}
{"gold": "Nearly there! This should assert on the output, take the result of \"start\" and \"finish\" as an example :)", "pred": "Fix typo in spec description"}
{"gold": "This loop is going to burn CPU if len(s.q) == 0. Maybe a small sleep?", "pred": "fix: typo in comment (#107)"}
{"gold": "can you give a reason why session should be contained in RegionManager?", "pred": "fix import (#1018)"}
{"gold": "You are comparing two signerIDs here, error message should be \"Signers should match\"", "pred": "Fix test"}
{"gold": "Who's acquiring this lock for writes?", "pred": "Fixing the IAMRoleCredentials struct"}
{"gold": "This throws a linter error, don't use object creation for side effects. I feel like it's kinda messed up that the errors are thrown by the constructor and not that the constructor will throw them", "pred": "Fix PublicKey.fromX docs"}
{"gold": "Should there be a `trail.topic_name` method so we don't annoy Demeter?", "pred": "Add test for Trail.completed_for"}
{"gold": "instead of passing \"None\" it would be more readable to create a constant e.g. TEAM_PUBLIC = None and then call build_package(TEAM_PUBLIC, ...)", "pred": "Added a function to build a package from a given Yaml file and install it locally."}
{"gold": "Would it make sense to include this file via composer files-autoloading instead?", "pred": "fix: remove gc_disable()"}
{"gold": "Each `ExpectedCondition` implements `java.util.Function` These are expected to be stateless. This condition will leak previous `elementText` on the second usage, which doesn't seem ideal.", "pred": "Fixing ExpectedConditions.java"}
{"gold": "Extra newline here. Thanks for moving it under the `testing` import though. This just needs to be grouped with the other imports below it.", "pred": "fix(sql): fix import path for sqlmock"}
{"gold": "Should we ignore case when doing the comparison?", "pred": "Fixing a bug in MimeBodyPart."}
{"gold": "The same `ifdef` should apply to `#include <wlr/backend/x11.h>` line 14", "pred": "backend/autocreate: fix typo in comment"}
{"gold": "We're instrumenting a static method, so there's no instance in this case. `diagnosticSource` is the first argument.", "pred": "Fix typo in comment (#1006)"}
{"gold": "I feel like this belongs in `RecipientPresenter` (which should really be `MetadataPresenter`), but I suppose having it next to requestReadReceipt makes sense as well. feel free to leave as is.", "pred": "Remove unused import"}
{"gold": "Let's go back to 1.4.0 until the release is being prepared.", "pred": "opae: update to 1.4.1"}
{"gold": "I would avoid the term \"errno\" as it implies the glibc variable. Use error_code or status or something.", "pred": "Fix typo in comment"}
{"gold": "@abhinav @kriskowal what do you think about putting the handler on `d`?", "pred": "Fix inbound.Start() to return the error from the subchannel"}
{"gold": "Why `restic.TagLists` and no `restic.TagList` ? Because I'm using `restic.TagList` here and using `restic.TagLists` is a lot of changes", "pred": "Fixing a typo in the backup options struct"}
{"gold": "An hour seems a significant amount of time to wait for within a test, does it need to be that long?", "pred": "Fix test"}
{"gold": "Nit: (newish to golang, don't hesitate to tell me I'm wrong here, but ...) I'd have written this code, just for readability: keepAlive := false return d.dial(hostName, tlsClientConfig, keepAlive) ... or even return d.dial(hostName, tlsClientConfig, false) // keepAlive=false Personally I think Golang should have included named args; I think it's one of the things python got right.", "pred": "Fix typo in comment"}
{"gold": "I don't think it would cause any version conflict, but I'd feel safer if you declared it last, so that the numerical id of the existing integrations don't change", "pred": "Add AspNetWebApi3 to the list of default instrumentations (#1076)"}
{"gold": "Can we provide some more useful actionable info here? `fmt.Sprintf(\"The certificate request could not be completed due to invalid request options: %s\", req.Status.Conditions[InvalidRequestCondition].Message)`", "pred": "Fix typo in comment"}
{"gold": "yeah, can change to 8545", "pred": "update config"}
{"gold": "As far as I can see you're not rollbacking transaction anywhere. This could potentially cause further issues(and very hard to debug ones) with not synchronized transactions between message handling. Is the transaction required in this place anyway? You seem only to be fetching data here. ack method is performing some updates so it makes sense", "pred": "fix: remove unused use statement"}
{"gold": "What's the meaning of null URIEndpointObject?", "pred": "[SCB-110] remove unused import"}
{"gold": "Why did you remove the time? It can be useful if some actions are ran in jobs?", "pred": "Fix import"}
{"gold": "File is not `goimports`-ed (from `goimports`)", "pred": "Fix import path for mega"}
{"gold": "What the reason to change imports?", "pred": "Fix import path"}
{"gold": "Nit: continuation indents are 2 indents / 4 spaces.", "pred": "HIVE-10485 : HiveClientPool should not close the client if it is not open (<NAME>, reviewed by <NAME>)"}
{"gold": "You can use `netloc.rsplit(\":\")` for that.", "pred": "Fix JMX config"}
{"gold": "nits, I don't get the point of this change  ", "pred": "Fix typo"}
{"gold": "`warningPrefix` looks the same on both platforms, we could move it up to `log.go`.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "What's the motivation behind switching to plural here? I think we want singular cc @abhinav", "pred": "fix: typo in config.go (#103)"}
{"gold": "What do you think about renaming this method `FromErrorAndCode(code Code, err error) *Status`? One of the benefits is that it will be consistent with the naming of `func FromError(err error) *Status {` which does something almost similar.", "pred": "Fix import path"}
{"gold": "we cannot state that by default the same value is used if we stopped using null - it would suggest that when you change JSON RPC and leave WS port default then they would be same.", "pred": "Fixing a typo in JsonRpcConfig.cs"}
{"gold": "I'm still not convinced dropping Chrome logs is the right thing to do, but if you insist ", "pred": "Fix chrome test"}
{"gold": "It would be helpful to include some reasoning here. With the reflection model, it is often the case that names are not available.", "pred": "Added missing @Override annotation"}
{"gold": "Instead of setting this here, why not have the flag call in the init function set `caddy.LogDestination` directly, and switch on that?", "pred": "Update main.go"}
{"gold": "This belongs under \"WordPress dependencies\".", "pred": "Fix import path for lodash"}
{"gold": "Was there an issue on `net452`?", "pred": "Fix typo in Elasticsearch5Tests (#1028)"}
{"gold": "Another option is to always write it without quotes. I always have to use SR. And why not?", "pred": "Fixing a bug in the C# writer."}
{"gold": "This should use the `merge` function added in #473 instead of introducing a new dependency", "pred": "fix(grid): add missing breakpoints"}
{"gold": "Shouldn't this say \"a binding with descriptor type VK_DESCRIPTOR_TYPE_MUTABLE_VALVE\"", "pred": "layers: Fix descriptor set validation"}
{"gold": "This variable name should probably contain `grab`", "pred": "Fix typo in tablet_v2_tool_cursor.c"}
{"gold": "Which initializer should we be using for open_aire? The one in `external_apis` or this one in `initializers`?", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "remove todo on line 28?", "pred": "fix import"}
{"gold": "clean unnecessary arguments.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Could the name of the status be confusing to users? It says the execution stopped but is it a temporary stop? Will it continue to run at some point? To me the name does not suggest a final status but a transition one. WDYT @sshardool @jakhani @djaiswal83 @aditya1105", "pred": "[SPARK-11446] [CORE] [TEST] Fix Status enum to be compatible with Python"}
{"gold": "Since we created a Provisioners directory, can we do the same with the tests, and follow the same structure as the code?", "pred": "Fixing import error"}
{"gold": "We don't need that one anymore?", "pred": "Fix comment"}
{"gold": "Since we're determining the local node's host info in the `Store()` init, we need to import the `STORE` object here. Is this OK, or should I be determining the host info earlier. (When parsing settings?)", "pred": "Fix import error in render.py"}
{"gold": "I think, there is no `#getKind()` method anymore, is it? The approach would now be testing with instanceof. Or could we return a more specific type than JavaNode now?", "pred": "Javadoc"}
{"gold": "can we localise these? not sure if we have easy access to a translator instance from `generic-provider-views`", "pred": "fix(template): fix template"}
{"gold": "This is the VID from Adafruit. Doesn't Particle have a different VID? (CC @suda).", "pred": "Update nfc.go"}
{"gold": "The function is only used once, and this body is now only 1 call with the same args (e.g. basically an alias for `vStringTruncate`), it could probably be simply removed. But if you wanna keep the naming for clarity, it also sounds reasonable.", "pred": "Fix a typo in a comment."}
{"gold": "please change to `could not connect to peer: %s`. it is not relevant to say \"from kademlia\" in a warning", "pred": "fix: kademlia: fix error message"}
{"gold": "Why need to remove this? Datetime has microseconds in fact.", "pred": "Fix a bug in SubmitJobExecutor (#1985)"}
{"gold": "What's up with this, isn't it nil? Why not use the real T value from the test function? @elcore @wmark", "pred": "Update private_key_bytes.go"}
{"gold": "this feels weird", "pred": "Fix: TCallableObject::getAssertionString()"}
{"gold": "I don't think this is the type of network we should be putting in our named networks.", "pred": "Add network name for mainnet"}
{"gold": "debug? I suspect this will be removed before merge?", "pred": "fix bug in generic_data_reader"}
{"gold": "should this be here twice?", "pred": "Fixing test"}
{"gold": "`generate_special` - a meaningless name for me. Can we provide more detailed naming?", "pred": "Add test for 1D convolution"}
{"gold": "This isn't something you introduced in your changes, but the change makes more obvious to me that this test would be better as a unit test of some kind (probably a controller test). Testing a 404 is an edge case that probably doesn't need to be tested with all components in integration.", "pred": "Fixing test"}
{"gold": "We chose `info` in the test code for obvious reasons. Changing to `finest` makes debugging harder and noisier.", "pred": "Fixing typo in comment"}
{"gold": "any reason you're assigning to the local variable 'id' too?", "pred": "Fixing a bug in BaseRemoteProxy."}
{"gold": "Need to fix this import :)", "pred": "Fix import error"}
{"gold": "sorry these tests suck so much we are working to kill them", "pred": "fix: typo in test name"}
{"gold": "Why not adjust `currentTime` to be in ms directly?", "pred": "Fix for issue #10"}
{"gold": "> restore, we find the matching spill for that restore which uses the same slot nit: Two separate sentences: separate with `.` or something besides `,`.", "pred": "Fix typo in comment."}
{"gold": "this flag not used", "pred": "fix: remove unused variable"}
{"gold": "I don't think `?? null` works here... that's to ensure PHP doesn't throw an \"undefined\" error about `$profile->expirationDate`, but now the code is assuming that `$profile->expirationDate` will be set. Might be cleaner to do: <pre> $expiration = isset($profile->expirationDate) ? $this->dateConverter->convertToDisplayDate(\"Y-m-d H:i\", $profile->expirationDate) : null; </pre> And then assigning the `$expiration` value in the return array...", "pred": "Fixing the API call for the Folio API"}
{"gold": "An ENV should be used? Are you sure that the Vue examples are built in the production mode?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Nit: this should actually always be float since we convert it before we construct the namedtuple.", "pred": "fix: add missing import"}
{"gold": "The result of `FileUtils::fileType` could be saved, instead of calling twice.", "pred": "fix rocksdb path"}
{"gold": "Can you log the exception ?", "pred": "Fix CS"}
{"gold": "since this debug message is inside a plugin code, it should use flb_plg_debug(ctx->ins, \"...\"), on this case don't need the component prefix since the API will put it there automatically", "pred": "out_http: fix missing semicolon"}
{"gold": "I also took advantage of the changes to change the Timestamps used in this notification from \"java.sql.Timestamp\" to \"com.yahoo.rdl.Timestamp\".", "pred": "remove unused import"}
{"gold": "It would be nice all these tweaks to be configurable from cmd line, with sensible defaults", "pred": "Update broker.go"}
{"gold": "Why do we need this `check_same_thead` to be false? I feel a bit uncomfortable about this.", "pred": "fixing sqlserver connection string"}
{"gold": "We should probably test with constructors which aren't in the schema, and functions which aren't constructors.", "pred": "Fixing test case."}
{"gold": "this call doesn't work doesn't? I mean there doesn't seem to be an 2 argument allocate overload. Maybe arg_logical_size should just be defaulted to the arg_alloc_size thing. Or we should just report out physical allocation size instead of logical.", "pred": "[cuda] fix cuda space"}
{"gold": "This winds up flipping the desired values. Looks like I gave you a bum steer @kevpl", "pred": "(maint) Update puppet-agent version to 1.10.1"}
{"gold": "nit: let's call our address ioAddr from now on", "pred": "fix: init logger"}
{"gold": "You're killing this \"else\" case here which currently flags an error when maxBoundDescriptorSets == 0.", "pred": "layers: Fix typo in comment"}
{"gold": "Nitpick: I'd append `_cb` to the function name here to mark it as a callback. Otherwise it looks a bit like this will do the entire job of removing null checksum refs from a hash table.", "pred": "Fix typo in comment"}
{"gold": "or you can use `filter(x => !x.isView)`", "pred": "Fix TiDBCatalog.getTable (#1010)"}
{"gold": "Instead of NewBuffer on the line above, do NewReader to avoid having to wrap later.", "pred": "fix: bootstrap data is not written to disk"}
{"gold": "No need for this, as pylint already only turns things off for this function and it's needed for the entire function.", "pred": "Fix typo in asciidoc_builder.py"}
{"gold": "extra brownie points ( overall solution ): we've currently triple-encoding the payset - 1. we encode it to calculate the block size. 2. we encode it to calculate the commit hash ( either via flat, or as Merkle tree ). 3. we encode it as a whole for the purpose of preparing the proposal ( I know that this isn't always the case, but this case happens to be on the critical path ). Caching the encoded data of the *first* block could help us repeating the process.", "pred": "[fix] block evaluator"}
{"gold": "This assertion should use the actual expanded string, so that it is clear what the message produced looks like. Right now one has to run the code to determine what the message is.", "pred": "Fixing failing test"}
{"gold": "similar here for imports, these should be consolidated (and also consolidated with the grouping below)", "pred": "fix(aws): import path for errors"}
{"gold": "Maybe there is no need to modify it. Because if you don't use the mask, it won't be initialized.", "pred": "fix bug in load_annotations (#3572)"}
{"gold": "Is there a reason we wouldn't want the trailing `%`? I'm guessing that without the trailing `%` it will just do a strict match vs a partial prefix right?", "pred": "Fix typo in SelectTraceIdsFromSpan"}
{"gold": "Please update the DMA test app in AFU repo once this gets approved.", "pred": "Fixing the include path for fpga_dma.h"}
{"gold": "There should be a migration for that as well to reflect the change on in-production instances", "pred": "fix setting value data fixture"}
{"gold": "Why does it have to be `\"\"` instead of an empty string  ", "pred": "fix: remove unused import"}
{"gold": "This is very strongly opinionated so feel free to disagree with me better, but as conditionals get more complex I like turn them into ifs instead of unlesses. What do you think?", "pred": "Fix typo in RSpec::Core::Example#run_before_each"}
{"gold": "Will this obey the seed set on Kernel?", "pred": "Fix RSpec.configuration.seed not being set"}
{"gold": "We shouldn't use the `&.` syntax here, since we expect that `executor` will never be `nil`. For the functions that _can_ be called from apply / without an executor, `&.` is still appropriate.", "pred": "(maint) Fix rubocop issues"}
{"gold": "Why the switch from period to colon?", "pred": "Added a method to SurfaceNamer."}
{"gold": "Can you just fix the warning instead? It's actually important for this to have a default of `\"\"` as the subsequent merges with `DefaultConfig()` and `fileConfig()` need to work. If you make this not `\"\"`, you break the assumptions of `Merge()`.", "pred": "Fixing a typo in the environment variable name"}
{"gold": "let us not add this", "pred": "Add missing config item"}
{"gold": "Is there a need for group as well? crun sets both.", "pred": "cgroup: fix typo in comment"}
{"gold": "@cijothomas This build-up pattern was really confusing. It looks like internally ActivityProcessor is intended to be chained but there is nothing in the abstract class that enforces it. We never set a \"Next\" or make sure that the chain is called. Probably need to do some more work in this area?", "pred": "Fix typo in test name (#1177)"}
{"gold": "`this.getFilter()` won't work on `pre('save')`. Perhaps make this `toySchema.pre(['updateOne', 'findOneAndUpdate'])`?", "pred": "Fix typo in docs"}
{"gold": "Break out tests for events into their own tests rather than placing them in other ones. That makes it easier for us to figure out where problems lie and to do a TDD-driven implementation over new APIs.", "pred": "Fix TracerTest"}
{"gold": "I think this is the only place where we use `UvShutdownReq`. Can we remove the type altogether? Or do you prefer to keep it around?", "pred": "Fix libuv transport to not write after uv_shutdown"}
{"gold": "I think we can get this to work by passing in the root ca cert fixture that upstream ca is using", "pred": "Fix typo in comment"}
{"gold": "Just occurred to me to ask: is the condor log date in localtime or UTC?", "pred": "Fix a typo in the comment."}
{"gold": "Can you remove the sculliscep varbits from here too?", "pred": "Update Varbits.java"}
{"gold": "I understand that it is a common practice in this script to add indexes this way but why don't we check index existence before adding it? I'm not very familiar with MySql but it's can be done easily in MSSQL and I'm pretty sure that there is a way to do the same here.", "pred": "Update update_5_9_2018.php"}
{"gold": "we should probably deprecate (and display a warning) the misspelled keyword arg here rather than removing it... and then add the new one. This changes a public API and will break any code that is currently using the misspelled version.", "pred": "Added a pause to the input device"}
{"gold": "Should we do something like `h2o__fatal(file, line, \"fatal error: %s, %s\\n\", mess, RSTRING_PTR(...))` here?", "pred": "fixup! mruby: use h2o_error_printf()"}
{"gold": "is this one all platforms?", "pred": "fix(monitoring): fix test"}
{"gold": "why capitals grr?", "pred": "fix: test"}
{"gold": "Surely all the above should go into `common`.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "This is an unrelated change, but was failing CI... probably introduced in master.", "pred": "Add test for unwatching a non-existent file"}
{"gold": "This piece isn't backwards compatible, but it's enough of an edge case that I think it's unlikely to be a problem.", "pred": "fixing a bug in the alignment code"}
{"gold": "MB is presumably 1024 * 1024.", "pred": "pubsub: fix import path in example"}
{"gold": "Didn't we extract this logic to a `react-features` helper?", "pred": "Remove unused import"}
{"gold": "But But, overlapping async writes will get corrupted  ", "pred": "Fix typo in comment"}
{"gold": "Not your immediate problem, but having everything depend on a package that has the config for everything else is ick. Can you move the MessagePoolConfig here and reverse the dependency?", "pred": "fix import"}
{"gold": "recently, IME_ACTION_GO action can trigger key_down and key_up event successfully, so we don't need to send enter key separately as before, otherwise will trigger it twice and cause to enter empty passcode, which cause test failed.", "pred": "Fix the test case for the enter key"}
{"gold": "It seems that you only need to do this `checkExprDepth()` inside `deduceExprType()`. So you don't have to add this check everywhere.", "pred": "fix bug"}
{"gold": "why split into two lines?", "pred": "Fixing test case"}
{"gold": "Does this need to be public or can it be package-private?", "pred": "Fix typo in PartitionSpec javadoc"}
{"gold": " Questionable way of looping through editors and calling `canEditFile` to show the edit button. Is there a better way?", "pred": "fix: use correct class name for file card"}
{"gold": "`that is null` doesn't sound very useful to me. Could we rename `that` to `target` or something less context dependent :)?", "pred": "fix IntMultimap"}
{"gold": "Just to be consistent, can we use the print function `print()` instead of the keyword. Same goes for line 437.", "pred": "Fixing status command"}
{"gold": "Having to pass in `price` and `limit` is pretty common. Do we want to have this be another argument, maybe a combined structure that can be used for every action that requires it?", "pred": "fix(chain): fix typo in comment"}
{"gold": "Could you move it after `stop`?", "pred": "fix(comics-player): fix player not working"}
{"gold": "The variable `method` seems not used. Maybe we can remove the parameter `bodyParamName` and generate it by invoking `ParamUtils.generateBodyParameterName(method)` ?", "pred": "fix: \u4fee\u590dbody\u53c2\u6570\u751f\u6210\u7c7b\u540d\u9519\u8bef\u7684\u95ee\u9898"}
{"gold": "I don't think this should be here?", "pred": "SOLR-15089: Fix import order"}
{"gold": "Either I'm missing something or specs actors should remove this call cc @anorth", "pred": "fix: remove unused syscalls interface"}
{"gold": "Please undo all these changes as they are white-space only.", "pred": "Fixing a bug in the reporting code"}
{"gold": "You forgot an optimization? `$countries = CountryField::FORMAT_ISO_3166_ALPHA3 === $countryCodeFormat ? Countries::getAlpha3Names() : $countriesAlpha2;`", "pred": "bug #4066 Fix country field in Firefox (javiereguiluz)"}
{"gold": "Shouldn't this also return the current value specified by the user? At least that's what the docstring says and what the previous version did.", "pred": "fix: use the correct type for the version"}
{"gold": "> the time range the listen search the time range of the listen search?", "pred": "Fixing docstring"}
{"gold": "This snprintf, etc. needs to all be inside the DO_ONCE: all this overhead happening on every single decode is likely a huge performance hit.", "pred": "AVX-512: Fix typo in error message"}
{"gold": "would call it connect_retries", "pred": "Fix typo in README.md"}
{"gold": "Why are we using `repr`?", "pred": "[SPARK-35653][PYTHON][TESTS] Fix DataFrameTest.test_iteritems"}
{"gold": "I use the same zms instance to check authentication in swagger endpoints. Same thing in ZTS.", "pred": "ZMSBinder: fix typo in class name"}
{"gold": "Consider consolidating the common code in a common setup method in tests?", "pred": "[PDI-14065] - JavaProcessJobTest fails on Windows"}
{"gold": "q: do you need to run the annotation processor over EthProtocolConfiguration prior to writing this file? (i.e.to ensure ImmutableEthProtcolConfiguration exists)? Does Auto-import etc. still work in the IDE?", "pred": "Fix import order"}
{"gold": "What is the motivation for switching from `Schema` to `DiscoveryField` everywhere?", "pred": "Fixing a bug in the SchemaTypeTable"}
{"gold": "What happens when ECS Init/whatever's starting the Agent mounts some other directory as Agent's data directory (`-v /tmp:/data`) sets `ECS_HOST_DATA_DIR` to `\"/var/lib/ecs\"` It doesn't seem like a strong enough abstraction to be dependent on Agent configuration options to expect `ECS_HOST_DATA_DIR` to be the same as whatever's being mounted as `/data` on the host. My main concern is the late-binding/asynchronous failures this could lead to if the wrong host mount was specified. Wondering if there are better alternatives here. Can we at the very least inspect the Agent container and check if `ECS_HOST_DATA_DIR` is mounted? If the answer is that we'll revisit the validation here at some latter stage, that's fine too. But, I want us to be aware of potential failures here.", "pred": "Fix typo in comment"}
{"gold": "btw that's obviously out of scope of this PR but since i noticed this line here it reminded me a thing: on some systems i've noticed the font didn't had those characters, so it was just a square or empty space and sometimes they're just a bit shifted in position (if font doesn't have them and using from fallback font which have incompatible dimensions of characters) how do you think is it worth creating an issue to discuss/address it or it could just waste time on bikeshedding?", "pred": "Fix typo in version.c"}
{"gold": "alias is not needed", "pred": "fix: remove unused import"}
{"gold": "Do we need to include the path?", "pred": "fix typo"}
{"gold": "During our zoom and working on this, I said that I believe it was set to 64MB, not 32MB, but the diff shows that I was wrong. So we could change it back to 32MB.", "pred": "fix(js): fix monitor stream"}
{"gold": "Here I thought you always insisted on ` log \"github.com/Sirupsen/logrus\" ` :) I might do a PR that just globally switches that out wherever we have log.", "pred": "Fixing import path"}
{"gold": "We maintain that each (logical) key generation has the same set of device keys, so no need to plumb through `keyGen`.", "pred": "kbfs/libkbfs: add a comment about the key metadata interface"}
{"gold": "Please use `from unittest import mock` instead of this package.", "pred": "Update tox requirement from <3 to <4"}
{"gold": "Should be `if (this.options && this.options.cursor) {`. Options may be undefined. Also, going forward, mongoose will always use curly braces around if blocks.", "pred": "fix(aggregate): fix aggregate.exec() to return a promise"}
{"gold": "This should remain as mailrelay.blackducksoftware.com for staging. Not sure this will be valid, but it shouldn't go through the production mail server.", "pred": "Fixing the mailer config"}
{"gold": "Maybe we should have a Debug.Assert for when `Slab != null` to ensure that we are always returning the block (in our tests at least).", "pred": "Fix typo in comment"}
{"gold": "Okay sorry about this I was really confused on how to support uncontrolled in this case, so what we want to do is apply `defaultValue` when `props.value` is falsy but not undefined, right? In the case of us seeing it is controlled (value & onChange present) we apply defaultValue to `props.value` (and delete props.defaultValue) In the case of uncontrolled we shouldn't enter this branch at all and go for full native dom behavior", "pred": "Fix typo in options.vnode"}
{"gold": "`lodash` shouldn't be grouped under WordPress dependencies", "pred": "Fix import"}
{"gold": "The latest yaml in openebs/master has changed to name=admission-webhook. cc: @prateekpandey14", "pred": "fix(k8s): fix label selector for cstor-pool (#2826)"}
{"gold": "using **an** Amazon Simple... Simple Notification **Service** (singular)", "pred": "Update sns-ruby-example-send-message.rb"}
{"gold": "Probably don't intend for this `1 ||` to still be here", "pred": "Fixing a bug in the test."}
{"gold": "Looks like this is failing to compile on Windows (VS 2015 I think).", "pred": "layers: Fix descriptor set layout validation"}
{"gold": "nit: call the arg something simple like `f` to avoid repeating \"beforeQuery\".", "pred": "Fix typo in comment"}
{"gold": "do you think this should be `osd/auth` as a pkg to make it more unique and void conflicts with other `auth` packages?", "pred": "fix: add missing import"}
{"gold": "Why are you passing out the Message?", "pred": "Fixing a typo in the comment"}
{"gold": "Yikes, this was a bug :grimacing:", "pred": "Fix typo in comment (#1109)"}
{"gold": "I am not sure which one of these is considered idiomatic go... maybe @azdagron has an opinion here? /me prefers the verb since it's shorter. I guess I don't care _too_ much, but it would be good to get some general agreement so we are all following the same conventions", "pred": "Fix typo in SPIFFE Workload API example (#1277)"}
{"gold": "Please check this for error and emit appropriate debugging information. I know this was pre-existing code, but we just have to fix things like this as we go.", "pred": "fix: typo in sequelpro cmd"}
{"gold": "This seems unrelated, should be a separate PR.", "pred": "Fix typo in comment"}
{"gold": "Never use relative includes, prefer full path", "pred": "Update mt2203_batch_impl.cpp"}
{"gold": "This should fit on the line above without going over the 79-char limit, no?", "pred": "Fix test_argument.py"}
{"gold": "Is this related to the other contents of this pull request?", "pred": "Fix video controller spec"}
{"gold": "Should this be `*string`?", "pred": "fix: add missing workload opts (#1188)"}
{"gold": "In the old code here there was no Source Selector, but CreateDefaultProfile will specify a Source Selector of `\"\"`. Is that equivalent?", "pred": "Fix etcd connection interruption test"}
{"gold": "We should pick this across for all our deprecation specs", "pred": "Fix deprecation warning for RSpec.configuration.reporter.deprecation"}
{"gold": "Longer term, I think it could be valuable to move this to cluster-api, and then other repos could take advantage of this as well.", "pred": "fix: remove unused flag"}
{"gold": "Is this a related change?", "pred": "test/e2e: fix externalClient test"}
{"gold": "Given that this is repeated, can we do it outside here and the Create call, what do you think about moving it outside?", "pred": "Update machine_controller_manager_tags.go"}
{"gold": "Changing `prop`=>`col` by reference?   I think you can prepare map `prop`=>`col` in L51.", "pred": "Fix undo/redo for multiple changes"}
{"gold": "I hate to ask, but can we make this flag shorter so it lines up? :(", "pred": "Fix typo in usage string"}
{"gold": "Note to reviewers: latent, dedup import", "pred": "fix: import path for apiextensions-apiserver"}
{"gold": "Seems this func is no more needed after your refactoring.", "pred": "fix: external connectivity setup"}
{"gold": "already added (see several rows below)", "pred": "Add Scala persistent to MemoryUsage"}
{"gold": "nit: a switch perhaps?", "pred": "Fix typo in comment"}
{"gold": "Great you caught this. Super critical to not retry these errors.", "pred": "Fix typo in workflow size checker (#4358)"}
{"gold": "Just a little change to make the var effectively final, which is clearer.", "pred": "Fix typo in comment"}
{"gold": "Using `\"{}\".format(...)` is a bit beside the point...  ", "pred": "Fix typo in flowdetails"}
{"gold": "I think these should remain as they are.", "pred": "fix test"}
{"gold": "Let's just call this PERF_PACKAGES and have them in the same format as WINDOWS/SLES/DEBIAN_PACKAGES constants - since it is only a single package and, as written, you'd have to update the code to add more package names anyway. Might as well be consistent with the rest of the code.", "pred": "(maint) Update root keys script URL"}
{"gold": "We don't have a `getPluginIDfromTaskIndex` function? I think it should be implemented in Globals/Plugins.h / .cpp", "pred": "Fix for #100"}
{"gold": "@shalinmangar If lazy field loading isn't enabled, I don't think this actually changes the behavior of `SolrIndexSearcher`, since it was previously ignoring the fields list anyway. What it _should_ do is allow certain distributed queries, like the ones in `DistribJoinFromCollectionTest`, to co-exist with `SolrIndexSearcher#doc()` respecting the `fields` set instead of just discarding it.", "pred": "SOLR-10056: Fix QueryComponent to not add score to the fl if it is already present"}
{"gold": "Should we be using version 3 now?", "pred": "Fix typo in template (#1114)"}
{"gold": "Would be better to throw a more specific exception, but for now it will do.", "pred": "Fix PluginListFactory"}
{"gold": "We should not replace Wei with a type that is shared across multiple units. We need this as `Wei` for type and unit safety.", "pred": "Fix import"}
{"gold": "I'm pretty sure this should emit a util.Warning*(), since we're skipping by here and never hitting anything that will give them a warning about what's happened.", "pred": "Fix typo in comment"}
{"gold": "This function isn't useful? it's just a clone of GetParserWithBuiltins?", "pred": "Fix typo in comment"}
{"gold": "I'm not sure if the boolean flags should always contain `is`, also I generally hate too long names... ;) we already know this is a section for circuit breakers, so the name doesn't have to repeat all of it. How about `cpuBreakerEnabled`, `memoryBreakerEnabled` etc?", "pred": "SOLR-2106: Add missing default value for SolrConfig.queryResultCacheConfig"}
{"gold": "Before we start the replacing equality deletes with position deletes, I think we need to refactor the RewriteFiles API to adjust more cases: 1. Rewrite data files and remove all the delete rows. The files to delete will be a set of data files and a set of delete files, and the files to add will be a set of data files. 2. Replace equality deletes with position deletes, the files to delete will be a set of equality delete files (we will need to ensure that all delete files are equality delete files ? ) , the files to add will be a set of position delete files. 3. Merging small delete files into a bigger delete files. The files to delete will be a set of equality/position delete files, the files to add will be a set of equality/position delete files.", "pred": "Fix javadoc"}
{"gold": "Layout/TrailingWhitespace: Trailing whitespace detected.", "pred": "add a helper for the application title"}
{"gold": "Is it possible that the shortcuts list is empty?", "pred": "Fix NPE in LibraryManager"}
{"gold": "This just changes the error message from `unable to save snapshot: [...] context canceled` to `canceled`.", "pred": "Fix typo in backup.go"}
{"gold": "maybe it's better to remove HttpHeaders.CONTENT_LENGTH after the loop", "pred": "[RESTEASY-1217] Fixing a typo in the javadoc"}
{"gold": "Very cool. We are now collecting the fruits after your length implementation!", "pred": "Fix List.dropRight"}
{"gold": "Is this the same copy of the rules file from above? If so, can just use the copy from above, and this can be dropped.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Please break this into multiple lines.", "pred": "Fix typo in comment"}
{"gold": "Shouldn't this new line replace the few lines above?", "pred": "Fix typo in comment (#1037)"}
{"gold": "Perhaps this belongs in universe?", "pred": "fix: now option is not a transformation"}
{"gold": "there is a `kEpsilon` you can use directly.", "pred": "Fixing a bug in the serial tree learner."}
{"gold": "This should be grouped with the below imports, and the two separate groups of imports below should likely also be grouped together", "pred": "Fix import path for wait package"}
{"gold": "It looks like this error_code field is used to return a string to the caller, not just a const input string to be consumed as in the rest of this PR? If so, my personal preference would be to leave it as a std::string* instead of a reference; I don't know offhand what the VL coding style dictates.", "pred": "layers: Fix typo in error message"}
{"gold": "If return by value, then why bother to make it `static`?", "pred": "Fix the bug of partPrefix (#1180)"}
{"gold": "You'll need to add docs for the argument, see e.g. the `debug_log_filter` docstring above.", "pred": "qutebrowser: Add a command to open the qutebrowser homepage"}
{"gold": "`sdktrace` or `tracesdk`, pick one.", "pred": "fix: import path for otel (#105)"}
{"gold": "can we return null instead?", "pred": "Fixing the content magic trait"}
{"gold": "You mean XXX and \"we should\" or \"NYI\" or sthg. Maybe put it on the ifdef line.", "pred": "Fix typo in test case."}
{"gold": "minor: can be in-lined in return", "pred": "Fix typo in comment"}
{"gold": "why the additional \"\\n\"?", "pred": "Fix deprecation formatter spec"}
{"gold": "This seems to be a big omission. If the first buffer reports an error, stream seems to just discard it.", "pred": "fix(execute): fix streamTable.Do to return error"}
{"gold": "Maybe move this one down too?", "pred": "Fix typo in comment"}
{"gold": "We do this in lots of places I'm starting to notice...typically you'd avoid taking concrete dependencies, but we also avoid package dependencies as well which makes sense (i.e. not using an IoC, etc.). Any reason we don't implement some form of poor-man's DI and/or a simple factory instead of new-ing things up everywhere. This may be a simple example (as I'm guessing this is likely the only place this is ever or ever will be used), but separating them doesn't take any more time/effort either really.", "pred": "Fix AsyncLocalScopeManager"}
{"gold": "What if formatPrefix doesn't include a space? Will the resulting error have e.Error() stuck at the end without any space?", "pred": "Fix typo in comment"}
{"gold": "that doesn't say a lot to me. Can you please be more specific on the function of pushsync?", "pred": "fix typo in comment"}
{"gold": "> subpass uses a depth/stencil attachment in renderPass with a read-only layout for the depth aspect Assume - VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL - VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL count as well seems there is a `NormalizeDepthImageLayout` for this", "pred": "layers: Fix typo in ValidatePipelineUnlocked"}
{"gold": "This shouldn't be altered, you probably meant to update `AREA_PAGE_DASHBOARD_ALL_TRAFFIC` further below :)", "pred": "Update widget areas."}
{"gold": "what does this change do exactly?", "pred": "Fix typo in docstring"}
{"gold": "What's the purpose of this `backgroundCtx` field?", "pred": "Fix typo in comment"}
{"gold": "non contract incarnation", "pred": "Fix typo in comment"}
{"gold": "I would recommend to leave out `None` because None is already the default.", "pred": "Fixing error handler"}
{"gold": "Should the \"bad hello message\" case above also disconnect?", "pred": "fix: typo in comment"}
{"gold": "Shouldn't this be in the child and not in the base plugin? Wouldn't having it here enable all derived plugins at once?", "pred": "Fix typo in comment"}
{"gold": "Should probably say REGEX or PATTERN rather than string.", "pred": "Fix typo in rspec/core/rake_task.rb"}
{"gold": "I felt we don't need to set it that strict, like if somehow pubsub happens to allow extra 20 bytes for metadata, this test won't work. We would suggest to use 11MB instead.", "pred": "Fix typo in comment (#1078)"}
{"gold": "In theory `isset($metadata['associationType'])` is `false` if the linked field is not an association field, isn't?", "pred": "[DoctrineBridge] fixed typo in comment"}
{"gold": "@tute the only thing I needed to enable this like as `password` is not in default flow anymore I think.", "pred": "Update doorkeeper.rb"}
{"gold": "nit: to be consistent with `self.members`, please move this up one line, so that it's closer to `allUsers`? You will need to update your test reference.", "pred": "Fixing the test case for the IamPolicyMember."}
{"gold": "we might as well just access `config.gClientVerbose` directly here. If any other options are passed to `gclientSync` or `gclientRunhooks` then the verbose option will be lost the way it's used now", "pred": "fix: gclient run"}
{"gold": "Change the key to `default_tab` instead and I'll merge this", "pred": "Fix typo in log settings"}
{"gold": "we still can end up passing a blank org_id to the scope method if for any reason the params is not present...", "pred": "Fixing the org admin template list"}
{"gold": "I think yes, this makes sense to expose this. +1", "pred": "[bugfix] SaxonXPathRuleQuery: fixed bug in XPathRuleQuery."}
{"gold": "let us put the sample yaml snippet i.e. maya api server deployment that makes use of this env & value", "pred": "fix(localpv): update localpv storageclass"}
{"gold": "What changed to cause this?", "pred": "Add test for ITRabbitMQCollector"}
{"gold": "Repeating big interface in many places shows smtg is wrong with design", "pred": "Fixing tests"}
{"gold": "Inheriting from `AccountsController` to get access to the `redirect_if_disabled` filter.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Simple Storage **Service**", "pred": "Update copy_object_between_buckets.rb"}
{"gold": "Enter at the end of the file! :-D (and at the end of lines ;-) )", "pred": "Update from Subversion r706887"}
{"gold": "Put a comma after the last parameter of a multiline method call.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Don't you want to place this check before you add `succ` to `newSucc`?", "pred": "Fix a bug in the planner"}
{"gold": "Commit 676eeeab10884456a5f70ce708a8aa5116ecbaf7 contains a lot of unrelated code style changes. Please get rid of these.", "pred": "Remove unused import"}
{"gold": "Well this sucks, I wish you'd mentioned you were using a private API, perhaps we could have made a public one with better guarantees before `0.12.6` was released.", "pred": "Fix bokeh renderer"}
{"gold": "Consider instead moving this into an _test file so it's public but only usable in tests.", "pred": "Fix typo in comment (#104)"}
{"gold": "Any reason why we want to remove this code ? It helps debugging AWS ebs attach issues. Ideally yes a library should have minimal logging, but there is no way we can track long running AWS attach calls.", "pred": "Fix typo in ec2Ops.waitAttachmentStatus"}
{"gold": "nit: indentation doesn't match (unfortunately i don't know of a way to automatically lint these sql statements with how we're using them currently)", "pred": "fix: fix typo in experiment store (#100)"}
{"gold": "Should we remove the other `setup_profiler` call site and just let this be the one call site for it, since, AFAIK, the other one is no longer necessary with this? Also, can we make `setup_profiler` private?", "pred": "Fix typo in comment"}
{"gold": "Are there any other templates where this command needs to be added, or were those issues specific to storage requiring us to enable a new command group?", "pred": "fix(cmd): remove hidden flag from buildenv show"}
{"gold": "perhaps file can be removed altogether (trying to avoid an empty package for these build tags)", "pred": "seccomp: fix build on non-linux"}
{"gold": "NULL change, could you move that out too?", "pred": "Fix a bug in get_module_handle_64()"}
{"gold": "A brief explanation about this func is required.", "pred": "Fixing a typo in the comment"}
{"gold": "Could you add description for below static function?", "pred": "Fix typo in MergedCellsCollection.js"}
{"gold": "Since this is only counting the failed attempts, can you call it failedAttemptsCount or retryCount instead of attemptsCount?", "pred": "fix(services/pipeline): fix a bug in catchup service"}
{"gold": "I don't think this will work.", "pred": "Fixing typo in setup.py"}
{"gold": "Since http2 is coming do we want to call this something more specific?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "I don't think we want to revert the accessibility issues the tool caught, do we?", "pred": "Add aria-label to search bar"}
{"gold": "I prefer naming this rateLimitedRemoteHost This can be local host but reads remote Host Is Non Local.", "pred": "Fix typo in comment"}
{"gold": "Hmm I think I might've messed up this condition here... Need to look more at it", "pred": "Fix error message for invalid type passed to createElement"}
{"gold": "This also makes the exception to be raised on non-dict falsy values which I think was expected.", "pred": "Fix typo in docstring"}
{"gold": "Is this correct? The auto indexing behavior caused problems fixed in a recently merged PR...", "pred": "Added a __repr__ method to Dataset"}
{"gold": "Hmm, didn't we just find out that 1.6 *does NOT* work? We should bump the minimum as well.", "pred": "Bump cryptography from 1.6 to 3.3.2"}
{"gold": "Will calling `abort()` cause problems for our test suite?", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "for my own edificaton, what's this?", "pred": "Fix #1285: AST_FATAL is not a valid return value for pass_expr"}
{"gold": "make it harmless to commit ws == nil", "pred": "fix: remove unused code"}
{"gold": "Hmmmm, I'm not sure I like these becoming a replacement any build rule has access to. It seems like if it were used in an actual build rule it would only be doing bad things. Can we just use `filepath.Abs` on the returned path in run_step.go?", "pred": "Fixing a bug in the build script"}
{"gold": "That's actually not as bad as I thought it was going to be.", "pred": "Fix typo in echo example"}
{"gold": "Hmm, I'm surprised if we don't already have a \"find all unpublished datasets\" method but I don't really know. Maybe @scolapasta knows.", "pred": "fixing a bug in the dataset service bean"}
{"gold": "The checks in this file are disabled by default since they are meant for Python 3 porting, and this one does not have to do with Python 3 porting at all.", "pred": "Fix typo in comment"}
{"gold": "I would change \"should be sent\" to \"must be received\".", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Please put it in following way : `// DeleteStoragePool receives StoragePoolClaim delete event and calls the required handlers to delete other pool related resources.`", "pred": "fix(spc): fix import path for storagepool package"}
{"gold": "It's better to use servicecomb now.", "pred": "[SCB-1005] add constant for rest client"}
{"gold": "Make the flag derived default available in the readiness controller", "pred": "Fix typo in comment"}
{"gold": "Confirmed this test fails when the fix is reverted ", "pred": "Fix test"}
{"gold": "This method is still possible insecure as it may archive not only logs files. I suggest to filter file names to ensure that they start with `.mysterium-log*`.", "pred": "Fix typo in comment"}
{"gold": "DCN should not be able to use `init_cfg`.", "pred": "fix: add missing import (#6635)"}
{"gold": "It is a bit weird to see a message like \"something must be valid\".", "pred": "Fixing typo in OpenTracing shim (#1066)"}
{"gold": "Again. This is part of the start up of the server, and the diagnostics are helpful.", "pred": "Fix typo in Standalone.java"}
{"gold": "I think you need a `,` at the end of the line?", "pred": "Fix typo in R spec"}
{"gold": "Please avoid wildcard imports.", "pred": "fix(engine): remove unused import"}
{"gold": "Did we consider making the timeout an argument to the build task? Would amke it easer to configure in the future: change a build property vs. rebuilding the DLL.", "pred": "Fixing the build break"}
{"gold": "dumb question: the commit message talks about dual-stack support but it seems that in a dual-stack cluster, Egress will only support the IPv4 address family?", "pred": "Fix typo in comment"}
{"gold": "Do you want to cherry-pick these separately and get them merged already or keep it in here? Both is fine with me!", "pred": "Fix typo in TLSLayer"}
{"gold": "Hmm what are these magical constant numbers? And why does this change mean they should increase?", "pred": "LUCENE-8518: fix test"}
{"gold": "This change shouldn't be included with this push. Shouldn't push version changes with a pull-request.", "pred": "Bump version to 2.8.0"}
{"gold": "nit: let's move this right under where we create the `responseWriter`, before `h.callHandler`", "pred": "Fix typo in comment (#130)"}
{"gold": "The way it was implemented, needed to pass the template values. Please check whether we want this.", "pred": "Fix mdb_store::upgrade_v14_to_v15"}
{"gold": "Just FYI we need this to align with `builtin.EpochDurationSeconds` from specs-actors or the state machine computations will be off. We'll need to turn this into a config option and follow the same monkey patching paths as the min miner size, seal proof types etc. The EpochDurationSeconds is currently a `const` so can't do it yet tho.", "pred": "fix(cmd): fix typo in daemon command"}
{"gold": "Is this import needed?", "pred": "Fixing import error"}
{"gold": "Dashboard stories also need to have the default padding.", "pred": "Fix dashboard storybook"}
{"gold": "Is there a reason why we wouldn't use this as the default?", "pred": "Fix typo in javadoc"}
{"gold": "if there is an tag of the same name?", "pred": "fix(graph): fix the bug that create edge failed when the edge name is empty (#1110)"}
{"gold": "I'd add `// +build go1.10` to prevent from accidentally compiling with older Go.", "pred": "Remove unused import"}
{"gold": "Not sure how this import relates to the PR but seems like a good idea anyway...", "pred": "Removed unused imports"}
{"gold": "Hmm this is strange, why should the SettingsStruct import something from `WebServer` ? If that's really needed, then we must move stuff as it makes no sense to have some code related to viewing things included in a settings struct. It should be the other way around.", "pred": "Fix include path"}
{"gold": "nit: Space between these lines.", "pred": "Update Startup.cs"}
{"gold": "Why aggregator should have this translator? It's Selenium specifics for now...", "pred": "Fixing a typo in the docstring"}
{"gold": "I don't understand why this function is needed ? Can't you just pass the information when the `DocComparator` is created in the SortField ?", "pred": "LUCENE-3575: Fix javadocs"}
{"gold": "This rescue is repeated exactly in `app/jobs/mailchimp_removal_job.rb`. Could we extract a method and pull it up into `MailChimpJob` for reuse?", "pred": "Fix mailchimp fulfillment job"}
{"gold": "It's not directly related to this PR, but it would be nice to flow the original error as we're going to print that if the promise is rejected and it'll be more informative than the vague `Network request failed`. Also, I'm not a js dev, so maybe I'm wrong, but throwing a TypeError feels a bit odd.", "pred": "fix(fetch): fix fetch timeout"}
{"gold": "Can we print a debug message when this is used? Since it's a debugging variable, I wouldn't want users to have issues because of a left-over env.", "pred": "Fix typo in xwayland.c"}
{"gold": "Should we have an avatar, truncate, etc examples, too?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "could you add this to `docs/source/reference/indexing.rst` ?", "pred": "BUG: Fix typo in pandas.core.indexes.base (#21595)"}
{"gold": "Why the change from rdkit.six to six?", "pred": "fixing import"}
{"gold": "Looking good, let's just move this inside the `if` to avoid doing the extra work if we don't need it.", "pred": "Fixing the pie graph type"}
{"gold": "I think we should change this to an instanceOf check for MongoBatchReExecutionError", "pred": "fix(test): fix bulk test"}
{"gold": "Required by the libcalico-go changes", "pred": "Fix typo in profile decoder"}
{"gold": "Explain why we don't reuse the corresponding server error locally?", "pred": "MutableBareRootMetadata: add a comment"}
{"gold": "@JayanthyChengan This change is still missing (and should be last one!): change this line to call getDateToDisplayOnCard(), that way the logic is in only one place (that method).", "pred": "SOLR-1007: Fixing the dateToDisplayOnCard field in the SolrSearchResult class"}
{"gold": "What was wrong with more concrete error?", "pred": "fix typo"}
{"gold": "can you replace the tabs with 2 spaces please to match the rest of the project?", "pred": "Update search.php"}
{"gold": "Why are we adding it to the integral function?", "pred": "fix(flux): fix typo in integral.go"}
{"gold": "Same for this file", "pred": "xfrm: fix typo in comment"}
{"gold": "Looks good! But why it's still a out parameter? We can refactor the whole tree because it's internal?", "pred": "Fix #2242 - FileAppender.Flush() does not flush all appenders"}
{"gold": "probably better to use `wlr_seat_keyboard_end_grab()`.", "pred": "Fix seat focus"}
{"gold": "Such a large test impact for such a little 3 line change ;)", "pred": "Fix typo in TransactionPool"}
{"gold": "Is the `cascade` necessary? It should work also without the casdade, because Payments are always already persisted when use cases with them. If it doesn't work, please tell me the reason. It is as same in Transport.", "pred": "fix: fix payment entity"}
{"gold": "This is not very short. I'm not sure sure if there's a system for assigning shortcodes to issues.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "We should probably prefix this with `acme-http01` to bring it in-line with other annotations, e.g. `certmanager.k8s.io/acme-http01-edit-in-place`. It's quite wordy, but it *is* more specific (and I'd hope more obvious to the user what it is for?)", "pred": "Fix typo in comment"}
{"gold": "No need to add this file change for this PR. Please remove it.", "pred": "Fixing a typo in the javadoc"}
{"gold": "this extra dot at the end is causing a couple tests to fail on Travis", "pred": "Fix typo in DontImportJavaLangRule"}
{"gold": "Did you try using `global` with a regular integer ?", "pred": "fixing tshark command"}
{"gold": "windows size might be off", "pred": "Fix typo in comment"}
{"gold": "This should still be guarded with an `#ifdef` since the DataMan code will only be supported for shared lib builds.", "pred": "fixing a typo in the comment"}
{"gold": "thanks for cleaning up these old length checks  ", "pred": "Fixing the coversheet for plans with multiple creators"}
{"gold": "What will be logged when the `Input.Namespace` was not specified?", "pred": "fix: typo in comment"}
{"gold": "I wouldn't expose this until the feature is ready. We are most likely to cut releases while still in development", "pred": "Fix typo in PMDParameters"}
{"gold": "I don't think we should pull aria-query into axe-core at this point. There's a much simpler fix for this. Please don't overthink it.", "pred": "fix(imports): add missing imports"}
{"gold": "@ejsmith What if instead of making these two methods public we made it a partial class and moved them to a separate file so that file could be part of the include list? I bring it up just because I don't think it is a very nice API that was ever intended to be public? I think they are only called by a couple of other very internal-y spots. /cc @reyang", "pred": "Fixing the build (#100)"}
{"gold": "would be good to turn these into constants.", "pred": "Fixing a bug in the SLA trigger."}
{"gold": "Seems like it should be `generated by Wire` here and in the SUT?", "pred": "fix: gowire: fix typo in generated code"}
{"gold": "I know the main cases show up in the daemon test already but a little bit more unit test coverage would be nice and probably not too annoying to set up. Ideas: 1. Verify that the string \"no duplicates\" is in the LastDuplicate field when we propose a new deal. 2. Verify that proposing a duplicate deal fails when the duplicates boolean is set false. 3. Start out in a state with more than 1 duplicates. Verify that the LastDuplicate field is set to the last duplicate when we propose with a true duplicates bool.", "pred": "fix: test"}
{"gold": "`Timeout.Infinite` is actually `-1`. Here the correct message can be taken from Line:67.", "pred": "Fix typo in comment (#2059)"}
{"gold": "I think we need `#if !SILVERLIGHT` here and at the test.", "pred": "Fix missing using statement"}
{"gold": "Can you change this import to the apache dependency? I didn't even know that jgit contains such a method...", "pred": "Remove unused import"}
{"gold": "Four strings in a row makes me nervous, can we use an arguments struct instead? Or reuse the struct I recommend in the reconciler.", "pred": "fix: remove extra space"}
{"gold": "should work with no options, if my suggestion is accepted. JSON is the one that gets weird since a JSON object appended to a JSON object isn't valid JSON.", "pred": "Fix typo in help text."}
{"gold": "I presume this isn't some special term...", "pred": "Fix typo in uploadxs help text"}
{"gold": "Did you mean to return here? ;) You'll also need to add an `incomplete` message to the rule metadata.", "pred": "Fixing a bug in pAsHeadingEvaluate"}
{"gold": "Why are we calling these as annotations? I guess this is an old type that we are re-using. But lets make it a point to avoid once we feel that this design/code is not good.", "pred": "fix(jiva): fix the import path for JivaAnnotations"}
{"gold": "`invocation.getInvocationStageTrace().startSend()` is inside `RestClientSender.send`", "pred": "[Dubbo-2988] Fix typo in RestClientSenderFilter.java (#2989)"}
{"gold": "use \"actionHash\" to be consistent with other places", "pred": "fix: typo in comment (#1048)"}
{"gold": "Can we derive `Class<E>` by looking at one of the label choices, if at least one is always provided? Given these are immutable, a real-world case for an empty enumerations eludes me.", "pred": "Remove unused import"}
{"gold": "I am now confused here, the spec says > If format is VK_FORMAT_UNDEFINED, all members of samplerYcbcrConversionComponents must be the identity swizzle. The spec also says > samplerYcbcrConversionComponents is the component swizzle that **should** be used in VkSamplerYcbcrConversionCreateInfo. so you are allowed to set the swizzle to anything I want, so I guess this is valid usage here... but now I am more curious if I have an external format does it not have to follow any component swizzle rules and can be anything regardless of the `ycbcrModel`? (I guess really a question for @critsec and is not a blocking concern for the scope of this PR)", "pred": "layers: Add test for AndroidHardwareBufferFormatProperties2"}
{"gold": "I'd say the error should be an error, not instructions to the user. So error would be something like \"site should be running and is not\"", "pred": "Fix typo in sequelpro.go (#188)"}
{"gold": "Thanks for this PR @pinzon !   Rather than resetting the `sms_messages` list, can we fix the assertion in line 902 - rather than asserting `len` equality, we should assert that all expected messages are contained in the list. (In this case the phone numbers should be reasonably random, and ideally we should not have duplicates across different tests). We're planning to introduce test parallelization in the near future, and this will help us avoiding undesired side-effects.   Thanks", "pred": "Fixing the test"}
{"gold": "Some weird blocks formation again.", "pred": "fix: remove unused import"}
{"gold": "This is worrisome.", "pred": "Fix typo in test name"}
{"gold": "nit try rephrasing to something like \" AutoFilesystemTrimUsage returns the volume usage and trimmable space of locally mounted pxd volumes\"", "pred": "Fix typo in comment"}
{"gold": "currently the puppet-agent package doesn't symlink files into /opt/puppetlabs/bin. Also many puppet acceptance tests that execute on Unix assume puppetbindir is a single directory (windows doesn't have this issue). So I think if we want to unblock testing, this should just be changed to `h['puppetbindir'] = '/opt/puppetlabs/puppet/bin`", "pred": "(maint) Fix puppetserver service name"}
{"gold": "any point in keeping this here ?", "pred": "Fixing typo in config adapter"}
{"gold": "I don't think we need this check. Instead `Entries.merge` should check that its argument is correctly sorted (in addition to the existing pre/post check on the method receiver).", "pred": "Fixing merge function"}
{"gold": "This is not really good to mix different code bases. @TheMarex I understand the point about placing code into cpp file, but we still need to move templated version into an impl header, remove references to offline code here and keep template instantiations in a cpp file to avoid rebuild. So offline code could instantiate own implementations using private impl headers. Otherwise we again make wrong dependencies into OSRM code and block changes in separate projects.", "pred": "Fix include"}
{"gold": "Then, where is it removed?", "pred": "Fixed compilation error in PDPSimpleListener"}
{"gold": "The tests are not run concurrently? (I don't know. Better check.)", "pred": "Fix typo in vhost trie test"}
{"gold": "Regardless of scale?", "pred": "Fix typo in FieldTextInput.js"}
{"gold": "Nit: should not we hide them from printing out?", "pred": "Update main.go"}
{"gold": "What is the reason to modify those things? I noticed it breaks the examples using `asyncio`", "pred": "fix typo"}
{"gold": "WHOOOOOOOPS! so this is a wire protocol breaking change. I deployed a dev version of yarpc 1.9 to demo-yarpc-go and it caused bad request errors because it couldn't determine the procedure anymore. (in coordination with yarpc-prober)", "pred": "Fix import path"}
{"gold": "if we keep this, can we stick to our convention of using UPPER_CASE for constants? Otherwise this looks like a floating variable to me.", "pred": "Fixed typo in WriteConcern class"}
{"gold": "You probably don't want to assume that `self.underlayer` has a `seq` attribute.", "pred": "Fixing the GTPPDUSessionContainer class"}
{"gold": "This apparently breaks the language selection.", "pred": "Fix: DisplayLanguageOptionFactory now uses the correct translator class"}
{"gold": "since we're not using mysql, do we need this migration?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "i'm not sure about htis naming here. both the word partition and adjustment are very ambiguous and it's not clear what it does. i would maybe go for something less generic and more concrete like `GOV_CLOUD_SUPPORT`", "pred": "Fix typo in comment"}
{"gold": "unfinishedFlows might not be the same as activeFlows. Will it cause confusion here?", "pred": "[AIRFLOW-118] Fixing a typo in MockExecutorLoader"}
{"gold": "Same, remove the error handling.", "pred": "Fix example"}
{"gold": "We should not change this at this time.", "pred": "Update IMvxAppStart.cs"}
{"gold": "We may also update the docstring in the AnchorGenerator's arguments at around line 15.", "pred": "fix anchor generator doc (#104)"}
{"gold": "FormatHandle isn't current typesafe w.r.t. requiring *VULKAN* handles... so this slipped through.", "pred": "layers: Fix typo in ValidateAndUpdateQFOScoreboard"}
{"gold": "What kind of dependency is here, I think we have own implementation of event wo external dependencies", "pred": "fix import"}
{"gold": "Throw an exception instead", "pred": "Fix SYCLDevice constructor"}
{"gold": "we shouldn't need the `FactoryBot.` in these. Ok to leave for now since all of these specs have them. Can clean up later", "pred": "Fix org_create_last_month_created_plan_service_spec"}
{"gold": "Isn't the better option to actually do `$this->getDisk()->url($uploadsPath)` without changing the filesystems config? Not sure why you think that change is required but it's definitely not getting merged.", "pred": "Fixing bug in File class"}
{"gold": "Not sure if we need this. It's not tested because it only guards against a new conditional definition of a dunder method in a built-in package. I am fine with leaving it out.", "pred": "Fix #103: Don't crash on empty list"}
{"gold": "Is this the only task in this library? If so this is good, if not then we should do it for each task.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "I am not sure what is 120 and what is 10. Hence unable to review.", "pred": "Fixing the test case for cstor volume count"}
{"gold": "Not needed anymore", "pred": "fix: remove unused OptionsKeystore"}
{"gold": "Please not abbreviations", "pred": "Fix typo in comment"}
{"gold": "This shouldn't get stomped over on line 207", "pred": "Fix typo in core.go"}
{"gold": "are they not 1-indexed?", "pred": "go/scanner: fix typo in comment"}
{"gold": "I know that previously this check was here but @ralph-pichler replaced it with the `CheckTimestamp` field stating that checking against `Timestamp` was incorrect. @ralph-pichler can you elaborate?", "pred": "fix: typo in comment"}
{"gold": "`short_version = __version__`", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "AWS Identity and Access Management (IAM)", "pred": "Update UpdateAccessKey.java"}
{"gold": "Required for the SparkDataFile SerDe", "pred": "Fix import"}
{"gold": "Do you want to make this an assertion instead?", "pred": "Fix typo in comment"}
{"gold": "When updating the copyright, we tend to cover previous years, not just the current. So, if we started the file in 2015, we'd update to say 2015-2016. I'm not sure if there's a legal requirement surrounding this, but it's the convention we and many others have adopted for code.", "pred": "Update copyright year in license.txt"}
{"gold": "Wait, so it looks like this function is called _every_ time we fetch the root node, i.e. we do an MD head fetch every time we fetch the root node? Not for this PR, but it seems like we should make that unnecessary, since this function only ever does anything when head is `nil`, i.e. the first time. Maybe add a TODO?", "pred": "folderbranchops: fix comment"}
{"gold": "Why are you changing this?", "pred": "Fixing a bug in the DomainNameListField class"}
{"gold": "`json.RawMessage` is a `[]byte`, which is already a pointer. Why do we need to have pointer here if we just reading this value?", "pred": "fix: remove unused code"}
{"gold": "should we actually switch to `All` or just add `0.4.0` explicitly to the list of supported CNI versions? What is a new CNI version is released?", "pred": "Fix cni version check"}
{"gold": "pylint might complain that this isn't alphasorted?", "pred": "fix: import error"}
{"gold": "It seems that NetworkService is behind a feature flag because it's still experimental. If we see new issues, we should look at flipping this back off.", "pred": "Increase timeout for ChromeDriver tests (#22185)"}
{"gold": "I think it makes more sense to have this be a method on TaskStatus. Also, nit, Backend, not BackEnd.", "pred": "Fix typo in comment"}
{"gold": "Could you please elaborate on why you need all this magic here? In which cases do you want the same id to be returned? Does this work the same way for all backends?", "pred": "Fix hip_internal.cpp"}
{"gold": "nit: `PluginConfigs` feels a little better", "pred": "Add comment to ConfigDir field"}
{"gold": "think we need to find out the root-cause and fix, instead of just removing `NoError`? it erred b/c `context canceled`, so call this before context cancelled is the right fix", "pred": "fix: test case"}
{"gold": "Please expand \"later behavior\". Presumably something to do with the prefetch logic?", "pred": "kbfs/libkbfs: fix a typo in a comment"}
{"gold": "The `response` variable is not used, it can be removed, also the fmt.Errorf.", "pred": "fix(api): fix split upload"}
{"gold": "Do you find this really easier to read?", "pred": "Fix for #1085 - String.IsNullOrWhiteSpace is not available in .NET 3.5"}
{"gold": "A small nit: This variable should start with a lower case letter.", "pred": "Changes to RelRoot::addOneRowAggregates() to handle the case where the child of the root is a RelRoot."}
{"gold": "Where is this used for Node?", "pred": "fixing page streaming descriptor"}
{"gold": "Is `<your-id>` really easier to understand than `<your-identity>` for CLI user? For me, `identity` seems like a concept we use publicly, and `id` is just an internal shortcut for it.", "pred": "fix(cli): fix typo in connect command"}
{"gold": "nit.. `if` .. `else` for logging probably can be avoided.. maybe only log that an internal group was created for cluster group", "pred": "Fix typo in comment"}
{"gold": "There's a lot of changed tests -- but no new tests. You need unit and integration tests for this.", "pred": "Fix import path for mock"}
{"gold": "WithMessage what gas limit is?", "pred": "Fix gas limit check"}
{"gold": "Why are these skipped?", "pred": "fix(test): fix typo in cursor test"}
{"gold": "We'd better add the `json:\"metaServer,omitempty\"` here", "pred": "fix: add missing config for meta manager (#1029)"}
{"gold": "So... when we want to install mitmproxy with pinned dependencies, we first install all pinned dependencies, and then in a second step install mitmproxy as editable, making sure that no additional dependencies are sneaking in.  ", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "not sure how this got in master, but the linter is unhappy about it so I fixed it here", "pred": "Fix typo in comment"}
{"gold": "No need for this TODO anymore, right?", "pred": "keybase1: fix typo in comment"}
{"gold": "I would assign the key you're looking for into a variable first, and then use it in the comparisons.", "pred": "Fix typo in comment"}
{"gold": "Would be better to normalize it at the start of the method to pass through to all the other calls", "pred": "Fixing plugin manager"}
{"gold": "This can't exist here either because the code editor can be used on other models than CMS templates. You could probably implement this as a `hint` property (so `hint: cms::lang.cms_object.safe_mode_enabled`) on the codeeditor formwidget instead though and I'd be fine with that.", "pred": "Fix code editor widget"}
{"gold": "This line is unnecessary.", "pred": "Fix for #4774: Word: bullets are not shown in the document outline"}
{"gold": "How did this compile in the first place? Is there a matching declaration in a header that should be removed too?", "pred": "Fix a typo in a comment."}
{"gold": "Please remove the colon at the end, and merge the PR once the CI succeeds. Thank you for the PR.", "pred": "Fix a typo in h2o_mruby_new_str"}
{"gold": "whoops. this should be protoc-gen-doc, since that is the only bit left that is built out-of-tree (everything else is either downloaded or built via modules already depended on by spire's go.mod)", "pred": "Add golint to tools"}
{"gold": "The convention is to use <p> see the google style guide and use checkstyle to check. You can change it later.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Using non-keyword args after the keyword arg (parent-self) will cause a SyntaxError.", "pred": "Fixing a bug in the list element."}
{"gold": "I think you'll want to add some YARD docs to this method to get the PR approved  ", "pred": "Fix rubocop offense in Faker::Internet"}
{"gold": "Hmm, AFAICT `*out_variant` isn't explicitly set to `NULL` in the `ENOENT` case.", "pred": "ostree-repo-query-object-storage-size: Fix typo"}
{"gold": "Nit: \"Failed to configure TLS for SDK client\"?", "pred": "fix(cli): fix typo in comment (#1048)"}
{"gold": "please update your branch to the latest `master`. This change was already made in #4359", "pred": "[python] fix test_plot_split_value_histogram (#2856)"}
{"gold": "This line should be formatted", "pred": "Fix import path"}
{"gold": "\"default 65536\" Not sure if it's important to state, but block_processor_full_size has a different default for fast_bootstrap.", "pred": "Fix typo in help message"}
{"gold": "remove unnecessary whitespace changes", "pred": "Fix typo in TxPoolOptions"}
{"gold": "Are these conditions covered elsewhere ?", "pred": "fix(txnpool): fix a bug in txnpool"}
{"gold": "the above check (by transitivity) checked for `in_data.name_id == out_data.name_id && in_data.name_id != EMPTY_NAME_ID && out_data.name_id != EMPTY_NAME_ID`. The final check of `out_data.name_id != EMPTY_NAME_ID` is missing now.", "pred": "Fixing a bug in IntersectionHandler::findBasicTurnType"}
{"gold": "The event handle is being passed by reference, so the dereference on 591 is actually correct. To follow the convention that variables be declared before executable statements, please change the code to the following: struct _fpga_event_handle *_eh; fpga_result result = FPGA_OK; int err = 0; if (!event_handle) { return FPGA_INVALID_PARAM; } _eh = (struct _fpga_event_handle *) *event_handle;", "pred": "Fix event handle destructor"}
{"gold": "reorder includes to be alphabetically ordered", "pred": "Fix include path for nearest plugin"}
{"gold": "Rename `need_unmap` to `unmap`.", "pred": "fix anchor_target"}
{"gold": "In line 28, it has been declared twice, so removing `cm` should not impact, can you explain me little bit? :)", "pred": "fix: import path of debug package (#2655)"}
{"gold": "i don't think these unexported functions belong on the public interface, they can exist solely on the struct.", "pred": "fixing import"}
{"gold": "I'm not entirely clear on why this is necessary?", "pred": "Fix typo in comment"}
{"gold": "Why do we need to cast to `str` here?", "pred": "Fix for #1026"}
{"gold": "The ignore import above should be unused now and can be removed.", "pred": "Removed Ignore annotation"}
{"gold": "redundant null check?", "pred": "fixing a bug in MultiTermQueryConstantScoreWrapper"}
{"gold": "initialization of available ram is here", "pred": "Fixing a typo in the RAMDevice function"}
{"gold": "Can have negative numbers with the '-' on the right (`10-`) by just using line 610.", "pred": "Fix typo in field_label.js"}
{"gold": "AWS Identity and Access Management (IAM)", "pred": "Update DeleteUser.java"}
{"gold": "Shouldn't we use store a message which indicates that there was no available checker command? By the way how is it possible that metadata.json doesn't contain the checker command? Maybe this was the case in the earlier versions?", "pred": "Fixing a bug in the ThriftRequestHandler"}
{"gold": "Given that this is a boolean predicate, maybe it should be `full_backtrace?`.", "pred": "Fix typo in comment"}
{"gold": "Just curious why the blank line here?", "pred": "fixing import error"}
{"gold": "I like the idea, but we don't want a dependency on mitmproxy in pathod.", "pred": "Fix import"}
{"gold": "Why not adding this to the interface and keep passing the interface (as the interface is internal I don't get why you're not adding it there)", "pred": "Fix typo in comment (#1077)"}
{"gold": "`PY310` should probably be imported from `pylint.const`", "pred": "Fix import order"}
{"gold": "Can we propagate this error up the stack?", "pred": "Fixing a bug in the serial console output"}
{"gold": "Why reference is converted to table?", "pred": "Fixing test"}
{"gold": "You shouldn't use assert for runtime errors.", "pred": "Fix typo in desktop_create"}
{"gold": "Does this really belong in the vendor directory if you wrote it? At very least, should it get its own repo somewhere in addition to being dropped here?", "pred": "Fixing the path to the lightbox.js file"}
{"gold": "I think it would be better to place the rule name before the message. Messages are of varying lengths and the rule names will end up misaligned", "pred": "Fix PMDTaskTest"}
{"gold": "Can we remove the argument from this message? A message will include a line number already that points to the place in the code that has the problem. I think we can remove it.", "pred": "Fix typo in docstring."}
{"gold": "This whole class is now a mix of virtual and non-virtual. I tried to see what would happen if I made everything non-virtual in dev, and the build still passes. It turns out that none of the other methods actually need to be virtual. Can you make *all* the logging methods either virtual or not for consistency? Thanks.", "pred": "Fix typo in KestrelTrace.cs (#10855)"}
{"gold": "This looks a bit cryptic to me, and also it contains a dash. How about `mymysterium.url`?", "pred": "Fix typo in comment"}
{"gold": "You did notice the no newline at the end of this file, right?", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Here's the object model change. `CodeFlows` is a set of objects of type `CodeFlow`, rather than a list of list of `AnnotatedCodeLocation`. Exactly parallel with `Stacks`.", "pred": "Fix typo in Stacks property name"}
{"gold": "Sorry, one more thing... You should use `app.config` instead of importing it directly. See the code below.", "pred": "Fix import"}
{"gold": "This was correct before; \"setup\" is a noun and \"set up\" is the verb form.", "pred": "Fix javadoc"}
{"gold": "What's the reason for this change here? I didn't see it mentioned in the PR and it's a bit of a confusing param name  ", "pred": "Fix: AdSenseSetupWidget - getAccounts() method"}
{"gold": "I wonder why ~ and not a wildcard instead?", "pred": "Fix search"}
{"gold": "when will this happened? if happened, just ignore it Silently?", "pred": "fix: \u4fee\u590dPojoProducers\u7684bug"}
{"gold": "3x the smaller size would be around 17k, and we need it to be at least about 13k, which is 2x the larger size. I'd probably set this to 15k to split the difference and hopefully avoid needing to update this again as tests change. This is minor, though.", "pred": "Fix TestMergeAppend"}
{"gold": "@scottpurdy, strictly speaking, should this scenario raise a ValueError exception instead of AssertionError?", "pred": "Fixing the date encoder"}
{"gold": "Can you please add open source disclaimer?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "I dont want to do composite keys on purpose to verify at compile time if the message is completely filled out appropriately @sectioneight", "pred": "Fix typo in comment"}
{"gold": "don't need this line, since it is not tested in api_test?", "pred": "Fix test"}
{"gold": "Does this mean the list operation is done for all the namespaces? How to list the volume replicas per namespace?", "pred": "fix(cstor-pool): fix cstor-pool-mgmt container name (#1126)"}
{"gold": "I suggest adding `class_agnostic` as an argument of `batched_nms()`, with the default value False.", "pred": "fix bug in batched_nms (#3555)"}
{"gold": "@rdblue, did we not add the name on purpose?", "pred": "Fix typo in comment"}
{"gold": "Why is this now public?", "pred": "ORC-100. Add ORCSchemaUtil to convert ORC schema to Avro schema. Contributed by <NAME>"}
{"gold": "I guess we should backport some deprecation for this?", "pred": "Fix typo in search_context.rb"}
{"gold": "Moving this code inside the last case statement doesn't seem right. Why are we defining `name` and `is_relative` variables there if we aren't using them anywhere?", "pred": "Fix profile path regex"}
{"gold": "I would say just change REGARG: no need for a separate thing.", "pred": "i#1581: Fix typo in comment."}
{"gold": "we can remove this template, it is no longer in use", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "This doesn't look like it has as much coverage of the recursive code as it once did.", "pred": "(maint) Fix rubocop warnings in options_spec"}
{"gold": "Do we actually expect users to provide more information here than possibly a SecurityGroup ID? If not, then this should probably use a new type, otherwise users might be confused by what options would be respected/ignored when used in this context.", "pred": "Fix typo in AWSLoadBalancerSpec (#126)"}
{"gold": "This seems like a new dependency on rometools. Do we need it?", "pred": "remove unused import"}
{"gold": "Waiting for the pull takes a long time. This message informs the user that at least one of the images being pulled is available. Please leave.", "pred": "Fixing docker pull command"}
{"gold": "I can not think in a good use for it, but may we allow a way to setup a fake with a hook for logs? this fake is special, and we may need access to some of thoe logs, at the same time it may be an overkill because we dont want to test \"sql\" implementation but results.. but we can create some tests with end to end logs in some scenaries, What do you think about it?", "pred": "Fix import path in datastore/sql/sql_test.go (#1077)"}
{"gold": "I don't think you should be changing the dag unilaterally at parse time. If cores isn't specified, then it isn't specified.", "pred": "Fix a bug in dag_close_over_environment"}
{"gold": "Instead of just \"See SubscriberOptions....\", say something like \"Use ... to choose between the two.\"", "pred": "Fix typo in comment (#180)"}
{"gold": "Use with statement for `f`", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "It's a small style point, but could you remove the \"extra\" space before the colon that precedes the return type? This would make it more closely match the prevailing style in these tests and in the standard libraries.", "pred": "Added test for bad pony"}
{"gold": "seems clunky to me to have an `MDOps` interface method that some implementations don't implement. Perhaps define a separate interface, like, `BranchResolver`, and then callers that have an `MDOps` object can check via type assertion?", "pred": "mdserver: fix a typo in the comment"}
{"gold": "This change should also probably go into the corresponding method of the abstract By class?", "pred": "Fixing javadoc"}
{"gold": "File is not `gofmt`-ed with `-s` (from `gofmt`)", "pred": "fix test"}
{"gold": "This is likely to return an error value if the client fails to read the response we write, which is why I chose to ignore this error.", "pred": "fileserver: fix typo in comment"}
{"gold": "this method is not used", "pred": "fix: use correct type for static_remotekey_enabled"}
{"gold": "Right now it's a bit unclear that this needs to be called explicitly by the implementing class. If, for example, there's another backend, it won't get this update unless we add the same function as webkit. Could you either add a note to this docstring explaining that this needs to be called, or find some way to automatically trigger this so the webkit override isn't needed (and some override passed on webengine).", "pred": "Fix typo in comment"}
{"gold": "Why this change (test name still says \"must pass with metadata\")?", "pred": "xdp: fix test case"}
{"gold": "Another nitpick: parens around the arg pretty please", "pred": "Fixing the ruby version for 1.9.3"}
{"gold": "This spec can be modified, giving you extra strength (Check this fetch key doesn't work and therefore returns `nil`)", "pred": "Fix typo in chrome_spec.rb"}
{"gold": "Oh, I guess I mentioned/pressed this point in the other issue, that this should probably go into the httpserver package. In fact, so should the const above this (URLPathCtxKey). These are specific to the HTTP server.", "pred": "Fix typo in comment"}
{"gold": "Not added by you, but we don't really need the '5' here..", "pred": "Fix typo in comment"}
{"gold": "The vendor prefix is still being used on Chromium based browsers like Edge Chromium and Chrome. Did you mean to remove this?", "pred": "fix(chrome): fix default service"}
{"gold": "I don't think this is needed anymore?", "pred": "Fix for #1000: emulateKey() now works with non-ascii characters."}
{"gold": "This is the only occurrence I see in the code where we now need to convert from a boolean protobuf wrapper to a boolean pointer. This felt a little cumbersome here; should we consider moving it somewhere else as a helper function?", "pred": "Fix typo in comment"}
{"gold": "Need you to delete the `version_` from `HostInfo` struct ?", "pred": "Fix a bug in HBProcessor (#1769)"}
{"gold": "This could be the cleanest looking check we've got. Great job Jey.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Who invited yoda?   In all seriousness though, wouldn't an `if (empty())` be better here?", "pred": "Fixing a bug in the controller"}
{"gold": "You can use `appRouter.goHome` to do this (It's defined in site.js), it's less hacky than overriding the href.", "pred": "Fixing a typo in the requirejs config"}
{"gold": "When could this happen?", "pred": "NebulaStore: fix the bug that the partId is not set when the part is not found (#1970)"}
{"gold": "I assume this was removed because it was redundant? and conflicted with the now dynamic contentType? Edit: Oh I see it being set was moved to the `PostSegmentAsync` call.", "pred": "Fix typo in comment (#1007)"}
{"gold": "Here is a newline missing", "pred": "Fix typo in ProxyConfig"}
{"gold": "Did you mean to make this http rather than https?", "pred": "Fix typo in r_url"}
{"gold": "The updated copyright header should be: # Copyright (C) 2006-2018 NV Access Limited, yourname", "pred": "Fix #2057: Audacity: NVDA should announce the name of the button when it is pressed."}
{"gold": "wow :+1: , i do not even know how this test works.", "pred": "Fix performance test samples aggregator"}
{"gold": "File should be renamed `PlugIn` -> `Plugin`", "pred": "Fix namespace"}
{"gold": "I scanned the new test cases quickly. Do we have one for an egressIPPool with multiple different IP ranges?", "pred": "Fix import path for egress package"}
{"gold": "you can use a different name, like `maybe_activate` or `is_active` without `component` in the method name as this is used in the class name. E.g: `$component->should_component_be_active` is using twice the `component` word", "pred": "Update Abstract_Component.php"}
{"gold": "I think this might not be a complete enough check: what if `options` is `null`/`undefined`?", "pred": "fix(bulk): fix OrderedBulkOperation.execute() return value"}
{"gold": "Useless assignment to variable - `user`.", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "I think we would want to keep `-O` instead. I wonder how this worked before, though.  ", "pred": "Fix typo in erlang.rb"}
{"gold": "another alternate option which doesn't have the risk of too many entries (when user keeps providing keys in different order) Have the dictionary as before If tagKeys lookup fail, sort and lookup again. If fails, insert both original tagKeys and its sorted one to the dictionary. So that we only store atmost 2 entries per key set. And we only do a single lookup in hotpath, as opposed to 2 look ups.", "pred": "Fix typo in AggregatorStore (#1007)"}
{"gold": "if (out != nullptr)", "pred": "Fix PlanNode::releaseSymbols()"}
{"gold": "In the listenstore you catch the exception and then pass it on via Raise. However, here you do not catch the exception. You should catch the exception, but since this is a minor aspect of this page, perhaps show an error message when the count cannot be loaded in time. Then the rest of the page can still be rendered, rather than failing the whole page.", "pred": "Fixing bug in profile page"}
{"gold": "wouldn't it be simpler to just add `or transfer` here? That way the more complicated set of conditionals down below don't have to get more clauses.", "pred": "Fix tabbed browser close tab"}
{"gold": "ditto; please fix everywhere", "pred": "Fixing import error in bigquery_api.py (#2295)"}
{"gold": "Can you break this line into two parts - the first line makes the option help text for `--sftp-server` and its too long! `Specifies the path or command to run a sftp server on the remote host. The subsystem option is ignored when sftp_server is defined.`", "pred": "Fix typo in help text"}
{"gold": "I reverted that one in a previous PR because of a CI failure but it was actually unrelated", "pred": "Fix loop analyzer"}
{"gold": "The for loop is useless here, since any error will make the function return.", "pred": "fix: add2toolslist"}
{"gold": "Fix file endings here and elsewhere.", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "I'd better increase `buf` length to MAXPATHLEN and not cut p->get_project_name() output twice", "pred": "Fix a bug in the backoff code."}
{"gold": "Please remove the prints, even though this code will be trashed.", "pred": "fix(storage-power): fix typo in comment (#1015)"}
{"gold": "Not sure if you added deliberately but I've seen these popping up; is goimports adding them?", "pred": "Fix import path for logutils"}
{"gold": "I think we might need some special handling for `Spec.ControlPlaneLoadBalancer.SecurityGroups`, it looks like we are currently only handling the case that `Spec.ControlPlaneLoadBalancer` is nil.", "pred": "Fix conversion error in AWSCluster (#132)"}
{"gold": "Is this from a third-party library?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Please put the `el.tabIndex > -1` in the first part of the expression. The matcher will run on every node on the page, so we should put the fastest part first.", "pred": "Fixing isNativelyFocusable to return true for input elements"}
{"gold": "`identity` is unused now, is it for future usage?", "pred": "fix: import path"}
{"gold": "This would have assisted me a lot! I am on the \"functions\" page more than any other page in the docs", "pred": "(maint) Fix documentation for prompt function"}
{"gold": "I think it's better we keep `(` and encode with default encoding (utf-8).", "pred": "Fixing a bug in the job task"}
{"gold": "this is gonna be different in an IDE vs from gradlew??", "pred": "Fix spotless plugin configuration"}
{"gold": "Do we not already have something for isolating syntax?", "pred": "Add a test for the new Spork.each_run block"}
{"gold": "1: D100 Docstring missing 4: I102 copyright year is outdated, expected 2014 but got 2012 158: D103 Docstring missing 168: D101 Docstring missing 170: D102 Docstring missing 180: D102 Docstring missing 187: D102 Docstring missing", "pred": "global: fix copyright year"}
{"gold": "how **to** deny", "pred": "Update s3_deny_unencrypted_uploads.rb"}
{"gold": "The only beef I have with this is that it's app domain global.", "pred": "Fix typo in comment (#1236)"}
{"gold": "Can you link to the GitHub issue and/or PR so that it is easy for future readers to find out more about this?", "pred": "Fix typo in comment"}
{"gold": "Typical to report the value found as well as the valid bounds.", "pred": "layers: Fix typo in comment"}
{"gold": "maybe we want 0 as a default value?", "pred": "Fix typo in clerk command"}
{"gold": "can we get height from sf at very beginning of the function and use that as height of the block?", "pred": "fix: typo in GetAccount (#1048)"}
{"gold": "Does this have to be public and in the primary namespace?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "I'm a bit confused. Doesn't `mdWriterLock` already synchronizes calls to this function?", "pred": "kbfs: fix a bug in folderBranchOps.initMDLocked"}
{"gold": "Does it make sense to generate a dailyMotion url without the video reference? It does not to me, but can we throw an exception here?", "pred": "Fix DailyMotion provider"}
{"gold": "Why the separation of imports here?", "pred": "Fix import path for stringutils"}
{"gold": "Random extra newline.", "pred": "fix(interpreter): fix import path for interpreter package"}
{"gold": "No need for this variable.", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Why not use `msg` directly below?", "pred": "Fix typo in comment"}
{"gold": "I think other places changed to use `Deque` instead of suppressing the warning.", "pred": "Fix import"}
{"gold": "missing: utility, cstddef also: vector is already included in the header (interface requires vectors as in/out types)", "pred": "Fix include order"}
{"gold": "I'm not sure this is necessary in the config here, as Jest would be setting the global `fetchMock = ''`. See below.", "pred": "Fix jest config"}
{"gold": "Can `mFolder == null` happen during regular operations? Or is it only so we can be lazy in tests?", "pred": "Fix typo in Message.java"}
{"gold": "I'd suggest using the actual MIME types here - so `text/plain` and `multipart/alternative` or does that cause problems with what postgres allows for enumeration names? If so then maybe just replace the slash with an underscore?", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Ohh. `TeamName` is actually a \"friendly\" name displayed in the Catalog - not the name used in the CLI. So I guess we'll need a new variable here. (That is, this is going to be mainly a `quilt.yaml` change. You won't need the `.lower()`, though.)", "pred": "Fix typo in error message"}
{"gold": "Nit: Don't move it between `require_dummy_response` definition and usage, this can live above or below :)", "pred": "Fix bug in console addon"}
{"gold": "With the current code, it not work if `EnableCatchupFromArchiveServers` is disabled. to fix it: in getDNSAddrs, change the predicate to `if wn.config.EnableCatchupFromArchiveServers || wn.config. EnableCatchupFromArchiveServers {` and in the catchup/service.go and catchup/catchpointService.go, use the `PeersPhonebookArchivers` only when `wn.config.EnableCatchupFromArchiveServers` is enabled.", "pred": "Fix typo in comment"}
{"gold": "Why not make `SearchForNodes` do a `GetOrCreate` for the root node? (Not advocating for it, but just wondering if there's another reason than avoiding having to pass in the path.)", "pred": "libkbfs: fix a bug in conflict resolution"}
{"gold": ":+1: amazing that this has been missing since it was originally implemented", "pred": "Fix DefaultP2PNetwork"}
{"gold": "Just want to note here that although we do check `length` while writing to choose whether to close and start a new file, that doesn't happen for ORC already so it is fine to use a FS call in this method.", "pred": "ORC-100. Add a method to get the current offset in the file. Contributed by <NAME>."}
{"gold": "nit: I feel multiple `if (...) { return ... }` is more readable than `if ... else ...`.", "pred": "Added javadoc"}
{"gold": "This is needed for us to work in IDE UTs", "pred": "Fixing logging"}
{"gold": "File is not `goimports`-ed (from `goimports`)", "pred": "Fix typo in trash command help text"}
{"gold": "this `label=` is docker specific, while here in libcontainer there shouldn't be any mention to docker. `DisableSecOpt` and `DupSecOpt` should just deal with `disable,role,type,level`. Both CRI-O and docker should just pass `disable,role,type.level` stuff and not `label=...`.", "pred": "Fix typo in comment"}
{"gold": "You need to declare variable `recurse` above, same place as `localTime`.", "pred": "Fix typo in help text"}
{"gold": "Why does `clone` not already copy `xdensity` and `ydensity` from what it is cloning?", "pred": "Fixing bug in SpreadingOperation"}
{"gold": "Curious - do we do the same for traces (when no ActivitySource / legacy source are added)? (and why we want to do it for metrics?)", "pred": "Fix typo in MetricReaderFactory (#1077)"}
{"gold": "@aimanrosli23 For the changes in file SdMmcPciHci.c, please make sure that you do not revert the changes made by the below commits: SHA-1: 49accdedf956f175041040e677163b7cbb746283 * MdeModulePkg/SdMmcPciHcDxe: Hook SwitchClockFreq after SD clock start SHA-1: c67617f3c677c342efde780e229f841f4e0f6c7e * MdeModulePkg/SdMmcPciHcDxe: Add retries for sync commands SHA-1: 6d387610855ee27b49cb720de29ed809ea59dadc * MdeModulePkg/SdMmcPciHcDxe: Read response on command completion SHA-1: 63fd7f389874081ea37452b1f79ac013d52755e3 * MdeModulePkg/SdMmcPciHcDxe: Do not map memory for non DMA transfer", "pred": "MdeModulePkg/SdMmcDxe: Fix the build break caused by the change of SD Host Controller Simplified spec 3.0 Section 3.2.1"}
{"gold": "You'll also need to add `webelem.Group.all` everywhere as that matches as well", "pred": "Fixing a test that was failing because of a change in the way we handle the href attribute."}
{"gold": "Does this need to be an ERB template?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "do we want to register this in the mock server for testing?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "shouldnt this be `0:996` (+4) so the 1000s below fit?", "pred": "Fixing test case"}
{"gold": "The docstring of this context_manager should be updated. As now ``sort=False`` is valid, it should just say it disables sorting regardless of whether the NdMapping has ``sort=True`` or ``sort=False``. I also think the line 'Should only be used if values are guaranteed to be sorted before or after the operation is performed.' should just say something else - maybe just that the initial ordering (whatever it is) should be preserved?", "pred": "Fixing a bug in the sorted context manager"}
{"gold": "This tests failed unless I swapped the order here. Perhaps some new class transform broke the old form?  ", "pred": "Fix linting errors"}
{"gold": "extract the port and set to `debug_java_port`", "pred": "Fixing the debug port issue"}
{"gold": "When the argument list is `[\"one\", \"two three\"]` then you concatenate it as you do it here, you won't be able to get the original list back with split. You need to annotate the list items better. (Or if you won't do the split by yourself, the called shell will do it. So you need shell escaping. How portable is that?) The main driver to change this in `intercept-build` was to get rid of these concatenation and splitting errors. The current compilation database parser in Clang understands the `arguments` filed... So the question, why don't you pass the command around as a list instead of a string?", "pred": "Fix typo in parse_compile_commands_json"}
{"gold": "`ctx` is unused in EnablePiped", "pred": "Fix typo in webapi/piped/service_test.go (#2495)"}
{"gold": "Why do we have both a list of valid sessions and an instance variable if a session is destroyed?", "pred": "Fixing a bug in the session class"}
{"gold": "nit : I think that it would be \"cleaner\" to set the `flushcount` to nil in case of an error nice catch ;-)", "pred": "Fix bug in accountUpdates.committedUpTo"}
{"gold": "You may want to use assertNull", "pred": "Fix NullRepositoryTest"}
{"gold": "Break out tests for events into their own tests rather than placing them in other ones. That makes it easier for us to figure out where problems lie and to do a TDD-driven implementation over new APIs.", "pred": "Fix TracerTest"}
{"gold": "Why did you remove this?", "pred": "Fix typo in wl_output.c"}
{"gold": "Why we need another error printouts? We already have it inside addMapping..", "pred": "Fix typo in comment"}
{"gold": "This LGTM, but I'm curious if this fixed a specific error you were hitting?", "pred": "layers: Fix typo in ValidateFsOutputsAgainstDynamicRenderingRenderPass"}
{"gold": "Actually we rely on this functionality in cgroup v2, where the subsystem is empty.", "pred": "Fix cgroup parsing"}
{"gold": "suggestion: use `core` package name", "pred": "Fix import path in test (#100)"}
{"gold": "I think we can entirely remove this `limit` parameter for now to be consistent with other APIs.", "pred": "[SPARK-30045][PYTHON][DOCS] Fix typo in pyspark.sql.DataFrame.toPandas docstring"}
{"gold": "nit: `Resource Groups Tagging API` -> `Resource Groups API`", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "This type of list + delete always make me a bit uneasy but guess there's no atomic way to do this...... Could you put a todo to retry the \"ClearRepository + delete repo\" flow a few times? Basically, imagine a new image is added right after we call `ListImages`, then `DeleteImages` will not delete that newly added image. Then the delete repo call will fail", "pred": "Fix import path"}
{"gold": "You can remove this since ES6 modules are strict by default. And thanks for contributing to the Jellyfin Project.", "pred": "fix(scrollManager): remove unused variable"}
{"gold": "Why did eip1559 go from a list (0xf9020280.....) to a wrapped string (0xb902060ff9020280...) and not just concatenation (0x0ff9020280...)? implementation detail or is this how it sits on the wire now?", "pred": "Fix TransactionRLPDecoderTest"}
{"gold": "@wallyqs Since on Windows it would be `\\` instead of `/` I just look at the suffix past `configs/`. Let me know if that's ok or not.", "pred": "Fix test"}
{"gold": "nit: Remove this assignment because it is not necessary.", "pred": "fix: typo in webapi.go (#118)"}
{"gold": "This seems like a common enough pattern to offer an equivalent wrapper in `ot-fs-util.c`, no?", "pred": "ostree-summary: Fix typo in error message"}
{"gold": "Wouldn't this crash the app if the user is currently listening to a stream?", "pred": "Fix #1029"}
{"gold": "This looks like an unrelated change? What is it for?", "pred": "swift: fix listContainerRoot"}
{"gold": "Wait, what is this doing? Is this a way to create methods that are only accessible from tests?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Is it more reasonable to return some errors here, such as returning error codes (403 and so on?) ?", "pred": "fix: archive list api"}
{"gold": "Thinking out loud... would `_nextDom` be a better name for this?", "pred": "fix(vdom): fix typo in vnode.js"}
{"gold": "Turns out the unittests also had a false positive.", "pred": "Fix test_superfluous_parentheses.py"}
{"gold": "I think these method names would be clearer if written as \"Create a {type} counter|gauge|measure with given name\". eg \"Create a int64 counter with given name\" \"Create a double gauge with given name\"", "pred": "Fix typo in Meter.cs (#1015)"}
{"gold": "it pushes a boolean, so it has to be explicitly casted to boolean with != nullptr, same with all other similar stuff", "pred": "fix(scripts): Fix LuaScriptInterface::luaDoChallengeCreature()"}
{"gold": "It would be nice to have an equivalent of this call on `DataWriterImpl::enable`", "pred": "[rclcpp] Fix memory leak in createPublisher"}
{"gold": "Isn't this PENDING?", "pred": "Fix typo"}
{"gold": "minor detail, why aim to sanitize title if tile is empty (in some cases)? worth adding an && to check for that.", "pred": "fix: landmark-is-top-level rule"}
{"gold": "Code shared by ParentChildrenSyncDownTarget and ParentChildrenSyncUpTarget moved to ParentChildrenSyncTargetHelper", "pred": "Fixing import"}
{"gold": "The bug is not about the priority , But we use 2 config items CAPACITY and SEQUENTIAL to control 1 action: thoughput. If 'sequential' is given to 'False' as default in configfile and then I use 'capacity' to 10 in my test.yml , the 'capacity' 's priority should be higher than default 'sequential'. So, I suggest we use only one 'capacity', it is enough. '1' is sequential, more than 1 is capacity, None is sys.maxsize.", "pred": "Fixing a bug in the local provisioning"}
{"gold": "I don't know if I'd call any of these FAST tests integration tests. They are unit tests for FAST. They use a mock plugin which doesn't actually start any external processes, etc.", "pred": "fix import path"}
{"gold": "Can you provide corresponding UT for this.", "pred": "Update version.go"}
{"gold": "nit: this should be below the yarpc group", "pred": "Fix import path for transporttest"}
{"gold": "singleCaseSwitch: should rewrite switch statement to if statement (from `gocritic`)", "pred": "Fix typo in timer.go"}
{"gold": "Please log once here at Error level \"Failed to connect to Typha, will retry...\"", "pred": "Typha: Fix typo in log message"}
{"gold": "Do we need the forXDP parameter in runBpfUnitTest? If not, I think better to revert in order to save a few changes.", "pred": "test: fix test name"}
{"gold": "So we fix it only for kinto and not for all cliquet resources?", "pred": "fixing name generator"}
{"gold": "No empty line between", "pred": "fix: remove unused import (#1177)"}
{"gold": "We have `ResolveRootfs` in `libcontainer/utils` so maybe use that one here?", "pred": "Fix typo in comment"}
{"gold": "Just curious, do we have positive test covered somewhere?", "pred": "Fixing test case"}
{"gold": "Style error, put a space between `if` and `(`", "pred": "Fix typo in comment"}
{"gold": "It's a bit odd to have a \"disable<x>\" boolean, though it looks like you already do that for a few other flags.", "pred": "Update config.go"}
{"gold": "Why did you pick two hours for this?", "pred": "Bump docker pull timeout to 3 hours"}
{"gold": "What about \"enter new password\"? That would be a bit more consistent to the `ReadPasswordTwice` usage in cmd_init.", "pred": "Fix typo in comment"}
{"gold": "Another redundant import", "pred": "Fix import order"}
{"gold": "What kind of errors might cause us to reach this point? Could any of them be recoverable i.e. might work if we asked the same server again? Similar question for below, but perhaps with a slightly different answer", "pred": "Fix typo in comment (#104)"}
{"gold": "What is the difference between GraphType and graph_type. Naming should be more accurate.", "pred": "Update triangle_counting_test.hpp"}
{"gold": "hmmm in docblock of contructor it is EntityManagerInterface....maybe it should be that way.... :confused:", "pred": "fix CS"}
{"gold": "I'm curious why you went the route of adding a new method name for this. Given that you it would be possible to just have an an overload of `GetPos()`, and that this change breaks existing code, I wonder why you chose to go this way.", "pred": "Fix python binding for GetAtomIds"}
{"gold": "Does this need to change `'active'` to `'Active'` and that? Or is that done in CSS or something?", "pred": "Fixing issue with stripe subscription"}
{"gold": "Why are these constants public? They should also be listed above members.", "pred": "Fix typo in Http2Limits.cs (#12855)"}
{"gold": "This TODO isn't related to this change. We should remove it.", "pred": "Fix typo in MainnetTransactionValidator"}
{"gold": "`FieldMetrics` is parameterized, but this is a bare reference. Could you update it? I think it should be `FieldMetrics<?>` since the metrics are not necessarily for the written value type, `D`.", "pred": "Remove default method from ValueWriter"}
{"gold": "@cijothomas do we want this to be `Set` or `Add`?", "pred": "Fix typo in Metrics.md (#2357)"}
{"gold": "Why are we dropping GasCap?", "pred": "fix: typo in jsonrpc config"}
{"gold": "should we end the text with a .?", "pred": "Fix typo in SpanShim (#100)"}
{"gold": "Could this instead keep the `go_native` and add to it \"or the last exit was the special reset exit\"?", "pred": "Fix typo in comment"}
{"gold": "Oh, I missed this one: The other instances of `this` you've added as lambda contexts aren't really needed, although they're harmless. However, in the above connection, the missing context is `panel`, not `this`. Please correct it! Clazy may show warnings about lambda contexts (I don't use Clazy) but, if so, that's a problem in clazy: it isn't smart enough to know about them.", "pred": "Fix typo in ConfigPanelDialog"}
{"gold": "can we add a try / except around this to make it more stable? I like the idea of any mistakenly un-quit drivers closing down after the process is quit (the java server does this... also i forget to do driver.quit often when i use the command line repl :) )", "pred": "Fixing a bug in the service class"}
{"gold": "when would this happen? backward compatibility?", "pred": "api: fix cloud migration status"}
{"gold": "I'm not sure what the value of this is. So far we've solved this by always doing `tagName.toUpperCase()` for everything. I think we should stick with this.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "This command displays available snapshots on a volume.", "pred": "Fixing typo in snapshot list command"}
{"gold": "`spb` is the standard package name we use for this proto.", "pred": "Fix import path for typeutil"}
{"gold": "/javascript/firefox-driver is the Selenium implementation of a WebDriver for Firefox. Since it generally isn't W3C compatible, it shouldn't change. We can just drop this change.", "pred": "JasonLeyba: Fixing a typo in a comment."}
{"gold": "is this pr support parallelly process application?", "pred": "fix: msgToApplication"}
{"gold": "Based on the assumption that when `EnablePulls` is `true`, `CanEnablePulls` must be `true` as well, then this `if` check is redundant. Actually... we have `AllowsPulls` now... why not use that?", "pred": "Fix typo in MustEnablePulls"}
{"gold": "I am not sure why the API requires both project name and project ID as inputs. Wouldn't it introduce more opportunities for clients to make mistakes?", "pred": "Fixing a bug in the schedule servlet."}
{"gold": "I believe this was happening for several different flash messages - should we add `now` to all flash messages? (there might be a downside to doing that, but I am not sure what it would be)", "pred": "Fixing bug in Ncr::RequestController#edit"}
{"gold": "There is no docblock on the parent method. Also, not related, but I forgot to typehint the `$templating` constructor argument above.", "pred": "[FrameworkBundle] fixed typo in exception listener"}
{"gold": "Silly me. This shouldn't be done in the tests, but instead in the actual definition of ValidPHPVersions on arm64. Same with Mysql and MariaDB.", "pred": "Fix test"}
{"gold": "Shouldn't this work as well for Disjoint?", "pred": "LUCENE-4846: Fix javadoc"}
{"gold": "You've not updated the `o.Status.Reason = fmt.Sprintf(\"Failed to retrieve Order resource: %v\", err)` line below here when you changed this, so here we are checking `errUpdate` but will print the contents of `err` instead.", "pred": "Fix typo in comment"}
{"gold": "Doesn't this need to include `Errno::ECONNRESET` to fix the issue?", "pred": "JariBakken: Fix SocketPoller to work with Ruby 1.8.7"}
{"gold": "Please consider keeping the config key in one line as it will help in case someone is looking at how this config is used. public static final String PROJECT_CACHE_THROTTLE_PERCENTAGE = \"azkaban.project_cache_throttle_percentage\";", "pred": "add a constant for the default project version retention"}
{"gold": "This is a hard one, naming-wise... `ListPowerSelectorEntries` is logical given `ListSelectorEntries`. Another option could be `ListMatchingEntries` or even `FindMatchingEntries`. :shrug:", "pred": "Update datastore.proto"}
{"gold": "This should be called `Uint` or `Uint32` or simply using our `Uint64` type instead. All of our numbers have varint encoding. It's not inherently a varint.", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "No need for this when you don't need to customize anything about the argument.", "pred": "Fix typo in command dispatcher"}
{"gold": "We're now going to have 3 `#sections_accordion` will need to see how JS behaves. We should probably switch to a class selector instead", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "did you mean to leave this in here?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Mention that it only applies to Windows. This is kind of implied, but better to be explicit.", "pred": "Update import_image.go"}
{"gold": "again: it is a bad practice to have some global parameters with such common names for unit test purpose.", "pred": "[test] fix test"}
{"gold": "Should we use `\\DateTimeInterface` or `DateTimeInterface` and declaration of `DateTimeInterface` in `use`?", "pred": "Fix CS"}
{"gold": "What do you think of moving this stack related constant to the `stack` pkg?", "pred": "fix: remove unused import (#1285)"}
{"gold": "Hm, I guess that you're doing this here since `WellFormed` is on a `transactions.Transaction` and not a `transactions.SignedTxn`, but quickly grepping through our code, it looks like we always a `SignedTxn` around when calling `WellFormed` (except maybe some tests?)... this doesn't have to happen here, but maybe we should update that in a separate PR since this really feels like a `WellFormed` check.", "pred": "Fix typo in comment"}
{"gold": "This story also needs the default padding.", "pred": "Fixing tests"}
{"gold": "Hmm why did we remove the randomness about which (confusingly) different exception to throw here? This randomness was (is?) useful to help test that Lucene indeed catches `FNFE` and `NSFE` interchangeably.", "pred": "LUCENE-6484: fix test failure"}
{"gold": "Hm, so before in that case `current_collection_id` looks like it was actually an uninitialized pointer. It seems weird to me that the tests pass both ways. I haven't looked closely at the tests - is there something wrong there that causes this to spuriously pass before?", "pred": "ostree-repo-list-collection-refs: Fix typo"}
{"gold": "s it the best way to tag \"foo\" of \"`define foo ...\" with constant kind? Introducing \"d/definition\" kind and tagging the \"foo\" with the definition kind is an alternative way. Using the unified kind \"constant\" in many areas reduces the information that client tools get from a tags file. In my experience, it is better to tag different things with different kinds. If ctags hides the differences, and just reports various language objects as \"constant,\" in some cases, a client tool must parse the raw .sv source file for distinguishing whether a given tag is \"`define\"'ed or not. IMHO, ctags should not be too smart. Instead, ctags should be stupid; it should report what it sees in source input files as-is to client tools that will do something smart.", "pred": "Fix a typo in the comment."}
{"gold": "is this a breaking change? If I'm not mistaken, this is translating a user-provided `wtimeout` in the connection string into `wTimeoutMS`", "pred": "fix(mongo): fix typo in mongo options"}
{"gold": "Can we rename this file to `lambda_echo.py`, to be more descriptive and in line with the other files in this directory? (all files in this folder are lambda functions, after all)", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "why not do it like this ? <pre><code> const ( Kill Action = iota Errno Trap Allow Trace ) <pre><code>", "pred": "Fix typo in seccomp.go"}
{"gold": "lock(this) is a bad practise, since you lock the entire instance. cosider: var appenderCache = xxxx. lock(appenderCache) { Thread.Sleep(TimeSpan.FromHours(5)); } while inside AppenderCache instance lock(this) { is blocked 5 hours. } Its always better to make a class private lock objects.", "pred": "Fix typo in comment"}
{"gold": "should we use the constant above?", "pred": "transport/grpc: fix typo in comment"}
{"gold": "I think something like `size_res` would be more descriptive.", "pred": "Fix os_seek() for SEEK_END"}
{"gold": "Oh lol so this was...really more of a bug?", "pred": "(maint) Fix typo in comment"}
{"gold": "Well, it is providing a platform neutral way of calling Task or TaskEx. We could just call it PlatformTask.", "pred": "Fixing the build break"}
{"gold": "Typo: this should free `xwayland` instead", "pred": "xwayland: fix typo in comment"}
{"gold": "Is it ok to use \"math/rand\" instead of \"crypto/rand\" here? Do we need to protect this ID somehow?", "pred": "Remove unused import"}
{"gold": "Why did we have `logxi` in the first place? Maybe it makes sense to remove it from `glide.lock? It will safe us in the future from using logger which is not working.", "pred": "Fix import"}
{"gold": "Is there a reason to use `getUNF()` and `UNF` in the same block?", "pred": "Fixed bug in DataCitation."}
{"gold": "Again this seems odd that megacheck cares", "pred": "Fix test"}
{"gold": "I assume this will resolve to nil if this isn't in the config?", "pred": "(maint) Fix typo in transport_config"}
{"gold": "I looks like we can make `allowOptionalMappings` non-optional since we have another overload without it. (I thought this generated a compiler warning, but maybe it's just R#)", "pred": "Fix typo in comment (#1007)"}
{"gold": "` per scale.` -> ` per scale.` need to clean the unnecessary blank space", "pred": "Update yolov3_neck.py"}
{"gold": "there's no import for Export", "pred": "Update class194.java"}
{"gold": "i don't think we want/need to make the node API available over UDS", "pred": "Fix typo in comment"}
{"gold": "How about to skip if and returning null and return a result of `ArticleFacade::findById` directly?", "pred": "Fix: Facade for legal conditions"}
{"gold": "I think this change is currently unnecessary. I like the idea of `map()`, `filter()`, etc. returning vanilla JavaScript arrays rather than mongoose arrays, but I think that's a bit too heavy of a change for a patch release. I think that all we need for this release is the `if (!parent || parent.$__.populated == null) return;` change.", "pred": "fix(core): fix core-document-array"}
{"gold": "how about \"unknown\" instead of \"fafafaf\"?", "pred": "Fix typo in constant name"}
{"gold": "nit: do we gain anything from naming the output error `err` in this definition?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "This can happen with any dialog. Maybe the best place to add this change would be the dialog component instead.", "pred": "Fix typo in comment"}
{"gold": "Should this be `TearDown` since it now calls this method? Something I would like to see is, on test failure don't teardown completely instead leave the FAST repo in place with the stderr and stdout files and direct the user to that location. What do you think?", "pred": "Fix typo in comment"}
{"gold": "There's not particular reason to use a short name. Can we use a more descriptive name for the metric? Perhaps \"negativeLogLikelihood\"?", "pred": "Fixing a bug in the metric factory"}
{"gold": "not handling in case of `repr` makes the behavior probably a little too unpredictable. Is there a reason not to, apart missing stuff in the `repr`? Does it lead to some problem?", "pred": "Fix a bug in the C preprocessor."}
{"gold": "Remove the finally?", "pred": "Fix bad request exception message (#1056)"}
{"gold": "Build on AArch64 fails because WCHAR is not defined.", "pred": "Fix a typo in a comment."}
{"gold": "Do we use this const?", "pred": "Fix import path"}
{"gold": "I think this may need to be `SetCertificateRequestAnnotations` as it returns a `CertificateRequestModifier`  ", "pred": "Fix typo in certificate_request_modifier.go"}
{"gold": "it would likely be better to do this in the Identifier.by_scheme_name method itself.", "pred": "Add missing require"}
{"gold": "@janette looking at this test code, I'm pretty sure that it's going to give a false positive. Where is it actually checking the contents of the first four datasets against expected values? All the assertion at the end of the test seems to check is that at least four datasets exist.", "pred": "Fixing the dataset context to use the new DKANEntityContext"}
{"gold": "Would this break things if Ghost is run in a subdirectory or no?", "pred": "Fixed typo in config.js"}
{"gold": "maybe switch the order in order to make this a positive assertion instead of a negative one? i.e. `if key =~ /id/` first.", "pred": "Fixing typo in comment format"}
{"gold": "Is this an oversight for some code in the body?", "pred": "Fixing import error in expected_conditions.py"}
{"gold": "Reason for adding this? I couldn't find where you are retrieving it back.", "pred": "Fix bug in AddProductActivity"}
{"gold": "Can we expect adequate information emitted to the log in case either requiring preloads.rb or doing the requires in preloads.rb fails? If the answer is yes, I think we can merge this PR right away.", "pred": "mruby: fix a bug in setup_globals"}
{"gold": "How about a `app/views/layouts/pages.html.erb` layout that contains the HTML head, body, wrappers and yield's the `new-topics` template into it? I think we might be able to delete the `app/controllers/pages_controller.rb` file at that point.", "pred": "Add index action to pages controller"}
{"gold": "This is a coarse solution. This check is helpful, but you should also add a check in `$__version()` to avoid calling `isSelected()` if `key === false`", "pred": "Fix isSelected() for embedded documents"}
{"gold": "Passing only needed data to make it can be reused by `planpreview` package where there is no deployment data.", "pred": "Fix typo"}
{"gold": "Could we rename those to `CustomClientAuthentication` (same for Router) to remove ambiguity between Authentication and Authorization (permissions)?", "pred": "Fix typo in comment"}
{"gold": "Is the name \"IMvxFormsViewPresenter\" too close to \"IMvxFormsPagePresenter\"? Perhaps something like \"IMvxFormsNativeViewPresenter\" or \"IMvxFormsPlatformViewPresenter\" or inline with Forms naming \"IMvxFormsOnPlatformViewPresenter\"", "pred": "Added missing interface"}
{"gold": "`typeof child != 'boolean'` maybe?", "pred": "Fix h() function"}
{"gold": "Why && changed to || ?", "pred": "Fixing a bug in the error handler."}
{"gold": "nit: not a big deal right now but spec assigns ID 0 to InitAddress", "pred": "fix(storagemarket): fix typo in comment (#100)"}
{"gold": "/javascript/firefox-driver is the Selenium implementation of a WebDriver for Firefox. Since it generally isn't W3C compatible, it shouldn't change. We can just drop this change.", "pred": "JasonLeyba: Fixing a typo in a comment."}
{"gold": "There are various places where `setZoomFactor` is used but `fuzzyval` isn't set: - `__init__` and `on_config_changed` (should be okay as `init_neighborlist` gets called which essentially does the same) - `zoom` (calls `zoom_perc` with `fuzzyval=False`), which is used by `:zoom-in` and `:zoom-out`. Are you sure this won't break those calls? (Yes, I know there should be tests for this - I'm working on that.) Other existing places probably should get simplified.", "pred": "Fix typo in WebView.py"}
{"gold": "Is there a benefit to keeping this in RefinementSettings? Or could we move it into its own class in TestUtil?", "pred": "Fix small molecule conversion"}
{"gold": "I would have expected the Ready method to need to change to be a `<-chan Result` instead of a `<-chan map[string]Result`. The difference being that now the Ready channel can produce more than one set of results. In fact the name Ready is inaccurate now since its not about the query being ready but just a mechanism to deliver results. If this should be a follow up PR that is fine, lets create an issue for it.", "pred": "Fix typo in comment"}
{"gold": "why? what if we want to access those methods outside of azkaban-common?", "pred": "Fixing javadoc"}
{"gold": "Rename file too", "pred": "Fix merge test"}
{"gold": "Need to populate the `RequestID` field for these errors. This can be obtained from r.RequestID i think, but need to make sure. The `r.RequestID` should of been populated from the `UnmarshalMeta` handler list.", "pred": "Fix typo in xmlutil.UnmarshalXML example"}
{"gold": "Why is the `final` being removed here?", "pred": "fix: remove unused constant (#100)"}
{"gold": "Maybe let's take this opportunity to change easylogging to a git submodule?", "pred": "Update version"}
{"gold": "Should we just be generous and elide all extra whitespace? `strings.TrimSpace`", "pred": "Fix typo in comment"}
{"gold": "This is an inaccurate API that has outlived it's purpose. We can't make the determination of phone (vs) tablet, with a 7\" screen in the mix. Also, with the advent of fragments, this API means very little now. It's not being used anywhere, since we switched to `ActionBar`.", "pred": "Fixing a bug in SalesforceSDKManager"}
{"gold": "This change means that users can't easily see which version of the selenium server they're using. This is `info` level information.", "pred": "Fixing a typo in the GridLauncherV3 class"}
{"gold": "You should just use `with patch(...):`, so it unpatches it automatically. Also, much simpler.", "pred": "Fix auth test"}
{"gold": "This didn't use to work for me. Are you sure that returns the correct instance from startup?", "pred": "fix(MvxNavigationService): Fixing null reference exception when using MvxNavigationService."}
{"gold": "Looks good. Eventually we could remove some of these constructors, but for now adding these two seems the way to go", "pred": "Fix typo in MethodCallExpr"}
{"gold": "@jalavik should be have somewhere enum/list/registry of possible tags?", "pred": "Fix bug in get_holdingpen_objects"}
{"gold": "why is this pylint disable needed?", "pred": "Fixing the issue with the finding.get('source_properties').get('violation_data')"}
{"gold": "The new sync feature is only being supported from within Terraform. Installations using the deprecated method will have this feature disabled.", "pred": "Fixing the forseti-security repo url (#108)"}
{"gold": "This type of return (f'xxx') is not recommended, it is recommended to return 'xxx'", "pred": "fix dropblock"}
{"gold": "I would make this level 1 or 2.", "pred": "i#1004: Fix build break on Windows"}
{"gold": "Is that path in a variable anyway? Not a big fan of hard coding it here.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "nit: Move `IdentityTemplateLabel` to be under `IdentityTemplate` to match the struct in config_crd.go", "pred": "Fix import path for k8s-workload-registrar (#1265)"}
{"gold": "Not necessarily related to this PR, but don't you think having a centralized place for all interactions with analytics might make this into a very big class? Is that something that you don't worry about until it happens?", "pred": "fixing analytics"}
{"gold": "it seems that my terminal is dead when I press ctrl+c during running daisy cli today, is this PR fixing that?", "pred": "fix: remove unused variable"}
{"gold": "If we are going to add config to specify the maximum message pool size, we should probably also add a parameter for the maximum nonce gap and pass it into the `IngestionValidator`. This could be done in this PR or added as an issue.", "pred": "fix: typo in comment (#128)"}
{"gold": "please inline imports", "pred": "fix(engine): remove unused import"}
{"gold": "Should IptablesPostWriteCheckIntervalSecs be set back to its previous smaller value, if use of the iptables lock is disabled?", "pred": "Fix typo in comment"}
{"gold": "Please use packageInfo here instead. As it is used in `app.js`.", "pred": "Fix typo"}
{"gold": "this seems unrelated to the rest of the PR, although related to the original report", "pred": "Fix typo in AnalysisResult"}
{"gold": "Would a check for added columns with non-null default be sufficient for aligned format?", "pred": "HbaseAccess::isHbaseFilterPredV2() - fix for bug 10587"}
{"gold": "Is this PR implementing compute service account for OVF import as well? I thought it's only image/one-step import? Btw, OVF importer uses \"-\" instead of \"_\" in flags (should be `compute-service-account`).", "pred": "Fix import-ova-vm-image-from-gcs-bucket.go"}
{"gold": "Why change to element ?? in whole application use plural convention ??", "pred": "fix: remove unused import"}
{"gold": "Tiniest nit but this can be `tabindex={-1}`, `width={11}`, `height={11}`", "pred": "fix: remove unused import"}
{"gold": "Unrelated to this PR, we should remove this exception. We now require `numpy`.", "pred": "Fix typo in test_bridge_numpy.py"}
{"gold": "Is the loop over vars and adding them to the subworkflow below in this file needed, since it's already done by NewSubWorkflowFromFile?", "pred": "fix: subworkflow path"}
{"gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Having to write this util makes me think that maybe we should have kept the csv_input stuff. I don't know.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Passing in and saving a reference to the `BlockCache` at init time is going to break if something calls `config.ResetCaches()`, because it replaces the `BlockCache` instance completely. This happens on user logout or by a manual write to `.kbfs_reset_caches`. So you probably want to give it the whole `config`, or maybe just the `config.BlockCache` function pointer.", "pred": "fix: remove unused import"}
{"gold": "I am not sure this could happen. st should be nil if the error happens. If it does happen, we could also do st.Reset(), since it is an erroureous state so it closes both sides of the stream.", "pred": "fix: typo in comment (#100)"}
{"gold": "I'm guessing this was just added for debugging? Should probably remove it so we aren't modifying 3rd party libs.", "pred": "fix(requirejs): fix requirejs error handler"}
{"gold": "This seems reversed... if `success?` is true, wouldn't we use `success`?", "pred": "(maint) Fix typo in comment"}
{"gold": "This seemed like the easiest way to allow log level checks, it will require an update to the vendors tool, to ignore that file on update.", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Should we disallow entry authors to unsubscribe to their entries?", "pred": "Fixing diary comment form"}
{"gold": "2016 should be 2017.", "pred": "Fix copyright year in core.py"}
{"gold": "boolean exists = (existSchema != null) && (existSchema .getSummary() != null);", "pred": "fix microservice register task"}
{"gold": "It does not look idiomatic.", "pred": "fix: pool describe command help text"}
{"gold": "Generally, we do not use newlines between project imports, we only separate them from the stdlib imports", "pred": "fix(sql): fix import path for sqlmock (#1905)"}
{"gold": "can this long line be wrapped?", "pred": "Fix typo in nowPlaying.js"}
{"gold": "I'd use the same message that I suggested in the release changelog.", "pred": "Fix typo in comparison checker."}
{"gold": "Keep semi-colons at end of function defs please", "pred": "fix(document-array): fix typo in document-array.js"}
{"gold": "A little skeptical of `explain` being here. Why is this now a property of all commands?", "pred": "fix: remove unused import"}
{"gold": "License copied two times!!", "pred": "Fixing the copyright header"}
{"gold": "... their **superclass**", "pred": "Fixing a typo in the docstring."}
{"gold": "I'm not sure if this is the right thing to be doing here. It seems like there should be a more systemic fix instead of this patch.", "pred": "(BKR-102) Fixing the curl retries"}
{"gold": "Not sure why these are up here   can we move these down to be part of the `@return` tag instead? This is what we usually do   (e.g. `getCurrentEntityURL`)", "pred": "fix(selectors): fix typo in baseSelectors"}
{"gold": "Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.", "pred": "Fix to_semantic_values to return a hash with all keys"}
{"gold": "We keep who wrote the code anonymous.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Mention something in logs, that fake registration was used e.g. `Fake identity registered`", "pred": "fix(client): fix fake client"}
{"gold": "I think it would make sense to also set `internalWebPropertyID` to `''` here. Otherwise, it might keep its previous value (let's say a property was selected before, but then the user chooses \"Create new property\"), but since it always should depend on `propertyID`, that would be incorrect.", "pred": "Fixing a bug in the property selector."}
{"gold": "It might be reasonable to add a check that sanitization still fails here.", "pred": "Fix test case"}
{"gold": "Why not use attemptNo instead of another call to getAttempt? Even better, consider using a private method to calculate this string. This logic is in two places.", "pred": "Fixing a bug in JobRunner."}
{"gold": "Yuck. Rails bug.", "pred": "Fix project associations"}
{"gold": "It's useally a common practice to not use `l` as a variable (we have disabled this test in scapy because our code has tons, but it would have PEP8 failed otherwise), but it would be better not to create any. In general, single letter variables are not liked that much. Especially with windows where the fonts make 1=l How about `lay` ?", "pred": "Fix typo in docstring"}
{"gold": "DRY these 5 lines into a function call, no?", "pred": "Fix typo in comment"}
{"gold": "should we be trying to close here? or just return directly @fabxc ? same goes for `stopc`...", "pred": "Fix typo in comment"}
{"gold": "just re-ordered for clarity", "pred": "Fix approval manager spec"}
{"gold": "Can you fix this also to print what is the IP address used to connect. Rename --> \"M_API server\" to maya apiservice", "pred": "Fixing a typo in the volume info function"}
{"gold": "This fails on Go 1.11 because `indexByte` is already defined in strings_go111.go. I would suggest simply renaming one of the two, for example you could rename the other one to `strings_indexByte` (that will be one of the things we'll drop when we drop Go 1.11 support so it's better to make that one look ugly instead of the function that we will likely keep for a longer time).", "pred": "runtime: fix typo in comment"}
{"gold": "Now `dbType=' MockDbType.int32 '` is correctly interpreted and the value is rendered as an integer instead of a string; hence no more double quotes.", "pred": "Fixing test"}
{"gold": "typo in `$contend`", "pred": "fix typo"}
{"gold": "Nit: empty line", "pred": "Fix import order"}
{"gold": "I figured this was more fool-proof than trying to plumb the error up from everywhere.", "pred": "kbfs: fix a typo in favorites.go"}
{"gold": "We know debug and trace as globals exist and are defaulted to 0. In this instance we need to know that c is non- nil, srv is non-nil and logging is non-nil before we can trust this statement not to panic.", "pred": "Fix typo in comment"}
{"gold": "Good removal here for two reasons: we're redeclaring `app.ConfigPath` immediately below without having used the initial value, and `app.GetConfigPath()` will build the value using the same process as in this line anyway.", "pred": "Fix typo in comment"}
{"gold": "Should BuildBase be removed?", "pred": "Fixing the build break."}
{"gold": "this was a bad Goland auto-import that I missed in the previous PR. Thanks to @rkowalick and @acruikshank for catching it", "pred": "fix import path"}
{"gold": "Good catch here. Reading the code, it actually seems kind of dumb that `replaceAtom` needs to copy the atom it's passed. Ah well, we're more or less stuck with that.", "pred": "fix test"}
{"gold": "What's the reason for adding the output pointer here? I'd expect it to be derivable from the actual handler that's called.", "pred": "Fix typo in comment"}
{"gold": "I don't see tests for this (or the similar method on `Team`).", "pred": "Update plan.rb"}
{"gold": "should use Number instead of Long", "pred": "Fixing SetNetworkConnection to use the correct ConnectionType class"}
{"gold": "We had the checks for those two errors for a reason, why do we not need them anymore?", "pred": "Fix typo in comment"}
{"gold": "Why didn't you just switch to `range` here too?", "pred": "fixing import"}
{"gold": "I don't even think `nil` should be allowed, since it uses global state to get the client.", "pred": "storage/gcsblob: fix bucket name validation"}
{"gold": "You somehow got a change from `master` into your branch again, in e6d2167085688264e5ee6a81cfd2a7a8f10ded13. While it's not something terribly bad (as it will be fine after merging), it's kind of confusing, and I have no idea how it happens :laughing: Are you trying to update changes from `master` while working on your branch somehow? How do you do that?", "pred": "Fix #123: Add missing import to qt_message_handler"}
{"gold": "Minor, can we drop the leading `!` and just swap the if and the else blocks?", "pred": "ot-pull: Fix a bug in the delta-from-revision logic"}
{"gold": "`bbox_feats.shape[0] > 0` requires the number of proposal is not 0.", "pred": "fix bug"}
{"gold": "Just FYI, I had to remove this unused import because Travis/`npm run lint` were complaining.", "pred": "fix(CloseWrapper): remove unused import"}
{"gold": "format.h is not a system header but bundled with LAMMPS. This should be `#include \"fmt/format.h\"`", "pred": "Fixing a typo in domain.cpp"}
{"gold": "could we always call visitDocValuesWithCardinality? It seems to include the version check already?", "pred": "LUCENE-5744: fix javadoc"}
{"gold": "I think if they _don't_ specify a port, we should assume grid default (which is 4444)", "pred": "Fixing a typo in the error message"}
{"gold": "This looks to be a breaking change. I know it will affect some of my code that uses the Tautomer enumerator.", "pred": "fix tautomer enumeration"}
{"gold": "Perhaps remove this line", "pred": "Fix bucketlist output"}
{"gold": "Ah, missed this one. Sorry: you don't need to test the atomic number here. that's taken care of above on line 683.", "pred": "fix typo"}
{"gold": "roundInfo() is called by couple of places in consensus for safety, better test/verify the delay of return err due to this Sleep() would not affect the normal functionality, like consensus can still be reached, full-node can correctly sync", "pred": "[x/stake] fix roundInfo"}
{"gold": "This 32 could go away too.", "pred": "fix typo"}
{"gold": "These props should be less specifically named since the component is generic, for example `anchorLink`, `anchorLinkLabel`.", "pred": "Fix notification"}
{"gold": "In the future, it'd be great if we can separate commits or PRs that aren't in the same scope", "pred": "Fix typo in comment"}
{"gold": "can you define the string format on a different line, so it can be named, and so that it does not have to be constructed twice?", "pred": "Fix typo in comment."}
{"gold": "Can we write a unit test for this.", "pred": "Fixing the ansible galaxy install"}
{"gold": "Same as above, use `.delete('_autosave')`, not the command handler.", "pred": "Fix SSL error handling in AbstractTab"}
{"gold": "It isn't necessary to check whether there are projected ID columns. The code is shorter if the values are available by default, even if they aren't used. This fixes the problem where there are constants to add (like `_file`) but no identity partition values are projected.", "pred": "[SPARK-35895][SQL] Fix the wrong comment in BatchDataReader"}
{"gold": "Update after command rename", "pred": "Fix typo in comment"}
{"gold": "@KroArtem This is the Checkstyle violation. This import should be grouped with other `net.sourceforge.pmd` imports below, in alphabetical order", "pred": "Fix import"}
{"gold": "File is not `goimports`-ed (from `goimports`)", "pred": "swift: fix import path"}
{"gold": "This change seems unrelated to copying email addresses to the clipboard. Please limit the scope of pull requests as much as possible.", "pred": "Fix typo in MessageTopView.java"}
{"gold": "I'm assuming that there isn't a way for us to skip sending an fd here (-1?), and that we're allocating this fd just to send a legal but useless value across?", "pred": "seatd: fix typo in keymap_fd_write"}
{"gold": "might be good for the units (bytes?) to be in the variable name.", "pred": "Fix typo in transport.go (#100)"}
{"gold": "Metrics/BlockLength: Block has too many lines. [166/25]", "pred": "Add a route for the homepage"}
{"gold": "I'd end the sentence after `special indicator (line 3)`. And then start a new sentence: `The special field can indicate that the field specifies a reset, is a sequence ID, or is a timestamp for the record.`", "pred": "Added a note about the new CSVRecordStream"}
{"gold": "These empty lines can be kept.", "pred": "Update bbox_mapping_back.py"}
{"gold": "For some reason these tests started failing due to an extra `NEWLINE` returned from `h.query()`. Have not tried to check whether this may be a problem for real templates or not, just fixed the failing tests. Anyone with an opinion here?", "pred": "SOLR-10006: Fix VelocityResponseWriterTest"}
{"gold": "It is better to have a method than a var.", "pred": "Fix typo in tracecontext.go (#100)"}
{"gold": "concurrent poller won't be larger than concurrent execution. Jump from 2 -> 16 seems aggressive. I suggest to use 8. Ideally, this should be dynamic config. :)", "pred": "Fix typo (#1102)"}
{"gold": "List is redundant.", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Please use a string resource here rather than the hardcoded string \"user\". This allows the app to be multilingual.", "pred": "Fix #102"}
{"gold": "@aswathkk Why did we remove this import? I guess we are using it.", "pred": "fix(cstorpoolit): fix import path for citf_options"}
{"gold": "Why? I thought this is for graceful shutdown.", "pred": "Fixing a bug in the shutdown handler"}
{"gold": "Can `result.stdout` or `result.stderr` be nil?", "pred": "(maint) Fix output of task results"}
{"gold": "@mprobst Looks like the `isStdLib` function has been removed in the latest Python plugin. Any thoughts on how to handle this? The new version doesn't seem to have any relevant alternatives.", "pred": "Fix PyIssueParserProvider to use PythonSdkType.isStdLib()"}
{"gold": "How can there be a configured max ipset size? Surely we need to write ipsets with however many members are implied by the Calico datastore?", "pred": "Update config.go"}
{"gold": "This code is passing a non localized string when it should be passing in a localized string or it should use the name of the item being deleted.", "pred": "Fix typo"}
{"gold": "why not be consistent with `isNull` and `notNull` and return null?", "pred": "Fixing a typo in the ExpressionVisitors class"}
{"gold": "Did we forget to remove this field?", "pred": "Fix typo in comment"}
{"gold": "What if there is no element?", "pred": "Fix BaseRefreshableMap.clone()"}
{"gold": "I think you need to be careful to honour isTest and stamp here.", "pred": "Fix typo in comment"}
{"gold": "why zero value for `arrayType` for the default value of the optional args?", "pred": "fix: remove unused import (#101)"}
{"gold": "@robinbonnes ~~Would you mind putting the array key and value on a new line - it makes it more readable as an array.~~ Never mind, see discussion below.", "pred": "Fixing filter widget"}
{"gold": "I've never seen us do this anywhere else - why here? Why not `address, meshAddress string`?", "pred": "Update version"}
{"gold": "I think it's necessary only for the earlier \"dynamic\" approach. I suppose it's not necessary in the eager one.", "pred": "SOLR-10056: Fix typo in javadoc"}
{"gold": "Same here than [there](#r26168925)", "pred": "[Form] Fixing a typo in the docblock"}
{"gold": "Again we should think about moving this pattern to a static final field", "pred": "Fixing NPE in ApplicationDTO"}
{"gold": "haven't been implemented the `__constructor` for `NormalizerConfigPass` ?", "pred": "Fixing the config manager"}
{"gold": "Docstring is missing.", "pred": "Add a default value for meta_keys in Collect"}
{"gold": "I don't see the reason of this return as it will stop loading in half because an error, thats bad imo. Or you load it all and report errors or you load nothing and terminate, the first is as it always was so I wouldn't change that.", "pred": "Fixing a bug in the event loading code."}
{"gold": "change from AddPeer to AddPeers added a space in some occurrences", "pred": "fix: mock kademlia"}
{"gold": "Can you please revert changes to files in the `thoughtworks` package? This is legacy code and we will eventually phase out RC.", "pred": "Remove unused import"}
{"gold": "Do you remove \"s\" from \"iptables\" to IPTable\" on purpose? I feel it should be \"IPTablesRules\".", "pred": "Fixing import path for iptables"}
{"gold": "nit: not your problem - but I wonder if this should have been a \"ConstantResponseRpc\" - which takes a name and a value .... maybe a more reusable concept.", "pred": "Fix import"}
{"gold": "These changes have been resolved upstream. We can revert changes to this file when synced.", "pred": "Fix typo in metric/global/global.go (#1076)"}
{"gold": "The description predates this diff but I think we can come up with something more grounded.", "pred": "Fixing a typo in the docstring"}
{"gold": "Let the Kind, APIVersion & Metadata follow the rules followed by Volume. What is the reason for a change for snapshot struct ?", "pred": "Fixing the VolumeSnapshotData struct"}
{"gold": "seems that we did not strong depend servo no need to keep it? change to another one?", "pred": "[SCB-1165] fix checkstyle"}
{"gold": "Looks like this used to be UB before with an empty blocks and then calling `.second` on the `.front()`. Did it ever crash though?  ", "pred": "Fix rpc_test"}
{"gold": "Sorry about the code churn here, reworking this use normal loops and async await made debugging far more straight forward. For example, if configuring the fail point fails you find out when stepping over that line vs having to look for the ultimate catch clause that handled it.", "pred": "Fixing a bug in the test generation script"}
{"gold": "this is wrong and should be reverted", "pred": "Fix test launcher jobs"}
{"gold": "I think you'll need to add an import for runtime, before you can merge this PR. (Presumably it was already there for something else when you were working on this, but has since disappeared.)", "pred": "Fix log.Fatalf to log.Fatal"}
{"gold": "Unrelated typo fix.", "pred": "Fix test class name"}
{"gold": "I don't think we need an empty value here; any middleware that wants a default value for empty placeholders will pass in what that value should be.", "pred": "Fixing a bug in the replacer."}
{"gold": "Why was this changed?", "pred": "Fix storybook host detection"}
{"gold": "Compared to using traditional enums, I suggest to use `Status` or `StatusOr`, since they are more expressive and informative. Besides, isolating the definitions of error code of individual modules from the ones of the RPC interface is a good practice, isn't it?", "pred": "fix(kvstore): fix a bug in kvstore (#1048)"}
{"gold": "Use the return of the conditional for variable assignment and comparison.", "pred": "Fix typo in comment"}
{"gold": "just realised... This breaks things since there is not selenium types module, is there a PR for this?", "pred": "Update file_detector.py"}
{"gold": "move to line 23 below", "pred": "[tests] fix import path"}
{"gold": "the first problem i found in the passcode change flow is that these two lines were happening in 'lock()' but not in 'showLockActivity' which is what the passcode change flow calls. I've just moved them to happen in that method.", "pred": "[android] fix lock screen"}
{"gold": "Doing this adds the actual resources themselves to the dictionary. I think for now, there's no way to know what the resource config provided may be, as we don't permit resource config on `build_solid_context`, so this part can be omitted.", "pred": "fix typo in solid execution context (#2974)"}
{"gold": "1 trailing blank lines detected.", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "I would personally prefer a filename without an abbreviation, a newcomer to the project wouldn't be able to translate \"pv\" to \"partition-value\".", "pred": "Fixing the require path for uuid-sync-tests"}
{"gold": "This check looks odd to me. I can't quite grok it. Why is it needed now? What's changed?", "pred": "Fix typo in MvxViewModelExtensions"}
{"gold": "This change is needed because otherwise the path was being changed from `path/store/jetstream` to `path/store/` and files stored differently after re-enabling.", "pred": "Fix typo in comment (#1585)"}
{"gold": "is this necessary? doesn't `client.close()` imply all sessions will be ended?", "pred": "test: fix examples test"}
{"gold": "Extra line, it's not needed here.", "pred": "cmd: fix import path"}
{"gold": "Is this OK to add in the spec helper? I need to call `Bolt::PAL.load_puppet` so that I can use the new `Bolt::PAL::Issues` module when verifying that plans forbid functions.", "pred": "(maint) Fix puppet_spec_helper"}
{"gold": "or is it `i < length - back.length()`? `\"12345\".padTo(10, 'a')` should be `12345aaaaa`", "pred": "Fix typo in CharSeq.java"}
{"gold": "custom_imports -> custom_hooks", "pred": "Update train_detector.py"}
{"gold": "I don't get why are we baking new hash structures to represent phases, sections, questions. We are not only loosing the references defined in models but also we have to figure out keys and values for this newly structures.", "pred": "fixing question text"}
{"gold": "It's somewhat confusing that the `preload` parameter shadows the instance variable; maybe rename the instance variable to `globalPreload` or `preloadDefault` or so to prevent future confusion?", "pred": "LUCENE-5744: Fix javadoc"}
{"gold": "Are we setting these values anywhere?", "pred": "Fix typo in ScheduledJobConfig"}
{"gold": "This has to be in front of all other includes", "pred": "fix: remove unused include (#1055)"}
{"gold": "These changes make sense to me. @ricrogz : you wrote (I think ) the original version of this as part of #2553 Do you see any reason to not make the change?", "pred": "fix stereo bonds"}
{"gold": "`window.self === window`", "pred": "fixing typo"}
{"gold": "maybe we should keep one test case for ErrFileNotExists and update only one file for ErrWorkspaceNotFound?", "pred": "fix: typo in test name (#1110)"}
{"gold": "Please add `ConsigureAwait(false)` here and on `ShutdownAsync` below.", "pred": "Fixing a bug in the BatchSpanProcessor (#1006)"}
{"gold": "Isn't this a false positive? Why are we reporting `unused-variable` on a `del` operation with a `undefined-variable`.", "pred": "Fix undefined-variable test"}
{"gold": "Is it correct that `SessionDto` should be here?", "pred": "fix(client): fix fake client"}
{"gold": "sorry I missed this earlier. We no longer use ovs-ofctl for flow programming AFAIK, why not add this support to ofnet / libOpenflow?", "pred": "Fixing the ovsctl client to use the new ovsctl command"}
{"gold": "Make this consistent with the other definition please `'false'` vs `false`", "pred": "Fixing Form widget documentation"}
{"gold": "I think this is a good way to do it. :+1:", "pred": "fix(cleanup): fix cleanup handler"}
{"gold": "Why this is needed?", "pred": "fix: import path"}
{"gold": "Can we define this directly in the function `NewConnTrackOvsAppCtl` instead of passing this as an argument?", "pred": "Fix import"}
{"gold": "False positives are annoying...", "pred": "Fix typo in comment"}
{"gold": "Is the infrastructure layer an appropriate one? I don't think so tbh, more like an application, or even a domain one.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Why is this required to turn the static readonlies into jitted const? Is this a bug in the jitter?", "pred": "Remove unused usings"}
{"gold": "feel free to make this a \"typed\" named tuple (overriding __new__) if you are feeling frisky", "pred": "Add a function to serialize a SerializableErrorInfo object to a string."}
{"gold": "Would use parenthesis to explicitly state the associations of operands ```js const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || ((2 ** 53) - 1)", "pred": "fix(maxSafeInteger): use Number.MAX_SAFE_INTEGER if available"}
{"gold": "The bug was caused by this order change in the last refactoring.", "pred": "fix: diff list"}
{"gold": "This is already imported as docker. You're safe to simply use `docker.utils.kwargs_from_env()` below.", "pred": "Fix import order"}
{"gold": "No need to add this fun. Using RunnableActionsBuilder#AddActions instead", "pred": "Fix typo in RunnableActionsBuilder comment"}
{"gold": "I don't think it's possible to do this for hooks  ", "pred": "fix: remove unused variable"}
{"gold": "wait(1ms) when sec=0. wait(0ms) waits forever so that's why this is better.", "pred": "Fixing sleep job"}
{"gold": "Do we need `domain` and `so_reuseport` now that we open new sockets immediately after calling `add_listener`?", "pred": "fixup! listener: add proxy_protocol flag"}
{"gold": "The formatting seems different from the rest of the code", "pred": "Fix javadoc"}
{"gold": "What about calling this package \"parameters\"? utils\\parameters are utils related to parameters.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "pred": "Fixing the topic model spec"}
{"gold": "what is the actual difference here?", "pred": "Fix test"}
{"gold": "Parsing URLs is hard. Any fixes should avoid manually parsing the URL.", "pred": "Fix typo in OAuth2AuthorizationRequestResolver"}
{"gold": "This is a private api, it doesn't need to return anything so `@group_level -= 1 if @group_level > 0` is preferred.", "pred": "Fix RSpec 3.0.0 compatibility"}
{"gold": ".GetValueOr(0) ... but really, shouldn't m_value_strife also be optional?", "pred": "[lldb] Fix a typo in the comment"}
{"gold": "Working around a possible limitation in the JSDoc plugin's typescript syntax checking. This means the same thing", "pred": "fix: tus plugin"}
{"gold": "Should be readonly", "pred": "Fix typo in comment"}
{"gold": "I'm not going to stop accepting the PR, but I really hate these artifacts getting dropped in the Python code just to stop things like coverage checkers and linters from complaining.", "pred": "fixing import"}
{"gold": "FYI modifying an existing file generally doesn't invalidate the copyright date. The date here is when the copy right _begins_, so moving it later is arguably misleading-it still applies. Not a big deal, just something I've seen a few times in passing.", "pred": "Fix typo in license header (#2877)"}
{"gold": "Because the default value of allowedOrigins is * (all origins), so it isn't necessary to set again at all.", "pred": "Fix typo in comment"}
{"gold": "Style: indentation should be 4 spaces (2 indents) from the start of `Preconditions`.", "pred": "Fix HiveCatalog"}
{"gold": "I don't know why I suggested a html attribute at first (my bad), or maybe you think it makes sense. Otherwise, what about a simple class ?", "pred": "Fixing the admin controller"}
{"gold": "Probably want something more generic here like 'DMPRoadmap' so that other installations aren't using UoE by default.", "pred": "fixing the branding config"}
{"gold": "Must this not change to `MustBeRethrownImmediately`?", "pred": "Fix #1335 - NLog.config not working with .NET Core 2.0"}
{"gold": "Can it be pointer?", "pred": "fix: remove unused import"}
{"gold": "Not related to this issue but this condition seems weak.", "pred": "Update authentication.js"}
{"gold": "I think this might be a little more readable in two lines as: <pre> $preferredMarcField = $this->mainConfig->Record->preferredMarcField ?? 'fullrecord'; $marc = trim($this->fields[$preferredMarcField] ?? $this->fields['fullrecord']); </pre>", "pred": "Fixing a bug in the MarcReaderTrait"}
{"gold": "does this still allow this file to be used with Python installations that don't have numpy?", "pred": "Fixing a typo in the python documentation"}
{"gold": "what about 0? Version probably can' start with 0, but v10 is theoretically possible.", "pred": "Fix go_package for cloud.google.com/go/storage (#100)"}
{"gold": "Usually we consider APIs that have filesystem interactions to be part of IFileHelper, this would allow us to inject a testable implementation easily. `Path.IsRootedPath` doesn't access the file system. It is string comparison I believe.", "pred": "Fixing a bug in the file helper."}
{"gold": "Do we need to use quote? Why not `status: Init`", "pred": "fix(cstor-volume-create): fix the cstor volume create job"}
{"gold": "Nice catch ! I don't think I would have caught that, did you search the whole code base for pre-existing functions ?", "pred": "Fix typo in docstring"}
{"gold": "Remove this line.", "pred": "Fix test"}
{"gold": "This is no longer called in any of our unit tests, right?", "pred": "Fix typo in test name (#10555)"}
{"gold": "I think typically K8s APIs will use `int32` and not `uint32`. I think we should keep it consistent with the rule `Priority` above. I believe that the rationale for using `int32` in general is: * some programming languages don't have native support for unsigned integers * it's easier to catch sign errors with signed integers, depending on the programming language (it it's negative, it's clearly an error but if it's a very large number, it could be normal or it could be a negative number overflow)", "pred": "Fix comment"}
{"gold": "If you end up changing grant to an association, this may need to change to a reference to enforce the foreign_key `add_reference :plans, :grant`", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "This won't work because `notification` comes from an API response here. I think this would be the same as the change to `Alert` where it would get `SmallSunSVG`.", "pred": "Fix undefined notification in DashboardModulesAlerts."}
{"gold": "This is not checked below?", "pred": "Fix test"}
{"gold": "Will this ever return a \"Stack does not exist\" error? Should we handle it silently here rather than making higher level packages do error checking?", "pred": "Fix typo in comment"}
{"gold": "minor: at this scale, one import per line reads better", "pred": "Fix import"}
{"gold": "Should remove the default templates as well.", "pred": "Fix schema"}
{"gold": "Why not `let`?", "pred": "fix(gulp): fix gulpfile"}
{"gold": "ns -> DNS My first reading was this is referring to System.nanoTime and thought hrm?", "pred": "Fix typo in ZipkinServer (#1836)"}
{"gold": "is there a reason not to remove the param now? I think the serdes will still work?", "pred": "Fix typo in ScheduleInstigatorData"}
{"gold": "`places=2` seems to be very poor comparison. Do you have any thoughts why is it fail with more strict checks?", "pred": "[python] fix test_basic.py (#2857)"}
{"gold": "should we make level debug? Also just FYI, with debug level, we can add more detailed logging for better debuggability without concerning overwhelming logging message", "pred": "Fixing a bug in ProjectManager."}
{"gold": "I needed to add this import for Sphinx to inspect C++ runtime objects properly. This should be the only code change in this PR.", "pred": "Fixed import of numpy"}
{"gold": "Changes in this file aren't related to the PR, are they? You took the opportunity to change the group deletion to using the subscriber too?", "pred": "Fix import in cliquet_storage."}
{"gold": "I'd probably move this into `MetricsConfig` as a private method. Seems like we only use it there.", "pred": "Fix MetricsModes serialization"}
{"gold": "Not clear here what you mean with this list", "pred": "Fix lint command"}
{"gold": "Curious, is there a way we can get around this without suppressing?", "pred": "Fix typo in IcebergDecoder"}
{"gold": "I don't think we this field in session, it's a serial number for proposal but not unique index itself", "pred": "Fix typo in comment"}
{"gold": "Can't have two benchmarks with `Baseline = true`", "pred": "Fix typo in comment"}
{"gold": "Same here: Empty line before and no `Internal dependencies` docblock (mandatory anyway once #217 lands).", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "sorry, the default value for this field is no longer allowed?", "pred": "Fix typo"}
{"gold": "Why does this work? I'd've expected that an admin could create a file anywhere.", "pred": "Fixing test"}
{"gold": "falling back to `x64` seems like a really bad idea given that the VS templates default to x86 these days.", "pred": "Fix xbuild command"}
{"gold": "Bit surprised by this. I would have thought either you want to set it for both mpl and bokeh...or alternatively it was only ever meant for bokeh and was always wrong?", "pred": "Fix test_overlay_legend"}
{"gold": "Check modname instead, but only if it's a ImportFrom.", "pred": "Fix #100: Add support for relative imports"}
{"gold": "How about `write.metadata.previous-versions-max`? No need to refer to these as a log.", "pred": "[CALCITE-2284] Add a new property to control the number of rows in a block"}
{"gold": "We generally do this via tags in the Rakefile, not separate environment variables.", "pred": "Fix typo in spec_helper"}
{"gold": "Update after command rename", "pred": "Fix typo in comment"}
{"gold": "`if X not in Y:`", "pred": "Fixing bug in CLAModel"}
{"gold": "Do we know why the pool is exhausted? In the past, we had a few leaks in the Spark catalog code which led to this. It can be also a valid use case too if we simply need a larger pool.", "pred": "HIVE-10270: TestHiveShell fails with NPE (<NAME> via <NAME>)"}
{"gold": "Logging in Bolt still seems to be a little messy. I think this is more correct than what I had before, but made sure I wouldn't overwrite an existing level. And if console logging gets more options, both debug and verbose need to be fixed here.", "pred": "(maint) Fix typo in bolt-server command line option"}
{"gold": "This could be simplified (if including <boost/algorithm/string/erase.hpp> is fine): `auto address_string = boost::algorithm::erase_first_copy (address.to_string (), \"::ffff:\");`", "pred": "Fix work_peer_request"}
{"gold": "This is wildly unhelpful to users --- they need to know when a proxy has been registered.", "pred": "Fixing a typo in the log message."}
{"gold": "Why do we need `do_not_validate_attachment_file_type` is we're doing it in the previous line?", "pred": "Add a default scope to topics"}
{"gold": "Loading login page right away only for the regular use case.", "pred": "Fix bug in LoginActivity"}
{"gold": "IIRC this flag disables re-rendering entirely (`s/recursively //`)", "pred": "Add missing export"}
{"gold": "Did you test this redirect? @thornbill mentioned it might need `web` at the front, but if this works fine I'd rather leave it this way.", "pred": "fix: remove loading on wizard finish"}
{"gold": "FYI, this returned `StringValues` which is a value type (aka can never be null).", "pred": "Fix test"}
{"gold": "Oh no, that's a bug.", "pred": "Fix hashmapMake call"}
{"gold": "Let's leave a note in CHANGES to replace this with an error metadata struct or interface, unless it would be less effort overall to take a run at it in this change.", "pred": "Fix comment"}
{"gold": "The changelog entry does a better job of explaining how this is used than this description. In particular, this says that you need to set `mapTo` if the underlying name is different, but not that `mapTo` *is* the underlying name.", "pred": "Fix typo in Realm.Object docs"}
{"gold": "These imports will probably need to be refactored so they aren't here. That applies for all of the database drivers. The reason for this is because we sometimes want a driver to be available and sometimes we don't. When we include this library in our cloud offering, the sqlite3 connector needs to be gone because it's a security vulnerability and there's no use case for it in a cloud environment. But for flux itself, I can see how sqlite3 would be really useful and so I like this change. But this import needs to only exist within the tests and within the `cmd/flux` package. It cannot be here.", "pred": "fix(stdlib): fix import path for pq driver"}
{"gold": "We can use `getQualifiedKeyName` here instead. I will update.", "pred": "Fixing bug in RelationController"}
{"gold": "Could you clarifty why some of those are removed?", "pred": "fix: add missing semicolon"}
{"gold": "`ctx` is unused in ListDeploymentConfigTemplates", "pred": "Fix typo in webapi_fake.go"}
{"gold": "nice to see the usage of block for a more readable link name", "pred": "Fix typo in user_orcid_omniauth_authorize_path"}
{"gold": "Can these use `static_cast<unsigned long long>` instead? Other than that, it's fine.", "pred": "Fix MPI_File_read() error message"}
{"gold": "This output is only present when `DEBUG=True`. Does it really bother so much?", "pred": "Fixing a bug in the config file parser"}
{"gold": "I think it should pass wallet transaction as well, otherwise there will be 2 wallet read transactions in 1 threads (next in scan_receivable)", "pred": "nano/node: Fix search_pending"}
{"gold": "RDKit::Utils is now in the namespace for localeswitcer... We could change it to something else.", "pred": "Fixing a bug in MMFFMolProperties::getMMFFVdWParams"}
{"gold": "@itholic, can we fix it in `_normalize_keyword_aggregation`?", "pred": "Fix groupby.py"}
{"gold": "It seems like we have the main plan in the database but the downgrade plan in the code. Probably okay for now, but as our thinking of how downgrades/plans develops we may want to consolidate.", "pred": "Add a comment to Subscription"}
{"gold": "we shouldn't add a bunch of static initializers 'everywhere' in the code. Probably just one would be good, during the construction of the 'RemoteWebDriver' class.", "pred": "JasonLeyba: Fixing javadoc error in By.java"}
{"gold": "do we need both flags? maybe infer that `clef-signer-enabled` whenever `clef-signer-endpoint` is defined?", "pred": "fix(gateway): fix typo in gateway mode option name"}
{"gold": "Do we need this? I didn't see css files (only scss).", "pred": "fix(test): fix test"}
{"gold": "This feels like a weird `if not ... or not` to me. Can you talk out the intent here?", "pred": "fixing a bug in the store"}
{"gold": "Align the parameters of a method call if they span more than one line.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "`@package *` can be removed as well.", "pred": "[BUGFIX] Fixing namespace"}
{"gold": "@ScottGarman is there a reason that `redhat_fips` needs to be a beaker platform? Why can't it be another platform that beaker just understands as `redhat`?", "pred": "(maint) Add suse to supported platforms"}
{"gold": "Where is the other place?", "pred": "fix(store): fix the bug that the store will crash when remove a part (#1825)"}
{"gold": "Are you subclassing from `UserList` instead of `list` to satisfy some constraint of Jython? My main concern here is that this is a subtle breaking change to the API because `UserList` is not a subclass of `list`. This has the unfortunate side effect of breaking any user that is using `isinstance` checks to see if a `ResultSet` is a `list`.", "pred": "Fixing import error in s3.user"}
{"gold": "We can DRY the above three functions", "pred": "Fixing the avatar helper"}
{"gold": "Only no good is good code. Nice that you were able to remove all this duplicate stuff!", "pred": "Fix typo in HashMap.java"}
{"gold": "Looking at the code, it seems very odd that this method even exists in the SurfaceNamer, since it is only implemented and used in the PhpSurfaceNamer, and in fact the RetrySettings class name is hardcoded elsewhere. WDYT of just removing this method from SurfaceNamer and PhpSurfaceNamer?", "pred": "fix: php surface namer (#105)"}
{"gold": "these interfaces are defined twice. we should use only one and have it in `storage` package maybe", "pred": "Fix typo in split_write_all.go"}
{"gold": "This is the wrong context for usage of `global` keyword. It need only be used inside functions.", "pred": "Fixing import error in opfmodel.py"}
{"gold": "this change should be described in the changelog. I'll update it when merging if nothing else arises.", "pred": "Fix typo in comment"}
{"gold": "Just to stay consistent with naming let's call it CreateGRPCDispatcherForOutbound. Also rename 'CreateDispatcherForOutbound' to 'CreateTChannelDispatcherForOutbound'", "pred": "Add a comment to the RPCFactory interface"}
{"gold": "This will always need to be displayed to users.", "pred": "Fixing a typo in the Docker class"}
{"gold": "This looks very much like `repr` now (we miss 127 though) - maybe just do `repr(x)` + strip outer parantheses?", "pred": "Fix safe_subn"}
{"gold": "I don't see this field is set in task_generator.go. worth to double check if we put the timestamp when creating replication tasks.", "pred": "Fixing a bug in the replicator queue processor"}
{"gold": "nit: I prefer the space before and after this check to make it very easy to scan when reading through code", "pred": "fix(cursor): fix hasNext() to return false when cursor is exhausted"}
{"gold": "should users also do a triple-flush?", "pred": "Fixing typo in the logger example"}
{"gold": "What is the implication of removing these from the test? I thought the idea was to have all types supported by `docstore` here, and do things in the drivers to make them support them (e.g., list of size 2 for complex). If you're removing them because firestore doesn't have native support, then we're going to end up only testing the intersection of all types supported by all drivers; we need a better way.", "pred": "Fix testCodec"}
{"gold": "Let's also adjust the somewhat weird type signature here as well. This probably should be `typing.Any` instead of `str` in the last line if we intend to support ints.", "pred": "Fix bug in DataViewer."}
{"gold": "The body can just be `os.RemoveAll(dir)`", "pred": "blob/s3blob: fix test"}
{"gold": "Is this covered by regression tests? Also you might make a patch onto refactor branch.", "pred": "[CALCITE-1181] Fix a bug in Cast"}
{"gold": "This is maybe more of an admin request? WDYT?", "pred": "SOLR-1100: Add javadocs for SolrPing"}
{"gold": "Here I thought of `toHashMap` and later add `toTreeMap`. But I start to see, what you may have in mind. Alternatively we could provide a `toMap` and `toSortedMap`, which is great, too. On the other hand is always good to be as specific as possible. What do you think?", "pred": "TraversableOnce.toHashMap: add missing @return tag"}
{"gold": "maybe localProjectAppNames? Just a thought.", "pred": "Fixing a typo in the app deploy command"}
{"gold": "This isn't new, but getHeightWidth is now defined in block_svg.js, block_render_svg_horizontal.js, and block_render_svg_vertical.js. One of these should be unnecessary.", "pred": "Fix #1000: Make sure that the next block is not null before calling getHeightWidth."}
{"gold": "I can't see any reason why this would fix a failure in `a.True(confirmed, \"txgroup\")`. We might have an issue elsewhere, but increasing the wait time wouldn't help.", "pred": "Fix test"}
{"gold": "This section needs to be modified; crontab format differs between OS releases (Debian and CentOS, at least).", "pred": "(maint) Fix typo in sysstat_service_provider"}
{"gold": "if we think this is likely to be augmented with a additional 'run coordination' features or configuration in the future, we could make it an object of some kind instead (or an enum, if we think there may be other resume modes in the future besides just on/off). Just imagining 6 months in the future, it would be unfortunate if there were 7 new args here as the feature gets more complex", "pred": "fix import"}
{"gold": "`affine_grid` and `grid_sample` are currently unused. We may remove it from `ops/__init__.py` to speedup the loading of mmdet.", "pred": "Fix import error in roi_align (#1053)"}
{"gold": "Is there a reason why you need to support negative `AttackTimeout`? Why not just throw an error?", "pred": "Fix typo in comment"}
{"gold": "nit: an unnecessary change?", "pred": "Fix import error in pandas_utils.py (#109)"}
{"gold": "Is trailer parsing something we have to do in this PR? It would be really helpful to separate stuff like this into smaller, self-contained PRs.", "pred": "fix import"}
{"gold": "Any chance of a wait-forever situation here? Is there a reasonable timeout?", "pred": "Fixing a typo in the openstack volume cleanup code"}
{"gold": "line is 165 characters", "pred": "fix: typo in comment (#1015)"}
{"gold": "is this for cross DC case?", "pred": "fix(integration): add missing import (#3525)"}
{"gold": "Remove this line.", "pred": "fix setup.py"}
{"gold": "Maybe it would make sense to use `webmVideoCodecs` here and just append `vpx`. I'm not sure if av1 is currently supported when transcoding to webm though. It looks like it can be included in the mp4 transcoding profile now.", "pred": "Fixing the vp8 profile"}
{"gold": "Interestingly, this has nothing to do with replication, no clue what this means here", "pred": "LUCENE-5784: Fix typo in javadoc"}
{"gold": "Is that because we don't provide a UI for these?", "pred": "Fix typo in comment"}
{"gold": "Standard is either to use `HappyPath` (CamelCase) or `happy path` (lowercase sentence). I usually prefer the latter.", "pred": "fix(stdlib/csv): fix import path for fluxinit"}
{"gold": "instead of using blkMemDao, we could generate a blockMemDao, and then use it as the second parameter.", "pred": "Fix test"}
{"gold": "nit(2/10): `topology && topology.description != null`;", "pred": "fix: add missing semicolon"}
{"gold": "why the space? I may not know all the style conventions.", "pred": "Fixing import error"}
{"gold": "Should be \"should fail if the **dt element** has a parent <dl> with a changed role\"", "pred": "Fixing test for dlitem"}
{"gold": "Just to be clear: 1. This is required for compression, right? 2. This won't actually result in our dynos serving the assets, since they'll be served via the CDN, correct?", "pred": "Add missing comma"}
{"gold": "not sure about removing this ping @Soullivaneuh", "pred": "Fix CS"}
{"gold": "Put a comma after the last parameter of a multiline method call.", "pred": "Add missing delegation"}
{"gold": "If instance could not be found when the provider id is set, `findInstance()` returns `ErrInstanceNotFoundByID` error. So that during reconcileNormal(), we don't create a new instance. In `reconcileDelete()`, when ErrInstanceNotFoundByID is seen, deletion continues to clean up even if the instance is gone (may be manually deleted).", "pred": "Fix test"}
{"gold": "I would recommend making this a Tuple&lt;ReplicateValue, IColllection&lt;object>> You only need to convert things to strings if you need to persist them in Settings or something. If they only need to live for the life of dialog, you can keep everything as objects. You can use \"null\" for the ReplicateValue for when they have not chosen a property.", "pred": "Fix #1376: \"Align to RT\" button is not disabled when no RT prediction is available"}
{"gold": "I think there is no point providing action key here, as it will be called specifically, rather than randomly", "pred": "Update google.js"}
{"gold": "`XUnitIntegration` doesn't need to cache this anymore.", "pred": "Fix typo in XUnitIntegration (#1014)"}
{"gold": "Can we have something line `# noqa` there instead? I think it's fine like this though.", "pred": "luacheck: ignore 113"}
{"gold": "this variable is used in both branches so I've decided to declare it above", "pred": "fix: allow-uri-read attribute is not supported in safe mode"}
{"gold": "`setFlags()` overwrites the previous flag, we should be using `addFlags()` to append flags.", "pred": "Fixing the issue with passcode manager"}
{"gold": "Need `return` after this.", "pred": "Fix #10541 (#10542)"}
{"gold": "I would say we should not use the `CacheableResponseTrait` within the `JsonResponseTrait`. Traits within traits tend to lead to a bad developer experience as it can be really hard to find the actual method you're seeing in the implementing class, and in this case it looks like we're using _both_ the cacheable and the JSON traits in the same controller, so it's redundant anyway. I'd recommend just removing that use statement from `JsonResponseTrait` and make sure `ChaceableResponseTrait` is included everywhere it's needed specifically.", "pred": "Fixing typo"}
{"gold": "This change is unhelpful: it precludes users from knowing which ports are being used for what purpose within the system.", "pred": "Fix typo in comment"}
{"gold": "Whoa, we weren't doing this before?? Derp.", "pred": "Add helper method to check if user is admin"}
{"gold": "I'm surprised we didn't go with something like `flow := f.Flow.Copy()` to take care of all the fields at once, but as long as it works it's good enough for me", "pred": "Fix ofFlow.CopyToBuilder()"}
{"gold": "We would like this code to run, even when `config.XDPEnabled` is false, so that Felix can clean up its own XDP state after a restart.", "pred": "dataplane: fix typo in comment"}
{"gold": "I'd declare this field `qualifiedName` private to hide it. Unless it really needs to be modified from somewhere else... (e.g. unit tests..), but then, we should find a solution, where this field can stay private.", "pred": "Fixing a typo in the javadoc."}
{"gold": "is this exhaustive? or rather, any psudo header started with `:` is un-parsable/invalid in HTTP/1 right?", "pred": "fix(outbound): remove unused import"}
{"gold": "Is this change implying something or just seems fit b/c regardless of outcome the sessions should still be length 1?", "pred": "test(sessions): fix sessions test"}
{"gold": "Maybe throw an exception if there is more than one, so that discovering the lack of support is easier when someone tries to use it down the road.", "pred": "Fixing the discovery generator"}
{"gold": "Prefer single-quoted strings when you don't need string interpolation or special symbols.", "pred": "Fix routes"}
{"gold": "I feel the name of this function could be better, conveying it's a predicate. Something like `HasDockerTestEnvironment` or `CanRunLocalServerTests`, etc.", "pred": "Fix gofmt"}
{"gold": "This seems unrelated to your PR, how did this end up in here?", "pred": "Fix typo in comment"}
{"gold": "Is `username` expected to be case insensitive?", "pred": "Fixed bug in InMemoryUserDetailsManager"}
{"gold": "File is not `gofmt`-ed with `-s` (from `gofmt`)", "pred": "fix test"}
{"gold": "Is there any point to the deprecation? If someone was using these APIs, can they continue to do so in any meaningful fashion now that you've disconnected them from the PMD internals? Normally \"compiles but doesn't work\" is considered a bug.  ", "pred": "Fix import"}
{"gold": "You can remove the `QItemSelection` import in this file now.", "pred": "Fix completion view"}
{"gold": "Use `std::shared_lock` and `std::try_to_lock_t`. BTW. Why we fail on contention?", "pred": "Fix the bug that the space id is not set in ListSpacesProcessor (#1040)"}
{"gold": "Not sure what this actually does, but do you need to add `\"\"` here? Or does `[\".jsx\", \".js\"]` work too?", "pred": "fix(tests): fix webpack config for tests"}
{"gold": "let's group imports in the order: std third party first party", "pred": "fix import"}
{"gold": "So the tests run only when the db exists? Else everything passes?", "pred": "Fixing test"}
{"gold": "`Remove` is unclear. It seems the point is to allow the `FifoByteSink` to delete the underlying file. There seems to be an implicit contract that consumers of this interface call `Remove` after `Close` without necessarily understanding what `Remove` does. I get that it's a little awkward to have `FifoByteSink` delete the file in `Close`. It would probably be best to just remove this from the interface, since `AddSink` is working with an actual `FifoByteSink`. I would rename it in `FifoByteSync` to `DeleteFile` or `Cleanup` or something that's makes it more clear what's being removed.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Mentioned elsewhere but repeating again: would be nice to have units (ideally `Size *Bytes`).", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "I think a test in `spec/integration` might help keep this file a bit more manageable, especially since we're just checking file contents and errors. But basically the same idea!", "pred": "(maint) Fix spec"}
{"gold": "This spec can be modified, giving you extra strength (Check this fetch key doesn't work and therefore returns `nil`)", "pred": "Fix typo in chrome_spec.rb"}
{"gold": "So this means that we can remove a callback via instr_set_label_callback(). Maybe consider adding another API function for removal, and add a new assert here such that cb != NULL?", "pred": "i#1504: Fix typo in comment."}
{"gold": "why are we using an instance variable instead of accessing the visibility method?", "pred": "fixing copyright text"}
{"gold": "Ok. Can we just disable this linter?", "pred": "caddyhttp: update caddyhttp import path in go.mod"}
{"gold": "this is `test_data` and all other instances are `testdata` - does this change affect any test files, or are there actually no directories called `test_data` in the repo? (I just checked, it seems like there aren't...)", "pred": "Fix test_database.py"}
{"gold": "Fixing `lint` warnings that have existed for a while.", "pred": "Fixing the api version string"}
{"gold": "Better to rename this to CASDefaultCstorSparsePool.", "pred": "fix(install): fix the env key for install config name (#1048)"}
{"gold": "Since we'e not 100% sure if `close` will be called more than once, should we set `client` to `null` or add an `AtomicBoolean closed` that will then handle the idempotency issue?", "pred": "Fixing S3FileIO"}
{"gold": "And here - what happens if name id is invalid", "pred": "Fix bug in motorway handler"}
{"gold": "__toString() is not a part of QueryInterface", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "nit: Could you add an empty line between `import datetime` (built-in library block) and `import numpy as np` (third-party library block)?", "pred": "Fix import"}
{"gold": "Please remove `HIP_UNSUPPORTED`", "pred": "[HIP] Add missing hipErrorInvalidValue to CUDA_DRIVER_TYPE_NAME_MAP"}
{"gold": "Having boolean parameters to change function behavior is not a good practice because it violates the principle of functions being responsible for a single task, so the need for this indicates we need to split something out of here instead. We can introduce a function like `getCurrentDateRangeDayCount` or similar, which does this.", "pred": "Fix typo in constant name."}
{"gold": "Is this not required?", "pred": "test: add test for basic auth with wrong credentials"}
{"gold": "savedStates is for confirmed states, not needed in working set", "pred": "Fix comment"}
{"gold": "Why should we move it into `bootstrap.go` file?", "pred": "fix(market): fix import path"}
{"gold": "In the next major version, I plan on changing the em-unit breakpoints to be pixel values to keep everything consistent. Would be great to handle this with pixels as well, but still allow em-units to be defined with a string", "pred": "Update theme.js"}
{"gold": "I don't think this will actually align the indexes, if you have > 100 tabs, the tabs over 100 will be misaligned. In addition with less than 10 tabs, there will be a pointless space.", "pred": "Fix tab widget title formatting"}
{"gold": "hrm, unsigned headers now won't be included.", "pred": "Fixing a bug in the v4 signer"}
{"gold": "what if `$value = ' ' `?", "pred": "Fix CategoryCode"}
{"gold": "What about using `!files.hasNext` instead? I'm not sure we want to assume that the iterable can be consumed multiple times. Plus there's no need to consume the entire iterable just to check whether it is empty.", "pred": "[SPARK-12524][SQL] Fix the bug of dynamic overwrite in Spark SQL"}
{"gold": "I think we could add bool addArticle here defaulted to false like its done in item class so std::string Container::getName(bool addArticle /* = false*/) const { and pass that variable to getNameDescription call", "pred": "Fix Container::hasParent()"}
{"gold": "What if a library function on the outside still calls the old method? It is then no longer blocked properly. Have you tested the change?", "pred": "Fix LockableBottomSheetBehavior"}
{"gold": "@i110 Do you have an idea on how we should propagate errors that occur in this block? The error condition happens when i) `h2o_buffer_reserve` fails to allocate space (happens in master as well), or ii) `fill_cb` returns an error (unique to this PR).", "pred": "fix build error"}
{"gold": "Does this mean the times will show up in emails as UTC?", "pred": "fixing date format"}
{"gold": "What's the motivation for having one of these be a cycle and the other be a fixed color?", "pred": "Added options for Image and RGB."}
{"gold": "What will be an empty entry now?", "pred": "Fix markdown table in the console output"}
{"gold": "Can I ask you to add jsdoc tag that would mark the prop as `@private`?", "pred": "fix(manualColumnResize): add missing semicolon"}
{"gold": "Do you need this? Don't think you use it?", "pred": "Fix typo in comment"}
{"gold": "`this.` seems unnecessary", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "nit: can be removed before merging...", "pred": "Fix typo in comment"}
{"gold": "Maybe a single quote would be compatible with airbnb style.", "pred": "Fixing tests"}
{"gold": "This is not the right approach. The `Distributor` maintains a model of the current state of the Grid. That model already contains the information about every active session. We don't need to modify `SessionMap` to expose it further.", "pred": "Added a method to get the session id from a session map."}
{"gold": "@Marwes @wolffcm This is the file where I made a change the the expected output. Its a little bit weird, but I think that the final output makes sense for the most part.", "pred": "fix test"}
{"gold": "I think we probably need a util.Warning() here.", "pred": "Fix typo in comment (#2575)"}
{"gold": "Let's make have a signature that's consistent with `PhysicalKey.from_path`. Users should also have access to PhysicalKey since that class is part of the API (e.g., `Package.resolve_hash`).", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "What is this directive for?", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "I'd rephrase it as `Simplify chained comparison between the operands`.", "pred": "Fix typo in docstring"}
{"gold": "so in the performance data fixtures, there will be references for the second domain only?", "pred": "fix: product data fixture"}
{"gold": "This is wildly unhelpful to users --- they need to know when a proxy has been registered.", "pred": "Fixing a typo in the log message."}
{"gold": "If there is no authority header (i.e. someone intentionally deleted it), I would argue we probably don't want a Host header in the replay either. How about we only add it if it exists, and do nothing otherwise?", "pred": "fix: remove duplicate code"}
{"gold": "is there any unit test that can be updated to verify this?", "pred": "Fixing a bug in the task metadata handler"}
{"gold": "exiting at this point is leaking memory, take a look at the valgrind output. the sbuffer must be destroyed.", "pred": "Fix lua filter return value"}
{"gold": "i think you want a different flag and help like `--ffmpeg` or something; and you need to mark any tests you want skipped", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "this needed to change? or it was just some formatting thing?", "pred": "Fix import path for auditpb (#104)"}
{"gold": "What's the advantage of doing it this way over, say, changing the `.circleci/config.yaml` to have `TRACE` as the `root.log.level`?", "pred": "Fixing log level"}
{"gold": "typo: if -> of", "pred": "fix: add missing import"}
{"gold": "It'll be interesting to see who or what this breaks...", "pred": "Fix typo in markdown template function"}
{"gold": "This change is incorrect: the current log level is correct.", "pred": "Selenium 2.0rc1: Fixing the build"}
{"gold": "There are few cases like this where default logger is used from CLI/db tools. I would copy `NewTestLogger` to `NewCLILogger` and use it everywhere in CLI. In future these two might be different.", "pred": "Fix typo in comment"}
{"gold": "While it provides re-use, this method does not make sense in `AbstractAuthenticationToken` because it knows nothing of a hash key. Instead, we should move this to a private method within each subclass.", "pred": "Fixing a bug in the toString() method of AbstractAuthenticationToken."}
{"gold": "index by memory address? I realize I don't understand why we don't just build a list :)", "pred": "Fix pagination"}
{"gold": "Not part of this commit, but we thought that this may not be a good place for this url, as it is in the `/user/` namespace (effectively preventing us having a user called `lastfmscraper`, however rare it may be)", "pred": "Fixing lastfmscraper route"}
{"gold": "Does not appear to be used.", "pred": "Fix typo in AspNetMvcIntegration (#1007)"}
{"gold": "I think this starts a new `powershell.exe` interpreter each time, which is pretty slow to run a single command. Can we just do `on(bolt, \"cmd /c #{bolt_command}\")`? /cc @Iristyle", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Can we add a `collection?` method to the `VideoPage` so we don't violate Law of Demeter here?", "pred": "Fixing video title on purchase page"}
{"gold": "Deleting unused code.", "pred": "Fixing a bug in the project manager servlet."}
{"gold": "`PseudoSampler` can also be imported from `..bbox`", "pred": "fix import error"}
{"gold": "Could you move this import to where the other `github.com/algorand/go-algorand` imports are?", "pred": "Update agreementtest.go"}
{"gold": "I'd rather not activate this protocol by default for now, unless there is a good reason for that.", "pred": "Fix typo in conf.py"}
{"gold": "Remove these 2 blank lines.", "pred": "Fixing import error in notifier (#3366)"}
{"gold": "Want to remove this?", "pred": "txpool: fix typo in comment"}
{"gold": "is this a golint requirement? huh. mixed feelings :)", "pred": "Update db.go"}
{"gold": "Generally with these tests please split up these tests so that there is a different test for each method", "pred": "Fixing test"}
{"gold": "Should something use the lock passed in?", "pred": "Fix bootstrap_attempt::lazy_add"}
{"gold": "Is this dependant on some version of Docker? Do we need to include both or `volumes` is deprecated (or just wrong!?)?", "pred": "Fix typo in docker docs"}
{"gold": "I know this is not new code, but should we change `leader.getState() == State.ACTIVE` to `leader.isActive(liveNodes)`?", "pred": "SOLR-10066: Fix typo in comment"}
{"gold": "Why not use ASTAnyTypeDeclaration? AbstractAnyTypeDeclaration is deprecated", "pred": "Fixing a bug in JavaRuleViolation"}
{"gold": "A blank line at the very end of each file should eliminate the \"No EOF\" warning we see above", "pred": "Add missing import"}
{"gold": "These would both be more robust with `errors.As` so that we could safely chain errors.", "pred": "Fix typo (#2060)"}
{"gold": "This is checking the same condition twice?", "pred": "[Swift] Fix a crash in the Swift Array type summary."}
{"gold": "Aren't we able to handle the case where we have MPI-CUDA without NCCL, even if it's suboptimal?", "pred": "Fix bug in allreduce"}
{"gold": "Wouldn't we want to namespace this `AA` or something similar", "pred": "Update mob.cpp"}
{"gold": "This probably should look beyond envConfig, and include `aws.Config.Credentials` as well.", "pred": "Fix typo in comment"}
{"gold": "How does this filter differ from TooExpensiveTxFilter?", "pred": "Fix typo in comment"}
{"gold": "Use \" List<String>\" instead of ArrayList<String> in declaration.", "pred": "Fix typo in javadoc"}
{"gold": "we might consider hard throwing when name is None since that is explicitly not working right now and then linking to issue in the exception error message", "pred": "Fixing a bug in the ObjectStore.get_value method."}
{"gold": "Just noticed this - why \"like\" and not straight \"=\"", "pred": "added missing import"}
{"gold": "is this a new test? if yes, isn't it better to check for each env var is present, and the value, instead of a count?", "pred": "Fix env spec"}
{"gold": "when will lost exception? by my test, never happened.", "pred": "fix: microservice version setInstances error (#3561)"}
{"gold": "You should re-stringify it here with `QUrl.FullyEncoded`.", "pred": "Fix: Open external links in a new window"}
{"gold": "i'm not sure why the quit channel is needed in this context", "pred": "fix: typo in comment"}
{"gold": "When `args.MemoryLimit` is empty, will `MustParse` panic?", "pred": "Fix indentation in ingress deployment"}
{"gold": "How soon after this will Apply() be called? It would be a shame if there was still a significant delay before a missing or superfluous route was corrected.", "pred": "Fix typo in comment"}
{"gold": "I add a `idx` property, and it is only use for benchmark `heap.Remove`, is it acceptable?", "pred": "Fix import"}
{"gold": "daemonic t got inserted.", "pred": "Update copyright year in license.txt"}
{"gold": "This edit is non-essential.", "pred": "Fix typo in DefaultBlockchain"}
{"gold": "Might be safer to ponyfill this?", "pred": "fix(isWeakMapSupported): check for global WeakMap"}
{"gold": "why was this join not necessary before?", "pred": "Fixing a bug in the local backend"}
{"gold": "Here we compare to the expected call count 3. Because 3 TermsEnum are created: it is a PrefixQuery and there is one TermsEnum created for AutomatonQuery.intersect() (the next call timeout check is skipped once), then 2 TermsEnum created for the 2 matching terms \"one\" and \"ones\"). Would it be clearer to have a separate test method? We could index more docs, for example 50 with a prefix-generated term (e.g. \"term\"+increment). There would be a PrefixQuery for \"term\", the same test code, and we would test the TIMEOUT_CHECK_SAMPLING: - 1 TermsEnum for Automaton.intersect(), and the next calls would be sampled (50/TIMEOUT_CHECK_SAMPLING=3) => call count +4 - 1 TermsEnum for each enumerated term => call count +50 We could verify call count = 54 (instead of 101 without sampling)", "pred": "LUCENE-2889: fix javadoc"}
{"gold": "Add `--format` as an option. Does it make sense to have all display options available? Also need to add `--inventoryfile` and possibly the global_config_options.", "pred": "(maint) Add --no-ssl-verify to bolt command line"}
{"gold": "Any thoughts on making this false by default? My suggestion is make this opt-in. Storing exception is somewhat expensive, so lets do this only if users opt-in", "pred": "Fix typo in AspNetCore instrumentation (#1644)"}
{"gold": "usually I do either ` IOException|RuntimeException` or if doing Throwable, use propagateIfFatal", "pred": "Fix typo in HttpCall.java"}
{"gold": "Wondering whether it should be `self.clone`, or `other.clone` or maybe a new `DynamicMap` declaration entirely. I see this is in the condition where `other` is a `DynamicMap`but is this definitely right in terms of `kdims`? I need to think about it more...", "pred": "Fixing bug in overlayable"}
{"gold": "I chose a new category because over time I'd like to add metrics also for Authorization plugins and Auditlog plugins (all components registered in security.json). An alternative could have been `CONTAINER` I guess?", "pred": "SOLR-1066: add a new category for the new \"clustering\" component"}
{"gold": "IoAddrLen Golang prefers short variable names", "pred": "fix: typo in error message (#100)"}
{"gold": "PHPCR-ODM does not allow blank aliases..", "pred": "[MediaBundle] fixed the media admin"}
{"gold": "This seems trivial to forge. Can we tie this into the authentication code paths somehow so that we can really trust that the request is coming from a server instead of just some application claiming to be a server?", "pred": "SOLR-1006: fix javadoc"}
{"gold": "Why are you including `<Kokkos_Core.hpp>`?", "pred": "Fix SYCL backend header"}
{"gold": "So previously health check was consuming from the normal metrics queue, now we duplicate the data to a new queue? I feel like there should be more changes to ensure the health check handler reads from the new queue? @DrewZhang13", "pred": "health: fix typo in comment"}
{"gold": "Yep, looks right; your new selector _should_ disqualify the rule from being XDP accelerated.", "pred": "xdp: fix typo in comment"}
{"gold": "cc @anurse This exists now. Kestrel currently passes the current time to all callbacks as an optimization. Just an FYI.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "remove 3.8+ f-string format to allow use in google colab", "pred": "Fix bug in formula unit normalization"}
{"gold": "Should we assert that xstate is aligned here?", "pred": "i#1504: Fix typo in comment."}
{"gold": "any particular reason for suppressing this change?", "pred": "SOLR-12016: Fix TestJsonFacets to not use Appending"}
{"gold": "Hot take: could this instead become `NO_DIFFICULTY_BOMB` and have` HOMESTEAD` wrap it? So this comes first then homestad with the bomb adjustment, making no difficulty the base case?", "pred": "Fix typo in comment"}
{"gold": "I suggest to use a scheme like \"blobvar\". \"blob\" would potentially collide if we have another API that use the blob package as a driver.", "pred": "runtimevar/blobvar: fix typo in doc comment (#138)"}
{"gold": "This assumes that the user has at least one listen, it should have a guard around it, because this won't always be the case", "pred": "Fix bug in get_listens"}
{"gold": "Seems like a lot of unintended changes. Are your line break settings causing these?", "pred": "Update Skyline.Properties.Designer.cs"}
{"gold": "@StrikerRUS what if we just removed build numbers and did `r-pkgdown=1.3.0`? Won't we have to fix this again if the RTD build machines change?", "pred": "Update docs/environment.yml"}
{"gold": "I'm not arguing with it, but how did you decide to make this change?", "pred": "fixed a typo in the license"}
{"gold": "1: D400 First line should end with '.', not 'd' 4: I102 copyright year is outdated, expected 2014 but got 2012 25:29: E126 continuation line over-indented for hanging indent 31: D103 Docstring missing 40: D103 Docstring missing 57: D103 Docstring missing 68: D103 Docstring missing 101: D103 Docstring missing 115: D401 First line should be imperative: 'Call', not 'Calls' 115: D400 First line should end with '.', not 't' 134: D400 First line should end with '.', not 'e' 134: D205 Blank line missing between one-line summary and description", "pred": "global: fix copyright year"}
{"gold": "Explain that this must match the `CommonName` of the first (or is it last?) certificate in the chain, where the first certificate is the chain root CA and the last certificate is the leaf certificate.", "pred": "Fix typo in comment"}
{"gold": "do we really need this behavour to be configurable?", "pred": "fix: remove unused config"}
{"gold": "Hmm interesting. Do the tests check out on this?", "pred": "fixing objectid schema"}
{"gold": "For another PR, another `--X` candidate.", "pred": "Remove unused import"}
{"gold": "Do we need to add this constant for `group_windows.go`? Otherwise, I believe the build will fail on windows. Also what do you think of adding the emoji   at the end? The windows one could be plain.", "pred": "Update strings.go"}
{"gold": "this is a junit 3 import, not a junit 4", "pred": "Fix license header"}
{"gold": "shouldn't there be a reque expected here?", "pred": "Fix test"}
{"gold": "I prefer to make it `protected set`. What do you think?", "pred": "Fix comment"}
{"gold": "Maybe rename this to JetStreamStoreDir?", "pred": "fix: typo in comment (#1186)"}
{"gold": "You can start by logging out the error", "pred": "Fixing typo in test name"}
{"gold": "In general, what is the reason for the fallback price to be public? If it is public, why does it take baseFeePerGas instead of a block header?", "pred": "fix: gas price fallback"}
{"gold": "follow-up of #2002", "pred": "fix: remove unused import"}
{"gold": "could you give some explanations of what problem do you want to solve by this change, and how/why it works?", "pred": "HBASE-22663 [Flakey Tests] TestRegionServerReportForDuty#testReportForDuty"}
{"gold": "LongLivedMarshalByRefObject exists in both the netstandard and netfx xunit?", "pred": "Fix typo in SkippedTestCase.cs (#2286)"}
{"gold": "the bridge here isn't defined as an accessor / reader to try mask it better. So you need to directly call the iVar `@bridge` here.", "pred": "Fix typo in comment"}
{"gold": "Testing on linux with this change, containerd no longer stops when k3s stops.", "pred": "containerd: fix typo in comment"}
{"gold": "Maybe [u]int64 to be consistent with other byte-valued vars in this struct?", "pred": "Fix typo in comment"}
{"gold": "This brings up the question... do we need to start assigning users to the different use cases in some way? We don't want this link to show up for Ric, for example.", "pred": "fixing cart link"}
{"gold": "Unless I'm misunderstanding something, this should just be `prefetch_(param.data_param().prefetch())`, no? That should just use the default value if there's no explicit `data_param` or `data_param.prefetch` set, removing the need to also duplicate and hardcode `PREFETCH_COUNT`.", "pred": "fix bug in prefetching data layer"}
{"gold": "nit : move this into a default clause in the previous switch statement.", "pred": "fix: node status"}
{"gold": "It should be return \"''\"; I will fix it", "pred": "Fixed a bug in the string formatter"}
{"gold": "Go standard linter hates `Id`s and likes `ID`s, please do not resist.", "pred": "Fix typo in comment"}
{"gold": "I don't think retrying here is as useful, since `git-checkout` doesn't access the network AFAIK, and if it fails once it's probably going to fail all three times.", "pred": "Fix git checkout"}
{"gold": "Fixing this typo caused a build failure in `cmd/ctl/pkg/status/certificate/certificate_test.go:238` Could you also update it there?", "pred": "Fix typo in certificate_modifier.go"}
{"gold": "Please note that adding this will import `extension_condition` in the entire scapy (as you are located in a layer). You might want to move this inside the RTP class ? Would be better i think", "pred": "rtp.py: add support for RFC 2190"}
{"gold": "This will need updating, as I'm not sure we'll want to turn on random ordering if they've specified a seed for programmatic use.", "pred": "Fix typo in --fail-fast description"}
{"gold": "Are you sure these are all client libs? This seems fragile: if we later load sthg else early this will break. Seems best to have some kind of sanity check: at least add an assert in the current location where this is set.", "pred": "i#643: fix loader_init() to not unload privlibs"}
{"gold": "Picking nits here, but as a Dictionary already is a collection of KeyValuePairs there's undoubtably a way to code this that doesn't involve constructing any new ones.", "pred": "Fix small molecule library export"}
{"gold": "As Miklas stated, please avoid wildcard imports.", "pred": "chore(engine): remove unused import"}
{"gold": "Maybe change it to `module.exports = server` ? Becase there's nothing else to export here", "pred": "fix: export server as default"}
{"gold": "This may be an automated change, but the import seems to fit better where it was previously.", "pred": "Fix import path for pubsub (#1479)"}
{"gold": "Might we want to separate including this snippet and sending the data for signed in users into different partials?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "closest to the address", "pred": "fix: typo in comment"}
{"gold": "It should be much more clear for end-user  ", "pred": "docs(autoRowSize): fix typo in description"}
{"gold": "Isn't this an example that this will be prone to false positives ? We had nothing to fix in the codebase (And I think there is dict that could be named tuple in the MessageStore/MessageIdStore), but we have a false positives on our checkers.", "pred": "Fix a bug in the regex for detecting single and double quoted strings."}
{"gold": "We control `octest`, so it shouldn't be necessary to provide struct literal keys. This is a case of vet being too picky.", "pred": "blob/memblob: fix test"}
{"gold": "I would put that constant under config/initializers/constant.rb and I would leave application.rb for rails specific.", "pred": "fixing typo in config/initializers/dmproadmap.rb"}
{"gold": "Is there a reason not to do something like `if _, ok := doNotUnref[ptr.ID]; ok { return ops }` here?", "pred": "libkbfs: fix comment"}
{"gold": "This would return a tuple of two dictionaries. You need to combine them and return a dictionary", "pred": "Fixing typo in docstring"}
{"gold": "Why not always forward it to `_data`?", "pred": "Added a few more methods to the Node class"}
{"gold": "there are tests that use `client.get` which will fail now", "pred": "Fixing a bug in the Spotify auth callback"}
{"gold": "Whoa, TIL about this syntax.", "pred": "libkbfs: fix a bug in mkdirAll"}
{"gold": "This is a smell. When is this valid? Perhaps this should be `nil, nil, ErrNoResponse` or some such. While it is usually invalid to have neither a return value or error, we rarely check for the case in other idiomatic Go. Nothing wrong with extra defenses here, but think about it.", "pred": "Fixing a typo in the docs"}
{"gold": "This URL is outdated, add a `TODO` to fix it.", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "`ChainID()` is a getter method, move up to `Nonce()`", "pred": "fix: remove unused import"}
{"gold": "If this condition is not met, shall we just throw the exception rather than logging it? @li-ygerchikov Your thoughts?", "pred": "NMS-8622: Fixing a bug in the FlowTriggerScheduler"}
{"gold": "nit: alpha-sort `ruamel.yaml` in this list please", "pred": "Fixing setup.py"}
{"gold": "Remove this because we already added it in another pr", "pred": "Fix TableScanUtil"}
{"gold": "Can we maybe move the `File` creation to a new method? I mean both changes look equal to me with the difference of two parts, which could be specified using two input parameters.", "pred": "fixing bug in shortcut manager"}
{"gold": "I think we want to require the association with the user...?", "pred": "Add missing column to api_token model"}
{"gold": "I am unsure the below implementation is correct, but need this method to not panic else it borks the chain-validation tests.", "pred": "smsg: add SignedMessage.VerifySignature"}
{"gold": "nit: no need this change anymore.", "pred": "Fix import"}
{"gold": "This isn't really that closely related to everything else in this PR, but I'm pretty sure it's a correct change. I'm not familiar enough with the taint feature to know how to test it, but I worry that without this change some of the taint stuff might mess up the `parent_nodes` for a reference.", "pred": "Fix typo"}
{"gold": "[Checkstyle] ERROR: Unused import - javaslang.collection.Stream.", "pred": "Remove unused import"}
{"gold": "The numbers were changed since now _root_ is also added to the doc, increasing the field count by 1.", "pred": "SOLR-2086: fix test"}
{"gold": "TTemplateParamClass is handled above with the same content in the conditional", "pred": "Fix array_map return type provider"}
{"gold": "Do we need to add `theme` here?", "pred": "Fix #1008: Upgrade script should not overwrite existing config.ini"}
{"gold": "i think you have to regen the api stuff, `make generate`", "pred": "fix: add missing fields to network struct"}
{"gold": "DataHash shouldn't be needed here", "pred": "Fix typo in SECP256K1"}
{"gold": "`info` was chosen deliberately to mirror the old behaviour that users expected.", "pred": "SimonStewart: Fixing a bug in the webdriver handler"}
{"gold": "For some reason, Safari handles ember arrays differently than Chrome/Firefox. To get around that, we cast the ember array to a regular array to verify the deep equal. (Note: I tried wrapping the expected value in an emberA - which would look like `expect(someEmberArray).to.deep.equal(emberA(['a', 'b']));` but that didn't work either)", "pred": "Fixing tests"}
{"gold": "`icebergType` indicates the corresponding iceberg type of the `FieldVector` `originalIcebergType` indicates what the real type we will read from the `FieldVector`. For example, the parquet int backed decimal, the `icebergType` should be integer, `originalIcebergType` is decimal. I intend to only keep the `originalIcebergType`, but listening to your ideas.", "pred": "Fix VectorHolder javadoc"}
{"gold": "The double (and thus triple as seen below) pointer gives me pause. I could imagine providing some larger API surface to smooth it out, but it's likely not worth it.", "pred": "blob/gcsblob: fix typo in godoc (#1359)"}
{"gold": "The test name as written was grammatically correct, but now it isn't. Both 'MongooseError' and 'instance' should be both singular or both plural.", "pred": "test: fix test"}
{"gold": "SmartStoreInspectorTest was throwing a NPE here", "pred": "Fixing SmartStoreInspectorActivity to use the correct DB name"}
{"gold": "We prefer line wrapping that keeps arguments to the same method aligned rather than aligning arguments to different levels. Here, the lambda to create an `InternalRecordWrapper` is an argument to `transform`, but it is aligned with `deleteSchema.asStruct()` that is an argument to the outer `toEqualitySet` call. Instead, can you add a newline for each argument to `toEqualitySet`? If the line with the lambda is too long, then you can also add a newline for it that it indented from the start of the line with `transform`, so it is clear that it is an argument to `transform` and not `toEqualitySet`.", "pred": "Fix delete filter"}
{"gold": "I think it would be a good idea to wrap this in an if like the stats above, just in case.", "pred": "Fix transcoding stats"}
{"gold": "@angmas1 just make one more change here too. Move the else line to the line above it, where the if block ends and remove the braces like in line 280.", "pred": "Fix bug in LFMainActivity"}
{"gold": "Looks like the actual rename is missing in this commit edit: Arf, nevermind, I was at the wrong commit  ", "pred": "cgroup: blkio: fix typo in blkio.go"}
{"gold": "I'm a little stuck understanding, how would this result in an error when `this.opts.params` is not set? It will just not do `AssemblyOptions.validateParams(this.opts.params)`  ", "pred": "fix(transloadit): fix typo in Transloadit plugin"}
{"gold": "networkVarPattern (etc) then?", "pred": "Fix import path in daisy_hooks.go"}
{"gold": "I think it makes sense to do `metadata[:block].clone`, as thats what `new_metadata` is, but somehow it's missing the block from its clone.", "pred": "Fix typo in comment"}
{"gold": "Just realized this should be fixed instead of changing here. Concatenating int should still result in lowercase string.", "pred": "Fix ClosureAnalyzer::getClosureId()"}
{"gold": "For Se 3.x we shouldn't need to specify `marionette: true`? I'll see if I can figure out where this is getting used that it might be necessary here.", "pred": "Fix typo in Firefox#firefox method"}
{"gold": "This should be renamed to `chain.Store`. It was named `DefaultStore` as an alternative to `StoreImpl`, which is the (bad) Java convention.", "pred": "fix: fix test"}
{"gold": "ad.Source is disk name? Shouldn't the order of initialization be reversed here then? First set ad.DeviceName, if it's empty, set ad.Source? Or this is a different use case? This is the third place where this device/disk default logic is implemented, so another reason to move it to regAttach, if it's possible to be generalized.", "pred": "Fix attach disks validation"}
{"gold": "typo: \"be hold\" -> \"be held\"", "pred": "Fixing the build break"}
{"gold": "I do not think we should have any logic inside the null storage. 1 has a very specific magical meaning. We should either return null here or long.maxValue.", "pred": "Fixing a bug in receipts migration"}
{"gold": "Why did this change?", "pred": "Fix test"}
{"gold": "Removed this method. Doesn't seem to be used in the code, and the variable set here doesn't seem to be used in the views.", "pred": "Fixing bug in plans controller"}
{"gold": "Remove the initializers (\"`= null`\") from both parameters. Remember that that's why we added the overloads: to ensure that all languages could have the convenience of the abbreviated argument lists (not all languages understand default parameters).", "pred": "Fixing a typo in the comment"}
{"gold": "I think you can just remove most of these attributes outside of `ElementType()`. Instead, this should expose the arrow array. We're not going to use these methods anyway.", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Thinking this should be `removeNode()` exported from `dom/index.js`. Thoughts?", "pred": "fix(component-recycler): fix typo in comment"}
{"gold": "Does this need to be saved in the state file? Or are we recomputing when the task is read from the state file?", "pred": "Update task.go"}
{"gold": "Looks like `s.inserts` and `s.removes` are updated under sublist's lock, so I don't think you need atomic for those 2.", "pred": "fix sublist stats"}
{"gold": "@TD-er use bitRead/bitWrite macros, do you use here inversed logic?", "pred": "Fix for ESP8266"}
{"gold": "The previous `fetch` mock was exposed globally before - can we do the same with `fetchMock` so we don't need to import it in every file?", "pred": "Update index.js"}
{"gold": "Is ExpectData still used anywhere?", "pred": "Fix typo in comment (#10834)"}
{"gold": "Do you want to allow the character `.` or any character? Because inside a regex `.` means any character, if you want to authorize `.` then you need to add `\\.` .", "pred": "Fix docstring regex"}
{"gold": "`eachAsync()` should pass a doc, not an array of docs, to the callback. This would be a massive breaking change.", "pred": "Update query-cursor.js"}
{"gold": "please start log with caps letters", "pred": "fix: update pod status"}
{"gold": "Is this where we want it in relation to the other scripts?", "pred": "Add meta tag for google analytics"}
{"gold": "Please wrap this variable within a self invoking anonymous function. (function(){ FEATURE_NAME = \"reports\"; //and rest of the js goes here. })();", "pred": "Fixed bug in reports view"}
{"gold": "Haven't tried, but what happens currently if `-f` is used and it's not running? (thinking: `-f` should ignore the case and just proceed?) I see we have a special case for `all`", "pred": "Fix typo in comment"}
{"gold": "no need for custom errors in tests unless the tests are intended to mock a specific sort of error", "pred": "test(ldap): skip test if LDAP_URI is not defined"}
{"gold": "This const has already existed in the code, no need to define a new one", "pred": "fix: nvidia gpu plugin resource name"}
{"gold": "Would Errorf be better than Warnf?", "pred": "fix(logging): fix error logging"}
{"gold": "A good candidate for StringBuilder? Also make sure to add white space around the operators (`path + \"/\" + file`)", "pred": "Fixing JSExport"}
{"gold": "Can we have the same argument order as `getUploadedFlowFile`?", "pred": "Added a method to the ProjectLoader interface to load a project from a file."}
{"gold": "this dynamic config should still be valid, i.e. operator should have the ability to control each individual task queue just in case", "pred": "Fix import path for dynamicconfig (#2042)"}
{"gold": "Should these cases be logged? `if not obj` used to be", "pred": "Fixing a typo in the mathMl virtual buffer."}
{"gold": "Is it OK to assume that keys.gnupg.net has the new key?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "A note for however is curious. I think these two notes add negative value only. In general we want people to implement this method (in particular after this patch). If we leave these old (and currently mis-rendered) notes, file system implementors might not implement this method referring to this.", "pred": "Fix typo in FileSystem.mkdir docstring"}
{"gold": "Comparators (or functions in general) cannot be compared for equality. Therefore `PriorityQueue.of(comparator, ...)` always has to return a new instance.", "pred": "Fix PriorityQueueTest"}
{"gold": "It's a little surprising that CachedThreadPool overrides the max_threads argument. This makes sense as a solution though.", "pred": "Fix typo in bolt.rb"}
{"gold": "```python # if avg_factor is not specified, just reduce the loss if avg_factor is None: loss = reduce_loss(loss, reduction) else: # if reduction is mean, then average the loss by avg_factor if reduction == 'mean': loss = loss.sum() / avg_factor # if reduction is 'none', then do nothing, otherwise raise an error elif reduction != 'none': raise ValueError('avg_factor can not be used with reduction=\"sum\"')", "pred": "Update weight_reduce_loss.py"}
{"gold": "`padding` should be 0 instead. Actually you can just remove padding and dilation to use default values.", "pred": "Fix typo in BasicBlock"}
{"gold": "$balance is initialized to 0 above in line 1428 and then assigned in line 1437. If we're no longer manipulating that value, is there a reason to use a variable at all? It might make the overall code less confusing to make some changes there.", "pred": "fix: remove unused variable"}
{"gold": "Why do we need to explicitly use keyword arguments?", "pred": "[SPARK-25565][PYTHON][TEST] Fix SeriesPlotTest"}
{"gold": "Might still want to log this as `TargetBuilding` but with a slightly different message?", "pred": "Fix typo in comment"}
{"gold": "ref. above, this also can be omitted in case `txt = std::move(other.txt);` could work (or copy), consider `std::array<String, VARS_PER_TASK>;`? or a custom object implementing `Object& operator=(Object&&) noexcept;'", "pred": "Fixing a bug in the C015_queue_element constructor."}
{"gold": "Well done, we forget that one apparentely.", "pred": "Fix typo in docstring"}
{"gold": "Guess it isn't used. The dask thing was just a prototype so removing it is probably the right thing to do.", "pred": "Fix import error in utils.py"}
{"gold": "This code is correct, but it's a bit confusing to see how (e.g., without the if startswith(\".') the or below would break.) I think it will be clearer for the long run if you refactor this just a bit. CONTENT_INDEX_EXTS (all caps) looks like a constant, but is now being set by the environment. Instead, replace the reference to CONTENT_INDEX_EXTS in index.py with a simple call to a method \"get_content_index_exts\" (or similar). Then you can write all the logic into one clean function.", "pred": "fix: remove unused import"}
{"gold": "please update the zms conf file to have a small description of these options since by default feature is off and must be enabled", "pred": "ZMS-1058: Add new ZMS_PROP_AUTHORITY_FILTER_CLASS property (#1578)"}
{"gold": "Should be `this.opts` instead of `defaultOptions`", "pred": "fix(thumbnail-generator): fix default options"}
{"gold": "You can reuse `USERS` above as well.", "pred": "fix(version): fix version"}
{"gold": "Whoa, was this opto breaking something? I guess if this final path is filtered out, we still need the queue? Have you run the suggest benchmarks to see if removing this opto hurt performance?", "pred": "fix bug in Util.java"}
{"gold": "I'm not sure about this, please check the usages. It's only used currently to reverse it, maybe we should eliminate this method completely instead.", "pred": "Fixing a bug in Collections.java"}
{"gold": "Since this is only used in the MyResearchController, does it need to be placed at the AbstractBase level?", "pred": "Fixing a bug in the AbstractBase class"}
{"gold": "why `PhaseSelector` ?", "pred": "fix typo"}
{"gold": "Does` AllowlistedModules` have the same meaning of `WhitelistedModules`?", "pred": "Update config.go"}
{"gold": "I missed the $preserve_keys=true case when adding this to Phan. For psalm, two separate signatures may make sense", "pred": "Add missing return type for array_column"}
{"gold": "TcpServer will be created for each HighwayServerVerticle instance so the counter number in server is not correct.", "pred": "[SCB-1045] remove unused import"}
{"gold": "Why change this from a foreach? I can't see it gaining anything here and code styles shouldn't change just for the sake of it.", "pred": "Fixing a bug in the WindowsUtils.quote method."}
{"gold": "I'd say \"cgroup2 hybrid path\" instead.", "pred": "cgroup: fix typo in comment"}
{"gold": "I dont see a reason to print URI for `Target`. we do not expose that in inventory v1", "pred": "(maint) Fix typo in bolt-project.json"}
{"gold": "Do we still need this?", "pred": "Fix typo in comment"}
{"gold": "`campaignSource` is unused (from `structcheck`)", "pred": "Update application.go"}
{"gold": "we should discuss how to not hard-code this version", "pred": "Bump error-prone version to 2.3.4"}
{"gold": "do we have a doclet for this event?", "pred": "fix: remove unused import"}
{"gold": "Why don't we want to catch segfaults by default?", "pred": "fix(test): fix segfault handler"}
{"gold": "You could probably dispose request & content if you `await` the SendAsync.", "pred": "Fix Zipkin exporter (#1075)"}
{"gold": "why is this test case here? this file is for testing functionalities in utils.py", "pred": "TST: Fix test_validate_arguments_and_invoke_function (#28215)"}
{"gold": "why do we have an env var for this? not sure why we'd want to suppress welcome emails but not any others", "pred": "Fix auth controller"}
{"gold": "drop the todo?", "pred": "Add parseStringExpression"}
{"gold": "Maybe use { } here like we are most other places now.", "pred": "Fixed a bug with doors not opening when the player is in a vehicle."}
{"gold": "I want to get PartitionData field type, I don't know how to get it in other way.", "pred": "Fixing a bug in PartitionData."}
{"gold": "I think that a single `Get` method would be preferable, that would have the following parameters: Get(addr basics.Address, withPendingRewards bool, cidx basics.CreatableIndex, ctype basics.CreatableType) where we ignore cidx of -1, and adding support for ctype of \"AssetParams\" or something like that. (i.e. so that this Get call would be good for asset holding/asset params and applications )", "pred": "Fix typo in comment"}
{"gold": "This can handle the '\\\\' problem, but if (not possible) the user define '\\\\' as null, this logic will break. So here, it should be to compare the whole HIVE_DEFAULT_NULL_STRING, and make sure length is equal, as I understand. \\N is NULL, but \\NA is not NULL, what will happen if there is \\NAA ?", "pred": "HIVE-10040: HiveServer2: Fix compilation error in HiveServer2 (Sreeni Rao via Szehon)"}
{"gold": "Hmm, I would think that anyone who can edit the request should be able to delete the observation, in case they accidentally add the wrong person or something.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "I know we are doing this other places already. It would be good to refactor this and the paginable publicly_visible so that we are DRY. Can wait until after MVP though when we do general cleanup", "pred": "Fixing a bug in the public pages controller"}
{"gold": "I think this should read \"is always observed before\" or \"is never observed after\".", "pred": "Fix typo in comment"}
{"gold": "You might consider adding yourself as an author of the class.", "pred": "Fix typo in license header"}
{"gold": "If this fails, then 'stderr' is not a valid file handler anymore, and then any further 'write' operations will fail. Maybe some handling of such situation should be added here?", "pred": "Fix for bug 11185.  The stderr file is now opened in append mode."}
{"gold": "Break out tests for events into their own tests rather than placing them in other ones. That makes it easier for us to figure out where problems lie and to do a TDD-driven implementation over new APIs.", "pred": "Fix TracerTest"}
{"gold": "I think your indentation is wrong here.", "pred": "Fixing a bug in the DHCP options field."}
{"gold": "UT spotted that we weren't marking routes dirty when they targeted at Node and that node's IP changed. e.g., the case where a WEP appears in the syncer before the corresponding node does, so we don't know the node's IP. I added a new map to track the CIDRs for each node so that when the node IP changes we can mark those CIDRs dirty. Right now it's only used for the \"WorkloadIPs\" scenario. Need to decide if the same issue applies in the \"CalicoIPAM' case. I suspect it might. It looks like we have some logic present to detect when our own node IP changes, but we don't seem to handle when a remote node's IP changes.", "pred": "Fix typo in comment"}
{"gold": "Given this will 'pause' bolt for a few seconds on older rubies, perhaps emit a debug message saying \"Warming up OpenSSL\" or something to that effect", "pred": "(maint) Fix require_vendored path"}
{"gold": "Initializing _format to None, but asserting that it's not None later, seems unnecessarily fragile. We shouldn't architect the package class to rely on classes or methods that use it (e.g., build). Let's at least set the format to the default in case we don't create all packages through build.py.", "pred": "Fixing a bug in the package class"}
{"gold": "This change should also probably go into the corresponding method of the abstract By class?", "pred": "KristianRosenvold: Fixing javadoc"}
{"gold": "Should this be set to something else?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Whats up with this? It looks like this is rendered on purchases/new for subscribers, so it would result in a dead end?", "pred": "Update from Subversion r706872"}
{"gold": "Glad to see this generalized to support the backend argument.", "pred": "Fixing a bug in propagate_ids"}
{"gold": "`ctx` is unused in ListDeploymentChains", "pred": "Fix typo in webapi.go (#113)"}
{"gold": "I'd say the format like `\"xxx: %w\"` is more convention when wrapping an error basically. You refered to anything like this?", "pred": "fix: typo in comment"}
{"gold": "This seems relatively high, is it the recommended value from the etcd folks? Or is this debugging cruft?", "pred": "etcd: increase test timeout"}
{"gold": "This requires updating the name in the `endpoints` tests, please run `make test`.", "pred": "Fix import path for peertracker"}
{"gold": "LOG(FATAL) means coredump, LOG(ERROR) is better here.", "pred": "fix: fix the bug of meta http service"}
{"gold": "/javascript/firefox-driver is the Selenium implementation of a WebDriver for Firefox. Since it generally isn't W3C compatible, it shouldn't change. We can just drop this change.", "pred": "JasonLeyba: Fixing a typo in a comment."}
{"gold": "It's a bit weird to have `svc.go` to include a `ScheduledJobType`...should we rename this file?", "pred": "Fixing a bug in the unmarshaler"}
{"gold": "For some reason `protoc` doesn't copy license header from `proto` files to generated code. But this code will never be checked in, so it is ok.", "pred": "Add a comment to the license header prefix"}
{"gold": "I don't know what the implications of this change are for pumps other than the insight but i would add `|| trList2.get(0).pumpId == temporaryBasal.pumpId` in case we see the same pump event again, in order to not duplicate it in the database.", "pred": "Fix for issue #100"}
{"gold": "is there anything still referencing `checksumAddress` or can we just delete it?", "pred": "Fix typo"}
{"gold": "The reason I didn't suggest it before is because I didn't want alerts for every tried - but not updated provision, but I can see a value in it from OSD perspective", "pred": "Add missing import"}
{"gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "pred": "Fixing the redirect to the correct host"}
{"gold": "I believe Key is not necessarily nil, it could be empty string. Probably better check a.Kind == Create", "pred": "Fix typo in comment"}
{"gold": "This is only used for headers and therefore isn't used.", "pred": "Fix typo in comment"}
{"gold": "Wouldn't it make sense to add a files_import_command and a db_import_command, which could be empty? I guess that leads to potential backward-compatibility problems, but it's worth thinking about. Perhaps add an import-api version to solve that? Overall, I think the actual db import logic and files import logic should be moved into the yaml file. What you you think of that?", "pred": "Fixing a typo in the comment"}
{"gold": "Why do we have this here? I'm not concerned about it really, just curious.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "@justicz Why are these switched here?", "pred": "fix: add missing import"}
{"gold": "Maybe verify that an anchor was created -- that the markdown was processed?", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "Is this just a minor improvement or is it necessary? If just some minor improvement, I recommend you don't touch Lucene in a Solr PR.", "pred": "LUCENE-5763: Fix javadocs"}
{"gold": "why delete this method?", "pred": "Fix checkstyle"}
{"gold": "Does this transform only the `MethodContext`, or also the `OutputContext`? (Looking at the other files, I gather it's the latter.) Might be helpful to mention that here.", "pred": "Update StandardSampleImportTransformer.java"}
{"gold": "Could you please clean-up this line while at it?", "pred": "Fix import"}
{"gold": "no need to use a pointer. Just string and check for != \"\"", "pred": "Fix typo in pubsub_types.go (#1005)"}
{"gold": "this means h2 mode? but how h2c can work?", "pred": "Fixing the SSL issue"}
{"gold": "This line should not be there", "pred": "Fix typo in comment"}
{"gold": "why do we need lock here? if needed, then we also need to lock in Start()?", "pred": "trie: fix typo in comment (#1005)"}
{"gold": "this should be on default-switch, uhm? else you will handle twice (c++ and lua). I'm just saying...", "pred": "Fix crash in logout"}
{"gold": "unrelated minor fix", "pred": "Fix typo in Program.cs (#2035)"}
{"gold": "can you add `, echo: false` to the end of this as well. I don't think we need to echo this to the log. You might need to update the spec as well.", "pred": "Fix node_js version in Travis"}
{"gold": "This test does not really verify that we're doing the correct thing now, is it? It seems to pass with and without the patch.", "pred": "Add test for Headers.replace()"}
{"gold": "should just be able to defer the call directly here too", "pred": "fix: typo in comment (#100)"}
{"gold": "Is this a magic number? I assume this makes it look better.", "pred": "Fixed bug in title handling"}
{"gold": "Would welcome a stringification method on big.Int in specs-actors", "pred": "fix: fix typo in comment"}
{"gold": "PersistBlockLevelInfo -> UpdateBlockLevelInfo", "pred": "[api] add missing import"}
{"gold": "Type is redundant since it is inherited.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "better use `!isView()` so that we don't need to modify multiple lines in future.", "pred": "[TIMOB-10615] Fixed TiTableInfo.isView() to return false if viewInfo is null"}
{"gold": "I know you don't usually open up the singleton class, but I was getting a `private method called` error when trying to use `self.attr_writer` - any idea?", "pred": "Fix warning about RSpec::Core::ExampleGroup being deprecated"}
{"gold": "There's no need to create a new variable here, the other checks just use the item type directly.", "pred": "Fixed a bug in the canRate function."}
{"gold": "Any other possible names? Feels like going with \"workshop\" for this product_type could increase the confusion between course/workshop in the codebase.", "pred": "Update product.rb"}
{"gold": "@eugene-manuilov Isn't this already taken care of by `fetchGetURLChannels` via `createFetchStore`? Why is the extra `receiveError` call needed here? (This was already in the IB, but just struck me while reviewing here.)", "pred": "fix(redux): fix typo in baseResolvers"}
{"gold": "nit: should go before `grpc`?", "pred": "Fix import error in forseti_server.py (#2485)"}
{"gold": "Why not using the Cancel? I thought cancelling a \"parent\" context would cascade to \"children\" contexts, cancelling them as well. In short, how does cancel work?", "pred": "fix(test): fix test workflow name (#100)"}
{"gold": "Could you explain why we default to binary now? It seems it's safer to default to text to avoid stuff getting executed or parsed by browsers accidentally. If we need to add support for particular types, we can add them explicitly right?", "pred": "Fix typo in comment"}
{"gold": "Bit worried about the prefix since this seem to be being used for non-Openstack data too (host endpoints). Should we just leave host endpoint status at the old path (or remove it since AIFAIK, it's not used anywhere)?", "pred": "Fix typo in config comment"}
{"gold": "This might be a silly question, but what happens to files with durations > 24 hours?", "pred": "Fixed a bug where the timeline would not show the correct timecode."}
{"gold": "`AddDiagnosticSourceInstrumentation` method can now be eliminated and simply use `AddInstrumentation`", "pred": "Fix typo in comment (#2076)"}
{"gold": "I think we also need to add `name:` to the bolt-project.yaml files in `spec/fixtures/projects`.", "pred": "(maint) Fix project spec"}
{"gold": "worth mentioning the same warning here as in `md_util.go`, I think.", "pred": "kbfs: fix a typo in a comment"}
{"gold": "Do we need both the checks, for `Items` not nil and `len(Items)`", "pred": "Fix typo in comment"}
{"gold": "Do you know what this is coming from? It keeps getting deleted/created @nickbristow", "pred": "Fix schema.rb"}
{"gold": "Nit: leaving these in place would have reduce the number of files that this needed to touch, and avoided a possible problem removing public fields. I don't think it's worth blocking for this change, but we like to keep patches as small as possible by not breaking references like these.", "pred": "[FLINK-11275][catalog] Add missing constant"}
{"gold": "`The %s is deprecated...` -> `The %s method is deprecated...`", "pred": "Fixing the docblock"}
{"gold": "No, it wouldn't go there because that code won't reference or enforce it. Here is ok for now.", "pred": "fix(block): fix import path"}
{"gold": "How will we show that test run aborted (because of a crash) if we don't set aborted to true?", "pred": "Fixing the issue with the testhost process not exiting when the test run is aborted. (#2016)"}
{"gold": "Nit: Might as well make this same change to AdaptedPipeline.", "pred": "Fix formatting"}
{"gold": "Just to clarify: I see that only the hive2 withZone object inspector is changed. Does that mean that the predicate pushdown problem only occurred on hive2?", "pred": "Fix IcebergTimestampWithZoneObjectInspector"}
{"gold": "Based on username requirements for forge.puppet.com - only letters and digits permitted.", "pred": "(maint) Fix typo in ForgeSpec"}
{"gold": "Was this removed to ignore the extra columns coming from the file projection?", "pred": "[SPARK-1015] [SQL] Fix StructLikeWrapper.equals()"}
{"gold": "Please can you pull out the shared function into a shared file? I think that'd be pretty easy to do for this module. I think you could: - pull out a function `configureSyslog` that is implemented on Linux, but stubbed on Windows - pull out a function `openLogFile` that is implemented differently on each - share everything else", "pred": "Fix typo in comment"}
{"gold": "Instead of hardcoding the AWSEmailProvider here, it should come from properties, so that it can be replaced with another EmailProvider for ZMS vs ZTS", "pred": "Fixed typo"}
{"gold": "+1 for creating this script to help people get boot strapped", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Do you need the prefix?", "pred": "Update constants.js"}
{"gold": "if retcode is < 0, it should return -1 indicating an error.", "pred": "Fix bug in unregisterNativeTable"}
{"gold": "Are those necessary? I feel like `useless-suppression` could be avoided here?", "pred": "Fix typo in dict-iteration-and-subscripting.py (#101)"}
{"gold": "Is this equivalent in JavaScript?", "pred": "Fix typo in previous commit"}
{"gold": "get/list operation is not schema change, it is supposed to use VLOG", "pred": "Fix the bug that the edge index name is not checked (#1957)"}
{"gold": "we'll need to delete this whole file, right?", "pred": "Fix typo in MetricsEventSource (#50005)"}
{"gold": "\"this table hasn't mutated within this transaction\" may sound like implying that if this transaction contains table mutation changes, `refresh` may have impact, which I think is not true? I guess what you were saying was if other transactions committed to this table successfully when this transaction is half way through, refresh in this transaction will still return the same state as when this transaction begins.", "pred": "[DB-118] Add a method to get the table name"}
{"gold": "Can we move these into some kind of experimental API group? I don't think we want to call them `v1` just yet :)", "pred": "fix: remove unused const (#259)"}
{"gold": "  I think this makes a lot of sense but we may want to highlight the change for people doing UAT in case the ordering of sections is off anywhere when customizing or using the drag-drop feature", "pred": "Added acts_as_list to section model"}
{"gold": "These files should in `/javascript/brython`", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "I'm not sure this is the right fix - I'd be more happy with a `continue`. That way, we don't enter the code at the bottom of the run loop (e.g. sending packets). Keep in mind that this error here may be triggered by a peer doing something security-relevant, so I don't think we should do much more work other than sending the close frame.", "pred": "Fix a bug in the packet reader."}
{"gold": "Can we fix this, or is it going to stay broken.", "pred": "fix bug in load_model_weights"}
{"gold": "Is there a reason to remove this attr?", "pred": "fixing copy to test db"}
{"gold": "log message should be started with upper-case word.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "I guess this is not needed anymore now?", "pred": "chunker: fix comment"}
{"gold": "I think I would prefer retaining the argument. It's true that we are not using it now, but it's harmless, it's good to have a constructor function that accepts all the field values as arguments. Performance-wise, it does not matter.", "pred": "fix a bug in the header-related code"}
{"gold": "Is this a different fix?", "pred": "Fix #1000: Don't duplicate shadow blocks on drag."}
{"gold": "Why not add a `EnterNS` filed instead of `WithoutNS`?", "pred": "fix: fix dns server"}
{"gold": "Same points as in other test file.", "pred": "Fix typo in comment"}
{"gold": "I have a PR pending, can you change this bit index to `16`?", "pred": "Fix bug in SettingsStruct::CombineTaskValues_SingleEvent"}
{"gold": "we should probably have some utility class for this sort of things", "pred": "Fixing JavaParserInterfaceDeclaration"}
{"gold": "Curious that I'm not seeing any occurrence of the new error check in this file. Why was it disabled?", "pred": "Fixing a typo in the comment"}
{"gold": "does it return something?", "pred": "Fix typo in Realm.deleteFile docs (#2057)"}
{"gold": "This function is also called in various Site Kit module components, where the error object (here `data`) also needs to be passed, otherwise the link to fix the issue won't appear.", "pred": "Fixing the error message for the data error component"}
{"gold": "super nit: `revision string` (the passed value might not be a SHA hash).", "pred": "Fix import path"}
{"gold": "@snakefoot why is internal needed?", "pred": "Fix typo in comment"}
{"gold": "Why were we disabling health checks before?", "pred": "fix(server): fix typo in server.go (#1075)"}
{"gold": "did `conftest.py` actually show up for you? `test_files` should never contain it...", "pred": "Fix test_files_have_src check"}
{"gold": "Should this be a ! on line 565? I would have expected the condition to be similar to line 564. If I am wrong please excuse my mistake.", "pred": "Changes to support drop schema with cascade option."}
{"gold": "Please change to `1070400`. I promise to look into this PR in more detail before the 1.7.4 release ;)", "pred": "Fixing a bug in the upgrade script"}
{"gold": "Can we change to use `LogicalType.getChildren`?", "pred": "[FLINK-11666][table-planner-blink] Fix FlinkParquetWriters"}
{"gold": "I'm confused as to how these are both passing.", "pred": "Fix purchase spec"}
{"gold": "Prefer single-quoted strings when you don't need string interpolation or special symbols.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "there is `\"` sign in commit message and colon. can you rename also `descrition` to plural `descriptions` and add there `$` ?", "pred": "Update CategoryData.php"}
{"gold": "timerNoUserLatency is not being used?", "pred": "Fix typo in comment (#2176)"}
{"gold": "@lmazuel - I've made a couple of minor changes to serialization.py, if you could do a quick review :) They should not be breaking, and I doubt are used by the existing clients so may not need a new release yet. Effectively it's a change to support default/constant date and datetime values by allowing strings to passed in instead of date or datetime objects. The strings would need to already be in the correct ISO formatting that the request will serialize to. Let me know if you think this is okay.", "pred": "Fixing the date serializer"}
{"gold": "Why change the name in the XML?", "pred": "Fix test"}
{"gold": "This is much cleaner. makes it easier to tell what happens on a save.", "pred": "Added a before_save callback to the user model to ensure that the email address is always lower case."}
{"gold": "Could you add return error unsupported operator here  ", "pred": "Fix typo in datastore/sql/sql.go"}
{"gold": "(Mhh, we seem to use different formatters - we should unify them. I like the wildcards)", "pred": "Remove unused import"}
{"gold": "Should `kind` be a command line parameter also?", "pred": "Fix typo in admin cli (#1342)"}
{"gold": "can we have it inside FromAccessList?", "pred": "Fixing bug in transaction serialization"}
{"gold": "Why not embed filterASCII in this function?", "pred": "Update rest.go"}
{"gold": "I am curious, shouldn't \"currentContinuousFlowProcessed++;\" be added right after line 1873? otherwise we will count 1 extra when a exflow wakes up from the sleep section,.even though it hasn't been assigned", "pred": "Fixing a bug in ExecutorManager."}
{"gold": "You can probably move this up after the `._Numeric` line.", "pred": "Fixing a bug in the configtypes module."}
{"gold": "@Tarrasch this is another change you need to pay attention, it seems `SGEJobTask` is not calling `super.__init__` which break the test case some how.", "pred": "fixing bug in sge_job_task"}
{"gold": "Do we need indices for this table?", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "what about making this function static inline to avoid the extra declaration ?", "pred": "proxy: fix proxy_parse() return value"}
{"gold": "I forget the difference between type definition with \"=\" and without \"=\" again, but can we unify the style? I believe the difference doesn't apply to TableIDType and GroupIDType whatever it is?", "pred": "Fix import path"}
{"gold": "would be `DEPRECATED Percentage of the graph (in vertices) to contract [0..1]` better?", "pred": "Fix typo in contractor_config.cpp"}
{"gold": "These command names are specific to Chromium-based browsers. Please move to `ChromiumDriverCommand`", "pred": "Added new commands to DriverCommand interface"}
{"gold": "if we won't use, should we remove this?", "pred": "Fix Zipkin exporter (#1070)"}
{"gold": "Having 2 items with the same key (Mvx) won't work in a dictionary", "pred": "Fix typo in AndroidViewPresenter"}
{"gold": "@cpytel how does the flow work right now? I expect to go to the sign up as customer page after putting in my code, but it goes to the longer landing page?", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "`event_msg` has the same size (1024) as a `message`. Maybe should be increased to 2048 instead? Then this `\"[error] %.512s\", message` could be changed to this: `\"[error] %.*s\", sizeof(message), message`", "pred": "Fix a typo in a comment"}
{"gold": "Nit: unnecessary whitespace change.", "pred": "Fix typo in javadoc"}
{"gold": "Hit a flake here where I think there may have been some output to stderr that got mixed in with the output from Stdout. Hence switching to `Output()`, which does also capture stderr as `err.Stderr`", "pred": "Fix typo in error message"}
{"gold": "I would use static_cast<label_t>(0) and static_cast<label_T>(m_num_labels) just in case.", "pred": "Fixing a bug in image_data_reader."}
{"gold": "Even if we want to keep in original case - domain will be lower-cased.", "pred": "ZMSUtils: fix a bug in the code"}
{"gold": "Based on discussion with Chad it feels like trail_map_json could be a good column name.", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "This array should be logic-less, just the language string (without `Lang::get()`) should appear. Then `trans()` is [or should be] used when the balloon selector renders the values.", "pred": "Fixing a bug in the users controller"}
{"gold": "This looks like it runs both pre 3.0 rake tasks and 3 rake tasks, and since pre 3.0 we didn't use bundler, my guess is it will fail then.", "pred": "(maint) Fix typo in acceptance test"}
{"gold": "I'm not sure the replacement is a good idea, and as I said in #336 , this \"parent-name.scope\" is not a good idea in the first place, specially when we support assigning a slice as the parent, so we should change this, WDYT?", "pred": "Fix typo in comment"}
{"gold": "sloppyReassign: re-assignment to `err` can be replaced with `err := kv.WriteBatch(batchForBlock)` (from `gocritic`)", "pred": "fix: remove unnecessary log"}
{"gold": "using factory method. return CompletableFuture.completedFuture", "pred": "Fix typo in VertxServerResponseToHttpServletResponse"}
{"gold": "The `_x` function needs to be imported at the top of the file (in addition to `__`)", "pred": "Update Analytics CTA link in stories."}
{"gold": "this looks like the only controversial change potentially. @MatthewHinton56 Could let us know why you made this change (which `go vet` warning was triggered)? @wenyingd could you take a look and let us know if you're okay with this change?", "pred": "Fix comment in ofFlow"}
{"gold": "This seems like left-over debugging code. I think I fixed this to no longer be necessary, switching to UserControl for the designer.", "pred": "Fix build error"}
{"gold": "As we're currently not applying any logic in the proxy listener, I guess we can simply remove this file (and remove the `listener` argument from the `register_plugin(..)` call above).", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Isn't the point of the clock module to encapsulate access to `time.Now()`? Coming later?", "pred": "fix: typo in comment"}
{"gold": "as before - if you've set this, you should be able to get rid of the `os.Setenv(\"ALGOSMALLLAMBDAMSEC\", \"500\")`. make sure that the various tests still takes have the same execution time.", "pred": "fix: fast upgrade consensus test (#1000)"}
{"gold": "Pretty sure the single quotes here should be double quotes, single quotes are not expanded by the shell.", "pred": "Fix typo in mactex install"}
{"gold": "these are not really constants, right?", "pred": "Add missing test for Validate.notNaN"}
{"gold": "import below copyright statement", "pred": "Update version number to 0.1.1"}
{"gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "pred": "fixing spec"}
{"gold": "`if (is_string($value) && $this->getDefinition()->get('allow_html')) {`", "pred": "Fixing a bug in the Field class"}
{"gold": "I think we have the same problem here - if folks called the `public void Add` with a `null` key, we need to use `Guard`.", "pred": "Fix typo in comment (#1107)"}
{"gold": "I thought that the main was in catch_qt.cpp?", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "I would rename the field to IMAGE_TYPES and make it an array. I don't think we need list operations. Also, if possible, I would move the field to the ApiFields class. What do you think?", "pred": "Fix image upload crash"}
{"gold": "I'd prefer to timeout on this, but I know it's not a pattern that is being followed", "pred": "Fix unit test failure"}
{"gold": "hmm let's not use * imports please", "pred": "LUCENE-5744: Fix javadocs"}
{"gold": "is this configuration key already exist in prometheus ?", "pred": "Fix typo in alertmanager config template (#1047)"}
{"gold": "As @gravitystorm said new tests need to be using factories, not fixtures.", "pred": "Fix test"}
{"gold": "You can replace IP by hostname.", "pred": "Fix the bug that the command line prompt is not displayed when the user is not interactive (#1025)"}
{"gold": "This should say \"why\" NVDA should do things in this order.", "pred": "Fix for #1004: Don't try to connect to USB devices that are not connected."}
{"gold": "nit these will get changed back during next release.", "pred": "Fix typo in test name"}
{"gold": "it is actually not needed to make the member public. the build tags can also set a package scoped variable.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "We already have a method for it 'icon' => $content->getIcon()", "pred": "Fixing content extras trait"}
{"gold": "Instead of importing `golang.org/x/net/context` The SDK should use `aws.BackgroundContext()` instead of `context.Background()`", "pred": "Fix import"}
{"gold": "I think this is an agnostic change for the ORM right? Why was it doing this? - this does not work on PHPCR-ODM as the `id` is not a field - although I guess it could be mapped as such.", "pred": "Fixing the media controller"}
{"gold": "I'm not 100% sure, but I think this should be `explorable`. If not, I think `explorable` can be removed entirely.", "pred": "Add helper method for current_user"}
{"gold": "Note to self: Why was this not originally not using `stderrbytes`?", "pred": "Fixing a bug in the mock target."}
{"gold": "Is betterLOG_IF(ERROR, status != 0) ?", "pred": "Fixing a bug in FileUtils::listAllTypedEntitiesInDir"}
{"gold": "I wouldn't call it default too.", "pred": "Fixing a bug in the base load test."}
{"gold": "Why disable the rule for this file?", "pred": "Fix import path for navdrawer"}
{"gold": "Thanks for adding this :+1:. Could you please move it to go after the `ctaLink` prop?", "pred": "fix(CTA): add missing propType"}
{"gold": "The other way around Current can be null.", "pred": "Fixing a bug in the enumerator"}
{"gold": "why does it have to be here? Due to breadcrumb navigation?", "pred": "Fix menu"}
{"gold": "I fear moving this to some common func. We are swallowing the error here. This might be ok in UT but not in actual source code.", "pred": "fix(tests): fix import path for volume target test"}
{"gold": "Please don't use \\ as a line continuation. Do an implicit string join instead with parens: ``` (\"Message ...\" \"and ...\")", "pred": "Fix test_messages_store.py"}
{"gold": "there needs to be a change here. setting up the batchstore with localstore.Unreserve hook", "pred": "fix: typo in comment"}
{"gold": "I think if we can provide a more convenient method to add configs . e.g. public static void addConfig(String k, Object v)", "pred": "fix: remove unused import (#106)"}
{"gold": "line is 165 characters", "pred": "fix test"}
{"gold": "Please add a copyright notice. Also, could you tell me please why do we need this empty provider here?", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "I feel like this would be easier to read if we join the two if's together: `if (maybePrivacyGroup.isEmpty() && !privacyController.isGroupAdditionTransaction(privateTransaction))`", "pred": "Fix typo in EeaSendRawTransaction"}
{"gold": "Tests are failing because the exception type is NullPointException here if the soupBlob is deleted (so instead of a mal-format json, it's a null)", "pred": "Fixed bug in DBOpenHelper."}
{"gold": "Glad we fixed this as well. Blockly is going to be left as-is for this case, right?", "pred": "Fix #1008: Allow connecting value plugs to next block"}
{"gold": "I had accidentally deprecated this class. This is meant to stick around. Only `SalesforceObjectType` goes away.", "pred": "Fixing the license header."}
{"gold": "`hex(i)[2:]` is trying to do the same thing above. what is `i` in your malformed case?", "pred": "Fix for python3"}
{"gold": "I think this change is redundant; see the previously defined method \"writeUnescapedXML\".", "pred": "fixing a bug in XML.writeXML"}
{"gold": "Ah now I have at least some idea what these are for.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "I believe in previous PRs @mccheah frequently used `fileSchema` -> `newFileSchema` type of renames to avoid hiding fields in builders. Would it make sense to make it consistent?", "pred": "Fixing a typo in the DataReader javadoc"}
{"gold": "Do we really need separate error in manager if utils.ErrRequestCancelled is the only error which indicates cancelation ?", "pred": "Fix typo in comment"}
{"gold": "Leave as `cpp` since that still gives better results.", "pred": "Fix typo in config.py"}
{"gold": "temp change so the predicate can be used by the `exp` package", "pred": "Fix import path for logr"}
{"gold": "Just as a tiny clarification, this isn't affected in any way by \"speak typed characters\". That is, \"caps lock on\", etc. is always spoken, even if speak typed characters is off.", "pred": "Fixing a bug in the keyboard input gesture."}
{"gold": "@dgoodwin Will it cause an issue when the issue get fixed in OLM?", "pred": "Fix typo in hiveconfig_controller.go"}
{"gold": "This option is now unnecessary", "pred": "Fixing typo in BlockchainProcessorOptions"}
{"gold": "Don't jump down to the unexported interface: just set the content type to `\"application/octet-stream\"` explicitly when creating the `Writer`.", "pred": "Fix test"}
{"gold": "Instead of counting this here on clear, can we use a second counter for the deleteTerms next to `bytesUsed`? This would be great. It doesn't need to be thread safe IMO", "pred": "LUCENE-5764: Fix javadoc"}
{"gold": "@daftspunk @bennothommo I wonder if we need to go as deep as detecting what the default varchar length is with a special character to be parsed by the validation trait since we've introduced the config for it.", "pred": "Fixing a typo in the User model"}
{"gold": "Also update line 2205 below", "pred": "JasonLeyba: Fixing a typo in a comment."}
{"gold": "Typo, should read `firstTimeEmptySubject`", "pred": "Remove unused import"}
{"gold": "The more I see this the more I think the transport layer _should_ actually refer to this as `UnaryHandler`.", "pred": "transport: fix typo in comment"}
{"gold": "The `warn` message here seems to indicate that the forced closure of the SSH connection should raise an error; is that getting swallowed up somewhere and not raising?", "pred": "(BKR-101) Fix scp_to_host to use the correct path separator"}
{"gold": "I wonder if this is a fitting name. Why \"expands user\"? Wouldn't be `user_expanded` or so be more fitting?", "pred": "Fixed bug in filename prompt"}
{"gold": "I see what you are doing here, but to stay with the `getter/setter` pattern, should we introduce `set isHidden(value)` & `get isHidden()` which them maintains `_isHidden` with in `vNodeCache`. This will avoid what looks like accessing an internal property like `_isHidden` from `axe.utils.isHidden` & keeps things neat.", "pred": "fix(axe-core): fix shadow dom detection"}
{"gold": "nit: for consistency, have this line and the previous formatted similarly", "pred": "fix typo in csharp package transformer (#280)"}
{"gold": "As before, shouldn't mention these as being orion options I don't think. Perhaps just enclaveKeyStoreFile etc.", "pred": "Update PrivacyParameters.java"}
{"gold": "What's the thinking here? Only logging when the test has not ended yet?", "pred": "Fix linting errors in `observe-rest-response.js`"}
{"gold": "@HyukjinKwon @ueshin (cc @itholic @charlesdong1991 ) Not sure if this is the right implementation ...", "pred": "[SPARK-10145] [ML] [PySpark] [MLlib] Add Python wrapper for DataFrame.select"}
{"gold": "Do we want to add any specific error on how the url is malformed?", "pred": "fix: remove unused variable"}
{"gold": "why NOT self->lastLogIdSent_ = self->logIdToSend_", "pred": "Fix a bug in the host log appender"}
{"gold": "Shouldn't this be in the above `if` block where we are setting the installedtimestamp to ensure this only happens for already installed (and/or adopted) clusters?", "pred": "Fix typo in comment"}
{"gold": "This seems like another unrelated change I've done in `master`.", "pred": "Fix #105: tabbed_browser.tabopen() is not a function"}
{"gold": "Would be good to have another context `\"when a duplicate formatter exists for a different output target\"` that shows that it keeps both. As this stands, the specs could pass w/o the `formatter.output == new_formatter.output` check.", "pred": "Fix typo in spec description"}
{"gold": "Why not just remove? The CUDA one has been around for while. This one has not been part of any release (?)", "pred": "Fix SYCLDeviceUSMSpace::deallocate()"}
{"gold": "nit: `Contentful` is the word used in the GV API, without the uppercase in F", "pred": "Fix typo in Session.java"}
{"gold": "It just does the check, maybe we can name it as checkOperations.", "pred": "fix: swagger-codegen-maven-plugin: fix the bug of swagger-codegen-maven-plugin"}
{"gold": "We no longer have karma output in the test file so these selectors were now unique and the target didn't need a child selector. Updated to force non-unique nodes", "pred": "Fixing test"}
{"gold": "This moved from a partial to not being in a partial. How about cleaning this view up further by moving it back into a partial?", "pred": "Add link to mentor profile"}
{"gold": "add some form of docs in docstring or on :74 for what the effect is", "pred": "fix: typo in comment"}
{"gold": "Couldn't you import `json` from `kinto.core.utils` here too?", "pred": "Fix import"}
{"gold": "Minor: Hmmm...is it worth setting this explicitly for the tests that it affects?", "pred": "Fixing the spec_helper.rb file"}
{"gold": "This was added to fix a race condition and you are reverting it here, right?", "pred": "Fixed bug in StatefulReader destructor"}
{"gold": "Could you add some extra text here, so that it reads \"eth_coinbase function is not available, please use --private.api.addr option instead of --chaindata option\", so that it is clear that the function can work, but different options", "pred": "fix: typo in comment"}
{"gold": "`new_ncr_work_order_path` ? (I've been slowly moving specs over to that way of calling paths)", "pred": "Fixing feature test"}
{"gold": "Should flash be included in the patterns too? It currently isn't.", "pred": "Fix typo in the documentation"}
{"gold": "I suspect I will have to keep looking whether Left/Right refers to contract/Implementation while working on the rules code.", "pred": "Fixing a bug in the sealed rule."}
{"gold": "(ignore this. testing a codeflow bug)", "pred": "Fixing the issue with the generated code for Azure Resource Manager."}
{"gold": "[Nit] can you change the Usage wording to indicate that the flag is used to opt-out of server certificate verification? (e.g. \"disables validation of the Cassandra cluster's server certificate.\")", "pred": "Fix typo in TLS flag name"}
{"gold": "Sorry :) Would be really helpful to integrate something like Eclipse Code Formatter, so it will fail if the code style is broken (the same as eslint fails on the frontend) I use IntelliJ IDEA and their vision of imports is a bit different :)", "pred": "Fix import"}
{"gold": "this will still fail on systemd", "pred": "(BKR-100) Fix iptables disable on Fedora"}
{"gold": "The convention in most of the codebase is to use `if isinstance(body, bytes):` instead.", "pred": "Fixing a bug in the RDSConnection."}
{"gold": "I think this would be better as: `label = comp.rsplit('.', 1)[-1]`", "pred": "Fixing a bug in the console"}
{"gold": "We have been creating a language-level context interface for each language instead of parameterizing the generate function.", "pred": "fix: remove unused import (#100)"}
{"gold": "Same thing about context here.", "pred": "fix uuid generator"}
{"gold": "there is a function to get namespace entry from mutable state directly", "pred": "Fix typo in comment (#4401)"}
{"gold": "The `Transport::Config` objects don't serialize properly. We probably want to just turn them into hashes at this point.", "pred": "(maint) Fix hiera_config in apply_prep"}
{"gold": "Sorry, typo s/unusuable/unusable/", "pred": "[docs] Add note about omitting containers (#2148) [skip ci]"}
{"gold": "If this is needed, should we check that the configured `uri` isn't already equal to the value of the metastore URI configured via `spark.hadoop.hive.metastore.uris` or any of the other ways of setting it. This would be a breaking change for people who have `uri` configured on the SparkSessionCatalog and have it correctly set (which I believe should be everybody as `uri` is currently required if I'm not mistaken).", "pred": "Fix SparkSessionCatalog to use the correct catalog name"}
{"gold": "see above - this is only used to select the correct view, we don't need to handle the boundary information here.", "pred": "Fix typo in multipart example"}
{"gold": "These tests use a self-signed cert so the CA *is* the cert. I considered making a proper chain to use in the tests, but wasn't sure it was necessary to test here, since we test it in the E2E tests anyway.", "pred": "Fix test"}
{"gold": "We could, maybe, just directly do `excessDomChildren[excessDomChildren.indexOf(dom)] = null;`. Would this improve the size in any way? This will end-up with a property on the `excessDomChildren[\"-1\"]` but maybe we could live with that?", "pred": "fix(diff): fix diffElementNodes"}
{"gold": "this looks like it may be something that needs additional refactoring", "pred": "fix(gridUtil): fix typo in gridUtil"}
{"gold": "Nit: Remove whitespace (and below)", "pred": "Fix a bug in the resource dispatching logic."}
{"gold": "\"Failed opening\" or \"Failed to open\".", "pred": "Update en.lang.php"}
{"gold": "and -> or", "pred": "Fix typo in disk.go"}
{"gold": "Add a `yield User.init()` here to wait for all indexes to finish building", "pred": "Fixing tests"}
{"gold": "I don't think this belongs here. If the application can take a local_ip as input, the application should take care of it, not in this common library", "pred": "fix: include missing"}
{"gold": "@DanHarrin please add a `return true` at the bottom of this method, as the docblock indicates a boolean return value.", "pred": "Fixing a bug in the theme class"}
{"gold": "This is used in o.a.l.sandbox.search.BM25FQuery.", "pred": "LUCENE-1005: javadoc"}
{"gold": "Shouldn't this work as well for Disjoint?", "pred": "LUCENE-4895: Fix javadoc"}
{"gold": "Same here. This was included to quiet the test for the 3D descriptors. As we removed them, this exception handling is no longer required", "pred": "Fixing a bug in the test case."}
{"gold": "Why do you need to load a specific data reader in lbann_library?", "pred": "Fixing a typo in the callback_checkpoint.cpp file."}
{"gold": "why not ValueTask?", "pred": "fix: bootnodes are not removed from chain spec"}
{"gold": "I'm nervous about this line, I don't want to go regenerate a bunch of imageset jobs for clusters that are old, already installed, but don't have a CLIImage set (which they wouldn't because they're old) Adding the Installed guard is meant to address this. Otherwise this *should* recreate the imageset job due to the code in this function that deletes the job if it's finished. (but we don't have our images set due to this clause)", "pred": "Fix typo in comment"}
{"gold": "Is it necessary to change this file? Doesn't `tableMetadata` call `newTableMetadata`?", "pred": "Fix typo in HadoopTables"}
{"gold": "I think that I have a better proposal for this test - improve it so that it would know how to read the list of SupportedProtocolVersions and dynamically use these. The motivation here is that I expect to have another network version soon, and this test seems to be a good test case for that.", "pred": "Fix test name"}
{"gold": "What is the purpose of this debug message? I'm not sure how it would help.", "pred": "[MINOR] Fix HiveCatalog.listTables()"}
{"gold": "Is there a corresponding BUILD dependency to prune?", "pred": "Fix import path in extractor_test.go"}
{"gold": "The \"good\" and \"bad\" descriptions confused me a bit. Maybe `allowedContentType` and `disallowedContentType`? Not sure if that's better.", "pred": "Fix testSignedURL"}
{"gold": "It would be better to just change RWD to throw IllegalStateException if you attempt to execute a command after quit (unless it's a second call to quit())", "pred": "Fixing a typo in the javadoc"}
{"gold": "You may want to have a look at `func checkClusterFormed(t *testing.T, servers ...*Server)` in this file that I created some time ago. It will timeout at 5 seconds, but will return as soon as cluster is ready.", "pred": "Fix test"}
{"gold": "I see a few places where this blob of code is required due to the removal of `errnum` parameter from `flux_respond` -- trading 2 lines of code for 8. The improvement to the function seems like a good idea, but I wonder if we need a convenience macro or function to do it the old way? You went through and made all the changes, was it overall a net win?", "pred": "aggregator: fix push_cb()"}
{"gold": "I know it's not related to your change, but it's a bit odd that this import uses a relative path rather than the ones setup by webpack. Might be nice to change this one in case we refactor those paths in the future; this one wouldn't get caught in any kind of find+replace.", "pred": "Update adminbar.js"}
{"gold": "Good catch, and if we don't declare the newSchedule here, will the last schedule be executed in multi goroutine?", "pred": "Fixing the controller to wait for the scheduler to finish"}
{"gold": "`project` should never be null here, unless we have projects that aren't in the solution? Which we shouldn't have  ", "pred": "Fix build"}
{"gold": "Simple `for` loop instead of `for_each` would help here by making it more readable.", "pred": "Fix include"}
{"gold": "Looks like this falls through, should break.", "pred": "Fix thread role name"}
{"gold": "Let's default manifest lists and manifests to overwrite. These use UUID-based file names and should never conflict.", "pred": "Fix typo in javadoc"}
{"gold": "Please rename [speechView] to [speechViewer].", "pred": "Fixed a bug in the config file."}
{"gold": "I would use shorter yet still descriptive names, e.g. `KernelPerCpu` and `UserPerCpu`.", "pred": "Fix typo in cpu_usage.go"}
{"gold": "if we are seeking for the content of only one field from metadata, no need to check whether a user could edit record or not", "pred": "Fixing a bug in the display of the record."}
{"gold": "Should this be camelCase to match the above commands? I am not the expert here so maybe Lucas or David can chime in.", "pred": "Fixing typo in comment"}
{"gold": "This is also missing in CreateScopeFromExecuteAsync. Can you add that there too?", "pred": "Fix GraphQL integration (#1015)"}
{"gold": "I hope that this does not break anything... Probably needs detailed beta tests.", "pred": "Fixing a bug in the date parser"}
{"gold": "@JonRowe in what scenario do you see this being manually set?", "pred": "Fix typo in comment"}
{"gold": "I think the work \"trigger\" makes more sense than \"check\" because this is taking an action based on status.", "pred": "Fix block processor"}
{"gold": "add a configuration , default put public key in Microservice, if the configuration is set, then put in Instance.", "pred": "fix: \u4fee\u590dAuthHandlerBoot\u7684bug"}
{"gold": "WDYT about the idea above of making these all verbs that correspond to the input spec?", "pred": "Fixing a typo in the javadoc"}
{"gold": "With the introduction of the enum(s) the constants in the store classes should be removed.", "pred": "Remove unused import"}
{"gold": "I would say `!= 5`; A packet with <5 would be malformed.", "pred": "Fix typo in comment"}
{"gold": "I think you missed removing `Stateful` from `push/config.go`", "pred": "Fix typo in comment (#1040)"}
{"gold": "why would you make it internal? if so then at least protected internal", "pred": "Fixing a bug in the EthRequestsDb"}
{"gold": "We should check if the response (`d`) contains bar as response, screw the log. :smile:", "pred": "Fix test_https2http.py"}
{"gold": "@Laurae2 good call. This is the only one I found (with `git grep transfered`)", "pred": "fix bug in gpu memory allocation"}
{"gold": "I don't understand how this work, could you explain ?", "pred": "Fix typo in comment"}
{"gold": "The abbreviation for \"context\" used extensively inside DR is \"cxt\", not \"ctx\", so s/MCTX/MCXT/.", "pred": "Fix typo in comment"}
{"gold": "here is `:seconds` missing again", "pred": "Update fa.php"}
{"gold": "initializing to null makes me uncomfortable. let's have a default value", "pred": "Add default value for maxActiveConnections"}
{"gold": "This is the `GET % HTTP/1.1` scenario right?", "pred": "Fix #1056 - Kestrel throws exception when parsing invalid percent-encoded path"}
{"gold": "No need to use the fully qualified path the BackendAuth facade, just `use BackendAuth` is fine.", "pred": "Fix namespace"}
{"gold": "Because it's similar for send/open/change/receive types, then probably it can be just common `nano::epoch nano::block::epoch () const` with override for state_block (like nano::block::link (), account (), representative ())", "pred": "Fix send block"}
{"gold": "Please give a more descriptive name and add a command to explain what it does.", "pred": "fix: remove unused import"}
{"gold": "we can never get rid of this...", "pred": "Fixed typo in UserPreferences"}
{"gold": "what is the effect of changing these buckets in existing data that is available in the monitoring system? if there are any existing dashboards that use previous histogram buckets they are probably going to be wrong ot invalid? also any reason why we chose these specific values?", "pred": "Add a metric for the number of kube client requests"}
{"gold": "This won't work. For the flag to be passed to the plugin, it should be passed as part of the --plugin argument. --plugin \"yarpc --sanitize-tchannel\"", "pred": "Fix typo in comment"}
{"gold": "@shiyu1994 @StrikerRUS what do you think about this addition to `c_api.cpp`? I think it's a really useful addition to be able to get this type of information from the `Booster`, but I want more opinions since `c_api` is the main public API for the library.", "pred": "fix typo in comment (#2222)"}
{"gold": "rename Round -> requestedRound and DbRound -> dbRound. we don't need to export the fields here, only the error struct.", "pred": "Fix typo in comment"}
{"gold": "This expected value should probably be what you literally expect, otherwise there's a chance getClusterRegion is doing something wrong and the test wouldn't catch it because it's being run for both expected and actual.", "pred": "Add test for cluster deployment reconcile"}
{"gold": "TODO: update unit tests to exercise base64-inline path", "pred": "Fix import path"}
{"gold": "this method knows too much - it is kind of a strange side effect I'd prefer if we had separate method for acknowledging that the onboarding was done and should not be shown again", "pred": "Fix typo"}
{"gold": "Do we need to increase the DB version? Also, should probably be a constant, no?", "pred": "Fix migration bug"}
{"gold": "We could utilize the new isZero method in this if-statement, right?", "pred": "Fix typo in window.go"}
{"gold": "should probably have config have a `t` or a `logger.NewTestLogger(t)`, and return the latter", "pred": "block_ops_test: add a test for the new block ops"}
{"gold": "Does this not do the same thing as `copy`? I thought that `copy` just did an elementwise assignment, but maybe I was wrong.", "pred": "Fix typo in heuristic planner"}
{"gold": "Here we are merging the configs from proto annotations and gapic config. But in other places in this PR we are using the new enum to pick one or the other, right? Or is that not the correct way to think about this?", "pred": "fix: remove extra space (#101)"}
{"gold": "not related to this change?", "pred": "Fix typo in usage string"}
{"gold": "Why is this needed?", "pred": "Fix build script"}
{"gold": "This one could be replaced with a `std::max`, no?", "pred": "Fix for #1000"}
{"gold": "Couldn't you just write this as an if/else or a guard clause like on line 87? Just seems a bit weird doing this conditional assignment for essentially an if/else.", "pred": "Fix Firefox version detection"}
{"gold": "Please use strict type comparisons (`===`), not loose type comparisons.", "pred": "Fix filter widget"}
{"gold": "The filter parameters are a bit confusing. I understand that one of them has to be set, but what takes precedence if a from/to is set and the hash as well? Should that fail?", "pred": "Fix FilterParameter"}
{"gold": "Is that necessary?", "pred": "fix include"}
{"gold": "yess so much easier to read in order like this!", "pred": "Fix typo in work order spec"}
{"gold": "question: would this convention automatically and always apply to all classes derived from `LuceneTestCase` including any non-`org.apache` name spaces or would it be possible to opt-out (without an exclusion list) somehow for custom code that might perhaps have chosen a different convention?", "pred": "LUCENE-5782: Fix test failure in TestIndexWriterExceptions"}
{"gold": "Also found this bug, where we were setting the min passcode length to 6, but the min length for a connected app is 4. This can cause problems when the app is force closed or the shared pref is removed.", "pred": "[Andriod] Fix the passcode length"}
{"gold": "Why was this change necessary?", "pred": "Fixing a bug in the fast version of the TM"}
{"gold": "I kind of did this deliberately, so everything from the distributor appears in the same set of logs.", "pred": "fixing imports"}
{"gold": "We already have a `seq = pkt[TCP].seq` so you can just re-use it.", "pred": "tcp: fix a bug in TCPSession"}
{"gold": "We avoid wildcard imports because it isn't clear where symbols are coming from and there is potential for collision. Could you roll back this change? (As well as the additional newline, we don't use breaks in imports either.)", "pred": "Remove unused import"}
{"gold": "Why are these variables renamed? Is there a conflict with some Windows specific variable?", "pred": "Fixed test failure on Windows"}
{"gold": "Do you test for file existence simply to reduce the warning message that may occur using the include? Also - I think the practice used in BOINC is to go ahead and use include_once even though it isn't strictly necessary in this case.", "pred": "add missing require_once"}
{"gold": "`TimeChaos` does not contains a field .spec.action", "pred": "fix: add missing import (#1226)"}
{"gold": "You need to override where possible in rs-api", "pred": "Update RSAbstractArchive.java"}
{"gold": "Should this have an add/update/etc pattern? What happens if I need to change some set of data? May be better to just let the callsite manipulate the dictionary.", "pred": "Update BuildInfo.cs"}
{"gold": "I don't think this should be added to PyRegion. Adding it here requires that every region have an \"algorithm\" which may not always make sense and the return value type will be different in every case. But fine to use the same name in the regions where we choose to implement it as a convention if that makes the API more discoverable.", "pred": "Fixing a typo in the docstring of the PyRegion class."}
{"gold": "Returning here bypasses all the health check and load balancing features.", "pred": "caddyhttp: fix typo in healthcheck docs"}
{"gold": "Should revert this copyright change, when the file isn't changing in any other way.", "pred": "Fix typo in comment"}
{"gold": "Interesting that filepath.Dir(\"thing\") returns \".\" whereas this returns \"\"", "pred": "Fix typo in comment"}
{"gold": "Nice, I did not know about that", "pred": "DOC: Fix Series.corr docstring (#23154)"}
{"gold": "Since the lock is have moved outside of this function, I think it would be simpler and efficient to just return a ref to the std::vector<hsa_executable_t>? That way, we don't need to make a new copy on read and we won't actually need a write operation.", "pred": "[HIPIFY] Fix hipify-clang-format"}
{"gold": "also fetch block hash of this height and return hash", "pred": "fix: fix lint error (#2114)"}
{"gold": "Why do we need this in this sample app and not the others?", "pred": "Fix typo in comment"}
{"gold": "We don't need this additional method.", "pred": "Fix typo in javadoc (#112)"}
{"gold": "Shouldn't this return code conditionally? The above line seems like an error occurred.", "pred": "fix create user command"}
{"gold": "What is the need to use string as key? Can we use the apis type as the key?", "pred": "Fix import path for k8s.io/apimachinery/pkg/types"}
{"gold": "how about a default parameter instead?", "pred": "fix: remove unused import"}
{"gold": "i don't think we need to add duplicate check for clusterinstallref here, the function already assumes that it was invoked for clusterprovision", "pred": "Fix typo in comment"}
{"gold": "\\`bbox_feats.shape[0] > 0\\` requires the number of proposal is not 0.", "pred": "fix: fix the bug of semantic_roi_extractor (#438)"}
{"gold": "Same here. Any way to fit on one line?", "pred": "Fix typo in rewrite manifests action"}
{"gold": "using folly::to is better ?", "pred": "Fix a bug in TestShard::commitLogs()"}
{"gold": "I'm guessing this is unintended?", "pred": "Fix typo in comment"}
{"gold": "This looks a little suspicious to me, can you explain what's going on here?", "pred": "fix(change-stream): fix resume token and start at operation time"}
{"gold": "Can you talk about this? I'm not sure I follow why this is necessary.", "pred": "Add helper method to check if user is logged in"}
{"gold": "Is there really a need for this 'simple' layout? Is there a reason you can't use 'lightbox'? The only difference seems to be that the lightbox layout includes Piwik/Google Analytics tracking and simple does not. If tracking needs to be disabled for some reason, perhaps there is a way to do that without creating a whole new layout.", "pred": "Fixing the layout issue"}
{"gold": "Can you say what exception will be thrown in that case (or add an `@throws`, below)?", "pred": "LUCENE-2804: add javadocs for findForcedMerges"}
{"gold": "Is this meant to be \"2.7\" or \"2.6\". The two lines in this commit don't agree with one another. Looks like everything else in this PR is \"2.6\" and that seems sensible.", "pred": "Fixing the version check for python 2.5"}
{"gold": "Should we put these tests in a `generators` directory?", "pred": "Fixing import error in test_pattern_machine.py"}
{"gold": "I think that it makes more sense to keep these with the standard definition of non-zero is true and zero is false.", "pred": "Fix a bug in greater_equal_op."}
{"gold": "Any idea why you want to change the behavior here? Is there a security risk not to have the prefix in the principal here.", "pred": "Fix test_basicauth_plugin"}
{"gold": "this reads like \"mock database cache\", maybe a clearer name", "pred": "Fix import path in config_mock.go"}
{"gold": "Nit: move this with the other CM imports.", "pred": "Fix import path for logr (#2105)"}
{"gold": "This change should be mentioned in the CM", "pred": "fix: remove unused use statement"}
{"gold": "Do we really want a new type, or can we just use `SpanContext`? The `ISpanContext` interface is read-only, but there's nothing stopping users from casting this to `SpanContext` and modifying it.", "pred": "Fix typo in SpanContext (#1035)"}
{"gold": "Should we define a const like NETFRAMEWORK or NETFULL which will be set for NET452 NET461 and anything like NET47 etc in future?", "pred": "Fixing the license header"}
{"gold": "maybe start an issue to capture params that we need final values for and link to it here?", "pred": "Update proving period to 200000"}
{"gold": "Can we instead do the check in find_instance_group_by_url() ? if we return None when group is not found, it will hit the next if statement (if not instance_group) and continue as expected, in this case we don't need to add 3 separate if statements", "pred": "Fixing a bug in the run data"}
{"gold": "on my android \".a.m\" and \".p.m\" is used add `||` here to support both variants", "pred": "Fixed bug in DateUtil.toSeconds()"}
{"gold": "`!FormatIsMultiplane(image_format)` will always be true at this point due to the test on line 4639.", "pred": "layers: Fix typo in VUID message"}
{"gold": "Maybe inline the CachedAccessor code? Is it similar to our lazy property? If yes, can we reconcile the two?", "pred": "[SPARK-35758][PYTHON] Fix type hints for pyspark.sql.functions.pandas_udf (#32414)"}
{"gold": "Nit this file has unintended changes.", "pred": "Fix typo in smoke test"}
{"gold": "Potential NPE? `hasMedia && selectedItem...`", "pred": "Fix crash in FeedItemMenuHandler"}
{"gold": "PEP-8/consistency with the rest of the code.", "pred": "Added support for the new DescribeVolumeAttribute API call."}
{"gold": "nit: Would you mind moving the `ParameterTypeNames` assignment into each of the method-specific attributes? That could reduce confusion if we later decided to instrument other methods in MongoDb", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Is exposing SpecProvider needed here?", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "So this will only be executed when it is true. I'm not sure that makes it always usable. Why not make the afterAction, `Action<bool>` and always call it, with the result as parameter.", "pred": "Update MvxNotifyPropertyChanged.cs"}
{"gold": "Tim, please add { } to this 'if'.", "pred": "pfs_table: fix a bug in resolve_name"}
{"gold": "Suggest moving to `enable.go` since thats only place used.", "pred": "Update reporter.go"}
{"gold": "This changed when I rebuilt my docker container. Not quite sure why, but might have to do with what my host network configuration looks like when it's rebuilt.", "pred": "(maint) Fix apply_prep test"}
{"gold": "Local cache of what? What's stored in it?", "pred": "Fix import path"}
{"gold": "If the copied `DataFile` returns null, shouldn't the copy also return null? Why not make the builder use `Integer` instead of a primitive here?", "pred": "Fix checkstyle error"}
{"gold": "You could just do this test in the `save_html` function above, and then the users of the save html function don't have to worry about it.", "pred": "Update html_writer.py"}
{"gold": "I think I'd prefer not using the formatted string when it comes to unit test, since we don't pass in any string variable as params.", "pred": "Fix test"}
{"gold": "Maybe it would be better to explicitly include devices instead of explicitly excluding devices?", "pred": "machine: add support for nrf52840"}
{"gold": "This could be `for (auto bond: bonds()){`, right?", "pred": "fixing a bug in clearComputedProps"}
{"gold": "Is $config no longer being used? Can we remove this line?", "pred": "Fixing a bug in the library card controller"}
{"gold": "can you revert changes to this file.", "pred": "Fixing a bug in remove_ext()"}
{"gold": "I don't believe the change is sufficient to correctly handle variable substitutions in the name. As part of the process command we pass the original role object that was retreived without taking into account the substitution. So while the first template apply command will work fine because the original role does not exist thus it's a new add operation, if you try to re-apply the same template again, we'll pick up and process a wrong original name thus we'll try to execute an add operation again instead of modify. So we need to take into account the substituted name when we retrieve the original role as well. Same change should be applied to both policy and service blocks as well.", "pred": "Fixing the issue with the audit log separator"}
{"gold": "Please add this to IMvxMainThreadDispatcher as well", "pred": "Update IMainThreadDispatcher.cs"}
{"gold": "Is it possible for opt not to be a string? I couldn't tell if this was a typo or if there is actually a case where it is not a string.", "pred": "(maint) Fix typo in bolt-server help"}
{"gold": "Let's move this up next to the `id` as we usually have `className` as one of the first props.", "pred": "Update UserInputSettings.js"}
{"gold": "While you're in here, \"build, push and install\"?", "pred": "Bump version to 3.1.1"}
{"gold": "Unit never made it to spec...so removing.", "pred": "Fixing typo in Metric API (#100)"}
{"gold": "We have RequestStart which seems redundant a bit to this one, WDYT?", "pred": "Fix typo in comment"}
{"gold": "I think we can remove this corresponding export from `preact` now! Double check no other s using though lol", "pred": "fix(test): fix test"}
{"gold": "I'm not sure why this would be in here. Were you working off a branch based off of master? These lines were removed in a previous commit because the table is actually called 'cart_item_traits'.", "pred": "Fix schema.rb"}
{"gold": "Maybe `DEFAULT_GITHUB_API_ENDPOINT` would be a better name, since we refer to this as an API endpoint elsewhere?", "pred": "Fix typo in comment"}
{"gold": "If/when you rebase from `dev`, this is going to cause a merge conflict. I'd suggest that soon after merging this PR as the capabilities code has been moved to \"agent/app/agent_capabilities.go\"", "pred": "Update docker_task_engine.go"}
{"gold": "What is the test case here?", "pred": "Fix test"}
{"gold": "You could try moving this closer to the call, where we request label info. We might be doing the check very early.. all the resources may not be present with the informer at this point.", "pred": "Fix typo in flow-aggregator.go"}
{"gold": "Can we add these up by the data files counts?", "pred": "Fix typo in comment"}
{"gold": "Most of the time assigning won't save bytes unless used 3+ times (var adds 3bytes)", "pred": "Fix typo in comment"}
{"gold": "I would rather find the code that inverts the logic and remove that.", "pred": "Fixing a bug where the album artist was not being displayed in the media session."}
{"gold": "The else doesn't return anything?", "pred": "Fixing a bug in the RemoteConnection class"}
{"gold": "assignments should only be cuddled with other assignments (from `wsl`)", "pred": "Fix typo in comment (#1120)"}
{"gold": "why not simply `paths = search_path_opts.LibrarySearchPaths` ?", "pred": "[gardening] Remove unnecessary include."}
{"gold": "Are we sure this should be translated by the web client? It was unclear in chat exactly what's getting translated here.", "pred": "Fixed a bug in the list view where the list view would not show the correct item."}
{"gold": "same oneof issue.", "pred": "Fix typo in comment"}
{"gold": "If we resolve here, isn't the whole `module_install` config setting or any subkeys also pluggable? I think that's totally fine, just want to make sure that that's known, and we should also update the data in `options.rb` for those options", "pred": "(maint) Fix typo in comment"}
{"gold": "it would be better to change `kds` into a `std::vector` then we don't need to explicitly free it", "pred": "Fixing a typo in hipExtLaunchMultiKernelMultiDevice"}
{"gold": "Looks like you're also changing logic and not only tests.", "pred": "fixing sendgrid"}
{"gold": "Is it possible that test failures here are real and that we should improve the rate limiting logic? Or are we ok with rate limits to be exceeded by 15%?", "pred": "Fix typo in comment (#1179)"}
{"gold": "Shouldn't there be some kind of validation somewhere? IMO there should be an exception if `$options['lazy']` is not a boolean.", "pred": "Fix typo"}
{"gold": "nit: please move it inside namespace.", "pred": "Fixing copyright header"}
{"gold": "The inventory schema needs to be regenerated to include these options. Looks like the CI job didn't get triggered since the paths don't include `lib/bolt/transport/**`.  ", "pred": "(maint) Update gemspec to include puppet-agent"}
{"gold": "This might break if a user runs the system tests with a system language other than English, in which the user default language differs.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "This was raising intermittent errors, since Lorem ipsum contains the word \"error\"", "pred": "fixing rspec matcher"}
{"gold": "Shouldn't we then add `mp_impl = nullptr` to the destructor of `RTPSParticipant`", "pred": "Fixed bug in RTPSDomain::removeRTPSParticipant"}
{"gold": "Are the additional brackets necessary?", "pred": "fix test_datasets.py"}
{"gold": "consumerMeta only belongs to this invoker instance only relate to this one consumerIntf class seems no need to build a complex key?", "pred": "fix: \u4fee\u590dInvoker\u7684bug"}
{"gold": "this one is unrelated right? (Don't mind including it, just making sure I understand)", "pred": "Fix typo in spec description"}
{"gold": "8, 11 actually achieves similar performance, we should use our default config if [9,11] is unnecessary.", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "For a separate PR: Can we make this a JSON/Thrift procedure instead? It could accept the amount of time it needs to sleep as an argument.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Please remove this blank line.", "pred": "Fix test_tab"}
{"gold": "the cartTrait is not used anymore", "pred": "fix(front): fix missing use statement"}
{"gold": "Cn you please make the message more human friendly.", "pred": "Fix typo in TracerFactory.Create (#1060)"}
{"gold": "Please do `import enum` instead, then use `enum.Enum` and `enum.unique` - we do this everywhere to see where things are coming from, except for Qt (everything begins with a `Q` anyways) and typing (mostly used in type annotations, so it's clear without the namespacing).", "pred": "Fix import"}
{"gold": "Isn't ENCFAIL used in codec.c below? Wouldn't this make it no longer compile?", "pred": "Fix a warning in the ARM decoder."}
{"gold": "this looks very weird", "pred": "Fix typo in StaticLangXCombinedSurfaceView.java (#110)"}
{"gold": "So, the culprit was actually this class \"ConsoleLogHandler\", correct? Because it simply wrote to stdout...", "pred": "Fix typo in javadoc"}
{"gold": "Still curious why you need to modify this method? Why not in the future just have a method called `LogFactory.ReloadConfiguration()` instead of the config assigning itself?", "pred": "Fix XmlLoggingConfiguration.Reload()"}
{"gold": "Should this say \"lint, cleanup, destroy, dependency, syntax, create, prepare, converge, idempotence, side_effect, verify, cleanup, destroy\"?", "pred": "Fix test"}
{"gold": "I am not sure why these log messages are changed.", "pred": "Fix typo in comment"}
{"gold": "This panic is incorrect - this is a full implementation of a slice equality check. This should be something more like `type x is not comparable` maybe?", "pred": "runtime: fix comment typo in interface.go"}
{"gold": "See below: let's use the existing convention _tcsnlen.", "pred": "Fix a typo in dr_get_options_helper.c."}
{"gold": "Why don't we need this any more?", "pred": "Fix approval step spec"}
{"gold": "clean unnecessary comma", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "This is the default value for enumerable.", "pred": "Fix typo in comment"}
{"gold": "Just above, you have `const auto` for a `RDKit::MOL_SPTR_VECT::const_iterator`, here it is only `auto`. Why is this?", "pred": "fix a bug in the reaction template string generation"}
{"gold": "@djarek just a quick question, wouldn't be `ptr.reset()` here better as it does not memory leak if we do not call delete on the raw pointer aswell? it maybe makes sense to use `ptr.release` if the event is guaranteed to be loaded again but on a reload it would memory leak if for example I removed that script from my files before reloading or not?", "pred": "Fixing a bug in the Actions class."}
{"gold": "Why to `Get()` value twice, while u have it 2 lines before", "pred": "Update config.go"}
{"gold": "There is a typo here, this needs to state `october.fresh`", "pred": "Fixing the October\\Rain\\Foundation\\Application namespace"}
{"gold": "Metadata tables loaded through `HadoopTables` will have their names as location.type (which is weird as we normally use location#type). I am not sure whether it is a big deal or not.", "pred": "Fixing a test that was failing due to a change in the way transforms are handled."}
{"gold": "Can you explain why you went from a positive value (metrics.viewTop) to a negative value?", "pred": "Fix #1003: VerticalFlyout scrolls to top when dragging blocks"}
{"gold": "Let's use a dedicated DTO instead of `List<String>` to remain consistent with all other existing REST API endpoints: * Introduce a new DTO class (e. g. `ExternalTaskTopicNameDto`) located under `org.camunda.bpm.engine.rest.dto.externaltask` * The class should have the attribute `topicName` of type `String` * Introduce a getter & setter for the attribute * Convert the list of strings to a list of `ExternalTaskTopicNameDto`s * Change the method signature to return `List<ExternalTaskTopicNameDto>`", "pred": "fix(engine): fix typo in ExternalTaskRestService"}
{"gold": "Do you plan to remove the `ScriptDTO getScript(List<String> path);` method long-term?", "pred": "Fixing javadoc"}
{"gold": "@itsiprikshit I used a custom v-model to app count component because the sourceapps component was not reacting to user app count selection, e.g. whenever user changed app count selection, the source apps selection multiplicity remained the same. As a matter of fact, user was able to select one application only. Please let me know if you have any thoughts on this.", "pred": "Fixing bug in types filter"}
{"gold": "Similarly, we think we may keep `fused_semantic_head.py` unchanged. Then, we could add a new mask head for the desired function.", "pred": "fix import error"}
{"gold": "Why implement this? It duplicates the value in FeatureConfig.", "pred": "Fixing a bug in the PhpModelTypeNameConverter"}
{"gold": "@aokolnychyi / @RussellSpitzer / @holdenk Spark3 gives ScanBuilder - abstraction - to define all types of Scans (Batch, MicroBatch & Continuous). But, the current implementation / class modelling - has SparkBatchScan as the Scan implementation. Looking at some of the concerns of BatchScan - all the way from the State maintenance of a single SnapshotId to read from, the asOfTimeStamp & features like VectorizedReads - all of these don't seem relevant to Streaming Scans. So, I feel that we need to divide out Streaming Scans into a different class. Does this thought process - make sense? If we go by this route - do you folks know - how to pass different Scan objects to Spark based on Batch vs Streaming?", "pred": "[SPARK-21658][SQL] Fix the build error in SparkScanBuilder"}
{"gold": "Will you please update these files to use a copyright end date of 2021?", "pred": "Fix typo in ClaimTypeConverter"}
{"gold": "Adding fixture to the body as we don't have the `runner.tmpl` anymore", "pred": "fix(axe-core): fix linting error"}
{"gold": "nit: just for consistency we can move this import block down. Right above openshift/hive imports", "pred": "fix: import path for workqueue"}
{"gold": "Perhaps clean up the commit history and don't squash?", "pred": "Fix typo in comment"}
{"gold": "Just `writeBytes(content.array())` Back to my original, somewhat broken version ;)", "pred": "Fix a bug in ScribeInboundHandler"}
{"gold": "I couldn't tell from reading the test - do we every criss-cross transports in the same test? I want to make sure we aren't breaking the chain...", "pred": "Fix crossdock test"}
{"gold": "File is not `goimports`-ed", "pred": "Fix import path for clock package"}
{"gold": "do we want to still validate that the context had a nonzero TTL? i suppose it's fine to let clients determine whether or not their streams will timeout (though we still don't have the means to cancel them from the server other than EOF), and they can still cancel their own contexts - so maybe not a huge deal, but thought it was worth bringing up.", "pred": "Fix typo in comment (#136)"}
{"gold": "Go ahead and provide the same implementation for all of the languages - I'm not sure there's a reason for it to be different.", "pred": "Fix JavaNameFormatter to use the original name"}
{"gold": "We should also test type confusion here (e.g. `{\"anticache\": \"foo\"}`)", "pred": "Fix test_web"}
{"gold": "I'd love to trim the content of `unformatted` too. Any ideas?", "pred": "Fix dartfmt"}
{"gold": "can you remove this unrelated change?", "pred": "Fix typo in comment"}
{"gold": "Would using `HintLabel` here instead (without `setObjectName`) work?", "pred": "Fix typo in comment"}
{"gold": "From what I can tell, the `serviceAccountFile` is never set to anything except \"\"? It'd be best to remove this altogether, so we don't mislead future developers  ", "pred": "Fix typo in comment"}
{"gold": "Why do we remove the Sign in link?", "pred": "Add link to sign up page"}
{"gold": "holy crap, were we really missing a 'break' statement here?", "pred": "Fix: Crash when moving queue item to top or bottom"}
{"gold": "This doesn't seem to be used anywhere, probably doesn't need to be a new interface.", "pred": "fix: remove unused interface"}
{"gold": "This is a good start, but what do you think about just using `libkbfs.GetCurrentSessionIfPossible()` to avoid calling this altogether if there's no session? That way we can avoid continuous RTTs to the server when logged out.", "pred": "quota: fix typo in comment"}
{"gold": "This `aria-labelledby` stuff is all new to me, but my reading of the spec is that the value should be a list of element id values, and `dLabel` doesn't seem to be the id of any element?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Does this fail validation if you now use the `upload` key instead of `source`?", "pred": "Fixing a typo in the upload step"}
{"gold": "Can we use GetCliGlobals(false)->exCollHeap() here instead", "pred": "Fix for bug 10-010110-1111."}
{"gold": "I suggest you move the waitUntilAllElected into init::KV() method.", "pred": "Fix AddEdgesTest"}
{"gold": "no need of pub;lic.", "pred": "Fix typo in BatchExportProcessor (#1047)"}
{"gold": "Do you think we can name this variable in a less ...negative.. language ? maybe `ProposalTieBreakerEqualizer`", "pred": "fix: update comment"}
{"gold": "Can you add back these newlines? We try to avoid non-functional changes like this because they can cause commit conflicts.", "pred": "[SPARK-12598][SQL] Fix a typo in PartitionKey.scala"}
{"gold": "Why not just `if (!searches.includes(action.search)) searches.push(action.search)`? That way you don't need to remove then add the element.", "pred": "Fixing syntax error in reducer"}
{"gold": "@demiankatz I'm not sure that this is very useful. I just did it to get started. If we had a small handful of predetermined prefixes that were randomly chosen, it would be easier to distinguish them from the rest of the call number. Would that be preferable?", "pred": "Fixing a typo in the comment."}
{"gold": "Why is this deleted too?", "pred": "Fix typo in comment"}
{"gold": "Given that IApiResponse is already made disposable, this is not necessary.", "pred": "Fix namespace"}
{"gold": "client.getSelectedSpellName() can be used for this", "pred": "Fix for alch overlay"}
{"gold": "Please alpha sort these filenames.", "pred": "Add a comment to explain the timestamp format"}
{"gold": "is this already called by actPool.validate()?", "pred": "fix: remove extra space"}
{"gold": "It is relatively cheap to tell whether a bond is a ring bond, we don't have to perform an SSSR.", "pred": "fix stereo bonds"}
{"gold": "Maybe we should add flag aliases for service as well.", "pred": "fix(cli): add missing flag"}
{"gold": "This LGTM but don't we need a winning PoSts field to fully implement the protocol? No need to add here as I'm working on this in another PR, but curious how we can interop with lotus blocks without post proofs.", "pred": "fix(block): add missing json tag"}
{"gold": "can you move the [] into pubSub? so Blockchain just contains a pubSub, not []", "pred": "fix: typo in block creation subscriber (#1174)"}
{"gold": "I don't think 100 is a safe default here, since later we check that the value is between 50-95.", "pred": "SOLR-1200: Make the default value of queryResultWindowSize 1000"}
{"gold": "I would be nice if we could describe this without the word \"agnostic\"", "pred": "Fix comment"}
{"gold": "Pick more specific exception types for these cases. Not sure what would be best for this one (`ValueError`?) but the next one could be `IndexError`.", "pred": "Fixing a bug in the KNNClassifier."}
{"gold": "This seemed like the easiest solution We need to include this path in `testMatch` to run the test AFAIK *BUT* we don't want this test ran when running them all normally I'm sure there are other ways to do this!", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Most of the following test changes can be avoided if need be.", "pred": "Fix typo in test name (#1134)"}
{"gold": "Eventually we might want to move this back as generating this data structure takes some time (for large datasets) and we don't want it in the hot-path of `osrm-customize` runs. Thinking long-term making `osrm-customize` eventually digest `.osrm.cells` will will enable only updating cells selectively and using an earlier customization for the rest.", "pred": "Fixing a bug in the partitioner."}
{"gold": "You're not really using named result variable - you can just leave `error`.", "pred": "Fix typo in comment"}
{"gold": "It wasn't possible to call this method with `PartitionSpec.unpartitioned()` as the schema in the spec was empty.", "pred": "[MINOR] Fix javadoc"}
{"gold": "this namespace is never used", "pred": "fix(module): remove unused use statement"}
{"gold": "Well, if you call `Nack`, it _will_ be redelivered. So maybe reword.", "pred": "internal/doc: fix typo in URLOpener godoc (#2547)"}
{"gold": "Why did we make this a static string?", "pred": "Update video title"}
{"gold": "Please re-run PYTHONPATH=. python tests/services/inventory/update_cai_dumps.py following the instructions at the top of this file to ensure the test files have the correct CAI asset type.", "pred": "fix: bigquery dataset asset (#101)"}
{"gold": "`stateDB := NewStateDBAdapter(sm, 0, hash.ZeroHash256, NotFixTopicCopyBugOption())`", "pred": "fix: fix test"}
{"gold": "There are unneeded parens here, but I'll fix it up when merging.", "pred": "Fix a bug in the hint manager."}
{"gold": "Just one more thing... How about doing all of the following? 1. renaming h2o.rb to bootstrap.rb 2. require and include the acl code _from_ bootstrap.rb", "pred": "mruby: fix a bug in setup_globals"}
{"gold": "Commit message: \"remove\" is misspelled.", "pred": "cron: fix a bug in get_timestamp()"}
{"gold": "This is a pretty idiosyncratic method - I'd move it into the JSON-RPC package rather than adding it to `BytesValue`.", "pred": "Fix typo in BytesValues.java"}
{"gold": "Is there a way to deduplicate this somehow? Could we roll it into `RSpec.configuration` with a bit of memoization or is there a chicken and egg problem.", "pred": "Fix typo in comment"}
{"gold": "Generally, I wouldn't say I like the idea of providing properties that return negative/inverted values. It would be more convenient to return whether the update is **in** progress or not.", "pred": "Fix for bug 125885: ResultSetPropertyTester.java:11: error: ResultSetPropertyTester is not abstract and does not override abstract method isReadOnly() in PropertyTester"}
{"gold": "Converting playbackManager to operate in ms (preferred solution, imo) would allow us to completely drop this function.", "pred": "Fix time remaining calculation"}
{"gold": "The default value should be a bigger one, I'd like it is the maximum of int32. That means we will not cut-off anything by default. And users would config it with an appropriate value in config-file, such as 1000 or 5000, etc.", "pred": "fix(storage): fix the default value of max_handlers_per_req (#1918)"}
{"gold": "Probably missing return here as well", "pred": "fix: hermes settle command"}
{"gold": "On second thought... this affects how often the function specified by the `load` property is run. So I wonder if, for consistency, we should call this `LoadInterval` instead. Does that make sense?", "pred": "caddyhttp: fix typo in config_settings.go (#3587)"}
{"gold": "Now you don't need the localization module here then :)", "pred": "fixed missing comma"}
{"gold": "This should not convert each value to a literal on every invocation. Instead, this PR can add a `literals` method to `BoundSetPredicate` to access the values as literals. That way, the conversion happens once and can be lazy.", "pred": "Fix InclusiveMetricsEvaluator"}
{"gold": "I think we still need this exception if doesn't have LIGHTGBM_BUILD_DOC", "pred": "fix ctypes.cdll.LoadLibrary in python3 (#1085)"}
{"gold": "Does this make it easier to read? Previously this would have run `kubectl describe certificate` right? In which case it would have included events related to the cert. Will we miss that? Would the old `kubectl describe` output have gone to stderr?", "pred": "Fix typo in test/e2e/framework/helper/certificates.go"}
{"gold": "Just an understanding question: do we need a map here, would a list/set of Strings be sufficient? we are not adding entries with `false` here, are we? Being in the list already means it's used, right?", "pred": "Fixing a bug in the Internals class"}
{"gold": "Ah, so the change is that you want the `prune()` side effect before doing the `task.id not in necessary_tasks` membership check? Stupid non-Haskell programming languages :p", "pred": "Fixing a bug in central planner scheduler"}
{"gold": "This change was not really intended but made by the linter of VS Code. And looking at other packages this looks like a best practise to place interal packages on the top and gh imports afterwards.", "pred": "Fix import path for exec package"}
{"gold": "Do we normally force ReadPreference primary on other write operations? Or is it just that we normally ignore it?", "pred": "fix(findAndModify): fix findAndModify to use the correct query object"}
{"gold": "Instead of returning null here and discarding nulls automatically, I think this should return null (or some other signaling value) and fix the part that consumes the output of the visitor.", "pred": "[SPARK-36589][SQL] Fix the wrong comment in Spark3Util"}
{"gold": "Really, we want to be setting the validatorsForPreviousBlock against the yet to be created block, so it might make sense to update the cache once the block is created/imported instead.", "pred": "Fix typo in comment"}
{"gold": "It seems to me that the original implementation was correct. Can you share what the scanner was pointing out?", "pred": "Fix typo in fpga-filter-properties.c"}
{"gold": "Instead of doing that, please create an `assets/js/googlesitekit-subscribe-with-google-bulk-edit.js` file as entry point - all our entry points should be located in `assets/js`.", "pred": "Update webpack.config.js"}
{"gold": "This is not valid, a `div` shouldn't be in a `span`. You could apply the `className` attribute to the `span` tag.", "pred": "Fixing the logo size on the dashboard widget."}
{"gold": "Would it be possible to reuse RcJobExpireDuration and RcJobExpireInterval and auto delete them when job is deleted?", "pred": "fix: typo in flag name"}
{"gold": "Python wants **future** imports to come first.", "pred": "Fix typo in comment"}
{"gold": "Better to call this before EXITING_DR which is supposed to be last.", "pred": "Fix typo in comment."}
{"gold": "Does this work at runtime?", "pred": "Fixing the bug where the app crashes when the user clicks on the search by code button"}
{"gold": "Hmm why do we need to make this change? Like which one requires this change?", "pred": "fix(provider): increase timeout for credentials"}
{"gold": "why remove this and other piece?", "pred": "fix(polyfill): fix fetch polyfill"}
{"gold": "Yikes... That was probably me.", "pred": "fix(hasContentVirtual): add test for aria-hidden=true"}
{"gold": "It would be better to move the ... outside of the l8n block. This way it won't need to be translated for each language twice.", "pred": "Fix typo in menu label"}
{"gold": "That's a huge load of new dependencies. I think it's better to create a reload function on ScriptManager and control with enum instead.", "pred": "Update monster.cpp"}
{"gold": "`NewUpgradeTaskJob` -> `NewUpgradeResource`", "pred": "fix(upgrade): add missing comma in upgrade cmd"}
{"gold": "Is that the memory usage of the system or the process / awesome?", "pred": "- Add a note about the new `no-useless-escape` rule"}
{"gold": "\"change\" *and* \"schema\" events (A bunch of these; not marking them all).", "pred": "Fix typo in Realm.addListener docs"}
{"gold": "I think there is probably a shorter, more descriptive name for this. Something like `commitAtSequenceNumber`?", "pred": "Fix javadoc"}
{"gold": "The `url_name` should definitely be more than just 1 character long at the shortest. How about 3 or 4 characters?", "pred": "Fix org type validation"}
{"gold": "Please revert this change", "pred": "[BUGFIX] Remove unused use statement"}
{"gold": "Nice. I hadn't even heard of presenters in Rails before (learn something new every day) :)", "pred": "fix preview phase"}
{"gold": "`string[]` ? not sure, can you verify this @core23 ? Thank you", "pred": "[FrameworkBundle] fixed typo in comment"}
{"gold": "are we aware that this breaks older browsers like WebOS? :) they don't handle `let`", "pred": "Fix typo in comment"}
{"gold": "This isn't really a Kinto record but a Memcached record. I could kind of go either way on this.", "pred": "Fixing a bug in the cache.py file."}
{"gold": "Kick off the download after login.", "pred": "Fixing a bug in the webview helper"}
{"gold": "I don't think you need to change this, `array<int, string>` should be accepted whenever `string[]` is expected. (`string[]` is an alias of `array<string>` itself an alias of `array<array-key, string>` which is a parent type of `array<int, string>`", "pred": "Fix baseline"}
{"gold": "TODO: fix this, probably in another PR", "pred": "seat: fix typo in comment"}
{"gold": "Is there any case that tab is None?", "pred": "Fix hint manager"}
{"gold": "pls use `err` instead of `e`", "pred": "Fix typo in iptables_chaos_test.go"}
{"gold": "`attachGamepadScript` above can also be placed inside.", "pred": "Fix gamepad script"}
{"gold": "when we use RegisterWriteCommand,this func should be exported,so we can use this to get signer at the outside action package", "pred": "fix: remove unused function"}
{"gold": "Dead code - we should remove it or use `log.Trace` for lower logging level. Same applies for change at line 138.", "pred": "Fixing a bug in the management server"}
{"gold": "How does this make sure invalid coordinates making the parser fail? Relying on the Coordinate type's boost numeric_cast calls in the ctor? Shouldn't we rely on a coordinate's `.IsValid()` member function instead?", "pred": "Fixing a bug in the parameter parser."}
{"gold": "Simple Storage **Service**", "pred": "Update upload_object.py"}
{"gold": "Does this line (and the corresponding one in the test bootstrap) actually do anything? I don't see where CACHE_ENABLED is used as a global constant.", "pred": "Fixed cache configuration"}
{"gold": "has this changed? are we testing \"all possible situations\" now?", "pred": "Fix typo in test"}
{"gold": "ZK is properly spelled 'ZooKeeper' (capital 'K').", "pred": "SOLR-14080: Fix typo in SolrCLI"}
{"gold": "Guessing this locates the key you get when you run `gcloud auth application-default login`? What was the previous behavior/the behavior for the manual Veneer creds?", "pred": "fix: remove unused import (#100)"}
{"gold": "looks good to me, but it would be better if you assigned `this.countRows()` into a variable, so it doesn't trigger twice in the return statement", "pred": "fix(selection): fix selection when maxRows is set to 0"}
{"gold": "For now, don't add \"use strict\" to any existing files. That's a separate project that we'll do later. (New files can use \"use strict\".)", "pred": "fixing require"}
{"gold": "I was confused by this env name variable, assuming it was the value, not the name. Silly nit, but maybe name it noninteractiveEnv?", "pred": "Fix test"}
{"gold": "`sys.platform` could be equal to `darwin` which is posix. Use `not startswith('win')`?", "pred": "Fix pylint"}
{"gold": "let's move this into `slack_helper.go`", "pred": "Fix typo in slack service"}
{"gold": "I doubt it will work, but without space between -o and ControlPath it should. Lets see. What I do not understand is why we did not see a failure on CI related to this?", "pred": "Fixing typo in azure driver documentation"}
{"gold": "this is the reason we might be seeing 360 as discrete bearing", "pred": "Fixing a bug in the discrete bearing class"}
{"gold": "`FULL_VERSION` is available at module level for others to use, but it won't have `%(prog)s` substituted with pylint. Will that be a problem. Also put it here instead of __pkginfo__ with other versions because it isn't pkginfo related.", "pred": "Fix import of astroid in pylint.py"}
{"gold": "Is this needed? I don't see any uses.", "pred": "Fixing javadoc"}
{"gold": "Shouldn't this be V1beta1?", "pred": "Fix typo in test (#104)"}
{"gold": "I think there's an `approval_for`", "pred": "Fix typo in comment"}
{"gold": "Here we should use <code>List</code> in generic", "pred": "Fix Stack.takeWhile signature"}
{"gold": "The `JavaCompile#getToolChain` method got removed and I am not sure what a good replacement is. I replaced it with `targetCompat` for now but they are not equivalent. Maybe we can use `JavaVersion#current` here?", "pred": "Fix typo in BaselineReleaseCompatibility"}
{"gold": "The method name is incorrect. It does not check the existence of the file. I'd suggest deprecating both methods `fileExists` and `findIdByHash` and use findIdByFilename instead of fileExits", "pred": "Fix MultimediaQueryInterface"}
{"gold": "We have `stdbool` imported, might as well use that for clarity.", "pred": "bpf: Fix typo in comment"}
{"gold": "File is empty, consider removing?", "pred": "Update from Subversion r708872"}
{"gold": "`writeConcernMax` was changed to return a `writeConcern` formatted the new way-- `writeConcern: {w:1, ...}`. Bulk execute takes an actual `WriteConcern` object as its first parameter (this was changed in master), so we have to un-wrap the `writeConcernMax` result here.", "pred": "test(bulk): add test for bulk.execute with no operations"}
{"gold": "How about passing this through the `config`?", "pred": "Fixing bug in Container#initialize"}
{"gold": "Out of curiosity - did we make this change to allow dynamically assigning a value to `os.environ[\"TEST_TARGET\"]` during test execution? I kind of liked the decorator style `@only_localstack` - makes the condition a bit more explicit. Looks like `skipif` also allows to specify a condition string, e.g. `pytest.mark.skipif('os.environ.get(\"TEST_TARGET\") == \"AWS_CLOUD\"')` - could that be an option? (not sure if that gets lazily evaluated at runtime right before the execution of the annotated test method starts, though..)", "pred": "fix: remove unused import"}
{"gold": "I noticed (SonarCloud noticed actually) that the implementation of `::edit` method is the same as `__construct` is. Does it make sense to call the `edit` method from the constructor?", "pred": "Fixing slider item"}
{"gold": "would you please rename the message prefix to: [in_syslog] ...\"", "pred": "syslog_prot_process: fix a bug in the code"}
{"gold": "The pointer to a pointer is kind of gross. How about either taking the `ROMOL_SPTR` directly or, preferably, returning an `std::pair`?", "pred": "Fix a bug in MCS generation"}
{"gold": "the name confusing, please rename to `pendingCountNoLock` or similar", "pred": "Fix typo in comment"}
{"gold": "line is 175 characters", "pred": "fix: tsf block test"}
{"gold": "@ivanbogdanov Does this fix the first time load gray screen issue that @wmathurin noticed?", "pred": "fix: SalesforceReactActivity.java"}
{"gold": "Is `2.3.0` version OK?", "pred": "[ci] remove warning about libomp (#4088)"}
{"gold": "I tested it only in Firefox (`./go //rb:firefox-test`)", "pred": "JariBakken: Fixing a typo in a comment."}
{"gold": "separate third party and builtin", "pred": "fix: remove unused import"}
{"gold": "@smcnulty-sfdc We do want to finish the hybrid activity in our hybrid apps though. Could the caller not pass in `frontActivity` instead? Or start it up again post-logout?", "pred": "Fixing a bug in the SalesforceSDKManager."}
{"gold": "isn't this going to return a timeout error if the context is canceled?", "pred": "Fix typo in outbound.go"}
{"gold": "`argNameVal.length` will still be !=2, so line 22 will give true and then continue on line 24", "pred": "Fixing a bug in the args parser."}
{"gold": "It was `$chars[$i]` I believe.", "pred": "Fixing a bug in the function docblock manipulator"}
{"gold": "This has the likely potential to break existing tests that are relying on the old beaker behavior. If we are going to release this in beaker 3.x, then we need to preserve the old behavior as well (so set both the `upcase` and original values). On Windows, they env variables will overwrite each other, with the same value, so not an issue. On *nix, there will be two env variables, but they will have the same value, so again no issue.", "pred": "Fix for Ruby 1.9.2"}
{"gold": "Thanks for fixing this! I probably didn't test the playground when making changes here for cloud variables.", "pred": "Fix bug in variable creation"}
{"gold": "I will also check if `nameMapping` needs a precondition null check.", "pred": "Fix import"}
{"gold": "Since RuntimeIOException is deprecated and you are touching this code, why not replace it?", "pred": "Fixing a bug in Files.copy"}
{"gold": "You should also have a test that calls it with tm_cpp and make sure it returns the correct JSON file.", "pred": "Fixing a bug in the test"}
{"gold": "One more minor change, the string `ForAdditionalLiveTvOptions` is probably also unused.", "pred": "Fix typo in dashboard.js"}
{"gold": "How to distinguish between warning and error?", "pred": "[C++] Fix typo in RowReaderWrapper::reset()"}
{"gold": "Perhaps you want to check if UIAHandler.handler is not None. The current check will break NVDA if you call UIAHandler.terminate() for some reason.", "pred": "Fixed a bug in the pre-gain focus code."}
{"gold": "can we make `replace-partitions` property a static variable in `SnaphotSummary.java`?", "pred": "ACCUMULO-2617: Fix javadoc"}
{"gold": "Maybe call it `WireBridge`?", "pred": "Fix typo in comment"}
{"gold": "Should really be `one()`, not `one_or_none()`", "pred": "fix: remove unused import"}
{"gold": "Should we use strings.Split and strings.Join instead of manual concatenation?", "pred": "Fix typo in machine_controller_util.go"}
{"gold": "rough that this needs to exist, but it is what it is", "pred": "[dagster-graphql] Add missing import to In"}
{"gold": "FYI, I pulled your branch and hacked a little on your test case. This passes for me (you may want to tweak further): <pre> it('should not set empty string for null props in custom elements', () => { customElements.define('x-bar', class extends HTMLElement { val; }); // @ts-ignore render(&lt;x-bar val={null} /&gt;, scratch); expect(scratch.childNodes).to.have.length(1); expect(scratch.firstChild).to.have.property('nodeName', 'X-BAR'); expect(scratch.firstChild.attributes.length).to.equal(0); expect(scratch.firstChild.val).to.equal(null); }); </pre>", "pred": "test(render): add test for render() with a single child"}
{"gold": "It is the maximum value that the configured emulator can support.", "pred": "remove commented out code"}
{"gold": "Here, I've been giving priority to the session saved by the user. This means, that if the user quits with `:wq`, then restarts `qutebrowser`, and then `qutebrowser` crashes for some reason, next time `qutebrowser` is restarted, the session saved lastly with `wq` will be restored, and not the one autosaved. What do you think?", "pred": "Fix typo in comment"}
{"gold": "this line got me confused for few seconds, as the `AccountData` is both the name of the data structure as well as the function name. I think that `GetAccountData` is a better choice for a name. ( note that the same applies for the previous `BalanceRecord` function name )", "pred": "Fix typo in comment"}
{"gold": "I think this mutex is only used here. Remove it.", "pred": "Fix typo in comment"}
{"gold": "so this is now init to 1?", "pred": "Fix typo in comment (#3007)"}
{"gold": "For future note; not prefixing the table in a join can throw an error in the query parser depending on how the query is built I am making an assumption this was tested", "pred": "Fix typo in SQL query"}
{"gold": "Had to bring this up, will abandon this style of testing based on Joel's work soon.", "pred": "Fix typo in comment"}
{"gold": "What does our source validation complain about here? Many of the logok/nowarn places look fine to me at a glance but I'm no match for the logging policeman ;-)", "pred": "SOLR-15056: Fix typo in HttpSolrCall.java"}
{"gold": "It feels like this dependency should not be here. Some deep internal openvpn package (middleware) knows about one of possible stats consumers. Maybe as an alternative, statistics and state callbacks can be extracted as separate interfaces in top openvpn package and reused by both sides", "pred": "Fix import"}
{"gold": "Can you please remove `codec` from the parameters too? I think it's unused now.", "pred": "kbfs/libkbfs: fix a typo in a comment"}
{"gold": "mocks needed this change so that it returns the \"right\" thing", "pred": "Fix test"}
{"gold": "I don't think the getters for this are needed, but looks good other than that", "pred": "Update MenuEntrySwapperPlugin.java"}
{"gold": ":+1: to inlining this.", "pred": "Fix video show page"}
{"gold": "Does psalm support the same logic internally for object-like arrays? Just want to be certain I can indicate this is a contextual return item `crypto?:mixed`.", "pred": "Fix return type of stream_get_meta_data"}
{"gold": "I can't recall if there was a fix specific to this in the past?", "pred": "layers: Fix typo in CreateImageTest"}
{"gold": "Not sure what the todo is here? Is it to support some kind of defaulting based off of that?", "pred": "Fix typo in PubSubSource CRD (#1080)"}
{"gold": "Not sure about this name. I think \"explicit\" is also a bit difficult here (I think it should be implicit then) Proposal: FlushOnEvents. Or, It would be cool if we could split into 2 options, FlushOnShutdown and FlushOnReload, but I expect that's far more difficult to implement?", "pred": "Fix AsyncFlush property description"}
{"gold": "I don't think that works - you can't mark a fixture.", "pred": "tests: Fix webengine_refactoring_xfail"}
{"gold": "We should not include this path.", "pred": "(maint) Fix typo in Bolt::Config"}
{"gold": "Add newline at end of file", "pred": "Fixing the slack_webhook_notifier_test.py"}
{"gold": "This should be done when updating to the next release (2.5). You currently only perform the upgrade when users go from 1.4 to 1.5, so it will lead to crashes for existing users.", "pred": "Fix typo in upgrade script"}
{"gold": "suggest hive.openshift.io/cluster-machine-management or something to make it more obvious what it is.", "pred": "Add feature gate for Hive 2.0"}
{"gold": "We explicitly don't want to do that. This was a complaint from users before.", "pred": "Fix namespace"}
{"gold": "Hello, The PHPDoc is `string[]` not `int[]`", "pred": "fix: remove useless use statement"}
{"gold": "Same issues with parameters order in `ipset_server.go`", "pred": "fix: fix import error in tc_test.go (#2880)"}
{"gold": "Wow, did it literally mean the retention days is a huge number?", "pred": "fix(common): fix namespace id for system namespace (#1005)"}
{"gold": "you probably didn't intend to touch those files in `scripts/`", "pred": "Fix flatc --conform option"}
{"gold": "Similar to `collate_fn`, we may rename it to `tpfp_fn`.", "pred": "fix bug in eval_map"}
{"gold": "Awesome! We may also use negative rule `never` to fix new lines after `return`: `{ blankLine: \"never\", prev: \"return\", next: \"*\" }`", "pred": "fix(overlay): fix top overlay position"}
{"gold": "Why can't this be a function on the `Config` interface like all the others?", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "If the feed is null, the menu items should still be setup. Just the feed title can be left out. That prevents possible flickering when menu items are displayed/hidden for some feeds.", "pred": "Fix crash when opening feed item list"}
{"gold": "I'm not sure that this should call `allowIncompatibleChanges()` because adding a required column when there are no existing values will break reading the new column in any table with data in it. The only time it is safe to add a required column is if there is no data in the table. What about throwing an exception here instead? I agree that the column should not be optional if NOT NULL was specified. Another alternative is to check whether the table has data and allow the incompatible change if it doesn't have any rows.", "pred": "[SPARK-35595][SQL] Fix the bug that the column position of the column added by ALTER TABLE ADD COLUMNS is not correct"}
{"gold": "Early translation , should be logic-less", "pred": "Update ServiceProvider.php"}
{"gold": "I don't understand why these functions return a request/response, respectively. In all implementations we actually _modify_ the request/response given as a parameter. Do you envisage situations where we'd want to construct completely fresh request/response objects? Even if we do, it's not something needed atm, so I'd favour in keeping the API minimal. Also, the fact that these functions _may_ mutate the request/response should be noted.", "pred": "- Add a note about the new `no-useless-escape` rule."}
{"gold": "Wasn't there a subsequent reason why we had to keep the `/p/project_graph` route? Outside references or is the proposed solution to the original proposal we us `/p/g` as the `compares#project_graph` route?", "pred": "Fix routes"}
{"gold": "Any suggestions on how I would even _approach_ writing tests for arbitrary values....", "pred": "Fix typo in GenTest"}
{"gold": "Scope declarations for class constants was not added until 7.1, this will not be accepted.", "pred": "Update Theme.php"}
{"gold": "The assertion here is that find should never return end() because this is the only mechanism that reaps items from the activeClientMap. If it == end something went horribly wrong.", "pred": "Fix for bug #1016557.  The clientMonitor_ was not being notified when a client was disconnected."}
{"gold": "The `unless the collection ...` part reads a little bit hard, maybe separate into its own sentence and explain what it means by `cannot generate a fresh key`?", "pred": "Fix typo in comment"}
{"gold": "Doesn't `gcerr_string.go` need to be updated for this?", "pred": "Added error code for invalid argument"}
{"gold": "Both cases allowed by the Go spec are now supported, so it's a bug in the compiler if we get here. You can replace the `todo:` error with a panic. (Note: getting here would be a bug because when we get to SSA level the code has long been type checked and has already been verified as being valid Go).", "pred": "Fix a bug in the compiler."}
{"gold": "You can simply do `if tab.history_prepared:` here as empty lists are falsey.", "pred": "Fix tabbed browser focus"}
{"gold": "Remove this whitespace", "pred": "Fix import path for create package"}
{"gold": "`show_img` is not normalized while `one_img` is normalized. And line 139 pass `show_img` for pytorch2onnx function. Is this expected behavior?", "pred": "fix bug"}
{"gold": "Why is this bounded between -30 and 30?", "pred": "fix: remove useless code"}
{"gold": "I think even you can exclude to run it on nvcc", "pred": "[SWDEV-245555] Fix hipify-clang test"}
{"gold": "G104: Errors unhandled. (from `gosec`)", "pred": "fix(istgt): add missing space in istgt config"}
{"gold": "will `failure` always include `arn` and `reason` in its dictionary? If so, :+1:", "pred": "Fixing typo in ECSTask"}
{"gold": "Should this be optional, or default to 'action' as well?", "pred": "(maint) Fix typo in comment"}
{"gold": "how about formating this import?", "pred": "fix: import path for client-go"}
{"gold": "Comma police. :) Also, the docstring needs updating.", "pred": "Fixed a bug in the review module."}
{"gold": "Implement an in-memory implementation of this in the fake driver.", "pred": "Fix import path for kvdb"}
{"gold": "Same question as the other view spec regarding not actually saving records.", "pred": "- Add a note about the new `no_std` feature"}
{"gold": "Rethrow for `MustBeRethrown()`-exceptions?", "pred": "Fixed #1087 - NLog.config not loading when using NLog.Extension.dll"}
{"gold": "May clean the unnecessary modification.", "pred": "fix random sampler (#376)"}
{"gold": "Should this line set the value to `x` since that is checked below?", "pred": "Fix flux-security detection"}
{"gold": "I don't particularly love the terminology here. Why not simply add `copy(boolean stats)` or a copy with an enum to indicate what portions of the datafile to include? At some point we may want just some of the values (e.g. CBO may want counts, but not lower/upper bounds). Just a thought.", "pred": "HIVE-10585: Add a method to DataFile to get the size of the file (Shelley via <NAME>)"}
{"gold": "you could probably remove keyValue and just compare idx vs ann.length (ex I think the goal here is to ensure it works with a value like `foo=`", "pred": "Fix typo in QueryRequest.java"}
{"gold": "we do this to differentiate between the multiple cc files for when the recording is stopped / restarted multiple times within a single meeting", "pred": "fix: getMimeType"}
{"gold": "You've deleted this code but not added it anywhere else. Should this be used as my proposed example in the .ini file? Do we need a mechanism for configuring a global fallback string independent of the numeric codes?", "pred": "Fix KohaRest driver"}
{"gold": "nit: strip away those imports? seems not used in the new code.", "pred": "Remove unused import"}
{"gold": "redundant whitespace :octocat:", "pred": "fix import"}
{"gold": "I don't believe that the `assertDictEqual` call can pass without `api_response` being a `dict`, so this second check isn't needed!", "pred": "Fixing test_cloudformation_connection.py"}
{"gold": "Fuzzer did not like this change. Looks like I misunderstood how the pool works... if allocated from a pool we should never free it manually, right? I think I'll need to drop this patch.", "pred": "h2o: fix a bug in hpack.c"}
{"gold": "Wouldn't it make sense to already have title, owner etc in this class?", "pred": "Remove unused import"}
{"gold": "New generators should have version `next`", "pred": "Fix typo in aqua_teen_hunger_force.rb (#1877)"}
{"gold": "Wrap these two lines inside an `if (node.isMetricsEnabled() || metricsConfiguration.isPushEnabled()) { ... }`", "pred": "Fix metrics category parameter (#2788)"}
{"gold": "if end_level == -1 or end_level == (self.num_ins - 1): for end_level is the Index of the end input backbone level.", "pred": "Update fpn.py"}
{"gold": "No CLR overhead?", "pred": "Fixing a bug in the MerkleTree"}
{"gold": "Consider faking the TestClient's GetProject/GetZone/GetMachine methods.", "pred": "Fix test"}
{"gold": "Returning a private type as part of the public API? Isn't this impossible for users to implement?", "pred": "Fix typo in comment"}
{"gold": "prefer common_properties::_canonicalRankingNumber if possible, should be quicker in general.", "pred": "fix typo"}
{"gold": "The meaning of `loss_normalizer` and `loss_normalizer_momentum` should be reflected in docstring.", "pred": "fix anchor_head.py"}
{"gold": "Call to `cloexec_pipe` (or an equivalent function) is missing. I presume that this is the reason why you are seeing timeout errors.", "pred": "fix async pipe creation"}
{"gold": "There are no changes in this file. Please reset.", "pred": "Fix checkstyle"}
{"gold": "Should we rename this to tailProbability?", "pred": "Fixed a bug in the null distribution function."}
{"gold": "Add the issue number too i#4400", "pred": "Fix drutil_insert_get_mem_addr_arm() to use the correct scratch register."}
{"gold": "Why make this modifiable?", "pred": "Fix typo in BaseFile.java"}
