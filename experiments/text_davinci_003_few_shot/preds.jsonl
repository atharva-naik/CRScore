{"pred": "This is a good change as it adds more flexibility to the generator.", "gold": "can we also test for `transport=rest`?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -53,7 +53,7 @@ public class ProtocGapicPluginGeneratorTest {\n                 model.getFiles().stream().map(ProtoFile::getProto).collect(Collectors.toList()))\n             // Only the file to generate a client for (don't generate dependencies)\n             .addFileToGenerate(\"multiple_services.proto\")\n-            .setParameter(\"language=java\")\n+            .setParameter(\"language=java,transport=grpc\")\n             .build();\n \n     CodeGeneratorResponse response = ProtocGeneratorMain.generate(codeGeneratorRequest);\nReview:"}
{"pred": "Should we check if the config is set before trying to access it?", "gold": "If record_batch_size is not set in config.ini, this code will trigger a notice about an undefined value. I would suggest either wrapping the setPageSize() call in an `if (!empty(...)) {` check, or else providing a default value in the set call (i.e. `$config->Index->record_batch_size ?? 100`).", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -182,7 +182,9 @@ abstract class AbstractSolrBackendFactory implements FactoryInterface\n      */\n     protected function createBackend(Connector $connector)\n     {\n+        $config = $this->config->get($this->mainConfig);\n         $backend = new $this->backendClass($connector);\n+        $backend->setPageSize($config->Index->record_batch_size);\n         $backend->setQueryBuilder($this->createQueryBuilder());\n         $backend->setSimilarBuilder($this->createSimilarBuilder());\n         if ($this->logger) {\nReview:"}
{"pred": "You should add a comment here to explain why you are using the ENV variable.", "gold": "I didn't realize we were hardcoding this, thanks for moving it to an env value.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,6 +1,6 @@\n <script type=\"text/javascript\">\n   window.analytics||(window.analytics=[]),window.analytics.methods=[\"identify\",\"track\",\"trackLink\",\"trackForm\",\"trackClick\",\"trackSubmit\",\"page\",\"pageview\",\"ab\",\"alias\",\"ready\",\"group\",\"on\",\"once\",\"off\"],window.analytics.factory=function(t){return function(){var a=Array.prototype.slice.call(arguments);return a.unshift(t),window.analytics.push(a),window.analytics}};for(var i=0;i<window.analytics.methods.length;i++){var method=window.analytics.methods[i];window.analytics[method]=window.analytics.factory(method)}window.analytics.load=function(t){var a=document.createElement(\"script\");a.type=\"text/javascript\",a.async=!0,a.src=(\"https:\"===document.location.protocol?\"https://\":\"http://\")+\"d2dq2ahtl5zl1z.cloudfront.net/analytics.js/v1/\"+t+\"/analytics.min.js\";var n=document.getElementsByTagName(\"script\")[0];n.parentNode.insertBefore(a,n)},window.analytics.SNIPPET_VERSION=\"2.0.8\",\n-  window.analytics.load(\"2nexpdgku3\");\n+  window.analytics.load(<%= ENV['SEGMENT_KEY']%>);\n   window.analytics.page();\n </script>\n \nReview:"}
{"pred": "Good to add a check here to make sure we don't try to render a size if it's not a number.", "gold": "We are trying to support IE 10-11, so we'll need a polyfill for this one, I think.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -99,7 +99,7 @@ module.exports = function fileItem (props) {\n         }\n       </h4>\n       <div class=\"UppyDashboardItem-status\">\n-        ${file.data.size && html`<div class=\"UppyDashboardItem-statusSize\">${prettyBytes(file.data.size)}</div>`}\n+        ${isNaN(file.data.size) ? '' : html`<div class=\"UppyDashboardItem-statusSize\">${prettyBytes(file.data.size)}</div>`}\n         ${file.source && html`<div class=\"UppyDashboardItem-sourceIcon\">\n             ${acquirers.map(acquirer => {\n               if (acquirer.id === file.source) return html`<span title=\"${props.i18n('fileSource')}: ${acquirer.name}\">${acquirer.icon()}</span>`\nReview:"}
{"pred": "Is this useEffect necessary? It looks like it's just setting the dialogActive state to false, which could be done in the onClick handler.", "gold": "It looks like there's a new `isNavigatingTo( url )` selector for this very purpose so let's use this here instead. This way we just need to use the one selector rather than two. Let's assign that to a similar-named variable here (e.g. `isNavigatingToPostResetURL`) rather than the prop it's used with.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -38,6 +38,9 @@ const { useSelect, useDispatch } = Data;\n function ResetButton( { children } ) {\n \tconst postResetURL = useSelect( ( select ) => select( CORE_SITE ).getAdminURL( 'googlesitekit-splash', { notification: 'reset_success' } ) );\n \n+\tconst isNavigating = useSelect( ( select ) => select( CORE_LOCATION ).isNavigating() );\n+\tconst navigatingURL = useSelect( ( select ) => select( CORE_LOCATION ).getNavigateURL() );\n+\n \tconst [ dialogActive, setDialogActive ] = useState( false );\n \n \tuseEffect( () => {\nReview:"}
{"pred": "Should the input and output matrices be const?", "gold": "I think im2col should only accommodate CPUMat.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -29,8 +29,8 @@\n \n namespace lbann {\n \n-void im2col(const Mat& im,\n-            Mat& col,\n+void im2col(const AbsMat& im,\n+            AbsMat& col,\n             const int num_channels,\n             const int im_num_dims,\n             const int * im_dims,\nReview:"}
{"pred": "We should add a comment here to explain why we are importing EmailFactory and email_violations.", "gold": "alpha sort the imports", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -24,6 +24,8 @@ from google.cloud.forseti.notifier.notifiers import cscc_notifier\n from google.cloud.forseti.notifier.notifiers.inventory_summary import InventorySummary\n from google.cloud.forseti.services.inventory.storage import DataAccess\n from google.cloud.forseti.services.scanner import dao as scanner_dao\n+from google.cloud.forseti.common.util.email.email_factory import EmailFactory\n+from google.cloud.forseti.notifier.notifiers import email_violations\n # pylint: enable=line-too-long\n \n \nReview:"}
{"pred": "snprintf_s_iiii() is a safer version of snprintf() and should be used here.", "gold": "Can you explain why is this necessary? Is `snprintf()` with four integer arguments unsafe?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1067,7 +1067,7 @@ fpga_result mmio_error(struct RASCommandLine *rasCmdLine)\n \tif ( rasCmdLine->function >0 )\n \t\tfunction = rasCmdLine->bus;\n \n-\tsnprintf(sysfs_path, sizeof(sysfs_path),\n+\tsnprintf_s_iiii(sysfs_path, sizeof(sysfs_path),\n \t\t\tDEVICEID_PATH,0,bus,device,function);\n \n \tresult = sysfs_read_u64(sysfs_path, &value);\nReview:"}
{"pred": "This looks good. The additional checks are necessary for robustness.", "gold": "How likely would it be that the keyboard layout for the NVDA main thread differs from the keyboard layout of the currently focused app?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -219,7 +219,19 @@ def internal_keyDownEvent(vkCode,scanCode,extended,injected):\n \t\t\tfor k in range(256):\n \t\t\t\tkeyStates[k]=ctypes.windll.user32.GetKeyState(k)\n \t\t\tcharBuf=ctypes.create_unicode_buffer(5)\n+\t\t\t# First try getting the keyboard layout from the thread with the focus (input thread)\n \t\t\thkl=ctypes.windll.user32.GetKeyboardLayout(focus.windowThreadID)\n+\t\t\tif not hkl:\n+\t\t\t\tlog.debug(\"Failed to fetch keyboard layout from focus, trying layout from last detected change\")\n+\t\t\t\t# Some threads, such as for Windows consoles\n+\t\t\t\t# Do not allow getKeyboardLayout to work.\n+\t\t\t\t# Therefore, use the cached keyboard layout from the last inputLangChange detected by NVDA\n+\t\t\t\t# on the foreground object.\n+\t\t\t\thkl = getattr(api.getForegroundObject(), '_lastDetectedKeyboardLayoutChange', 0)\n+\t\t\t\tif not hkl:\n+\t\t\t\t\tlog.debug(\"No layout cached, falling back to layout of NVDA main thread\")\n+\t\t\t\t\t# As a last resort, use the keyboard layout of NVDA's main thread.\n+\t\t\t\t\thkl = ctypes.windll.user32.GetKeyboardLayout(core.mainThreadId)\n \t\t\t# In previous Windows builds, calling ToUnicodeEx would destroy keyboard buffer state and therefore cause the app to not produce the right WM_CHAR message.\n \t\t\t# However, ToUnicodeEx now can take a new flag of 0x4, which stops it from destroying keyboard state, thus allowing us to safely call it here.\n \t\t\tres=ctypes.windll.user32.ToUnicodeEx(vkCode,scanCode,keyStates,charBuf,len(charBuf),0x4,hkl)\nReview:"}
{"pred": "This check is redundant given the getDefaultService() function already has a check.", "gold": "Would you mind removing the default parameter above? (I doubt I'll ever use defaults again since you still have to protect against callers explicitly passing `null` or `undefined`)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -198,6 +198,10 @@ class Driver extends webdriver.WebDriver {\n    * @return {!Driver} A new driver instance.\n    */\n   static createSession(options, service = getDefaultService()) {\n+    if (!service) {\n+      service = getDefaultService();\n+    }\n+    \n     let client = service.start().then(url => new http.HttpClient(url));\n     let executor = new http.Executor(client);\n \nReview:"}
{"pred": "This looks like a valid change, but it would be good to add a comment explaining why this is necessary.", "gold": "Also update line 2205 below", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -2186,7 +2186,7 @@ class WebElement {\n     if (!this.driver_.fileDetector_) {\n       return this.schedule_(\n           new command.Command(command.Name.SEND_KEYS_TO_ELEMENT).\n-              setParameter('text', keys).\n+              setParameter('text', keys.then(keys => keys.join(''))).\n               setParameter('value', keys),\n           'WebElement.sendKeys()');\n     }\nReview:"}
{"pred": "Should this be NULL checked? Not having the shared value isn't critical I guess.", "gold": "n_: It is a good practice to name the variable to indicate what they contain. In this case since `shared` is supposed to have boolean, calling it: `isShared` can help in the readability of the code.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -39,6 +39,7 @@ func (p *Provisioner) ProvisionHostPath(opts pvController.VolumeOptions, volumeC\n \tname := opts.PVName\n \tstgType := volumeConfig.GetStorageType()\n \tsaName := getOpenEBSServiceAccountName()\n+\tshared := volumeConfig.GetSharedMountValue()\n \n \tpath, err := volumeConfig.GetPath()\n \tif err != nil {\nReview:"}
{"pred": "It's good to add this comment to make it clear that the user needs to call render() after calling freezeColumn().", "gold": "I suppose it's a false-positive error. Maybe there is a way to configure the `eslint-*` package to accept `i.e. .... lower case` syntax  ", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -85,7 +85,10 @@ export class ManualColumnFreeze extends BasePlugin {\n   }\n \n   /**\n-   * Freezes the given column (add it to fixed columns).\n+   * Freezes the specified column (i.e. adds it to fixed columns).\n+   *\n+   * `freezeColumn()` doesn't re-render the table,\n+   * so you need to call the `render()` method afterward.\n    *\n    * @param {number} column Visual column index.\n    */\nReview:"}
{"pred": "This looks like a bug fix, but it would be good to add a comment explaining why this is necessary.", "gold": "this maynot be a perf issue, if ToHexString() is not actually allocating a string, but returns the caches string value. to be confirmed.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -133,7 +133,7 @@ namespace OpenTelemetry.Trace\n         private void RunGetRequestedDataOtherSampler(Activity activity)\n         {\n             ActivityContext parentContext;\n-            if (string.IsNullOrEmpty(activity.ParentId))\n+            if (string.IsNullOrEmpty(activity.ParentId) || activity.ParentSpanId.ToHexString().Equals(\"0000000000000000\"))\n             {\n                 parentContext = default;\n             }\nReview:"}
{"pred": "Good addition of logging context here.", "gold": "`zap.String(\"image-provider\", provider.Name())` should be in a same line.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -114,11 +114,16 @@ func (w *watcher) run(ctx context.Context, provider imageprovider.Provider, inte\n \t\t\t\tupdates = append(updates, u...)\n \t\t\t}\n \t\t\tif len(updates) == 0 {\n-\t\t\t\tw.logger.Info(\"no image to be updated\")\n+\t\t\t\tw.logger.Info(\"no image to be updated\",\n+\t\t\t\t\tzap.String(\"image-provider\", provider.Name()),\n+\t\t\t\t)\n \t\t\t\tcontinue\n \t\t\t}\n \t\t\tif err := update(updates); err != nil {\n-\t\t\t\tw.logger.Error(\"failed to update image\", zap.Error(err))\n+\t\t\t\tw.logger.Error(\"failed to update image\", zap.String(\"image-provider\",\n+\t\t\t\t\tprovider.Name()),\n+\t\t\t\t\tzap.Error(err),\n+\t\t\t\t)\n \t\t\t\tcontinue\n \t\t\t}\n \t\t}\nReview:"}
{"pred": "You can remove the 'use strict' line here as it's not necessary.", "gold": "Why this deletion?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,8 +1,6 @@\n /*exported DqElement */\n \n function truncate(str, maxLength) {\n-\t'use strict';\n-\n \tmaxLength = maxLength || 300;\n \n \tif (str.length > maxLength) {\nReview:"}
{"pred": "It might be better to use assertEqual here, rather than assertIn, since we know the exact value we expect.", "gold": "This change looks unrelated to the CL description?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -419,7 +419,10 @@ class S3KeyTest(unittest.TestCase):\n         remote_metadata = check._get_remote_metadata()\n \n         # TODO: investigate whether encoding ' ' as '%20' makes sense\n-        self.assertEqual(check.cache_control, 'public,%20max-age=500')\n+        self.assertIn(\n+            check.cache_control,\n+            ('public,%20max-age=500', 'public, max-age=500')\n+        )\n         self.assertEqual(remote_metadata['cache-control'], 'public,%20max-age=500')\n         self.assertEqual(check.get_metadata('test-plus'), 'A plus (+)')\n         self.assertEqual(check.content_disposition, 'filename=Sch%C3%B6ne%20Zeit.txt')\nReview:"}
{"pred": "Typo in macro name - should be DEDUP_RESULT_CHECK", "gold": "I'm not certain that `res`+`utl` isn't a thing.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -18,7 +18,7 @@ class DedupTest : public QueryTestBase {\n   void SetUp() override { QueryTestBase::SetUp(); }\n };\n \n-#define DEDUP_RESUTL_CHECK(inputName, outputName, sentence, expected)                   \\\n+#define DEDUP_RESULT_CHECK(inputName, outputName, sentence, expected)                   \\\n   do {                                                                                  \\\n     qctx_->symTable()->newVariable(outputName);                                         \\\n     auto yieldSentence = getYieldSentence(sentence, qctx_.get());                       \\\nReview:"}
{"pred": "Should this be an enum rather than hardcoded values?", "gold": "This method can cause bugs. Why don't you use list of finalize statuses and then use join by comma and that will give you correct value. Use Apache Commons Lang library List<Integer> list = Arrays.asList(1,2,3,4,5,6,7); String str = org.apache.commons.lang.StringUtils.join(list, \",\"); You can use it at multiple places shown in this diff.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -182,6 +182,7 @@ public class FetchActiveFlowDao {\n             + \" LEFT JOIN \"\n             + \" executors et ON ex.executor_id = et.id\"\n             + \" WHERE ex.status NOT IN (\"\n+            + Status.EXECUTION_STOPPED.getNumVal() + \", \"\n             + Status.SUCCEEDED.getNumVal() + \", \"\n             + Status.KILLED.getNumVal() + \", \"\n             + Status.FAILED.getNumVal() + \")\";\nReview:"}
{"pred": "The extra brackets are unnecessary here.", "gold": "Merge with next condition", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -23,7 +23,10 @@ void wlr_input_device_init(struct wlr_input_device *dev,\n }\n \n void wlr_input_device_destroy(struct wlr_input_device *dev) {\n-\tif (!dev) return;\n+\tif (!dev) {\n+\t\treturn;\n+\t}\n+\t\n \tif (dev->_device) {\n \t\tswitch (dev->type) {\n \t\tcase WLR_INPUT_DEVICE_KEYBOARD:\nReview:"}
{"pred": "It looks like you are missing a DeleteTask() method in the taskDeployer interface.", "gold": "Maybe add it when it is used.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -348,6 +348,7 @@ type appResourcesGetter interface {\n \n type taskDeployer interface {\n \tDeployTask(input *deploy.CreateTaskResourcesInput, opts ...cloudformation.StackOption) error\n+\tDeleteTask(task deploy.TaskStackInfo) error\n }\n \n type taskRunner interface {\nReview:"}
{"pred": "This looks good. Make sure to add tests for these new constants.", "gold": "More clear naming: NONEXISTENT_ENABLED", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -36,3 +36,17 @@ TWO_ENABLED = {'scanners': [\n     {'name': 'cloudsql_acl', 'enabled': False},\n     {'name': 'iam_policy', 'enabled': True}\n ]}\n+\n+NONEXIST_ENABLED = {'scanners': [\n+    {'name': 'bigquery', 'enabled': False},\n+    {'name': 'bucket_acl', 'enabled': True},\n+    {'name': 'cloudsql_acl', 'enabled': False},\n+    {'name': 'non_exist_scanner', 'enabled': True}\n+]}\n+\n+ALL_EXIST = {'scanners': [\n+    {'name': 'bigquery', 'enabled': True},\n+    {'name': 'bucket_acl', 'enabled': True},\n+    {'name': 'cloudsql_acl', 'enabled': True},\n+    {'name': 'iam_policy', 'enabled': True}\n+]}\nReview:"}
{"pred": "This looks like a good change, using equals() is more explicit and less prone to errors.", "gold": "why is this change necessary?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -282,10 +282,10 @@ public class TypeUtil {\n \n     switch (from.typeId()) {\n       case INTEGER:\n-        return to == Types.LongType.get();\n+        return to.equals(Types.LongType.get());\n \n       case FLOAT:\n-        return to == Types.DoubleType.get();\n+        return to.equals(Types.DoubleType.get());\n \n       case DECIMAL:\n         Types.DecimalType fromDecimal = (Types.DecimalType) from;\nReview:"}
{"pred": "This looks like a good change. The old code was a hack and this looks like a better solution.", "gold": "make a SchemaTypeNameConverter.getTypeNameForEmptyType() and call that here.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -178,9 +178,8 @@ public class SchemaTypeTable implements ImportTypeTable, SchemaTypeFormatter {\n \n   @Override\n   public String getFullNameFor(TypeModel type) {\n-    // TODO(andrealin): Remove this hack when null response types are implemented.\n-    if (type == null) {\n-      return \"nullFullName\";\n+    if (type.isEmptyType()) {\n+      return \"java.lang.Void\";\n     }\n     if (type instanceof DiscoveryRequestType) {\n       Method method = ((DiscoveryRequestType) type).parentMethod().getDiscoMethod();\nReview:"}
{"pred": "This looks good, but it might be better to check for the session before calling getLang() to avoid an unnecessary function call.", "gold": "Use braces on your conditional structures please", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -26,7 +26,10 @@ class TinyMCELanguage extends AbstractSmartyPlugin\n \n     public function __construct(Request $request)\n     {\n-        $this->locale = $request->getSession()->getLang()->getLocale();\n+        if($request->getSession() != null)\n+            $this->locale = $request->getSession()->getLang()->getLocale();\n+        else\n+            $this->locale = Lang::getDefaultLanguage()->getLocale();\n     }\n \n     public function guessTinyMCELanguage($params, \\Smarty_Internal_Template $template)\nReview:"}
{"pred": "It looks like you are adding a new flag here. Make sure to document it in the README.md file.", "gold": "Great God, I have a question. This \".nebula_history\" file is used to save history commands. Is there a file size limit? When the file is large, does it take a long time to start initialization (loadHistory)? How did you think about this? Thx.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -16,6 +16,7 @@\n \n DECLARE_string(u);\n DECLARE_string(p);\n+DEFINE_bool(enable_history, false, \"Whether to force saving the command history\");\n \n namespace nebula {\n namespace graph {\nReview:"}
{"pred": "You can remove the first if statement here, since it is redundant given the second one.", "gold": "Isn't this the same check as two lines above?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1004,8 +1004,9 @@ static void parseRecord (tokenInfo *const token)\n \t */\n \tif (!isType (token, TOKEN_OPEN_PAREN))\n \t\treadToken (token);\n+\tif (!isType (token, TOKEN_OPEN_PAREN))\n+\t\treturn;\n \n-\tAssert (isType (token, TOKEN_OPEN_PAREN));\n \tdo\n \t{\n \t\tif (isType (token, TOKEN_COMMA) ||\nReview:"}
{"pred": "Is this necessary? It looks like it's already imported in the line above.", "gold": "Don't redefine, just import the existing one in `cmdline.py`. :)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -18,8 +18,11 @@ from mitmproxy import io\n from mitmproxy import log\n from mitmproxy import version\n from mitmproxy import optmanager\n+from mitmproxy import options\n import mitmproxy.tools.web.master # noqa\n \n+CONFIG_PATH = os.path.join(options.CA_DIR, 'config.yaml')\n+\n \n def flow_to_json(flow: mitmproxy.flow.Flow) -> dict:\n     \"\"\"\nReview:"}
{"pred": "This looks like a good change, it should make the code more robust.", "gold": "why not call `respond_to?(\"#{name}=\")` from the `if` line?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -92,7 +92,8 @@ module Mongoid\n       #\n       # @since 2.0.0.rc.7\n       def process_attribute(name, value)\n-        if store_as = aliased_fields.invert[name.to_s]\n+        responds = respond_to?(\"#{name}=\")\n+        if !responds && store_as = aliased_fields.invert[name.to_s]\n           name = store_as\n         end\n         responds = respond_to?(\"#{name}=\")\nReview:"}
{"pred": "Good to add a comment here to explain why we need to set the working directory.", "gold": "This was properly set above as `<target>.runfiles/<workspace_name>` (with a fallback to workspace root dir) but never used past this line.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -215,7 +215,8 @@ public final class BlazeCidrLauncher extends CidrLauncher {\n         workingDir = workspaceRootDirectory;\n       }\n \n-      GeneralCommandLine commandLine = new GeneralCommandLine(runner.executableToDebug.getPath());\n+      GeneralCommandLine commandLine = new GeneralCommandLine(runner.executableToDebug.getPath())\n+          .withWorkDirectory(workingDir);\n \n       commandLine.addParameters(handlerState.getExeFlagsState().getFlagsForExternalProcesses());\n       commandLine.addParameters(handlerState.getTestArgs());\nReview:"}
{"pred": "This looks good. No changes needed.", "gold": "Are all these namespaces required for this attribute?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,13 @@\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using MvvmCross.Core.Views;\n+\n+namespace MvvmCross.Uwp.Attributes\n+{\n+    public class MvxPagePresentationAttribute : MvxBasePresentationAttribute\n+    {\n+    }\n+}\nReview:"}
{"pred": "It's good practice to log the stdout and stderr, but it's not necessary to log them twice.", "gold": "Given this may be used and printed in other ways, isn't `debug` more appropriate?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -53,9 +53,12 @@ module Beaker\n           result.stdout << std_out\n           result.stderr << std_err\n           result.exit_code = status.exitstatus\n+          @logger.info(result.stdout)\n+          @logger.info(result.stderr)\n         end\n       rescue => e\n         result.stderr << e.inspect\n+        @logger.info(result.stderr)\n         result.exit_code = 1\n       end\n \nReview:"}
{"pred": "This should probably be a separate PR, as it's a major change to the existing code.", "gold": "Looks like this is unused? Did you mean to call it when clearing the block journal?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -540,3 +540,7 @@ func (s *blockDiskStore) remove(id kbfsblock.ID) error {\n \t}\n \treturn err\n }\n+\n+func (s blockDiskStore) clear() error {\n+\treturn ioutil.RemoveAll(s.dir)\n+}\nReview:"}
{"pred": "Should this.alerters be NULL checked?", "gold": "why named alters? how about this.alerts = alerts?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -117,8 +117,10 @@ public class ExecutorManager extends EventHandler implements\n \n   public ExecutorManager(Props props, ExecutorLoader loader,\n       Map<String, Alerter> alters) throws ExecutorManagerException {\n+    alerters = alters;\n     azkProps = props;\n     this.executorLoader = loader;\n+\n     this.setupExecutors();\n     this.loadRunningFlows();\n \nReview:"}
{"pred": "Should we check if the sourcesInfo() and mirrorInfo() are not nil before adding them to the response?", "gold": "not sure if this has to be here or not tbh", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1549,7 +1549,7 @@ func (js *jetStream) processStreamLeaderChange(mset *stream, isLeader bool) {\n \t\tresp.Error = jsError(err)\n \t\ts.sendAPIErrResponse(client, acc, subject, reply, _EMPTY_, s.jsonResponse(&resp))\n \t} else {\n-\t\tresp.StreamInfo = &StreamInfo{Created: mset.createdTime(), State: mset.state(), Config: mset.config(), Cluster: js.clusterInfo(mset.raftGroup())}\n+\t\tresp.StreamInfo = &StreamInfo{Created: mset.createdTime(), State: mset.state(), Config: mset.config(), Cluster: js.clusterInfo(mset.raftGroup()), Sources: mset.sourcesInfo(), Mirror: mset.mirrorInfo()}\n \t\ts.sendAPIResponse(client, acc, subject, reply, _EMPTY_, s.jsonResponse(&resp))\n \t\tif node := mset.raftNode(); node != nil {\n \t\t\tmset.sendCreateAdvisory()\nReview:"}
{"pred": "Good catch, this should be mentioned in the documentation.", "gold": "There's a better fix for this in #1741, which should replace this.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -72,7 +72,12 @@ func newHarnessUsingAutodelete(ctx context.Context, t *testing.T) (drivertest.Ha\n }\n \n func (h *harness) CreateTopic(ctx context.Context, testName string) (dt driver.Topic, cleanup func(), err error) {\n+\t// Keep the topic entity name under 50 characters as per Azure limits.\n+\t// See https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-quotas\n \ttopicName := fmt.Sprintf(\"%s-topic-%d\", sanitize(testName), atomic.AddUint32(&h.numTopics, 1))\n+\tif len(topicName) > 50 {\n+\t\ttopicName = topicName[:50]\n+\t}\n \n \tcreateTopic(ctx, topicName, h.ns, nil)\n \nReview:"}
{"pred": "This should be checked for nil before being used.", "gold": "Use swarm.Address not []byte as type, and construct it from actual byteslice or use swarm.NewAddress if it is constructed from hex-encoded string.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -63,7 +63,7 @@ func (s *StreamMock) Close() error {\n func TestHandshake(t *testing.T) {\n \tlogger := logging.New(ioutil.Discard, 0)\n \tinfo := Info{\n-\t\tAddress:   \"node1\",\n+\t\tAddress:   []byte(\"node1\"),\n \t\tNetworkID: 0,\n \t\tLight:     false,\n \t}\nReview:"}
{"pred": "It's better to use the require package for assertions, as it will fail the test if the assertion fails.", "gold": "It would be worth factoring this out to a function, but you don't have to do that here.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -80,8 +80,9 @@ func TestFSRepoInit(t *testing.T) {\n \n \tdir, err := ioutil.TempDir(\"\", \"\")\n \tassert.NoError(t, err)\n-\n-\tdefer os.RemoveAll(dir)\n+\tdefer func() {\n+\t\trequire.NoError(t, os.RemoveAll(dir))\n+\t}()\n \n \tt.Log(\"init FSRepo\")\n \tassert.NoError(t, InitFSRepo(dir, config.NewDefaultConfig()))\nReview:"}
{"pred": "This looks good. The interface is well-defined and the Javadoc is clear.", "gold": "There's no need for `final` in interfaces.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,15 @@\n+package com.fsck.k9.message.html;\n+\n+/**\n+ * General framework to handle uris when parsing. Allows different handling depending on the scheme identifier.\n+ */\n+public interface UriParser {\n+    /**\n+     * Parse and linkify scheme specific uri beginning from given position. The result will be written to given buffer.\n+     * @param text String to parse uri from.\n+     * @param startPos Position where uri starts (first letter of scheme).\n+     * @param outputBuffer Buffer where linkified variant of uri is written to.\n+     * @return Index where parsed uri ends (first non-uri letter). Should be startPos or smaller if no valid uri was found.\n+     */\n+    int linkifyUri(String text, int startPos, StringBuffer outputBuffer);\n+}\nReview:"}
{"pred": "Is this the right place to set the version tag? It might be better to do this in the constructor or a separate method.", "gold": "Isn't this case handled as a custom tag in `Span.SetTag()` below? This switch is only for special tags that actually set `Span` properties.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -101,6 +101,9 @@ namespace Datadog.Trace.OpenTracing\n                 case DatadogTags.ServiceName:\n                     Span.ServiceName = value;\n                     return this;\n+                case DatadogTags.ServiceVersion:\n+                    Span.SetTag(Tags.Version, value);\n+                    return this;\n             }\n \n             if (key == global::OpenTracing.Tag.Tags.Error.Key)\nReview:"}
{"pred": "This is a docstring change, so no code review is necessary.", "gold": "This shouldn't be changed.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -681,7 +681,6 @@ class Quitter:\n     @cmdutils.argument('session', completion=miscmodels.session)\n     def quit(self, save=False, session=None):\n         \"\"\"Quit qutebrowser.\n-\n         Args:\n             save: When given, save the open windows even if auto_save.session\n                   is turned off.\nReview:"}
{"pred": "Updated copyright year.", "gold": "This one is important `2: I102 copyright year is outdated, expected 2014 but got 2012`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,5 +1,5 @@\n ## This file is part of Invenio.\n-## Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012 CERN.\n+## Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2014 CERN.\n ##\n ## Invenio is free software; you can redistribute it and/or\n ## modify it under the terms of the GNU General Public License as\nReview:"}
{"pred": "It is good practice to add a comment to explain why these imports were added.", "gold": "Are these imports needed (BiConsumer and Consumer)? If they are unused imports, then precommit will fail.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -32,6 +32,8 @@ import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n import java.util.concurrent.TimeoutException;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n \n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\nReview:"}
{"pred": "Good job adding the logging here. This will help with debugging any issues that may arise.", "gold": "Why are we catching and logging exceptions? By doing that we make it look like the job has succeeded and it will be removed from the queue - if we didn't do that then it would stay queued...", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,10 @@\n+class TraceDestroyerJob < ApplicationJob\n+  queue_as :default\n+\n+  def perform(trace)\n+    trace.destroy\n+  rescue StandardError => ex\n+    logger.info ex.to_s\n+    ex.backtrace.each { |l| logger.info l }\n+  end\n+end\nReview:"}
{"pred": "You should add a check to make sure that $cartItems is not null before looping through it.", "gold": "If there are `@param` tags in docblock, there should be `@return` tag also. (applies for a whole file)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -90,14 +90,11 @@ class CartController extends FrontBaseController\n      */\n     public function indexAction(Request $request)\n     {\n-        $cart = $this->cartFacade->getCartOfCurrentCustomer();\n-\n-        if ($cart->isEmpty()) {\n-            $this->cartFacade->cleanAdditionalData();\n-        }\n+        $cart = $this->cartFacade->findCartOfCurrentCustomer();\n+        $cartItems = $cart === null ? [] : $cart->getItems();\n \n         $cartFormData = ['quantities' => []];\n-        foreach ($cart->getItems() as $cartItem) {\n+        foreach ($cartItems as $cartItem) {\n             $cartFormData['quantities'][$cartItem->getId()] = $cartItem->getQuantity();\n         }\n \nReview:"}
{"pred": "Add a comment to explain why we need the new VALIDATORS enum.", "gold": "Is the concept of validators exclusive to IBFT2? I wonder if this category should be more explicitly linked to IBFT2.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -34,7 +34,8 @@ public enum BesuMetricCategory implements MetricCategory {\n   PRUNER(\"pruner\"),\n   RPC(\"rpc\"),\n   SYNCHRONIZER(\"synchronizer\"),\n-  TRANSACTION_POOL(\"transaction_pool\");\n+  TRANSACTION_POOL(\"transaction_pool\"),\n+  VALIDATORS(\"validators\");\n \n   private static final Optional<String> BESU_PREFIX = Optional.of(\"besu_\");\n   public static final Set<MetricCategory> DEFAULT_METRIC_CATEGORIES;\nReview:"}
{"pred": "This change looks good, it removes unnecessary imports and makes the code more concise.", "gold": "Spotless is configured to reject star imports. Please replace with explicit imports.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -14,9 +14,7 @@\n  */\n package org.hyperledger.besu.tests.acceptance.dsl.account;\n \n-import org.hyperledger.besu.crypto.SECP256K1.KeyPair;\n-import org.hyperledger.besu.crypto.SECP256K1.PrivateKey;\n-import org.hyperledger.besu.crypto.SECP256K1.PublicKey;\n+import org.hyperledger.besu.crypto.*;\n import org.hyperledger.besu.ethereum.core.Address;\n import org.hyperledger.besu.ethereum.core.Hash;\n import org.hyperledger.besu.tests.acceptance.dsl.blockchain.Amount;\nReview:"}
{"pred": "Should we check the return values of the get_info calls?", "gold": "Remind me why you are using CUDA vocabulary when naming these variables.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -115,6 +115,8 @@ void SYCLInternal::initialize(const sycl::device& d) {\n \n     m_maxThreadsPerSM =\n         d.template get_info<sycl::info::device::max_work_group_size>();\n+    m_maxShmemPerBlock =\n+        d.template get_info<sycl::info::device::local_mem_size>();\n     m_indirectKernelMem.reset(*m_queue);\n     m_indirectReducerMem.reset(*m_queue);\n   } else {\nReview:"}
{"pred": "This should be refactored into a separate method, as it is doing more than one thing.", "gold": "Please turn the iteration order around (instead of `0...size` to `size...0`). The reason is that this sometimes skips indices when removing an item. You can therefore end up with feeds that have counter 0 and are still displayed.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -898,6 +898,16 @@ public final class DBReader {\n         }\n         final LongIntMap feedCounters = adapter.getFeedCounters(feedIds);\n \n+        int feedFilter = UserPreferences.getFeedFilter();\n+        if (feedFilter == UserPreferences.FEED_FILTER_COUNTER_ZERO) {\n+            for (int i = 0; i < feeds.size(); i++) {\n+                if (feedCounters.get(feeds.get(i).getId()) <= 0) {\n+                    feedCounters.delete(feeds.get(i).getId());\n+                    feeds.remove(i);\n+                }\n+            }\n+        }\n+\n         Comparator<Feed> comparator;\n         int feedOrder = UserPreferences.getFeedOrder();\n         if (feedOrder == UserPreferences.FEED_ORDER_COUNTER) {\nReview:"}
{"pred": "Good change, this makes the code more readable and easier to understand.", "gold": "this is a behavior change. solid_subset=[] represents an empty pipeline where as solid_subset=None is the full pipeline", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -620,7 +620,7 @@ def execute_reentrant_pipeline(pipeline, typed_environment, throw_on_error, reen\n def get_subset_pipeline(pipeline, solid_subset):\n     check.inst_param(pipeline, 'pipeline', PipelineDefinition)\n     check.opt_list_param(solid_subset, 'solid_subset', of_type=str)\n-    return pipeline if solid_subset is None else build_sub_pipeline(pipeline, solid_subset)\n+    return pipeline if not solid_subset else build_sub_pipeline(pipeline, solid_subset)\n \n \n def create_typed_environment(pipeline, environment=None):\nReview:"}
{"pred": "It's probably better to throw an ArgumentException here, rather than a generic error.", "gold": "this is a breaking change, any specific reason you want to do this?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -318,8 +318,7 @@ Licensed under the MIT License. See License.txt in the project root for license\n             {\n                 foreach (var unmatchedSetting in CustomSettings.Keys)\n                 {\n-                    Logger.LogError(new ArgumentException(unmatchedSetting),\n-                        Resources.ParameterIsNotValid, unmatchedSetting);\n+                    Logger.LogWarning(Resources.ParameterIsNotValid, unmatchedSetting);\n                 }\n             }\n             ErrorManager.ThrowErrors();\nReview:"}
{"pred": "Is there any error handling for the PutTipSetAndState and SetHead methods?", "gold": "Blocking: we still want read write separation. Node functions should absolutely not write to the chain store and the interface should reflect that. Only the syncer should have this capability in production code. It should be no problem to keep casting chainForTest to a read-write interface, or doing other function decomposition and automatic casting tricks.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -91,6 +91,8 @@ type nodeChainReader interface {\n \tGetTipSetStateRoot(tsKey types.SortedCidSet) (cid.Cid, error)\n \tHeadEvents() *ps.PubSub\n \tLoad(context.Context) error\n+\tPutTipSetAndState(context.Context, *chain.TipSetAndState) error\n+\tSetHead(context.Context, types.TipSet) error\n \tStop()\n }\n \nReview:"}
{"pred": "This change looks good, though it might be worth adding a comment to explain why the priority is set to the max value.", "gold": "The PR description says the lowest on-demand request priority is `2^30`. Why the `-1` here?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -22,7 +22,8 @@ const (\n \tminimalPrefetchWorkerQueueSize       int = 1\n \ttestBlockRetrievalWorkerQueueSize    int = 5\n \ttestPrefetchWorkerQueueSize          int = 1\n-\tdefaultOnDemandRequestPriority       int = 100\n+\tdefaultOnDemandRequestPriority       int = 1<<30 - 1\n+\tlowestTriggerPrefetchPriority        int = 1\n \t// Channel buffer size can be big because we use the empty struct.\n \tworkerQueueSize int = 1<<31 - 1\n )\nReview:"}
{"pred": "This should be moved to a separate method, as the logic here is getting too complex.", "gold": "checking health again? I think it is not necessary.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -609,6 +609,14 @@ bool Game::removeCreature(Creature* creature, bool isLogout/* = true*/)\n \treturn true;\n }\n \n+void Game::executeDeath(uint32_t creatureId)\n+{\n+\tCreature* creature = getCreatureByID(creatureId);\n+\tif (creature && !creature->isRemoved() && creature->getHealth() < 1) {\n+\t\tcreature->onDeath();\n+\t}\n+}\n+\n void Game::playerMoveThing(uint32_t playerId, const Position& fromPos,\n                            uint16_t spriteId, uint8_t fromStackPos, const Position& toPos, uint8_t count)\n {\nReview:"}
{"pred": "This should be refactored into a separate function to make it more readable.", "gold": "Need an `if err == nil {break}` above this line so that we don't log/sleep if the retry succeeds.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -442,7 +442,18 @@ configRetry:\n \t\tlog.Infof(\"Starting the Typha connection\")\n \t\terr := typhaConnection.Start(context.Background())\n \t\tif err != nil {\n-\t\t\tlog.WithError(err).Fatal(\"Failed to connect to Typha\")\n+\t\t\tlog.WithError(err).Error(\"Failed to connect to Typha. Retrying...\")\n+\t\t\tstartTime := time.Now()\n+\t\t\tfor err != nil && time.Since(startTime) < 30*time.Second {\n+\t\t\t\t// Set Ready to false and Live to true when unable to connect to typha\n+\t\t\t\thealthAggregator.Report(healthName, &health.HealthReport{Live: true, Ready: false})\n+\t\t\t\terr = typhaConnection.Start(context.Background())\n+\t\t\t\tlog.WithError(err).Debug(\"Retrying to start Typha\")\n+\t\t\t\ttime.Sleep(1 * time.Second)\n+\t\t\t}\n+\t\t\tif err != nil {\n+\t\t\t\tlog.WithError(err).Fatal(\"Failed to connect to Typha\")\n+\t\t\t}\n \t\t}\n \t\tgo func() {\n \t\t\ttyphaConnection.Finished.Wait()\nReview:"}
{"pred": "This looks good. It is a good practice to explicitly check the type of the argument passed in.", "gold": "to reiterate my point above, this class is not the actual provided Promise, but rather something a user can provide a Promise to/with. I think a name like `PromiseProvider` is more appropriate.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,18 @@\n+'use strict';\n+\n+const assert = require('assert');\n+\n+class ProvidedPromise {\n+  set Promise(lib) {\n+    assert.ok(typeof lib === 'function', `mongodb.Promise must be a function, got ${lib}`);\n+    this._promise = lib;\n+  }\n+  get Promise() {\n+    return this._promise;\n+  }\n+}\n+\n+const provided = new ProvidedPromise();\n+provided.Promise = global.Promise;\n+\n+module.exports = provided;\nReview:"}
{"pred": "We should add a comment here explaining why we need to queue the target here.", "gold": "I guess we can only call this from a post-build function, but we might need to check that this target is to be built? I guess target A depends on B which has a post build. We `plz build :B` which adds C as a dep of A. Won't we queue C to be built even though it only needs to build if A needs to be built? That's kinda why I approached this the way I did. I trust you've thought about this but would be good to understand this a bit better.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -738,6 +738,12 @@ func addDep(s *scope, args []pyObject) pyObject {\n \tdep := core.ParseBuildLabelContext(string(args[1].(pyString)), s.pkg)\n \texported := args[2].IsTruthy()\n \ttarget.AddMaybeExportedDependency(dep, exported, false, false)\n+\t// Queue this dependency if it'll be needed.\n+\tif target.State() > core.Inactive {\n+\t\terr := s.state.QueueTarget(dep, target.Label, true, false)\n+\t\ts.Assert(err == nil, \"%s\", err)\n+\t}\n+\t// TODO(peterebden): Do we even need the following any more?\n \ts.pkg.MarkTargetModified(target)\n \treturn None\n }\nReview:"}
{"pred": "This looks like it should be a check for the type of pks, rather than a check for the name of the class.", "gold": "You should use `isinstance()` instead of comparing the class name to a string.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -123,7 +123,7 @@ def sndrcv(pks, pkt, timeout = None, inter = 0, verbose=None, chainCC=0, retry=0\n                                 if remaintime <= 0:\n                                     break\n                             r = None\n-                            if arch.FREEBSD or arch.DARWIN:\n+                            if not (pks.__class__.__name__ == 'StreamSocket') and (arch.FREEBSD or arch.DARWIN):\n                                 inp, out, err = select(inmask,[],[], 0.05)\n                                 if len(inp) == 0 or pks in inp:\n                                     r = pks.nonblock_recv()\nReview:"}
{"pred": "This should be moved to the top of the function, as it's a more general check that should be done before the more specific checks.", "gold": "Why should audio and video elements always return `false` for `isHidden`?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -15,6 +15,11 @@ axe.utils.isHidden = function isHidden(el, recursed) {\n \t\treturn false;\n \t}\n \n+\t// do not exclude `video` or `audio` el's\n+\tif ([`VIDEO`, `AUDIO`].includes(el.nodeName.toUpperCase())) {\n+\t\treturn false;\n+\t}\n+\n \t// 11 === Node.DOCUMENT_FRAGMENT_NODE\n \tif (el.nodeType === 11) {\n \t\tel = el.host; // grab the host Node\nReview:"}
{"pred": "Is this intentional? If so, please add a comment explaining why this is commented out.", "gold": "This obviously won't work for all the other platforms.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -27,7 +27,7 @@ namespace Playground.Core\n \n             Mvx.IoCProvider.RegisterSingleton<IMvxTextProvider>(new TextProviderBuilder().TextProvider);\n \n-            RegisterAppStart<RootViewModel>();\n+            // RegisterAppStart<RootViewModel>();\n         }\n \n         /// <summary>\nReview:"}
{"pred": "This is a good change, using the diamond operator is more concise and easier to read.", "gold": "Isn't he diamond operator Java7+?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -15,7 +15,7 @@ public class ManipulationTest extends BasicJBehaveTest {\n \n     @Override\n     public InjectableStepsFactory stepsFactory() {\n-        Map<String, Object> state = new HashMap<String, Object>();\n+        Map<String, Object> state = new HashMap<>();\n \n         return new InstanceStepsFactory(configuration(),\n                 new SharedSteps(state),\nReview:"}
{"pred": "This should probably be a separate method for clarity, and the message should be the first argument.", "gold": "Prefer adding a second `positive(String, double)` that delegates down to this three-param version. Using `null` in code is generally Not A Great Idea, and it looks ugly.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -159,6 +159,17 @@ public final class Require {\n     return number;\n   }\n \n+  public static double positive(String argName, double number, String message) {\n+    if (number <= 0) {\n+      if (message == null) {\n+        throw new IllegalArgumentException(argName + \" must be greater than 0\");\n+      } else {\n+        throw new IllegalArgumentException(message);\n+      }\n+    }\n+    return number;\n+  }\n+\n   public static int positive(String argName, Integer number) {\n     return positive(argName, number, null);\n   }\nReview:"}
{"pred": "Is there a reason why you need to pass in the nextNodeId parameter? It doesn't seem to be used.", "gold": "This pattern, where we add a new parameter without using it, often indicates to me that we've got a leaky interface or abstraction. I see this pattern _a lot_ in this patch, so wondering you have thoughts about it.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -474,7 +474,7 @@ func (rule removeCount) Name() string {\n func (rule removeCount) Pattern() plan.Pattern {\n \treturn plan.Pat(universe.CountKind, plan.Any())\n }\n-func (rule removeCount) Rewrite(ctx context.Context, node plan.Node) (plan.Node, bool, error) {\n+func (rule removeCount) Rewrite(ctx context.Context, node plan.Node, nextNodeId *int) (plan.Node, bool, error) {\n \treturn node.Predecessors()[0], true, nil\n }\n \nReview:"}
{"pred": "You should check the return value of MkdirAll() too.", "gold": "This seems like an improved pattern :)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -164,10 +164,13 @@ func WriteWordpressConfig(wordpressConfig *WordpressConfig, filePath string) err\n \t\treturn err\n \t}\n \n-\t// Ensure target directory is writable.\n+\t// Ensure target directory exists and is writeable\n \tdir := filepath.Dir(filePath)\n-\terr = os.Chmod(dir, 0755)\n-\tif err != nil {\n+\tif err = os.Chmod(dir, 0755); os.IsNotExist(err) {\n+\t\tif err = os.MkdirAll(dir, 0755); err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t} else if err != nil {\n \t\treturn err\n \t}\n \nReview:"}
{"pred": "This looks like a refactor to use a different authentication method. Is the new federated_verify() method tested and secure?", "gold": "`open_id_authentication` is no longer the name of the function, and it's not OpenID specific", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -127,16 +127,16 @@ class UserController < ApplicationController\n         # valid OpenID and one the user has control over before saving\n         # it as a password equivalent for the user.\n         session[:new_user_settings] = params\n-        openid_verify(params[:user][:openid_url], @user)\n+        federated_verify(params[:user][:openid_url], @user)\n       else\n         update_user(@user, params)\n       end\n-    elsif using_open_id?\n+    elsif using_federated_login?\n       # The redirect from the OpenID provider reenters here\n       # again and we need to pass the parameters through to\n       # the open_id_authentication function\n       settings = session.delete(:new_user_settings)\n-      openid_verify(nil, @user) do |user|\n+      federated_verify(nil, @user) do |user|\n         update_user(user, settings)\n       end\n     end\nReview:"}
{"pred": "It would be better to use a string formatting library here, such as fmtlib, to make the code more readable and maintainable.", "gold": "This didn't require corresponding changes to the test case(s)?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -243,10 +243,10 @@ void rai_qt::accounts::refresh_wallet_balance ()\n \t\tbalance = balance + (this->wallet.node.ledger.account_balance (transaction, key));\n \t\tpending = pending + (this->wallet.node.ledger.account_pending (transaction, key));\n \t}\n-\tauto final_text (std::string (\"Wallet balance (XRB): \") + wallet.format_balance (balance));\n+\tauto final_text (std::string (\"Balance: \") + wallet.format_balance (balance));\n \tif (!pending.is_zero ())\n \t{\n-\t\tfinal_text += \"\\nWallet pending: \" + wallet.format_balance (pending);\n+\t\tfinal_text += \"\\nPending: \" + wallet.format_balance (pending);\n \t}\n \twallet_balance_label->setText (QString (final_text.c_str ()));\n \tthis->wallet.node.alarm.add (std::chrono::system_clock::now () + std::chrono::seconds (60), [this]() {\nReview:"}
{"pred": "Should EnvFile be validated to ensure it is a valid file path?", "gold": "A question! I think `string` totally works, but what do you think of `*string` for consistency?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -509,6 +509,7 @@ type TaskConfig struct {\n \tCount          Count                `yaml:\"count\"`\n \tExecuteCommand ExecuteCommand       `yaml:\"exec\"`\n \tVariables      map[string]string    `yaml:\"variables\"`\n+\tEnvFile        string               `yaml:\"env_file\"`\n \tSecrets        map[string]string    `yaml:\"secrets\"`\n \tStorage        Storage              `yaml:\"storage\"`\n }\nReview:"}
{"pred": "It would be good to add a comment here to explain the purpose of these constants.", "gold": "Should this be: `aws.infrastructure.cluster.sigs.k8s.io` instead?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -25,6 +25,12 @@ import (\n \tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n )\n \n+const (\n+\tAnnotationClusterInfrastructureReady = \"aws.cluster.sigs.k8s.io/infrastructure-ready\"\n+\tAnnotationControlPlaneReady          = \"aws.cluster.sigs.k8s.io/control-plane-ready\"\n+\tValueReady                           = \"true\"\n+)\n+\n // AWSResourceReference is a reference to a specific AWS resource by ID, ARN, or filters.\n // Only one of ID, ARN or Filters may be specified. Specifying more than one will result in\n // a validation error.\nReview:"}
{"pred": "Are you sure this should be xprd and not zprd?", "gold": "Not clear on why this change is correct.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -142,7 +142,7 @@ void PairLubricate::compute(int eflag, int vflag)\n     Ef[2][2] = h_rate[2]/domain->zprd;\n     Ef[0][1] = Ef[1][0] = 0.5 * h_rate[5]/domain->yprd;\n     Ef[0][2] = Ef[2][0] = 0.5 * h_rate[4]/domain->zprd;\n-    Ef[1][2] = Ef[2][1] = 0.5 * h_rate[3]/domain->zprd;\n+    Ef[1][2] = Ef[2][1] = 0.5 * h_rate[3]/domain->xprd;\n \n     // copy updated velocity/omega/angmom to the ghost particles\n     // no need to do this if not shearing since comm->ghost_velocity is set\nReview:"}
{"pred": "Is this intentional? It looks like this should be false.", "gold": "Hi Simon. Whether this should return true depends on what byte buffers are used? The same applies to ByteBufferIndexInput, actually... I don't think you can generally tell whether the ByteBuffers the input operates on come from a mmap call or from somewhere else (even direct buffers don't have to be a result of mmap).", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -193,5 +193,10 @@ public final class ByteBuffersIndexInput extends IndexInput implements RandomAcc\n     if (in == null) {\n       throw new AlreadyClosedException(\"Already closed.\");\n     }\n-  }  \n+  }\n+\n+  @Override\n+  public boolean isMMapped() {\n+    return true;\n+  }\n }\nReview:"}
{"pred": "Is the padding necessary here? It seems like it should be handled by the component itself.", "gold": "All stories in this file also need to have the default padding.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -54,6 +54,7 @@ storiesOf( 'PageSpeed Insights Module/Settings', module )\n \t\tdecorators: [\n \t\t\twithRegistry,\n \t\t],\n+\t\tpadding: 0,\n \t} )\n \t.add( 'View, open with all settings', ( args, { registry } ) => {\n \t\treturn <Settings isOpen={ true } registry={ registry } />;\nReview:"}
{"pred": "Should we check if sibling is NULL here?", "gold": "I don't think these asserts are necessary, because `subsurface_find_sibling` already searches in the parent. Or am I missing something?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -804,8 +804,10 @@ static void subsurface_handle_place_above(struct wl_client *client,\n \t\treturn;\n \t}\n \n+\tassert(sibling->parent == subsurface->parent);\n+\n \twl_list_remove(&subsurface->parent_pending_link);\n-\twl_list_insert(&sibling->parent_pending_link,\n+\twl_list_insert(sibling->parent_pending_link.prev,\n \t\t&subsurface->parent_pending_link);\n \n \tsubsurface->reordered = true;\nReview:"}
{"pred": "Good job on adding validations and a helper method.", "gold": "Should this be `number` instead of `id`?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,15 @@\n+class Episode < ActiveRecord::Base\n+  attr_accessible :title, :duration, :file, :description, :published_on, :notes,\n+    :old_url, :file_size\n+\n+  validates_presence_of :title, :duration, :file, :file_size, :description,\n+    :published_on\n+\n+  def self.published\n+    where(\"published_on <= ?\", Date.today).order('published_on desc')\n+  end\n+\n+  def full_title\n+    \"Episode #{id}: #{title}\"\n+  end\n+end\nReview:"}
{"pred": "This change looks good. It is more clear and concise.", "gold": "I have forgotten why we thought this restriction is necessary. A user registers a Hive/HBase table with us but is not able to use the table with the registered name in DML. Will UPDATE STATs will be on the original name too (and update stats code will find out registered name and use it for Table_uid?). This was the registration concept is almost like an internal implementation idea, at some point could even be done by some utility program for all existing Hive/hBase tables, and the user need not be aware of it? I am struggling with a user would want to register a table, if they cannot use it by that name.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1569,12 +1569,11 @@ NATable *BindWA::getNATable(CorrName& corrName,\n       ((QualifiedName&)(table->getTableName())).setIsVolatile(TRUE);\n     }\n       \n-  // For now, do not allow access through the Trafodion external name created for\n-  // the HIVE object unless the inDDL flag is set.  inDDL is set for drop \n-  // table and SHOWDDL statements.  \n-  // TDB - may want to merge the Trafodion version with the HIVE version.\n-  // TDB - similar operation may be needed for external HBase tables\n-  if ((table) && (table->isExternalTable() && (! bindWA->inDDL())))\n+  // For now, don't allow access through the Trafodion external name created for\n+  // native HIVE or HBASE objects unless the allowExternalTables flag is set.  \n+  // allowExternalTables is set for drop table and SHOWDDL statements.  \n+  // TDB - may want to merge the Trafodion version with the native version.\n+  if ((table) && (table->isExternalTable() && (! bindWA->allowExternalTables())))\n     {\n       *CmpCommon::diags() << DgSqlCode(-4258)\n                           << DgTableName(table->getTableName().getQualifiedNameAsAnsiString());\nReview:"}
{"pred": "We should add comments to explain what each of these variables is used for.", "gold": "Should most of these non-globals be static?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -40,6 +40,18 @@\n \n struct ase_cfg_t *cfg;\n \n+int app2sim_alloc_rx;\t\t// app2sim mesaage queue in RX mode\n+int sim2app_alloc_tx;\t\t// sim2app mesaage queue in TX mode\n+int app2sim_mmioreq_rx;\t\t// MMIO Request path\n+int sim2app_mmiorsp_tx;\t\t// MMIO Response path\n+int app2sim_umsg_rx;\t\t// UMSG    message queue in RX mode\n+int app2sim_portctrl_req_rx;\t// Port Control messages in Rx mode\n+int app2sim_dealloc_rx;\n+int sim2app_dealloc_tx;\n+int sim2app_portctrl_rsp_tx;\n+int sim2app_intr_request_tx;\n+int intr_event_fds[MAX_USR_INTRS];\n+\n int glbl_test_cmplt_cnt;   // Keeps the number of session_deinits received\n \n volatile int sockserver_kill;\nReview:"}
{"pred": "These tests should be more specific, and should check for the expected output.", "gold": "Please do not approve PRs without tests!!!!", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -14,6 +14,14 @@ class TestFakerName < Test::Unit::TestCase\n     assert @tester.name_with_middle.match(/(\\w+\\.? ?){3,4}/)\n   end\n \n+  def test_first_name\n+    assert @tester.first_name.match(/(\\w+\\.? ?){3,4}/)\n+  end\n+\n+  def test_last_name\n+    assert @tester.last_name.match(/(\\w+\\.? ?){3,4}/)\n+  end\n+\n   def test_prefix\n     assert @tester.prefix.match(/[A-Z][a-z]+\\.?/)\n   end\nReview:"}
{"pred": "Is win_id being used anywhere? If not, it should be removed.", "gold": "Now that you handle this in `webenginetab.py` you can undo all the changes in this file.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -48,7 +48,7 @@ class WebEngineView(QWebEngineView):\n         else:\n             profile = webenginesettings.default_profile\n         page = WebEnginePage(theme_color=theme_color, profile=profile,\n-                             parent=self)\n+                             parent=self, win_id=win_id)\n         self.setPage(page)\n \n     def shutdown(self):\nReview:"}
{"pred": "It's generally better to let the application crash and handle the exception in the main method, rather than catching it here.", "gold": "I think we should log the exception to a log file instead of printing it. The current behavior (not catching the exception) should lead to an automatic print of the exception to the terminal/console.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -30,7 +30,11 @@ import org.springframework.context.annotation.AnnotationConfigApplicationContext\n public class JavaFXApplication extends Application {\n \n     public static void main(String[] args) {\n-        Application.launch(JavaFXApplication.class);\n+        try {\n+            Application.launch(JavaFXApplication.class);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n     }\n \n     @Override\nReview:"}
{"pred": "It looks like you are changing the log level from error to warn. Is this intentional?", "gold": "These changes to the resource helpers have some more far-reaching implications as they also affect calls made in hive-operator, I believe. It's probably OK still, though. Ideally, the resource helper would not be the one doing the logging, since it cannot know the severity, but that is well beyond something that we should tackle for this PR. I would rather have the hive-operator log warnings than have the syncsetinstance controller log errors.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -57,7 +57,7 @@ func (r *Helper) Apply(obj []byte) (ApplyResult, error) {\n \tif err != nil {\n \t\tr.logger.WithError(err).\n \t\t\tWithField(\"stdout\", ioStreams.Out.(*bytes.Buffer).String()).\n-\t\t\tWithField(\"stderr\", ioStreams.ErrOut.(*bytes.Buffer).String()).Error(\"running the apply command failed\")\n+\t\t\tWithField(\"stderr\", ioStreams.ErrOut.(*bytes.Buffer).String()).Warn(\"running the apply command failed\")\n \t\treturn \"\", err\n \t}\n \treturn changeTracker.GetResult(), nil\nReview:"}
{"pred": "The cascade and restrict parameters have been removed, is this intentional?", "gold": "do you really want to change the behavior on foreign key ?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -167,7 +167,7 @@ class ExportCategoryTableMap extends TableMap\n      */\n     public function buildRelations()\n     {\n-        $this->addRelation('Export', '\\\\Thelia\\\\Model\\\\Export', RelationMap::ONE_TO_MANY, array('id' => 'export_category_id', ), 'CASCADE', 'RESTRICT', 'Exports');\n+        $this->addRelation('Export', '\\\\Thelia\\\\Model\\\\Export', RelationMap::ONE_TO_MANY, array('id' => 'export_category_id', ), null, null, 'Exports');\n         $this->addRelation('ExportCategoryI18n', '\\\\Thelia\\\\Model\\\\ExportCategoryI18n', RelationMap::ONE_TO_MANY, array('id' => 'id', ), 'CASCADE', null, 'ExportCategoryI18ns');\n     } // buildRelations()\n \nReview:"}
{"pred": "This looks like a good change, it prevents an unnecessary publish if there are no state transitions.", "gold": "Looks like my bad. Thanks for fixing!", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -183,7 +183,8 @@ void event_batch_destroy (struct event_batch *batch)\n         if (batch->f)\n             (void)flux_future_wait_for (batch->f, -1);\n         if (batch->state_trans) {\n-            event_publish_state (batch->event, batch->state_trans);\n+            if (json_array_size (batch->state_trans) > 0)\n+                event_publish_state (batch->event, batch->state_trans);\n             json_decref (batch->state_trans);\n         }\n         if (batch->responses) {\nReview:"}
{"pred": "It would be good to add a comment here explaining what no_replace_variables does.", "gold": "I think \"Don't replace variables ...\" would be cleaner.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -82,6 +82,7 @@ class Command:\n         no_cmd_split: If true, ';;' to split sub-commands is ignored.\n         backend: Which backend the command works with (or None if it works with\n                  both)\n+        no_replace_variables: Whether or not to replace variables like {url}\n         _qute_args: The saved data from @cmdutils.argument\n         _needs_js: Whether the command needs javascript enabled\n         _modes: The modes the command can be executed in.\nReview:"}
{"pred": "It looks like you've removed the object selector here, is that intentional?", "gold": "Do you validate the possible strings? I've not read the code below but we should make sure if a string is supplied it is validate...", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -82,8 +82,7 @@ class MPLPlot(DimensionedPlot):\n     sublabel_size = param.Number(default=18, doc=\"\"\"\n          Size of optional subfigure label.\"\"\")\n \n-    projection = param.ObjectSelector(default=None,\n-                                      objects=['3d', 'polar', None], doc=\"\"\"\n+    projection = param.Parameter(default=None, doc=\"\"\"\n         The projection of the plot axis, default of None is equivalent to\n         2D plot, '3d' and 'polar' are also supported.\"\"\")\n \nReview:"}
{"pred": "This looks good. It's nice to have the disk names generated in a single function.", "gold": "I'd recommend using generateDataDiskName here as well -- might as well benefit from the safety that it gives to protect yourself from future changes to w.ID().", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -40,13 +40,11 @@ func AddDiskImportSteps(w *daisy.Workflow, dataDiskInfos []ovfutils.DiskInfo) {\n \tfor i, dataDiskInfo := range dataDiskInfos {\n \t\tdataDiskIndex := i + 1\n \t\tdataDiskFilePath := dataDiskInfo.FilePath\n-\t\tdiskNames = append(\n-\t\t\tdiskNames,\n-\t\t\tfmt.Sprintf(\"%v-data-disk-%v\", w.Vars[\"instance_name\"].Value, dataDiskIndex))\n+\t\tdiskNames = append(diskNames, generateDataDiskName(w.Vars[\"instance_name\"].Value, dataDiskIndex))\n \n \t\tsetupDataDiskStepName := fmt.Sprintf(\"setup-data-disk-%v\", dataDiskIndex)\n-\t\tdiskImporterDiskName := fmt.Sprintf(\"disk-importer-%v\", dataDiskIndex)\n-\t\tscratchDiskDiskName := fmt.Sprintf(\"disk-importer-scratch-%v-%v\", dataDiskIndex, w.Vars[\"instance_name\"].Value)\n+\t\tdiskImporterDiskName := fmt.Sprintf(\"disk-importer-%v-%v\", dataDiskIndex, w.ID())\n+\t\tscratchDiskDiskName := fmt.Sprintf(\"disk-importer-scratch-%v-%v\", dataDiskIndex, w.ID())\n \n \t\tsetupDataDiskStep := daisy.NewStepDefaultTimeout(setupDataDiskStepName, w)\n \t\tsetupDataDiskStep.CreateDisks = &daisy.CreateDisks{\nReview:"}
{"pred": "This should be documented in the javadocs for the interface.", "gold": "qq: do we want to include anything in the name to indicate that it is a position in the manifest?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -29,6 +29,11 @@ import java.util.Map;\n  * @param <F> the concrete Java class of a ContentFile instance.\n  */\n public interface ContentFile<F> {\n+  /**\n+   * Returns the ordinal position of the file in a manifest, or null if it was not read from a manifest.\n+   */\n+  Long pos();\n+\n   /**\n    * Returns id of the partition spec used for partition metadata.\n    */\nReview:"}
{"pred": "It would be better to use a boolean flag to check if the compositor is paused or not instead of checking it every time.", "gold": "These logs should probably use the `LOGTAG`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -969,8 +969,11 @@ public class VRBrowserActivity extends PlatformActivity implements WidgetManager\n         GleanMetricsService.stopImmersive();\n         Handler handler = new Handler(Looper.getMainLooper());\n         handler.postDelayed(() -> {\n-            mWindows.resumeCompositor();\n-            Log.d(LOGTAG, \"Compositor Resumed\");\n+            if (!mWindows.isPaused()) {\n+                Log.d(LOGTAG, \"Compositor resume begin\");\n+                mWindows.resumeCompositor();\n+                Log.d(LOGTAG, \"Compositor resume end\");\n+            }\n         }, 20);\n     }\n \nReview:"}
{"pred": "It's good to see the package being updated to the official one.", "gold": "From this, it was clear, that we are using our version of wireguard-go. And now it looks like we are using original packages which is confusing.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -28,10 +28,10 @@ import (\n \t\"github.com/mysteriumnetwork/node/core/connection\"\n \t\"github.com/mysteriumnetwork/node/services/wireguard\"\n \t\"github.com/mysteriumnetwork/node/services/wireguard/key\"\n-\t\"github.com/mysteriumnetwork/wireguard-go/device\"\n-\t\"github.com/mysteriumnetwork/wireguard-go/tun\"\n \t\"github.com/pkg/errors\"\n \t\"github.com/rs/zerolog/log\"\n+\t\"golang.zx2c4.com/wireguard/device\"\n+\t\"golang.zx2c4.com/wireguard/tun\"\n )\n \n const (\nReview:"}
{"pred": "This is a good change, using the exception message is more descriptive than the ToString() representation.", "gold": "Any particular reason for this? This potentially will make harder to investigate users issues", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -43,7 +43,7 @@ namespace Nethermind.JsonRpc\n         \n         public static ResultWrapper<T> Fail(Exception e)\n         {\n-            return new() { Result = Result.Fail(e.ToString()), ErrorCode = ErrorCodes.InternalError};\n+            return new() { Result = Result.Fail(e.Message), ErrorCode = ErrorCodes.InternalError};\n         }\n \n         public static ResultWrapper<T> Fail(string error, int errorCode, T outputData)\nReview:"}
{"pred": "This looks good. The extra check for localConnection_ should make sure that the previews are updated correctly.", "gold": "Do you also need to check if Blockly.localConnection_ is non-null?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -999,7 +999,8 @@ Blockly.BlockSvg.prototype.updatePreviews = function(closestConnection,\n   // grayed-out blocks instead of highlighting the connection; for compatibility\n   // with Web Blockly the name \"highlightedConnection\" will still be used.\n   if (Blockly.highlightedConnection_ &&\n-      Blockly.highlightedConnection_ != closestConnection) {\n+      (Blockly.highlightedConnection_ != closestConnection ||\n+       Blockly.localConnection_ != localConnection)) {\n     if (Blockly.insertionMarker_ && Blockly.insertionMarkerConnection_) {\n       Blockly.BlockSvg.disconnectInsertionMarker();\n     }\nReview:"}
{"pred": "This comment is too vague. Can you provide more details about what this class is used for?", "gold": "Not really a container, and it's not just about non-config data, not sure of a better description, @myronmarston ?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,5 +1,6 @@\n module RSpec\n   module Core\n+    # Internal container for global non-configuration data\n     class World\n \n       include RSpec::Core::Hooks\nReview:"}
{"pred": "It looks like you are adding some new dependencies here, are these necessary?", "gold": "The desktop app will load this fine. on iOS I get `TypeError: undefined is not an object (evaluating '_$$_REQUIRE(_dependencyMap[8], \"stream\").Readable.Readable')` if I change it to `const Readable = require('stream').Readable;` or `const { Readable } = require('stream');` I get undefined errors from the stream on iOS: `[TypeError: stream.on is not a function. (In 'stream.on(\"data\", function (chunk) { return chunks.push(chunk); })', 'stream.on' is undefined)]` What am I missing?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -3,6 +3,8 @@ const { basename } = require('./path-utils');\n const shim = require('./shim').default;\n const JoplinError = require('./JoplinError').default;\n const { Buffer } = require('buffer');\n+const { Readable } = require('stream').Readable;\n+const { GetObjectCommand, ListObjectsV2Command, HeadObjectCommand, PutObjectCommand, DeleteObjectCommand, DeleteObjectsCommand } = require(\"@aws-sdk/client-s3\");\n \n const S3_MAX_DELETES = 1000;\n \nReview:"}
{"pred": "You should consider using the `copy` function here instead of manually looping over the bytes.", "gold": "this is needed since the chunk feeder shares memory across calls to the pipeline. this is in order to avoid multiple allocations. this change mimics the behavior of shed and localstore, and copies the data from the call into the in-memory store", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -93,7 +93,9 @@ func (m *MockStorer) Put(ctx context.Context, mode storage.ModePut, chs ...swarm\n \t\t\tpo := swarm.Proximity(ch.Address().Bytes(), m.baseAddress)\n \t\t\tm.bins[po]++\n \t\t}\n-\t\tm.store[ch.Address().String()] = ch.Data()\n+\t\tb := make([]byte, len(ch.Data()))\n+\t\tcopy(b, ch.Data())\n+\t\tm.store[ch.Address().String()] = b\n \t\tm.modePut[ch.Address().String()] = mode\n \n \t\t// pin chunks if needed\nReview:"}
{"pred": "Is this necessary? It looks like you are setting the global tracer to nil, which may not be desirable.", "gold": "wut. We can do this at the beginning of tests if we want right? Why are we depending on init?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -42,6 +42,10 @@ import (\n \t\"go.uber.org/yarpc/yarpcerrors\"\n )\n \n+func init() {\n+\topentracing.SetGlobalTracer(nil)\n+}\n+\n func TestHandlerSuccess(t *testing.T) {\n \tmockCtrl := gomock.NewController(t)\n \tdefer mockCtrl.Finish()\nReview:"}
{"pred": "You should add a comment here to explain why you need to lock both the client and server mutexes.", "gold": "Same trick here IMO.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1403,9 +1403,12 @@ func (c *client) processConnect(arg []byte) error {\n \t\t\t\tc.mu.Lock()\n \t\t\t\tacc := c.acc\n \t\t\t\tc.mu.Unlock()\n+\t\t\t\tsrv.mu.Lock()\n \t\t\t\tif acc != nil && acc != srv.gacc {\n+\t\t\t\t\tsrv.mu.Unlock()\n \t\t\t\t\treturn ErrTooManyAccountConnections\n \t\t\t\t}\n+\t\t\t\tsrv.mu.Unlock()\n \t\t\t}\n \t\t\tc.authViolation()\n \t\t\treturn ErrAuthentication\nReview:"}
{"pred": "It looks like the order of the origin assignment has been reversed here. Is this intentional?", "gold": "Should be `@origin = element || origin || POINTER`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -108,10 +108,11 @@ module Selenium\n \n         def initialize(source, duration, x, y, element: nil, origin: nil)\n           super(source)\n+\n           @duration = duration * 1000\n           @x_offset = x\n           @y_offset = y\n-          @origin = element || origin\n+          @origin = origin || POINTER\n         end\n \n         def type\nReview:"}
{"pred": "You should add a check to ensure that either spcName or args is not empty.", "gold": "this example needs a fix?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -50,11 +50,14 @@ func NewUpgradeCStorSPCJob() *cobra.Command {\n \t\tLong:    cstorSPCUpgradeCmdHelpText,\n \t\tExample: `upgrade cstor-spc --spc-name <spc-name>`,\n \t\tRun: func(cmd *cobra.Command, args []string) {\n+\t\t\tutil.CheckErr(options.RunCStorSPCUpgradeChecks(cmd, args), util.Fatal)\n \t\t\toptions.resourceKind = \"storagePoolClaim\"\n-\t\t\tutil.CheckErr(options.RunPreFlightChecks(cmd), util.Fatal)\n-\t\t\tutil.CheckErr(options.RunCStorSPCUpgradeChecks(cmd), util.Fatal)\n-\t\t\tutil.CheckErr(options.InitializeDefaults(cmd), util.Fatal)\n-\t\t\tutil.CheckErr(options.RunCStorSPCUpgrade(cmd), util.Fatal)\n+\t\t\tif options.cstorSPC.spcName != \"\" {\n+\t\t\t\tsingleCstorSPCUpgrade(cmd)\n+\t\t\t}\n+\t\t\tif len(args) != 0 {\n+\t\t\t\tbulkCstorSPCUpgrade(cmd, args)\n+\t\t\t}\n \t\t},\n \t}\n \nReview:"}
{"pred": "Is this the correct function to call here? It looks like we are trying to close the popup, not destroy it.", "gold": "Is it safe to assume this surface is a toplevel?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -248,9 +248,9 @@ static void close(struct roots_view *view) {\n \tstruct wlr_xdg_surface *surface = view->xdg_surface;\n \tstruct wlr_xdg_popup *popup = NULL;\n \twl_list_for_each(popup, &surface->popups, link) {\n-\t\twlr_xdg_surface_send_close(popup->base);\n+\t\twlr_xdg_popup_destroy(popup->base);\n \t}\n-\twlr_xdg_surface_send_close(surface);\n+\twlr_xdg_toplevel_send_close(surface);\n }\n \n static void destroy(struct roots_view *view) {\nReview:"}
{"pred": "This looks good, but it would be nice to have a unit test for this.", "gold": "we don't need that function", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -225,6 +225,16 @@ projCtx pj_ctx_alloc()\n     return new (std::nothrow) projCtx_t(*pj_get_default_ctx());\n }\n \n+/************************************************************************/\n+/*                            pj_ctx_clone()                            */\n+/************************************************************************/\n+\n+projCtx pj_ctx_clone( projCtx ctx )\n+\n+{\n+    return new (std::nothrow) projCtx_t(*ctx);\n+}\n+\n /************************************************************************/\n /*                            pj_ctx_free()                             */\n /************************************************************************/\nReview:"}
{"pred": "This looks good, but it might be worth adding a comment to explain why we need to override the family() method here.", "gold": "we'll also have to think about adding \"Windows Server 2014\" or whatever they come up with later.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -72,6 +72,13 @@ public enum Platform {\n     }\n   },\n \n+  WIN10(\"windows 10\", \"win10\") {\n+    @Override\n+    public Platform family() {\n+      return WINDOWS;\n+    }\n+  },\n+\n   MAC(\"mac\", \"darwin\", \"os x\") {},\n \n   SNOW_LEOPARD(\"snow leopard\", \"os x 10.6\") {\nReview:"}
{"pred": "It would be good to add a Javadoc comment to this method to explain what it does.", "gold": "curious do we have an API to fetch an inactive flow?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -35,6 +35,9 @@ public interface ExecutorLoader {\n   Map<Integer, Pair<ExecutionReference, ExecutableFlow>> fetchActiveFlows()\n       throws ExecutorManagerException;\n \n+  Pair<ExecutionReference, ExecutableFlow> fetchActiveFlowByExecId(int execId)\n+      throws ExecutorManagerException;\n+\n   List<ExecutableFlow> fetchFlowHistory(int skip, int num)\n       throws ExecutorManagerException;\n \nReview:"}
{"pred": "This looks like it could be a bug, why are we skipping over elements with text?", "gold": "This branch is not needed anymore because every `vnode` that passes through `h` in compat or core will have the `$$typeof`-property now .", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -116,10 +116,6 @@ function upgradeToVNodes(arr, offset) {\n \t\tif (Array.isArray(obj)) {\n \t\t\tupgradeToVNodes(obj);\n \t\t}\n-\t\telse if (obj && typeof obj==='object' && !isValidElement(obj) && ((obj.props && obj.type) || obj.text!=null)) {\n-\t\t\tif (obj.text) continue;\n-\t\t\tarr[i] = createElement(obj.type, obj.props, obj.props.children);\n-\t\t}\n \t}\n }\n \nReview:"}
{"pred": "This looks good. It's clear and concise and follows the same pattern as other functions.", "gold": "Did you mean to use `hasAttribute`? You shouldn't. This does not improve performance and it messes with the readability.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,16 @@\n+const { getComposedParent } = axe.commons.dom;\n+\n+function shouldMatchElement(el) {\n+\tif (!el) {\n+\t\treturn true;\n+\t}\n+\tconst ariaHiddenValue = el.getAttribute('aria-hidden')\n+\t\t? el.getAttribute('aria-hidden')\n+\t\t: null;\n+\tif (ariaHiddenValue === null) {\n+\t\treturn shouldMatchElement(getComposedParent(el));\n+\t}\n+\treturn false;\n+}\n+\n+return shouldMatchElement(getComposedParent(node));\nReview:"}
{"pred": "You should add a comment here explaining why you removed the pyqtSignal, QObject imports.", "gold": "Please import modules and not classes (except for Qt stuff).", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -37,13 +37,14 @@ import pytest\n import py.path  # pylint: disable=no-name-in-module\n \n import helpers.stubs as stubsmod\n+from helpers.utils import CallbackChecker\n from qutebrowser.config import config, configdata, configtypes, configexc\n from qutebrowser.utils import objreg, standarddir\n from qutebrowser.browser.webkit import cookies\n from qutebrowser.misc import savemanager, sql\n from qutebrowser.keyinput import modeman\n \n-from PyQt5.QtCore import pyqtSignal, QEvent, QSize, Qt, QObject\n+from PyQt5.QtCore import QEvent, QSize, Qt\n from PyQt5.QtGui import QKeyEvent\n from PyQt5.QtWidgets import QWidget, QHBoxLayout, QVBoxLayout\n from PyQt5.QtNetwork import QNetworkCookieJar\nReview:"}
{"pred": "This looks like a redundant override. Is there a reason why this is being done?", "gold": "Hm... why do we have a \"DummyJavaNode\" in src/main? Looks like, this should have gone into src/test....", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -20,6 +20,11 @@ public class DummyJavaNode extends AbstractJavaNode {\n         super(id);\n     }\n \n+    @Override\n+    public void setImage(String image) {\n+        super.setImage(image);\n+    }\n+\n     @Override\n     public Object jjtAccept(JavaParserVisitor visitor, Object data) {\n         return data;\nReview:"}
{"pred": "This comment is not necessary.", "gold": "This seems meaningless. If we cannot add any info let us remove this.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -14,6 +14,7 @@ See the License for the specific language governing permissions and\n limitations under the License.\n */\n \n+// Package v1alpha1\n package v1alpha1\n \n // CasKey is used for all cas specific annotation keys\nReview:"}
{"pred": "This should be documented in the comments above the function.", "gold": "Can you rename `Ports` to `PortsUnsafe`?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -493,6 +493,14 @@ func (c *Container) GetLabels() map[string]string {\n \treturn c.labels\n }\n \n+// GetPorts gets the ports for a container\n+func (c *Container) GetPorts() []PortBinding {\n+\tc.lock.RLock()\n+\tdefer c.lock.RUnlock()\n+\n+\treturn c.Ports\n+}\n+\n // HealthStatusShouldBeReported returns true if the health check is defined in\n // the task definition\n func (c *Container) HealthStatusShouldBeReported() bool {\nReview:"}
{"pred": "This should be tested to ensure that the signature is correctly generated.", "gold": "This feels like it could be moved out to your first gem!", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,10 @@\n+module ReturnToHelper\n+  def make_return_to(name, path)\n+    sig = OpenSSL::HMAC.digest(\n+      OpenSSL::Digest::SHA256.new,\n+      Rails.application.secrets.secret_key_base,\n+      name + \"$\" + path\n+    )\n+    {name: name, path: path, sig: Base64.urlsafe_encode64(sig)}\n+  end\n+end\nReview:"}
{"pred": "This change should be tested to ensure that the poll() method is working correctly with the new parameter.", "gold": "The expected behaviour for `poll` would be to match what `Deque` does, which is: > Retrieves and removes the head of the queue represented by this deque As such, you shouldn't need the `RequestId` here.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -44,7 +44,7 @@ public abstract class NewSessionQueue implements HasReadyState {\n \n   public abstract boolean offerFirst(HttpRequest request, RequestId requestId);\n \n-  public abstract Optional<HttpRequest> poll();\n+  public abstract Optional<HttpRequest> poll(RequestId requestId);\n \n   public abstract int clear();\n \nReview:"}
{"pred": "This should have a type check for the inputs, to make sure they are both arrays.", "gold": "This is super minor, but it'd be nice if this iterated over an arbitrary number of array inputs.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -7,4 +7,17 @@\n axe.utils.toArray = function (thing) {\n \t'use strict';\n \treturn Array.prototype.slice.call(thing);\n-};\n+};\n+\n+\n+/**\n+ * Creates an array without duplicate values from 2 array inputs\n+ * @param  {Array} arr1 First array\n+ * @param  {Array} arr2 Second array\n+ * @return {Array}\n+ */\n+axe.utils.uniqueArray = (arr1, arr2) => {\n+  return arr1.concat(arr2).filter((elem, pos, arr) => {\n+    return arr.indexOf(elem) === pos;\n+  });\n+};\nReview:"}
{"pred": "Good to see the buffer size is now being checked.", "gold": "What is the problem here? The commit message has strange wording \"readlink is defined with restrict pointers\": do you mean \"restricted\"? Is that a well-defined language term? I'm not sure what it means.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1676,9 +1676,10 @@ _tmain(int argc, TCHAR *targv[])\n     }\n # ifdef UNIX\n     /* i#1676: detect whether under gdb */\n-    _snprintf(buf, BUFFER_SIZE_ELEMENTS(buf), \"/proc/%d/exe\", getppid());\n-    NULL_TERMINATE_BUFFER(buf);\n-    i = readlink(buf, buf, BUFFER_SIZE_ELEMENTS(buf));\n+    char path_buf[MAXIMUM_PATH];\n+    _snprintf(path_buf, BUFFER_SIZE_ELEMENTS(path_buf), \"/proc/%d/exe\", getppid());\n+    NULL_TERMINATE_BUFFER(path_buf);\n+    i = readlink(path_buf, buf, BUFFER_SIZE_ELEMENTS(buf));\n     if (i > 0) {\n         if (i < BUFFER_SIZE_ELEMENTS(buf))\n             buf[i] = '\\0';\nReview:"}
{"pred": "We should add a comment here to explain why we are importing ImmutableSet.", "gold": "Why are we not wrapping here?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -17,6 +17,7 @@ package com.google.api.codegen.util.ruby;\n import com.google.api.codegen.util.Name;\n import com.google.api.codegen.util.NameFormatter;\n import com.google.api.codegen.util.NamePath;\n+import com.google.common.collect.ImmutableSet;\n \n /**\n  * The NameFormatter for Ruby.\nReview:"}
{"pred": "It looks like you have removed the use statement for Parameter, but you still have it in the type hint. You should update the type hint to be nullable.", "gold": "I though that all data objects are being unified in the fashion where all default values are initialized in constructor, are not they?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -2,12 +2,10 @@\n \n namespace Shopsys\\FrameworkBundle\\Model\\Product\\Filter;\n \n-use Shopsys\\FrameworkBundle\\Model\\Product\\Parameter\\Parameter;\n-\n class ParameterFilterData\n {\n     /**\n-     * @var \\Shopsys\\FrameworkBundle\\Model\\Product\\Parameter\\Parameter\n+     * @var \\Shopsys\\FrameworkBundle\\Model\\Product\\Parameter\\Parameter|null\n      */\n     public $parameter;\n \nReview:"}
{"pred": "Looks like the hashes have been updated, good job!", "gold": "Does this file actually need to be committed to git? Having to run `make generate` is rather tedious on each PR and it conflicts easily.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -22,16 +22,16 @@ var sourceHashes = map[string]string{\n \t\"libflux/flux-core/src/ast/flatbuffers/mod.rs\":                                                \"00c75dc1da14487953a4a017616fb8a237fe3da437c876f1328532dd7906f015\",\n \t\"libflux/flux-core/src/ast/flatbuffers/monotype.rs\":                                           \"4e82aae8e7edb8e230302241fe702ece9ae84fc708003c24709c2ea944cfaae8\",\n \t\"libflux/flux-core/src/ast/flatbuffers/tests.rs\":                                              \"ea85b78049f0c3d79daedcf9e171ccb00d0a596d1a643aa218590c99e6b160bc\",\n-\t\"libflux/flux-core/src/ast/mod.rs\":                                                            \"676e22d24cd7a97525688ed391a980d08b4bee40c5b5067d187f3ae6d66210ca\",\n+\t\"libflux/flux-core/src/ast/mod.rs\":                                                            \"29b25b75a01cf1e1ac2b52d99b91986cec32011dc55af1ffd7f145838fce858d\",\n \t\"libflux/flux-core/src/ast/tests.rs\":                                                          \"bc7f77d569d8bbd4b9d00653f48bacd47eed46f53024dce836d3c8bbb6a80555\",\n \t\"libflux/flux-core/src/ast/walk/mod.rs\":                                                       \"e8a03023d7426bcf6dfdb1a61ac3263f5cf9194a595a1584dff7c899d06562f1\",\n \t\"libflux/flux-core/src/ast/walk/tests.rs\":                                                     \"f7b2d7dd5643bb795a86c04b6979b136b0de46b52b213caff094aed6d204a05d\",\n \t\"libflux/flux-core/src/formatter/mod.rs\":                                                      \"945736a4ad87adb6a3f359b6f2da6e5492b3cb0efd282e277303e2acae137763\",\n \t\"libflux/flux-core/src/formatter/tests.rs\":                                                    \"b0a10998a65fc4b54a8f68b3a0ed186d8548ba3d7638f911eb188d2ce485206f\",\n \t\"libflux/flux-core/src/lib.rs\":                                                                \"d19b7054e07f234c107d457030a0031374c123fe14a84a5b8e35537d138bac7a\",\n-\t\"libflux/flux-core/src/parser/mod.rs\":                                                         \"e3f11fe29f47271b5c04accc2d7efa35e1dc62c6de036bf0cc0cccda5e4742e8\",\n+\t\"libflux/flux-core/src/parser/mod.rs\":                                                         \"daf24b2c439f4c7a6f138e2b25064a205aee73bb6cffc898df22dd0c962ca5df\",\n \t\"libflux/flux-core/src/parser/strconv.rs\":                                                     \"748c82f6efc2eafaafb872db5b4185ce29aafa8f03ba02c4b84f4a9614e832d2\",\n-\t\"libflux/flux-core/src/parser/tests.rs\":                                                       \"e3a7c9222f90323a7ea9b319bd84f96f66c6f115af6d199a0da332c894713ae4\",\n+\t\"libflux/flux-core/src/parser/tests.rs\":                                                       \"43a1e5d3de85d76da2107544e417f583a1f66c20910286285b9645a309c42425\",\n \t\"libflux/flux-core/src/scanner/mod.rs\":                                                        \"2e15c9e0a73d0936d2eaeec030b636786db6dbe7aab673045de3a3e815c49f8a\",\n \t\"libflux/flux-core/src/scanner/scanner.rl\":                                                    \"530c062363b66daded3c521af44111b99ffee0eeb2a12ccffa8b8f349002d852\",\n \t\"libflux/flux-core/src/scanner/scanner_generated.rs\":                                          \"d65dcc216ccbb88d8f2e261a994ba2789075e434cb7a0f5e39e390bee2821e5b\",\nReview:"}
{"pred": "This code block is removed, so it should be checked if it is still needed.", "gold": "We don't need this anymore, as Google's library handles various auth mechanisms for us. We'll be less explicit about why we're failing but we gain support for several authentication methods- swings and roundabouts!", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -440,18 +440,6 @@ func parseConfig(loc location.Location, opts options.Options) (interface{}, erro\n \t\t\tcfg.ProjectID = os.Getenv(\"GOOGLE_PROJECT_ID\")\n \t\t}\n \n-\t\tif cfg.JSONKeyPath == \"\" {\n-\t\t\tif path := os.Getenv(\"GOOGLE_APPLICATION_CREDENTIALS\"); path != \"\" {\n-\t\t\t\t// Check read access\n-\t\t\t\tif _, err := ioutil.ReadFile(path); err != nil {\n-\t\t\t\t\treturn nil, errors.Fatalf(\"Failed to read google credential from file %v: %v\", path, err)\n-\t\t\t\t}\n-\t\t\t\tcfg.JSONKeyPath = path\n-\t\t\t} else {\n-\t\t\t\treturn nil, errors.Fatal(\"No credential file path is set\")\n-\t\t\t}\n-\t\t}\n-\n \t\tif err := opts.Apply(loc.Scheme, &cfg); err != nil {\n \t\t\treturn nil, err\n \t\t}\nReview:"}
{"pred": "The default values should be documented in the comments.", "gold": "No need to speficy attribute here. Moreover in yaml it is default to use lowercase names.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,11 +1,12 @@\n package plugin\n \n type Config struct {\n-\tSocketPath string        `yaml:\"path\"`\n-\tVolumes    VolumesConfig `yaml:\"volume\"`\n+\tSocketDir string                       `yaml:\"socket_dir\" default:\"/run/docker/plugins\"`\n+\tVolumes   VolumesConfig                `yaml:\"volume\"`\n+\tGPUs      map[string]map[string]string `yaml:\"GPUs\"`\n }\n \n type VolumesConfig struct {\n-\tRoot    string\n+\tRoot    string `yaml:\"root\" default:\"/var/lib/docker-volumes\"`\n \tVolumes map[string]map[string]string\n }\nReview:"}
{"pred": "Good to add the using statements for LINQ and Task.", "gold": "In general I'm a trying to understand the reason behind this PR. Looks like if a blob (name) already exists we check if the contents are identical? In what scenarios this is not the case? When we want to publish a package/asset that has changed but still we want to use the same version?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -8,10 +8,12 @@ using System;\n using System.Collections.Generic;\n using System.Globalization;\n using System.IO;\n+using System.Linq;\n using System.Net;\n using System.Net.Http;\n using System.Text;\n using System.Threading;\n+using System.Threading.Tasks;\n using Task = System.Threading.Tasks.Task;\n \n namespace Microsoft.DotNet.Build.CloudTestTasks\nReview:"}
{"pred": "Good to add a user agent here, but you should also consider adding a timeout to the request.", "gold": "Can rename `req` to be `opener`, since that is the object, and it wraps `req` internally?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -151,7 +151,9 @@ class BlacklistRuleBook(bre.BaseRuleBook):\n             lists: first one is IP addresses,\n             second one is network blocks\n         \"\"\"\n-        data = urllib2.urlopen(url).read()\n+        req = urllib2.build_opener()\n+        req.addheaders = [('User-Agent', 'Forseti blacklist rules engine agent')]\n+        data = req.open(url).read()\n         ip_addresses = re.findall(r'^[0-9]+(?:\\.[0-9]+){3}$', data, re.M)\n         netblocks = re.findall(r'^[0-9]+(?:\\.[0-9]+){0,3}/[0-9]{1,2}$',\n                                data, re.M)\nReview:"}
{"pred": "Should this be a separate if-block? It's not related to the linePrefix logic.", "gold": "@MichaelDCurran, thoughts on adding a breakpoint format field attribute? It seems almost app specific, but I guess it does seem odd abusing line-prefix. Is there any more generic concept here?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1405,6 +1405,8 @@ def getFormatFieldSpeech(attrs,attrsCache=None,formatConfig=None,unit=None,extra\n \t\tlinePrefix=attrs.get(\"line-prefix\")\n \t\tif linePrefix:\n \t\t\ttextList.append(linePrefix)\n+\tbreakpoint=attrs.get(\"breakpoint\")\n+\tif breakpoint: textList.append(breakpoint)\n \tif attrsCache is not None:\n \t\tattrsCache.clear()\n \t\tattrsCache.update(attrs)\nReview:"}
{"pred": "We should probably add a warning here that this is deprecated for W3C mode.", "gold": "This would return a tuple of two dictionaries. You need to combine them and return a dictionary", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -539,7 +539,10 @@ class WebElement(object):\n     @property\n     def rect(self):\n         \"\"\"A dictionary with the size and location of the element.\"\"\"\n-        return self._execute(Command.GET_ELEMENT_RECT)['value']\n+        if self._w3c:\n+            return self._execute(Command.GET_ELEMENT_RECT)['value']\n+        else:\n+            return self.size, self.location\n \n     @property\n     def screenshot_as_base64(self):\nReview:"}
{"pred": "It looks like you are adding new dependencies here. Make sure to update the documentation and tests accordingly.", "gold": "What do you think of moving the example to the help text of the prompt? and the prompt itself can be \"What is your application's GitHub repository URL?\"", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -7,10 +7,14 @@ import (\n \t\"errors\"\n \t\"fmt\"\n \n+\t\"github.com/aws/amazon-ecs-cli-v2/internal/pkg/archer\"\n+\t\"github.com/aws/amazon-ecs-cli-v2/internal/pkg/manifest\"\n+\t\"github.com/aws/amazon-ecs-cli-v2/internal/pkg/store/secretsmanager\"\n \t\"github.com/aws/amazon-ecs-cli-v2/internal/pkg/store/ssm\"\n \t\"github.com/aws/amazon-ecs-cli-v2/internal/pkg/term/color\"\n \t\"github.com/aws/amazon-ecs-cli-v2/internal/pkg/term/log\"\n \t\"github.com/aws/amazon-ecs-cli-v2/internal/pkg/term/prompt\"\n+\t\"github.com/aws/amazon-ecs-cli-v2/internal/pkg/workspace\"\n \n \t\"github.com/spf13/cobra\"\n )\nReview:"}
{"pred": "It's good to see the addition of the timestamp to the event, but it's worth considering if this should be a parameter to the addEvent() method.", "gold": "Break out tests for events into their own tests rather than placing them in other ones. That makes it easier for us to figure out where problems lie and to do a TDD-driven implementation over new APIs.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -58,9 +58,12 @@ public class TracerTest {\n   public void shouldBeAbleToCreateATracer() {\n     List<SpanData> allSpans = new ArrayList<>();\n     Tracer tracer = createTracer(allSpans);\n+    long timeStamp = 1593493828L;\n \n     try (Span span = tracer.getCurrentContext().createSpan(\"parent\")) {\n       span.setAttribute(\"cheese\", \"gouda\");\n+      span.addEvent(\"Grating cheese\");\n+      span.addEvent(\"Melting cheese\", timeStamp);\n       span.setStatus(Status.NOT_FOUND);\n     }\n \nReview:"}
{"pred": "This should be checked for the length of the string before the comparison, to avoid potential buffer overflows.", "gold": "Nice use of std::distance. I'm a bit worried about first += 9 though.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -266,7 +266,7 @@ bool parse_it(Iterator &first, Iterator last, RDKit::RWMol &mol) {\n       } else {\n         if (!parse_atom_labels(first, last, mol)) return false;\n       }\n-    } else if ((first + 9) < last &&\n+    } else if (std::distance(first, last) > 9 &&\n                std::string(first, first + 9) == \"atomProp:\") {\n       first += 9;\n       if (!parse_atom_props(first, last, mol)) return false;\nReview:"}
{"pred": "Should we add a comment here to explain why we are adding the new label?", "gold": "Shouldn't this be `app.kubernetes.io/managed-by` as prometheus-operator manages this resource, but this resource isn't a part of prometheus-operator?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -578,8 +578,9 @@ func (c *Operator) syncNodeEndpoints(ctx context.Context) error {\n \t\tObjectMeta: metav1.ObjectMeta{\n \t\t\tName: c.kubeletObjectName,\n \t\t\tLabels: c.config.Labels.Merge(map[string]string{\n-\t\t\t\t\"k8s-app\":                \"kubelet\",\n-\t\t\t\t\"app.kubernetes.io/name\": \"kubelet\",\n+\t\t\t\t\"k8s-app\":                   \"kubelet\",\n+\t\t\t\t\"app.kubernetes.io/name\":    \"kubelet\",\n+\t\t\t\t\"app.kubernetes.io/part-of\": \"prometheus-operator\",\n \t\t\t}),\n \t\t},\n \t\tSubsets: []v1.EndpointSubset{\nReview:"}
{"pred": "This should be checked for null before the comparison.", "gold": "As long as we're being extra-vigilant about NREs, should we check that `httpMethod` and `requestUri` are not null?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -41,8 +41,9 @@ namespace Datadog.Trace.ClrProfiler\n \n                 if (parent != null &&\n                     parent.Type == SpanTypes.Http &&\n-                    parent.GetTag(Tags.HttpMethod).Equals(httpMethod, StringComparison.OrdinalIgnoreCase) &&\n-                    parent.GetTag(Tags.HttpUrl).Equals(UriHelpers.CleanUri(requestUri, removeScheme: false, tryRemoveIds: false), StringComparison.OrdinalIgnoreCase))\n+                    parent.GetTag(Tags.InstrumentationName) != null &&\n+                    httpMethod.Equals(parent.GetTag(Tags.HttpMethod), StringComparison.OrdinalIgnoreCase) &&\n+                    UriHelpers.CleanUri(requestUri, removeScheme: false, tryRemoveIds: false).Equals(parent.GetTag(Tags.HttpUrl), StringComparison.OrdinalIgnoreCase))\n                 {\n                     // we are already instrumenting this,\n                     // don't instrument nested methods that belong to the same stacktrace\nReview:"}
{"pred": "It is good to see the addition of the XRC20 command. It would be great to add some tests for this command as well.", "gold": "No need to have `xrc20` alias", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -19,6 +19,7 @@ import (\n \t\"github.com/iotexproject/iotex-core/cli/ioctl/cmd/node\"\n \t\"github.com/iotexproject/iotex-core/cli/ioctl/cmd/update\"\n \t\"github.com/iotexproject/iotex-core/cli/ioctl/cmd/version\"\n+\txrc20 \"github.com/iotexproject/iotex-core/cli/ioctl/cmd/xrc20\"\n )\n \n // RootCmd represents the base command when called without any subcommands\nReview:"}
{"pred": "This should be documented better, what is the purpose of this function?", "gold": "the naming convention I'm been adopting if `_type` for instances of these classes. So maybe `context_config_type` is a better name for this fn", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -172,6 +172,19 @@ def define_environment_cls(pipeline_def):\n     )\n \n \n+def context_cls_inst(pipeline_def):\n+    check.inst_param(pipeline_def, 'pipeline_def', PipelineDefinition)\n+    pipeline_name = camelcase(pipeline_def.name)\n+    return SystemNamedDict(\n+        name='{pipeline_name}.Context'.format(pipeline_name=pipeline_name),\n+        fields={\n+            'context': define_maybe_optional_selector_field(\n+                define_context_context_cls(pipeline_name, pipeline_def.context_definitions)\n+            )\n+        },\n+    ).inst()\n+\n+\n def define_expectations_config_cls(name):\n     check.str_param(name, 'name')\n \nReview:"}
{"pred": "Should this be initialized to false?", "gold": "Don't call it GPU mining, call it `externalMining`, here and throughout.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -54,6 +54,7 @@ public class BlockMiner<C, M extends AbstractBlockCreator<C>> implements Runnabl\n   private final ProtocolSchedule<C> protocolSchedule;\n   private final Subscribers<MinedBlockObserver> observers;\n   private final AbstractBlockScheduler scheduler;\n+  private Boolean gpuMining = false;\n \n   public BlockMiner(\n       final Function<BlockHeader, M> blockCreatorFactory,\nReview:"}
{"pred": "You should add a comment here to explain why you are adding these new parameters.", "gold": "`within this with` typo, should be `within this width`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -252,6 +252,15 @@ return [\n     | folder - a folder prefix for storing all generated files inside.\n     | path   - the public path relative to the application base URL,\n     |          or you can specify a full URL path.\n+    |\n+    | For the 'media' resource you can also specify:\n+    |\n+    | imageMaxWidth     - Resize all media manager image uploads to be\n+    |                     within this with (in pixels, 0 = ignore)\n+    | imageMaxHeight    - Resize all media manager image uploads to be\n+    |                     within this height (in pixels, 0 = ignore)\n+    | imageQuality      - Set this quality to all media manager image uploads\n+    |                     (1-100)\n     */\n \n     'storage' => [\nReview:"}
{"pred": "The openapi-gen annotations are a good idea, but you should also consider adding a comment explaining why they are needed.", "gold": "how come this is false?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -22,10 +22,12 @@ import (\n )\n \n // Prometheus defines a Prometheus deployment.\n+// +k8s:openapi-gen=true\n type Prometheus struct {\n \tmetav1.TypeMeta `json:\",inline\"`\n \t// Standard object\u2019s metadata. More info:\n \t// https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#metadata\n+\t// +k8s:openapi-gen=false\n \tmetav1.ObjectMeta `json:\"metadata,omitempty\"`\n \t// Specification of the desired behavior of the Prometheus cluster. More info:\n \t// https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#spec-and-status\nReview:"}
{"pred": "This looks good, but it would be nice to have some unit tests to ensure the types are being checked correctly.", "gold": "How about `Object.prototype.toString`? Or using the `typeof` operator?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -24,6 +24,19 @@ function node_require(module) {\n     return require(module);\n }\n \n+function typeOf(obj) {\n+    return ({}).toString.call(obj).match(/\\s(\\w+)/)[1].toLowerCase();\n+}\n+\n+function checkTypes(args, types) {\n+    args = [].slice.call(args);\n+    for (var i = 0; i < types.length; ++i) {\n+        if (typeOf(args[i]) !== types[i]) {\n+            throw new TypeError('param ' + i + ' must be of type ' + types[i]);\n+        }\n+    }\n+}\n+\n const performFetch = typeof fetch === 'undefined' ? node_require('node-fetch') : fetch;\n \n const url_parse = require('url-parse');\nReview:"}
{"pred": "It is good that you added a context here, but you should also add a cancel function to the struct.", "gold": "I know @jzila suggested this, but I disagree: you're really not supposed to save a context in a struct. Can you get by with just saving the `Done()` channel instead? The `ctx` should continue to be passed around explicitly.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -83,6 +83,7 @@ type ReporterKBPKI struct {\n \tnotifySyncBuffer chan *keybase1.FSPathSyncStatus\n \tsuppressCh       chan time.Duration\n \tcanceler         func()\n+\tctx              context.Context\n }\n \n // NewReporterKBPKI creates a new ReporterKBPKI.\nReview:"}
{"pred": "This looks like a bug fix, so it should be mentioned in the code review.", "gold": "This check isn't right though.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -12,12 +12,7 @@ namespace Microsoft.AspNet.Server.Kestrel.Networking\n         {\n             IsWindows = PlatformApis.IsWindows;\n \n-            var isDarwinMono =\n-#if DNX451\n-                IsWindows ? false : PlatformApis.IsDarwin;\n-#else\n-                false;\n-#endif\n+            var isDarwinMono = !IsWindows && PlatformApis.IsDarwin;\n \n             if (isDarwinMono)\n             {\nReview:"}
{"pred": "It would be good to add a comment here explaining what this method does and why it is needed.", "gold": "maybe `toolkitVersion` instead? It doesn't necessarily have to be called that in the generated code, but in the view model classes, I think it makes it clearer that it is the version of toolkit itself.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -96,6 +96,8 @@ public abstract class DynamicLangXApiView implements ViewModel {\n     return missingDefaultServiceAddress() || missingDefaultServiceScopes();\n   }\n \n+  public abstract String codeGenVersion();\n+\n   @Override\n   public String resourceRoot() {\n     return SnippetSetRunner.SNIPPET_RESOURCE_ROOT;\nReview:"}
{"pred": "You can remove the setFileState() call here, since it's not used anymore.", "gold": "the response data was added intentionally in #612, i think we could keep the `setFileState` stuff here as a special case, at least for now ", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -230,15 +230,13 @@ module.exports = class XHRUpload extends Plugin {\n           const body = opts.getResponseData(xhr.responseText, xhr)\n           const uploadURL = body[opts.responseUrlFieldName]\n \n-          const response = {\n+          const uploadResp = {\n             status: ev.target.status,\n             body,\n             uploadURL\n           }\n \n-          this.uppy.setFileState(file.id, { response })\n-\n-          this.uppy.emit('upload-success', file, body, uploadURL)\n+          this.uppy.emit('upload-success', file, uploadResp)\n \n           if (uploadURL) {\n             this.uppy.log(`Download ${file.name} from ${file.uploadURL}`)\nReview:"}
{"pred": "This should be checked for a negative value, as time.Until() can return a negative value.", "gold": "This isn't really easy to read.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -134,7 +134,7 @@ func (s *stream) Read(p []byte) (int, error) {\n \t\t\t} else {\n \t\t\t\tselect {\n \t\t\t\tcase <-s.readChan:\n-\t\t\t\tcase <-time.After(deadline.Sub(time.Now())):\n+\t\t\t\tcase <-time.After(time.Until(deadline)):\n \t\t\t\t}\n \t\t\t}\n \t\t\ts.mutex.Lock()\nReview:"}
{"pred": "You should check if the error is nil before logging it.", "gold": "This line changed due to go formatting. Format was not there earlier.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -123,7 +123,7 @@ func (c *CStorVolumeReplicaController) cVREventHandler(operation common.QueueOpe\n \n \t\terr := volumereplica.DeleteVolume(fullVolName)\n \t\tif err != nil {\n-\t\t\tglog.Errorf(\"Error in deleting volume %q: %s\", cVR.ObjectMeta.Name,err)\n+\t\t\tglog.Errorf(\"Error in deleting volume %q: %s\", cVR.ObjectMeta.Name, err)\n \t\t\tc.recorder.Event(cVR, corev1.EventTypeWarning, string(common.FailureDestroy), string(common.MessageResourceFailDestroy))\n \t\t\treturn string(apis.CVRStatusDeletionFailed), err\n \t\t}\nReview:"}
{"pred": "Should this be initialized to an empty string?", "gold": "The name \"Without\" in code is a little nebulous. Maybe something more descriptive like TrimPrefix or StripPrefix or WithoutPathPrefix or something like that. (Thoughts?)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -28,13 +28,13 @@ type staticUpstream struct {\n \t\tPath     string\n \t\tInterval time.Duration\n \t}\n+\tWithout string\n }\n \n // NewStaticUpstreams parses the configuration input and sets up\n // static upstreams for the proxy middleware.\n func NewStaticUpstreams(c parse.Dispenser) ([]Upstream, error) {\n \tvar upstreams []Upstream\n-\n \tfor c.Next() {\n \t\tupstream := &staticUpstream{\n \t\t\tfrom:        \"\",\nReview:"}
{"pred": "Good addition to the test coverage.", "gold": "is this test in the move tests? I see what you mean then - it works, but I wonder if we won't lose track that it's being tested here.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -254,6 +254,12 @@ public class MoveIT {\n         linkDataset.then().assertThat()\n                 .statusCode(OK.getStatusCode());\n \n+        // A dataset cannot be linked to the same dataverse again.\n+        Response tryToLinkAgain = UtilIT.linkDataset(datasetPid, dataverse2Alias, superuserApiToken);\n+        tryToLinkAgain.prettyPrint();\n+        tryToLinkAgain.then().assertThat()\n+                .statusCode(FORBIDDEN.getStatusCode());\n+\n         Response getLinksBefore = UtilIT.getDatasetLinks(datasetPid, superuserApiToken);\n         getLinksBefore.prettyPrint();\n         getLinksBefore.then().assertThat()\nReview:"}
{"pred": "The tags field should be renamed to tags, and the securityGroups field should be added.", "gold": "I'm not sure if this wanted to be `json:\"tags\"` (which I'd set in my PR) or `json:\"tag\"` that someone elses PR had set. Given that the rest of the fields had their JSON field name set to the same as the struct field name, I opted for `tags`.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -368,5 +368,8 @@ type Instance struct {\n \tEBSOptimized *bool `json:\"ebsOptimized\"`\n \n \t// The tags associated with the instance.\n-\tTags map[string]string `json:\"tag\"`\n+\tTags map[string]string `json:\"tags\"`\n+\n+\t// The security groups associated with the instance.\n+\tSecurityGroups map[string]string `json:\"securityGroups\"`\n }\nReview:"}
{"pred": "This scope should be tested to ensure it works as expected.", "gold": "since the logic here and in `Proposal` is exactly the same, do you think it makes sense for us to include it elsewhere? I am not opposed to duplicated code when it makes sense, but the reason I first identified this was that I was looking for code in NCR::WorkOrder that was not specific to Work Orders. Seems like fiscal year logic might be helpful for reporting for other clients. In that case, we'd want this scope on those client data classes as well. Might be wrong to include this in the FiscalYear mixin, but it does seem like it should be outside of Proposal and WorkOrder. Does that make sense?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -47,6 +47,11 @@ module Ncr\n       message: \"must be three letters or numbers\"\n     }, allow_blank: true\n \n+    scope :for_fiscal_year, lambda { |year|\n+      range = self.class.range_for_fiscal_year(year)\n+      where(created_at: range[:start_time]...range[:end_time])\n+    }\n+\n     def self.all_system_approver_emails\n       [\n         self.ba61_tier1_budget_mailbox,\nReview:"}
{"pred": "You should consider adding a check to make sure the connection is not already closed before attempting to reconnect.", "gold": "there is no static method as a go between -- how does this work?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -42,6 +42,11 @@ class InfluxWriterSubscriber(object):\n         self.time = 0\n \n \n+    def on_connection_closed(self, connection, reply_code, reply_text):\n+        self.log.info('RabbitMQ connection got closed!')\n+        self.connection.add_timeout(5, self.connect_to_rabbitmq)\n+\n+\n     @staticmethod\n     def static_callback(ch, method, properties, body, obj):\n         return obj.callback(ch, method, properties, body)\nReview:"}
{"pred": "You should add a comment here to explain what this class does.", "gold": "Can you please change the name of this class to be something else?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,8 @@\n+# frozen_string_literal: true\n+# encoding: utf-8\n+\n+class StringifiedSymbol\n+  include Mongoid::Document\n+  store_in collection: \"stringified_symbols\", client: :other\n+  field :stringified_symbol, type: StringifiedSymbol\n+end\nReview:"}
{"pred": "It looks like the coma_separator argument is not used in the function. Is this intentional?", "gold": "I think we might prefer generalizing the interface rather than creating an exception. Current design of `h2o_next_token` assumes the input to be a comma-separated list, and allows the caller to specify a different separator when parsing a nested list. As I understand, what we are trying to attain in this PR is to have a way of parsing a flat list of semicolon-separated list. Assuming that is the case, I think it would be better to change the API of the function to accept two separators (i.e. inner and outer), where for our existing use-cases `outer` would be `,`.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -403,7 +403,7 @@ size_t h2o_strstr(const char *haysack, size_t haysack_len, const char *needle, s\n }\n \n /* note: returns a zero-width match as well */\n-const char *h2o_next_token(h2o_iovec_t *iter, int separator, size_t *element_len, h2o_iovec_t *value)\n+const char *h2o_next_token(h2o_iovec_t *iter, int separator, size_t *element_len, h2o_iovec_t *value, int coma_separator)\n {\n     const char *cur = iter->base, *end = iter->base + iter->len, *token_start, *token_end;\n \nReview:"}
{"pred": "Is there a reason for changing from LruCacheWithRecycling to LruCache? Is recycling no longer needed?", "gold": "why not recycling? I Lru cache now recycling?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -43,8 +43,8 @@ namespace Nethermind.Blockchain\n     {\n         private const long LowestInsertedBodyNumberDbEntryAddress = 0; \n         private const int CacheSize = 64;\n-        private readonly ICache<Keccak, Block> _blockCache = new LruCacheWithRecycling<Keccak, Block>(CacheSize, CacheSize, \"blocks\");\n-        private readonly ICache<Keccak, BlockHeader> _headerCache = new LruCacheWithRecycling<Keccak, BlockHeader>(CacheSize, CacheSize, \"headers\");\n+        private readonly ICache<Keccak, Block> _blockCache = new LruCache<Keccak, Block>(CacheSize, CacheSize, \"blocks\");\n+        private readonly ICache<Keccak, BlockHeader> _headerCache = new LruCache<Keccak, BlockHeader>(CacheSize, CacheSize, \"headers\");\n \n         private const int BestKnownSearchLimit = 256_000_000;\n \nReview:"}
{"pred": "This should probably be an error, not just a warning.", "gold": "Why it is now called `PaymentVersionV3`?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -69,7 +69,7 @@ func (consumer *createConsumer) Consume(requestPtr interface{}) (response interf\n \tissuerID := consumer.peerID\n \tif request.ConsumerInfo != nil {\n \t\tissuerID = request.ConsumerInfo.IssuerID\n-\t\tif request.ConsumerInfo.PaymentVersion == PaymentVersionV2 {\n+\t\tif request.ConsumerInfo.PaymentVersion == PaymentVersionV3 {\n \t\t\tindicateNewVersion = true\n \t\t}\n \t} else {\nReview:"}
{"pred": "The log level should be set to something more appropriate than 4, as this is a critical operation.", "gold": "changed for debug purpose?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -165,7 +165,7 @@ func (dc *DownstreamController) syncSecret() {\n \t\t\t}\n \n \t\t\tnodes := dc.lc.SecretNodes(secret.Namespace, secret.Name)\n-\t\t\tklog.Infof(\"there are %d nodes need to sync secret, operation: %s\", len(nodes), e.Type)\n+\t\t\tklog.V(4).Infof(\"there are %d nodes need to sync secret, operation: %s\", len(nodes), e.Type)\n \t\t\tfor _, n := range nodes {\n \t\t\t\tmsg := model.NewMessage(\"\")\n \t\t\t\tmsg.SetResourceVersion(secret.ResourceVersion)\nReview:"}
{"pred": "This looks good. It's good to see that the parent provider is being set in the exporter.", "gold": "@cijothomas I needed a way to set the Exporter.ParentProvider when the Processor's gets set. Internal to SDK though.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -46,6 +46,13 @@ namespace OpenTelemetry\n         /// <inheritdoc />\n         public abstract override void OnEnd(T data);\n \n+        internal override void SetParentProvider(BaseProvider parentProvider)\n+        {\n+            base.SetParentProvider(parentProvider);\n+\n+            this.exporter.ParentProvider = parentProvider;\n+        }\n+\n         /// <inheritdoc />\n         protected override bool OnShutdown(int timeoutMilliseconds)\n         {\nReview:"}
{"pred": "The new parameter should be documented and have a default value.", "gold": "Talking through this scenario with @srividyacb and she's wondering if there should also be a check of `(from_trunk && node_based_graph.GetEdgeData(eid).flags.road_classification.IsLinkClass())` as highways with trunk classifications can also have this scenario.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -31,9 +31,13 @@ inline extractor::RoadClassification roadClass(const ConnectedRoad &road,\n     return graph.GetEdgeData(road.eid).flags.road_classification;\n }\n \n-inline bool isRampClass(EdgeID eid, const util::NodeBasedDynamicGraph &node_based_graph)\n+inline bool isRampClass(EdgeID eid,\n+                        const util::NodeBasedDynamicGraph &node_based_graph,\n+                        bool from_motorway = true)\n {\n-    return node_based_graph.GetEdgeData(eid).flags.road_classification.IsRampClass();\n+    return node_based_graph.GetEdgeData(eid).flags.road_classification.IsRampClass() ||\n+           (from_motorway &&\n+            node_based_graph.GetEdgeData(eid).flags.road_classification.IsLinkClass());\n }\n \n } // namespace\nReview:"}
{"pred": "Is this the right approach? Should we be setting the master certname here instead?", "gold": "where does `master_certname` come from?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -13,7 +13,7 @@ module Beaker\n           :q_verify_packages => ENV['q_verify_packages'] || 'y',\n           :q_puppet_symlinks_install => 'y',\n           :q_puppetagent_certname => host,\n-          :q_puppetagent_server => master,\n+          :q_puppetagent_server => master_certname,\n \n           # Disable database, console, and master by default\n           # This will be overridden by other blocks being merged in.\nReview:"}
{"pred": "Great addition!", "gold": "The line breaking is unnecessary.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,5 +1,7 @@\n from .resnet import ResNet, make_res_layer\n from .resnext import ResNeXt\n from .ssd_vgg import SSDVGG\n+from .hrnet import HRNet\n \n-__all__ = ['ResNet', 'make_res_layer', 'ResNeXt', 'SSDVGG']\n+__all__ = ['ResNet', 'make_res_layer', 'ResNeXt', 'SSDVGG',\n+           'HRNet']\nReview:"}
{"pred": "Is this the expected behavior? It looks like the original code was splitting on tabs and commas, but this code only splits on tabs.", "gold": "why not enable split by space here ?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -28,7 +28,7 @@ void DatasetLoader::SetHeader(const char* filename) {\n     // get column names\n     if (io_config_.has_header) {\n       std::string first_line = text_reader.first_line();\n-      feature_names_ = Common::Split(first_line.c_str(), \"\\t ,\");\n+      feature_names_ = Common::Split(first_line.c_str(), \"\\t,\");\n     }\n \n     // load label idx first\nReview:"}
{"pred": "Should this be an else if instead of an or?", "gold": "Shouldn't the operator be && ?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1076,7 +1076,8 @@ fpga_result mmio_error(struct RASCommandLine *rasCmdLine)\n \t\treturn result;\n \t}\n \n-\tif(value != FPGA_INTEGRATED_DEVICEID) {\n+\tif( (value != FPGA_INTEGRATED_DEVICEID) ||\n+\t\t(value != FPGA_DISCRETE_DEVICEID) ) {\n \t\tFPGA_ERR(\"Failed  to read Device id\");\n \t\treturn FPGA_NOT_SUPPORTED;\n \t}\nReview:"}
{"pred": "This should probably be refactored into a separate class for snapshotting, as this is a separate concern from the other Vagrant operations.", "gold": "My best guess is that you want to use host.name in these parts to get the name of the host ?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -161,6 +161,17 @@ module Beaker\n       FileUtils.rm_rf(@vagrant_path)\n     end\n \n+    #snapshotting depends on https://github.com/scalefactory/vagrant-multiprovider-snap\n+    def take_snapshot(host,snapshot_name)\n+      @logger.debug \"Creating snapshot of #{host}\"\n+      vagrant_cmd(\"snap take #{host} --name=#{snapshot_name}\")\n+    end\n+\n+    def restore_snapshot(host,snapshot_name)\n+      @logger.debug \"Restoring snapshot of #{host}\"\n+      vagrant_cmd(\"snap rollback #{host} --name=#{snapshot_name}\")\n+    end\n+\n     def vagrant_cmd(args)\n       Dir.chdir(@vagrant_path) do\n         exit_status = 1\nReview:"}
{"pred": "This looks like it was removed without a reason. Can you confirm why this was removed?", "gold": "IMO this edge case handling could remain here, just instead of overwriting the `n.nodeType`, the `makeEdgeType` method of `n` should be called, so `n.nodeType = nodeTypeEdge` -> `n.makeEdge()`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -270,13 +270,6 @@ func (n *Node) UnmarshalBinary(data []byte) error {\n \n \t\tn.entry = append([]byte{}, data[nodeHeaderSize:nodeHeaderSize+refBytesSize]...)\n \t\toffset := nodeHeaderSize + refBytesSize // skip entry\n-\t\t// Currently we don't persist the root nodeType when we marshal the manifest, as a result\n-\t\t// the root nodeType information is lost on Unmarshal. This causes issues when we want to\n-\t\t// perform a path 'Walk' on the root. If there is more than 1 fork, the root node type\n-\t\t// is an edge, so we will deduce this information from index byte array\n-\t\tif !bytes.Equal(data[offset:offset+32], make([]byte, 32)) {\n-\t\t\tn.nodeType = nodeTypeEdge\n-\t\t}\n \t\tn.forks = make(map[byte]*fork)\n \t\tbb := &bitsForBytes{}\n \t\tbb.fromBytes(data[offset:])\nReview:"}
{"pred": "Should this be a separate method? It's a bit confusing to have this logic here.", "gold": "Just wondering... The two kinds of notifications are now quite different (Channel, text, maybe even icon). Would it make sense to extract the auto download notification to a new class instead of handling everything in the existing `notificationManager`? I have not checked if this will lead to a lot of code duplication, though.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -205,9 +205,10 @@ public class DownloadService extends Service {\n         Log.d(TAG, \"Service shutting down\");\n         isRunning = false;\n \n+        boolean showAutoDownloadReport = UserPreferences.showAutoDownloadReport();\n         if (ClientConfig.downloadServiceCallbacks.shouldCreateReport()\n-                && UserPreferences.showDownloadReport()) {\n-            notificationManager.updateReport(reportQueue);\n+                && (UserPreferences.showDownloadReport() || showAutoDownloadReport)) {\n+            notificationManager.updateReport(reportQueue, showAutoDownloadReport);\n             reportQueue.clear();\n         }\n \nReview:"}
{"pred": "This should be nil checked before returning the RequestFeatures.", "gold": "Do we need to put this on the Call? We only need the API communication between the Encoding and the Transports which is currently done through the Transport.Request. The Call is used by users right?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -140,3 +140,11 @@ func (c *Call) RoutingDelegate() string {\n \t}\n \treturn c.ic.req.RoutingDelegate\n }\n+\n+// Features returns the RequestFeatures for this request.\n+func (c *Call) Features() transport.RequestFeatures {\n+\tif c == nil {\n+\t\treturn transport.RequestFeatures{}\n+\t}\n+\treturn c.ic.req.Features\n+}\nReview:"}
{"pred": "It looks like you've added some new API methods here, but they are all returning an error. Is this intentional?", "gold": "`ctx` is unused in GenerateAPIKey", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1202,3 +1202,15 @@ L:\n \t}\n \treturn filtered\n }\n+\n+func (a *WebAPI) GenerateAPIKey(ctx context.Context, req *webservice.GenerateAPIKeyRequest) (*webservice.GenerateAPIKeyResponse, error) {\n+\treturn nil, status.Error(codes.Unimplemented, \"\")\n+}\n+\n+func (a *WebAPI) DisableAPIKey(ctx context.Context, req *webservice.DisableAPIKeyRequest) (*webservice.DisableAPIKeyResponse, error) {\n+\treturn nil, status.Error(codes.Unimplemented, \"\")\n+}\n+\n+func (a *WebAPI) ListAPIKeys(ctx context.Context, req *webservice.ListAPIKeysRequest) (*webservice.ListAPIKeysResponse, error) {\n+\treturn nil, status.Error(codes.Unimplemented, \"\")\n+}\nReview:"}
{"pred": "It is better to return an error here instead of calling log.L().Fatal()", "gold": "Can you judge the type of error?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -75,6 +75,7 @@ type (\n func NewBlockDAO(indexers []BlockIndexer, cfg config.DB) BlockDAO {\n \tblkStore, err := filedao.NewFileDAO(cfg)\n \tif err != nil {\n+\t\tlog.L().Fatal(err.Error(), zap.Any(\"cfg\", cfg))\n \t\treturn nil\n \t}\n \treturn createBlockDAO(blkStore, indexers, cfg)\nReview:"}
{"pred": "This looks like it should be a np.diff(data, prepend=0.5) instead of the convolution.", "gold": "Much simpler than a weird and confusing ``convolve`` call!", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -204,7 +204,7 @@ class GridInterface(DictInterface):\n         if edges and not isedges:\n             data = cls._infer_interval_breaks(data)\n         elif not edges and isedges:\n-            data = np.convolve(data, [0.5, 0.5], 'valid')\n+            data = data[:-1] + np.diff(data)/2.\n         return data\n \n \nReview:"}
{"pred": "This looks correct, but please double check that the expected number of calls is correct.", "gold": "Huh, this seems weird to me... Surely the suspenders render was called again in order to get the new `<div>Hello second 2</div>` output... Imma take a peak at these tests to understand what's going on", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -739,8 +739,8 @@ describe('suspense', () => {\n \t\t\t\texpect(scratch.innerHTML).to.eql(\n \t\t\t\t\t`<div>Hello first 2</div><div>Hello second 2</div>`\n \t\t\t\t);\n-\t\t\t\texpect(Suspender1.prototype.render).to.have.been.calledThrice;\n-\t\t\t\texpect(Suspender2.prototype.render).to.have.been.calledThrice;\n+\t\t\t\texpect(Suspender1.prototype.render).to.have.been.calledTwice;\n+\t\t\t\texpect(Suspender2.prototype.render).to.have.been.calledTwice;\n \t\t\t});\n \t\t});\n \t});\nReview:"}
{"pred": "This should be moved to a helper class, as it doesn't belong in the controller.", "gold": "Since this is just a helper function to create text, perhaps this could live in a helper? I noticed that we have a few other error/message creators in the application controller as well, but I think this type of function should be re-factored to be part of a helper.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -80,6 +80,10 @@ class ApplicationController < ActionController::Base\n   def failed_destroy_error(obj, obj_name)\n     \"#{_('Could not delete the %{o}.') % {o: obj_name}} #{errors_to_s(obj)}\"\n   end\n+  \n+  def success_message(obj_name, action)\n+    \"#{_('Successfully %{action} your %{object}.') % {object: obj_name, action: action}}\"\n+  end\n \n   private\n     # Override rails default render action to look for a branded version of a\nReview:"}
{"pred": "This should be documented in the comments above the setting.", "gold": "Will this mess up parsing the messages by other editors? (vscode, vim ...)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -92,7 +92,7 @@ evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / stateme\n \n # Template used to display messages. This is a python new-style format string\n # used to format the message information. See doc for all details\n-#msg-template=\n+msg-template=[{msg_id}] {path}:{line:3d}:{column}: {msg}\n \n \n [SPELLING]\nReview:"}
{"pred": "This change looks good. It updates the path to the Gemfile and adds a comment to explain the purpose of the require statement.", "gold": "Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,4 +1,3 @@\n-# Set up gems listed in the Gemfile.\n-ENV['BUNDLE_GEMFILE'] ||= File.expand_path('../../Gemfile', __FILE__)\n+ENV['BUNDLE_GEMFILE'] ||= File.expand_path('../Gemfile', __dir__)\n \n-require 'bundler/setup' if File.exists?(ENV['BUNDLE_GEMFILE'])\n+require 'bundler/setup' # Set up gems listed in the Gemfile.\nReview:"}
{"pred": "We should check the task status before returning the block to the pool.", "gold": "Why can the pool be null?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -28,8 +28,13 @@ namespace Microsoft.AspNet.Server.Kestrel.Filter\n             _filteredStream = filteredStream;\n             _socketInputStream = new SocketInputStream(SocketInput);\n \n-            _filteredStream.CopyToAsync(_socketInputStream).ContinueWith((task, state) =>\n+            var block = memory.Lease();\n+            // Use pooled block for copy\n+            _filteredStream.CopyToAsync(_socketInputStream, block).ContinueWith((task, state) =>\n             {\n+                var returnedBlock = task.Result;\n+                returnedBlock.Pool?.Return(returnedBlock);\n+\n                 ((FilteredStreamAdapter)state).OnStreamClose(task);\n             }, this);\n         }\nReview:"}
{"pred": "This looks good. It is nice to have a separate method for this to keep the code clean and organized.", "gold": "It might be good to have a note here: > work-around for issue #7562 allowing us to differentiate presentational lists from interactive lists (such as of size greater 1 and ARIA list boxes). In firefox, this is possible by the presence of a read-only state, even in content editable.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -74,6 +74,15 @@ class ToggleButton(ia2Web.Ia2Web):\n \t\treturn states\n \n \n+class PresentationalList(ia2Web.Ia2Web):\n+\t\"\"\" Ensures that lists like UL, DL and OL always have the readonly state.\"\"\"\n+\n+\tdef _get_states(self):\n+\t\tstates = super().states\n+\t\tstates.add(controlTypes.STATE_READONLY)\n+\t\treturn states\n+\n+\n def findExtraOverlayClasses(obj, clsList):\n \t\"\"\"Determine the most appropriate class(es) for Chromium objects.\n \tThis works similarly to L{NVDAObjects.NVDAObject.findOverlayClasses} except that it never calls any other findOverlayClasses method.\nReview:"}
{"pred": "Good use of generics here.", "gold": "This set of changes is the one part of this that I'm not completely sure is valid. Can someone look over this to make sure I got the E's right?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -66,16 +66,16 @@ import java.util.Set;\n  * the current node) may be queried.\n  *\n  */\n-class DigraphNode implements Cloneable, Serializable {\n+class DigraphNode<E> implements Cloneable, Serializable {\n \n     /** The data associated with this node. */\n-    protected Object data;\n+    protected E data;\n \n     /**\n      * A <code>Set</code> of neighboring nodes pointed to by this\n      * node.\n      */\n-    protected Set outNodes = new HashSet();\n+    protected Set<DigraphNode<E>> outNodes = new HashSet<>();\n \n     /** The in-degree of the node. */\n     protected int inDegree = 0;\nReview:"}
{"pred": "Good addition to prevent incorrect or malicious pulls.", "gold": "There doesn't seem to be a reason to copy this here.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -282,8 +282,12 @@ void nano::bootstrap_attempt_legacy::request_push (nano::unique_lock<std::mutex>\n void nano::bootstrap_attempt_legacy::add_frontier (nano::pull_info const & pull_a)\n {\n \tnano::pull_info pull (pull_a);\n-\tnano::lock_guard<std::mutex> lock (mutex);\n-\tfrontier_pulls.push_back (pull);\n+\t// Prevent incorrent or malicious pulls with frontier 0 insertion\n+\tif (!pull.head.is_zero ())\n+\t{\n+\t\tnano::lock_guard<std::mutex> lock (mutex);\n+\t\tfrontier_pulls.push_back (pull);\n+\t}\n }\n \n void nano::bootstrap_attempt_legacy::add_bulk_push_target (nano::block_hash const & head, nano::block_hash const & end)\nReview:"}
{"pred": "We should probably add a comment here explaining why we need to include this header.", "gold": "We've avoided including h2o headers in BPF programs because it's a runtime dependency. However, IIRC, this is because h2olog was maintained in the separate repository so that h2olog did not know where h2o was installed. Now h2olog can use `H2O_ROOT`, we should add it to BCC's `cflags` in order to include h2o headers in BPF programs.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1774,6 +1774,7 @@ std::string h2o_raw_tracer::bpf_text() {\n \n #include <linux/sched.h>\n #include <linux/limits.h>\n+#include \"include/h2o/ebpf.h\"\n \n #define STR_LEN 64\n \nReview:"}
{"pred": "This looks good. The new fields are well documented and the code is properly indented.", "gold": "I think the docstring here should include the CLI arg `--alert.query-url` just to make it clear to users which setting this uses.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -170,6 +170,10 @@ type ThanosRulerSpec struct {\n \t// Note: Currently only the CAFile, CertFile, and KeyFile fields are supported.\n \t// Maps to the '--grpc-server-tls-*' CLI args.\n \tGRPCServerTLSConfig *TLSConfig `json:\"grpcServerTlsConfig,omitempty\"`\n+\t// The external Query URL the Thanos Ruler will set in the 'Source' field\n+\t// of all alerts.\n+\t// Maps to the '--alert.query-url' CLI arg.\n+\tAlertQueryURL string `json:\"alertQueryUrl,omitempty\"`\n }\n \n // ThanosRulerStatus is the most recent observed status of the ThanosRuler. Read-only. Not\nReview:"}
{"pred": "This is more efficient than the previous loop, good job!", "gold": "Same change just above?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -224,9 +224,7 @@ func (m *ipipManager) CompleteDeferredWork() error {\n \t\tfor _, ip := range m.activeHostnameToIP {\n \t\t\tmembers = append(members, ip)\n \t\t}\n-\t\tfor _, ip := range m.externalNodeCIDRs {\n-\t\t\tmembers = append(members, ip)\n-\t\t}\n+\t\tmembers = append(members, m.externalNodeCIDRs...)\n \t\tm.ipsetsDataplane.AddOrReplaceIPSet(m.ipSetMetadata, members)\n \t\tm.ipSetInSync = true\n \t}\nReview:"}
{"pred": "Good test coverage here, nice!", "gold": "Could you check the result content rather than just the number of search results please? For example with this test if the search engine suddenly starts returning \"latin n\" for both queries, we won't know about it.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -511,4 +511,14 @@ describe('services_SearchEngine', function() {\n \t\texpect((await engine.search('\"- [ ]\"', { searchType: SearchEngine.SEARCH_TYPE_BASIC })).length).toBe(1);\n \t\texpect((await engine.search('\"[ ]\"', { searchType: SearchEngine.SEARCH_TYPE_BASIC })).length).toBe(2);\n \t}));\n+\n+\tit('should not mistake cyrillic \"l\" for latin \"n\"', asyncTest(async () => {\n+\t\tconst n1 = await Note.save({ title: 'latin n', body: 'n' });\n+\t\tconst n2 = await Note.save({ title: 'cyrillic l', body: '\u043b' });\n+\n+\t\tawait engine.syncTables();\n+\n+\t\texpect((await engine.search('n')).length).toBe(1);\n+\t\texpect((await engine.search('\u043b')).length).toBe(1);\n+\t}));\n });\nReview:"}
{"pred": "Good to add a comment here to explain why you are adding the agentlessID variable.", "gold": "nit: I think that `workloadID` should suffice for this test... that's what we'd be issuing anyways", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -47,9 +47,10 @@ const (\n \n \totherDomainID = \"spiffe://otherdomain.test\"\n \n-\tserverID   = \"spiffe://example.org/spire/server\"\n-\tagentID    = \"spiffe://example.org/spire/agent/test/id\"\n-\tworkloadID = \"spiffe://example.org/workload\"\n+\tserverID    = \"spiffe://example.org/spire/server\"\n+\tagentID     = \"spiffe://example.org/spire/agent/test/id\"\n+\tagentlessID = \"spiffe://example.org/test/id\"\n+\tworkloadID  = \"spiffe://example.org/workload\"\n \n \t// used to cancel stream operations on test failure instead of blocking the\n \t// full go test timeout period (i.e. 10 minutes)\nReview:"}
{"pred": "This change is not related to the code, it should be done in a separate commit.", "gold": "Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,4 +1,4 @@\n-require 'spec_helper'\n+require 'rails_helper'\n \n feature 'Admin manages mentors' do\n   scenario 'creating a new mentor' do\nReview:"}
{"pred": "Good catch, this should make the code more robust.", "gold": "We should have a rule to detect identical catch branches", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -204,11 +204,7 @@ public class ClassTypeResolver extends JavaParserVisitorAdapter {\n             if (className != null) {\n                 populateClassName(node, className);\n             }\n-        } catch (ClassNotFoundException e) {\n-            if (LOG.isLoggable(Level.FINE)) {\n-                LOG.log(Level.FINE, \"Could not find class \" + className + \", due to: \" + e);\n-            }\n-        } catch (NoClassDefFoundError e) {\n+        } catch (ClassNotFoundException | NoClassDefFoundError e) {\n             if (LOG.isLoggable(Level.FINE)) {\n                 LOG.log(Level.FINE, \"Could not find class \" + className + \", due to: \" + e);\n             }\nReview:"}
{"pred": "It looks like the RetryAttempts and RetryDelayInSeconds properties have been removed. Is there a reason for this?", "gold": "remove these from the targets file.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -28,10 +28,6 @@ namespace Microsoft.DotNet.Build.Tasks.Feed\n \n         public bool PublishFlatContainer { get; set; }\n \n-        public int RetryAttempts { get; set; } = 5;\n-\n-        public int RetryDelayInSeconds { get; set; } = 30;\n-\n         public int MaxClients { get; set; } = 8;\n \n         public bool SkipCreateContainer { get; set; } = false;\nReview:"}
{"pred": "It looks like you are missing an import for ma.", "gold": "now that we have the signature in the hive messages, it might be that this must be drastically reduced, since there are limits on the protobuf reader/writers i believe", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -11,14 +11,13 @@ import (\n \t\"time\"\n \n \t\"github.com/ethersphere/bee/pkg/addressbook\"\n+\t\"github.com/ethersphere/bee/pkg/bzz\"\n \t\"github.com/ethersphere/bee/pkg/hive/pb\"\n \t\"github.com/ethersphere/bee/pkg/logging\"\n \t\"github.com/ethersphere/bee/pkg/p2p\"\n \t\"github.com/ethersphere/bee/pkg/p2p/protobuf\"\n \t\"github.com/ethersphere/bee/pkg/storage\"\n \t\"github.com/ethersphere/bee/pkg/swarm\"\n-\n-\tma \"github.com/multiformats/go-multiaddr\"\n )\n \n const (\nReview:"}
{"pred": "It is good to see that the packages are being updated to the latest version.", "gold": "I recommend that we move this to be optional, as other users might not need it. Can you look at `OPTIONAL_PACKAGES` section, around line 68?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -35,11 +35,12 @@ NAMESPACE_PACKAGES = [\n REQUIRED_PACKAGES = [\n     # Installation related.\n     'anytree==2.4.3',\n-    'google-api-python-client==1.7.7',\n-    'google-auth==1.6.2',\n+    'google-api-python-client==1.7.10',\n+    'google-auth==1.6.3',\n     'google-auth-httplib2==0.0.3',\n     'Jinja2==2.10.1',\n     'jmespath==0.9.3',\n+    'mailjet-rest==1.3.3',\n     'netaddr==0.7.19',\n     'pyyaml==4.2b4',\n     'python-graph-core==1.8.2',\nReview:"}
{"pred": "This change removes some imports that are not used in this class. It is good practice to remove unused imports.", "gold": "I usually set idea to never use wildcard import such as `import java.util.*;` Now i use setting from javaslang standard.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -8,10 +8,7 @@ package javaslang.control;\n import javaslang.Serializables;\n import org.junit.Test;\n \n-import java.util.Iterator;\n-import java.util.NoSuchElementException;\n-import java.util.Objects;\n-import java.util.Optional;\n+import java.util.*;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \nReview:"}
{"pred": "Good change, this will allow for multiple IPs to be assigned to a single host.", "gold": "Where is host['ips'] coming from?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -29,7 +29,9 @@ module Beaker\n         v_file << \"    v.vm.box = '#{host['box']}'\\n\"\n         v_file << \"    v.vm.box_url = '#{host['box_url']}'\\n\" unless host['box_url'].nil?\n         v_file << \"    v.vm.base_mac = '#{randmac}'\\n\"\n-        v_file << \"    v.vm.network :private_network, ip: \\\"#{host['ip'].to_s}\\\", :netmask => \\\"#{host['netmask'] ||= \"255.255.0.0\"}\\\"\\n\"\n+        host['ips'].each do |ip|\n+          v_file << \"    v.vm.network :private_network, ip: \\\"#{ip.to_s}\\\", :netmask => \\\"#{host['netmask'] ||= \"255.255.0.0\"}\\\"\\n\"\n+        end\n \n         if host['disk_path']\n           v_file << \"    v.vm.provider :virtualbox do |vb|\\n\"\nReview:"}
{"pred": "It looks like you are removing some imports and changing the function signature. Is this intentional?", "gold": "oh! missed a `:` here; let me fix that; also can get rid of the intermediate variable", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -3,14 +3,7 @@\n \n package userns\n \n-import (\n-\t\"strings\"\n-\n-\t\"github.com/opencontainers/runc/libcontainer/user\"\n-)\n-\n-func FuzzUIDMap(data []byte) int {\n-\tuidmap, _ := user.ParseIDMap(strings.NewReader(string(data)))\n-\t_ = uidMapInUserNS(uidmap)\n+func FuzzUIDMap(uidmap []byte) int {\n+\t_ = uidMapInUserNS(string(uidmap))\n \treturn 1\n }\nReview:"}
{"pred": "It's good to see the test data being set up in the before block. This makes the test more readable and maintainable.", "gold": "Is this necessary?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,6 +1,8 @@\n describe \"Display status text\" do\n   let(:proposal) { FactoryGirl.create(:proposal, :with_parallel_approvers) }\n   before do\n+    proposal.approvers.first.update(first_name: \"Uniquely\", last_name: \"Named\")\n+    proposal.approvers.second.update(first_name: \"Onlyof\", last_name: \"Itskind\")\n     login_as(proposal.requester)\n   end\n \nReview:"}
{"pred": "It's good to see the imports are now grouped together.", "gold": "I'd create a different method for each render section.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,8 +1,16 @@\n-import React from 'react';\n+import React, {Component} from 'react';\n import 'element-theme-default';\n import {i18n} from 'element-react';\n import locale from 'element-react/src/locale/lang/en';\n \n+import storage from './utils/storage';\n+import logo from './utils/logo';\n+import {makeLogin, isTokenExpire} from './utils/login';\n+\n+import Header from './components/Header';\n+import Footer from './components/Footer';\n+import LoginModal from './components/Login';\n+\n i18n.use(locale);\n \n import Route from './router';\nReview:"}
{"pred": "IsReverted should be initialized to false in the constructor.", "gold": "Instead of storing the revert flag in the tracer is it possible to use org.hyperledger.besu.ethereum.mainnet.TransactionProcessor.Result#getRevertReason? (via org.hyperledger.besu.ethereum.transaction.TransactionSimulatorResult#getResult)? If a TX reverts without a reason do we get an empty revert reason or a revert reason with zero bytes?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -23,6 +23,8 @@ public class EstimateGasOperationTracer implements OperationTracer {\n \n   private Gas sStoreStipendNeeded = Gas.ZERO;\n \n+  private boolean isReverted = false;\n+\n   @Override\n   public void traceExecution(\n       final MessageFrame frame, final OperationTracer.ExecuteOperation executeOperation) {\nReview:"}
{"pred": "It looks like you are passing the schema twice here. Is this intentional?", "gold": "I think this should test with and without container reuse if that is implemented in this PR. Probably just make this test parameterized.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -71,7 +71,7 @@ public class TestSparkOrcReader extends AvroDataTest {\n \n     try (CloseableIterable<InternalRow> reader = ORC.read(Files.localInput(testFile))\n         .project(schema)\n-        .createReaderFunc(SparkOrcReader::new)\n+        .createReaderFunc(readOrcSchema -> new SparkOrcReader(schema, readOrcSchema))\n         .build()) {\n       final Iterator<InternalRow> actualRows = reader.iterator();\n       final Iterator<InternalRow> expectedRows = expected.iterator();\nReview:"}
{"pred": "This looks like a hack. Can you explain why this is necessary?", "gold": "These modifications allow BaseFile to translate into a SparkRow with the specID as a column", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -100,6 +100,10 @@ abstract class BaseFile<F>\n           found = true;\n           fromProjectionPos[i] = j;\n         }\n+        if (fields.get(i).fieldId() == ManifestFile.SPEC_ID.fieldId()) {\n+          found = true;\n+          fromProjectionPos[i] = 14;\n+        }\n       }\n \n       if (!found) {\nReview:"}
{"pred": "This looks good, but make sure to add a test case to cover the string case.", "gold": "is this something we've been missing this whole time?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -519,7 +519,7 @@ function resolveReadPreference(parent, options) {\n     throw new Error('No readPreference was provided or inherited.');\n   }\n \n-  return readPreference;\n+  return typeof readPreference === 'string' ? new ReadPreference(readPreference) : readPreference;\n }\n \n /**\nReview:"}
{"pred": "We should add a comment here to explain why we are adding this constant.", "gold": "nit: this is a package-wide constant so better to narrow the scope like `allEventsSign`.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -25,6 +25,7 @@ import (\n const (\n \tdefaultWaitApprovalTimeout  = Duration(6 * time.Hour)\n \tdefaultAnalysisQueryTimeout = Duration(30 * time.Second)\n+\tallEvents                   = \"*\"\n )\n \n type GenericDeploymentSpec struct {\nReview:"}
{"pred": "Is this necessary? It looks like you're just overwriting the auth_thrift variable with the same value.", "gold": "There seems to be some repetition. Does a local function make this code shorter overall?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -111,6 +111,15 @@ def generate_thrift_files(thrift_files_dir, env, silent=True):\n         LOG.error('Failed to generate viewer server files')\n         return ret\n \n+    auth_thrift = os.path.join(thrift_files_dir, 'authentication.thrift')\n+    auth_thrift = 'authentication.thrift'\n+    auth_cmd = ['thrift', '-r', '-I', '.',\n+                '--gen', 'py', auth_thrift]\n+    ret = run_cmd(auth_cmd, thrift_files_dir, env, silent=silent)\n+    if ret:\n+        LOG.error('Failed to generate authentication interface files')\n+        return ret\n+\n \n # -------------------------------------------------------------------\n def generate_documentation(doc_root, env, silent=True):\nReview:"}
{"pred": "Is this isHydrating variable necessary here? It looks like it's only used in the parent function.", "gold": "Might be cheaper to reuse the `null` assignment of line 313 and set `isHydrating` to null instead WDYT?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -298,6 +298,7 @@ function diffElementNodes(\n \t}\n \n \tif (dom == null) {\n+\t\tisHydrating = false;\n \t\tif (newVNode.type === null) {\n \t\t\treturn document.createTextNode(newProps);\n \t\t}\nReview:"}
{"pred": "Is this intentional? It looks like an accidental removal of a line of code.", "gold": "Revert this blank line", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -22,7 +22,6 @@ import java.util.List;\n \n @AutoValue\n public abstract class TestCaseView {\n-\n   public abstract String clientMethodName();\n \n   public abstract InitCodeView initCode();\nReview:"}
{"pred": "It's better to use the System.clearProperty() method here to reset the properties to their original values.", "gold": "This was introduced recently for the Hadoop 3 upgrade. Copy/paste error but definitely causing some of the new test failures.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -50,8 +50,8 @@ public class MoveReplicaHDFSTest extends MoveReplicaTest {\n       HdfsTestUtil.teardownClass(dfsCluster);\n     } finally {\n       dfsCluster = null;\n-      System.setProperty(\"solr.hdfs.blockcache.blocksperbank\", \"512\");\n-      System.setProperty(\"tests.hdfs.numdatanodes\", \"1\");\n+      System.clearProperty(\"solr.hdfs.blockcache.blocksperbank\");\n+      System.clearProperty(\"tests.hdfs.numdatanodes\");\n     }\n   }\n \nReview:"}
{"pred": "You should add a comment here to explain why you are adding this check.", "gold": "I think we should only need to do this for `:approve` since we are using `authenticate_user!` for all other actions and that checks for disabled client", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -2,6 +2,7 @@ class ProposalsController < ApplicationController\n   include TokenAuth\n \n   skip_before_action :authenticate_user!, only: [:approve]\n+  before_action :check_disabled_client\n   # TODO use Policy for all actions\n   before_action ->{authorize proposal}, only: [:show, :cancel, :cancel_form, :history]\n   before_action :needs_token_on_get, only: :approve\nReview:"}
{"pred": "You should add a test to ensure that the response contains a valid error message.", "gold": "I wonder if we should create new tests for header checks; here for instance we're mixing querystring and headers. Thoughts?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -56,9 +56,10 @@ class DefaultBucketViewTest(BaseWebTest, unittest.TestCase):\n         self.app.get(self.collection_url, headers=self.headers)\n \n     def test_querystring_parameters_are_taken_into_account(self):\n-        self.app.get(self.collection_url + '/records?_since=invalid',\n-                     headers=self.headers,\n-                     status=400)\n+        resp = self.app.get(self.collection_url + '/records?_since=invalid',\n+                            headers=self.headers,\n+                            status=400)\n+        self.assertIn('Content-Length', resp.headers)\n \n     def test_option_is_possible_without_authentication_for_default(self):\n         headers = 'authorization,content-type'\nReview:"}
{"pred": "Is this the correct name for the task? It looks like it should be apply_helpers::custom_facts.", "gold": "We should be able to add sensitive by hard-coding the parameters, same as you put into the metadata in apply_helpers.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -42,7 +42,7 @@ module Bolt\n         path = File.join(libexec, 'custom_facts.rb')\n         file = { 'name' => 'custom_facts.rb', 'path' => path }\n         metadata = { 'supports_noop' => true, 'input_method' => 'stdin' }\n-        Bolt::Task.new(name: 'custom_facts', files: [file], metadata: metadata)\n+        Bolt::Task.new(name: 'apply_helpers::custom_facts', files: [file], metadata: metadata)\n       end\n     end\n \nReview:"}
{"pred": "This looks good. No changes needed.", "gold": "Why do you think that it is necessary to create this class?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,11 @@\n+<?php\n+\n+declare(strict_types=1);\n+\n+namespace Shopsys\\ShopBundle\\Model\\Order\\Item;\n+\n+use Shopsys\\FrameworkBundle\\Model\\Order\\Item\\OrderItemFactory as BaseOrderItemFactory;\n+\n+class OrderItemFactory extends BaseOrderItemFactory\n+{\n+}\nReview:"}
{"pred": "This is a good change, it's more efficient to use Seek(0, 1) to get the current position of the stream, rather than Seek(0, 0) to set it to the beginning.", "gold": "replacing the `1` with `io.SeekCurrent` may be good here", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -18,8 +18,8 @@ type Hash struct {\n //\n // See http://docs.aws.amazon.com/amazonglacier/latest/dev/checksum-calculations.html for more information.\n func ComputeHashes(r io.ReadSeeker) Hash {\n-\tr.Seek(0, 0)       // Read the whole stream\n-\tdefer r.Seek(0, 0) // Rewind stream at end\n+\tstart, _ := r.Seek(0, 1)  // Read the whole stream\n+\tdefer r.Seek(start, 0) // Rewind stream at end\n \n \tbuf := make([]byte, bufsize)\n \thashes := [][]byte{}\nReview:"}
{"pred": "This looks good. The interface is well defined and the code is clean.", "gold": "nit: perhaps this file would be better named `jwks_source.go` ?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,15 @@\n+package main\n+\n+import (\n+\t\"time\"\n+\n+\t\"gopkg.in/square/go-jose.v2\"\n+)\n+\n+type JWKSSource interface {\n+\t// FetchJWKS returns the key set and modified time.\n+\tFetchKeySet() (*jose.JSONWebKeySet, time.Time, bool)\n+\n+\t// Close closes the source.\n+\tClose() error\n+}\nReview:"}
{"pred": "Is this the best place to define this constant? It seems like it should be in a more specific class.", "gold": "It will be helpful to specify the intended priority as well for the properties within this file.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -153,6 +153,9 @@ public class Constants {\n   // Overridable plugin load properties\n   public static final String AZ_PLUGIN_LOAD_OVERRIDE_PROPS = \"azkaban.plugin.load.override.props\";\n \n+  // File containing param override configs\n+  public static final String PARAM_OVERRIDE_FILE = \"param_override.properties\";\n+\n   // Azkaban event reporter constants\n   public static class EventReporterConstants {\n \nReview:"}
{"pred": "This is a good addition to the codebase, it will make it easier to mock out the exec.Cmd calls.", "gold": "Make this private and update all the public functions to not take this argument. The variable you set below should also be private, then in the tests instead of passing the variable in to the function just update the variable. We don't want to expose the testing implementation in the public api if it can be avoided.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -23,6 +23,8 @@ import (\n \t\"github.com/GoogleCloudPlatform/compute-image-tools/go/osinfo\"\n )\n \n+type RunFunc func(*exec.Cmd) ([]byte, error)\n+\n var (\n \t// AptExists indicates whether apt is installed.\n \tAptExists bool\nReview:"}
{"pred": "It looks like the path to the file has been updated. Is this the correct path?", "gold": "Do you now why is it a specific table name is used as a default?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1956,7 +1956,7 @@ SDDkwd__(EXE_DIAGNOSTIC_EVENTS,\t\t\"OFF\"),\n   DDkwd__(HIVE_DEFAULT_CHARSET,            (char *)SQLCHARSETSTRING_UTF8),\n   DD_____(HIVE_DEFAULT_SCHEMA,                  \"HIVE\"),\n   DD_____(HIVE_FILE_CHARSET,                    \"\"),\n-  DD_____(HIVE_FILE_NAME,     \"/hive/tpcds/customer/customer.dat\" ),\n+  DD_____(HIVE_FILE_NAME,     \"/user/trafodion/hive/tpcds/customer/customer.dat\" ),\n   DD_____(HIVE_HDFS_STATS_LOG_FILE,             \"\"),\n   DDui___(HIVE_INSERT_ERROR_MODE,               \"1\"),\n   DDint__(HIVE_LIB_HDFS_PORT_OVERRIDE,          \"-1\"),\nReview:"}
{"pred": "It's better to use Path.GetTempPath() here instead of hardcoding the path.", "gold": "If all you're doing is checking for the existence of a directory as your \"temp\" directory, why does it matter what OS you're on?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -414,8 +414,8 @@ namespace Microsoft.DotNet.Build.Tasks\n                     return Environment.GetEnvironmentVariable(\"TMPDIR\");\n                 else if (DirExists(Environment.GetEnvironmentVariable(\"TMP\")))\n                     return Environment.GetEnvironmentVariable(\"TMP\");\n-                else if (DirExists(\"/home/DDITAdministrator/myagent/_work/_temp\"))\n-                    return \"/home/DDITAdministrator/myagent/_work/_temp\";\n+                else if (DirExists(Path.Combine(Environment.GetEnvironmentVariable(\"HOME\"), \"myagent/_work/_temp\")))\n+                    return Path.Combine(Environment.GetEnvironmentVariable(\"HOME\"), \"myagent/_work/_temp\");\n                 else\n                 {\n                     Log.LogMessage(\"No TEMP dir found.\");\nReview:"}
{"pred": "It looks like you are switching from Gorilla mux to Echo v4. Make sure to test the code thoroughly and ensure that all the endpoints are working as expected.", "gold": "nit- would be cleaner to import it once", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -60,10 +60,11 @@\n package server\n \n import (\n-\t\"fmt\"\n+\tv2 \"github.com/algorand/go-algorand/daemon/algod/api/server/v2\"\n+\t\"github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated\"\n \t\"net/http\"\n \n-\t\"github.com/gorilla/mux\"\n+\t\"github.com/labstack/echo/v4\"\n \n \t\"github.com/algorand/go-algorand/daemon/algod/api/server/common\"\n \t\"github.com/algorand/go-algorand/daemon/algod/api/server/lib\"\nReview:"}
{"pred": "You should consider using a set here to avoid duplicate entries.", "gold": "Looks like there is a closing parenthesis `)` missing here.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -159,6 +159,14 @@ class GenericProxyHandler(BaseHTTPRequestHandler):\n             # allow pre-flight CORS headers by default\n             if 'Access-Control-Allow-Origin' not in response.headers:\n                 self.send_header('Access-Control-Allow-Origin', '*')\n+            if 'Access-Control-Allow-Headers' not in response.headers:\n+                self.send_header('Access-Control-Allow-Headers', ','.join([\n+                    'authorization',\n+                    'x-amz-content-sha256',\n+                    'x-amz-date',\n+                    'x-amz-security-token',\n+                    'x-amz-user-agent'\n+                ])\n \n             self.end_headers()\n             if len(response.content):\nReview:"}
{"pred": "Good change, snprintf is safer than sprintf.", "gold": "this one bothers me. There are many places where this one is written to for an error message and just a single callsite is changed.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1684,8 +1684,8 @@ void PairTlsph::coeff(int narg, char **arg) {\n                 } // end energy release rate failure criterion\n \n                 else {\n-                        sprintf(str, \"unknown *KEYWORD: %s\", arg[ioffset]);\n-                        error->all(FLERR, str);\n+                  snprintf(str,128,\"unknown *KEYWORD: %s\", arg[ioffset]);\n+                  error->all(FLERR, str);\n                 }\n \n         }\nReview:"}
{"pred": "Is it necessary to call FastForwardBackoff() here?", "gold": "You can put this in `kbfsOpsInit()` in you want, so we don't have to call it in every test.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -706,6 +706,7 @@ func TestKBFSOpsGetBaseDirChildrenCacheSuccess(t *testing.T) {\n \tops := getOps(config, id)\n \tn := nodeFromPath(t, ops, p)\n \n+\tconfig.mockMdserv.EXPECT().FastForwardBackoff().AnyTimes()\n \tchildren, err := config.KBFSOps().GetDirChildren(ctx, n)\n \tif err != nil {\n \t\tt.Errorf(\"Got error on getdir: %+v\", err)\nReview:"}
{"pred": "Should we add a comment here to explain why we are not implementing 64-bit counter support for ARM_32?", "gold": "`ARM_32` is what clients define as an input to DR, and is not always defined internally: we use just `ARM` to mean AArch32.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -528,8 +528,10 @@ drx_insert_counter_update(void *drcontext, instrlist_t *ilist, instr_t *where,\n         }\n     }\n #elif defined(AARCHXX)\n+#    ifdef ARM_32\n     /* FIXME i#1551: implement 64-bit counter support */\n-    ASSERT(!is_64, \"DRX_COUNTER_64BIT is not implemented\");\n+    ASSERT(!is_64, \"DRX_COUNTER_64BIT is not implemented for ARM_32\");\n+#    endif /* ARM_32 */\n \n     if (use_drreg) {\n         if (drreg_reserve_register(drcontext, ilist, where, NULL, &reg1) !=\nReview:"}
{"pred": "This comment should be updated to reflect the fact that the originalSchema is not dereferenced.", "gold": "s/for use/to use for/", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -38,8 +38,11 @@ import javax.annotation.Nullable;\n /** A field declaration wrapper around a Discovery Schema. */\n public class DiscoveryField implements FieldModel, TypeModel {\n   private final List<DiscoveryField> properties;\n+  // Dereferenced schema for use rendering type names and determining properties, type, and format.\n   private final Schema schema;\n-  private final Schema originalSchema; // Not dereferenced schema.\n+\n+  // Not dereferenced schema; used in rendering this FieldModel's parameter name.\n+  private final Schema originalSchema;\n   private final DiscoApiModel apiModel;\n \n   /* Create a FieldModel object from a non-null Schema object, and internally dereference the input schema. */\nReview:"}
{"pred": "Is this the correct type for avatar_filename? It looks like it should be a string.", "gold": "` $event->getAvatarFilename()` this function return `string` or `null`. In this place ` $event->getAvatarFilename()->getValue()` return `Fatal error `", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -60,7 +60,7 @@ class UserCreatedEventProjector\n                 'language' => $event->getLanguage()->getCode(),\n                 'password' => $event->getPassword()->getValue(),\n                 'is_active' => $event->isActive(),\n-                'avatar_id' => $event->getAvatarId() ? $event->getAvatarId()->getValue() : null,\n+                'avatar_filename' => $event->getAvatarFilename() ? $event->getAvatarFilename()->getValue() : null,\n             ],\n             [\n                 'is_active' => \\PDO::PARAM_BOOL,\nReview:"}
{"pred": "This should be a ResourceExhausted error, not Unavailable.", "gold": "why not creating a new error type for server's own resource limit exceed error and do conversion within rpc interceptor?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -34,7 +34,7 @@ import (\n \n var (\n \t// ErrPersistenceLimitExceeded is the error indicating QPS limit reached.\n-\tErrPersistenceLimitExceeded = serviceerror.NewResourceExhausted(\"Persistence Max QPS Reached.\")\n+\tErrPersistenceLimitExceeded = serviceerror.NewUnavailable(\"Persistence Max QPS Reached.\")\n )\n \n type (\nReview:"}
{"pred": "This looks good, but you should add a comment to explain why the default value was changed.", "gold": "Could be a timing thing here. When options are created they'll copy the ref for the current default propagator. If user sets through SDK the global propagator after that, it won't be reflected. Could leave it null here and then when it is used in instrumentation do `options.Propagator ?? Propagators.DefaultTextMapPropagator`. It would be a slight perf hit but it makes it hot-swappable.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -27,13 +27,10 @@ namespace OpenTelemetry.Instrumentation.AspNet\n     public class AspNetInstrumentationOptions\n     {\n         /// <summary>\n-        /// Gets or sets <see cref=\"TextMapPropagator\"/> for context propagation. Default value: <see cref=\"CompositeTextMapPropagator\"/> with <see cref=\"TraceContextPropagator\"/> &amp; <see cref=\"BaggagePropagator\"/>.\n+        /// Gets or sets <see cref=\"TextMapPropagator\"/> for context propagation.\n+        /// By default, <see cref=\"Propagators.DefaultTextMapPropagator\" /> will be used.\n         /// </summary>\n-        public TextMapPropagator Propagator { get; set; } = new CompositeTextMapPropagator(new TextMapPropagator[]\n-        {\n-            new TraceContextPropagator(),\n-            new BaggagePropagator(),\n-        });\n+        public TextMapPropagator Propagator { get; set; } = Propagators.DefaultTextMapPropagator;\n \n         /// <summary>\n         /// Gets or sets a Filter function to filter instrumentation for requests on a per request basis.\nReview:"}
{"pred": "Is this intentional? It looks like a missing line of code.", "gold": "Unrelated file. Please remove from PR.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -158,7 +158,6 @@ public class TransactionSimulator {\n         callParams.getFrom() != null ? callParams.getFrom() : DEFAULT_FROM;\n \n     BlockHeader blockHeaderToProcess = header;\n-\n     if (transactionValidationParams.isAllowExceedingBalance()) {\n       updater.getOrCreate(senderAddress).getMutable().setBalance(Wei.of(UInt256.MAX_VALUE));\n       if (header.getBaseFee().isPresent()) {\nReview:"}
{"pred": "It is better to use a more specific Access-Control-Allow-Origin header here, rather than a wildcard.", "gold": "Careful: you only want two newlines after the final header message. (That indicates the end of headers and the start of data.)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -2663,6 +2663,7 @@ static work_queue_msg_code_t process_http_request( struct work_queue *q, struct\n \t} else {\n \t        // Other requests get raw JSON data.\n \t\tsend_worker_msg(q,w,\"Content-type: text/plain\\n\\n\");\n+\t\tsend_worker_msg(q,w,\"Access-Control-Allow-Origin: *\\n\\n\");\n \t\tprocess_queue_status(q, w, &path[1], stoptime );\n \t}\n \nReview:"}
{"pred": "Good to add a comment here to explain why we're removing this header.", "gold": "This will not work on Python 3 (to which we are transitioning) because `.content` is bytes, not a str. Can you make the pattern a bytes object as well (like so: `b\"pattern\"`)?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -9,6 +9,9 @@ def request(flow):\n     flow.request.headers.pop('If-Modified-Since', None)\n     flow.request.headers.pop('Cache-Control', None)\n \n+    # do not force https redirection\n+    flow.request.headers.pop('Upgrade-Insecure-Requests', None)\n+\n     # proxy connections to SSL-enabled hosts\n     if flow.request.pretty_host in secure_hosts:\n         flow.request.scheme = 'https'\nReview:"}
{"pred": "The order of the requiredOwned elements should be kept consistent.", "gold": "This was to allow the tests to pass when the order of the required was different. Silly, but we don't have an easy way to check for \"equal but order doesn't matter\" in chai.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -85,7 +85,7 @@ const ariaRoles = {\n \t},\n \tcombobox: {\n \t\ttype: 'composite',\n-\t\trequiredOwned: ['textbox', 'listbox', 'tree', 'grid', 'dialog'],\n+\t\trequiredOwned: ['listbox', 'tree', 'grid', 'dialog', 'textbox'],\n \t\trequiredAttrs: ['aria-expanded'],\n \t\t// Note: because aria-controls is not well supported we will not\n \t\t// make it a required attribute even though it is required in the\nReview:"}
{"pred": "It looks like you are introducing a new cost method for HbaseDelete. Is this the correct approach? It might be better to use the existing cost methods and adjust the cost accordingly.", "gold": "maybe say \"returns the default cost method that returns an object of cost 1\".", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -16546,6 +16546,18 @@ RelInternalSP::costMethod() const\n } // RelInternalSP::costMethod()\n //<pb>\n \n+CostMethod *\n+HbaseDelete::costMethod() const\n+{\n+  if (CmpCommon::getDefault(HBASE_DELETE_COSTING) == DF_OFF)\n+    return RelExpr::costMethod();  // returns cost 1 cost object\n+\n+  static THREAD_P CostMethodHbaseDelete *m = NULL;\n+  if (m == NULL)\n+    m = new (GetCliGlobals()->exCollHeap()) CostMethodHbaseDelete();\n+  return m;\n+} // HbaseDelete::costMethod()\n+\n PhysicalProperty*\n HbaseDelete::synthPhysicalProperty(const Context* myContext,\n                                    const Lng32     planNumber,\nReview:"}
{"pred": "This is a good addition to the code. It adds additional security by dropping VXLAN and IPinIP encapped packets.", "gold": "I believe these rules will be enforced both (1) on egress from a local workload, and (2) on ingress **to** a local workload. Right? I understand that we definitely want (1), but do we really want to enforce (2) as well?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -293,6 +293,19 @@ func (r *DefaultRuleRenderer) endpointIptablesChain(\n \t\t},\n \t})\n \n+\trules = append(rules, Rule{\n+\t\tMatch: Match().ProtocolNum(ProtoUDP).\n+\t\t\tDestPorts(uint16(r.Config.VXLANPort)).\n+\t\t\tVXLANVNI(uint32(r.Config.VXLANVNI)),\n+\t\tAction:  DropAction{},\n+\t\tComment: \"Drop VXLAN encapped packets originating in pods\",\n+\t})\n+\trules = append(rules, Rule{\n+\t\tMatch:   Match().ProtocolNum(ProtoIPIP),\n+\t\tAction:  DropAction{},\n+\t\tComment: \"Drop IPinIP encapped packets originating in pods\",\n+\t})\n+\n \tif len(policyNames) > 0 {\n \t\t// Clear the \"pass\" mark.  If a policy sets that mark, we'll skip the rest of the policies and\n \t\t// continue processing the profiles, if there are any.\nReview:"}
{"pred": "Is the response always going to be a JSONObject? If not, you should handle the other cases.", "gold": "Use `response.asJsonObject()` instead. Also, use `put()` instead of `putOpt()`, `null` as a value is fine.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -125,7 +125,9 @@ public class SalesforceNetworkPlugin extends ForcePlugin {\n                     try {\n                         // Not a 2xx status\n                         if (!response.isSuccess()) {\n-                            callbackContext.error(response.asString());\n+                            JSONObject errorObj = new JSONObject();\n+                            errorObj.putOpt(\"response\", response.fullResponseAsJSONObject());\n+                            callbackContext.error(errorObj.toString());\n                         }\n                         // Binary response\n                         else if (returnBinary) {\nReview:"}
{"pred": "This check is a bit too lax, it should be checking for a specific z-index value.", "gold": "Are you sure? We've changed it during an introduction of the IME support.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -113,7 +113,7 @@ describe('PasswordEditor', () => {\n     const editorHolder = $('.handsontableInputHolder');\n     const editor = editorHolder.find('.handsontableInput');\n \n-    expect(parseInt(editorHolder.css('z-index'), 10)).toBeGreaterThan(0);\n+    expect(editorHolder.is(':visible')).toBe(true);\n \n     editor.val('Edgar');\n \nReview:"}
{"pred": "Good to see the check for null here.", "gold": "I think here we want the use of `empty()` to take care of empty strings. If you put `dql_filter: ''` in your YAML config ... this will add `->andWhere('')` and it will fail, right?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -46,7 +46,7 @@ class QueryBuilder\n             $queryBuilder->leftJoin('entity.'.$sortFieldParts[0], $sortFieldParts[0]);\n         }\n \n-        if (!empty($dqlFilter)) {\n+        if (null !== $dqlFilter) {\n             $queryBuilder->andWhere($dqlFilter);\n         }\n \nReview:"}
{"pred": "You should add a log here to indicate that the message was skipped.", "gold": "this is golang's named return, err is defined, `return` is equivalent to `return err` the current code has no problem", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -170,14 +170,12 @@ func (p *Agent) Start(ctx context.Context) error {\n \t\t\tp2pMsgLatency.WithLabelValues(\"broadcast\", strconv.Itoa(int(broadcast.MsgType)), status).Observe(float64(latency))\n \t\t}()\n \t\tif err = proto.Unmarshal(data, &broadcast); err != nil {\n-\t\t\terr = errors.Wrap(err, \"error when marshaling broadcast message\")\n-\t\t\treturn\n+\t\t\treturn errors.Wrap(err, \"error when marshaling broadcast message\")\n \t\t}\n \t\t// Skip the broadcast message if it's from the node itself\n \t\trawmsg, ok := p2p.GetBroadcastMsg(ctx)\n \t\tif !ok {\n-\t\t\terr = errors.New(\"error when asserting broadcast msg context\")\n-\t\t\treturn\n+\t\t\treturn errors.New(\"error when asserting broadcast msg context\")\n \t\t}\n \t\tpeerID = rawmsg.GetFrom().Pretty()\n \t\tif p.host.HostIdentity() == peerID {\nReview:"}
{"pred": "The (out) annotation should be added to the output_buffer parameter to indicate that the output_buffer is an output parameter.", "gold": "I don't think this is right; in Rust terms it's like a `&mut String`, in Java `StringBuilder` - it's not a return value from the function which is what `(out)` is for.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -202,7 +202,7 @@ ostree_gpg_verify_result_get_all (OstreeGpgVerifyResult *result,\n  * ostree_gpg_verify_result_describe:\n  * @result: an #OstreeGpgVerifyResult\n  * @signature_index: which signature to describe\n- * @output_buffer: a #GString to hold the description\n+ * @output_buffer: (out): a #GString to hold the description\n  * @line_prefix: (allow-none): optional line prefix string\n  * @flags: flags to adjust the description format\n  *\nReview:"}
{"pred": "This looks correct, but it might be worth adding a comment to explain why we are subtracting 1 from labels[inds] in the previous version.", "gold": "If the label is not binary, should we rename this function?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -7,9 +7,9 @@ from ..registry import LOSSES\n \n def _expand_binary_labels(labels, label_weights, label_channels):\n     bin_labels = labels.new_full((labels.size(0), label_channels), 0)\n-    inds = torch.nonzero(labels >= 1).squeeze()\n+    inds = torch.nonzero((labels >= 0) & (labels < label_channels)).squeeze()\n     if inds.numel() > 0:\n-        bin_labels[inds, labels[inds] - 1] = 1\n+        bin_labels[inds, labels[inds]] = 1\n     bin_label_weights = label_weights.view(-1, 1).expand(\n         label_weights.size(0), label_channels)\n     return bin_labels, bin_label_weights\nReview:"}
{"pred": "This should probably be a relative path, rather than an absolute one.", "gold": "This is very-very bad idea because of its performance impact", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -421,10 +421,12 @@ class JMeterExecutor(ScenarioExecutor, WidgetProvider, FileLister):\n         :param file_list:\n         :return: etree\n         \"\"\"\n+        cur_path = r\"${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer()\" \\\n+                   r\".getBaseDir();)}${__BeanShell(File.separator,)}\"\n         for file_path in file_list:\n             file_path_elements = jmx.xpath('//stringProp[text()=\"%s\"]' % file_path)\n             for file_path_element in file_path_elements:\n-                file_path_element.text = os.path.basename(file_path)\n+                file_path_element.text = cur_path + os.path.basename(file_path)\n \n     def __get_resource_files_from_jmx(self, jmx):\n         \"\"\"\nReview:"}
{"pred": "This looks good. The import of the sonm-io/core/proto package is necessary for the code to work.", "gold": "WHY U NOT SORT IMPORTS?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -6,6 +6,7 @@ import (\n \t\"database/sql\"\n \t\"encoding/json\"\n \t\"fmt\"\n+\t\"github.com/sonm-io/core/proto\"\n \t\"math/big\"\n \t\"net\"\n \t\"sync\"\nReview:"}
{"pred": "This looks good. It is a nice way to abstract away the sign in logic.", "gold": "Put a comma after the last item of a multiline hash.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,11 @@\n+module SignInRequestHelpers\n+  def sign_in_as(user)\n+    post(\n+      \"/session\",\n+      session: {\n+        email: user.email,\n+        password: user.password,\n+      },\n+    )\n+  end\n+end\nReview:"}
{"pred": "This looks good, adding the new import should not cause any issues.", "gold": "How come we need ``Dimensioned`` in the top-level namespace?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -12,7 +12,7 @@ __version__ = param.Version(release=(1,7,0), fpath=__file__,\n                             commit=\"$Format:%h$\", reponame='holoviews')\n \n from .core import archive                                # noqa (API import)\n-from .core.dimension import OrderedDict, Dimension       # noqa (API import)\n+from .core.dimension import OrderedDict, Dimension, Dimensioned       # noqa (API import)\n from .core.boundingregion import BoundingBox             # noqa (API import)\n from .core.options import (Options, Store, Cycle,        # noqa (API import)\n                            Palette, StoreOptions)\nReview:"}
{"pred": "Good job on adding the tags to the plugin descriptor.", "gold": "excess whitespace through plugin.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -75,9 +75,9 @@ import net.runelite.client.util.Text;\n import net.runelite.client.util.WildcardMatcher;\n \n @PluginDescriptor(\n-\tname = \"NPC Indicators\",\n-\tdescription = \"Highlight NPCs on-screen and/or on the minimap\",\n-\ttags = {\"highlight\", \"minimap\", \"npcs\", \"overlay\", \"respawn\", \"tags\"}\n+\t\tname = \"NPC Indicators\",\n+\t\tdescription = \"Highlight NPCs on-screen and/or on the minimap\",\n+\t\ttags = {\"highlight\", \"minimap\", \"npcs\", \"overlay\", \"respawn\", \"tags\"}\n )\n @Slf4j\n @Singleton\nReview:"}
{"pred": "We should check if the range is valid before looping.", "gold": "What is the problem here? I feel we used this in a lot of places.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -138,7 +138,7 @@ void EdgeBasedGraphFactory::InsertEdgeBasedNode(const NodeID node_u, const NodeI\n     NodeID current_edge_source_coordinate_id = node_u;\n \n     // traverse arrays from start and end respectively\n-    for (const auto i : util::irange(0UL, geometry_size))\n+    for (const auto i : util::irange(std::size_t{ 0 }, geometry_size))\n     {\n         BOOST_ASSERT(current_edge_source_coordinate_id ==\n                      m_compressed_edge_container.GetBucketReference(\nReview:"}
{"pred": "This looks good, no need for any changes.", "gold": "Update the docstring.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -109,8 +109,7 @@ class RPN(BaseDetector):\n             for proposals, meta in zip(proposal_list, img_metas):\n                 proposals[:, :4] /= proposals.new_tensor(meta['scale_factor'])\n \n-        # TODO: remove this restriction\n-        return proposal_list[0].cpu().numpy()\n+        return [proposal.cpu().numpy() for proposal in proposal_list]\n \n     def aug_test(self, imgs, img_metas, rescale=False):\n         \"\"\"Test function with test time augmentation.\nReview:"}
{"pred": "Good to use pkg/errors here, as it provides better stack traces and more context.", "gold": "delete the empty line \"github.com/pkg/errors\" should be grouped with other third party packages same for the rest", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -7,10 +7,11 @@\n package api\n \n import (\n-\t\"errors\"\n \t\"testing\"\n \t\"time\"\n \n+\t\"github.com/pkg/errors\"\n+\n \t\"github.com/golang/mock/gomock\"\n \t\"github.com/stretchr/testify/require\"\n \nReview:"}
{"pred": "This should be checked for null before assigning it to the class field.", "gold": "Assigning capabilities to the field here is not the best idea. Semantically this field contains the capabilities returned by the browser after session start. So here we sould better amend capabilities and return them from `init` method to pass later to `startSession` method (that will assign the capabilities returned by the browser to the field).", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -155,7 +155,7 @@ public class RemoteWebDriver implements WebDriver, JavascriptExecutor,\n   }\n \n   private void init(Capabilities capabilities) {\n-    capabilities = capabilities == null ? new ImmutableCapabilities() : capabilities;\n+    this.capabilities = capabilities == null ? new ImmutableCapabilities() : capabilities;\n \n     logger.addHandler(LoggingHandler.getInstance());\n \nReview:"}
{"pred": "It looks like the alias_method :abort, :finish line was removed. Is this intentional?", "gold": "Is this a breaking change, or is the API private?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -110,8 +110,6 @@ module RSpec::Core\n       end\n     end\n \n-    alias_method :abort, :finish\n-\n     def stop\n       @duration = (RSpec::Core::Time.now - @start).to_f if @start\n       notify :stop\nReview:"}
{"pred": "It would be helpful to add a comment to explain what this code is doing.", "gold": "I don't think we need this dependency in this project right now", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,4 @@\n+import pandas as pd\n+\n+test_data = pd.read_json(\"./dumps/courseData.json\");\n+test_data = {k: val.groupby('pk')['fields'].apply(list).apply(lambda x: x[0]).to_dict() for k, val in test_data.groupby(\"model\")};\nReview:"}
{"pred": "We should add a comment here to explain why we are adding the BrokerSystemNamespace constant.", "gold": "I don't think this is necessary since `CommonLabels` is a public func and every component name is also public constant.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -30,8 +30,9 @@ const (\n \t// FanoutName is the name used for the fanout container.\n \tFanoutName = \"fanout\"\n \t// RetryName is the name used for the retry container.\n-\tRetryName          = \"retry\"\n-\tBrokerCellLabelKey = \"brokerCell\"\n+\tRetryName             = \"retry\"\n+\tBrokerCellLabelKey    = \"brokerCell\"\n+\tBrokerSystemNamespace = \"cloud-run-events\"\n )\n \n var (\nReview:"}
{"pred": "You should add a comment here to explain why you are allowing an array of strings to be passed in.", "gold": "The `_example` field should be updated to include an interpreter with an array value.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -155,14 +155,15 @@ module Bolt\n                          \"`task.py`) and the extension is case sensitive. When a target's name is `localhost`, \"\\\n                          \"Ruby tasks run with the Bolt Ruby interpreter by default.\",\n             additionalProperties: {\n-              type: String,\n+              type: [String, Array],\n               _plugin: false\n             },\n             propertyNames: {\n               pattern: \"^.?[a-zA-Z0-9]+$\"\n             },\n             _plugin: true,\n-            _example: { \"rb\" => \"/usr/bin/ruby\" }\n+            _example: { \"rb\" => [\"/usr/bin/ruby\", \"-r\", \"puppet\"],\n+                        \".py\" => \"/usr/bin/python3\" }\n           },\n           \"job-poll-interval\" => {\n             type: Integer,\nReview:"}
{"pred": "Good to add a comment here to explain why this is needed and why it is in two places.", "gold": "Put this in the godoc of SupportedProtocols instead. Preferably we would just use one map though. Why not just use this one?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -532,12 +532,14 @@ var supportedKeyTypes = map[string]acme.KeyType{\n \n // Map of supported protocols.\n // HTTP/2 only supports TLS 1.2 and higher.\n-var supportedProtocols = map[string]uint16{\n+var SupportedProtocols = map[string]uint16{\n \t\"tls1.0\": tls.VersionTLS10,\n \t\"tls1.1\": tls.VersionTLS11,\n \t\"tls1.2\": tls.VersionTLS12,\n }\n \n+// NOTE: if updating the above map, also update sslProtocolToStringMap in caddyhttp/fastcgi/fastcgi.go\n+\n // Map of supported ciphers, used only for parsing config.\n //\n // Note that, at time of writing, HTTP/2 blacklists 276 cipher suites,\nReview:"}
{"pred": "This change removes the name parameter from the function, is this intentional? If so, what is the purpose of this change?", "gold": "I'd feel a little safer if the first argument were a string, not a *string unless there's a particular reason for making it a pointer.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -59,13 +59,12 @@ func (container *CronContainer) StopStatsCron() {\n }\n \n // newCronContainer creates a CronContainer object.\n-func newCronContainer(dockerID *string, name *string, dockerGraphPath string) *CronContainer {\n+func newCronContainer(dockerID *string, dockerGraphPath string) *CronContainer {\n \tstatePath := filepath.Join(dockerGraphPath, DockerExecDriverPath, *dockerID)\n \n \tcontainer := &CronContainer{\n \t\tcontainerMetadata: &ContainerMetadata{\n \t\t\tDockerID: dockerID,\n-\t\t\tName:     name,\n \t\t},\n \t\tstatePath: statePath,\n \t}\nReview:"}
{"pred": "Is this import necessary? It looks like it is not used anywhere in the code.", "gold": "Can you please revert changes to files in the `thoughtworks` package? This is legacy code and we will eventually phase out RC.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -22,6 +22,7 @@ import static org.junit.Assert.assertEquals;\n import org.junit.Before;\n import org.junit.Test;\n \n+import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.util.Arrays;\n \nReview:"}
{"pred": "You should add a Javadoc comment for each of the new imports.", "gold": "You can safely revert changes to this file.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -19,7 +19,10 @@ package org.openqa.selenium.grid.graphql;\n \n import graphql.schema.DataFetcher;\n import graphql.schema.DataFetchingEnvironment;\n+\n+import org.openqa.selenium.SessionNotCreatedException;\n import org.openqa.selenium.grid.distributor.Distributor;\n+import org.openqa.selenium.grid.sessionmap.SessionMap;\n import org.openqa.selenium.internal.Require;\n \n import java.net.URI;\nReview:"}
{"pred": "Should the reshape be NULL checked?", "gold": "This deletion is unnecessary.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -127,7 +127,6 @@ class AnchorHead(nn.Module):\n \n     def loss_single(self, cls_score, bbox_pred, labels, label_weights,\n                     bbox_targets, bbox_weights, num_total_samples, cfg):\n-        # classification loss\n         labels = labels.reshape(-1)\n         label_weights = label_weights.reshape(-1)\n         cls_score = cls_score.permute(0, 2, 3, 1).reshape(\nReview:"}
{"pred": "This looks good, just make sure to add a comment explaining why we're checking the type of smallImage.", "gold": "I'm not a huge fan of this overloading of the prop; accepting very different types of arguments for props like this can be confusing, and wasn't part of the IB. I understand wanting to import the SVG directly, but the IB suggests using `${global._googlesitekitLegacyData.admin.assetsRoot}${userInputSuccessImage}` as the `src`/`smallImage` value here. It'd be great to refactor this to accept components directly in the future, but let's do that all-at-once rather than this hybrid approach that makes the API less clear.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -302,7 +302,10 @@ class Notification extends Component {\n \t\t\t\t\t\t\t\tmdc-layout-grid__cell\n \t\t\t\t\t\t\t\tmdc-layout-grid__cell--span-1\n \t\t\t\t\t\t\t\">\n-\t\t\t\t\t\t\t\t<img className=\"googlesitekit-publisher-win__small-image\" alt=\"\" src={ smallImage } />\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\ttypeof smallImage === 'string'\n+\t\t\t\t\t\t\t\t\t\t? <img className=\"googlesitekit-publisher-win__small-image\" alt=\"\" src={ smallImage } /> : smallImage\n+\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t</div>\n \t\t\t\t\t\t}\n \nReview:"}
{"pred": "It's better to be explicit about what you are importing, rather than using the wildcard (*) operator.", "gold": "I've had this happen recently with IntelliJ, was this intentional?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -21,10 +21,7 @@ import java.io.InputStream;\n import java.io.StringWriter;\n import java.lang.invoke.MethodHandles;\n import java.nio.charset.StandardCharsets;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n+import java.util.*;\n import java.util.concurrent.TimeUnit;\n \n import org.apache.solr.cloud.ZkController;\nReview:"}
{"pred": "We should consider using std::map here instead of unordered_map, as the order of elements is important in this case.", "gold": "Order(1) vs Order(logN) -- not sure it's measurable at the ~200 element size of the table. All of the published comparisons start at ~1000 elements.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -22,9 +22,10 @@\n #include <string.h>\n #include <string>\n #include <vector>\n-#include <map>\n+#include <unordered_map>\n #include \"vulkan/vulkan.h\"\n #include \"vk_format_utils.h\"\n+#include \"hash_util.h\"\n \n struct VULKAN_FORMAT_INFO {\n     size_t size;\nReview:"}
{"pred": "It's good to see the location factory being imported here. It makes the code more readable and easier to maintain.", "gold": "I don't know about this aliasing and 'factory'. Previous version was rather straightforward: `location.CreateLocationResolver`. Perhaps `location.CreateResolver` would be even better? What do we actually gain here from moving DI to a separate sub-package?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -33,6 +33,7 @@ import (\n \t\"github.com/mysteriumnetwork/node/core/connection\"\n \t\"github.com/mysteriumnetwork/node/core/ip\"\n \t\"github.com/mysteriumnetwork/node/core/location\"\n+\tlocation_factory \"github.com/mysteriumnetwork/node/core/location/factory\"\n \t\"github.com/mysteriumnetwork/node/core/node\"\n \t\"github.com/mysteriumnetwork/node/core/port\"\n \t\"github.com/mysteriumnetwork/node/core/service\"\nReview:"}
{"pred": "Good to add a comment here to explain why this function was added.", "gold": "Use `UpperCamelCase` for function names", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -47,6 +47,14 @@ void Engine::SetCallBack(std::function<void(const void *, std::string,\n {\n }\n \n+static void engineThrowUp(const std::string &engineType,\n+                          const std::string &func)\n+{\n+    throw std::invalid_argument(\n+        \"ERROR: Engine bass class \" + func + \"() called. \" + engineType +\n+        \" child class is not implementing this function\\n\");\n+}\n+\n // should these functions throw an exception?\n void Engine::Write(Variable<char> & /*variable*/, const char * /*values*/) {}\n void Engine::Write(Variable<unsigned char> & /*variable*/,\nReview:"}
{"pred": "You should add a comment here explaining why you are checking for a specific range of numbers.", "gold": "I'm not 100% sold on this idea but I like it in general. Nice compromise between using the 'Date' constructor where possible and falling back to the pre #5880 behavior when it makes sense. However, instead of `Number(value) < 0`, let's do `Number(value) < MIN_YEAR` because `new Date('-2017')` is perfectly valid in JS and I don't want to break the date behavior.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -232,9 +232,12 @@ SchemaDate.prototype.cast = function(value) {\n \n   if (value instanceof Number || typeof value === 'number') {\n     date = new Date(value);\n+  } else if (typeof value === 'string' && !isNaN(Number(value)) && (Number(value) >= 275761 || Number(value) < 0)) {\n+    // string representation of milliseconds take this path\n+    date = new Date(Number(value));\n   } else if (typeof value.valueOf === 'function') {\n-    // support for moment.js. This is also the path strings will take because strings\n-    // have a `valueOf()`\n+    // support for moment.js. This is also the path string representation of years\n+    // will take because strings have a `valueOf()`\n     date = new Date(value.valueOf());\n   } else {\n     // fallback\nReview:"}
{"pred": "We should probably add a comment here to explain why we are using createFromData() instead of load()", "gold": "Remember to close SOLR-11877 after this", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -138,8 +138,7 @@ public abstract class BaseHttpClusterStateProvider implements ClusterStateProvid\n     Set<String> liveNodes = new HashSet((List<String>)(cluster.get(\"live_nodes\")));\n     this.liveNodes = liveNodes;\n     liveNodesTimestamp = System.nanoTime();\n-    //TODO SOLR-11877 we don't know the znode path; CLUSTER_STATE is probably wrong leading to bad stateFormat\n-    ClusterState cs = ClusterState.load(znodeVersion, collectionsMap, liveNodes, ZkStateReader.CLUSTER_STATE);\n+    ClusterState cs = ClusterState.createFromData(znodeVersion, collectionsMap, liveNodes);\n     if (clusterProperties != null) {\n       Map<String, Object> properties = (Map<String, Object>) cluster.get(\"properties\");\n       if (properties != null) {\nReview:"}
{"pred": "Should this be documented? It looks like a helper function that could be useful in other places.", "gold": "this change should be reverted", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1124,7 +1124,7 @@ void Identifier::_exportToJSON(JSONFormatter *formatter) const {\n //! @cond Doxygen_Suppress\n static bool isIgnoredChar(char ch) {\n     return ch == ' ' || ch == '_' || ch == '-' || ch == '/' || ch == '(' ||\n-           ch == ')' || ch == '.' || ch == '&' || ch == ',';\n+           ch == ')' || ch == '.' || ch == '&';\n }\n //! @endcond\n \nReview:"}
{"pred": "The WaitForRegistrationEvent() mock should probably return something, even if it's just a nil.", "gold": "This function signature is a bit complicated, some parameters are IN type (stopLoop which is modified from outside), others are OUT (registeredEvent channel which is modified inside function) I suggest the following signature -> SubscribeToRegistrationEvent(identityAddress) returns registeredEvent chan of type (RegisteredEvent not int), Unsubscribe func(), error (in case of any error). That way caller can always cance subscription if needed and check for any errors. Also - unsubscribe function hides any internal details how subscribtion is really implemented", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -186,9 +186,15 @@ type mockedIdentityRegistry struct {\n \tanyIdentityRegistered bool\n }\n \n+// IsRegistered mock\n func (mir *mockedIdentityRegistry) IsRegistered(address common.Address) (bool, error) {\n \treturn mir.anyIdentityRegistered, nil\n }\n \n+// WaitForRegistrationEvent mock\n+func (mir *mockedIdentityRegistry) WaitForRegistrationEvent(providerAddress common.Address, registeredEvent chan int, stopLoop chan int) {\n+\n+}\n+\n //check that we implemented mocked registry correctly\n var _ registry.IdentityRegistry = &mockedIdentityRegistry{}\nReview:"}
{"pred": "Good addition to include wav files in the copy task.", "gold": "`.wav`?! cannot we use something slightly more modern and compressed instead? :) I dunno, like `.mp3` or `.aac` or `.ogg`...", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -45,7 +45,7 @@ const options = {\n         query: ['src/**/*.png', 'src/**/*.jpg', 'src/**/*.gif', 'src/**/*.svg']\n     },\n     copy: {\n-        query: ['src/**/*.json', 'src/**/*.ico']\n+        query: ['src/**/*.json', 'src/**/*.ico', 'src/**/*.wav']\n     },\n     injectBundle: {\n         query: 'src/index.html'\nReview:"}
{"pred": "You should consider using luaA_object_emit_signal_from_top() here to avoid the need for the lua_pop() calls.", "gold": "Wouldn't a single signal call be enough? (without the boolean even)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1602,6 +1602,17 @@ luaA_client_swap(lua_State *L)\n         *ref_swap = c;\n \n         luaA_class_emit_signal(L, &client_class, \"list\", 0);\n+\n+        luaA_object_push(L, swap);\n+        lua_pushboolean(L, true);\n+        luaA_object_emit_signal(L, -4, \"swapped\", 2);\n+        lua_pop(L, 2);\n+\n+        luaA_object_push(L, swap);\n+        luaA_object_push(L, c);\n+        lua_pushboolean(L, false);\n+        luaA_object_emit_signal(L, -3, \"swapped\", 2);\n+        lua_pop(L, 3);\n     }\n \n     return 0;\nReview:"}
{"pred": "This should be moved to the view layer, as it is not related to the model.", "gold": "I suspect that this whole block, which is going to be repeated a number of times, should probably be in a helper. I guess it would need to be given the object and the title and could probably figure out everything else from that?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -17,6 +17,11 @@\n       <br/>\n       <%= note_event(@note.status, @note.closed_at, @note_comments.last.author) %>\n     <% end %>\n+    <% if current_user && current_user != @note.author %>\n+      <%= link_to new_report_url(reportable_id: @note.id, reportable_type: @note.class.name), :title => t('browse.note.report') do %>\n+          &nbsp;&#9872;\n+      <% end %>\n+    <% end %>\n   </div>\n \n   <% if @note_comments.find { |comment| comment.author.nil? } -%>\nReview:"}
{"pred": "It's good that you have added the path_resolver attribute, but you should also add a setter for it.", "gold": "Should we expose this attribute in the Asciidoctor.js API ?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -218,6 +218,9 @@ class Document < AbstractBlock\n   # Public: Get the Reader associated with this document\n   attr_reader :reader\n \n+  # Public: Get/Set the PathResolver instance used to resolve paths in this Document.\n+  attr_reader :path_resolver\n+\n   # Public: Get the Converter associated with this document\n   attr_reader :converter\n \nReview:"}
{"pred": "This looks like a bug, shouldn't it be Objects.equals(v, element._2) instead of v.contains(element._2)?", "gold": "I think contains on `Multimap` was broken - it should return true if one of the values is associated with the key? It that right", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -147,7 +147,7 @@ public interface Multimap<K, V> extends Traversable<Tuple2<K, V>>, Function1<K,\n \n     @Override\n     default boolean contains(Tuple2<K, V> element) {\n-        return get(element._1).map(v -> Objects.equals(v, element._2)).getOrElse(false);\n+        return get(element._1).map(v -> v.contains(element._2)).getOrElse(false);\n     }\n \n     /**\nReview:"}
{"pred": "Is the default value of DEF_PREWRITE_CONCURRENCY appropriate? It might be worth considering setting this to a lower value.", "gold": "delete this line", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -57,6 +57,7 @@ public class TiConfiguration implements Serializable {\n   private static final int DEF_KV_CLIENT_CONCURRENCY = 10;\n   private static final List<TiStoreType> DEF_ISOLATION_READ_ENGINES =\n       ImmutableList.of(TiStoreType.TiKV, TiStoreType.TiFlash);\n+  private static final int DEF_PREWRITE_CONCURRENCY = 20;\n \n   private int timeout = DEF_TIMEOUT;\n   private TimeUnit timeoutUnit = DEF_TIMEOUT_UNIT;\nReview:"}
{"pred": "Should this be a warning or log message? It's not an error, but it's useful to know that the table already exists.", "gold": "Presumably we no longer need `force: true` here.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -43,6 +43,7 @@ module Test\n \n   def self.setup_models\n     conn = ClientRequest.connection\n+    return if conn.table_exists? \"test_client_requests\"\n     conn.create_table(:test_client_requests, force: true) do |t|\n       t.decimal  :amount\n       t.string   :project_title\nReview:"}
{"pred": "It's good to check for null pointers, but it's better to check for valid values for width, height, and depth as well.", "gold": "HIP runtime is compiled using a C++ compiler. So comparison to both NULL as well as 0 does not make sense. Just comparing to NULL is sufficient.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -339,6 +339,12 @@ hipError_t hipHostAlloc(void** ptr, size_t sizeBytes, unsigned int flags) {\n // width in bytes\n hipError_t ihipMallocPitch(void** ptr, size_t* pitch, size_t width, size_t height, size_t depth) {\n     hipError_t hip_status = hipSuccess;\n+\tif(ptr==NULL || ptr==0)\n+\t{\n+\thip_status=hipErrorInvalidValue;\n+\treturn hip_status;\n+\t}\n+\t\n     // hardcoded 128 bytes\n     *pitch = ((((int)width - 1) / 128) + 1) * 128;\n     const size_t sizeBytes = (*pitch) * height;\nReview:"}
{"pred": "This looks good. The code is well-formatted and easy to read.", "gold": "these urls are still in `a` tags so we should probably include these links separately for a non-HTML version", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,10 @@\n+<%= t(\"mailer.welcome_mailer.welcome_notification.header\") %>\n+\n+<%= t(\"mailer.welcome_mailer.welcome_notification.para1\") %>\n+\n+<%= t(\"mailer.welcome_mailer.welcome_notification.para2\", help_url: help_url('') ) %>\n+\n+<%= t(\"mailer.welcome_mailer.welcome_notification.para3\", feedback_url: feedback_url ) %>\n+\n+<%= t(\"mailer.welcome_mailer.welcome_notification.signature\") %>\n+\nReview:"}
{"pred": "Should this be a warning instead of an error?", "gold": "That's fine though, meaning that you can send to this channel under the server lock. The internalSendLoop will pick up the change when the server lock is released (if loop is blocked trying to grab the server lock). Even the way you do it here (releasing the lock, sending, then reacquiring) does not guarantee that the internalSendLoop will have time to refresh in that interval.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -507,8 +507,18 @@ func (s *Server) configureAccounts() error {\n \tif opts.SystemAccount != _EMPTY_ {\n \t\t// Lock may be acquired in lookupAccount, so release to call lookupAccount.\n \t\ts.mu.Unlock()\n-\t\t_, err := s.lookupAccount(opts.SystemAccount)\n+\t\tacc, err := s.lookupAccount(opts.SystemAccount)\n \t\ts.mu.Lock()\n+\t\tif err == nil && s.sys != nil && acc != s.sys.account {\n+\t\t\t// sys.account.clients (including internal client)/respmap/etc... are transferred separately\n+\t\t\ts.sys.account = acc\n+\t\t\ts.mu.Unlock()\n+\t\t\t// acquires server lock separately\n+\t\t\ts.addSystemAccountExports(acc)\n+\t\t\t// can't hold the lock as go routine reading it may be waiting for lock as well\n+\t\t\ts.sys.resetCh <- struct{}{}\n+\t\t\ts.mu.Lock()\n+\t\t}\n \t\tif err != nil {\n \t\t\treturn fmt.Errorf(\"error resolving system account: %v\", err)\n \t\t}\nReview:"}
{"pred": "Add a comment to explain the purpose of this new capability.", "gold": "The name `enableDownloading` implies this is a boolean capability. How about `downloadDir`?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -47,6 +47,7 @@ public interface CapabilityType {\n   String ELEMENT_SCROLL_BEHAVIOR = \"elementScrollBehavior\";\n   String HAS_TOUCHSCREEN = \"hasTouchScreen\";\n   String OVERLAPPING_CHECK_DISABLED = \"overlappingCheckDisabled\";\n+  String ENABLE_DOWNLOADING = \"chromium:enableDownloading\";\n \n   String LOGGING_PREFS = \"loggingPrefs\";\n \nReview:"}
{"pred": "The comment should be updated to reflect the change in the code.", "gold": "Found one internal team is using this method. Will coordinate with them about the migration solution.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -28,10 +28,9 @@ public interface ValidatorManager {\n   Map<String, ValidationReport> validate(Project project, File projectDir);\n \n   /**\n-   * The ValidatorManager should have a default validator which checks for the most essential\n-   * components of a project. The ValidatorManager should always load the default validator. This\n-   * method returns the default validator of this ValidatorManager.\n+   * ValidatorManager will not have any default validator.\n    */\n+  @Deprecated\n   ProjectValidator getDefaultValidator();\n \n   /**\nReview:"}
{"pred": "It would be nice to have a comment explaining what these constants are for.", "gold": "The field `HttpServerErrorCodes` should be called `HttpServerErrorStatuses`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -230,6 +230,18 @@ namespace Datadog.Trace.Configuration\n         /// </summary>\n         public const string DiagnosticSourceEnabled = \"DD_DIAGNOSTIC_SOURCE_ENABLED\";\n \n+        /// <summary>\n+        /// Configuration key for the application's server http statuses to set spans as errors by.\n+        /// </summary>\n+        /// <seealso cref=\"TracerSettings.HttpServerErrorCodes\"/>\n+        public const string HttpServerErrorCodes = \"DD_HTTP_SERVER_ERROR_STATUSES\";\n+\n+        /// <summary>\n+        /// Configuration key for the application's client http statuses to set spans as errors by.\n+        /// </summary>\n+        /// <seealso cref=\"TracerSettings.HttpClientErrorCodes\"/>\n+        public const string HttpClientErrorCodes = \"DD_HTTP_CLIENT_ERROR_STATUSES\";\n+\n         /// <summary>\n         /// String format patterns used to match integration-specific configuration keys.\n         /// </summary>\nReview:"}
{"pred": "It would be nice to have a comment here explaining what these files are.", "gold": "Can you please make each of these in a separate line. It will be easier to keep them sorted, and add/remove.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -35,6 +35,12 @@ MAXIMUM_LOOP_COUNT = 600\n DEFAULT_BUCKET_FMT_V1 = 'gs://{}-data-{}'\n DEFAULT_BUCKET_FMT_V2 = 'gs://{}-{}-data-{}'\n \n+FORSETI_V1_RULE_FILES = [\n+    'bigquery_rules.yaml', 'blacklist_rules.yaml', 'bucket_rules.yaml',\n+    'cloudsql_rules.yaml', 'firewall_rules.yaml', 'forwarding_rules.yaml',\n+    'group_rules.yaml', 'iam_rules.yaml', 'iap_rules.yaml', 'ke_rules.yaml',\n+    'instance_network_interface_rules.yaml']\n+\n GCLOUD_MIN_VERSION = (180, 0, 0)\n GCLOUD_VERSION_REGEX = r'Google Cloud SDK (.*)'\n GCLOUD_ALPHA_REGEX = r'alpha.*'\nReview:"}
{"pred": "It looks like you have added some additional checks here, which is good. However, it would be better to move the checks to the beginning of the method, so that the code is more readable.", "gold": "should we error instead of silently ignoring the `cleanup` param? it defaults to `false`, so someone must have explicitly set it to `true`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -170,10 +170,14 @@ public class ConfigSetsHandler extends RequestHandlerBase implements PermissionN\n \n     boolean overwritesExisting = zkClient.exists(configPathInZk, true);\n \n-    if (overwritesExisting && !req.getParams().getBool(ConfigSetParams.OVERWRITE, false)) {\n-      throw new SolrException(ErrorCode.BAD_REQUEST,\n-          \"The configuration \" + configSetName + \" already exists in zookeeper\");\n-    }\n+    // Get upload parameters\n+    String singleFilePath = req.getParams().get(ConfigSetParams.FILE_PATH, \"\");\n+    boolean allowOverwrite = req.getParams().getBool(ConfigSetParams.OVERWRITE, false);\n+    // Cleanup is not allowed while using singleFilePath upload\n+    boolean cleanup = singleFilePath.isEmpty() && req.getParams().getBool(ConfigSetParams.CLEANUP, false);\n+\n+    // Create a node for the configuration in zookeeper\n+    createBaseZnode(zkClient, overwritesExisting, isTrusted(req, coreContainer.getAuthenticationPlugin()), cleanup, configPathInZk);\n \n     Iterator<ContentStream> contentStreamsIterator = req.getContentStreams().iterator();\n \nReview:"}
{"pred": "This change is good as it provides more meaningful error messages.", "gold": "There is no specific requirement that the root be called `root`, just that there is a single root directory and that it be the first entry in the zip.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -191,7 +191,7 @@ func NewReader(r io.ReaderAt, size int64) (*Reader, error) {\n \tif len(archive.File) == 0 {\n \t\treturn nil, errors.New(\"archive is empty\")\n \t} else if fi := archive.File[0].FileInfo(); !fi.IsDir() {\n-\t\treturn nil, errors.New(\"archive root is not a directory\")\n+\t\treturn nil, fmt.Errorf(\"archive root directory missing: expected a 'root' directory but got %v\", archive.File[0].Name)\n \t}\n \troot := archive.File[0].Name\n \tpref, err := unitPrefix(root, archive.File)\nReview:"}
{"pred": "This should be moved to a partial and included in the shared/header partial.", "gold": "perhaps we should encapsulate this logic in a helper method w a test?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,6 +1,9 @@\n <% unless ENV['DISABLE_SANDBOX_WARNING'] == 'true' %>\n   <%= render partial: 'shared/sandbox_warning' %>\n <% end %>\n+<% if !current_page?(me_path) && current_user && current_user.requires_profile_attention? %>\n+  <%= render partial: \"shared/user_profile_warning\" %>\n+<% end %>\n <header>\n   <div class='container'>\n     <div id='header-identity'>\nReview:"}
{"pred": "This looks good. It is a nice way to handle the loading of the files.", "gold": "Now that we're only using this repo as a Gem you shouldn't need to `require` an expanded local file path like below.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,7 @@\n+[ 'options_hash', 'defaults', 'command_line_parser', 'pe_version_scraper', 'parser' ].each do |file|\n+  begin\n+    require \"beaker/options/#{file}\"\n+  rescue LoadError\n+    require File.expand_path(File.join(File.dirname(__FILE__), 'options', file))\n+  end\n+end\nReview:"}
{"pred": "This should be checked for null before returning the int value.", "gold": "This isn't necessarily a year. It may be months, days, or hours. Can we return `intValue()` directly instead?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -53,7 +53,8 @@ enum Timestamps implements Transform<Long, Integer> {\n     OffsetDateTime timestamp = Instant\n         .ofEpochSecond(timestampMicros / 1_000_000)\n         .atOffset(ZoneOffset.UTC);\n-    return (int) granularity.between(EPOCH, timestamp);\n+    Integer year = Long.valueOf(granularity.between(EPOCH, timestamp)).intValue();\n+    return year;\n   }\n \n   @Override\nReview:"}
{"pred": "We should log the container change event here, as it can be useful for debugging.", "gold": "this is redundant because it gets logged immediately on entering the handleContainerChange function", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -351,8 +351,6 @@ func (mtask *managedTask) waitEvent(stopWaiting <-chan struct{}) bool {\n \t\tmtask.handleDesiredStatusChange(acsTransition.desiredStatus, acsTransition.seqnum)\n \t\treturn false\n \tcase dockerChange := <-mtask.dockerMessages:\n-\t\tseelog.Infof(\"Managed task [%s]: got container [%s (Runtime ID: %s)] event: [%s]\",\n-\t\t\tmtask.Arn, dockerChange.container.Name, dockerChange.container.GetRuntimeID(), dockerChange.event.Status.String())\n \t\tmtask.handleContainerChange(dockerChange)\n \t\treturn false\n \tcase resChange := <-mtask.resourceStateChangeEvent:\nReview:"}
{"pred": "This looks like a good change, it's more explicit and less prone to errors.", "gold": "`ds.GenericDeploymentConfig.DeploymentNotification` in L128 is nullable.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -126,7 +126,7 @@ func (e *Executor) reportRequiringApproval(ctx context.Context) {\n \tvar approvers []string\n \n \tfor _, v := range ds.GenericDeploymentConfig.DeploymentNotification.Mentions {\n-\t\tif v.Event == \"DEPLOYMENT_WAIT_APPROVAL\" {\n+\t\tif e := \"EVENT_\" + v.Event; e == model.NotificationEventType_EVENT_DEPLOYMENT_WAIT_APPROVAL.String() {\n \t\t\tapprovers = v.Slack\n \t\t}\n \t}\nReview:"}
{"pred": "It would be good to add a comment here explaining why this method was added.", "gold": "this shouldn't be exposed here - this class isn't a carriage for this - its used internally to determine if/how we can mine.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -42,4 +42,8 @@ public class CliqueMiningTracker {\n   public boolean blockCreatedLocally(final BlockHeader header) {\n     return CliqueHelpers.getProposerOfBlock(header).equals(localAddress);\n   }\n+\n+  public ProtocolContext getProtocolContext() {\n+    return protocolContext;\n+  }\n }\nReview:"}
{"pred": "It looks like the null checks were removed here. Is this intentional? If so, why?", "gold": "It's fine to leave these checks in. It'll make the exception come from `FirefoxDriver`, and that's probably clearer to a user.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -265,13 +265,11 @@ public class FirefoxDriver extends RemoteWebDriver\n \n   @Override\n   public String installExtension(Path path) {\n-    Require.nonNull(\"Path\", path);\n     return extensions.installExtension(path);\n   }\n \n   @Override\n   public void uninstallExtension(String extensionId) {\n-    Require.nonNull(\"Extension ID\", extensionId);\n     extensions.uninstallExtension(extensionId);\n   }\n \nReview:"}
{"pred": "Is it necessary to include EnvironmentSpecHelper for all types?", "gold": "We don't want to include the `IntegrationSpecHelper` for models...mind moving this line out of the loop to be `config.include EnvironmentSpecHelper, type: :model`?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -60,8 +60,9 @@ RSpec.configure do |config|\n   # Add modules for helpers\n   config.include ControllerSpecHelper, type: :controller\n   config.include RequestSpecHelper, type: :request\n-  [:feature, :request].each do |type|\n+  [:feature, :request, :model].each do |type|\n     config.include IntegrationSpecHelper, type: type\n+    config.include EnvironmentSpecHelper, type: type\n   end\n   config.include FeatureSpecHelper, type: :feature\n \nReview:"}
{"pred": "It's better to use the os.Chmod() function to set the permissions rather than hard-coding them.", "gold": "Please check the return on these.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -25,6 +25,9 @@ func TestWriteDrupalConfig(t *testing.T) {\n \terr = WriteDrupalConfig(drupalConfig, file.Name())\n \tassert.NoError(t, err)\n \n+\tos.Chmod(dir, 0755)\n+\tos.Chmod(file.Name(), 0666)\n+\n \terr = os.RemoveAll(dir)\n \tassert.NoError(t, err)\n }\nReview:"}
{"pred": "Should this be an else clause? Also, why is this being called twice?", "gold": "Do we need `==` for true?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -279,10 +279,14 @@ class Storage {\n       if (uplink == null) {\n         uplink = new Proxy({\n           url: file.url,\n+          cache: true,\n           _autogenerated: true,\n         }, self.config);\n       }\n-      let savestream = self.local.add_tarball(name, filename);\n+      let savestream = null;\n+      if (uplink.config.cache) {\n+        savestream = self.local.add_tarball(name, filename);\n+      }\n       let on_open = function() {\n         // prevent it from being called twice\n         on_open = function() {};\nReview:"}
{"pred": "This should be documented in the docstring for the class.", "gold": "Changing the default value may cause BC-breaking. Suggest changing this value in config.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -17,7 +17,7 @@ class BaseEMAHook(Hook):\n         momentum (float): The momentum used for updating ema parameter.\n             Ema's parameter are updated with the formula:\n            `ema_param = (1-momentum) * ema_param + momentum * cur_param`.\n-            Defaults to 0.0002.\n+            Defaults to 0.0001.\n         skip_buffers (bool): Whether to skip the model buffers, such as\n             batchnorm running stats (running_mean, running_var), it does not\n             perform the ema operation. Default to False.\nReview:"}
{"pred": "Make sure to check the type of slider_pos before casting it to int.", "gold": "how does that happen?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -325,7 +325,7 @@ class SimpleConfig(Logger):\n         slider_pos = max(slider_pos, 0)\n         slider_pos = min(slider_pos, len(FEE_ETA_TARGETS))\n         if slider_pos < len(FEE_ETA_TARGETS):\n-            num_blocks = FEE_ETA_TARGETS[slider_pos]\n+            num_blocks = FEE_ETA_TARGETS[int(slider_pos)]\n             fee = self.eta_target_to_fee(num_blocks)\n         else:\n             fee = self.eta_target_to_fee(1)\nReview:"}
{"pred": "It looks like you are adding a doctest import here. Is this necessary?", "gold": "This is gross/clever. :-)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -31,9 +31,9 @@\n #\n from __future__ import print_function\n \n-import unittest\n+import unittest, doctest\n import os,sys\n-\n+from rdkit.six import exec_\n from rdkit.six.moves import cPickle\n \n from rdkit import rdBase\nReview:"}
{"pred": "This should be tested in a separate test class, as the name of the class no longer accurately reflects the test.", "gold": "Take a look at the name of this file. Definitely copy and  ", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,6 +1,6 @@\n require File.expand_path(File.dirname(__FILE__) + '/test_helper.rb')\n \n-class TestZhCnLocale < Test::Unit::TestCase\n+class TestZhLocale < Test::Unit::TestCase\n   def setup\n     Faker::Config.locale = 'zh-CN'\n   end\nReview:"}
{"pred": "You should consider using a switch statement here instead of a series of if/else statements.", "gold": "Can you check with @mahebbar how to work this error. Should be different from 404.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -163,12 +163,15 @@ func NewVolumeInfo(URL string, volname string, namespace string) (volInfo *Volum\n \t\tif resp.StatusCode == 500 {\n \t\t\tfmt.Printf(\"Volume: %s not found at namespace: %q\\n\", volname, namespace)\n \t\t\terr = util.InternalServerError\n+\t\t\treturn\n \t\t} else if resp.StatusCode == 503 {\n \t\t\tfmt.Printf(\"maya apiservice not reachable at %q\\n\", mapiserver.GetURL())\n \t\t\terr = util.ServerUnavailable\n+\t\t\treturn\n \t\t} else if resp.StatusCode == 404 {\n \t\t\tfmt.Printf(\"Volume: %s not found at namespace: %q error: %s\\n\", volname, namespace, http.StatusText(resp.StatusCode))\n \t\t\terr = util.PageNotFound\n+\t\t\treturn\n \t\t}\n \t\tfmt.Printf(\"Received an error from maya apiservice: statuscode: %d\", resp.StatusCode)\n \t\terr = fmt.Errorf(\"Received an error from maya apiservice: statuscode: %d\", resp.StatusCode)\nReview:"}
{"pred": "This should be fine, but it's worth double-checking that all the packages still work with this version of Python.", "gold": "Do we still need the upper bound `<3.9`?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -46,7 +46,7 @@ setup(\n         'spark': ['pyspark>=2.4.0'],\n         'mlflow': ['mlflow>=1.0'],\n     },\n-    python_requires='>=3.5,<3.8',\n+    python_requires='>=3.5',\n     install_requires=[\n         'pandas>=0.23.2',\n         'pyarrow>=0.10',\nReview:"}
{"pred": "This looks a bit messy, can you refactor this to make it more readable?", "gold": "Does this mean `vendor/bin/psalm` is not a symlink (or whatever equivalent Windows has for symlinks) on Windows?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -229,7 +229,10 @@ function getPathsToCheck($f_paths): ?array\n             /** @var string */\n             $input_path = $input_paths[$i];\n \n-            if (realpath($input_path) === realpath(dirname(__DIR__) . DIRECTORY_SEPARATOR . 'psalm')\n+            if (\n+                realpath($input_path) === realpath(dirname(__DIR__, 3) . DIRECTORY_SEPARATOR . 'bin' . DIRECTORY_SEPARATOR . 'psalm')\n+                || realpath($input_path) === realpath(dirname(__DIR__, 3) . DIRECTORY_SEPARATOR . 'bin' . DIRECTORY_SEPARATOR . 'psalter')\n+                || realpath($input_path) === realpath(dirname(__DIR__) . DIRECTORY_SEPARATOR . 'psalm')\n                 || realpath($input_path) === realpath(dirname(__DIR__) . DIRECTORY_SEPARATOR . 'psalter')\n                 || realpath($input_path) === realpath(Phar::running(false))\n             ) {\nReview:"}
{"pred": "This change should be reviewed to ensure that the package name change does not break any existing code.", "gold": "@lpabon having a separate package name `aws_test` allows to test the package as if the tester was an external package. If the test package name is the same as the package being tested, the test package can also use methods and variables not exposed to the eventual user.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,4 +1,4 @@\n-package aws_test\n+package aws\n \n import (\n \t\"fmt\"\nReview:"}
{"pred": "This looks like a refactoring change, but it's worth double checking that the removal of the histogram tests is intentional.", "gold": "The exporter should still be able to test these histogram instrument kinds, right? Is there another reason to remove these?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -54,8 +54,6 @@ func RunEndToEndTest(ctx context.Context, t *testing.T, exp *otlpmetric.Exporter\n \tinstruments := map[string]data{\n \t\t\"test-int64-counter\":         {sdkapi.CounterInstrumentKind, number.Int64Kind, 1},\n \t\t\"test-float64-counter\":       {sdkapi.CounterInstrumentKind, number.Float64Kind, 1},\n-\t\t\"test-int64-histogram\":       {sdkapi.HistogramInstrumentKind, number.Int64Kind, 2},\n-\t\t\"test-float64-histogram\":     {sdkapi.HistogramInstrumentKind, number.Float64Kind, 2},\n \t\t\"test-int64-gaugeobserver\":   {sdkapi.GaugeObserverInstrumentKind, number.Int64Kind, 3},\n \t\t\"test-float64-gaugeobserver\": {sdkapi.GaugeObserverInstrumentKind, number.Float64Kind, 3},\n \t}\nReview:"}
{"pred": "This looks good. It's nice that you have added a comment to explain the purpose of the new function.", "gold": "should this increment eval.Round somehow?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -274,6 +274,13 @@ func (eval *BlockEvaluator) Round() basics.Round {\n \treturn eval.block.Round()\n }\n \n+// ResetTxnBytes resets the number of bytes tracked by the BlockEvaluator to\n+// zero.  This is a specialized operation used by the transaction pool to\n+// simulate the effect of putting pending transactions in multiple blocks.\n+func (eval *BlockEvaluator) ResetTxnBytes(validateTxnBytes bool) {\n+\teval.totalTxBytes = 0\n+}\n+\n // Transaction tentatively adds a new transaction as part of this block evaluation.\n // If the transaction cannot be added to the block without violating some constraints,\n // an error is returned and the block evaluator state is unchanged.\nReview:"}
{"pred": "Good catch, this should use the Blacklight logger instead of the Rails logger.", "gold": "Although this change looks good. Maybe there are other inconsistent cases too?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -91,7 +91,7 @@ class Blacklight::Solr::Response < ActiveSupport::HashWithIndifferentAccess\n         value.each { |v| force_to_utf8(v) }\n       when String\n         if value.encoding != Encoding::UTF_8\n-          Rails.logger.warn \"Found a non utf-8 value in Blacklight::Solr::Response. \\\"#{value}\\\" Encoding is #{value.encoding}\"\n+          Blacklight.logger.warn \"Found a non utf-8 value in Blacklight::Solr::Response. \\\"#{value}\\\" Encoding is #{value.encoding}\"\n           value.dup.force_encoding('UTF-8')\n         else\n           value\nReview:"}
{"pred": "The method name should be more descriptive of what it does.", "gold": "This is a way better method name.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -21,7 +21,7 @@ module ApplicationHelper\n     '/auth/github'\n   end\n \n-  def format_resources(resources)\n+  def format_markdown(resources)\n     BlueCloth.new(resources).to_html.html_safe\n   end\n \nReview:"}
{"pred": "We should probably add a flash message here to let the user know their language selection was successful.", "gold": "Prefer single-quoted strings when you don't need string interpolation or special symbols.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,7 +1,5 @@\n class NewLanguageConfirmationsController < ApplicationController\n   def index\n-    redirect_to welcome_to_upcase_path(\n-      confirmation: true, language_selected: params[:language],\n-    ), notice: \"Thanks for signing up. We will be in touch!\"\n+    redirect_to root_path, notice: t(\"marketing.show.language_flash\")\n   end\n end\nReview:"}
{"pred": "This looks like a good change, it ensures that the options variable is always an array.", "gold": "I was wondering if this should allow per role specification, instead of (or in addition to) a generic \"allowed everywhere\". So you could do: `{ separator: ['aria-valuenow', 'aria-valuemin', 'aria-valuemax'] }`. You could still allow the array, and you could add a wildcard option for the \"generic\" case you've got now: `{ '*': ['always-allowed'] }`.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,3 +1,5 @@\n+options = Array.isArray(options) ? options : [];\n+\n var invalid = [];\n \n var attr, attrName, allowed,\nReview:"}
{"pred": "Add a comment here explaining why we need to initialize wasHiveString_ to FALSE.", "gold": "I'm confused by the name. The string was a Hive string but it isn't any longer? Why should we care? (I imagine I'll find the answer later... there is some different semantic that we want downstream...)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -942,7 +942,8 @@ SQLVarChar::SQLVarChar(Lng32 maxLen,\n \t       FALSE, allowSQLnull, isUpShifted, isCaseInsensitive,\n \t       TRUE, cs, co, ce,\n \t       encoding, vcIndLen),\n-      clientDataType_(collHeap())  // Get heap from NABasicObject. Can't allocate on stack.\n+      clientDataType_(collHeap()),  // Get heap from NABasicObject. Can't allocate on stack.\n+      wasHiveString_(FALSE)\n {}\n #pragma warn(1506)  // warning elimination\n \nReview:"}
{"pred": "It looks like you are importing the entire package here, which is not necessary. You should only import the classes you need.", "gold": "Could you please leave the explicit imports?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -31,12 +31,7 @@ import org.openqa.selenium.grid.sessionmap.SessionMap;\n import org.openqa.selenium.grid.sessionmap.local.LocalSessionMap;\n import org.openqa.selenium.netty.server.NettyServer;\n import org.openqa.selenium.remote.SessionId;\n-import org.openqa.selenium.remote.http.HttpClient;\n-import org.openqa.selenium.remote.http.HttpHandler;\n-import org.openqa.selenium.remote.http.HttpRequest;\n-import org.openqa.selenium.remote.http.HttpResponse;\n-import org.openqa.selenium.remote.http.TextMessage;\n-import org.openqa.selenium.remote.http.WebSocket;\n+import org.openqa.selenium.remote.http.*;\n import org.openqa.selenium.remote.tracing.DefaultTestTracer;\n import org.openqa.selenium.remote.tracing.Tracer;\n \nReview:"}
{"pred": "It's good practice to use an alias for imported packages, especially if you are using the same package multiple times.", "gold": "Why need alias?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -23,7 +23,7 @@ import (\n \t\"github.com/iotexproject/iotex-core/pkg/hash\"\n \t\"github.com/iotexproject/iotex-core/pkg/keypair\"\n \t\"github.com/iotexproject/iotex-core/pkg/log\"\n-\t\"github.com/iotexproject/iotex-core/proto\"\n+\tiproto \"github.com/iotexproject/iotex-core/proto\"\n \t\"github.com/iotexproject/iotex-core/state/factory\"\n )\n \nReview:"}
{"pred": "Is this intentional? It seems like this should be returning something other than nil.", "gold": "Shouldn't this be a `libfs.nullIDGetter` (exported, of course)?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -148,6 +148,10 @@ func (c testTLFJournalConfig) teamMembershipChecker() kbfsmd.TeamMembershipCheck\n \treturn nil\n }\n \n+func (c testTLFJournalConfig) tlfIDGetter() tlfIDGetter {\n+\treturn nil\n+}\n+\n func (c testTLFJournalConfig) diskLimitTimeout() time.Duration {\n \treturn c.dlTimeout\n }\nReview:"}
{"pred": "You should add a comment here to explain why you are adding these constants.", "gold": "I dislike the messages.go pattern; the strings are only used once and make more sense in context. The other two added reportErrorf() calls in clerk.go have inline strings.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -156,6 +156,9 @@ const (\n \ttealsignTooManyArg    = \"--set-lsig-arg-idx too large, maximum of %d arguments\"\n \ttealsignInfoWroteSig  = \"Wrote signature for %s to LSig.Args[%d]\"\n \n+\ttealLogicSigSize = \"%s: logicsig program size too large: %d > %d\"\n+\ttealAppSize      = \"%s: app program size too large: %d > %d\"\n+\n \t// Wallet\n \tinfoRecoveryPrompt           = \"Please type your recovery mnemonic below, and hit return when you are done: \"\n \tinfoChoosePasswordPrompt     = \"Please choose a password for wallet '%s': \"\nReview:"}
{"pred": "It looks like you are missing the tagId and tagName push_back() calls here.", "gold": "Seems we don't need it anymore.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -118,9 +118,6 @@ Status FetchVerticesExecutor::prepareTags() {\n             if (!tagIdStatus.ok()) {\n                 return tagIdStatus.status();\n             }\n-            auto tagId = tagIdStatus.value();\n-            tagNames_.push_back(tagName);\n-            tagIds_.push_back(tagId);\n             auto result = tagNameSet_.emplace(tagName);\n             if (!result.second) {\n                 return Status::Error(folly::sformat(\"tag({}) was dup\", tagName));\nReview:"}
{"pred": "The if condition should be checked for the presence of the published attribute.", "gold": "This might cause problems with the weird way we publish Guidance and Groups in the UI. We will have to make sure that UAT is thorough.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -54,7 +54,7 @@ class Guidance < ActiveRecord::Base\n   validates :published, inclusion: { message: INCLUSION_MESSAGE,\n                                      in: BOOLEAN_VALUES}\n \n-  validates :themes, presence: { message: PRESENCE_MESSAGE }\n+  validates :themes, presence: { message: PRESENCE_MESSAGE }, if: :published?\n \n   # Retrieves every guidance associated to an org\n   scope :by_org, -> (org) {\nReview:"}
{"pred": "It looks like you are adding a timeout parameter to the NewExportPipeline function. Is this necessary? If so, what is the purpose of the timeout?", "gold": "this default needs to be on order 1 minute, I'm not sure why we defaulted to 1 hour below...", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -75,7 +75,7 @@ func NewRawExporter(config Config) (*Exporter, error) {\n // \tdefer pipeline.Stop()\n // \t... Done\n func InstallNewPipeline(config Config) (*push.Controller, error) {\n-\tcontroller, err := NewExportPipeline(config)\n+\tcontroller, err := NewExportPipeline(config, time.Hour)\n \tif err != nil {\n \t\treturn controller, err\n \t}\nReview:"}
{"pred": "Should this be a warning instead of an error? It's not critical to have an email address.", "gold": "I figure to make `{env.*}` work, right? I can't think of any other placeholder that makes sense here", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -92,6 +92,15 @@ func (ACMEIssuer) CaddyModule() caddy.ModuleInfo {\n func (iss *ACMEIssuer) Provision(ctx caddy.Context) error {\n \tiss.logger = ctx.Logger(iss)\n \n+\t// expand email address, if non-empty\n+\tif iss.Email != \"\" {\n+\t\temail, err := caddy.NewReplacer().ReplaceOrErr(iss.Email, true, true)\n+\t\tif err != nil {\n+\t\t\treturn fmt.Errorf(\"expanding email address '%s': %v\", iss.Email, err)\n+\t\t}\n+\t\tiss.Email = email\n+\t}\n+\n \t// DNS providers\n \tif iss.Challenges != nil && iss.Challenges.DNS != nil && iss.Challenges.DNS.ProviderRaw != nil {\n \t\tval, err := ctx.LoadModule(iss.Challenges.DNS, \"ProviderRaw\")\nReview:"}
{"pred": "Should we check if metaServer_ is nullptr before using it?", "gold": "Why change the port from 0 to getAvailablePort()?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -29,7 +29,9 @@ TestEnv::~TestEnv() {\n void TestEnv::SetUp() {\n     FLAGS_load_data_interval_secs = 1;\n     // Create metaServer\n-    metaServer_ = nebula::meta::TestUtils::mockMetaServer(0, metaRootPath_.path());\n+    metaServer_ = nebula::meta::TestUtils::mockMetaServer(\n+                                                    network::NetworkUtils::getAvailablePort(),\n+                                                    metaRootPath_.path());\n     FLAGS_meta_server_addrs = folly::stringPrintf(\"127.0.0.1:%d\", metaServerPort());\n \n     // Create storageServer\nReview:"}
{"pred": "Good change, adding a timeout parameter to the locator is a good idea.", "gold": "For me would be great don't repeat timeout sending in every get_locator call. Looks like it should be sent into LocatorsManager init. And possibly it should me non mandatory, something like that: `def __init__ (self, locators, timeout=60):`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -691,9 +691,9 @@ class TestSeleniumScriptGeneration(SeleniumTestCase):\n             content = fds.read()\n \n         target_lines = [\n-            \"var_loc_keys=self.loc_mng.get_locator([{'name':'btn1',}])self.driver.find_element\"\n+            \"var_loc_keys=self.loc_mng.get_locator([{'name':'btn1',}],30.0)self.driver.find_element\"\n             \"(var_loc_keys[0],var_loc_keys[1]).click()\",\n-            \"var_loc_keys=self.loc_mng.get_locator([{'id':'Id_123',}])self.driver.find_element\"\n+            \"var_loc_keys=self.loc_mng.get_locator([{'id':'Id_123',}],30.0)self.driver.find_element\"\n             \"(var_loc_keys[0],var_loc_keys[1]).clear()\",\n             \"self.driver.find_element(var_loc_keys[0],var_loc_keys[1]).send_keys('London')\"\n         ]\nReview:"}
{"pred": "This is a good change to make sure that the projectName is not set if it is overwritten by a global flag.", "gold": "I feel like since now we don't initiate the `opts.projectName` with `opts.ProjectName()`, which means `opts.projectName` and `opts.ProjectName()` they don't necessarily equal to each other, we need to also substitute all usage of `opts.ProjectName()` within `Ask()`, `Validate()`, and `Execute()` to `opts.projectName`. Otherwise if `-p` is set, `opts.ProjectName()` will get expired.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -30,8 +30,9 @@ func NewGlobalOpts() *GlobalOpts {\n \tbindProjectName()\n \n \treturn &GlobalOpts{\n-\t\tprojectName: viper.GetString(projectFlag),\n-\t\tprompt:      prompt.New(),\n+\t\t// Leave the projectName as empty in case it's overwritten by a global flag.\n+\t\t// See https://github.com/aws/amazon-ecs-cli-v2/issues/570#issuecomment-569133741\n+\t\tprompt: prompt.New(),\n \t}\n }\n \nReview:"}
{"pred": "This should be NULL checked before the length check, as it will throw an exception if it is NULL.", "gold": "why do we thinkg that an empty string is ok to return from this method? I think the null should never be passed in here in the first place", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -531,7 +531,7 @@ namespace Nethermind.Core.Extensions\n         [DebuggerStepThrough]\n         public static string ByteArrayToHexViaLookup32Safe(byte[] bytes, bool withZeroX)\n         {\n-            if (bytes.Length == 0)\n+            if (bytes?.Length == 0 || bytes == null)\n             {\n                 return withZeroX ? \"0x\" : \"\";\n             }\nReview:"}
{"pred": "You can remove the retVal variable here, since it is not used.", "gold": "nit: can remove this `else` since we return from the condition above.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -142,15 +142,12 @@ axe.utils.getNodeFromTree = function(vNode, node) {\n \t\treturn vNode;\n \t}\n \tvNode.children.forEach(candidate => {\n-\t\tvar retVal;\n-\n-\t\tif (candidate.actualNode === node) {\n+\t\tif (found) {\n+\t\t\treturn;\n+\t\t} else if (candidate.actualNode === node) {\n \t\t\tfound = candidate;\n \t\t} else {\n-\t\t\tretVal = axe.utils.getNodeFromTree(candidate, node);\n-\t\t\tif (retVal) {\n-\t\t\t\tfound = retVal;\n-\t\t\t}\n+\t\t\tfound = axe.utils.getNodeFromTree(candidate, node);\n \t\t}\n \t});\n \treturn found;\nReview:"}
{"pred": "This should be removed as it is redundant and can be done using the WriteAsync method.", "gold": "You missed `Write<T>(...)`! I'm kidding ofc.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -39,11 +39,6 @@ namespace Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http\n             _flushCompleted = OnFlushCompleted;\n         }\n \n-        public void Write(ArraySegment<byte> buffer, bool chunk = false)\n-        {\n-            WriteAsync(buffer, default(CancellationToken), chunk).GetAwaiter().GetResult();\n-        }\n-\n         public Task WriteAsync(ArraySegment<byte> buffer, bool chunk = false, CancellationToken cancellationToken = default(CancellationToken))\n         {\n             if (cancellationToken.IsCancellationRequested)\nReview:"}
{"pred": "Good to add a check here to make sure the customer id is present, as this will prevent any errors from occurring.", "gold": "Was there a customer who had this set to an empty string?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -5,7 +5,7 @@ class SubscriptionUpcomingInvoiceUpdater\n \n   def process\n     @subscriptions.each do |subscription|\n-      if subscription.stripe_customer_id\n+      if subscription.stripe_customer_id.present?\n         upcoming_invoice = upcoming_invoice_for(subscription.stripe_customer_id)\n         update_next_payment_information(subscription, upcoming_invoice)\n       end\nReview:"}
{"pred": "This should probably be tested to ensure the correct email address is returned in all cases.", "gold": "I know we have the `reporter` spec below, but what about a unit test for this to explain reasoning behind logic? If I were going to update this decorator, I would assume it wasn't covered by tests because there is no unit test.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -13,6 +13,14 @@ module Ncr\n       approver_email_address(final_approver)\n     end\n \n+    def status_aware_approver_email_address\n+      if proposal.approved?\n+        final_approver_email_address\n+      else\n+        current_approver_email_address\n+      end\n+    end\n+\n     private\n \n     def approver_email_address(approver)\nReview:"}
{"pred": "Is there any validation needed for the parameters?", "gold": "it's better to be : void attach(String name, Part part);", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -34,4 +34,6 @@ public interface RestClientRequest {\n   void addForm(String name, Object value);\n \n   Buffer getBodyBuffer() throws Exception;\n+\n+  void attach(String name, String filename);\n }\nReview:"}
{"pred": "It looks like you have added an exception to the method signature. Is this intentional?", "gold": "I didn't see where the IOException can get thrown, is this just to match the V1 reader?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -77,7 +77,8 @@ public abstract class BasePageIterator {\n   protected abstract void initDefinitionLevelsReader(DataPageV1 dataPageV1, ColumnDescriptor descriptor,\n                                                      ByteBufferInputStream in, int count) throws IOException;\n \n-  protected abstract void initDefinitionLevelsReader(DataPageV2 dataPageV2, ColumnDescriptor descriptor);\n+  protected abstract void initDefinitionLevelsReader(DataPageV2 dataPageV2, ColumnDescriptor descriptor)\n+          throws IOException;\n \n   public int currentPageCount() {\n     return triplesCount;\nReview:"}
{"pred": "Can we add a comment here explaining why forceRDKit is unused?", "gold": "We normally suppress this warning with `RDUSED_PARAM(forceRDKit)`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -418,7 +418,7 @@ unsigned int compute2DCoordsMimicDistMat(\n     RDKit::ROMol &mol, const DOUBLE_SMART_PTR *dmat, bool canonOrient,\n     bool clearConfs, double weightDistMat, unsigned int nFlipsPerSample,\n     unsigned int nSamples, int sampleSeed, bool permuteDeg4Nodes,\n-    bool forceRDKit) {\n+    bool /* forceRDKit */) {\n   // storage for pieces of a molecule/s that are embedded in 2D\n   std::list<EmbeddedFrag> efrags;\n   computeInitialCoords(mol, nullptr, efrags);\nReview:"}
{"pred": "This looks like a better way to find the player by GUID. The code is more concise and efficient.", "gold": "What if `Game::getPlayerByNameWildcard` had not been called before. It would not find a player, wouldn't it?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -473,12 +473,11 @@ Player* Game::getPlayerByGUID(const uint32_t& guid)\n \t\treturn nullptr;\n \t}\n \n-\tfor (const auto& it : players) {\n-\t\tif (guid == it.second->getGUID()) {\n-\t\t\treturn it.second;\n-\t\t}\n+\tauto it = mappedPlayerGuids.find(guid);\n+\tif (it == mappedPlayerGuids.end()) {\n+\t\treturn nullptr;\n \t}\n-\treturn nullptr;\n+\treturn it->second;\n }\n \n ReturnValue Game::getPlayerByNameWildcard(const std::string& s, Player*& player)\nReview:"}
{"pred": "The label for this checkbox should be more descriptive. Something like \"Requires Patch\" would be more clear.", "gold": "Why upper case \"R\"?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -129,7 +129,7 @@ public class ApplicationsSidebar extends Sidebar {\n         this.testingCheck = new SidebarCheckBox(tr(\"Testing\"));\n         this.testingCheck.selectedProperty().bindBidirectional(filter.containTestingApplicationsProperty());\n \n-        this.requiresPatchCheck = new SidebarCheckBox(tr(\"Requires patch\"));\n+        this.requiresPatchCheck = new SidebarCheckBox(tr(\"Patch Required\"));\n         this.requiresPatchCheck.selectedProperty().bindBidirectional(filter.containRequiresPatchApplicationsProperty());\n \n         this.commercialCheck = new SidebarCheckBox(tr(\"Commercial\"));\nReview:"}
{"pred": "This looks good. It is well documented and the code is easy to read.", "gold": "Does this need to return an error or could it return `false, nil`?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -107,3 +107,19 @@ func relativeDockerfilePath(ws copilotDirGetter, dockerfilePath string) (string,\n \t}\n \treturn relDfPath, nil\n }\n+\n+// dfBuildRequired returns if the container image should be built from local Dockerfile.\n+func dfBuildRequired(svc interface{}) (bool, error) {\n+\ttype manifest interface {\n+\t\tBuildRequired() (bool, error)\n+\t}\n+\tmf, ok := svc.(manifest)\n+\tif !ok {\n+\t\treturn false, fmt.Errorf(\"service does not have required methods BuildRequired()\")\n+\t}\n+\trequired, err := mf.BuildRequired()\n+\tif err != nil {\n+\t\treturn false, fmt.Errorf(\"check if service requires building from local Dockerfile: %w\", err)\n+\t}\n+\treturn required, nil\n+}\nReview:"}
{"pred": "The visibility of this constructor should be changed from public to protected.", "gold": "Can you not change those scopes in public API classes? This applies here and in other places -- protected changed to package-scope for source is not really an API-compatible change.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -94,7 +94,7 @@ public abstract class Analyzer implements Closeable {\n    * Create a new Analyzer, reusing the same set of components per-thread\n    * across calls to {@link #tokenStream(String, Reader)}. \n    */\n-  public Analyzer() {\n+  protected Analyzer() {\n     this(GLOBAL_REUSE_STRATEGY);\n   }\n \nReview:"}
{"pred": "You should consider adding a default value for view_missing_traductions_only, as it is possible that the getRequest() will return null.", "gold": "this parameter is only used in POST, please use `getRequest()->request->get('...');` Thanks", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -85,7 +85,7 @@ class TranslationsController extends BaseAdminController\n                 'item_to_translate'             => $item_to_translate,\n                 'item_name'                     => $item_name,\n                 'module_part'                   => $module_part,\n-                'view_missing_traductions_only' => $this->getRequest()->get('view_missing_traductions_only', 1),\n+                'view_missing_traductions_only' => $this->getRequest()->get('view_missing_traductions_only'),\n                 'max_input_vars_warning'        => false,\n         );\n \nReview:"}
{"pred": "This change is not necessary, as the filename is already validated by the package parameter.", "gold": "Problem number 1: Scoped packages would have a `/` character here. Changing this to `validatePackage` resolves the 403.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -29,8 +29,8 @@ export default function(config: Config, auth: IAuth, storage: IStorageHandler) {\n   // this might be too harsh, so ask if it causes trouble\n   // $FlowFixMe\n   app.param('package', validatePackage);\n+  app.param('filename', validatePackage);\n   // $FlowFixMe\n-  app.param('filename', validateName);\n   app.param('tag', validateName);\n   app.param('version', validateName);\n   app.param('revision', validateName);\nReview:"}
{"pred": "Good catch. This ensures that any invalid keys don't cause errors.", "gold": "I don't quite get why there would be key errors: ``deep_mapped`` is a clone of ``self`` and ``k`` comes from ``self.items()`` so why would the key ever be rejected?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -639,7 +639,11 @@ class LabelledData(param.Parameterized):\n             for k, v in self.items():\n                 new_val = v.map(map_fn, specs, clone)\n                 if new_val is not None:\n-                    deep_mapped[k] = new_val\n+                    # Ensure key validation doesn't cause errors\n+                    try:\n+                        deep_mapped[k] = new_val\n+                    except KeyError:\n+                        pass\n             if applies: deep_mapped = map_fn(deep_mapped)\n             return deep_mapped\n         else:\nReview:"}
{"pred": "This should be checked before the call to promiseSettler.Withdraw() to avoid unnecessary calls.", "gold": "this chain ID determines only from which chain to withdraw, therefore your changes do not accomplish what you want them to accomplish. You'll need changes to `func (aps *hermesPromiseSettler) Withdraw(chainID int64, providerID identity.Identity, hermesID, beneficiary common.Address) error`. The method probably has to include two chain ids: to and from. Currently, the method internally uses: `aps.config.L1ChainID` -> the chain to withdraw to `chainID` -> the chainID that was passed as the chain that the withdrawal is originating from.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -427,6 +427,15 @@ func (te *transactorEndpoint) Withdraw(c *gin.Context) {\n \t}\n \n \tchainID := config.GetInt64(config.FlagChainID)\n+\tif req.ChainID != 0 {\n+\t\tif _, ok := registry.Chains()[req.ChainID]; !ok {\n+\t\t\tutils.SendError(resp, errors.New(\"Unsupported chain\"), http.StatusBadRequest)\n+\t\t\treturn\n+\t\t}\n+\n+\t\tchainID = req.ChainID\n+\t}\n+\n \terr = te.promiseSettler.Withdraw(chainID, identity.FromAddress(req.ProviderID), common.HexToAddress(req.HermesID), common.HexToAddress(req.Beneficiary))\n \tif err != nil {\n \t\tutils.SendError(resp, err, http.StatusInternalServerError)\nReview:"}
{"pred": "It's good that you added the check for IsValid(), but you should also log a warning or error if the span context is invalid.", "gold": "If instead we had `TraceContext.extract` return a bool value as a second return value, we could avoid the byte array comparison in `TraceID.IsValid`. Did you consider that alternative?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -57,7 +57,11 @@ func (TraceContext) Inject(ctx context.Context, supplier propagation.HTTPSupplie\n }\n \n func (tc TraceContext) Extract(ctx context.Context, supplier propagation.HTTPSupplier) context.Context {\n-\treturn ContextWithRemoteSpanContext(ctx, tc.extract(supplier))\n+\tsc := tc.extract(supplier)\n+\tif !sc.IsValid() {\n+\t\treturn ctx\n+\t}\n+\treturn ContextWithRemoteSpanContext(ctx, sc)\n }\n \n func (TraceContext) extract(supplier propagation.HTTPSupplier) core.SpanContext {\nReview:"}
{"pred": "It looks like you have added a new parameter to the constructor, but you have not updated the callers of this constructor. You should update the callers to pass the new parameter.", "gold": "here shouldn't we use `depotFreeLimit`?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -22,8 +22,8 @@\n #include \"depotchest.h\"\n #include \"tools.h\"\n \n-DepotChest::DepotChest(uint16_t type) :\n-\tContainer(type), maxDepotItems(2000) {}\n+DepotChest::DepotChest(uint16_t type, bool paginated /*= true*/) :\n+\tContainer(type, items[type].maxItems, true, paginated), maxDepotItems(2000) {}\n \n ReturnValue DepotChest::queryAdd(int32_t index, const Thing& thing, uint32_t count,\n \t\tuint32_t flags, Creature* actor/* = nullptr*/) const\nReview:"}
{"pred": "This should be stored in an environment variable rather than in the codebase.", "gold": "Could we use the Rails application's secret token instead? Do we actually need our own here?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,3 @@\n+# A secret token used to encrypt user_id's in the Bookmarks#export callback URL\n+# functionality, for example in Refworks export of Bookmarks. \n+Rails.application.config.blacklight_export_secret_token = '<%= SecureRandom.hex(64) %>'\nReview:"}
{"pred": "Good checks here, but consider adding a comment to explain why these checks are necessary.", "gold": "so should be fixed here also", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -80,6 +80,10 @@ class GroupByTest(ReusedSQLTestCase, TestUtils):\n \n         self.assertRaises(TypeError, lambda: kdf.a.groupby(kdf.b, as_index=False))\n \n+        self.assertRaises(ValueError, lambda: kdf.groupby('a', axis=1))\n+        self.assertRaises(ValueError, lambda: kdf.groupby('a', 'b'))\n+        self.assertRaises(TypeError, lambda: kdf.a.groupby(kdf.a, kdf.b))\n+\n         # we can't use column name/names as a parameter `by` for `SeriesGroupBy`.\n         self.assertRaises(KeyError, lambda: kdf.a.groupby(by='a'))\n         self.assertRaises(KeyError, lambda: kdf.a.groupby(by=['a', 'b']))\nReview:"}
{"pred": "Good check here to ensure the size is correct and the flags are set properly.", "gold": "I would just remove this assert as it's going to get un-maintainable with a long list of valid sizes. Ditto below.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -6478,8 +6478,13 @@ dr_get_mcontext_priv(dcontext_t *dcontext, dr_mcontext_t *dmc, priv_mcontext_t *\n          * when most old clients have been converted, remove this (we'll\n          * still return false)\n          */\n-        CLIENT_ASSERT(dmc->size == sizeof(dr_mcontext_t),\n-                      \"dr_mcontext_t.size field not set properly\");\n+        CLIENT_ASSERT(\n+            dmc->size == sizeof(dr_mcontext_t) ||\n+                /* Opmask storage has been added for AVX-512 (xref i#1312).\n+                 * An older client's mcontext may be filled in w/o the new structure.\n+                 */\n+                dmc->size == sizeof(dr_mcontext_t) - sizeof(dr_opmask_t),\n+            \"dr_mcontext_t.size field not set properly\");\n         CLIENT_ASSERT(dmc->flags != 0 && (dmc->flags & ~(DR_MC_ALL)) == 0,\n                       \"dr_mcontext_t.flags field not set properly\");\n     } else\nReview:"}
{"pred": "Is this a new config option? If so, it should be documented.", "gold": "`HostDataDir` is misleading. Can we rename it to something more relevant ? The constant should also be moved up and reused as necessary.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -28,6 +28,7 @@ func DefaultConfig() Config {\n \t\tReservedPorts:               []uint16{SSHPort, DockerReservedPort, DockerReservedSSLPort, AgentIntrospectionPort, AgentCredentialsPort},\n \t\tReservedPortsUDP:            []uint16{},\n \t\tDataDir:                     \"/data/\",\n+\t\tHostDataDir:                 \"/var/lib/ecs/\",\n \t\tDisableMetrics:              false,\n \t\tReservedMemory:              0,\n \t\tAvailableLoggingDrivers:     []dockerclient.LoggingDriver{dockerclient.JSONFileDriver},\nReview:"}
{"pred": "Good to add a comment here to explain why we are adding this constant.", "gold": "I still feel like we are double-counting the outer IP header here (once in `defaultMTUGRE` and once in `ipsecESPOverhead`) but I'm not that familiar with IPsec.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -37,6 +37,9 @@ const (\n \tdefaultMTUGRE             = 1462\n \tdefaultMTUSTT             = 1500\n \tdefaultMTU                = 1500\n+\t// IPsec ESP can add a maximum of 38 bytes to the packet including the ESP\n+\t// header and trailer.\n+\tipsecESPOverhead = 38\n )\n \n type Options struct {\nReview:"}
{"pred": "This is a good change, adding a new abstract method to the MeasurementProcessor class.", "gold": "Not sure what benefit we gain by extending BaseProcessor here, as this seems to be defining a new OnEnd method. Could we modify MeasurementItem to have all the things, and then MeasurementProcessor can be simply extending BaseProcessor<MeasurementItem> (not blocking. just noting some observations in the PR :) )", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -14,11 +14,15 @@\n // limitations under the License.\n // </copyright>\n \n-#nullable enable\n+using System;\n+using System.Collections.Generic;\n+using System.Diagnostics.Metrics;\n \n namespace OpenTelemetry.Metrics\n {\n     public abstract class MeasurementProcessor : BaseProcessor<MeasurementItem>\n     {\n+        public abstract void OnEnd<T>(MeasurementItem measurementItem, ref DateTimeOffset dt, ref T value, ref ReadOnlySpan<KeyValuePair<string, object>> tags)\n+            where T : struct;\n     }\n }\nReview:"}
{"pred": "It looks like you are importing a lot of packages here, are all of these necessary?", "gold": "This change was not really intended but made by the linter of VS Code. And looking at other packages this looks like a best practise to place interal packages on the top and gh imports afterwards.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -3,6 +3,13 @@ package cmd\n import (\n \t\"bufio\"\n \t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"path\"\n+\t\"path/filepath\"\n+\t\"runtime\"\n+\t\"strings\"\n+\n \t\"github.com/drud/ddev/pkg/ddevapp\"\n \t\"github.com/drud/ddev/pkg/exec\"\n \t\"github.com/drud/ddev/pkg/fileutil\"\nReview:"}
{"pred": "This comment should be updated to reflect the new change.", "gold": "This seems like a more appropriate message under `ListenAndServe`. WDYT?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -51,7 +51,8 @@ type Options struct {\n \tDefaultSamplingPolicy trace.Sampler\n }\n \n-// New creates a new server. New(nil) is the same as new(Server).\n+// New creates a new server. New(nil) is the same as new(Server). Note: A\n+// configured Requestlogger will not log HealthChecks.\n func New(opts *Options) *Server {\n \tsrv := new(Server)\n \tif opts != nil {\nReview:"}
{"pred": "Should this be moved to the afterEach hook to ensure the server is stopped after each test?", "gold": "Is this not required?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -156,7 +156,6 @@ test.suite(\n         await driver.get(fileServer.Pages.basicAuth)\n         let source = await driver.getPageSource()\n         assert.strictEqual(source.includes('Access granted!'), true)\n-        await server.stop()\n       })\n     })\n \nReview:"}
{"pred": "This looks good, but it might be worth considering adding a comment to explain why the sort field and direction are being set this way.", "gold": "We should start thinking of an object that encapsulates this information :) we might need more arguments in the future.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -360,7 +360,16 @@ class AdminController extends Controller\n         }\n \n         $searchableFields = $this->entity['search']['fields'];\n-        $paginator = $this->findBy($this->entity['class'], $this->request->query->get('query'), $searchableFields, $this->request->query->get('page', 1), $this->config['list']['max_results'], $this->request->query->get('sortField'), $this->request->query->get('sortDirection'), $this->entity['search']['dql_filter']);\n+        $paginator = $this->findBy(\n+            $this->entity['class'],\n+            $this->request->query->get('query'),\n+            $searchableFields,\n+            $this->request->query->get('page', 1),\n+            $this->config['list']['max_results'],\n+            isset($this->entity['search']['sort']['field']) ? $this->entity['search']['sort']['field'] : $this->request->query->get('sortField'),\n+            isset($this->entity['search']['sort']['direction']) ? $this->entity['search']['sort']['direction'] : $this->request->query->get('sortDirection'),\n+            $this->entity['search']['dql_filter']\n+        );\n         $fields = $this->entity['list']['fields'];\n \n         $this->dispatch(EasyAdminEvents::POST_SEARCH, array(\nReview:"}
{"pred": "Good to add a comment here to explain why we are setting the desired failure messages twice.", "gold": "Given that we are (conceptually) searching across multiple self-dependencies, all we can say is that we didn't have a self dependency in which *both* source and dest masks were correct. Since the spec doesn't imagine this case, the valid usage statement assume we can differentiate only wrong source from only wrong dest within a *single* self-dependency -- which we can't across multiple (at least not meaningfully)... so we always return both the source/dest VUID's if we can't find a self-dependency in with *both* are correct.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -4652,10 +4652,12 @@ TEST_F(VkLayerTest, RenderPassBarrierConflicts) {\n     img_barrier.subresourceRange.levelCount = 1;\n     // Mis-match src stage mask\n     m_errorMonitor->SetDesiredFailureMsg(VK_DEBUG_REPORT_ERROR_BIT_EXT, \"VUID-vkCmdPipelineBarrier-srcStageMask-01173\");\n+    m_errorMonitor->SetDesiredFailureMsg(VK_DEBUG_REPORT_ERROR_BIT_EXT, \"VUID-vkCmdPipelineBarrier-dstStageMask-01174\");\n     vkCmdPipelineBarrier(m_commandBuffer->handle(), VK_PIPELINE_STAGE_HOST_BIT, VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT,\n                          VK_DEPENDENCY_BY_REGION_BIT, 0, nullptr, 0, nullptr, 1, &img_barrier);\n     m_errorMonitor->VerifyFound();\n     // Now mis-match dst stage mask\n+    m_errorMonitor->SetDesiredFailureMsg(VK_DEBUG_REPORT_ERROR_BIT_EXT, \"VUID-vkCmdPipelineBarrier-srcStageMask-01173\");\n     m_errorMonitor->SetDesiredFailureMsg(VK_DEBUG_REPORT_ERROR_BIT_EXT, \"VUID-vkCmdPipelineBarrier-dstStageMask-01174\");\n     vkCmdPipelineBarrier(m_commandBuffer->handle(), VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT, VK_PIPELINE_STAGE_HOST_BIT,\n                          VK_DEPENDENCY_BY_REGION_BIT, 0, nullptr, 0, nullptr, 1, &img_barrier);\nReview:"}
{"pred": "The method name should be changed to reflect the new logic.", "gold": "rename? MiningCoordinator always exists", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -52,11 +52,11 @@ public class EthMiningTest {\n   public void shouldReturnTrueWhenMiningCoordinatorExistsAndRunning() {\n     final JsonRpcRequest request = requestWithParams();\n     final JsonRpcResponse expectedResponse = new JsonRpcSuccessResponse(request.getId(), true);\n-    when(miningCoordinator.isRunning()).thenReturn(true);\n+    when(miningCoordinator.isMining()).thenReturn(true);\n \n     final JsonRpcResponse actualResponse = method.response(request);\n     assertThat(actualResponse).isEqualToComparingFieldByField(expectedResponse);\n-    verify(miningCoordinator).isRunning();\n+    verify(miningCoordinator).isMining();\n     verifyNoMoreInteractions(miningCoordinator);\n   }\n \nReview:"}
{"pred": "You should add a comment here explaining why you are adding the offlineMode variable.", "gold": "Here would be the same case you don't need to call `loadConfigs`, but you would need to reread configs using `getConfig` on each getHost function call, not once per file.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -8,7 +8,8 @@\n var ip = {},\n     net = require('net'),\n     extIP = require('external-ip'),\n-    plugins = require('../../../plugins/pluginManager.js');\n+    plugins = require('../../../plugins/pluginManager.js'),\n+    offlineMode = plugins.getConfig(\"api\").offline_mode;\n \n /**\n  * Function to get the hostname/ip address/url to access dashboard\nReview:"}
{"pred": "It's good to see the lock being added, but it might be better to move this to the function that is actually doing the deletion, rather than here.", "gold": "Unlocking with defer means that this lock is still held curing the call to forgetNode(), below, which I see attempts to acquire `f.mu`, which looks dangerous to me.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -486,6 +486,8 @@ func (d *Dir) Cleanup(ctx context.Context, fi *dokan.FileInfo) {\n \tdefer func() { d.folder.reportErr(ctx, libkbfs.WriteMode, err) }()\n \n \tif fi != nil && fi.IsDeleteOnClose() && d.parent != nil {\n+\t\td.folder.fs.renameAndDeletionLock.Lock()\n+\t\tdefer d.folder.fs.renameAndDeletionLock.Unlock()\n \t\td.folder.fs.log.CDebugf(ctx, \"Removing (Delete) dir in cleanup %s\", d.name)\n \n \t\terr = d.folder.fs.config.KBFSOps().RemoveDir(ctx, d.parent, d.name)\nReview:"}
{"pred": "It looks like cst is no longer being used, so it can be removed from the function call.", "gold": "Does anyone still use the cst out of this method? If not consider deleting", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -56,7 +56,7 @@ func Test_Mine(t *testing.T) {\n \tbaseBlock := &block.Block{Height: 2, StateRoot: stateRoot, Tickets: []block.Ticket{{VRFProof: []byte{0}}}}\n \ttipSet := th.RequireNewTipSet(t, baseBlock)\n \n-\tst, pool, addrs, cst, bs := sharedSetup(t, mockSignerVal)\n+\tst, pool, addrs, _, bs := sharedSetup(t, mockSignerVal)\n \tgetStateTree := func(c context.Context, ts block.TipSet) (state.Tree, error) {\n \t\treturn st, nil\n \t}\nReview:"}
{"pred": "Good use of redirects here.", "gold": "Line is too long. [97/80]", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -9,6 +9,7 @@ get(\n     \"/getting-started-with-ios-development?utm_source=podcast\"\n   )\n )\n+get \"/videos/vim-for-rails-developers\" => redirect(\"https://www.youtube.com/watch?v=9J2OjH8Ao_A\")\n get \"/humans-present/oss\" => redirect( \"https://www.youtube.com/watch?v=VMBhumlUP-A\")\n get \"/ios-on-rails\" => redirect(\"https://gumroad.com/l/ios-on-rails\")\n get \"/ios-on-rails-beta\" => redirect(\"https://gumroad.com/l/ios-on-rails\")\nReview:"}
{"pred": "You should add a comment explaining why you are importing BytesIO and ReadTimeoutError.", "gold": "This seems unused.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,12 +1,14 @@\n \"\"\" Testing for data_transfer.py \"\"\"\n \n ### Python imports\n+from io import BytesIO\n import pathlib\n \n from unittest import mock\n \n ### Third-party imports\n from botocore.stub import ANY\n+from botocore.exceptions import ReadTimeoutError\n import pandas as pd\n import pytest\n \nReview:"}
{"pred": "This should throw an error instead of panicking.", "gold": "@luguanglong , Thanks for the fix, can you re-phrase it to sound better something like \"This OS version is currently un-supported by keadm\"", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -184,8 +184,8 @@ func GetOSInterface() types.OSTypeInstaller {\n \tcase CentOSType:\n \t\treturn &CentOS{}\n \tdefault:\n+\t\tpanic(\"unsupport os-release\")\n \t}\n-\treturn nil\n }\n \n //IsKubeEdgeController identifies if the node is having edge controller and k8s api-server already running.\nReview:"}
{"pred": "It's good to add a docstring here to explain what this function does.", "gold": "should probably be called `_DeleteFpInfoAttr` because it removes it. Cleaning gives the impression it is still there. I would also move this to the end of the function `GetAtomicWeightsForFingerprint`.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -53,6 +53,10 @@ from rdkit.Chem.Draw import rdMolDraw2D\n from rdkit.Chem import rdDepictor\n from rdkit.Chem import rdMolDescriptors as rdMD\n \n+def _CleanFpInfoAttr_(mol):\n+  if hasattr(mol, '_fpInfo'):\n+    delattr(mol, '_fpInfo')\n+\n \n def GetAtomicWeightsForFingerprint(refMol, probeMol, fpFunction, metric=DataStructs.DiceSimilarity):\n   \"\"\"\nReview:"}
{"pred": "This looks good. The new code is more readable and easier to maintain.", "gold": "nit, can we use `VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR` here (granted it isn't else where, maybe worth fixing here or in separate PR)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -7101,6 +7101,13 @@ bool CoreChecks::PreCallValidateCmdBindDescriptorSets(VkCommandBuffer commandBuf\n                          \"(%zu) when pipeline layout was created\",\n                          firstSet, setCount, pipeline_layout->set_layouts.size());\n     }\n+\n+    static const std::map<VkPipelineBindPoint, std::string> bindpoint_errors = {\n+        std::make_pair(VK_PIPELINE_BIND_POINT_GRAPHICS, \"VUID-vkCmdBindDescriptorSets-pipelineBindPoint-00361\"),\n+        std::make_pair(VK_PIPELINE_BIND_POINT_COMPUTE, \"VUID-vkCmdBindDescriptorSets-pipelineBindPoint-00361\"),\n+        std::make_pair(VK_PIPELINE_BIND_POINT_RAY_TRACING_NV, \"VUID-vkCmdBindDescriptorSets-pipelineBindPoint-00361\")};\n+    skip |= ValidatePipelineBindPoint(cb_state, pipelineBindPoint, \"vkCmdBindPipeline()\", bindpoint_errors);\n+\n     return skip;\n }\n \nReview:"}
{"pred": "The name of the parameter should be changed to title, as this is what the controller is expecting.", "gold": "This will need to be updated in the upcase-exercises repo as well.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -23,6 +23,6 @@ class Api::V1::ExercisesController < ApiController\n   end\n \n   def exercise_parameters\n-    params.require(:exercise).permit(:edit_url, :summary, :title, :url)\n+    params.require(:exercise).permit(:edit_url, :summary, :name, :url)\n   end\n end\nReview:"}
{"pred": "It looks like the logic has been changed here, make sure to test this thoroughly.", "gold": "Think it's worth extracting this to `Exercise#complete?`?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -21,7 +21,7 @@ class Trail < ActiveRecord::Base\n   def steps_remaining_for(user)\n     ExerciseWithProgressQuery.\n       new(user: user, exercises: exercises).\n-      count { |exercise| exercise.state != Status::REVIEWED }\n+      count { |exercise| exercise.state != Status::COMPLETE }\n   end\n \n   def self.most_recent_published\nReview:"}
{"pred": "The getReversedExchangeRate() method is no longer needed and can be removed.", "gold": "This is still a potentially useful public method - should we remove such methods?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -87,14 +87,6 @@ class Currency\n         return $this->exchangeRate;\n     }\n \n-    /**\n-     * @return string\n-     */\n-    public function getReversedExchangeRate()\n-    {\n-        return 1 / $this->exchangeRate;\n-    }\n-\n     /**\n      * @param string $exchangeRate\n      */\nReview:"}
{"pred": "It looks like you have removed the ability to configure the release level per language. Is this intentional?", "gold": "I don't understand this change, what is happening here?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -40,15 +40,9 @@ public abstract class ApiDefaultsConfig {\n   /** The name of the license of the client library. */\n   public abstract String licenseName();\n \n-  protected abstract Map<TargetLanguage, ReleaseLevel> releaseLevel();\n-\n   /** The development status of the client library. Configured per language. */\n-  public ReleaseLevel releaseLevel(TargetLanguage language) {\n-    ReleaseLevel level = releaseLevel().get(language);\n-    if (level == null) {\n-      level = ReleaseLevel.UNSET_RELEASE_LEVEL;\n-    }\n-    return level;\n+  public ReleaseLevel releaseLevel() {\n+    return ReleaseLevel.ALPHA;\n   }\n \n   protected abstract Map<TargetLanguage, VersionBound> generatedNonGAPackageVersionBound();\nReview:"}
{"pred": "You can use a single line comparison here, e.g. `if int(self.obj.excelCellObject.Application.Version.split('.')[0]) > 12:`", "gold": "I think its worth stating this is `versionMajor`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -944,7 +944,8 @@ class ExcelCellTextInfo(NVDAObjectTextInfo):\n \n \tdef _getFormatFieldAndOffsets(self,offset,formatConfig,calculateOffsets=True):\n \t\tformatField=textInfos.FormatField()\n-\t\tif (self.obj.excelCellObject.Application.Version > \"12.0\"):\n+\t\tversion=int(self.obj.excelCellObject.Application.Version.split('.')[0])\n+\t\tif version>12:\n \t\t\tcellObj=self.obj.excelCellObject.DisplayFormat\n \t\telse:\n \t\t\tcellObj=self.obj.excelCellObject\nReview:"}
{"pred": "This should be documented in the godocs.", "gold": "rebuild: say loads and merges", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -375,3 +375,14 @@ func (nc NodeController) readGenesisJSON(genesisFile string) (genesisLedger book\n \terr = protocol.DecodeJSON(genesisText, &genesisLedger)\n \treturn\n }\n+\n+// SetConsensus applies a new consensus settings which would get deployed before\n+// any of the nodes starts\n+func (nc NodeController) SetConsensus(consensus config.ConsensusProtocols) error {\n+\treturn config.SaveConfigurableConsensus(nc.algodDataDir, consensus)\n+}\n+\n+// GetConsensus rebuild the consensus version from the data directroy\n+func (nc NodeController) GetConsensus() (config.ConsensusProtocols, error) {\n+\treturn config.PreloadConfigurableConsensusProtocols(nc.algodDataDir)\n+}\nReview:"}
{"pred": "We should probably add a comment here explaining why we're removing this import.", "gold": "Why was this removed here (also in the other file)? Shouldn't we import them so that the reference in the docs below is interpreted correctly?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -20,7 +20,6 @@\n  * External dependencies\n  */\n import { getDefaultOptions } from 'expect-puppeteer';\n-import { Page, ElementHandle } from 'puppeteer';\n \n /**\n  * Jest matcher for asserting the given instance has tracking loaded or not.\nReview:"}
{"pred": "You should consider using a context manager here to ensure the SparkContext is always stopped.", "gold": "I'd prefer to have a blank line between the class declaration and its first member. Is it possible?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -32,13 +32,12 @@ from databricks.koalas.series import Series\n \n \n class PySparkTestCase(unittest.TestCase):\n-\n     def setUp(self):\n         self._old_sys_path = list(sys.path)\n         if SparkContext._active_spark_context is not None:\n             SparkContext._active_spark_context.stop()\n         class_name = self.__class__.__name__\n-        self.sc = SparkContext('local[4]', class_name)\n+        self.sc = SparkContext(\"local[4]\", class_name)\n \n     def tearDown(self):\n         self.sc.stop()\nReview:"}
{"pred": "This should be renamed to something more descriptive, like MONGOS_LEGACY_ISMASTER", "gold": "Is it really LEGACY_HELLO if we are using the most up to date HELLO? Perhaps `MONGOS_HELLO` would work here?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -299,7 +299,7 @@ describe('Mongos SRV Polling', function () {\n         return records.map(r => `${r.name}:${r.port}`);\n       }\n \n-      const MONGOS_DEFAULT_ISMASTER = Object.assign({}, mock.DEFAULT_ISMASTER_36, {\n+      const MONGOS_LEGACY_HELLO = Object.assign({}, mock.HELLO, {\n         msg: 'isdbgrid'\n       });\n \nReview:"}
{"pred": "Good change. We should retry suspending threads if we fail due to privilege problems.", "gold": "I am afraid this is going to cause problems on Windows where it is not uncommon to have injected threads (CTRL_SHUTDOWN, CTRL_LOGOFF, etc.) we have no privileges to suspend -- and thus retrying will just fail again, and with the new \"synchall failure is fatal and should kill the process\" approach it turns what used to work for us on Windows into process death.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1922,10 +1922,10 @@ detach_on_permanent_stack(bool internal, bool do_cleanup)\n     DEBUG_DECLARE(bool ok;)\n     DEBUG_DECLARE(int exit_res;)\n     /* synch-all flags: if we fail to suspend a thread (e.g., privilege\n-     * problems) ignore it.  XXX Should we retry instead?\n+     * problems) retry it.\n      */\n     /* i#297: we only synch client threads after process exit event. */\n-    uint flags = THREAD_SYNCH_SUSPEND_FAILURE_IGNORE | THREAD_SYNCH_SKIP_CLIENT_THREAD;\n+    uint flags = THREAD_SYNCH_SUSPEND_FAILURE_RETRY | THREAD_SYNCH_SKIP_CLIENT_THREAD;\n \n     ENTERING_DR();\n \nReview:"}
{"pred": "It would be nice to have a description of what this option does.", "gold": "think it should only be in create_dist", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -45,6 +45,7 @@ program\n   .option('-C <build_dir>', 'build config (out/Debug, out/Release')\n   .option('--target_arch <target_arch>', 'target architecture', 'x64')\n   .option('--mac_signing_identifier <id>', 'The identifier to use for signing')\n+  .option('--mac_installer_signing_identifier <id>', 'The identifier to use for signing the installer')\n   .option('--mac_signing_keychain <keychain>', 'The identifier to use for signing', 'login')\n   .option('--debug_build <debug_build>', 'keep debugging symbols')\n   .option('--official_build <official_build>', 'force official build settings')\nReview:"}
{"pred": "This looks good. It's nice to see the HostPort check here.", "gold": "Do you plan to support Pod spec change? Like hostPort is added/removed later after Pod creation?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -429,9 +429,14 @@ func (c *NPLController) handleAddUpdatePod(key string, obj interface{}) error {\n \t\t\tpodPorts[port] = struct{}{}\n \t\t\tportData := c.portTable.GetEntryByPodIPPort(podIP, int(cport.ContainerPort))\n \t\t\tif portData == nil { // rule does not exist\n-\t\t\t\tnodePort, err = c.portTable.AddRule(podIP, port)\n-\t\t\t\tif err != nil {\n-\t\t\t\t\treturn fmt.Errorf(\"failed to add rule for Pod %s: %v\", key, err)\n+\t\t\t\tif int(cport.HostPort) > 0 {\n+\t\t\t\t\tklog.V(4).Infof(\"Host Port is defined for Container %s in Pod %s, thus extra NPL port is not allocated\", container.Name, key)\n+\t\t\t\t\tnodePort = int(cport.HostPort)\n+\t\t\t\t} else {\n+\t\t\t\t\tnodePort, err = c.portTable.AddRule(podIP, port)\n+\t\t\t\t\tif err != nil {\n+\t\t\t\t\t\treturn fmt.Errorf(\"failed to add rule for Pod %s: %v\", key, err)\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t} else {\n \t\t\t\tnodePort = portData.NodePort\nReview:"}
{"pred": "The return type should be changed to (dokan.File, dokan.CreateStatus, error) in the function signature.", "gold": "Is this behavior correct? It used to return `true`, which should map to `dokan.ExistingDir`. Was that previously a bug?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -157,13 +157,14 @@ func (tlf *TLF) GetFileInformation(ctx context.Context, fi *dokan.FileInfo) (st\n }\n \n // open tries to open a file.\n-func (tlf *TLF) open(ctx context.Context, oc *openContext, path []string) (dokan.File, bool, error) {\n+func (tlf *TLF) open(ctx context.Context, oc *openContext, path []string) (\n+\tdokan.File, dokan.CreateStatus, error) {\n \tif len(path) == 0 {\n \t\tif err := oc.ReturningDirAllowed(); err != nil {\n-\t\t\treturn nil, true, err\n+\t\t\treturn nil, 0, err\n \t\t}\n \t\ttlf.refcount.Increase()\n-\t\treturn tlf, true, nil\n+\t\treturn tlf, dokan.ExistingDir, nil\n \t}\n \n \tmode := libkbfs.ReadMode\nReview:"}
{"pred": "This should probably be an error or warning, not just a log message.", "gold": "What about just printing an empty list in this case? That would make the output more predictable.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -27,7 +27,11 @@ void deleteRegion(const storage::SharedRegionRegister::ShmKey key)\n \n void listRegions()\n {\n-\n+    if (!storage::SharedMonitor<storage::SharedRegionRegister>::exists())\n+    {\n+        osrm::util::Log() << \"No shared memory regions found. Try running osrm-datastore\";\n+        return;\n+    }\n     storage::SharedMonitor<storage::SharedRegionRegister> monitor;\n     std::vector<std::string> names;\n     const auto &shared_register = monitor.data();\nReview:"}
{"pred": "You should add a comment here explaining why you are removing this line.", "gold": "I looked and couldn't find any usage of `container` in any of the editor component files (js or hbs), so I assume this was used once and didn't get removed?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -24,7 +24,6 @@ export default Component.extend({\n \n     init() {\n         this._super(...arguments);\n-        this.container = document.querySelector('.gh-editor-container')[0];\n \n         let mobiledoc = this.get('value') || BLANK_DOC;\n         let userCards = this.get('cards') || [];\nReview:"}
{"pred": "This looks good, but you should add a check to make sure that the version of WordPress is 3.6 or higher.", "gold": "I just updated a number of sites using older versions of Roots onto WP 3.6 and this little function change was required. Multiple search bars were displaying when I used the search widget in a widgetized sidebar. Updated the roots_get_search_form as seen in this change resolved it for me!", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -256,11 +256,11 @@ function roots_request_filter($query_vars) {\n add_filter('request', 'roots_request_filter');\n \n /**\n- * Tell WordPress to use searchform.php from the templates/ directory\n+ * Tell WordPress to use searchform.php from the templates/ directory. Requires WordPress 3.6+\n  */\n-function roots_get_search_form($argument) {\n-  if ($argument === '') {\n-    locate_template('/templates/searchform.php', true, false);\n-  }\n+function roots_get_search_form($form) {\n+  $form = '';\n+  locate_template('/templates/searchform.php', true, false);\n+  return $form;\n }\n add_filter('get_search_form', 'roots_get_search_form');\nReview:"}
{"pred": "This looks like a good change, adding a new coupon type.", "gold": "Fixes test failed in some cases", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -19,6 +19,7 @@ use Thelia\\Condition\\ConditionEvaluator;\n use Thelia\\Condition\\Implementation\\MatchForTotalAmount;\n use Thelia\\Condition\\Operators;\n use Thelia\\Coupon\\FacadeInterface;\n+use Thelia\\Coupon\\Type\\FreeProduct;\n use Thelia\\Model\\CartItem;\n use Thelia\\Model\\CountryQuery;\n use Thelia\\Model\\CurrencyQuery;\nReview:"}
{"pred": "This looks good.", "gold": "what's the prod url for this? just curious. @amirsaber", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -23,9 +23,7 @@ module.exports = [\n   'https://balance-staging.mercury.basicattentiontoken.org/',\n   'https://publishers.basicattentiontoken.org/',\n   'https://publishers-staging.basicattentiontoken.org/',\n-  'https://updates.bravesoftware.com/', // remove this once updates are moved to the prod environment\n-  'https://ads-serve.bravesoftware.com/', // remove this once ads catalog moves to using prod\n-  'https://pdfjs.robwu.nl/logpdfjs', // allowed because it gets canceled in tracking protection\n+  'https://updates.bravesoftware.com/',\n   'https://publishers-distro.basicattentiontoken.org/',\n   'https://publishers-staging-distro.basicattentiontoken.org/',\n   'https://p3a.brave.com/',\nReview:"}
{"pred": "This should be documented in the code.", "gold": "Can you please change this to azkaban.jobs.java.opts?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -153,6 +153,12 @@ public class Constants {\n   // Overridable plugin load properties\n   public static final String AZ_PLUGIN_LOAD_OVERRIDE_PROPS = \"azkaban.plugin.load.override.props\";\n \n+  // Append JVM args to job commands\n+  public static final String AZ_JOB_COMMAND_ARGS = \"azkaban.jvm.cmd.args\";\n+\n+  // Ignore the above JVM args for jobtypes which have this true.\n+  public static final String AZ_JOB_IGNORE_JVM_ARGS = \"ignore.jvm.args\";\n+\n   /**\n    * File containing param override configs\n    * For a directory structure, property files in Proj_Dir used to have lower precedence than A.\nReview:"}
{"pred": "The sprintf() call was unnecessary here, as we can just concatenate the strings.", "gold": "Here is another concatenation which should be updated. Even though `Source:` and the link are essentially separate, it isn't RTL friendly. This would be another good use for `createInterpolateElement` I think so that we wouldn't need to include all of the classnames in the translation string (or extract them to a placeholder). That would allow us to use the `Link` component as well, rather than using its resulting HTML as a string which will be a pain to maintain if we were to make changes to the base `Link` component.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -66,11 +66,10 @@ function AcquisitionPieChart( { data, args, source } ) {\n \n \tlet sourceMessage = '';\n \tif ( source ) {\n-\t\tsourceMessage = sprintf(\n-\t\t\t/* translators: %1$s: URL to Analytics Module page in Site Kit Admin, %2$s: Analytics (Service Name) */\n-\t\t\t__( 'Source: <a class=\"googlesitekit-cta-link googlesitekit-cta-link--external googlesitekit-cta-link--inherit\" href=\"%1$s\">%2$s</a>', 'google-site-kit' ),\n+\t\tsourceMessage = __( 'Source:', 'google-site-kit' ) + sprintf(\n+\t\t\t' <a class=\"googlesitekit-cta-link googlesitekit-cta-link--external googlesitekit-cta-link--inherit\" href=\"%1$s\">%2$s</a>',\n \t\t\tgetSiteKitAdminURL( 'googlesitekit-module-analytics' ),\n-\t\t\t_x( 'Analytics', 'Service name', 'google-site-kit' ),\n+\t\t\t_x( 'Analytics', 'Service name', 'google-site-kit' )\n \t\t);\n \t}\n \nReview:"}
{"pred": "It looks like you are adding a cancellation token parameter to this method. Is this necessary?", "gold": "I would add an overload `GetCancelledZeroTask()` which calls `GetCancelledZeroTask(CancellationToken.None)`. This is cleaner than requiring the caller to pass `default(CancellationToken)` or `CancellationToken.None`.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -26,12 +26,15 @@ namespace Microsoft.AspNetCore.Server.Kestrel.Infrastructure\n #endif\n         }\n \n-        public static Task<int> GetCancelledZeroTask()\n+        public static Task<int> GetCancelledZeroTask(CancellationToken cancellationToken = default(CancellationToken))\n         {\n-            // Task<int>.FromCanceled doesn't return Task<int>\n+#if NETSTANDARD1_3\n+            return Task.FromCanceled<int>(cancellationToken);\n+#else\n             var tcs = new TaskCompletionSource<int>();\n             tcs.TrySetCanceled();\n             return tcs.Task;\n+#endif\n         }\n     }\n }\nReview:"}
{"pred": "Should we check if image_state is null before calling ReleaseImageUsageState()?", "gold": "Would it be equivalent to check if `chain != nullptr` below? Not suggesting a change, just curious.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -295,9 +295,13 @@ void BestPractices::PreCallRecordDestroyImage(VkDevice device, VkImage image, co\n }\n \n void BestPractices::PreCallRecordDestroySwapchainKHR(VkDevice device, VkSwapchainKHR swapchain, const VkAllocationCallbacks* pAllocator) {\n-    SWAPCHAIN_NODE* chain = GetSwapchainState(swapchain);\n-    for (auto& image : chain->images) {\n-        ReleaseImageUsageState(image.image_state->image());\n+    if (VK_NULL_HANDLE != swapchain) {\n+        SWAPCHAIN_NODE* chain = GetSwapchainState(swapchain);\n+        for (auto& image : chain->images) {\n+            if (image.image_state) {\n+                ReleaseImageUsageState(image.image_state->image());\n+            }\n+        }\n     }\n     ValidationStateTracker::PreCallRecordDestroySwapchainKHR(device, swapchain, pAllocator);\n }\nReview:"}
{"pred": "Good to add the work regeneration here, but make sure to check if the block is valid before doing so.", "gold": "Should probably do `auto this_l (shared_from_this ());` and pass/use that instead of `this`. Same a few other places. IOW, replace both `shared_from_this()` and `this` with `this_l`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1131,9 +1131,10 @@ bool nano::wallet::change_sync (nano::account const & source_a, nano::account co\n \n void nano::wallet::change_async (nano::account const & source_a, nano::account const & representative_a, std::function<void(std::shared_ptr<nano::block>)> const & action_a, uint64_t work_a, bool generate_work_a)\n {\n-\twallets.node.wallets.queue_wallet_action (nano::wallets::high_priority, shared_from_this (), [source_a, representative_a, action_a, work_a, generate_work_a](nano::wallet & wallet_a) {\n+\twallets.node.wallets.queue_wallet_action (nano::wallets::high_priority, shared_from_this (), [this, source_a, representative_a, action_a, work_a, generate_work_a](nano::wallet & wallet_a) {\n \t\tauto block (wallet_a.change_action (source_a, representative_a, work_a, generate_work_a));\n \t\taction_a (block);\n+\t\tthis->wallets.queue_work_regeneration (std::chrono::steady_clock::now (), block);\n \t});\n }\n \nReview:"}
{"pred": "This is a good change, as it makes the message more readable.", "gold": "And here. Please, use `'` for apostrophes in changed strings in this file.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -55,7 +55,8 @@ module.exports = iterateJsdoc(\n \t\t) {\n \t\t\tcontext.report( {\n \t\t\t\tdata: { name: jsdocNode.name },\n-\t\t\t\tmessage: `The first word in a function's description should be a third-person verb (eg \"runs\" not \"run\").`,\n+\t\t\t\tmessage:\n+\t\t\t\t\t'The first word in a function\\'s description should be a third-person verb (eg \"runs\" not \"run\").',\n \t\t\t\tnode: jsdocNode,\n \t\t\t} );\n \t\t}\nReview:"}
{"pred": "This should be tested to ensure the expected behavior is still the same.", "gold": "assignments should only be cuddled with other assignments (from `wsl`)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -100,7 +100,7 @@ func (gs *GasStation) EstimateGasForAction(actPb *iotextypes.Action) (uint64, er\n \t\tif err != nil {\n \t\t\treturn 0, err\n \t\t}\n-\t\t_, receipt, err := gs.bc.ExecuteContractRead(callerAddr, sc)\n+\t\t_, receipt, err := gs.bc.SimulateExecution(callerAddr, sc)\n \t\tif err != nil {\n \t\t\treturn 0, err\n \t\t}\nReview:"}
{"pred": "This should be documented in the comments, and the function should be renamed to something more descriptive.", "gold": "Please move this to `block_types.go`.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -504,7 +504,15 @@ func (c *ConfigLocal) MetadataVersion() MetadataVer {\n \n // DataVersion implements the Config interface for ConfigLocal.\n func (c *ConfigLocal) DataVersion() DataVer {\n-\treturn 1\n+\treturn FilesWithHolesDataVer\n+}\n+\n+// DefaultNewBlockDataVersion returns the default data version for new blocks.\n+func DefaultNewBlockDataVersion(c Config, holes bool) DataVer {\n+\tif holes {\n+\t\treturn FilesWithHolesDataVer\n+\t}\n+\treturn FirstValidDataVer\n }\n \n // DoBackgroundFlushes implements the Config interface for ConfigLocal.\nReview:"}
{"pred": "It looks like these attributes have been removed. Is there a reason for this?", "gold": "So this is not needed anymore for all attributes?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -40,9 +40,6 @@ namespace NLog.Layouts\n     /// JSON attribute.\n     /// </summary>\n     [NLogConfigurationItem]\n-    [ThreadAgnostic]\n-    [ThreadSafe]\n-    [AppDomainFixedOutput]\n     public class JsonAttribute\n     {\n         /// <summary>\nReview:"}
{"pred": "The message should be more specific about what failed and why.", "gold": "Happy to get suggestion for better messaging here. Here's what I intended to convey: Something is wrong - the Exception is a hint to what might be the cause The impact of that - tracing wont work.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -46,13 +46,13 @@ namespace OpenTelemetry.Extensions.Hosting.Implementation\n             }\n         }\n \n-        [Event(1, Message = \"Failed to initialize: '{0}'. OpenTelemetry will not work.\", Level = EventLevel.Error)]\n+        [Event(1, Message = \"An exception occured while adding OpenTelemetry Tracing to ServiceCollection. OpenTelemetry tracing will not work. Exception: '{0}'.\", Level = EventLevel.Error)]\n         public void FailedInitialize(string exception)\n         {\n             this.WriteEvent(1, exception);\n         }\n \n-        [Event(2, Message = \"Failed to get OpenTelemetrySDK: '{0}'. OpenTelemetry will not work.\", Level = EventLevel.Error)]\n+        [Event(2, Message = \"An exception occured while retrieving OpenTelemetry Tracer from Service Provider. OpenTelemetry tracing will not work. Exception: '{0}'.\", Level = EventLevel.Error)]\n         public void FailedOpenTelemetrySDK(string exception)\n         {\n             this.WriteEvent(2, exception);\nReview:"}
{"pred": "It would be nice to have a docstring for this function.", "gold": "I think we can remove this function, right? (duplicate with `ses_starter.py`)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -108,6 +108,11 @@ def start_acm(port=None, asynchronous=False):\n     return start_moto_server('acm', port, name='ACM', asynchronous=asynchronous)\n \n \n+def start_ses(port=None, asynchronous=False, update_listener=None):\n+    port = port or config.PORT_SES\n+    return start_moto_server('ses', port, name='SES', asynchronous=asynchronous, update_listener=update_listener)\n+\n+\n # TODO move to es_starter.py?\n def start_elasticsearch_service(port=None, asynchronous=False):\n     port = port or config.PORT_ES\nReview:"}
{"pred": "This looks like a TODO comment that should be removed before committing.", "gold": "With this fix, I am not even sure we need to overwrite this function.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -195,6 +195,10 @@ class PandasLikeSeries(_Frame):\n                     \"Field {} not found, possible values are {}\".format(name, \", \".join(fnames)))\n             return anchor_wrap(self, self._spark_getField(name))\n \n+    # TODO: automate the process here\n+    def alias(self, name):\n+        return self.rename(name)\n+\n     @property\n     def schema(self):\n         if not hasattr(self, '_pandas_schema') or self._pandas_schema is None:\nReview:"}
{"pred": "It's better to use a boolean here rather than a string comparison.", "gold": "Why not just import this from `data_transfer`? As a rule copying the same code twice is not a good idea. Also: please run `pylint` on all files in this PR.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -311,6 +311,8 @@ class PackageEntry(object):\n class Package(object):\n     \"\"\" In-memory representation of a package \"\"\"\n \n+    use_tqdm = os.getenv('QUILT_USE_TQDM').lower() == 'true'\n+\n     def __init__(self):\n         self._children = {}\n         self._meta = {'version': 'v0'}\nReview:"}
{"pred": "This looks good, the code is well structured and easy to read.", "gold": "You've got an absolute path here referencing your home dir :-).", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -99,7 +99,7 @@ module Beaker\n       it \"can correctly combine arguments from different sources\" do\n         FakeFS.deactivate!\n         args = [\"-h\", hosts_path, \"--debug\", \"--type\", \"git\", \"--install\", \"PUPPET/1.0,HIERA/hello\"]\n-        expect(parser.parse_args(args)).to be === {:hosts_file=>hosts_path, :options_file=>nil, :type=>\"git\", :provision=>true, :preserve_hosts=>false, :root_keys=>false, :quiet=>false, :xml=>false, :color=>true, :debug=>true, :dry_run=>false, :fail_mode=>nil, :timesync=>false, :repo_proxy=>false, :add_el_extras=>false, :consoleport=>443, :pe_dir=>\"/opt/enterprise/dists\", :pe_version_file=>\"LATEST\", :pe_version_file_win=>\"LATEST-win\", :dot_fog=>\"#{home}/.fog\", :ec2_yaml=>\"config/image_templates/ec2.yaml\", :ssh=>{:config=>false, :paranoid=>false, :timeout=>300, :auth_methods=>[\"publickey\"], :port=>22, :forward_agent=>true, :keys=>[\"#{home}/.ssh/id_rsa\"], :user_known_hosts_file=>\"#{home}/.ssh/known_hosts\"}, :install=>[\"git://github.com/puppetlabs/puppet.git#1.0\", \"git://github.com/puppetlabs/hiera.git#hello\"], :HOSTS=>{:\"pe-ubuntu-lucid\"=>{:roles=>[\"agent\", \"dashboard\", \"database\", \"master\"], :vmname=>\"pe-ubuntu-lucid\", :platform=>\"ubuntu-10.04-i386\", :snapshot=>\"clean-w-keys\", :hypervisor=>\"fusion\"}, :\"pe-centos6\"=>{:roles=>[\"agent\"], :vmname=>\"pe-centos6\", :platform=>\"el-6-i386\", :hypervisor=>\"fusion\", :snapshot=>\"clean-w-keys\"}}, :nfs_server=>\"none\", :puppet_ver=>nil, :facter_ver=>nil, :hiera_ver=>nil, :hiera_puppet_ver=>nil, :helper=>[], :load_path=>[], :tests=>[], :pre_suite=>[], :post_suite=>[], :modules=>[]}\n+        expect(parser.parse_args(args)).to be === {:hosts_file=>\"/Users/anode/beaker/spec/beaker/options/data/hosts.cfg\", :options_file=>nil, :type=>\"git\", :provision=>true, :preserve_hosts=>false, :root_keys=>false, :quiet=>false, :xml=>false, :color=>true, :debug=>true, :dry_run=>false, :fail_mode=>nil, :timesync=>false, :repo_proxy=>false, :add_el_extras=>false, :consoleport=>443, :pe_dir=>\"/opt/enterprise/dists\", :pe_version_file=>\"LATEST\", :pe_version_file_win=>\"LATEST-win\", :dot_fog=>\"/Users/anode/.fog\", :ec2_yaml=>\"config/image_templates/ec2.yaml\", :ssh=>{:config=>false, :paranoid=>false, :timeout=>300, :auth_methods=>[\"publickey\"], :port=>22, :forward_agent=>true, :keys=>[\"/Users/anode/.ssh/id_rsa\"], :user_known_hosts_file=>\"/Users/anode/.ssh/known_hosts\"}, :install=>[\"git://github.com/puppetlabs/puppet.git#1.0\", \"git://github.com/puppetlabs/hiera.git#hello\"], :HOSTS=>{:\"pe-ubuntu-lucid\"=>{:roles=>[\"agent\", \"dashboard\", \"database\", \"master\"], :vmname=>\"pe-ubuntu-lucid\", :platform=>\"ubuntu-10.04-i386\", :snapshot=>\"clean-w-keys\", :hypervisor=>\"fusion\"}, :\"pe-centos6\"=>{:roles=>[\"agent\"], :vmname=>\"pe-centos6\", :platform=>\"el-6-i386\", :hypervisor=>\"fusion\", :snapshot=>\"clean-w-keys\"}}, :nfs_server=>\"none\", :helper=>[], :load_path=>[], :tests=>[], :pre_suite=>[], :post_suite=>[], :modules=>[]}\n       end\n \n       it \"ensures that file-mode is one of fast/stop\" do\nReview:"}
{"pred": "It looks like you have added the prefixPropertyMetaModel twice, you should remove one of them.", "gold": "Maybe I should do some sorting so that these properties don't keep moving around...", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -526,10 +526,10 @@ public final class JavaParserMetaModel {\n         unaryExprMetaModel.getDeclaredPropertyMetaModels().add(unaryExprMetaModel.expressionPropertyMetaModel);\n         unaryExprMetaModel.operatorPropertyMetaModel = new PropertyMetaModel(unaryExprMetaModel, \"operator\", com.github.javaparser.ast.expr.UnaryExpr.Operator.class, Optional.empty(), false, false, false, false, false);\n         unaryExprMetaModel.getDeclaredPropertyMetaModels().add(unaryExprMetaModel.operatorPropertyMetaModel);\n-        unaryExprMetaModel.prefixPropertyMetaModel = new PropertyMetaModel(unaryExprMetaModel, \"prefix\", boolean.class, Optional.empty(), false, true, false, false, false);\n-        unaryExprMetaModel.getDerivedPropertyMetaModels().add(unaryExprMetaModel.prefixPropertyMetaModel);\n         unaryExprMetaModel.postfixPropertyMetaModel = new PropertyMetaModel(unaryExprMetaModel, \"postfix\", boolean.class, Optional.empty(), false, true, false, false, false);\n         unaryExprMetaModel.getDerivedPropertyMetaModels().add(unaryExprMetaModel.postfixPropertyMetaModel);\n+        unaryExprMetaModel.prefixPropertyMetaModel = new PropertyMetaModel(unaryExprMetaModel, \"prefix\", boolean.class, Optional.empty(), false, true, false, false, false);\n+        unaryExprMetaModel.getDerivedPropertyMetaModels().add(unaryExprMetaModel.prefixPropertyMetaModel);\n         variableDeclarationExprMetaModel.annotationsPropertyMetaModel = new PropertyMetaModel(variableDeclarationExprMetaModel, \"annotations\", com.github.javaparser.ast.expr.AnnotationExpr.class, Optional.of(annotationExprMetaModel), false, false, true, false, false);\n         variableDeclarationExprMetaModel.getDeclaredPropertyMetaModels().add(variableDeclarationExprMetaModel.annotationsPropertyMetaModel);\n         variableDeclarationExprMetaModel.modifiersPropertyMetaModel = new PropertyMetaModel(variableDeclarationExprMetaModel, \"modifiers\", com.github.javaparser.ast.Modifier.class, Optional.empty(), false, false, false, true, false);\nReview:"}
{"pred": "This test is no longer needed as it is covered by the other tests.", "gold": "Can we keep this test anyway, as it's part of the spec?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -32,14 +32,6 @@ func TestCheckMountDestFalsePositive(t *testing.T) {\n \t}\n }\n \n-func TestCheckMountRoot(t *testing.T) {\n-\tdest := \"/rootfs\"\n-\terr := checkMountDestination(\"/rootfs\", dest)\n-\tif err == nil {\n-\t\tt.Fatal(err)\n-\t}\n-}\n-\n func TestNeedsSetupDev(t *testing.T) {\n \tconfig := &configs.Config{\n \t\tMounts: []*configs.Mount{\nReview:"}
{"pred": "This class should extend AbstractBundle instead of AbstractModule.", "gold": "Can be removed", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,19 @@\n+<?php\n+\n+/**\n+ * Copyright \u00a9 Bold Brand Commerce Sp. z o.o. All rights reserved.\n+ * See license.txt for license details.\n+ */\n+\n+declare(strict_types = 1);\n+\n+namespace Ergonode\\Mailer;\n+\n+use Ergonode\\Mailer\\Application\\DependencyInjection\\CompilerPass\\MailerStrategyInterfaceCompilerPass;\n+use Ergonode\\SharedKernel\\Application\\AbstractModule;\n+\n+/**\n+ */\n+class ErgonodeMailerBundle extends AbstractModule\n+{\n+}\nReview:"}
{"pred": "It's good practice to add a comment here explaining why you're adding the use statements.", "gold": "It's a minor quibble I know, but I like having the imports ordered by lengt", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,5 +1,7 @@\n <?php namespace System\\Controllers;\n \n+use Config;\n+use Request;\n use Lang;\n use Flash;\n use Backend;\nReview:"}
{"pred": "Good catch, we should always set the charset for the content type.", "gold": "It's better to get the charset from context or other setting to let the user override it.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -216,7 +216,7 @@ public abstract class AbstractRestInvocation {\n       }\n     }\n     responseEx.setStatus(response.getStatusCode(), response.getReasonPhrase());\n-    responseEx.setContentType(produceProcessor.getName());\n+    responseEx.setContentType(produceProcessor.getName()+\"; charset=utf-8\");\n \n     Object body = response.getResult();\n     if (response.isFailed()) {\nReview:"}
{"pred": "This change looks good. It is updating the informer to the correct one.", "gold": "this filename as well needs change", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -70,7 +70,7 @@ func NewCStorPoolController(\n \tcStorInformerFactory informers.SharedInformerFactory) *CStorPoolController {\n \n \t// obtain references to shared index informers for the cStorPool resources\n-\tcStorPoolInformer := cStorInformerFactory.Openebs().V1alpha1().NewTestCStorPools()\n+\tcStorPoolInformer := cStorInformerFactory.Openebs().V1alpha1().CStorPoolInstances()\n \n \tzpool.KubeClient = kubeclientset\n \tzpool.OpenEBSClient = clientset\nReview:"}
{"pred": "It looks like the AccessKeyID and AccessKeyIDRef fields are redundant. Consider removing one of them.", "gold": "I think we want to remove `omitempty` here", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -179,10 +179,11 @@ type ACMEIssuerDNS01ProviderCloudflare struct {\n // ACMEIssuerDNS01ProviderRoute53 is a structure containing the Route 53\n // configuration for AWS\n type ACMEIssuerDNS01ProviderRoute53 struct {\n-\tAccessKeyID     string            `json:\"accessKeyID\"`\n-\tSecretAccessKey SecretKeySelector `json:\"secretAccessKeySecretRef\"`\n-\tHostedZoneID    string            `json:\"hostedZoneID\"`\n-\tRegion          string            `json:\"region\"`\n+\tAccessKeyID        string            `json:\"accessKeyID,omitempty\"`\n+\tAccessKeyIDRef     SecretKeySelector `json:\"accessKeyIDSecretRef,omitempty\"`\n+\tSecretAccessKeyRef SecretKeySelector `json:\"secretAccessKeySecretRef\"`\n+\tHostedZoneID       string            `json:\"hostedZoneID\"`\n+\tRegion             string            `json:\"region\"`\n }\n \n // ACMEIssuerDNS01ProviderAzureDNS is a structure containing the\nReview:"}
{"pred": "Should the defer be moved to the beginning of the function?", "gold": "You cannot move this here because it breaks detach. Just call `tty.Close()` before returning the error from start", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -129,6 +129,8 @@ func startContainer(context *cli.Context, spec *specs.LinuxSpec) (int, error) {\n \tif err != nil {\n \t\treturn -1, err\n \t}\n+\thandler := newSignalHandler(tty)\n+\tdefer handler.Close()\n \tif err := container.Start(process); err != nil {\n \t\treturn -1, err\n \t}\nReview:"}
{"pred": "It looks like the implicit property has been removed here, is this intentional?", "gold": "I updated only the implicit roles who needed a update for this new rule to validate.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -376,8 +376,7 @@ lookupTables.role = {\n \t\t\tone: ['rowgroup', 'row']\n \t\t},\n \t\tnameFrom: ['author'],\n-\t\tcontext: null,\n-\t\timplicit: ['table']\n+\t\tcontext: null\n \t},\n \t'gridcell': {\n \t\ttype: 'widget',\nReview:"}
{"pred": "You can remove the duplicate imports here.", "gold": "> // Code generated by protoc-gen-go. DO NOT EDIT.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -7,11 +7,12 @@\n package pb\n \n import (\n+\treflect \"reflect\"\n+\tsync \"sync\"\n+\n \tproto \"github.com/golang/protobuf/proto\"\n \tprotoreflect \"google.golang.org/protobuf/reflect/protoreflect\"\n \tprotoimpl \"google.golang.org/protobuf/runtime/protoimpl\"\n-\treflect \"reflect\"\n-\tsync \"sync\"\n )\n \n const (\nReview:"}
{"pred": "This should be documented in the code to explain why this is being added and why it is necessary.", "gold": "minor: skipOSConfigMetadata, otherwise, the name sounds like a boolean", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -46,6 +46,9 @@ var (\n \t\tutils.GcloudProdWrapperLatest:   \"gcloud\",\n \t\tutils.GcloudLatestWrapperLatest: \"gcloud\",\n \t}\n+\t// Apply this as instance metadata if the OS config agent is not\n+\t// supported for the platform or version being imported.\n+\tskipOSConfig = map[string]string{\"osconfig_not_supported\": \"true\"}\n )\n \n type ovfInstanceImportTestProperties struct {\nReview:"}
{"pred": "This looks like a bug fix, where the type was not being checked correctly. Good catch!", "gold": "~~I think lines 65-67 should be moved into this else clause after `type = ...` Else, it is a bit confusing why we check the enclose type validity a second time~~ Nevermind, will do some refactoring, myself. But thanks for \"fixing\" this!", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -56,7 +56,9 @@ public class NSRSS20 extends Namespace {\n \t\t\tboolean validType = false;\n \t\t\tboolean validUrl = !TextUtils.isEmpty(url);\n \n-\t\t\tif (type == null) {\n+\t\t\tif(SyndTypeUtils.enclosureTypeValid(type)) {\n+\t\t\t\tvalidType = true;\n+\t\t\t} else {\n \t\t\t\ttype = SyndTypeUtils.getMimeTypeFromUrl(url);\n \t\t\t}\n \nReview:"}
{"pred": "It would be better to add a comment above this function explaining what it does.", "gold": "`sessions := endpoints.SessionsDTO{}` and using only `sessions` should be simpler.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -239,3 +239,16 @@ func (client *Client) Stop() error {\n \n \treturn nil\n }\n+\n+// GetSessions returns all sessions from history\n+func (client *Client) GetSessions() (endpoints.SessionsDTO, error) {\n+\tresponse, err := client.http.Get(\"sessions\", url.Values{})\n+\tif err != nil {\n+\t\treturn endpoints.SessionsDTO{}, err\n+\t}\n+\tdefer response.Body.Close()\n+\n+\tvar sessions endpoints.SessionsDTO\n+\terr = parseResponseJSON(response, &sessions)\n+\treturn sessions, err\n+}\nReview:"}
{"pred": "We should probably add a comment here to explain why we're checking for is_exiting.", "gold": "These need to be in the other order to avoid crashing when dcontext == GLOBAL_DCONTEXT (==-1)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -5242,8 +5242,11 @@ master_signal_handler_C(byte *xsp)\n \n     /* Ensure we didn't get the app's sigstack into our frame.  On Mac, the kernel\n      * doesn't use the frame's uc_stack, so we limit this to Linux.\n+     * The pointers may be different if a thread is on its way to exit, and the app's\n+     * sigstack was already restored (i#3369).\n      */\n-    IF_LINUX(ASSERT(dcontext == NULL || dcontext == GLOBAL_DCONTEXT ||\n+    IF_LINUX(ASSERT(dcontext == NULL || dcontext->is_exiting ||\n+                    dcontext == GLOBAL_DCONTEXT ||\n                     frame->uc.uc_stack.ss_sp ==\n                         ((thread_sig_info_t *)dcontext->signal_field)->sigstack.ss_sp));\n \nReview:"}
{"pred": "This looks like a good change, it makes the code more readable.", "gold": "Why not change the other samples?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -24,7 +24,8 @@ namespace Http2SampleApp\n                     factory.SetMinimumLevel(LogLevel.Trace);\n                     factory.AddConsole();\n                 })\n-                .UseKestrel((context, options) =>\n+                .UseKestrel()\n+                .ConfigureKestrel((context, options) =>\n                 {\n                     var basePort = context.Configuration.GetValue<int?>(\"BASE_PORT\") ?? 5000;\n \nReview:"}
{"pred": "Good use of template literals here.", "gold": "Indentation is mixed up here due to spaces/tabs, I'm guessing.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -10,8 +10,9 @@ table.isHeader = function (cell) {\n \t\treturn true;\n \t}\n \n-\tif (cell.id) {\n-\t\treturn !!document.querySelector('[headers~=\"' + axe.utils.escapeSelector(cell.id) + '\"]');\n+\tif (cell.getAttribute('id')) {\n+    const id = axe.utils.escapeSelector(cell.getAttribute('id'));\n+\t\treturn !!document.querySelector(`[headers~=\"${id}\"]`);\n \t}\n \n \treturn false;\nReview:"}
{"pred": "Good to check the return value of read() and handle errors appropriately.", "gold": "Should we provide a little more context in the error message? Maybe throw in something about what operation was being performed?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -738,9 +738,15 @@ static fpga_result poll_interrupt(fpga_dma_handle dma_h) {\n \t\tres = FPGA_EXCEPTION;\n \t} else {\n \t\tuint64_t count = 0;\n-\t\tread(pfd.fd, &count, sizeof(count));\n-\t\tdebug_print(\"Poll success. Return = %d, count = %d\\n\",poll_res, (int)count);\n-\t\tres = FPGA_OK;\n+\t\tssize_t bytes_read = read(pfd.fd, &count, sizeof(count));\n+\t\tif(bytes_read <= 0) {\n+\t\t\tfprintf( stderr, \"Error: %s\\n\",\n+\t\t\t\tbytes_read < 0 ? strerror(errno) : \"zero bytes read\");\n+\t\t\tres = FPGA_EXCEPTION;\n+\t\t} else {\n+\t\t\tdebug_print(\"Poll success. Return = %d, count = %d\\n\",poll_res, (int)count);\n+\t\t\tres = FPGA_OK;\n+\t\t}\n \t}\n \n out:\nReview:"}
{"pred": "This should be documented in the docblock. Also, consider adding a check for the existence of the settings key in the configuration array.", "gold": "Project standard is spaces, not tabs. Please fix and then we can merge this.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -138,7 +138,10 @@ class PluginBase extends ServiceProviderBase\n      */\n     public function registerSettings()\n     {\n-        return [];\n+\t\t$configuration = $this->getConfigurationFromYaml();\n+\t\tif (array_key_exists('settings', $configuration)) {\n+\t\t\treturn $configuration['settings'];\n+\t\t}\n     }\n \n     /**\nReview:"}
{"pred": "You should add a comment explaining why the ClientList and ZSList are being included here.", "gold": "@hgtw is there anything we're worried about with regards to using this cache? Do we want to do staged testing around expeditions before we merge? Curious your thoughts here", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,12 +1,14 @@\n #include \"dynamic_zone.h\"\n-#include \"expedition.h\"\n-#include \"expedition_state.h\"\n+#include \"cliententry.h\"\n+#include \"clientlist.h\"\n+#include \"dynamic_zone_manager.h\"\n #include \"worlddb.h\"\n #include \"zonelist.h\"\n #include \"zoneserver.h\"\n #include \"../common/eqemu_logsys.h\"\n #include \"../common/repositories/instance_list_repository.h\"\n \n+extern ClientList client_list;\n extern ZSList zoneserver_list;\n \n Database& DynamicZone::GetDatabase()\nReview:"}
{"pred": "This change looks good, the alwaysTrue() filter was redundant.", "gold": "The purpose of this was to allow pushing filters into the manifest files if we ever use a format other than Parquet. I think overall this is a good change because we can add it back later. Just wanted to note why the unused argument was there.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -226,11 +226,11 @@ public class ManifestReader extends CloseableGroup implements Filterable<Filtere\n \n   @Override\n   public Iterator<DataFile> iterator() {\n-    return iterator(alwaysTrue(), fileSchema);\n+    return iterator(fileSchema);\n   }\n \n   // visible for use by PartialManifest\n-  Iterator<DataFile> iterator(Expression partFilter, Schema fileProjection) {\n+  Iterator<DataFile> iterator(Schema fileProjection) {\n     return Iterables.transform(Iterables.filter(\n         entries(fileProjection),\n         entry -> entry.status() != ManifestEntry.Status.DELETED),\nReview:"}
{"pred": "This looks good, but it would be nice to add a comment explaining why we are doing this.", "gold": "I think BSON::Decimal128 should always be serialized as Decimal128 regardless of config option.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -24,7 +24,15 @@ module Mongoid\n             # @since 1.0.0\n             def evolve(object)\n               __evolve__(object) do |obj|\n-                obj ? obj.to_s : obj\n+                if obj\n+                  if obj.is_a?(::BigDecimal) && Mongoid.map_big_decimal_to_decimal128\n+                    BSON::Decimal128.new(obj)\n+                  elsif obj.is_a?(BSON::Decimal128) && Mongoid.map_big_decimal_to_decimal128\n+                    obj\n+                  else\n+                    obj.to_s\n+                  end\n+                end\n               end\n             end\n           end\nReview:"}
{"pred": "This should be added to the Gemfile.lock as well.", "gold": "We should probably just move the `require 'bolt/plan_creator'` in `Bolt::CLI` to `Bolt::Application` so it will already be loaded.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,6 +1,7 @@\n # frozen_string_literal: true\n \n require 'bolt/application'\n+require 'bolt/plan_creator'\n \n require 'bolt_spec/files'\n \nReview:"}
{"pred": "Good idea to add warmup and max iteration count.", "gold": ">20 [](start = 45, length = 2) Can we override this at runtime? Maybe it should be a command line option with default.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -34,7 +34,10 @@ namespace Benchmarks\n \n         private static IConfig GetConfig(Options options)\n         {\n-            var baseJob = Job.ShortRun; // let's use the Short Run for better first user experience ;)\n+            var baseJob = Job.Default\n+                .WithWarmupCount(1) // 1 warmup is enough for our purpose\n+                .WithMaxTargetIterationCount(20);  // we don't want to run more that 20 iterations\n+\n             var jobs = GetJobs(options, baseJob).ToArray();\n \n             var config = DefaultConfig.Instance\nReview:"}
{"pred": "Should this be NULL checked?", "gold": "can just remove it ?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -47,7 +47,7 @@ class Service(object):\n         self.start_error_message = start_error_message\n         self.log_file = log_file\n         self.env = env or os.environ\n-\n+        \n     @property\n     def service_url(self):\n         \"\"\"\nReview:"}
{"pred": "This looks like a good refactoring, it should make the code more readable and maintainable.", "gold": "Better call it `CleanUpMirrorInfo`?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -654,7 +654,17 @@ func MigrateRepository(u *User, opts MigrateRepoOptions) (*Repository, error) {\n \t\treturn repo, UpdateRepository(repo, false)\n \t}\n \n-\tif err = createUpdateHook(repoPath); err != nil {\n+\trepo, err = FinishMigrateRepository(repo, repoPath)\n+\tif err != nil {\n+\t\treturn repo, err\n+\t}\n+\n+\treturn repo, UpdateRepository(repo, false)\n+}\n+\n+// Finish migrating repository with things that don't need to be done for mirrors.\n+func FinishMigrateRepository(repo *Repository, repoPath string) (*Repository, error) {\n+\tif err := createUpdateHook(repoPath); err != nil {\n \t\treturn repo, fmt.Errorf(\"createUpdateHook: %v\", err)\n \t}\n \nReview:"}
{"pred": "It looks like you have commented out the retrieval market integration. Is this intentional?", "gold": "@shannonwells is there still something missing here?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -405,6 +405,19 @@ func (node *Node) SetupMining(ctx context.Context) error {\n \t\t}\n \t}\n \n+\tif err := node.StorageMining.Start(ctx); err != nil {\n+\t\tfmt.Printf(\"error starting storage miner: %s\\n\", err)\n+\t}\n+\n+\tif err := node.StorageProtocol.StorageProvider.Start(ctx); err != nil {\n+\t\tfmt.Printf(\"error starting storage provider: %s\\n\", err)\n+\t}\n+\n+\t// TODO: Retrieval Market Integration\n+\t//if err := node.RetrievalProtocol.RetrievalProvider.Start(); err != nil {\n+\t//\tfmt.Printf(\"error starting retrieval provider: %s\\n\", err)\n+\t//}\n+\n \treturn nil\n }\n \nReview:"}
{"pred": "Good to add a comment here explaining why we are adding this setting.", "gold": "This could be more indicative of what it is... e.g... `stresstest_time_limit`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -149,6 +149,9 @@ MESSAGE\n       # don't accidentally leave the seed encoded.\n       define_reader :seed\n \n+      # Time limit for stress testing, if any (default: nil).\n+      add_setting :stress_test\n+\n       # When a block passed to pending fails (as expected), display the failure\n       # without reporting it as a failure (default: false).\n       add_setting :show_failures_in_pending_blocks\nReview:"}
{"pred": "Shouldn't we be releasing the reader_payload_pool_ here?", "gold": "Shouldn't we do a `reader_payload_pool_.reset()` here?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -279,7 +279,6 @@ bool PDPSimple::createPDPEndpoints()\n         delete mp_listener;\n         mp_listener = nullptr;\n         reader_payload_pool_->release_history(reader_pool_cfg, true);\n-        TopicPayloadPoolRegistry::release(reader_payload_pool_);\n         return false;\n     }\n \nReview:"}
{"pred": "Should the name of the field be changed to BeaconEntries to match the variable name?", "gold": "I'd prefer the nomenclature less tightly coupled to DRAND throughout. I played with renaming the `drand` package to `beacon` but it was too much noise in this change.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -33,9 +33,9 @@ type Block struct {\n \t// ElectionProof is the vrf proof giving this block's miner authoring rights\n \tElectionProof *crypto.ElectionProof\n \n-\t// DrandEntries contain the verifiable oracle randomness used to elect\n+\t// BeaconEntries contain the verifiable oracle randomness used to elect\n \t// this block's author leader\n-\tDrandEntries []*drand.Entry\n+\tBeaconEntries []*drand.Entry\n \n \t// PoStProofs are the winning post proofs\n \tPoStProofs []PoStProof `json:\"PoStProofs\"`\nReview:"}
{"pred": "It might be better to make this a method, rather than a property, as it is doing more than just returning a value.", "gold": "I think I would prefer you declare `self._current_key=None` in the constructor and just return `self._current_key`. That way you can prevent anyone from overwriting `current_key` without needing to use `getattr` here.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -853,6 +853,11 @@ class DynamicMap(HoloMap):\n                 unbounded_dims.append(str(kdim))\n         return unbounded_dims\n \n+    @property\n+    def current_key(self):\n+        \"\"\"Returns the current key value.\"\"\"\n+        return getattr(self, '_current_key', None)\n+\n     def _stream_parameters(self):\n         return util.stream_parameters(\n             self.streams, no_duplicates=not self.positional_stream_args\nReview:"}
{"pred": "It's good to see the constants for the modes, but it would be better to have a helper function to validate the mode string.", "gold": "I guess I like the name `mode` okay. I can't think of anything better.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -22,8 +22,14 @@ const FromCSVKind = \"fromCSV\"\n type FromCSVOpSpec struct {\n \tCSV  string `json:\"csv\"`\n \tFile string `json:\"file\"`\n+\tMode string `json:\"mode\"`\n }\n \n+const (\n+\tannotationMode = \"annotations\"\n+\trawMode        = \"raw\"\n+)\n+\n func init() {\n \tfromCSVSignature := runtime.MustLookupBuiltinType(\"csv\", \"from\")\n \truntime.RegisterPackageValue(\"csv\", \"from\", flux.MustValue(flux.FunctionValue(FromCSVKind, createFromCSVOpSpec, fromCSVSignature)))\nReview:"}
{"pred": "Good to add a comment here to explain the logic.", "gold": "I would create a new method (NewStepWithDefaultTimeout?) for this purpose because timeout<=0 looks like a hidden logic", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -69,8 +69,12 @@ type Step struct {\n \ttestType stepImpl\n }\n \n-// NewStep creates a Step with given name and timeout  with the specified workflow\n+// NewStep creates a Step with given name and timeout  with the specified workflow.\n+// If timeout is less or equal to zero, defaultTimeout from the workflow will be used\n func NewStep(name string, w *Workflow, timeout time.Duration) *Step {\n+\tif timeout <= 0 {\n+\t\treturn &Step{name: name, w: w, Timeout: w.DefaultTimeout}\n+\t}\n \treturn &Step{name: name, w: w, timeout: timeout}\n }\n \nReview:"}
{"pred": "Should the limit parameter have a default value?", "gold": "Are these limit changes related?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -71,6 +71,7 @@ func Register(r *gin.RouterGroup, s *Service) {\n // @Param experimentNamespace query string false \"The namespace of the experiment\"\n // @Param uid query string false \"The UID of the experiment\"\n // @Param kind query string false \"kind\" Enums(PodChaos, IoChaos, NetworkChaos, TimeChaos, KernelChaos, StressChaos)\n+// @Param limit query string false \"The max length of events list\"\n // @Success 200 {array} core.Event\n // @Router /api/events [get]\n // @Failure 500 {object} utils.APIError\nReview:"}
{"pred": "It looks like you are importing scapy.consts here, but it is not used anywhere in the code. Is this intentional?", "gold": "Don't you mean `import scapy.consts`?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -18,12 +18,12 @@ Routing and network interface handling for IPv6.\n \n from __future__ import absolute_import\n import socket\n+import scapy.consts\n from scapy.config import conf\n from scapy.utils6 import *\n from scapy.arch import *\n from scapy.pton_ntop import *\n from scapy.error import warning, log_loading\n-from scapy.consts import LOOPBACK_INTERFACE\n import scapy.modules.six as six\n \n \nReview:"}
{"pred": "This rollbackPrimary() function should probably have some logic in it, otherwise it's just a no-op.", "gold": "`ctx` is unused in rollbackPrimary", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -62,3 +62,7 @@ func (e *Executor) ensurePrimaryUpdate(ctx context.Context) model.StageStatus {\n \te.LogPersister.AppendSuccess(fmt.Sprintf(\"Successfully applied %d primary resources\", len(manifests)))\n \treturn model.StageStatus_STAGE_SUCCESS\n }\n+\n+func (e *Executor) rollbackPrimary(ctx context.Context) model.StageStatus {\n+\treturn model.StageStatus_STAGE_SUCCESS\n+}\nReview:"}
{"pred": "It's better to use a constant for EmptyEventTaskID instead of 0.", "gold": "This is not what title says.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -40,7 +40,7 @@ const (\n \t// BufferedEventID is the id of the buffered event\n \tBufferedEventID int64 = -123\n \t// EmptyEventTaskID is uninitialized id of the task id within event\n-\tEmptyEventTaskID int64 = -1234\n+\tEmptyEventTaskID int64 = 0\n \t// TransientEventID is the id of the transient event\n \tTransientEventID int64 = -124\n \t// FirstBlobPageToken is the page token identifying the first blob for each history archival\nReview:"}
{"pred": "Looks good!", "gold": "a fix applies several fixes? maybe this should simply be `applyToNode`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,19 @@\n+/**\n+ * BSD-style license; for more info see http://pmd.sourceforge.net/license.html\n+ */\n+\n+package net.sourceforge.pmd.autofix;\n+\n+import net.sourceforge.pmd.lang.ast.Node;\n+\n+/**\n+ * Classes of this interface must be used when it is desired to make one or more operations to the AST.\n+ */\n+public interface RuleViolationFix {\n+\n+    /**\n+     * Apply one or more operations to a node.\n+     * @param node the node in the AST on which to apply operations\n+     */\n+    void applyFixesToNode(Node node);\n+}\nReview:"}
{"pred": "The function name should be more descriptive, like fakeListOk() or something.", "gold": "U1000: func `fakeGetOk` is unused (from `unused`)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -25,11 +25,12 @@ import (\n \tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n )\n \n+// fakeGetClientset gets the cvr clientset\n func fakeGetClientset() (clientset *clientset.Clientset, err error) {\n \treturn &client.Clientset{}, nil\n }\n \n-func fakeListfn(cli *clientset.Clientset, namespace string, opts metav1.ListOptions) (*apis.CStorVolumeReplicaList, error) {\n+func fakeListOk(cli *clientset.Clientset, namespace string, opts metav1.ListOptions) (*apis.CStorVolumeReplicaList, error) {\n \treturn &apis.CStorVolumeReplicaList{}, nil\n }\n \nReview:"}
{"pred": "It is good to add retry library for better reliability.", "gold": "Because there is a \"k8s.io/client-go/tools/cache\" below, we can sort out all the \"imports\" here.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -18,6 +18,8 @@ import (\n \t\"errors\"\n \t\"fmt\"\n \n+\t\"k8s.io/client-go/util/retry\"\n+\n \t\"github.com/hashicorp/go-multierror\"\n \t\"golang.org/x/sync/errgroup\"\n \tv1 \"k8s.io/api/core/v1\"\nReview:"}
{"pred": "It is good practice to add a comment to explain why you are importing a package.", "gold": "Nit should be using `goimports` to format the import statements with standard libary imports first, new line, followed by non-standard library imports.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -3,7 +3,9 @@\n package api\n \n import (\n+\t\"github.com/aws/aws-sdk-go/aws\"\n \t\"fmt\"\n+\t\"encoding/json\"\n \t\"reflect\"\n \t\"sort\"\n \t\"strings\"\nReview:"}
{"pred": "This looks like it should be an else if, rather than a separate if statement.", "gold": "Do we not have tests for pipeline delete  ", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -118,8 +118,10 @@ func (o *deletePipelineOpts) Ask() error {\n \n // Execute deletes the secret and pipeline stack.\n func (o *deletePipelineOpts) Execute() error {\n-\tif err := o.deleteSecret(); err != nil {\n-\t\treturn err\n+\tif o.PipelineSecret != \"\" {\n+\t\tif err := o.deleteSecret(); err != nil {\n+\t\t\treturn err\n+\t\t}\n \t}\n \n \tif err := o.deleteStack(); err != nil {\nReview:"}
{"pred": "It would be good to add a check for the version of Hadoop here, so that the append() method is only called if the version is >= 2.3.0.", "gold": "Good that you mention this constraint in the docstring :)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -146,6 +146,12 @@ class HdfsClient(hdfs_abstract_client.HdfsFileSystem):\n     def put(self, local_path, destination):\n         self.call_check(load_hadoop_cmd() + ['fs', '-put', local_path, destination])\n \n+    def append(self, local_path, destination):\n+        \"\"\"\n+        Requires Hadoop >= 2.3.0\n+        \"\"\"\n+        call_check(load_hadoop_cmd() + ['fs', '-appendToFile', local_path, destination])\n+\n     def get(self, path, local_destination):\n         self.call_check(load_hadoop_cmd() + ['fs', '-get', path, local_destination])\n \nReview:"}
{"pred": "fmt is not used anywhere in the code. Please remove it.", "gold": "remove this blank?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -15,8 +15,13 @@ package workflow\n \n import (\n \t\"encoding/json\"\n+\t\"fmt\"\n \t\"net/http\"\n \n+\tctrl \"sigs.k8s.io/controller-runtime\"\n+\n+\tapierrors \"k8s.io/apimachinery/pkg/api/errors\"\n+\n \t\"github.com/gin-gonic/gin\"\n \n \t\"github.com/chaos-mesh/chaos-mesh/api/v1alpha1\"\nReview:"}
{"pred": "Is the default value for computedNumOfActivePartitions_ correct?", "gold": "Partitions is misspelled 8 times in this commit, might make sense to fix the spelling for all of those.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -9515,7 +9515,8 @@ FileScan::FileScan(const CorrName& tableName,\n      estRowsAccessed_ (0),\n      mdamFlag_(UNDECIDED),\n      skipRowsToPreventHalloween_(FALSE),\n-     doUseSearchKey_(TRUE)\n+     doUseSearchKey_(TRUE),\n+     computedNumOfActivePartiions_(-1)\n {\n   // Set the filescan properties:\n \nReview:"}
{"pred": "You should add a comment here explaining why you are adding the QUrl import.", "gold": "Please remove this blank line - those are only used to group Python/third-party/qutebrowser imports.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -22,9 +22,11 @@\n import shlex\n \n from PyQt5.QtCore import (pyqtSlot, pyqtSignal, QObject, QProcess,\n-                          QProcessEnvironment)\n+                          QProcessEnvironment, QUrl)\n \n-from qutebrowser.utils import message, log\n+from qutebrowser.utils import message, log, objreg\n+\n+from qutebrowser.browser import qutescheme\n \n # A mapping of QProcess::ErrorCode's to human-readable strings.\n \nReview:"}
{"pred": "You should add a comment here to explain why the insecure flag is being added.", "gold": "`insecure` is a global variable (from `gochecknoglobals`)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -45,6 +45,8 @@ var ActionCmd = &cobra.Command{\n \tArgs:  cobra.MinimumNArgs(1),\n }\n \n+var insecure bool\n+\n func init() {\n \tActionCmd.AddCommand(actionHashCmd)\n \tActionCmd.AddCommand(actionTransferCmd)\nReview:"}
{"pred": "Should this be a 403 instead of a 405?", "gold": "Same as above (HTTP in upper-case)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -479,6 +479,11 @@ func HTTPBackend(ctx *context.Context, cfg *serviceConfig) http.HandlerFunc {\n \t\tfor _, route := range routes {\n \t\t\tr.URL.Path = strings.ToLower(r.URL.Path) // blue: In case some repo name has upper case name\n \t\t\tif m := route.reg.FindStringSubmatch(r.URL.Path); m != nil {\n+\t\t\t\tif setting.Repository.DisableHttpGit {\n+\t\t\t\t\tw.WriteHeader(http.StatusForbidden)\n+\t\t\t\t\tw.Write([]byte(\"Interacting with repositories by HTTP protocol is not allowed\"))\n+\t\t\t\t\treturn\n+\t\t\t\t}\n \t\t\t\tif route.method != r.Method {\n \t\t\t\t\tif r.Proto == \"HTTP/1.1\" {\n \t\t\t\t\t\tw.WriteHeader(http.StatusMethodNotAllowed)\nReview:"}
{"pred": "Good job adding a test for getReferenceUrl()", "gold": "This is getting repetitive  maybe you could introduce an abstract test case with a `getExpectedUrl($providerReference)` method ?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -206,4 +206,11 @@ class YouTubeProviderTest extends AbstractProviderTest\n         $this->assertSame(100, $properties['player_parameters']['height']);\n         $this->assertSame(100, $properties['player_parameters']['width']);\n     }\n+\n+    public function testGetReferenceUrl()\n+    {\n+        $media = new Media();\n+        $media->setProviderReference('123456');\n+        $this->assertEquals('http://www.youtube.com/watch?v=123456', $this->getProvider()->getReferenceUrl($media));\n+    }\n }\nReview:"}
{"pred": "This function should have a comment explaining what it does and how it works.", "gold": "I do not think returning `Value{}` is correct here. For example, `reflect.MakeFunc(...).Kind()` would return `reflect.Invalid` instead of `reflect.Func`. Therefore, I think this should panic instead.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,5 @@\n+package reflect\n+\n+func MakeFunc(typ Type, fn func(args []Value) (results []Value)) Value {\n+\treturn Value{}\n+}\nReview:"}
{"pred": "This should be dom, not window.", "gold": "Does this work for Custom Elements? iirc we're lacking test cases for them. /cc @andrewiggins @developit", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -73,7 +73,7 @@ function setProperty(dom, name, value, oldValue, isSvg) {\n \telse if (name[0]==='o' && name[1]==='n') {\n \t\tlet useCapture = name !== (name=name.replace(/Capture$/, ''));\n \t\tlet nameLower = name.toLowerCase();\n-\t\tname = (nameLower in dom ? nameLower : name).substring(2);\n+\t\tname = (nameLower in window ? nameLower : name).substring(2);\n \n \t\tif (value) {\n \t\t\tif (!oldValue) dom.addEventListener(name, eventProxy, useCapture);\nReview:"}
{"pred": "This looks like a good change, it's more concise and readable.", "gold": "Same change just above?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -224,9 +224,7 @@ func (m *ipipManager) CompleteDeferredWork() error {\n \t\tfor _, ip := range m.activeHostnameToIP {\n \t\t\tmembers = append(members, ip)\n \t\t}\n-\t\tfor _, ip := range m.externalNodeCIDRs {\n-\t\t\tmembers = append(members, ip)\n-\t\t}\n+\t\tmembers = append(members, m.externalNodeCIDRs...)\n \t\tm.ipsetsDataplane.AddOrReplaceIPSet(m.ipSetMetadata, members)\n \t\tm.ipSetInSync = true\n \t}\nReview:"}
{"pred": "This should be a warning instead of an error, as the code should still work without Promise.", "gold": "I suppose `apploader.js` isn't used by WebWorkers. So `self` will always be `window` here.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -35,7 +35,8 @@\n         // Promise() being missing on some legacy browser, and a funky one\n         // is Promise() present but buggy on WebOS 2\n         window.Promise = undefined;\n-        window.Promise = undefined;\n+        /* eslint-disable-next-line no-restricted-globals -- Explicit check on self needed */\n+        self.Promise = undefined;\n     }\n \n     if (!window.Promise) {\nReview:"}
{"pred": "This looks like it could be simplified by using the select_hosts method to filter out the debian-8 hosts.", "gold": "Since this var is no longer defined we should remove the `if skip_targets.any?` bit below.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -7,13 +7,7 @@ test_name \"bolt plan run should apply manifest block on remote hosts via ssh\" do\n   extend Acceptance::BoltCommandHelper\n \n   ssh_nodes = select_hosts(roles: ['ssh'])\n-  skip_targets = select_hosts(platform: [/debian-8/])\n   targets = \"ssh_nodes\"\n-  if skip_targets.any?\n-    ssh_nodes -= skip_targets\n-    targets = ssh_nodes.each_with_object([]) { |node, acc| acc.push(node[:vmhostname]) }.join(\",\")\n-  end\n-\n   skip_test('no applicable nodes to test on') if ssh_nodes.empty?\n \n   dir = bolt.tmpdir('apply_ssh')\nReview:"}
{"pred": "We should check if batch_size_entry is None before trying to access it.", "gold": "I think we should `return arn` as a fallback at the end of this function (otherwise the `['Resource']` entry below could become `None`).", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -170,6 +170,12 @@ def func_arn(function_name):\n     return aws_stack.lambda_function_arn(function_name)\n \n \n+def func_qualifier(function_name, qualifier=None):\n+    arn = aws_stack.lambda_function_arn(function_name)\n+    if ARN_TO_LAMBDA.get(arn).qualifier_exists(qualifier):\n+        return '{}:{}'.format(arn, qualifier)\n+\n+\n def check_batch_size_range(source_arn, batch_size=None):\n     batch_size_entry = BATCH_SIZE_RANGES.get(source_arn.split(':')[2].lower())\n     if not batch_size_entry:\nReview:"}
{"pred": "This should probably be an error rather than just silently returning.", "gold": "Why session is started at all, if you need to shut it down e.g. DI should launch noopSession", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -41,6 +41,11 @@ type NATProxy struct {\n \n func (np *NATProxy) consumerHandOff(consumerPort int, remoteConn *net.UDPConn) chan struct{} {\n \tstop := make(chan struct{})\n+\tif np.socketProtect == nil {\n+\t\t// shutdown pinger session since openvpn client will connect directly (without NATProxy)\n+\t\tremoteConn.Close()\n+\t\treturn stop\n+\t}\n \tgo np.consumerProxy(consumerPort, remoteConn, stop)\n \treturn stop\n }\nReview:"}
{"pred": "The name of the method should be more descriptive, like DeleteWorkspaceFiles() or something similar.", "gold": "nit: can we rename the interface to `wsFileDeleter`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -184,7 +184,7 @@ type describer interface {\n }\n \n type workspaceDeleter interface {\n-\tDeleteAll() error\n+\tDeleteWorkspaceFile() error\n }\n \n type svcManifestReader interface {\nReview:"}
{"pred": "This looks good. The change from PodSet to GroupMemberSet is appropriate.", "gold": "Why target cannot be external endpoints?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -91,10 +91,10 @@ func hashRule(r *rule) string {\n // It's the struct used by reconciler.\n type CompletedRule struct {\n \t*rule\n-\t// Source Pods of this rule, can't coexist with ToAddresses.\n-\tFromAddresses v1beta1.GroupMemberPodSet\n-\t// Destination Pods of this rule, can't coexist with FromAddresses.\n-\tToAddresses v1beta1.GroupMemberPodSet\n+\t// Source GroupMembers of this rule, can't coexist with ToAddresses.\n+\tFromAddresses v1beta1.GroupMemberSet\n+\t// Destination GroupMembers of this rule, can't coexist with FromAddresses.\n+\tToAddresses v1beta1.GroupMemberSet\n \t// Target Pods of this rule.\n \tPods v1beta1.GroupMemberPodSet\n }\nReview:"}
{"pred": "Good to add a comment here explaining why we need this prefix.", "gold": "We use a suffix \".AUTOCREATED\" for configsets, maybe we can use the same here?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -127,4 +127,8 @@ public interface CollectionAdminParams {\n \n   /** Option to follow aliases when deciding the target of a collection admin command. */\n   String FOLLOW_ALIASES = \"followAliases\";\n+\n+  /** Prefix for automatically created config elements. */\n+  String AUTO_PREFIX = \".auto_\";\n+\n }\nReview:"}
{"pred": "This is a breaking change, so make sure to update the documentation and any other related code.", "gold": "This one won't be disposed. Should be (something like) `using var openTelemetry = OpenTelemetrySdk.EnableOpenTelemetry(` no?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -27,7 +27,7 @@ namespace Samples\n         {\n             // Enable OpenTelemetry for the source \"MyCompany.MyProduct.MyWebServer\"\n             // and use Console exporter\n-            OpenTelemetrySdk.Default.EnableOpenTelemetry(\n+            OpenTelemetrySdk.EnableOpenTelemetry(\n                 (builder) => builder.AddActivitySource(\"MyCompany.MyProduct.MyWebServer\")\n                 .UseConsoleActivityExporter(opt => opt.DisplayAsJson = options.DisplayAsJson));\n \nReview:"}
{"pred": "The noqa comment is unnecessary here, as the linter should be able to detect the correct import.", "gold": "Why this is in the diff?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -37,7 +37,7 @@ from logHandler import log\n import UIAUtils\n from comInterfaces import UIAutomationClient as UIA\n # F403: unable to detect undefined names\n-from comInterfaces .UIAutomationClient import *  # noqa:  F403\n+from comInterfaces.UIAutomationClient import *  # noqa:  F403\n import textInfos\n from typing import Dict\n from queue import Queue\nReview:"}
{"pred": "It would be nice to have a comment here that explains the purpose of this function.", "gold": "How is status determined? When the user calls CloudBackupCreate( src_volume_id ) they can then call CloudBackupStatus( src_volume_id ) Is there something similar for this new API?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -136,6 +136,8 @@ type QuiesceDriver interface {\n type CloudBackupDriver interface {\n \t// CloudBackupCreate uploads snapshot of a volume to the cloud\n \tCloudBackupCreate(input *api.CloudBackupCreateRequest) error\n+\t// CloudBackupGroupCreate creates and then uploads volumegroup snapshots\n+\tCloudBackupGroupCreate(input *api.CloudBackupGroupCreateRequest) error\n \t// CloudBackupRestore downloads a cloud backup and restores it to a volume\n \tCloudBackupRestore(input *api.CloudBackupRestoreRequest) (*api.CloudBackupRestoreResponse, error)\n \t// CloudBackupEnumerate enumerates the backups for a given cluster/credential/volumeID\nReview:"}
{"pred": "This looks good, but it might be worth adding a comment to explain why we are unmounting the excessDomChildren here.", "gold": "We could pass `excessDomChildren` to `options._catchError` and only do this if an error-boundary catches the error. Not entirely sure if that's better.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -232,6 +232,15 @@ export function diff(\n \n \t\tif ((tmp = options.diffed)) tmp(newVNode);\n \t} catch (e) {\n+\t\t// When we are hydrating and have excessDomChildren we don't know the _children this VNode\n+\t\t// should receive so it's safer to unmount them. Else on the subsequent error-boundary diff,\n+\t\t// we won't know the oldDom and insert an additional node instead of replace the prerendered one. (#2539)\n+\t\tif (isHydrating && excessDomChildren != null) {\n+\t\t\tfor (tmp = excessDomChildren.length; tmp--; ) {\n+\t\t\t\tif (excessDomChildren[tmp] != null) removeNode(excessDomChildren[tmp]);\n+\t\t\t}\n+\t\t}\n+\n \t\tnewVNode._original = null;\n \t\toptions._catchError(e, newVNode, oldVNode);\n \t}\nReview:"}
{"pred": "This looks like a good change, it should make the code more efficient by avoiding the need to call array_merge.", "gold": "In php8 named parameters were introduced and now it is required to match called method parameter name when setting parameters by array destructing or call_user_func_array() etc.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -464,7 +464,7 @@ class CombineAssets\n      */\n     protected function setHashOnCombinerFilters($hash)\n     {\n-        $allFilters = call_user_func_array('array_merge', $this->getFilters());\n+        $allFilters = array_merge(...array_values($this->getFilters()));\n \n         foreach ($allFilters as $filter) {\n             if (method_exists($filter, 'setHash')) {\nReview:"}
{"pred": "Should we add a log message here if the span context is invalid?", "gold": "If instead we had `B3.extractSingleHeader` and `B3.extract` return a bool value as a second return value, we could avoid the byte array comparison in `TraceID.IsValid`. Did you consider that alternative?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -82,6 +82,9 @@ func (b3 B3) Extract(ctx context.Context, supplier propagation.HTTPSupplier) con\n \t} else {\n \t\tsc = b3.extract(supplier)\n \t}\n+\tif !sc.IsValid() {\n+\t\treturn ctx\n+\t}\n \treturn ContextWithRemoteSpanContext(ctx, sc)\n }\n \nReview:"}
{"pred": "This looks like a language change, so make sure to test it in the language it was changed for.", "gold": "I think this is more of a semantic difference than a typo - `weiter hinzufgen` is like `continue adding` whereas `weitere hinzufgen` is like `add more`. I think it makes sense to change it though  ", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -56,7 +56,7 @@ return [\n         'choose_file' => 'Datei ausw\u00e4hlen',\n         'close' => 'Schlie\u00dfen',\n         'create' => 'Erstellen',\n-        'create_and_add_another' => 'Erstellen und weiter hinzuf\u00fcgen',\n+        'create_and_add_another' => 'Erstellen und weitere hinzuf\u00fcgen',\n         'create_and_continue' => 'Erstellen und weiter bearbeiten',\n         'save' => 'Speichern',\n         'save_and_continue' => 'Speichern und weiter bearbeiten',\nReview:"}
{"pred": "It looks like you are missing a test case here to check that the record is actually deleted.", "gold": "nit: 200 is superfluous", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -227,3 +227,12 @@ class RecordsViewTest(BaseWebTest, unittest.TestCase):\n                      MINIMALIST_RECORD,\n                      headers=headers,\n                      status=200)\n+\n+    def test_records_can_be_created_after_deletion(self):\n+        self.app.delete(self.record_url,\n+                        headers=self.headers,\n+                        status=200)\n+        headers = self.headers.copy()\n+        headers['If-None-Match'] = '*'\n+        self.app.put_json(self.record_url, MINIMALIST_RECORD,\n+                          headers=headers, status=201)\nReview:"}
{"pred": "Should we add a check to make sure the column name is lowercase?", "gold": "This is testing `unreserved keyword`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -246,7 +246,7 @@ TEST_F(SchemaTest, metaCommunication) {\n     // Test unreserved keyword\n     {\n         cpp2::ExecutionResponse resp;\n-        std::string query = \"CREATE TAG upper(name string, EMAIL string, \"\n+        std::string query = \"CREATE TAG upper(name string, email string, \"\n                             \"age int, gender string, row_timestamp timestamp)\";\n         auto code = client->execute(query, resp);\n         ASSERT_EQ(cpp2::ErrorCode::SUCCEEDED, code);\nReview:"}
{"pred": "Is there a need to add a nullptr check here?", "gold": "paramsNatOrigin doesn't include sUVtoST. I would just remove that definition for now", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -829,6 +829,10 @@ static const MethodMapping projectionMethodMappings[] = {\n \n     {PROJ_WKT2_NAME_METHOD_QUADRILATERALIZED_SPHERICAL_CUBE, 0,\n      \"Quadrilateralized_Spherical_Cube\", \"qsc\", nullptr, paramsNatOrigin},\n+    \n+    {PROJ_WKT2_NAME_METHOD_S2, 0,\n+     \"S2\", \"s2\", nullptr, paramsNatOrigin},\n+\n \n     {PROJ_WKT2_NAME_METHOD_SPHERICAL_CROSS_TRACK_HEIGHT, 0,\n      \"Spherical_Cross_Track_Height\", \"sch\", nullptr, paramsSch},\nReview:"}
{"pred": "This should be moved to a setup function to make the test more readable.", "gold": "It feels like the test should be waiting for the prefetcher to shut down, but I don't have a great reason why other than that it might be confusing for debugging if there are still goroutines from old prefetchers lying. But I guess since `TogglePrefetcher(false)` doesn't actually set the prefetcher to nil, the queue shutdown method will still end up waiting for the shutdown to finish. If that sounds right, nevermind me.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -71,9 +71,15 @@ func makeKMD() KeyMetadata {\n \treturn emptyKeyMetadata{tlf.FakeID(0, tlf.Private), 1}\n }\n \n+func initBlockRetrievalQueueTest(t *testing.T) *blockRetrievalQueue {\n+\tq := newBlockRetrievalQueue(0, 0, newTestBlockRetrievalConfig(t, nil, nil))\n+\t<-q.TogglePrefetcher(false, nil)\n+\treturn q\n+}\n+\n func TestBlockRetrievalQueueBasic(t *testing.T) {\n \tt.Log(\"Add a block retrieval request to the queue and retrieve it.\")\n-\tq := newBlockRetrievalQueue(0, 0, newTestBlockRetrievalConfig(t, nil, nil))\n+\tq := initBlockRetrievalQueueTest(t)\n \trequire.NotNil(t, q)\n \tdefer q.Shutdown()\n \nReview:"}
{"pred": "Good update to the source description.", "gold": "AWS Identity and Access Management (IAM)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,4 +1,4 @@\n-//snippet-sourcedescription:[ListAccessKeys.java demonstrates how to list access keys associated with an AWS Identity and Access Management (IAM) user.]\n+//snippet-sourcedescription:[ListAccessKeys.java demonstrates how to list access keys associated with an AWS Identity and Access Management (AWS IAM) user.]\n //snippet-keyword:[AWS SDK for Java v2]\n //snippet-keyword:[Code Sample]\n //snippet-service:[AWS IAM]\nReview:"}
{"pred": "The RESOURCE_NAME variable is not used anywhere in the code. Is it necessary?", "gold": "As a long term thing, would it make sense to move the resource names as keys under the requirements map?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -34,6 +34,7 @@ class LoadProjectsCloudsqlPipeline(base_pipeline.BasePipeline):\n     \"\"\"Pipeline to load project CloudSql data into Inventory.\"\"\"\n \n     PROJECTS_RESOURCE_NAME = 'project_iam_policies'\n+    RESOURCE_NAME = 'cloudsql'\n     RESOURCE_NAME_INSTANCES = 'cloudsql_instances'\n     RESOURCE_NAME_IPADDRESSES = 'cloudsql_ipaddresses'\n     RESOURCE_NAME_AUTHORIZEDNETWORKS = (  # pylint: disable=invalid-name\nReview:"}
{"pred": "You should probably check if the attribute is empty or not, as an empty attribute will still return a truthy value.", "gold": "That doesn't fix the whole problem. The issue lays in this line right here, not the one above. There are two problems with this line: 1. It finds things that aren't cells in the table 2. if it doesn't find anything, it shouldn't return empty here, but continue down to look for row/ column headers.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -57,7 +57,7 @@ function traverseForHeaders(headerType, position, tableGrid) {\n  * @return {Array<HTMLTableCellElement>} Array of headers associated to the table cell\n  */\n table.getHeaders = function(cell, tableGrid) {\n-\tif (cell.hasAttribute('headers')) {\n+\tif (cell.getAttribute('headers')) {\n \t\treturn commons.dom.idrefs(cell, 'headers');\n \t}\n \tif (!tableGrid) {\nReview:"}
{"pred": "This looks like it should work, but it might be worth adding a few unit tests to make sure it behaves as expected.", "gold": "I am pretty sure that this is infinite recursion as getAllProjects returns the project itself.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -38,7 +38,9 @@ public class NoUnusedPinCheckTask extends DefaultTask {\n \n     @Input\n     public final Set<String> getResolvedArtifacts() {\n-        return BaselineVersions.getResolvedArtifacts(getProject());\n+        return getProject().getAllprojects().stream()\n+                .flatMap(project -> BaselineVersions.getResolvedArtifacts(project).stream())\n+                .collect(Collectors.toSet());\n     }\n \n     @InputFile\nReview:"}
{"pred": "This looks like a valid addition to the list of categories.", "gold": "Something I didn't catch before I merged this PR, is the hyphenated constant a problem? E.g. should \"data-lists\" be \"data_lists\"? @paulkaplan", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -268,6 +268,7 @@ Blockly.Categories = {\n   \"sound\": \"sounds\",\n   \"pen\": \"pen\",\n   \"data\": \"data\",\n+  \"dataLists\": \"data-lists\",\n   \"event\": \"events\",\n   \"control\": \"control\",\n   \"sensing\": \"sensing\",\nReview:"}
{"pred": "This should be checked for a platform other than Windows as well.", "gold": "Can you write the test as `if not (conf.use_winpcapy or conf.use_pcap or conf.use_dnet):`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -248,3 +248,7 @@ L2socket: use the provided L2socket\n \n import scapy.sendrecv\n scapy.sendrecv.sniff = sniff\n+\n+# If wpcap.dll is not available\n+if (not conf.use_winpcapy) and (not conf.use_pcap) and (not conf.use_dnet):\n+    from scapy.arch.windows.disable_sendrecv import *\nReview:"}
{"pred": "We should add a check here to make sure that name is not None.", "gold": "we have to include foreign assets on the repository directly because they don't belong to a job? This seems very awkward... Is this a step towards the job-less assets on the repository? Did you consider having `build_asset_job` take in a set of foreign assets instead? I suppose we would then need to subclass it to be a more special `AssetJobDefinition` that can keep track of them.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -23,6 +23,8 @@ class _Repository:\n         self.description = check.opt_str_param(description, \"description\")\n \n     def __call__(self, fn: Callable[[], Any]) -> RepositoryDefinition:\n+        from dagster.core.asset_defs import ForeignAsset\n+\n         check.callable_param(fn, \"fn\")\n \n         if not self.name:\nReview:"}
{"pred": "strcpy() should be used instead of strncpy() here.", "gold": "`-Wstringop-truncation` is a new kind of error detector introduced in GCC 8. As for this patch, these are two false-positives though.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -14,8 +14,7 @@ TempDir::TempDir(const char* pathTemplate, bool deleteOnDestroy)\n         : deleteOnDestroy_(deleteOnDestroy) {\n     auto len = strlen(pathTemplate);\n     std::unique_ptr<char[]> name(new char[len + 1]);\n-    strncpy(name.get(), pathTemplate, len);\n-    name.get()[len] = '\\0';\n+    strcpy(name.get(), pathTemplate);\n \n     VLOG(2) << \"Trying to create the temp directory with pattern \\\"\"\n             << name.get() << \"\\\"\";\nReview:"}
{"pred": "This is a breaking change, so you should add a note to the release notes.", "gold": "Can we port this error msg to v2 too? This one is better, as it explicitly states what sources are allowed.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -36,7 +36,7 @@ const (\n \n // ErrSharedConfigSourceCollision will be returned if a section contains both\n // source_profile and credential_source\n-var ErrSharedConfigSourceCollision = awserr.New(ErrCodeSharedConfig, \"only source profile or credential source can be specified, not both\", nil)\n+var ErrSharedConfigSourceCollision = awserr.New(ErrCodeSharedConfig, \"only one credential type may be specified per profile: source profile, credential source, credential process, web identity token, or sso\", nil)\n \n // ErrSharedConfigECSContainerEnvVarEmpty will be returned if the environment\n // variables are empty and Environment was set as the credential source\nReview:"}
{"pred": "We should add a comment here to explain why we need this import.", "gold": "The convention so far has been to require directly from the defining file (in this case `../../read_preference') . I think the concern has been mostly about the potential for circular dependency cycles", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -3,6 +3,7 @@\n var f = require('util').format;\n var test = require('./shared').assert;\n var setupDatabase = require('./shared').setupDatabase;\n+const { ReadPreference } = require('../..');\n const Db = require('../../lib/db');\n const expect = require('chai').expect;\n \nReview:"}
{"pred": "Is the default value for color_type appropriate?", "gold": "I suggest expanding dims here to simplify the formatting.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -10,8 +10,9 @@ from ..registry import PIPELINES\n @PIPELINES.register_module\n class LoadImageFromFile(object):\n \n-    def __init__(self, to_float32=False):\n+    def __init__(self, to_float32=False, color_type='color'):\n         self.to_float32 = to_float32\n+        self.color_type = color_type\n \n     def __call__(self, results):\n         if results['img_prefix'] is not None:\nReview:"}
{"pred": "This should be a relative path, rather than an absolute one.", "gold": "Why do you need to specify the kinto prefix here?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -9,7 +9,7 @@ from pyramid.paster import bootstrap\n \n from kinto.config import init\n \n-CONFIG_FILE = 'config/kinto.ini'\n+CONFIG_FILE = 'kinto/config/kinto.ini'\n \n \n def main(args=None):\nReview:"}
{"pred": "This is a good change as it simplifies the code and makes it more readable.", "gold": "The `!r` is unnecessary.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -45,7 +45,7 @@ class FPN(nn.Module):\n         >>> self = FPN(in_channels, 11, len(in_channels)).eval()\n         >>> outputs = self.forward(inputs)\n         >>> for i in range(len(outputs)):\n-        ...     print('outputs[{}].shape = {!r}'.format(i, outputs[i].shape))\n+        ...     print(f'outputs[{i}].shape = {outputs[i].shape!r}')\n         outputs[0].shape = torch.Size([1, 11, 340, 340])\n         outputs[1].shape = torch.Size([1, 11, 170, 170])\n         outputs[2].shape = torch.Size([1, 11, 84, 84])\nReview:"}
{"pred": "This looks like it could be simplified to just check if either accountKey or sasToken is not empty.", "gold": "I didn't see existing tests for this `OpenBucketURL`. Not sure if it's easy to do without mocking these `opener` calls.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -161,7 +161,7 @@ func (o *lazyCredsOpener) OpenBucketURL(ctx context.Context, u *url.URL) (*blob.\n \n \t\tisMSIEnvironment := adal.MSIAvailable(ctx, adal.CreateSender())\n \n-\t\tif accountKey != \"\" {\n+\t\tif accountKey != \"\" || sasToken != \"\" {\n \t\t\to.opener, o.err = openerFromEnv(accountName, accountKey, sasToken, storageDomain, protocol)\n \t\t} else if isMSIEnvironment {\n \t\t\to.opener, o.err = openerFromMSI(accountName, storageDomain, protocol)\nReview:"}
{"pred": "It looks like PreparerNeeded is not being used anywhere. Is this intentional?", "gold": "Should we default to `true` ?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -21,6 +21,8 @@ namespace AutoRest.Go.TemplateModels\n         // (null or empty if the model is not paged).\n         public string NextLink;\n \n+        public bool PreparerNeeded;\n+\n         public ModelTemplateModel(CompositeType source)\n         {\n             this.LoadFrom(source);\nReview:"}
{"pred": "This looks like a good change, adding the FSM package to the imports.", "gold": "File is not `goimports`-ed (from `goimports`)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -15,6 +15,7 @@ import (\n \tuconfig \"go.uber.org/config\"\n \n \t\"github.com/iotexproject/iotex-core/address\"\n+\t\"github.com/iotexproject/iotex-core/consensus/fsm\"\n \t\"github.com/iotexproject/iotex-core/crypto\"\n \t\"github.com/iotexproject/iotex-core/pkg/keypair\"\n )\nReview:"}
{"pred": "This looks good, however, it would be good to add a comment explaining why we are setting babelrc and configFile to false.", "gold": "Shouldn't these options also include `@babel/preset-env`? Also I see you set `babelrc` to `false`, could we rely on our existing `.babelrc` file? Feels like some duplicate configuration otherwise.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -54,11 +54,14 @@ const rules = [\n \t\tuse: [\n \t\t\t{\n \t\t\t\tloader: 'babel-loader',\n-\t\t\t\tquery: {\n-\t\t\t\t\tpresets: [ [ '@babel/env', {\n-\t\t\t\t\t\tuseBuiltIns: 'entry',\n-\t\t\t\t\t\tcorejs: 2,\n-\t\t\t\t\t} ], '@babel/preset-react' ],\n+\t\t\t\toptions: {\n+\t\t\t\t\tbabelrc: false,\n+\t\t\t\t\tconfigFile: false,\n+\t\t\t\t\tcacheDirectory: true,\n+\t\t\t\t\tpresets: [\n+\t\t\t\t\t\t'@wordpress/default',\n+\t\t\t\t\t\t'@babel/preset-react',\n+\t\t\t\t\t],\n \t\t\t\t},\n \t\t\t},\n \t\t\t{\nReview:"}
{"pred": "Good change, now we have more information about why the peer was disconnected.", "gold": "Nit: We can use `%s` since `disconnectReason` is a string.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1609,7 +1609,7 @@ func (wn *WebsocketNetwork) removePeer(peer *wsPeer, reason disconnectReason) {\n \t// first logging, then take the lock and do the actual accounting.\n \t// definitely don't change this to do the logging while holding the lock.\n \tlocalAddr, _ := wn.Address()\n-\twn.log.With(\"event\", \"Disconnected\").With(\"remote\", peer.rootURL).With(\"local\", localAddr).Infof(\"Peer %v disconnected\", peer.rootURL)\n+\twn.log.With(\"event\", \"Disconnected\").With(\"remote\", peer.rootURL).With(\"local\", localAddr).Infof(\"Peer %v disconnected: %v\", peer.rootURL, reason)\n \tpeerAddr := peer.OriginAddress()\n \t// we might be able to get addr out of conn, or it might be closed\n \tif peerAddr == \"\" && peer.conn != nil {\nReview:"}
{"pred": "Is boosting_type='rgf' the best choice here? It might be worth testing other boosting types to see if they yield better results.", "gold": "I think it's better to create a new example", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -17,7 +17,8 @@ X_test = df_test.drop(0, axis=1).values\n \n print('Start training...')\n # train\n-gbm = lgb.LGBMRegressor(objective='regression',\n+gbm = lgb.LGBMRegressor(boosting_type='rgf',\n+                        objective='regression',\n                         num_leaves=31,\n                         learning_rate=0.05,\n                         n_estimators=20)\nReview:"}
{"pred": "The kDepthStencilAttachmentRasterOrder should be changed to kAttachmentRasterOrder here.", "gold": "The stages are correct, but the more forgiving `kAttachmentRasterOrder` should be used, based on a review of the spec. That should give the same effect of suppressing the false positive conflict between the DEPTH R/W and resolve. > End-of-subpass multisample resolves are treated as color attachment writes for the purposes of synchronization. This applies to resolve operations for both color and depth/stencil attachments. That is, they are considered to execute in the VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT pipeline stage and their writes are synchronized with VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT. Synchronization between rendering within a subpass and any resolve operations at the end of the subpass occurs automatically, without need for explicit dependencies or pipeline barriers.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -392,7 +392,7 @@ void ResolveOperation(Action &action, const RENDER_PASS_STATE &rp_state, const V\n \n         if (aspect_mask) {\n             action(aspect_string, \"resolve read\", src_at, dst_at, attachment_views[src_at],\n-                   SYNC_COLOR_ATTACHMENT_OUTPUT_COLOR_ATTACHMENT_READ, kDepthStencilAttachmentRasterOrder, offset, extent,\n+                   SYNC_COLOR_ATTACHMENT_OUTPUT_COLOR_ATTACHMENT_READ, kAttachmentRasterOrder, offset, extent,\n                    aspect_mask);\n             action(aspect_string, \"resolve write\", src_at, dst_at, attachment_views[dst_at],\n                    SYNC_COLOR_ATTACHMENT_OUTPUT_COLOR_ATTACHMENT_WRITE, kAttachmentRasterOrder, offset, extent, aspect_mask);\nReview:"}
{"pred": "Is this the correct syntax for the second AcidBasePair? It looks like it should be '--SO3H' instead of '\u2013SO3H'.", "gold": "To be consistent, I think it should actually just be a single `-`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -64,7 +64,7 @@ class AcidBasePair(object):\n #: Administration Substance Registration System Standard Operating Procedure guide.\n ACID_BASE_PAIRS = (\n     AcidBasePair('-OSO3H', 'OS(=O)(=O)[OH]', 'OS(=O)(=O)[O-]'),\n-    AcidBasePair('\u2013SO3H', '[!O]S(=O)(=O)[OH]', '[!O]S(=O)(=O)[O-]'),\n+    AcidBasePair('--SO3H', '[!O]S(=O)(=O)[OH]', '[!O]S(=O)(=O)[O-]'),\n     AcidBasePair('-OSO2H', 'O[SD3](=O)[OH]', 'O[SD3](=O)[O-]'),\n     AcidBasePair('-SO2H', '[!O][SD3](=O)[OH]', '[!O][SD3](=O)[O-]'),\n     AcidBasePair('-OPO3H2', 'OP(=O)([OH])[OH]', 'OP(=O)([OH])[O-]'),\nReview:"}
{"pred": "This should be moved to a utils module or something similar, as it is not specific to this file.", "gold": "this seems extraneous.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -6,6 +6,7 @@ import yaml\n \n from datetime import datetime\n from listenbrainz.utils import escape, convert_to_unix_timestamp\n+from flask import current_app\n \n def flatten_dict(d, seperator='', parent_key=''):\n     \"\"\"\nReview:"}
{"pred": "We should add a test to ensure that the new DNS Name is actually added to the Certificate.", "gold": "Ah, I see here that 'LongDomain' is defined as something that contains a subdomain segment that is `maxLengthOfDomainSegment` long (which I think is 63 characters) - I don't think any public ACME servers/Let's Encrypt's staging environment has a restriction on this?   if it does, and the 'pebble' based ACME server does not, then Pebble needs modifying to also fail in these cases as it aims to replicate the ACME RFC as closely as possible", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -795,7 +795,7 @@ func (s *Suite) Define() {\n \t\t\tBy(\"Sanity-check the issued Certificate\")\n \t\t\terr = f.Helper().ValidateCertificate(f.Namespace.Name, \"testcert\", validations...)\n \t\t\tExpect(err).NotTo(HaveOccurred())\n-\t\t}, featureset.OnlySAN)\n+\t\t}, featureset.OnlySAN, featureset.LongDomainFeatureSet)\n \n \t\ts.it(f, \"should allow updating an existing certificate with a new DNS Name\", func(issuerRef cmmeta.ObjectReference) {\n \t\t\ttestCertificate := &cmapi.Certificate{\nReview:"}
{"pred": "It looks like you are using gdebi to install R now, so you don't need to export the PATH and LD_LIBRARY_PATH variables.", "gold": "I think you need `-y` here to prevent a user confirmation prompt", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -112,12 +112,13 @@ module Travis\n                   'cdbs qpdf texinfo libssh2-1-dev devscripts '\\\n                   \"#{optional_apt_pkgs}\", retry: true\n \n-                r_filename = \"R-#{r_version}-$(lsb_release -cs).xz\"\n-                r_url = \"https://travis-ci.rstudio.org/#{r_filename}\"\n+                r_filename = \"r-#{r_version}_1_amd64.deb\"\n+                os_version = \"$(lsb_release -rs | tr -d '.')\"\n+                r_url = \"https://cdn.rstudio.com/r/ubuntu-#{os_version}/pkgs/#{r_filename}\"\n                 sh.cmd \"curl -fLo /tmp/#{r_filename} #{r_url}\", retry: true\n-                sh.cmd \"tar xJf /tmp/#{r_filename} -C ~\"\n-                sh.export 'PATH', \"${TRAVIS_HOME}/R-bin/bin:$PATH\", echo: false\n-                sh.export 'LD_LIBRARY_PATH', \"${TRAVIS_HOME}/R-bin/lib:$LD_LIBRARY_PATH\", echo: false\n+                sh.cmd \"sudo apt-get install gdebi-core\"\n+                sh.cmd \"sudo gdebi r-#{r_version}_1_amd64.deb\"\n+                sh.export 'PATH', \"/opt/R/#{r_version}/bin:$PATH\", echo: false\n                 sh.rm \"/tmp/#{r_filename}\"\n \n                 sh.cmd \"sudo mkdir -p /usr/local/lib/R/site-library $R_LIBS_USER\"\nReview:"}
{"pred": "This should be documented as to why this flag was added and what it does.", "gold": "Repeating: I don't think this should be a core-wide global var. This should be isolated to arch/x86 or at least arch/, maybe inside getter/setters as mentioned above.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -100,6 +100,7 @@ bool dynamo_heap_initialized = false;\n bool dynamo_started = false;\n bool automatic_startup = false;\n bool control_all_threads = false;\n+bool dynamo_avx512_code_in_use = false;\n #ifdef WINDOWS\n bool dr_early_injected = false;\n int dr_early_injected_location = INJECT_LOCATION_Invalid;\nReview:"}
{"pred": "It looks like the PLUGINS_DOWNLOAD_TPL is no longer being used. Is this intentional?", "gold": "right URL is like in cmdrunner, using search.maven .org", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -55,8 +55,11 @@ class JMeterExecutor(ScenarioExecutor, WidgetProvider, FileLister):\n     \"\"\"\n     MIRRORS_SOURCE = \"https://archive.apache.org/dist/jmeter/binaries/\"\n     JMETER_DOWNLOAD_LINK = \"https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-{version}.zip\"\n+    PLUGINS_MANAGER = 'https://repo1.maven.org/maven2/kg/apc/jmeter-plugins-manager/0.8/jmeter-plugins-manager-0.8.jar'\n+    CMDRUNNER = 'http://search.maven.org/remotecontent?filepath=kg/apc/cmdrunner/2.0/cmdrunner-2.0.jar'\n+    PLUGINS = [\"jpgc-casutg\", \"jpgc-dummy\", \"jpgc-ffw\", \"jpgc-fifo\", \"jpgc-functions\",\n+               \"jpgc-json\", \"jpgc-perfmon\", \"jpgc-prmctl\", \"jpgc-tst\"]\n     JMETER_VER = \"3.0\"\n-    PLUGINS_DOWNLOAD_TPL = \"http://jmeter-plugins.org/files/JMeterPlugins-{plugin}-1.4.0.zip\"\n     UDP_PORT_NUMBER = None\n \n     def __init__(self):\nReview:"}
{"pred": "The default value should be a valid URL, so it should start with http or https.", "gold": "The link to valid syntax is not really applicable for NET2_1, right?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -32,9 +32,9 @@ namespace OpenTelemetry.Exporter\n #if NETSTANDARD2_1\n         /// <summary>\n         /// Gets or sets the target to which the exporter is going to send traces or metrics.\n-        /// The valid syntax is described at https://github.com/grpc/grpc/blob/master/doc/naming.md.\n+        /// The valid syntax is described at https://github.com/grpc/grpc/blob/master/doc/naming.md. The endpoint value should start with http or https.\n         /// </summary>\n-        public Uri Endpoint { get; set; } = new Uri(\"http://localhost:4317\");\n+        public string Endpoint { get; set; } = \"http://localhost:4317\";\n #else\n         /// <summary>\n         /// Gets or sets the target to which the exporter is going to send traces or metrics.\nReview:"}
{"pred": "This should be moved to the top of the file, as it is important information for the user.", "gold": "Shouldn't it be more specific, like \"gcppubsub supports all UTF-8 strings\"?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -16,6 +16,13 @@\n // PubSub. Use OpenTopic to construct a *pubsub.Topic, and/or OpenSubscription\n // to construct a *pubsub.Subscription.\n //\n+// Escaping\n+//\n+// Go CDK supports all UTF-8 strings; some strings are escaped (during writes)\n+// and unescaped (during reads) to ensure compatibility with the provider:\n+//  - Metadata keys: No escaping required.\n+//  - Metadata values: No escaping required.\n+//\n // As\n //\n // gcspubsub exposes the following types for As:\nReview:"}
{"pred": "You should update the variable name to be consistent with the comment.", "gold": "Everything in this class is SolrCloud-related, not legacy replication", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -59,14 +59,14 @@ public class CdcrReplicationHandlerTest extends BaseCdcrDistributedZkTest {\n   }\n \n   /**\n-   * Test the scenario where the slave is killed from the start. The replication\n+   * Test the scenario where the secondary is killed from the start. The replication\n    * strategy should fetch all the missing tlog files from the leader.\n    */\n   @Test\n   @ShardsFixed(num = 2)\n   public void testFullReplication() throws Exception {\n-    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n-    slaves.get(0).jetty.stop();\n+    List<CloudJettyRunner> secondaries = this.getShardToSecondaryJetty(SOURCE_COLLECTION, SHARD1);\n+    secondaries.get(0).jetty.stop();\n \n     for (int i = 0; i < 10; i++) {\n       List<SolrInputDocument> docs = new ArrayList<>();\nReview:"}
{"pred": "This looks like a refactor, but it's hard to tell without seeing the original code. It looks like the logic is the same, but it's worth double checking.", "gold": "Could just assign directly and eliminate the `newval` var.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1122,15 +1122,8 @@ drbbdup_prepare_redirect(dr_mcontext_t *mcontext, drbbdup_manager_t *manager,\n {\n     /* Restore flags and scratch reg to their original app values. */\n     if (!manager->are_flags_dead) {\n-        reg_t val;\n-        uint sahf;\n-        reg_t newval = mcontext->xflags;\n-        val = (reg_t)drbbdup_get_tls_raw_slot_val(DRBBDUP_FLAG_REG_SLOT);\n-        sahf = (val & 0xff00) >> 8;\n-        newval &= ~(EFLAGS_ARITH);\n-        newval |= sahf;\n-        if (TEST(1, val)) /* seto */\n-            newval |= EFLAGS_OF;\n+        reg_t val = (reg_t)drbbdup_get_tls_raw_slot_val(DRBBDUP_FLAG_REG_SLOT);\n+        reg_t newval = dr_merge_arith_flags(mcontext->xflags, val);\n         mcontext->xflags = newval;\n     }\n     if (!manager->is_scratch_reg_dead) {\nReview:"}
{"pred": "You should add a comment to the pullRequestTitleRegexp variable to explain why it is the same as the issueTitleRegexp.", "gold": "... with the name of the affected package, or \"all\", followed by a colon,...", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -27,11 +27,13 @@ import (\n const (\n \tinProgressLabel            = \"in progress\"\n \tissueTitleComment          = \"Please edit the title of this issue with the name of the affected package, followed by a colon, followed by a short summary of the issue. Example: `blob/gcsblob: not blobby enough`.\"\n+\tpullRequestTitleComment    = \"Please edit the title of this pull request with the name of the affected package, followed by a colon, followed by a short summary of the change. Example: `blob/gcsblob: improve comments`.\"\n \tbranchesInForkCloseComment = \"Please create pull requests from your own fork instead of from branches in the main repository. Also, please delete this branch.\"\n )\n \n var (\n-\tissueTitleRegexp = regexp.MustCompile(\"^[a-z0-9/]+: .*$\")\n+\tissueTitleRegexp       = regexp.MustCompile(\"^[a-z0-9/]+: .*$\")\n+\tpullRequestTitleRegexp = issueTitleRegexp\n )\n \n // issueData is information about an issue event.\nReview:"}
{"pred": "It's good that you are adding this, but it would be better to refactor the code so that you don't have to add this in multiple places.", "gold": "We'll want to remove this one if we make the assembly version constant.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -48,6 +48,10 @@ namespace PrepareRelease\n                 \"src/Datadog.Trace.ClrProfiler.Managed/Datadog.Trace.ClrProfiler.Managed.csproj\",\n                 NugetVersionReplace);\n \n+            SynchronizeVersion(\n+                \"src/Datadog.Trace.ClrProfiler.Managed.Core/Datadog.Trace.ClrProfiler.Managed.Core.csproj\",\n+                NugetVersionReplace);\n+\n             SynchronizeVersion(\n                 \"src/Datadog.Trace.ClrProfiler.Native/CMakeLists.txt\",\n                 text => FullVersionReplace(text, \".\"));\nReview:"}
{"pred": "This looks good, but it would be nice to have a comment explaining what this new setup_single_page_style() function does.", "gold": "Can we have a single function here that uses the same subscribers and just changes meta based on context?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -51,6 +51,7 @@ class Frontend extends Generator {\n \t\t$this->setup_blog_colors();\n \t\t$this->setup_form_fields_style();\n \t\t$this->setup_single_post_style();\n+\t\t$this->setup_single_page_style();\n \t}\n \n \t/**\nReview:"}
{"pred": "This comment should be updated to explain the purpose of the class, not just the function.", "gold": "where would ` static startup_kernel_loader skl;` be instantiated? if it's not instantiated anywhere should this be removed?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -513,8 +513,9 @@ hsa_executable_t load_executable(const string& file, hsa_executable_t executable\n     return executable;\n }\n \n-// To force HIP to load the kernels and to setup the function\n-// symbol map on program startup\n+// HIP startup kernel loader logic\n+// When enabled HIP_STARTUP_LOADER, HIP will load the kernels and setup\n+// the function symbol map on program startup\n class startup_kernel_loader {\n    private:\n     startup_kernel_loader() { functions(); }\nReview:"}
{"pred": "This looks good. It's nice to see the different API implementations separated out into their own modules.", "gold": "I think we should move those util functions that work with drag-drop to @uppy/utils, so they can be shared (maybe later) with drag-drop plugin? Otherwise it will continue to depend on drag-drop module.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,14 @@\n+const webkitGetAsEntryApi = require('./utils/webkitGetAsEntryApi')\n+const getFilesAndDirectoriesApi = require('./utils/getFilesAndDirectoriesApi')\n+const fallbackApi = require('./utils/fallbackApi')\n+\n+module.exports = function getDroppedFiles (dataTransfer, callback) {\n+  if (dataTransfer.items[0] && 'webkitGetAsEntry' in dataTransfer.items[0]) {\n+    webkitGetAsEntryApi(dataTransfer, callback)\n+  } else if ('getFilesAndDirectories' in dataTransfer) {\n+    // Doesn't actually work in firefox, maybe in previous versions. webkitGetAsEntryApi() works.\n+    getFilesAndDirectoriesApi(dataTransfer, callback)\n+  } else {\n+    fallbackApi(dataTransfer, callback)\n+  }\n+}\nReview:"}
{"pred": "This code can be simplified by using the built-in copy() function for maps.", "gold": "Migrate the spec.Labels to locator.Labels ?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -732,12 +732,6 @@ func (m *Volume) Contains(mid string) bool {\n // Copy makes a deep copy of VolumeSpec\n func (s *VolumeSpec) Copy() *VolumeSpec {\n \tspec := *s\n-\tif s.VolumeLabels != nil {\n-\t\tspec.VolumeLabels = make(map[string]string)\n-\t\tfor k, v := range s.VolumeLabels {\n-\t\t\tspec.VolumeLabels[k] = v\n-\t\t}\n-\t}\n \tif s.ReplicaSet != nil {\n \t\tspec.ReplicaSet = &ReplicaSet{Nodes: make([]string, len(s.ReplicaSet.Nodes))}\n \t\tcopy(spec.ReplicaSet.Nodes, s.ReplicaSet.Nodes)\nReview:"}
{"pred": "This looks like a typo, should it be `if gotErr != nil` instead?", "gold": "The test case already existed but it never tested properly because of the conditional in the test.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -250,7 +250,7 @@ func TestS3_EmptyBucket(t *testing.T) {\n \n \t\t\tgotErr := service.EmptyBucket(tc.inBucket)\n \n-\t\t\tif gotErr != nil {\n+\t\t\tif tc.wantErr != nil {\n \t\t\t\trequire.EqualError(t, gotErr, tc.wantErr.Error())\n \t\t\t}\n \t\t})\nReview:"}
{"pred": "This looks good. The code is more concise and easier to read.", "gold": "I'm okay with this, but I don't see a lot of benefit to removing unnecessary parens. If extra parens make something more readable (like this) or clarify order of operations even when matching the default, I would say we should keep them.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -68,11 +68,9 @@ public class PartitionField implements Serializable {\n     }\n \n     PartitionField that = (PartitionField) other;\n-    return (\n-        sourceId == that.sourceId &&\n+    return sourceId == that.sourceId &&\n         name.equals(that.name) &&\n-        transform.equals(that.transform)\n-    );\n+        transform.equals(that.transform);\n   }\n \n   @Override\nReview:"}
{"pred": "You should add a comment here explaining why you are initializing the dynamicFields array.", "gold": "@sarowe why was this volatile? It's fishy to see this as the only volatile field.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -138,7 +138,7 @@ public class IndexSchema {\n \n   protected List<SchemaField> fieldsWithDefaultValue = new ArrayList<>();\n   protected Collection<SchemaField> requiredFields = new HashSet<>();\n-  protected volatile DynamicField[] dynamicFields;\n+  protected DynamicField[] dynamicFields = new DynamicField[] {};\n   public DynamicField[] getDynamicFields() { return dynamicFields; }\n \n   protected Map<String, SchemaField> dynamicFieldCache = new ConcurrentHashMap<>();\nReview:"}
{"pred": "This class appears to be empty, is there a reason for it to exist?", "gold": "template is not correct?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,13 @@\n+package org.apache.servicecomb.serviceregistry.task.event;\n+\n+/**\n+ * \u4e00\u53e5\u8bdd\u529f\u80fd\u7b80\u8ff0\n+ * \u529f\u80fd\u8be6\u7ec6\u63cf\u8ff0\n+ * @author m00416667\n+ * @version [\u7248\u672c\u53f7, ]\n+ * @see  [\u76f8\u5173\u7c7b/\u65b9\u6cd5]\n+ * @since [\u4ea7\u54c1/\u6a21\u5757\u7248\u672c]\n+ * Package Name:org.apache.servicecomb.serviceregistry.task.event\n+ */\n+public class InstanceRegistryFailedEvent {\n+}\nReview:"}
{"pred": "This looks good.", "gold": "Rename the registies to `BBOX_ASSIGNERS` and `BBOX_SAMPLERS` to avoid ambiguity. There is also a registry for dataset sampler.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,4 @@\n+from mmdet.utils import Registry\n+\n+ASSIGNERS = Registry('assigner')\n+SAMPLERS = Registry('sampler')\nReview:"}
{"pred": "We should add a check to make sure that FakeFS is deactivated after the test is complete.", "gold": "This is no longer stubbed on every test. Perhaps it should be, and should be unstubbed in the single case that it matters.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -89,9 +89,7 @@ module Beaker\n     describe \"provisioning and cleanup\" do\n \n       before :each do\n-        vagrant.should_receive( :make_vfile ).with( @hosts ).once\n-\n-        vagrant.should_receive( :vagrant_cmd ).with( \"destroy --force\" ).once\n+        FakeFS.activate!\n         vagrant.should_receive( :vagrant_cmd ).with( \"up\" ).once\n         @hosts.each do |host|\n           host_prev_name = host['user']\nReview:"}
{"pred": "Should this be a 500 status code?", "gold": "This seems much simpler! I'm not sure I follow what you mean by the threading part... Also tests are not liking this constant. Might need a require or to fully qualify this.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -188,6 +188,11 @@ module BoltServer\n       [200, GC.stat.to_json]\n     end\n \n+    get '/admin/status' do\n+      stats = Puma.stats\n+      [200, stats.is_a?(Hash) ? stats.to_json : stats]\n+    end\n+\n     get '/500_error' do\n       raise 'Unexpected error'\n     end\nReview:"}
{"pred": "Should we add a comment here to explain why we are not implementing single step exception?", "gold": "Convention is \"FIXME: i#2144\" or \"XXX: i#2144\"", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -5902,6 +5902,7 @@ os_forge_exception(app_pc target_pc, dr_exception_type_t type)\n     switch (type) {\n     case ILLEGAL_INSTRUCTION_EXCEPTION: sig = SIGILL; break;\n     case UNREADABLE_MEMORY_EXECUTION_EXCEPTION: sig = SIGSEGV; break;\n+    case SINGLE_STEP_EXCEPTION: ASSERT_NOT_IMPLEMENTED(false); /* cf i#2144 */\n     case IN_PAGE_ERROR_EXCEPTION: /* fall-through: Windows only */\n     default: ASSERT_NOT_REACHED(); sig = SIGSEGV; break;\n     }\nReview:"}
{"pred": "Looks good.", "gold": "This should probably be a property instead of a method.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,7 @@\n+namespace Datadog.Trace.ClrProfiler.Interfaces\n+{\n+    internal interface IHasHttpMethod\n+    {\n+        string GetHttpMethod();\n+    }\n+}\nReview:"}
{"pred": "This looks good.", "gold": "do we need to consider setting the `state` as well? If so, lot of changes might be required, like, setting to 'Reconciling' in upgrade code, setting to 'error' or 'reconciled' in volumeReconciler functions.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -159,10 +159,12 @@ spec:\n     status:\n       phase: Init\n     versionDetails:\n-      current: {{ .CAST.version }}\n+      status:\n+        current: {{ .CAST.version }}\n+        dependentsUpgraded: true\n+        state: RECONCILED\n       desired: {{ .CAST.version }}\n       autoUpgrade: false\n-      dependentsUpgraded: true\n ---\n apiVersion: openebs.io/v1alpha1\n kind: RunTask\nReview:"}
{"pred": "Is this necessary? It looks like the original code was already formatted correctly.", "gold": "Line is too long. [82/80]", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -3,7 +3,11 @@ module Blacklight::Solr\n     extend ActiveSupport::Concern\n \n     included do\n-      self.default_processor_chain = [:default_solr_parameters, :add_query_to_solr, :add_facet_fq_to_solr, :add_facetting_to_solr, :add_solr_fields_to_query, :add_paging_to_solr, :add_sorting_to_solr, :add_group_config_to_solr ]\n+      self.default_processor_chain = [\n+        :default_solr_parameters, :add_query_to_solr, :add_facet_fq_to_solr,\n+        :add_facetting_to_solr, :add_solr_fields_to_query, :add_paging_to_solr,\n+        :add_sorting_to_solr, :add_group_config_to_solr, :add_facet_paging_to_solr\n+      ]\n     end\n \n     ####\nReview:"}
{"pred": "This looks good.", "gold": "Add blank line below license header.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,4 +1,5 @@\n-// Copyright (c) Microsoft. All rights reserved.\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n namespace Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel\n {\n     using System;\nReview:"}
{"pred": "This looks good, but it would be nice to have a comment explaining why we are doing this.", "gold": "I'm not clear on whether this really should be the right behavior. Basically we're saying that a replace table will keep the existing location (as opposed to using defaults). I suspect we don't have create or replace with location semantics, but this is making some assumptions that a replacement is somehow the same as the old. If we were to go with id based pathing convention, this wouldn't work. I don't think this is an issue at this point, but it might make sense to push this down to the location provider.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -110,9 +110,17 @@ public abstract class BaseMetastoreCatalog implements Catalog {\n       throw new NoSuchTableException(\"No such table: \" + identifier);\n     }\n \n-    String baseLocation = location != null ? location : defaultWarehouseLocation(identifier);\n     Map<String, String> tableProperties = properties != null ? properties : Maps.newHashMap();\n-    TableMetadata metadata = TableMetadata.newTableMetadata(schema, spec, baseLocation, tableProperties);\n+\n+    TableMetadata metadata;\n+    if (ops.current() != null) {\n+      String baseLocation = location != null ? location : ops.current().location();\n+      metadata = ops.current().buildReplacement(schema, spec, baseLocation, tableProperties);\n+    } else {\n+      String baseLocation = location != null ? location : defaultWarehouseLocation(identifier);\n+      metadata = TableMetadata.newTableMetadata(schema, spec, baseLocation, tableProperties);\n+    }\n+\n     if (orCreate) {\n       return Transactions.createOrReplaceTableTransaction(identifier.toString(), ops, metadata);\n     } else {\nReview:"}
{"pred": "Is there a reason why you are importing the same package twice?", "gold": "Just run a global replacement for all `executionproto`.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -37,8 +37,10 @@ import (\n \texecutionpb \"go.temporal.io/temporal-proto/execution\"\n \ttasklistpb \"go.temporal.io/temporal-proto/tasklist\"\n \n+\texecutionproto \"github.com/temporalio/temporal/.gen/proto/execution\"\n \t\"github.com/temporalio/temporal/.gen/proto/persistenceblobs\"\n \treplicationgenpb \"github.com/temporalio/temporal/.gen/proto/replication\"\n+\n \t\"github.com/temporalio/temporal/common\"\n \t\"github.com/temporalio/temporal/common/checksum\"\n \t\"github.com/temporalio/temporal/common/persistence/serialization\"\nReview:"}
{"pred": "Should the default value for options be None?", "gold": "@AutomatedTester @davehunt thoughts on a new keyword argument?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -111,7 +111,7 @@ class WebDriver(object):\n \n     def __init__(self, command_executor='http://127.0.0.1:4444/wd/hub',\n                  desired_capabilities=None, browser_profile=None, proxy=None,\n-                 keep_alive=False, file_detector=None):\n+                 keep_alive=False, file_detector=None, options=None):\n         \"\"\"\n         Create a new driver that will issue commands using the wire protocol.\n \nReview:"}
{"pred": "Should we add a log message here to indicate what the error was?", "gold": "Should line 47 be OPAE_ERR?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -49,6 +49,9 @@ fpga_result opae_ioctl(int fd, int request, ...)\n \t\tcase EINVAL:\n \t\t\tres = FPGA_INVALID_PARAM;\n \t\t\tbreak;\n+\t\tcase ENOTSUP:\n+\t\t\tres = FPGA_NOT_SUPPORTED;\n+\t\t\tbreak;\n \t\tdefault:\n \t\t\t// other errors could be\n \t\t\t// EBADF - fd is bad file descriptor\nReview:"}
{"pred": "Is there a reason why you are adding a zeroTime variable here?", "gold": "Not necessary, just write `time.Time{}`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -104,6 +104,8 @@ import (\n \t\"gocloud.dev/pubsub/driver\"\n )\n \n+var zeroTime time.Time\n+\n // Message contains data to be published.\n type Message struct {\n \t// Body contains the content of the message.\nReview:"}
{"pred": "We should probably add a maxint here to prevent the tabbar from becoming too large.", "gold": "As these two strings simply get concatenated for the docs, there's a space missing after the dot here.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -499,6 +499,11 @@ def data(readonly=False):\n              SettingValue(typ.Bool(), 'true'),\n              \"Whether to show favicons in the tab bar.\"),\n \n+            ('tabbar-size',\n+             SettingValue(typ.Int(minval=8), '12'),\n+             \"The height of the tabbar in pixels.\"\n+             \"This also controls the size of the favicons.\"),\n+\n             ('width',\n              SettingValue(typ.PercOrInt(minperc=0, maxperc=100, minint=1),\n                           '20%'),\nReview:"}
{"pred": "Should the RecordTelemetry() call be inside the if statement?", "gold": "What about integrations where we don't plug ourselved on OnMethodBegin?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -29,6 +29,7 @@ namespace Datadog.Trace.ClrProfiler.CallTarget\n         {\n             if (IntegrationOptions<TIntegration, TTarget>.IsIntegrationEnabled)\n             {\n+                IntegrationOptions<TIntegration, TTarget>.RecordTelemetry();\n                 return BeginMethodHandler<TIntegration, TTarget>.Invoke(instance);\n             }\n \nReview:"}
{"pred": "This should be changed to visibility_of_all_elements_located to ensure all elements are visible.", "gold": "shouldn't **call** return a boolean?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -102,7 +102,7 @@ class presence_of_all_elements_located(object):\n     def __call__(self, driver):\n         return _find_elements(driver, self.locator)\n         \n-class visibility_of_all_elements_located(object):\n+class visibility_of_any_elements_located(object):\n     \"\"\" An expectation for checking that there is at least one element visible\n     on a web page.\n     locator is used to find the element\nReview:"}
{"pred": "Is this necessary? It looks like it's not being used anywhere.", "gold": "ViewModel classes should not expose any classes from framework.model.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -18,12 +18,15 @@ import com.google.api.codegen.SnippetSetRunner;\n import com.google.api.codegen.viewmodel.FileHeaderView;\n import com.google.api.codegen.viewmodel.ViewModel;\n import com.google.api.codegen.viewmodel.testing.MockServiceImplView.Builder;\n+import com.google.api.tools.framework.model.Interface;\n import com.google.auto.value.AutoValue;\n import java.util.List;\n \n @AutoValue\n public abstract class GapicSurfaceTestClassView implements ViewModel {\n \n+  public abstract Interface service();\n+\n   public abstract FileHeaderView fileHeader();\n \n   public abstract String name();\nReview:"}
{"pred": "It looks like you removed the check for None values here, is that intentional?", "gold": "how would you feel about keeping these tests to be more explicit and having them `assert not _validate...`? or is your view that that is too duplicative of the tests in `test_evaluator.py`?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -135,9 +135,6 @@ def test_single_required_string_field_config_type():\n     assert _validate(_single_required_string_config_dict(), {'string_field': 'value'}) == {\n         'string_field': 'value'\n     }\n-    assert _validate(_single_required_string_config_dict(), {'string_field': None}) == {\n-        'string_field': None\n-    }\n \n     with pytest.raises(DagsterEvaluateConfigValueError):\n         _validate(_single_required_string_config_dict(), {})\nReview:"}
{"pred": "Have you considered adding a test to ensure that the nodes flag is required when using winrm?", "gold": "Why do we use the `winrm_nodes` variable here and not the string `\"winrm_nodes\"` as we were using before?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -21,10 +21,11 @@ test_name \"bolt plan run should apply manifest block on remote hosts via winrm\"\n     scp_to(bolt, File.join(fixtures, 'example_apply'), \"#{dir}/modules/example_apply\")\n   end\n \n-  bolt_command = \"bolt plan run example_apply filepath=#{filepath} nodes=winrm_nodes\"\n+  bolt_command = \"bolt plan run example_apply filepath=#{filepath}\"\n   flags = {\n     '--modulepath' => modulepath(File.join(dir, 'modules')),\n-    '--format' => 'json'\n+    '--format' => 'json',\n+    '-t' => \"winrm_nodes\"\n   }\n \n   teardown do\nReview:"}
{"pred": "Updated copyright year.", "gold": "why update Copyright ?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,4 +1,4 @@\n-/* Copyright (c) 2018 vesoft inc. All rights reserved.\n+/* Copyright (c) 2019 vesoft inc. All rights reserved.\n  *\n  * This source code is licensed under Apache 2.0 License,\n  * attached with Common Clause Condition 1.0, found in the LICENSES directory.\nReview:"}
{"pred": "We should probably add a check to make sure that the table is a sample scan before checking for lob columns.", "gold": "Does this mean we cannot update statistics with sampling on a table with LOB columns?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -7469,7 +7469,14 @@ RelExpr *Scan::bindNode(BindWA *bindWA)\n      bindWA->setErrStatus();\n      return NULL;\n   }\n-\n+  if (naTable->hasLobColumn() && isSampleScan())\n+    {\n+      *CmpCommon::diags() << DgSqlCode(-4322)\n+       << DgTableName(\n+           naTable->getTableName().getQualifiedNameAsAnsiString());\n+     bindWA->setErrStatus();\n+     return NULL;\n+    }\n   // restricted partitions for HBase table\n   if (naTable->isHbaseTable() &&\n       (naTable->isPartitionNameSpecified() ||\nReview:"}
{"pred": "It looks like you've added a new feature here, ClearCacheOption. It would be good to add a unit test to cover the new functionality.", "gold": "Look good, but I think a `[flags]` enum would be more future proof? Although i'm not sure if a flags-enum is working from the XML config. What do you think?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -47,7 +47,18 @@ namespace NLog.LayoutRenderers.Wrappers\n     [ThreadAgnostic]\n     public sealed class CachedLayoutRendererWrapper : WrapperLayoutRendererBase\n     {\n-        private string cachedValue;\n+        /// <summary>\n+        /// A value indicating when the cache is cleared.\n+        /// </summary>\n+        public enum ClearCacheOption \n+        { \n+            /// <summary>Never clear the cache.</summary>\n+            Never = 0,\n+            /// <summary>Clear the cache whenever the <see cref=\"CachedLayoutRendererWrapper\"/> is initialized.</summary>\n+            OnInitialize = 1\n+        }\n+\n+        private string cachedValue = null;\n \n         /// <summary>\n         /// Initializes a new instance of the <see cref=\"CachedLayoutRendererWrapper\"/> class.\nReview:"}
{"pred": "This should be refactored into a separate function, as it is a bit long and complex.", "gold": "Since I believe state will never be anything other than 'expanded' or collapse, you can rewrite this as follows: `return row.treeNode.state === 'expanded' ? 'ui-grid-icon-minus-squared' : 'ui-grid-icon-plus-squared'; `", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1577,6 +1577,16 @@\n       require: '^uiGrid',\n       link: function($scope, $elm, $attrs, uiGridCtrl) {\n         var self = uiGridCtrl.grid;\n+        $scope.treeButtonClass = function(row) {\n+          if ( ( self.options.showTreeExpandNoChildren && row.treeLevel > -1 ) || ( row.treeNode.children && row.treeNode.children.length > 0 ) ) {\n+            if (row.treeNode.state === 'expanded' ) {\n+              return 'ui-grid-icon-minus-squared';\n+            }\n+            if (row.treeNode.state === 'collapsed' ) {\n+              return 'ui-grid-icon-plus-squared';\n+            }\n+          }\n+        };\n         $scope.treeButtonClick = function(row, evt) {\n           evt.stopPropagation();\n           uiGridTreeBaseService.toggleRowTreeState(self, row, evt);\nReview:"}
{"pred": "This class should be updated to support custom id fields.", "gold": "the latter part can go but isn't the first part of this still sound -- that we assume \"id\"?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -32,10 +32,6 @@ import org.apache.solr.common.SolrException;\n  * Solr endpoints for SolrCloud collections, and then use the\n  * {@link LBHttp2SolrClient} to issue requests.\n  *\n- * This class assumes the id field for your documents is called\n- * 'id' - if this is not the case, you must set the right name\n- * with {@link #setIdField(String)}.\n- *\n  * @lucene.experimental\n  * @since solr 8.0\n  */\nReview:"}
{"pred": "This should be tested to make sure it works as expected.", "gold": "Why is the escaping of @ and $ removed?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -27,14 +27,12 @@ var formatter = this;\n string = function(value) {\n \tif (value != null) {\n \t\tvalue = value.replace(/\\\\/g, '\\\\\\\\');\n-\t\tvalue = value.replace(/\\\"/g, '\\\\\"');\n+\t\tvalue = value.replace(/\\'/g, '\\\\\\'');\n \t\tvalue = value.replace(/\\r/g, '\\\\r');\n \t\tvalue = value.replace(/\\n/g, '\\\\n');\n-\t\tvalue = value.replace(/@/g, '\\\\@');\n-\t\tvalue = value.replace(/\\$/g, '\\\\$');\n-\t\treturn '\"' + value + '\"';\n+\t\treturn '\\'' + value + '\\'';\n \t} else {\n-\t\treturn '\"\"';\n+\t\treturn '\\'\\'';\n \t}\n }\n \nReview:"}
{"pred": "Looks good!", "gold": "Nit: `Http` is redundant in this interface's name.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,7 @@\n+namespace Datadog.Trace.ClrProfiler.Interfaces\n+{\n+    internal interface IHasHttpUrl\n+    {\n+        string GetRawUrl();\n+    }\n+}\nReview:"}
{"pred": "It might be better to move this check and put into a separate function, so that it can be reused in other places.", "gold": "what if I set SynchronizableEntitiesPrefix to \"a/b/c/d\" in config?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -82,6 +82,19 @@ func NewCluster(ctx context.Context, cfg *ClusterConfig, creds credentials.Trans\n \tif err != nil {\n \t\treturn nil, nil, err\n \t}\n+\n+\texists, err := store.Exists(cfg.SynchronizableEntitiesPrefix)\n+\tif err != nil {\n+\t\treturn nil, nil, fmt.Errorf(\"failed to check if SynchronizableEntitiesPrefix exists: %s\", err)\n+\t}\n+\n+\tif !exists {\n+\t\terr = store.Put(cfg.SynchronizableEntitiesPrefix, []byte{}, nil)\n+\t\tif err != nil {\n+\t\t\treturn nil, nil, err\n+\t\t}\n+\t}\n+\n \tendpoints, err := parseEndpoints(cfg)\n \tif err != nil {\n \t\treturn nil, nil, err\nReview:"}
{"pred": "This looks good, but you should add a test to make sure the error is thrown when expected.", "gold": "nit: This error message doesn't mention that the path is a directory, maybe \"Dockerfile path is a directory:%s, please provide path to file.\"", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -83,9 +83,13 @@ func (opts *InitAppOpts) Validate() error {\n \t\t}\n \t}\n \tif opts.DockerfilePath != \"\" {\n-\t\tif _, err := listDockerfiles(opts.fs, opts.DockerfilePath); err != nil {\n+\t\tisDir, err := afero.IsDir(opts.fs, opts.DockerfilePath)\n+\t\tif err != nil {\n \t\t\treturn err\n \t\t}\n+\t\tif isDir {\n+\t\t\treturn fmt.Errorf(\"dockerfile path expected, got %s\", opts.DockerfilePath)\n+\t\t}\n \t}\n \tif opts.ProjectName() == \"\" {\n \t\treturn errNoProjectInWorkspace\nReview:"}
{"pred": "Good work on adding the copyright!", "gold": "This is done automatically, you can skip it next time ;)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -26,6 +26,7 @@\n # Copyright (c) 2020 Anthony <tanant@users.noreply.github.com>\n # Copyright (c) 2021 Marc Mueller <30130371+cdce8p@users.noreply.github.com>\n # Copyright (c) 2021 Peter Kolbus <peter.kolbus@garmin.com>\n+# Copyright (c) 2021 Daniel van Noord <13665637+DanielNoord@users.noreply.github.com>\n \n \n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\nReview:"}
{"pred": "It is good to have an explicit check for tab deletion here, but you should also consider adding a check for element deletion as well.", "gold": "This is needed in `set_value` because of `:open-editor` (you could open an editor, close the tab, then close the editor). I don't think it makes any sense to have it here?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -128,6 +128,14 @@ class WebKitElement(webelem.AbstractWebElement):\n             value = javascript.string_escape(value)\n             self._elem.evaluateJavaScript(\"this.value='{}'\".format(value))\n \n+    def dispatch_event(self, event):\n+        self._check_vanished()\n+        if self._tab.is_deleted():\n+            raise webelem.OrphanedError(\"Tab containing element vanished\")\n+        log.webelem.debug(\"Firing event on {!r} via javascript.\".format(self))\n+        self._elem.evaluateJavaScript(\"this.dispatchEvent(new Event('{}'))\"\n+                                      .format(event))\n+\n     def caret_position(self):\n         \"\"\"Get the text caret position for the current element.\"\"\"\n         self._check_vanished()\nReview:"}
{"pred": "It would be good to add a comment here to explain the purpose of these new fields.", "gold": "Perhaps we can assume that profiling is enabled if ProfilingPort is set? And/or configure a default port and frequency, so we don't have to set three config vars every time?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -53,6 +53,10 @@ type agentConfig struct {\n \n \tConfigPath string\n \tUmask      string `hcl:\"umask\"`\n+\n+\tProfilingEnabled string `hcl:\"profiling_enabled\"`\n+\tProfilingPort    string `hcl:\"profiling_port\"`\n+\tProfilingFreq    string `hcl:\"profiling_freq\"`\n }\n \n type RunCLI struct {\nReview:"}
{"pred": "It would be better to have an explicit check for the presence of the option here, rather than relying on the nil? check.", "gold": "This nil check won't correctly handle the case where forward_ssh_agent is set to false - it won't be nil but it should still not be set.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -22,6 +22,7 @@ module Beaker\n       #HACK HACK HACK - add checks here to ensure that we have box + box_url\n       #generate the VagrantFile\n       v_file = \"Vagrant.configure(\\\"2\\\") do |c|\\n\"\n+      v_file << \"  c.ssh.forward_agent = true\\n\" unless options['forward_ssh_agent'].nil?\n       hosts.each do |host|\n         host['ip'] ||= randip #use the existing ip, otherwise default to a random ip\n         v_file << \"  c.vm.define '#{host.name}' do |v|\\n\"\nReview:"}
{"pred": "Should we check if the inputVotes[Num-1] is of type voteAcceptedEvent?", "gold": "We could avoid passing proto since threshold isn't needed.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -521,7 +521,7 @@ func TestVoteTrackerFiltersDuplicateVoteOnce(t *testing.T) {\n \t\t\tinputVotes[i] = helper.MakeValidVoteAcceptedVal(t, i, next, Val1)\n \t\t\texpectedOutputs[i] = thresholdEvent{T: none}\n \t\tcase i == Num:\n-\t\t\tinputVotes[i] = voteFilterRequestEvent{RawVote: inputVotes[Num-1].(voteAcceptedEvent).Vote.R}\n+\t\t\tinputVotes[i] = voteFilterRequestEvent{RawVote: inputVotes[Num-1].(voteAcceptedEvent).Vote.R, Proto: protocol.ConsensusCurrentVersion}\n \t\t\texpectedOutputs[i] = filteredStepEvent{T: voteFilteredStep}\n \t\t}\n \t}\nReview:"}
{"pred": "This code change looks like it is disabling a feature. It would be good to add a comment explaining why this is being done.", "gold": "This route excluding needed for reconnect only when one connection is lost and we trying to establish another. I was thinking to make 2 separate flags for killswitch and reconnect enabling. This way we can keep killswitch working, but we don't need these routes excluded.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1040,7 +1040,10 @@ func (di *Dependencies) AllowURLAccess(servers ...string) error {\n \t\treturn err\n \t}\n \n-\tif config.GetBool(config.FlagKeepConnectedOnFail) {\n+\t// Doesn't work as expected because some services share IP address with\n+\t// each other and with location oracle which is supposed to be routed\n+\t// through VPN tunnel.\n+\tif false && config.GetBool(config.FlagKeepConnectedOnFail) {\n \t\tif err := router.AllowURLAccess(servers...); err != nil {\n \t\t\treturn err\n \t\t}\nReview:"}
{"pred": "Should this be a warning instead of an info log?", "gold": "why can this modification avoid crash?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -124,8 +124,8 @@ RocksEngine::RocksEngine(GraphSpaceID spaceId,\n   }\n   CHECK(status.ok()) << status.ToString();\n   db_.reset(db);\n-  partsNum_ = allParts().size();\n   extractorLen_ = sizeof(PartitionID) + vIdLen;\n+  partsNum_ = allParts().size();\n   LOG(INFO) << \"open rocksdb on \" << path;\n \n   backup();\nReview:"}
{"pred": "You should add a check to make sure @account is not nil before checking the access.disabled? flag.", "gold": "This looks good -- signing out the user if the current user is disabled", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,8 +1,7 @@\n module RedirectIfDisabled\n   def redirect_if_disabled\n-    account = current_user\n-    return unless account && account.access.disabled?\n-    request.env[:clearance].sign_out\n-    redirect_to disabled_account_url(account)\n+    return unless @account && @account.access.disabled?\n+    request.env[:clearance].sign_out if @account.id == current_user.id\n+    redirect_to disabled_account_url(@account)\n   end\n end\nReview:"}
{"pred": "This is a good change to make sure that the corner header is taken into account when selecting rows and columns.", "gold": "The line exceeds 120 characters.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -47,13 +47,13 @@ class Selection {\n      */\n     this.selectedByCorner = false;\n     /**\n-     * The collection of the selection layer levels where the whole row was selected using the row header.\n+     * The collection of the selection layer levels where the whole row was selected using the row header or the corner header.\n      *\n      * @type {Set.<number>}\n      */\n     this.selectedByRowHeader = new Set();\n     /**\n-     * The collection of the selection layer levels where the whole column was selected using the column header.\n+     * The collection of the selection layer levels where the whole column was selected using the column header or the corner header.\n      *\n      * @type {Set.<number>}\n      */\nReview:"}
{"pred": "This should be refactored into a separate function to make the code more readable.", "gold": "Let's go ahead and change \"Site\" to \"Project\", since that's the path we've chosen. One less thing to alter in the other issue.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -62,6 +62,11 @@ func renderAppDescribe(desc map[string]interface{}) (string, error) {\n \tddevapp.RenderAppRow(appTable, desc)\n \toutput = fmt.Sprint(appTable)\n \n+\toutput = output + \"\\n\\nSite Information\\n-----------------\\n\"\n+\tsiteInfo := uitable.New()\n+\tsiteInfo.AddRow(\"PHP version:\", desc[\"php_version\"])\n+\toutput = output + fmt.Sprint(siteInfo)\n+\n \t// Only show extended status for running sites.\n \tif desc[\"status\"] == ddevapp.SiteRunning {\n \t\toutput = output + \"\\n\\nMySQL Credentials\\n-----------------\\n\"\nReview:"}
{"pred": "This looks like a code removal, is there a reason for this?", "gold": "I am for this change iff we are sure the information is no longer helpful. I think this could still be valuable for certain scenarios, wbu?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -89,7 +89,6 @@ Prints out information about filecoin process and its environment.\n \t\t\tsw.Printf(\"\\nEnvironment\\n\")\n \t\t\tsw.Printf(\"FilAPI: \\t%s\\n\", info.Environment.FilAPI)\n \t\t\tsw.Printf(\"FilPath:\\t%s\\n\", info.Environment.FilPath)\n-\t\t\tsw.Printf(\"GoPath: \\t%s\\n\", info.Environment.GoPath)\n \n \t\t\t// Print Config Info\n \t\t\tsw.Printf(\"\\nConfig\\n\")\nReview:"}
{"pred": "This looks good, but it might be worth adding a comment to explain why we are using the max rampup percentage.", "gold": "I thought we decided on using the latest active version and not the one which is max ramped up.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -296,11 +296,16 @@ public class ImageRampupManagerImpl implements ImageRampupManager {\n       if (null == flow) {\n         log.info(\"Flow object is null, so continue\");\n         final ImageRampup firstImageRampup = imageRampupList.get(0);\n+\n+        // Find the imageVersion in the Rampup list with maximum rampup percentage.\n+        final ImageRampup maxImageRampup = imageRampupList.stream()\n+            .max(Comparator.comparing(ImageRampup::getRampupPercentage))\n+            .orElseGet(() -> firstImageRampup);\n         imageTypeRampupVersionMap.put(imageTypeName,\n-            this.fetchImageVersion(imageTypeName, firstImageRampup.getImageVersion())\n+            this.fetchImageVersion(imageTypeName, maxImageRampup.getImageVersion())\n                 .orElseThrow(() -> new ImageMgmtException(\n                     String.format(\"Unable to fetch version %s from image \" + \"versions table.\",\n-                        firstImageRampup.getImageVersion()))));\n+                        maxImageRampup.getImageVersion()))));\n         continue;\n       }\n       int prevRampupPercentage = 0;\nReview:"}
{"pred": "The log message should be more descriptive and provide more information about the issue.", "gold": "can we update this to a `log.Warningf`?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -461,10 +461,13 @@ https://aws.amazon.com/premiumsupport/knowledge-center/ecs-pull-container-api-er\n \t\tif err != nil {\n \t\t\tif err == selector.ErrSubnetsNotFound {\n \t\t\t\tlog.Errorf(`No existing public subnets were found in VPC %s. You can either:\n-- Create new public subnets and then import them.\n-- Use the default Copilot environment configuration.`, o.importVPC.ID)\n+- %s to interrupt, create new public subnets, then rerun %s and import them.\n+- %s to interrupt, then rerun %s and use the default Copilot environment configuration.\n+- Proceed without public subnets, knowing that deploying a load-balanced web service in this environment will fail because Load Balancers require at least two public subnets in different Availability Zones.\n+`, o.importVPC.ID, color.HighlightUserInput(\"ctrl-c\"), color.HighlightCode(\"copilot env init\"), color.HighlightUserInput(\"ctrl-c\"), color.HighlightCode(\"copilot env init\"))\n+\t\t\t} else {\n+\t\t\t\treturn fmt.Errorf(\"select public subnets: %w\", err)\n \t\t\t}\n-\t\t\treturn fmt.Errorf(\"select public subnets: %w\", err)\n \t\t}\n \t\to.importVPC.PublicSubnetIDs = publicSubnets\n \t}\nReview:"}
{"pred": "Good change, this should prevent any false positives when trying to disconnect a container from a network it's not connected to.", "gold": "can we get something emitted in the logs on non-zero exits to trace back to for problems like this failing on the first invocation?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -105,7 +105,11 @@ def connect_container_to_network(container, network):\n \n \n def disconnect_container_from_network(container, network):\n-    subprocess.check_call([\"docker\", \"network\", \"disconnect\", network, container])\n+    # subprocess.run instead of subprocess.check_call so we don't fail when\n+    # trying to disconnect a container from a network that it's not connected to\n+    subprocess.run(  # pylint: disable=subprocess-run-check\n+        [\"docker\", \"network\", \"disconnect\", network, container]\n+    )\n \n \n def hostnames(network):\nReview:"}
{"pred": "Should we add a null check for schemaMan here?", "gold": "Do we need `schema manager` at here ?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -20,9 +20,10 @@ namespace storage {\n TEST(DeleteVertexTest, SimpleTest) {\n     fs::TempDir rootPath(\"/tmp/DeleteVertexTest.XXXXXX\");\n     std::unique_ptr<kvstore::KVStore> kv(TestUtils::initKV(rootPath.path()));\n+    auto schemaMan = TestUtils::mockSchemaMan();\n     // Add vertices\n     {\n-        auto* processor = AddVerticesProcessor::instance(kv.get(), nullptr, nullptr);\n+        auto* processor = AddVerticesProcessor::instance(kv.get(), schemaMan.get(), nullptr);\n         cpp2::AddVerticesRequest req;\n         req.space_id = 0;\n         req.overwritable = false;\nReview:"}
{"pred": "This looks good. It is a nice way to use cgo to call a C library.", "gold": "This won't work because of the permissions on the directory when this is included as a library. But, we may be able to do this. The key would be wrapping this command with either a script or a go binary that ensures the current directory is writable. If the current directory is not writable, it would attempt to make it writable so that we could write out the produced binary. But I'm not sure if that will influence the hash that gets produced for `go.sum` since I am not sure how that is calculated. Alternatively, we can choose a place in `/usr/local` or choose a location that is writable in the go cache and use that. I'll give that a try since it might be needed for the ARM builds if we choose to only include `x86_64` precompiled binaries in the module.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,19 @@\n+package parser\n+\n+//go:generate cargo build --release\n+\n+// #cgo LDFLAGS: -L${SRCDIR}/target/release -ldl -Wl,-Bstatic -lflux_parser -Wl,-Bdynamic\n+// #include <stdlib.h>\n+// void flux_parse_json(const char*);\n+import \"C\"\n+\n+import (\n+\t\"unsafe\"\n+)\n+\n+func Parse(input string) {\n+\tcstr := C.CString(input)\n+\tdefer C.free(unsafe.Pointer(cstr))\n+\n+\tC.flux_parse_json(cstr)\n+}\nReview:"}
{"pred": "Is this necessary? It seems like it's setting the return value to nil, but isn't that the default anyway?", "gold": "Correct me if I'm wrong, but is this necessary? Why not just use the value returned by `interpreter.Eval` and not mess with the scope? `interpreter.Eval` will return any produced side effects. This means TableObjects as well as any value resulting from any expression statements.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -153,6 +153,8 @@ func (r *REPL) executeLine(t string) (values.Value, error) {\n \t\treturn nil, err\n \t}\n \n+\tr.scope.SetReturn(nil)\n+\n \tif _, err := r.interpreter.Eval(semPkg, r.scope, flux.StdLib()); err != nil {\n \t\treturn nil, err\n \t}\nReview:"}
{"pred": "It looks like you are trying to reduce the duplication here, however, it would be better to refactor this code to use a function to create the labels and annotations.", "gold": "This service is global per namespace, not per Alertmanager/Prometheus/ThanosRuler instance. So this approach won't work. But maybe I missing out something, can you describe your use case here?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -162,12 +162,14 @@ func makeStatefulSetService(p *monitoringv1.Alertmanager, config Config) *v1.Ser\n \t\tp.Spec.PortName = defaultPortName\n \t}\n \n+\tlabels := config.Labels.Merge(p.Spec.ServiceMetadata.Labels)\n+\tlabels[\"operated-alertmanager\"] = \"true\"\n+\n \tsvc := &v1.Service{\n \t\tObjectMeta: metav1.ObjectMeta{\n-\t\t\tName: governingServiceName,\n-\t\t\tLabels: config.Labels.Merge(map[string]string{\n-\t\t\t\t\"operated-alertmanager\": \"true\",\n-\t\t\t}),\n+\t\t\tName:        governingServiceName,\n+\t\t\tLabels:      labels,\n+\t\t\tAnnotations: p.Spec.ServiceMetadata.Annotations,\n \t\t\tOwnerReferences: []metav1.OwnerReference{\n \t\t\t\tmetav1.OwnerReference{\n \t\t\t\t\tName:       p.GetName(),\nReview:"}
{"pred": "Should CanReattest be nullable? If not, it should be set to false in the constructor.", "gold": "Do we need this default? Since we aren't using a sql.NullBool or *bool, an unset column will be interpreted as `false` already... We don't set a default on our other bool fields (e.g. entry admin and downstream columns).", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -32,6 +32,7 @@ type AttestedNode struct {\n \tExpiresAt       time.Time `gorm:\"index\"`\n \tNewSerialNumber string\n \tNewExpiresAt    *time.Time\n+\tCanReattest     bool `gorm:\"default:false\"`\n \n \tSelectors []*NodeSelector\n }\nReview:"}
{"pred": "This method should be renamed to something more descriptive, like `get_margin_value_for_side`", "gold": "thanks for moving these over. makes more sense for them to be in the exports_helper", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -39,6 +39,18 @@ module ExportsHelper\n     \"<strong>#{prefix}</strong> #{attribution.join(', ')}\"\n   end\n \n+  def download_plan_page_title(plan, phase, hash)\n+    # If there is more than one phase show the plan title and phase title\n+    return hash[:phases].many? ? \"#{plan.title} - #{phase[:title]}\" : plan.title\n+  end\n+\n+  def display_section?(customization, section, show_custom_sections)\n+    display = !customization\n+    display ||= customization && !section[:modifiable]\n+    display ||= customization && section[:modifiable] && show_custom_sections\n+    return display\n+  end\n+\n   private\n \n   def get_margin_value_for_side(side)\nReview:"}
{"pred": "We should add a comment here to explain why we are importing keyconf.", "gold": "That import now isn't needed anymore", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -29,8 +29,9 @@ from qutebrowser.utils import message\n from qutebrowser.config import config\n from qutebrowser.keyinput import keyparser\n from qutebrowser.utils import usertypes, log, objreg, utils\n+from qutebrowser.config.parsers import keyconf\n \n-\n+ \n STARTCHARS = \":/?\"\n LastPress = usertypes.enum('LastPress', ['none', 'filtertext', 'keystring'])\n \nReview:"}
{"pred": "The parameter should be named \"path\" instead of \"addon_path\" for consistency with other methods.", "gold": "Can you update the `Usage` to be an absolute path as well? Something like `/path/to/firebug.xpi`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -237,6 +237,8 @@ class WebDriver(RemoteWebDriver):\n         Returns identifier of installed addon. This identifier can later\n         be used to uninstall addon.\n \n+        :param path: Full path to the addon that will be installed.\n+\n         :Usage:\n             driver.install_addon('firebug.xpi')\n         \"\"\"\nReview:"}
{"pred": "This should be tested to ensure that the new MvxWindowsAccelerometer() works as expected.", "gold": "This class is missing the `MvxPlugin` attribute", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -2,17 +2,13 @@\n // The .NET Foundation licenses this file to you under the MS-PL license.\n // See the LICENSE file in the project root for more information.\n \n-\n-using MvvmCross.Plugins;\n-\n namespace MvvmCross.Plugin.Accelerometer.Platform.Uap\n {\n-    public class Plugin\n-        : IMvxPlugin\n+    public class Plugin : IMvxPlugin\n     {\n         public void Load()\n         {\n-            Mvx.RegisterSingleton<IMvxAccelerometer>(new MvxWindowsCommonAccelerometer());\n+            Mvx.RegisterSingleton<IMvxAccelerometer>(new MvxWindowsAccelerometer());\n         }\n     }\n }\nReview:"}
{"pred": "Is this necessary? It seems like this could be done in the MainFrame constructor.", "gold": "What if `wxLang` is returned `None` from `getWxLang`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -596,6 +596,8 @@ def initialize():\n \tif mainFrame:\n \t\traise RuntimeError(\"GUI already initialized\")\n \tmainFrame = MainFrame()\n+\twxLang = core.getWxLang(languageHandler.getLanguage())\n+\tmainFrame.SetLayoutDirection(wxLang.LayoutDirection)\n \twx.GetApp().SetTopWindow(mainFrame)\n \t# In wxPython >= 4.1,\n \t# wx.CallAfter no longer executes callbacks while NVDA's main thread is within apopup menu or message box.\nReview:"}
{"pred": "The code is more readable now. Good job!", "gold": "Please don't do changing like this unless it _**really**_ cares. BTW. Please look around to infer our naming conventions.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -546,9 +546,9 @@ ResultCode NebulaStore::ingest(GraphSpaceID spaceId) {\n             auto files = nebula::fs::FileUtils::listAllFilesInDir(path.c_str(), true, \"*.sst\");\n             for (auto file : files) {\n                 LOG(INFO) << \"Ingesting extra file: \" << file;\n-                auto code = engine->ingest(std::vector<std::string>({file}));\n-                if (code != ResultCode::SUCCEEDED) {\n-                    return code;\n+                auto ret_code = engine->ingest(std::vector<std::string>({file}));\n+                if (ResultCode::SUCCEEDED != ret_code) {\n+                    return ret_code;\n                 }\n             }\n         }\nReview:"}
{"pred": "Changing the log level from info to finest is probably not the best idea. It might be better to leave it as info and add more detailed logging in the before/after methods.", "gold": "This is in test code: understanding what we're doing is important in this context.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -35,13 +35,13 @@ public class BaseSuite {\n   public static ExternalResource testEnvironment = new ExternalResource() {\n     @Override\n     protected void before() {\n-      log.info(\"Preparing test environment\");\n+      log.finest(\"Preparing test environment\");\n       GlobalTestEnvironment.get(SeleniumTestEnvironment.class);\n       System.setProperty(\"webdriver.remote.shorten_log_messages\", \"true\");\n     }\n     @Override\n     protected void after() {\n-      log.info(\"Cleaning test environment\");\n+      log.finest(\"Cleaning test environment\");\n       TestEnvironment environment = GlobalTestEnvironment.get();\n       if (environment != null) {\n         environment.stop();\nReview:"}
{"pred": "This looks good.", "gold": "prob should still have an example that has multiple option names even if you have to make it up. Or maybe we don't need this method?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -76,8 +76,8 @@ public class CommandLineUtils {\n    * @param isMainOptionCondition the conditions to test dependent options against. If all\n    *     conditions are true, dependent options will be checked.\n    * @param dependentOptionsNames a list of option names that can't be used if condition is met.\n-   *     Example: if --min-gas-price is in the list and condition is that either --miner-enabled or\n-   *     --goquorum-compatibility-enabled should not be false, we log a warning.\n+   *     Example: if --min-gas-price is in the list and condition is that --miner-enabled should not\n+   *     be false, we log a warning.\n    */\n   public static void checkMultiOptionDependencies(\n       final Logger logger,\nReview:"}
{"pred": "The docx and pdf render calls should be moved to the end of the respond_to block.", "gold": "I believe respond_to whitelists the formats passed to the block so if we don't want to display html, we can just remove the line format.html...", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -246,9 +246,9 @@ class PlansController < ApplicationController\n     file_name = @plan.title.gsub(/ /, \"_\")\n \n     respond_to do |format|\n-      format.html\n-      format.csv  { send_data @exported_plan.as_csv(@sections, @unanswered_question, @question_headings),  filename: \"#{file_name}.csv\" }\n-      format.text { send_data @exported_plan.as_txt(@sections, @unanswered_question, @question_headings, @show_details),  filename: \"#{file_name}.txt\" }\n+      format.html { render layout: false }\n+      format.csv  { send_data @plan.as_csv(@show_sections_questions),  filename: \"#{file_name}.csv\" }\n+      format.text { send_data render_to_string(partial: 'shared/export/plan_txt'), filename: \"#{file_name}.txt\" }\n       format.docx { render docx: 'export', filename: \"#{file_name}.docx\" }\n       format.pdf do\n         render pdf: file_name,\nReview:"}
{"pred": "This should probably be a log.Errorf() call, rather than a log.Println() and util.Failed()", "gold": "stylistic nitpick: I _feel_ like we've largely shown errors like this as \"error: \" vs. \"error=\". IMO colon/space reads better.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -21,7 +21,7 @@ var LocalDevStopCmd = &cobra.Command{\n \t\terr = app.Stop()\n \t\tif err != nil {\n \t\t\tlog.Println(err)\n-\t\t\tutil.Failed(\"Failed to stop containers for %s. Run `ddev list` to ensure your site exists.\", app.ContainerName())\n+\t\t\tutil.Failed(\"Failed to stop containers for %s. Run `ddev list` to ensure your site exists. error=\", app.ContainerName(), err)\n \t\t}\n \n \t\tutil.Success(\"Application has been stopped.\")\nReview:"}
{"pred": "It looks like you have reorganized the includes here. Make sure to check for any potential compilation issues.", "gold": "We could put this implementation in `RTPSWriter::create_change_pool` and avoid an extra function.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -18,11 +18,16 @@\n  */\n \n #include <fastdds/rtps/writer/RTPSWriter.h>\n+\n+#include <fastdds/dds/log/Log.hpp>\n+\n #include <fastdds/rtps/history/WriterHistory.h>\n #include <fastdds/rtps/messages/RTPSMessageCreator.h>\n-#include <fastdds/dds/log/Log.hpp>\n-#include <rtps/participant/RTPSParticipantImpl.h>\n+\n+#include <rtps/history/BasicPayloadPool.hpp>\n+#include <rtps/history/CacheChangePool.h>\n #include <rtps/flowcontrol/FlowController.h>\n+#include <rtps/participant/RTPSParticipantImpl.h>\n \n #include <mutex>\n \nReview:"}
{"pred": "fmt is not used anywhere in the code. Consider removing it.", "gold": "should this file ends with _test.go?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -25,6 +25,7 @@\n package persistencetests\n \n import (\n+\t\"fmt\"\n \t\"time\"\n \n \t\"github.com/pborman/uuid\"\nReview:"}
{"pred": "Should this be NULL checked?", "gold": "It's because of this change. `ss` was unused and it made sense in the program. However I haven't read the IPv6 RFC so I'm unsure of what it does", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -382,7 +382,7 @@ class IPv6(_IPv6GuessPayload, Packet, IPTools):\n \n         if conf.checkIPsrc and conf.checkIPaddr and not in6_ismaddr(sd):\n             sd = inet_pton(socket.AF_INET6, sd)\n-            ss = inet_pton(socket.AF_INET6, self.src)\n+            ss = inet_pton(socket.AF_INET6, ss)\n             return strxor(sd, ss) + struct.pack(\"B\", nh) + self.payload.hashret()  # noqa: E501\n         else:\n             return struct.pack(\"B\", nh) + self.payload.hashret()\nReview:"}
{"pred": "Is this variable used anywhere? If not, it should be removed.", "gold": "\"Flatten\" is a verb, so I'd probably go with `flattenedIndex` as a variable name here.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -483,6 +483,7 @@ class DataManager {\n    */\n   addChildAtIndex(parent, index, element) {\n     let childElement = element;\n+    let flattenIndex;\n \n     if (!childElement) {\n       childElement = this.mockNode();\nReview:"}
{"pred": "This looks good. It is a good idea to add a comment explaining what the function does.", "gold": "If it can only be called once, perhaps a more appropriate name is something like `setMaskables`? `addX` sounds like you can add many `X`es by calling it many times", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,5 +1,19 @@\n const chalk = require('chalk')\n \n+const valuesToMask = []\n+/**\n+ * Adds a list of strings that should be masked by the logger.\n+ * This function can only be called once through out the life of the server.\n+ * @param {Array} maskables a list of strings to be masked\n+ */\n+exports.addMaskables = (maskables) => {\n+  maskables.forEach((i) => {\n+    valuesToMask.push(i)\n+  })\n+\n+  Object.freeze(valuesToMask)\n+}\n+\n /**\n  * INFO level log\n  * @param {string} msg the message to log\nReview:"}
{"pred": "Is this a breaking change? If so, it should be noted in the commit message.", "gold": "Nodecfg should be downloading from a private bucket -- these shouldn't be for public consumption. In general these should be generic and expect environment to provide appropriate credentials and bucket.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -38,7 +38,7 @@ func downloadAndExtractConfigPackage(channel string, targetDir string) (err erro\n }\n \n func downloadConfigPackage(channelName string, targetDir string) (packageFile string, err error) {\n-\ts3, err := s3.MakeS3SessionForDownload()\n+\ts3, err := s3.MakePublicS3SessionForDownload()\n \tif err != nil {\n \t\treturn\n \t}\nReview:"}
{"pred": "This looks good. Nice work!", "gold": "Could you please end the file with an empty line?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,17 @@\n+# MicrosoftEdge.py\n+#A part of NonVisual Desktop Access (NVDA)\n+#This file is covered by the GNU General Public License.\n+#See the file COPYING for more details.\n+#Copyright (C) 2018 NV Access Limited, Joseph Lee\n+\n+\"\"\"appModule for Microsoft Edge main process\"\"\"\n+\n+import appModuleHandler\n+import ui\n+\n+class AppModule(appModuleHandler.AppModule):\n+\n+\tdef event_UIA_notification(self, obj, nextHandler, displayString=None, **kwargs):\n+\t\t# #8423: even though content process is focused, notifications are fired by main Edge process.\n+\t\t# The base object will simply ignore this, so notifications must be announced here and no more.\n+\t\tui.message(displayString)\nReview:"}
{"pred": "This should probably be a debug log instead of a fine log.", "gold": "This is an incorrect change. The dialect spoken is an important part of the handshake and should be communicated to users.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -76,7 +76,7 @@ public class ProtocolHandshake {\n \n         if (result.isPresent()) {\n           Result toReturn = result.get();\n-          LOG.info(String.format(\"Detected dialect: %s\", toReturn.dialect));\n+          LOG.finest(String.format(\"Detected dialect: %s\", toReturn.dialect));\n           return toReturn;\n         }\n       }\nReview:"}
{"pred": "You should add a comment here explaining why you need the isCanceled and isCanceledMx fields.", "gold": "Can this be non-exported to avoid direct use? It would be a breaking change but using previous package version would work.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -89,7 +89,9 @@ func (v *Var) UnmarshalJSON(b []byte) error {\n // Workflow is a single Daisy workflow workflow.\n type Workflow struct {\n \t// Populated on New() construction.\n-\tCancel chan struct{} `json:\"-\"`\n+\tCancel       chan struct{} `json:\"-\"`\n+\tisCanceled   bool\n+\tisCanceledMx sync.Mutex\n \n \t// Workflow template fields.\n \t// Workflow name.\nReview:"}
{"pred": "This looks like a good change, but it would be better to add a comment explaining why you are doing this.", "gold": "Nit: this is just `return gcerrors.Code(err)`, isn't it?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -145,7 +145,11 @@ func (w *watcher) ErrorAs(err error, i interface{}) bool {\n \treturn w.bucket.ErrorAs(err, i)\n }\n \n-// IsNotExist implements driver.IsNotExist.\n-func (*watcher) IsNotExist(err error) bool {\n-\treturn gcerrors.Code(err) == gcerrors.NotFound\n+// ErrorCode implements driver.ErrorCode.\n+func (*watcher) ErrorCode(err error) gcerrors.ErrorCode {\n+\t// err might have come from blob, in which case use its code.\n+\tif c := gcerrors.Code(err); c != gcerrors.Unknown {\n+\t\treturn c\n+\t}\n+\treturn gcerrors.Unknown\n }\nReview:"}
{"pred": "The timeout should be handled in the calling function, not here.", "gold": "I don't know where this came from, but it's not a good idea. This is actually timing out after 5 rounds, not 5 blocks. 5 consecutive null blocks won't be that uncommon. Also when testing with a short block time, this is a very short duration that can contribute to flaky tests.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -189,12 +189,7 @@ func (smc *Client) ProposeDeal(ctx context.Context, miner address.Address, data\n \t// create payment information\n \ttotalCost := price.MulBigInt(big.NewInt(int64(pieceSize * duration)))\n \tif totalCost.GreaterThan(types.ZeroAttoFIL) {\n-\t\t// The payment setup requires that the payment is mined into a block, currently we\n-\t\t// will wait for at most 5 blocks to be mined before giving up\n-\t\tctxPaymentSetup, cancel := context.WithTimeout(ctx, 5*smc.api.BlockTime())\n-\t\tdefer cancel()\n-\n-\t\tcpResp, err := smc.api.CreatePayments(ctxPaymentSetup, porcelain.CreatePaymentsParams{\n+\t\tcpResp, err := smc.api.CreatePayments(ctx, porcelain.CreatePaymentsParams{\n \t\t\tFrom:            fromAddress,\n \t\t\tTo:              minerOwner,\n \t\t\tValue:           totalCost,\nReview:"}
{"pred": "It's better to use the with statement here as it will handle closing the file for us.", "gold": "In Python 3 when pickling or unpickling objects, the file needs to be opened as binary so that no text encoding/decoding takes place. So for any open calls around pickle loads or dumps, the mode for reading must be rb and the mode for writing must be wb.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -47,7 +47,8 @@ def loadState():\n \tglobal state\n \tstatePath=os.path.join(globalVars.appArgs.configPath,stateFilename)\n \ttry:\n-\t\tstate = cPickle.load(file(statePath, \"r\"))\n+\t\twith open(statePath, \"r\") as f:\n+\t\t\tstate = cPickle.load(f)\n \t\tif \"disabledAddons\" not in state:\n \t\t\tstate[\"disabledAddons\"] = set()\n \t\tif \"pendingDisableSet\" not in state:\nReview:"}
{"pred": "Is this the right place to be truncating the list? It might be better to do this in the fetchMergedEventGroups function.", "gold": "did you remove **params.qstring.method** intentionally? if so why?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -2068,7 +2068,7 @@ const processRequest = (params) => {\n                     }\n                     else {\n                         if (params.qstring.event && params.qstring.event.startsWith('[CLY]_group_')) {\n-                            validateRead(params, 'core', countlyApi.data.fetch.fetchMergedEventGroups, params.qstring.method);\n+                            validateRead(params, 'core', countlyApi.data.fetch.fetchMergedEventGroups);\n                         }\n                         else {\n                             params.truncateEventValuesList = true;\nReview:"}
{"pred": "It looks like you are adding a new feature here. Are there any tests that need to be added to cover this?", "gold": "What is the current default? Is that inconsistent across uses and that's why this is null?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -90,6 +90,12 @@ public class TableProperties {\n   public static final String ORC_VECTORIZATION_ENABLED = \"read.orc.vectorization.enabled\";\n   public static final boolean ORC_VECTORIZATION_ENABLED_DEFAULT = false;\n \n+  public static final String LOCALITY_ENABLED = \"read.locality.enabled\";\n+  public static final String LOCALITY_ENABLED_DEFAULT = null;\n+\n+  public static final String LOCALITY_TASK_INITIALIZE_THREADS = \"read.locality.task.initialize.threads\";\n+  public static final int LOCALITY_TASK_INITIALIZE_THREADS_DEFAULT = 1;\n+\n   public static final String OBJECT_STORE_ENABLED = \"write.object-storage.enabled\";\n   public static final boolean OBJECT_STORE_ENABLED_DEFAULT = false;\n \nReview:"}
{"pred": "Should this be a deep copy instead of a shallow copy?", "gold": "Why did we make this change? How come it wasn't an issue before", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -477,6 +477,7 @@ func (cf CloudFormation) getLastDeployedAppConfig(appConfig *stack.AppStackConfi\n \tif err != nil {\n \t\treturn nil, fmt.Errorf(\"parse previous deployed stackset %w\", err)\n \t}\n+\tpreviouslyDeployedConfig.App = appConfig.Name\n \treturn previouslyDeployedConfig, nil\n }\n \nReview:"}
{"pred": "You can remove the commented out code, as it is no longer necessary.", "gold": "Can you tighten scope by moving to of these variables? i.e. Move to ~4372?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -4342,14 +4342,11 @@ TEST_F(VkLayerTest, InvalidDescriptorSet) {\n     // ObjectTracker should catch this.\n     // Create a valid cmd buffer\n     // call vk::CmdBindDescriptorSets w/ false Descriptor Set\n+    ASSERT_NO_FATAL_FAILURE(Init());\n \n     uint64_t fake_set_handle = 0xbaad6001;\n     VkDescriptorSet bad_set = reinterpret_cast<VkDescriptorSet &>(fake_set_handle);\n \n-    m_errorMonitor->SetDesiredFailureMsg(VK_DEBUG_REPORT_ERROR_BIT_EXT, \"VUID-vkCmdBindDescriptorSets-pDescriptorSets-parameter\");\n-\n-    ASSERT_NO_FATAL_FAILURE(Init());\n-\n     VkDescriptorSetLayoutBinding layout_binding = {};\n     layout_binding.binding = 0;\n     layout_binding.descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;\nReview:"}
{"pred": "It is recommended to use a more secure way of storing the password, such as an environment variable.", "gold": "Nice to see this `dataverse.rserve.password` fix rolled in.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -90,7 +90,7 @@ public class RDATAFileReader extends TabularDataFileReader {\n   // RServe static variables\n   private static String RSERVE_HOST = System.getProperty(\"dataverse.rserve.host\");\n   private static String RSERVE_USER = System.getProperty(\"dataverse.rserve.user\");\n-  private static String RSERVE_PASSWORD = System.getProperty(\"dataverse.rserve.pwrd\");\n+  private static String RSERVE_PASSWORD = System.getProperty(\"dataverse.rserve.password\");\n   private static int RSERVE_PORT;\n   \n   // TODO: \nReview:"}
{"pred": "strnlen_s() should be used here to prevent buffer overflow.", "gold": "How about the following faster alternative that doesn't need `strlen()` at all: if (*tmp_optarg == '\\0' || *endptr != '\\0') { fprintf(...) ... This would treat the bus argument as invalid if it's either empty (`tmp_optarg` points to '\\0') or invalid (`endptr` points to something other that a '\\0'). Actually, the existing code would accept an empty argument and set the bus to `0`, so if (*endptr != '\\0') { fprintf(...) ... would be enough. The check for an empty argument doesn't hurt, though.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -273,7 +273,7 @@ int parse_args(int argc, char *argv[])\n \t\t\t\tbreak;\n \t\t\tendptr = NULL;\n \t\t\tconfig.target.bus = (int) strtoul(tmp_optarg, &endptr, 0);\n-\t\t\tif (endptr != tmp_optarg + strlen(tmp_optarg)) {\n+\t\t\tif (endptr != tmp_optarg + strnlen_s(tmp_optarg, sizeof(tmp_optarg))) {\n \t\t\t\tfprintf(stderr, \"invalid bus: %s\\n\", tmp_optarg);\n \t\t\t\treturn -1;\n \t\t\t}\nReview:"}
{"pred": "Is it necessary to cc the sender?", "gold": "I could be missing something here, but the `from` and `cc` are the same. On the test email sent to gatewaycommunicator, these values are different.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -7,6 +7,7 @@ class FeedbackMailer < ApplicationMailer\n       to: self.class.support_email,\n       subject: 'Feedback submission',\n       from: from,\n+      cc: from,\n       body: message\n     )\n   end\nReview:"}
{"pred": "This looks good. The use of act() ensures that the effects are run synchronously.", "gold": "I'm honestly scared because act is now a hard requirement for useEffect which it wasn't before... This could break some tests :(", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -32,13 +32,12 @@ describe('useEffect', () => {\n \t\t\treturn null;\n \t\t}\n \n-\t\trender(<Comp />, scratch);\n-\t\trender(<Comp />, scratch);\n-\n-\t\texpect(cleanupFunction).to.be.not.called;\n-\t\texpect(callback).to.be.calledOnce;\n+\t\tact(() => {\n+\t\t\trender(<Comp />, scratch);\n+\t\t\trender(<Comp />, scratch);\n+\t\t});\n \n-\t\trender(<Comp />, scratch);\n+\t\tact(() => render(<Comp />, scratch));\n \n \t\texpect(cleanupFunction).to.be.calledOnce;\n \t\texpect(callback).to.be.calledTwice;\nReview:"}
{"pred": "Is it necessary to update the winner here? It seems like it should already be set.", "gold": "Could use election from `info_a.election`, or is this deliberate?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -632,8 +632,13 @@ void nano::active_transactions::update_difficulty (std::shared_ptr<nano::block>\n \t\t\t{\n \t\t\t\tnode.logger.try_log (boost::str (boost::format (\"Block %1% was updated from difficulty %2% to %3%\") % block_a->hash ().to_string () % nano::to_string_hex (existing_election->difficulty) % nano::to_string_hex (difficulty)));\n \t\t\t}\n-\t\t\troots.get<tag_root> ().modify (existing_election, [difficulty](nano::conflict_info & info_a) {\n+\t\t\troots.get<tag_root> ().modify (existing_election, [election = existing_election->election, &block_a, difficulty](nano::conflict_info & info_a) {\n \t\t\t\tinfo_a.difficulty = difficulty;\n+\t\t\t\telection->blocks[block_a->hash ()] = block_a;\n+\t\t\t\tif (election->status.winner->hash () == block_a->hash ())\n+\t\t\t\t{\n+\t\t\t\t\telection->status.winner = block_a;\n+\t\t\t\t}\n \t\t\t});\n \t\t\tadjust_difficulty (block_a->hash ());\n \t\t}\nReview:"}
{"pred": "This looks good, but it would be nice to add a comment explaining why this is needed.", "gold": "looks like this should be `return array(LegacyFormHelper::getType('form'));`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -95,6 +95,15 @@ class EasyAdminExtension extends AbstractTypeExtension\n     {\n         return LegacyFormHelper::getType('form');\n     }\n+\n+    /**\n+     * {@inheritdoc}\n+     */\n+    public static function getExtendedTypes()\n+    {\n+        // needed to avoid a deprecation when using Symfony 4.2\n+        return [LegacyFormHelper::getType('form')];\n+    }\n }\n \n class_alias('EasyCorp\\Bundle\\EasyAdminBundle\\Form\\Extension\\EasyAdminExtension', 'JavierEguiluz\\Bundle\\EasyAdminBundle\\Form\\Extension\\EasyAdminExtension', false);\nReview:"}
{"pred": "Good check here to make sure the port is not a function.", "gold": "Maybe it would simpler to ignore opt_port if type !== 'number'?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -52,6 +52,8 @@ var Server = function(requestHandler) {\n    *     with the server host when it has fully started.\n    */\n   this.start = function(opt_port) {\n+    assert(typeof opt_port !== 'function',\n+           \"start invoked with function, not port (mocha callback)?\");\n     var port = opt_port || portprober.findFreePort('localhost');\n     return promise.when(port, function(port) {\n       return promise.checkedNodeCall(\nReview:"}
{"pred": "You can remove the variable declaration for name as it is not used outside the loop.", "gold": "Where was `name` being declared before?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -223,10 +223,9 @@ Blockly.ScratchBlocks.VerticalExtensions.SCRATCH_EXTENSION = function() {\n Blockly.ScratchBlocks.VerticalExtensions.registerAll = function() {\n   var categoryNames =\n       ['control', 'data', 'data_lists', 'sounds', 'motion', 'looks', 'event',\n-      'sensing', 'pen', 'operators', 'more'];\n+        'sensing', 'pen', 'operators', 'more'];\n   // Register functions for all category colours.\n-  for (var i = 0; i < categoryNames.length; i++) {\n-    name = categoryNames[i];\n+  for (var i = 0, name; name = categoryNames[i]; i++) {\n     Blockly.Extensions.register('colours_' + name,\n         Blockly.ScratchBlocks.VerticalExtensions.colourHelper(name));\n   }\nReview:"}
{"pred": "It would be better to use a constant for the \"Unknown\" status, rather than a hardcoded string.", "gold": "nit: use `corev1.ConditionUnknown`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -74,6 +74,18 @@ func (t testHelper) UnavailableDeployment() *appsv1.Deployment {\n \treturn d\n }\n \n+func (t testHelper) UnknownDeployment() *appsv1.Deployment {\n+\td := &appsv1.Deployment{}\n+\td.Name = \"unknown\"\n+\td.Status.Conditions = []appsv1.DeploymentCondition{\n+\t\t{\n+\t\t\tType:   appsv1.DeploymentAvailable,\n+\t\t\tStatus: \"Unknown\",\n+\t\t},\n+\t}\n+\treturn d\n+}\n+\n func (t testHelper) ReadyBrokerCellStatus() *BrokerCellStatus {\n \tbs := &BrokerCellStatus{}\n \tbs.PropagateIngressAvailability(t.AvailableEndpoints())\nReview:"}
{"pred": "You can combine the two if statements into one, since they are both checking the same thing.", "gold": "You also need to add a similar check on line 992, there's another place where we check `length === 24`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -997,7 +997,10 @@ Mongoose.prototype.isValidObjectId = function(v) {\n     v = v.toString();\n   }\n \n-  if (typeof v === 'string' && (v.length === 12 || v.length === 24)) {\n+  if (typeof v === 'string' && v.length === 12) {\n+    return true;\n+  }\n+  if (typeof v === 'string' && v.length === 24 && /^[a-f0-9]*$/.test(v)) {\n     return true;\n   }\n \nReview:"}
{"pred": "It looks like we are now checking for the vote provider after the block, rather than before. Is this intentional?", "gold": "nit: can extract the voteProvider as a local variable", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -105,9 +105,14 @@ public class BftBlockCreatorFactory {\n   public Bytes createExtraData(final int round, final BlockHeader parentHeader) {\n     final BftContext bftContext = protocolContext.getConsensusState(BftContext.class);\n     final ValidatorProvider validatorProvider = bftContext.getValidatorProvider();\n-    checkState(validatorProvider.getVoteProvider().isPresent(), \"Bft requires a vote provider\");\n+    checkState(\n+        validatorProvider.getVoteProviderAfterBlock(parentHeader).isPresent(),\n+        \"Bft requires a vote provider\");\n     final Optional<ValidatorVote> proposal =\n-        validatorProvider.getVoteProvider().get().getVoteAfterBlock(parentHeader, localAddress);\n+        validatorProvider\n+            .getVoteProviderAfterBlock(parentHeader)\n+            .get()\n+            .getVoteAfterBlock(parentHeader, localAddress);\n \n     final List<Address> validators =\n         new ArrayList<>(validatorProvider.getValidatorsAfterBlock(parentHeader));\nReview:"}
{"pred": "You can simplify this by using the assertThrows() method.", "gold": "[0] Not suggesting you change it here, but....kindof weird that there's just not an `assertFuncNotEquals`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1190,14 +1190,8 @@ public class QueryEqualityTest extends SolrTestCaseJ4 {\n     assertFuncEquals(\"gte(foo_i,2)\", \"gte(foo_i,2)\");\n     assertFuncEquals(\"eq(foo_i,2)\", \"eq(foo_i,2)\");\n \n-    boolean equals = false;\n-    try {\n-      assertFuncEquals(\"eq(foo_i,2)\", \"lt(foo_i,2)\");\n-      equals = true;\n-    } catch (AssertionError e) {\n-      //expected\n-    }\n-    assertFalse(equals);\n+    expectThrows(AssertionError.class, \"expected error, functions are not equal\",\n+        () -> assertFuncEquals(\"eq(foo_i,2)\", \"lt(foo_i,2)\"));\n   }\n \n   public void testChildField() throws Exception {\nReview:"}
{"pred": "It looks like you are missing a nil check for the caller.", "gold": "why are we passing 'registryAddress' here? We probably should construct it together with bc. Registry is not something that change?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -61,3 +61,19 @@ func (bc *Blockchain) GetAccountantFee(accountantAddress common.Address) (uint16\n \n \treturn res.Value, err\n }\n+\n+// IsRegistered checks wether the given identity is registered or not\n+func (bc *Blockchain) IsRegistered(registryAddress, addressToCheck common.Address) (bool, error) {\n+\tcaller, err := bindings.NewRegistryCaller(registryAddress, bc.client)\n+\tif err != nil {\n+\t\treturn false, errors.Wrap(err, \"could not create registry caller\")\n+\t}\n+\n+\tctx, cancel := context.WithTimeout(context.Background(), bc.bcTimeout)\n+\tdefer cancel()\n+\n+\tres, err := caller.IsRegistered(&bind.CallOpts{\n+\t\tContext: ctx,\n+\t}, addressToCheck)\n+\treturn res, errors.Wrap(err, \"could not check registration status\")\n+}\nReview:"}
{"pred": "This is a good change, it makes the function more versatile.", "gold": "`.` at the end of the sentence", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -2,7 +2,7 @@ import { pathOr, curry, merge } from 'ramda';\n \n /**\n  * Flattens a property path so that its fields are spread out into the provided object.\n- *\n+ * It's like {@link RA.spreadPath|spreadPath}, but preserves object under property path\n  *\n  * @func flattenPath\n  * @memberOf RA\nReview:"}
{"pred": "You should add a check here to make sure that the start time is not nil before calling time.Since().", "gold": "wouldn't it be useful to split this into an error metric for the timing?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -284,12 +284,16 @@ func (s *Service) checkAndAddPeers(ctx context.Context, peers pb.Peers) {\n \t\t\tctx, cancel := context.WithTimeout(ctx, pingTimeout)\n \t\t\tdefer cancel()\n \n+\t\t\tstart := time.Now()\n+\n \t\t\t// check if the underlay is usable by doing a raw ping using libp2p\n \t\t\tif _, err = s.streamer.Ping(ctx, multiUnderlay); err != nil {\n+\t\t\t\ts.metrics.PingTime.Observe(float64(time.Since(start).Milliseconds()))\n \t\t\t\ts.metrics.UnreachablePeers.Inc()\n \t\t\t\ts.logger.Debugf(\"hive: peer %s: underlay %s not reachable\", hex.EncodeToString(newPeer.Overlay), multiUnderlay)\n \t\t\t\treturn\n \t\t\t}\n+\t\t\ts.metrics.PingTime.Observe(float64(time.Since(start).Milliseconds()))\n \n \t\t\tbzzAddress := bzz.Address{\n \t\t\t\tOverlay:     swarm.NewAddress(newPeer.Overlay),\nReview:"}
{"pred": "This test should check that the generated name is valid, i.e. not empty or nil.", "gold": "Not sure if this is good enough. Each generator will have it's own unit test anyway. Ideally, I think I'd want to test that each generator in the yml is actually a valid generator...", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -47,4 +47,8 @@ class TestFakerName < Test::Unit::TestCase\n     assert @tester.initials.match(/[A-Z]{3}/)\n     assert @tester.initials(2).match(/[A-Z]{2}/)\n   end\n+\n+  def test_fictional_character_name\n+  assert @tester.fictional_character_name.match(/\\w+/)\n+  end\n end\nReview:"}
{"pred": "Is it necessary to mock the MintNewBlockWithActionIterator here? Can it be tested in isolation?", "gold": "line is 138 characters", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1293,6 +1293,8 @@ func newTestCFSM(\n \t\t\t\tMintNewSecretBlock(gomock.Any(), gomock.Any(), gomock.Any()).Return(secretBlkToMint, nil).AnyTimes()\n \t\t\tblockchain.EXPECT().\n \t\t\t\tNonce(gomock.Any()).Return(uint64(0), nil).AnyTimes()\n+\t\t\tblockchain.EXPECT().\n+\t\t\t\tMintNewBlockWithActionIterator(gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any()).Return(blkToMint, nil).AnyTimes()\n \t\t\tif mockChain == nil {\n \t\t\t\tcandidates := make([]*state.Candidate, 0)\n \t\t\t\tfor _, delegate := range delegates {\nReview:"}
{"pred": "It would be nice to have a comment explaining why we need the cleanup function.", "gold": "Nit: I would leave `Wire` out of the description; if you use this without wire you can still use it.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -75,8 +75,9 @@ type Params struct {\n \tTraceOpts []ocsql.TraceOption\n }\n \n-// Open opens a Cloud SQL database.\n-func Open(ctx context.Context, certSource proxy.CertSource, params *Params) (*sql.DB, error) {\n+// Open opens a Cloud SQL database. The second return value is a Wire cleanup\n+// function that calls Close on the returned database.\n+func Open(ctx context.Context, certSource proxy.CertSource, params *Params) (*sql.DB, func(), error) {\n \t// TODO(light): Avoid global registry once https://github.com/go-sql-driver/mysql/issues/771 is fixed.\n \tdialerCounter.mu.Lock()\n \tdialerNum := dialerCounter.n\nReview:"}
{"pred": "It looks like you've added a few imports here, are they necessary?", "gold": "Nit: each field can be on a separate line to make it visually easier to read.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -14,10 +14,14 @@\n  */\n package com.google.api.codegen.transformer.ruby;\n \n+import com.google.api.codegen.config.MethodConfig;\n import com.google.api.codegen.transformer.ApiMethodParamTransformer;\n import com.google.api.codegen.transformer.MethodTransformerContext;\n+import com.google.api.codegen.transformer.SurfaceNamer;\n import com.google.api.codegen.viewmodel.DynamicLangDefaultableParamView;\n import com.google.api.codegen.viewmodel.ParamDocView;\n+import com.google.api.codegen.viewmodel.SimpleParamDocView;\n+import com.google.api.tools.framework.model.Field;\n import com.google.common.collect.ImmutableList;\n import java.util.List;\n \nReview:"}
{"pred": "Is this new file necessary? What does it contain?", "gold": "Do we still have these files? Shouldn't we remove these?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -336,6 +336,7 @@ def get_analysis_statistics(inputs, limits):\n                     statistics_files.append(compilation_db)\n             elif inp_f in ['compiler_includes.json',\n                            'compiler_target.json',\n+                           'compiler_info.json',\n                            'metadata.json']:\n                 analyzer_file = os.path.join(input_path, inp_f)\n                 statistics_files.append(analyzer_file)\nReview:"}
{"pred": "It's good to see the error reason added here, but it would be better to have a comment explaining why this is needed.", "gold": "A lot of things to do with constants seemed to move since the original commit, so I stuck this here, Is there a better place for it?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -22,6 +22,11 @@ import (\n \t\"github.com/jetstack/cert-manager/pkg/apis/certmanager/v1alpha1\"\n )\n \n+ const (\n+ \t// Error reason generated when duration or renewBefore is invalid\n+\tErrorDurationInvalid = \"ErrDurationInvalid\"\n+)\n+\n type Interface interface {\n \t// Setup initialises the issuer. This may include registering accounts with\n \t// a service, creating a CA and storing it somewhere, or verifying\nReview:"}
{"pred": "This looks like a good change, increasing the size of the channels should help with performance.", "gold": "is 10 too small compared to 1000? consider sync chan is unicast only (vs block chan is broadcast + unicast), i would say use 200~400 for BlockSyncChanSize my concern is that this would potentially slowdown sync speed of full-node", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -171,7 +171,9 @@ var (\n \t\t\tRepeatDecayStep:       1,\n \t\t},\n \t\tDispatcher: Dispatcher{\n-\t\t\tEventChanSize: 10000,\n+\t\t\tActionChanSize:    1000,\n+\t\t\tBlockChanSize:     1000,\n+\t\t\tBlockSyncChanSize: 10,\n \t\t},\n \t\tAPI: API{\n \t\t\tUseRDS:    false,\nReview:"}
{"pred": "This looks like a good change, it ensures that private plans are not returned.", "gold": "A full parse of the plan here on listing the plans will be expensive from both a computation and IO perspective.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -297,7 +297,7 @@ module Bolt\n         errors.each do |error|\n           @logger.warn(error.details['original_error'])\n         end\n-        plans\n+        plans.reject { |plan| get_plan_info(plan.first)['private'] }\n       end\n     end\n \nReview:"}
{"pred": "Is this the only board this is applicable to? If so, it might be better to move this to the board specific file.", "gold": "These constants use the `_PIN` suffix, while the other constants don't use it. I'm not sure what is best, but I would prefer to keep this consistent. Do you have an opinion on which it should be (with or without suffix)?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -19,3 +19,9 @@ const (\n \tBUTTON3 = 15\n \tBUTTON4 = 16\n )\n+\n+// UART pins for NRF52840-DK\n+const (\n+\tUART_TX_PIN = 6\n+\tUART_RX_PIN = 8\n+)\nReview:"}
{"pred": "The @SuppressWarnings annotation should be removed. It's better to refactor the code to avoid the warning.", "gold": "Hmm... this feels like discovery should come first. perhaps `--discovery-dns-url`? @NicolasMassart any opinions on this or ideas on who it should be run by?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1089,6 +1089,13 @@ public class BesuCommand implements DefaultCommandValues, Runnable {\n           \"Specifies the static node file containing the static nodes for this node to connect to\")\n   private final Path staticNodesFile = null;\n \n+  @SuppressWarnings({\"FieldCanBeFinal\", \"FieldMayBeFinal\"}) // PicoCLI requires non-final Strings.\n+  @CommandLine.Option(\n+          names = { \"--dns-discovery-url\" },\n+          description = \"Specifies the URL to use for DNS discovery\"\n+  )\n+  private String dnsDiscoveryUrl = null;\n+\n   private EthNetworkConfig ethNetworkConfig;\n   private JsonRpcConfiguration jsonRpcConfiguration;\n   private GraphQLConfiguration graphQLConfiguration;\nReview:"}
{"pred": "This is a comment and not a code change, so no code review is necessary.", "gold": "why is this needed?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,3 +1,4 @@\n+//go:build !ignore_autogenerated\n // +build !ignore_autogenerated\n \n /*\nReview:"}
{"pred": "It looks like you have added a new argument to the constructor. Is this intended? If so, make sure to update the documentation and any other code that uses this constructor.", "gold": "I wonder if it'd be possible to autogenerate a key from the name within this function if one is not provided explicitly, rather than having all the callsites pass both the name and key (and usually as the same value)? Might give us a good place to implement a `name->key` function that isn't 1:1.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -23,7 +23,7 @@ DEFAULT_TYPE_ATTRIBUTES = ConfigTypeAttributes()\n \n \n class ConfigType(object):\n-    def __init__(self, name=None, type_attributes=DEFAULT_TYPE_ATTRIBUTES, description=None):\n+    def __init__(self, key, name, type_attributes=DEFAULT_TYPE_ATTRIBUTES, description=None):\n \n         type_obj = type(self)\n         if type_obj in ConfigType.__cache:\nReview:"}
{"pred": "Should we add a comment here to explain why we are adding this field?", "gold": "@adriancole I do not see a change in the thrift file. Are there unit tests verifying that this manual serialization is compatible with the native Thrift serialization done by classes generated from `.thrift` IDL file?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -110,6 +110,7 @@ public final class ThriftCodec implements Codec {\n     final Field IPV4 = new Field(TYPE_I32, 1);\n     final Field PORT = new Field(TYPE_I16, 2);\n     final Field SERVICE_NAME = new Field(TYPE_STRING, 3);\n+    final Field IPV6 = new Field(TYPE_STRING, 4);\n \n     @Override\n     public Endpoint read(ByteBuffer bytes) {\nReview:"}
{"pred": "You should add a comment here explaining why you are changing the length check from 20 to PLAYER_NAME_LENGHT.", "gold": "spelling (variable name, all three changes)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -506,7 +506,7 @@ Player* Game::getPlayerByGUID(const uint32_t& guid)\n ReturnValue Game::getPlayerByNameWildcard(const std::string& s, Player*& player)\n {\n \tsize_t strlen = s.length();\n-\tif (strlen == 0 || strlen > 20) {\n+\tif (strlen == 0 || strlen > PLAYER_NAME_LENGHT) {\n \t\treturn RETURNVALUE_PLAYERWITHTHISNAMEISNOTONLINE;\n \t}\n \nReview:"}
{"pred": "The parameters for LoadTeamPlusKeys should be optional, as the caller may not need to specify them.", "gold": "I believe you meant \"specify `desiredUID` and `desiredRole`\"?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -411,8 +411,16 @@ type KeybaseService interface {\n \t\t[]keybase1.PublicKey, error)\n \n \t// LoadTeamPlusKeys returns a TeamInfo struct for a team with the\n-\t// specified TeamID.\n-\tLoadTeamPlusKeys(ctx context.Context, tid keybase1.TeamID) (TeamInfo, error)\n+\t// specified TeamID.  The caller can specify `desiredKeyGen` to\n+\t// force a server check if that particular key gen isn't yet\n+\t// known; it may be set to UnspecifiedKeyGen if no server check is\n+\t// required.  The caller can specify `desiredUID` to force a\n+\t// server check if that particular UID isn't a member of the team\n+\t// yet according to local caches; it may be set to \"\" if no server\n+\t// check is required.\n+\tLoadTeamPlusKeys(ctx context.Context, tid keybase1.TeamID,\n+\t\tdesiredKeyGen KeyGen, desiredUser keybase1.UserVersion,\n+\t\tdesiredRole keybase1.TeamRole) (TeamInfo, error)\n \n \t// CurrentSession returns a SessionInfo struct with all the\n \t// information for the current session, or an error otherwise.\nReview:"}
{"pred": "It looks like you are removing the coreV1 and v1 imports. Are you sure you don't need them anymore?", "gold": "Please follow the import style, move it to its similar group", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -16,10 +16,9 @@ package openflow\n \n import (\n \t\"fmt\"\n+\t\"github.com/vmware-tanzu/antrea/pkg/apis/networking/v1beta1\"\n \t\"net\"\n \n-\tcoreV1 \"k8s.io/api/core/v1\"\n-\tv1 \"k8s.io/api/networking/v1\"\n \t\"k8s.io/klog\"\n \n \t\"github.com/vmware-tanzu/antrea/pkg/agent/types\"\nReview:"}
{"pred": "It would be nice to add a comment to explain why we need this new function.", "gold": "Do we really need these? This is expanding on an API that we're about to do work on with the error stuff @kriskowal", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -63,3 +63,18 @@ func IsUnrecognizedProcedureError(err error) bool {\n \t_, ok := err.(errors.UnrecognizedProcedureError)\n \treturn ok\n }\n+\n+// UnrecognizedEncodingError returns an error for the given request, such that\n+// IsUnrecognizedEncodingError can distinguish it from other errors coming out\n+// of router.Choose.\n+func UnrecognizedEncodingError(req *Request, want []string) error {\n+\treturn errors.RouterUnrecognizedEncodingError(want, string(req.Encoding))\n+}\n+\n+// IsUnrecognizedEncodingError returns true for errors returned by\n+// Router.Choose if the router cannot find a handler for the request's\n+// encoding.\n+func IsUnrecognizedEncodingError(err error) bool {\n+\t_, ok := err.(errors.UnrecognizedEncodingError)\n+\treturn ok\n+}\nReview:"}
{"pred": "You should add a comment here explaining why you are removing the modification time parameter.", "gold": "passwordModificationTime is no longer used - did the change drop a time check that should be restored? Or should the param get dropped from the methods?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -146,11 +146,9 @@ public class PasswordValidatorServiceBean implements java.io.Serializable {\n      * @return A List with error messages. Empty when the password is valid.\n      */\n     public List<String> validate(String password, Date passwordModificationTime, boolean isHumanReadable) {\n-//    public List<String> validate(String password, boolean isHumanReadable) {\n \n         init();\n-        final PasswordData passwordData = PasswordData.newInstance(password, String.valueOf(passwordModificationTime.getTime()), null);\n-//        final PasswordData passwordData = PasswordData.newInstance(password, \"username\", null);\n+        final PasswordData passwordData = new PasswordData(password);\n         final RuleResult result = new RuleResult();\n \n         for (PasswordValidator currentUser : validators.values()) {\nReview:"}
{"pred": "This change looks good, it ensures that the comparison is done on trimmed strings, which should make it more reliable.", "gold": "Would it break here without trim? If so, can we do trim in Startup.cs so we don't need to add this code to every parser?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -40,7 +40,7 @@ namespace ScenarioMeasurement\n \n                 source.Kernel.ProcessStart += evt =>\n                 {\n-                    if (processName.Equals(evt.ProcessName, StringComparison.OrdinalIgnoreCase) && pids.Contains(evt.ProcessID) && evt.CommandLine == commandLine)\n+                    if (processName.Equals(evt.ProcessName, StringComparison.OrdinalIgnoreCase) && pids.Contains(evt.ProcessID) && evt.CommandLine.Trim() == commandLine.Trim())\n                     {\n                         if (pid.HasValue)\n                         {\nReview:"}
{"pred": "It's good to have the log statement here, but it should be a debug level log statement.", "gold": "Since we're using Logrus, probably best to use `Infof` to avoid confusion (Logrus' Printf behaves differently to the built in one)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -115,7 +115,7 @@ var _ = Describe(\"with running container\", func() {\n \t\tIt(\"iptables should succeed in getting the lock after 3s\", func() {\n \t\t\tiptCmd := cmdInContainer(\"iptables\", \"-w\", \"3\", \"-A\", \"FORWARD\")\n \t\t\tout, err := iptCmd.CombinedOutput()\n-\t\t\tExpect(string(out)).To(ContainSubstring(\"Another app is currently holding the xtables lock\"))\n+\t\t\tlog.Printf(\"iptables output='%s'\", out)\n \t\t\tExpect(err).NotTo(HaveOccurred())\n \t\t})\n \nReview:"}
{"pred": "This looks good, but it might be worth adding a comment to explain why the margin is being added here.", "gold": "Hm, this looks like a change that should go upstream as well.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -155,13 +155,14 @@ Blockly.FlyoutButton.prototype.createDom = function() {\n       this.svgGroup_);\n   svgText.textContent = this.text_;\n \n-  this.width = svgText.getComputedTextLength() +\n-      2 * Blockly.FlyoutButton.MARGIN;\n+  this.width = svgText.getComputedTextLength();\n \n   if (!this.isLabel_) {\n+    this.width += 2 * Blockly.FlyoutButton.MARGIN;\n     shadow.setAttribute('width', this.width);\n     shadow.setAttribute('height', this.height);\n   }\n+\n   rect.setAttribute('width', this.width);\n   rect.setAttribute('height', this.height);\n \nReview:"}
{"pred": "This code change looks like it has removed a function. Is this intentional? If so, why?", "gold": "let's keep ActionByActionHash and delete getActionByActionHash", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1533,16 +1533,6 @@ func (core *coreService) ChainID() uint32 {\n \treturn core.bc.ChainID()\n }\n \n-// GetActionByActionHash returns action by action hash\n-func (core *coreService) ActionByActionHash(h hash.Hash256) (action.SealedEnvelope, error) {\n-\tif !core.hasActionIndex || core.indexer == nil {\n-\t\treturn action.SealedEnvelope{}, status.Error(codes.NotFound, blockindex.ErrActionIndexNA.Error())\n-\t}\n-\n-\tselp, _, _, _, err := core.getActionByActionHash(h)\n-\treturn selp, err\n-}\n-\n // ReadContractStorage reads contract's storage\n func (core *coreService) ReadContractStorage(ctx context.Context, addr address.Address, key []byte) ([]byte, error) {\n \tctx, err := core.bc.Context(ctx)\nReview:"}
{"pred": "This should be documented with PHPDoc comments.", "gold": "please use return type", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -64,4 +64,12 @@ class ProductVisibility\n     {\n         return $this->visible;\n     }\n+\n+    /**\n+     * @return \\Shopsys\\FrameworkBundle\\Model\\Pricing\\Group\\PricingGroup\n+     */\n+    public function getPricingGroup(): PricingGroup\n+    {\n+        return $this->pricingGroup;\n+    }\n }\nReview:"}
{"pred": "Change the log level from INFO to FINE to reduce the log noise.", "gold": "This is deliberately at this level.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -76,7 +76,7 @@ public class TestEdgeDriver extends RemoteWebDriver implements WebStorage, Locat\n                 .findFirst().orElseThrow(WebDriverException::new);\n \n         service = (EdgeDriverService) builder.withVerbose(true).withLogFile(logFile.toFile()).build();\n-        LOG.info(\"edgedriver will log to \" + logFile);\n+        LOG.fine(\"edgedriver will log to \" + logFile);\n         service.start();\n         Runtime.getRuntime().addShutdownHook(new Thread(() -> service.stop()));\n       }\nReview:"}
{"pred": "The formatting of the log message should be improved for readability.", "gold": "I'm going to go ahead and undo this change, I don't think it was intentional.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -237,7 +237,7 @@ class UploadWorkerThread(TransferThread):\n             except self._retry_exceptions as e:\n                 log.error(\"Exception caught uploading part number %s for \"\n                           \"vault %s, attempt: (%s / %s), filename: %s, \"\n-                          \"exception: %s, msg: %s\",\n+                          \"exception: %s as msg: %s\",\n                           work[0], self._vault_name, i + 1, self._num_retries + 1,\n                           self._filename, e.__class__, e)\n                 time.sleep(self._time_between_retries)\nReview:"}
{"pred": "Spelling mistake in the comment should be corrected.", "gold": "> specialised This isn't a typo in my neck of the woods  ", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -163,7 +163,7 @@ namespace Datadog.AutoInstrumentation.ManagedLoader\n         /// As a result, the target framework moniker and the binary compatibility flags are initialized correctly.\n         /// </summary>\n         /// <remarks>\n-        /// The above logic is further specialised, depending on the kind of the currnent AppDomain and where the app is hosted:\n+        /// The above logic is further specialized, depending on the kind of the current AppDomain and where the app is hosted:\n         /// <br />\n         /// * On non-default AD:\n         ///   we do not wait.\nReview:"}
{"pred": "It looks like you are adding a new package here. Is there any additional configuration needed for this package?", "gold": "will change to `storage_target`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -29,6 +29,7 @@ import (\n \n var packages = []string{\n \t\"github.com/google/knative-gcp/test/cmd/target\",\n+\t\"github.com/google/knative-gcp/test/cmd/storageTarget\",\n }\n \n var packageToImageConfig = map[string]string{}\nReview:"}
{"pred": "It looks like you are changing the version of the API client. Is this intentional?", "gold": "This would be better as `cls.securitycenter_client`, to match what is being instantiated.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -38,7 +38,7 @@ class SecurityCenterTest(unittest_utils.ForsetiTestCase):\n         \"\"\"Set up.\"\"\"\n         fake_global_configs = {\n             'securitycenter': {'max_calls': 1, 'period': 1.1}}\n-        cls.securitycenter_beta_api_client = securitycenter.SecurityCenterClient(version='v1beta1')\n+        cls.securitycenter = securitycenter.SecurityCenterClient(version='v1')\n         cls.project_id = 111111\n         cls.source_id = 'organizations/111/sources/222'\n \nReview:"}
{"pred": "It would be good to add a comment explaining why we need to know the system32 directory paths.", "gold": "Could we have this initialization as part of the initialize method?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -34,6 +34,15 @@ import appModules\n import watchdog\n import extensionPoints\n from fileUtils import getFileVersionInfo\n+import shlobj\n+from functools import wraps\n+\n+# Path to the native system32 directory.\n+nativeSys32: str = shlobj.SHGetFolderPath(None, shlobj.CSIDL.SYSTEM)\n+# Path to the syswow64 directory if it exists on the current system.\n+Syswow64Sys32: str = shlobj.SHGetFolderPath(None, shlobj.CSIDL.SYSTEMX86)\n+# Do we have separate system32 directories for 32 and 64-bit processes?\n+hasSeparateSyswow64: bool = nativeSys32 != Syswow64Sys32\n \n #Dictionary of processID:appModule paires used to hold the currently running modules\n runningTable={}\nReview:"}
{"pred": "You should add a check here to make sure that editController is not null before using it.", "gold": "This line should be removed as editController is not used from this context anymore.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -15,7 +15,7 @@ export default AbstractEditController.extend({\n   showUpdateButton: true,\n \n   database: inject.service(),\n-  editController: inject.controller('patients/edit'),\n+  editController: null,\n   filesystem: inject.service(),\n \n   photoFileNotSet: computed('model.photoFile', function() {\nReview:"}
{"pred": "Good documentation here, this will help other developers understand the purpose of the Transformation interface.", "gold": "This is correct in concept but the method signature doesn't really communicate the same thing. In other words, if the function produces an output table where is it? Its not on the function signature. Can you explain where the output table is created?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -9,11 +9,17 @@ import (\n \t\"github.com/influxdata/flux/plan\"\n )\n \n+// Transformation represents functions that control of how the execution\n+// engine will take in a flux Table, perform the necessary data processing\n+// and return an output flux Table\n type Transformation interface {\n \tRetractTable(id DatasetID, key flux.GroupKey) error\n+\t// Process takes in a flux Table, performs data processing on it\n+\t// and produces an output flux Table\n \tProcess(id DatasetID, tbl flux.Table) error\n \tUpdateWatermark(id DatasetID, t Time) error\n \tUpdateProcessingTime(id DatasetID, t Time) error\n+\t// Finish indicates that the Transformation is complete\n \tFinish(id DatasetID, err error)\n }\n \nReview:"}
{"pred": "This looks good, but it might be worth adding a comment to explain why we're doing this.", "gold": "For insurance, it's best not to take it directly", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -238,9 +238,14 @@ class DetectoRS_ResNet(ResNet):\n                  pretrained=None,\n                  init_cfg=None,\n                  **kwargs):\n-        assert init_cfg is None, 'To prevent abnormal initialization ' \\\n-                                 'behavior, init_cfg is not allowed to be set'\n-        self.pretrained = pretrained\n+        self.init_cfg = init_cfg\n+        if init_cfg is not None:  # init_cfg priority > pretrained\n+            self.pretrained = init_cfg['checkpoint']\n+        else:\n+            if pretrained is not None:\n+                self.pretrained = pretrained\n+            else:\n+                self.pretrained = None\n         self.sac = sac\n         self.stage_with_sac = stage_with_sac\n         self.rfp_inplanes = rfp_inplanes\nReview:"}
{"pred": "This change should be reflected in the method signature of the implementing classes.", "gold": "change 'value' to keysToSend, here and in other references in this commit. 'value' implies the user is getting the value of the element, rather than just the keys we're sending to it.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -67,11 +67,11 @@ public abstract class AbstractWebDriverEventListener implements WebDriverEventLi\n     // Do nothing.\n   }\n \n-  public void beforeChangeValueOf(WebElement element, WebDriver driver) {\n+  public void beforeChangeValueOf(WebElement element, WebDriver driver, CharSequence[] value) {\n     // Do nothing.\n   }\n \n-  public void afterChangeValueOf(WebElement element, WebDriver driver) {\n+  public void afterChangeValueOf(WebElement element, WebDriver driver, CharSequence[] value) {\n     // Do nothing.\n   }\n \nReview:"}
{"pred": "Should this be done in a separate function? It's a bit odd to have this here.", "gold": "is the plan to fully migrate to boltdb and then remove the state save here?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1244,6 +1244,8 @@ func (engine *DockerTaskEngine) provisionContainerResources(task *apitask.Task,\n \ttaskIP := result.IPs[0].Address.IP.String()\n \tseelog.Infof(\"Task engine [%s]: associated with ip address '%s'\", task.Arn, taskIP)\n \tengine.state.AddTaskIPAddress(taskIP, task.Arn)\n+\ttask.SetLocalIPAddress(taskIP)\n+\tengine.saveTaskData(task)\n \treturn dockerapi.DockerContainerMetadata{\n \t\tDockerID: cniConfig.ContainerID,\n \t}\nReview:"}
{"pred": "It is good to add a comment here explaining why this color is being added.", "gold": "This should be `output.colorBright`. Unless I'm missing some reason for adding a new theme variable.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -153,6 +153,8 @@ function themeStyle(theme) {\n \n \t\toutput.colorUrl = '#7B81FF';\n \n+\t\toutput.strongTextColor = 'rgb(220,220,220)';\n+\n \t\tthemeCache_[theme] = output;\n \t\treturn addExtraStyles(themeCache_[theme]);\n \t}\nReview:"}
{"pred": "This should be moved to the top of the file, as it is defining variables that are used elsewhere.", "gold": "nit: I wonder if these should be moved down to where version is defined, just to keep them all in the same place.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -6,6 +6,11 @@\n \n import os\n \n+version_year=2016\n+version_major=3\n+version_minor=0\n+version_build=0\n+\n def _updateVersionFromVCS():\n \t\"\"\"Update the version from version control system metadata if possible.\n \t\"\"\"\nReview:"}
{"pred": "It's good to see the addition of the javax.annotation package, but it would be nice to see a comment here explaining why it was added.", "gold": "Is this supported by every implementation of Java (and Android)? Should it be conditional upon `gen_nullable`?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -99,7 +99,7 @@ const LanguageParameters& GetLangParams(IDLOptions::Language lang) {\n       \"\",\n       \"\",\n       \"\",\n-      \"import java.nio.*;\\nimport java.lang.*;\\nimport java.util.*;\\n\"\n+      \"import java.nio.*;\\nimport java.lang.*;\\nimport java.util.*;\\nimport javax.annotation.*;\\n\"\n         \"import com.google.flatbuffers.*;\\n\\n@SuppressWarnings(\\\"unused\\\")\\n\",\n       {\n         \"/**\",\nReview:"}
{"pred": "The parentheses around the WHERE clause were missing, so this change is correct.", "gold": "@briri Thanks! I just caught this too updating my feature branch", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -50,8 +50,8 @@ class Phase < ActiveRecord::Base\n   has_many :suffix_sections, -> (phase) {\n     modifiable.where(<<~SQL, phase_id: phase.id, modifiable: false)\n       sections.number > (SELECT MAX(number) FROM sections\n-                           WHERE sections.modifiable = :modifiable)\n-                           AND sections.phase_id = :phase_id\n+                           WHERE sections.modifiable = :modifiable\n+                           AND sections.phase_id = :phase_id)\n     SQL\n   }, class_name: \"Section\"\n \nReview:"}
{"pred": "Should we check if the environment variable is set before trying to use it?", "gold": "I think you should move this block (and the `envpw := os.Getenv(\"RCLONE_CONFIG_PASS\")`) right to the start of the function, then we can remove the duplicate code below", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -214,8 +214,17 @@ var errorConfigFileNotFound = errors.New(\"config file not found\")\n // automatically decrypt it.\n func loadConfigFile() (*goconfig.ConfigFile, error) {\n \tb, err := ioutil.ReadFile(ConfigPath)\n+\tenvpw := os.Getenv(\"RCLONE_CONFIG_PASS\")\n \tif err != nil {\n \t\tif os.IsNotExist(err) {\n+\t\t\tif len(configKey) == 0 && envpw != \"\" {\n+\t\t\t\terr := setConfigPassword(envpw)\n+\t\t\t\tif err != nil {\n+\t\t\t\t\tfmt.Println(\"Using RCLONE_CONFIG_PASS returned:\", err)\n+\t\t\t\t} else {\n+\t\t\t\t\tfs.Debugf(nil, \"Using RCLONE_CONFIG_PASS password.\")\n+\t\t\t\t}\n+\t\t\t}\n \t\t\treturn nil, errorConfigFileNotFound\n \t\t}\n \t\treturn nil, err\nReview:"}
{"pred": "The tests for draining node should be added here.", "gold": "Is this only to set the node to draining?   I think we can do that inside `Before` or something?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -424,6 +424,17 @@ public class NodeTest {\n     return baseDir;\n   }\n \n+  //Test that the draining command sets Host status to DRAINING\n+  @Test\n+  public void drainingNodeStatusDraining() {\n+\n+  }\n+\n+  //Test that a draining node doesn't accept new sessions by any means\n+  //Test that a draining node continues to run its sessions and accept new WebDriver commands\n+  //Test that a node will shut down once all sessions are finished\n+  //Test that RemoteNode will post the correct command oto the LocalNode\n+\n   private CreateSessionRequest createSessionRequest(Capabilities caps) {\n     return new CreateSessionRequest(\n             ImmutableSet.copyOf(Dialect.values()),\nReview:"}
{"pred": "This should be NULL checked before returning.", "gold": "This should have been moved up above this inner `try` because the log message in the `catch` block does not apply to this.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -647,6 +647,11 @@ namespace Datadog.Trace\n             {\n                 try\n                 {\n+                    if (AzureAppServices.Metadata.IsRelevant)\n+                    {\n+                        return AzureAppServices.Metadata.SiteName;\n+                    }\n+\n                     if (TryLoadAspNetSiteName(out var siteName))\n                     {\n                         return siteName;\nReview:"}
{"pred": "This is a great idea to make the API more user friendly. It's also a good example of how to use the compiler to add new types.", "gold": "Do we expect people to use PlanResult directly?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -43,12 +43,13 @@ module Bolt\n       Bolt::ResultSet.include_iterable\n     end\n \n-    # Create a top-level alias for TargetSpec so that users don't have to\n+    # Create a top-level alias for TargetSpec and PlanResult so that users don't have to\n     # namespace it with Boltlib, which is just an implementation detail. This\n-    # allows TargetSpec to feel like a built-in type in bolt, rather than\n+    # allows them to feel like a built-in type in bolt, rather than\n     # something has been, no pun intended, \"bolted on\".\n-    def add_target_spec(compiler)\n+    def alias_types(compiler)\n       compiler.evaluate_string('type TargetSpec = Boltlib::TargetSpec')\n+      compiler.evaluate_string('type PlanResult = Boltlib::PlanResult')\n     end\n \n     def full_modulepath(modulepath)\nReview:"}
{"pred": "You should add a comment here to explain why you are setting the actualErr variable.", "gold": "Maybe we should call this something like `errToReturn`?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -48,7 +48,8 @@ func NewBackoff() wait.Backoff {\n \n // WaitForWithRetryable repeats a condition check with exponential backoff.\n func WaitForWithRetryable(backoff wait.Backoff, condition wait.ConditionFunc, retryableErrors ...string) error { //nolint\n-\treturn wait.ExponentialBackoff(backoff, func() (bool, error) {\n+\tvar actualErr error\n+\twaitErr := wait.ExponentialBackoff(backoff, func() (bool, error) {\n \t\tok, err := condition()\n \t\tif ok {\n \t\t\t// All done!\nReview:"}
{"pred": "This looks like a good change, but it would be good to add a comment here explaining the purpose of the change.", "gold": "should calculate numEpochIn1Year = xxx and <= fairBankEpochNum+numEpochIn1Year a.foundationBonusLastEpoch just happens to be equal to 1 year now, but should not count on that", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -215,7 +215,8 @@ func (p *Protocol) GrantEpochReward(\n \t}\n \n \t// Reward additional bootstrap bonus\n-\tif epochNum <= a.foundationBonusLastEpoch {\n+\tfairBankEpochNum := rp.GetEpochNum(hu.FairbankBlockHeight()) // extend foundation bonus from fairbank to fairbank + 1 year\n+\tif epochNum <= a.foundationBonusLastEpoch || (epochNum >= fairBankEpochNum && epochNum <= fairBankEpochNum+a.foundationBonusLastEpoch) {\n \t\tfor i, count := 0, uint64(0); i < len(candidates) && count < a.numDelegatesForFoundationBonus; i++ {\n \t\t\tif _, ok := exemptAddrs[candidates[i].Address]; ok {\n \t\t\t\tcontinue\nReview:"}
{"pred": "This looks good, but it would be good to add a comment to explain why the contentTypes have been changed.", "gold": "I wasn't sure if the content type needed to be removed from both the `default` and `usemap` objects - I'm not sure how usemap is used.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -350,14 +350,17 @@ const htmlElms = {\n       },\n       usemap: {\n         matches: '[usemap]',\n-        contentTypes: ['interactive', 'embedded', 'phrasing', 'flow']\n+        contentTypes: ['interactive', 'embedded', 'flow']\n       },\n       default: {\n         // Note: allow role presentation and none on image with no\n         // alt as a way to prevent axe from flagging the image as\n         // needing an alt\n         allowedRoles: ['presentation', 'none'],\n-        contentTypes: ['embedded', 'phrasing', 'flow']\n+        // Note: spec change (do not count as phrasing), because browsers\n+        // insert a space between an img's accessible name and other\n+        // elements' accessible names\n+        contentTypes: ['embedded', 'flow']\n       }\n     },\n     // 5.10 img Element\nReview:"}
{"pred": "You should add a comment here to explain why you are importing the additional modules.", "gold": "Duplication of line 28 Please refer your tox -e flake8 It seems that XStrField, XShortField, FieldLenField are not used", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -20,11 +20,13 @@\n \"\"\"\n Geneve: Generic Network Virtualization Encapsulation\n \n-draft-ietf-nvo3-geneve-06\n+draft-ietf-nvo3-geneve-16\n \"\"\"\n \n+import struct\n+\n from scapy.fields import BitField, XByteField, XShortEnumField, X3BytesField, \\\n-    XStrField\n+    XStrField, XShortField, StrField, XByteField, FieldLenField, PacketListField\n from scapy.packet import Packet, bind_layers\n from scapy.layers.inet import IP, UDP\n from scapy.layers.inet6 import IPv6\nReview:"}
{"pred": "This should be refactored to be more readable. The logic should be broken down into smaller, more understandable chunks.", "gold": "I don't really understand the `self._file_model.index(path)` as parent here - you use `self._root_index` for `rowCount` above, so wouldn't the parent here need to be `self._root_index` as well?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -630,6 +630,18 @@ class FilenamePrompt(_BasePrompt):\n \n         self._to_complete = ''\n \n+    def _directories_hide_show_model(self, path):\n+        \"\"\"Get rid of non-matching directories.\"\"\"\n+        try:\n+            num_rows = self._file_model.rowCount(self._root_index)\n+            for row in range(num_rows):\n+                index = self._file_model.index(row, 0, self._file_model.index(path))\n+                hidden = self._to_complete not in index.data()\n+                self._file_view.setRowHidden(index.row(), index.parent(), hidden)\n+        except FileNotFoundError:\n+            log.prompt.debug(\"Directory doesn't exist, can't \\\n+                                hide and unhide file prompt folders\")\n+\n     @pyqtSlot(str)\n     def _set_fileview_root(self, path, *, tabbed=False):\n         \"\"\"Set the root path for the file display.\"\"\"\nReview:"}
{"pred": "maxQueryLength should be initialized to some value.", "gold": "Do we want validation somewhere that max >= min? Or simply treat the max < min case as ignoring max?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -75,6 +75,8 @@ public class DirectSpellChecker {\n   private float thresholdFrequency = 0f;\n   /** minimum length of a query word to return suggestions */\n   private int minQueryLength = 4;\n+  /** maximum length of a query word to return suggestions */\n+  private int maxQueryLength = 0;\n   /** value in [0..1] (or absolute number &gt;= 1) representing the maximum\n    *  number of documents (of the total) a query term can appear in to\n    *  be corrected. */\nReview:"}
{"pred": "This change is a bit confusing as it removes the when condition. Is this intentional?", "gold": ":+1: that's a easier example :)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -81,7 +81,7 @@ namespace NLog.LayoutRenderers\n         {\n             if (TopFrames == 1)\n             {\n-                // Allows fast rendering of ${when:when='${ndc:topframes=1}' == '':inner=:else=${ndc}|}\n+                // Allows fast rendering of ${ndc:topframes=1}\n                 var topFrame = NestedDiagnosticsContext.PeekObject();\n                 if (topFrame != null)\n                     AppendAsString(topFrame, GetFormatProvider(logEvent), builder);\nReview:"}
{"pred": "This should include a description of what this function does.", "gold": "If an external module decorates this interface, such a change will cause it to generate an error", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -117,4 +117,9 @@ interface ProductQueryInterface\n      * @return AttributeId[]\n      */\n     public function findAttributeIdsByProductId(ProductId $productId): array;\n+\n+    /**\n+     * @return array\n+     */\n+    public function findProductIdsWithBoundAttributeByAttributeId(AggregateId $id): array;\n }\nReview:"}
{"pred": "This should be documented as to why FNM_PERIOD is being used here.", "gold": "Oh ha hah, FNM_PERIOD worked out nicely there. Points for co-opting a file system convention.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -254,7 +254,7 @@ static int jobtap_remove (struct jobtap *jobtap,\n     while (p) {\n         const char *name = jobtap_plugin_name (p);\n         if (all\n-            || (isglob && fnmatch (arg, name, 0) == 0)\n+            || (isglob && fnmatch (arg, name, FNM_PERIOD) == 0)\n             || strcmp (arg, name) == 0) {\n             zlistx_detach_cur (jobtap->plugins);\n             flux_plugin_destroy (p);\nReview:"}
{"pred": "hex and strings are not used in this file, so they should be removed.", "gold": "wrong grouping. As you can tell from the other files, we put system packages in the first group, the 3rd party packages in the second group, and our own packages in the third group.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -7,11 +7,12 @@\n package action\n \n import (\n+\t\"encoding/hex\"\n \t\"fmt\"\n-\t\"math/big\"\n-\n \t\"github.com/spf13/cobra\"\n \t\"go.uber.org/zap\"\n+\t\"math/big\"\n+\t\"strings\"\n \n \t\"github.com/iotexproject/iotex-core/action\"\n \t\"github.com/iotexproject/iotex-core/cli/ioctl/cmd/account\"\nReview:"}
{"pred": "Should this be a more specific error message?", "gold": "Is `o.name` always set here?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -78,8 +78,10 @@ func newJobLogOpts(vars jobLogsVars) (*jobLogsOpts, error) {\n // Validate returns an error if the values provided by flags are invalid.\n func (o *jobLogsOpts) Validate() error {\n \tif o.appName != \"\" {\n-\t\t_, err := o.configStore.GetApplication(o.appName)\n-\t\tif err != nil {\n+\t\tif _, err := o.configStore.GetApplication(o.appName); err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tif _, err := o.configStore.GetJob(o.appName, o.name); err != nil {\n \t\t\treturn err\n \t\t}\n \t}\nReview:"}
{"pred": "This looks good, but it might be worth adding a comment to explain why we need to check the steady state dependencies as well.", "gold": "Can this line be removed, as `SteadyStateDependencies` isn't updated anywhere? Also do we need to check the `TransitionDependencySet` here?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -73,7 +73,8 @@ func dependenciesCanBeResolved(target *api.Container, by []*api.Container) bool\n \t}\n \n \treturn verifyStatusResolvable(target, nameMap, neededVolumeContainers, volumeCanResolve) &&\n-\t\tverifyStatusResolvable(target, nameMap, linksToContainerNames(target.Links), linkCanResolve)\n+\t\tverifyStatusResolvable(target, nameMap, linksToContainerNames(target.Links), linkCanResolve) &&\n+\t\tverifyStatusResolvable(target, nameMap, target.SteadyStateDependencies, onSteadyStateCanResolve)\n }\n \n // DependenciesAreResolved validates that the `target` container can be\nReview:"}
{"pred": "This should be refactored to make the code more readable.", "gold": "`plan.present?` and `has_active_subscription?` are equivalent. We can drop this change, while leaving the one on `app/controllers/application_controller.rb`.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -73,7 +73,7 @@ class User < ActiveRecord::Base\n   end\n \n   def eligible_for_annual_upgrade?\n-    plan.present? && plan.has_annual_plan?\n+    has_active_subscription? && plan.present? && plan.has_annual_plan?\n   end\n \n   def annualized_payment\nReview:"}
{"pred": "You can add a comment here to explain why the pylint disable is necessary.", "gold": "No need for this, as pylint already only turns things off for this function and it's needed for the entire function.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -100,6 +100,7 @@ class Command:\n         if scope != 'global' and instance is None:\n             raise ValueError(\"Setting scope without setting instance makes \"\n                              \"no sense!\")\n+        # pylint: enable=too-many-locals\n \n         self.name = name\n         self.maxsplit = maxsplit\nReview:"}
{"pred": "Should we check if the allowlist is empty before using it?", "gold": "L171 needs to be modified too?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -188,7 +188,7 @@ func (c *Operator) bootstrap(ctx context.Context) error {\n \t}\n \tc.secrInfs, err = informers.NewInformersForResource(\n \t\tinformers.NewKubeInformerFactories(\n-\t\t\tc.config.Namespaces.AllowList,\n+\t\t\tc.config.Namespaces.AlertmanagerConfigAllowList,\n \t\t\tc.config.Namespaces.DenyList,\n \t\t\tc.kclient,\n \t\t\tresyncPeriod,\nReview:"}
{"pred": "This should be documented with a comment to explain the purpose of the function.", "gold": "Why do you compare by nodeid? Simply saying d == e should be enough. Unless we have to objects in memory with the same nodeid. If that is so, something went really wrong.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -19,6 +19,16 @@ See the file COPYING for details.\n #include <stdlib.h>\n #include <unistd.h>\n \n+int dag_node_comp(void *item, const void *arg)\n+{\n+\tstruct dag_node *d = ((struct dag_node *) item);\n+\tstruct dag_node *e = ((struct dag_node *) arg);\n+\n+\tif(d->nodeid == e->nodeid)\n+\t\treturn 1;\n+\treturn 0;\n+}\n+\n struct dag_node *dag_node_create(struct dag *d, int linenum)\n {\n \tstruct dag_node *n;\nReview:"}
{"pred": "It looks like some of the code has been deleted here, please make sure that it is not needed and that the code is still valid.", "gold": "configs/pvt/retinanet_pvt_t_fpn_1x_coco.py --> configs/pvt/retinanet_pvt-t_fpn_1x_coco.py", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,18 @@\n+_base_ = [\n+    '../_base_/models/retinanet_r50_fpn.py',\n+    '../_base_/datasets/coco_detection.py',\n+    '../_base_/schedules/schedule_1x.py', '../_base_/default_runtime.py'\n+]\n+model = dict(\n+    type='RetinaNet',\n+    backbone=dict(\n+        _delete_=True,\n+        type='PyramidVisionTransformer',\n+        num_layers=[2, 2, 2, 2],\n+        init_cfg=dict(\n+            type='Pretrained',\n+            checkpoint='https://github.com/whai362/PVT/'\n+            'releases/download/v2/pvt_tiny.pth')),\n+    neck=dict(in_channels=[64, 128, 320, 512]))\n+# optimizer\n+optimizer = dict(_delete_=True, type='AdamW', lr=0.0001, weight_decay=0.0001)\nReview:"}
{"pred": "This change looks good, it allows us to omit the DesiredStatus field when it is empty.", "gold": "Nit, this could be json:\",omitempty\"", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -20,7 +20,7 @@ type MetadataResponse struct {\n \n type TaskResponse struct {\n \tArn           string\n-\tDesiredStatus string\n+\tDesiredStatus string `json:\"DesiredStatus,omitempty\"`\n \tKnownStatus   string\n \tFamily        string\n \tVersion       string\nReview:"}
{"pred": "It would be nice to have a comment explaining the purpose of the BuildRequired() function.", "gold": "It's kinda funny to read `s.Image.Image` I wonder why it resulted to this way. What would it take to refactor to just `s.Image`?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -113,7 +113,12 @@ func tplDirName(s string) string {\n \treturn filepath.Dir(s)\n }\n \n-//BuildArgs returns a docker.BuildArguments object given a ws root directory.\n+// BuildRequired returns if the service requires building from the local Dockerfile.\n+func (s *LoadBalancedWebService) BuildRequired() (bool, error) {\n+\treturn buildRequired(s.Image.Image)\n+}\n+\n+// BuildArgs returns a docker.BuildArguments object given a ws root directory.\n func (s *LoadBalancedWebService) BuildArgs(wsRoot string) *DockerBuildArgs {\n \treturn s.Image.BuildConfig(wsRoot)\n }\nReview:"}
{"pred": "This change is to enable the deploy build tag, which is used to build the code for deployment.", "gold": "nit: I like the idea! can we instead change the tag to `integration-remote` to be more specific? I feel like it's possible for us to use the `deploy` build tag for possibly another scenario", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,4 +1,4 @@\n-// +build integration\n+// +build integration,deploy\n \n // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n // SPDX-License-Identifier: Apache-2.0\nReview:"}
{"pred": "The usage message should be updated to reflect the new parameters.", "gold": "Copy and paste error here. Edit: Also missing commas here and in other Perl croaks between some parameters and not others.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -4701,8 +4701,8 @@ XS(XS_Mob_HasNPCSpecialAtk) {\n XS(XS_Mob_SendAppearanceEffect); /* prototype to pass -Wmissing-prototypes */\n XS(XS_Mob_SendAppearanceEffect) {\n \tdXSARGS;\n-\tif (items < 2 || items > 7)\n-\t\tPerl_croak(aTHX_ \"Usage: Mob::SendAppearanceEffect(THIS, int32 param_1, [int32 param_2 = 0], [int32 param_3 = 0], [int32 param_4 = 0], [int32 param_5 = 0], [Client* single_client_to_send_to = null])\"); // @categories Script Utility\n+\tif (items < 2 || items > 17)\n+\t\tPerl_croak(aTHX_ \"Usage: Mob::SendAppearanceEffect(THIS, int32 effect1, [int32 effect2 = 0], [int32 effect3 = 0], [int32 effect4 = 0], [int32 effect5 = 0], [Client* single_client_to_send_to = null]), [uint32 slot1 = 1], [uint32 ground1 = 1], [uint32 slot2 = 1], [uint32 ground2 = 1], [uint32 slot3 = 1], [uint32 ground2 = 1], [uint32 slot4 = 1], [uint32 ground4 = 1], [uint32 slot5 = 1], [uint32 ground5 = 1]\"); // @categories Script Utility\n \t{\n \t\tMob *THIS;\n \t\tint32 parm1 = (int32) SvIV(ST(1));\nReview:"}
{"pred": "It looks like you have added a new parameter to the method. Is this parameter optional? If not, you should update the documentation to reflect this change.", "gold": "stateRoot or maybe ParentHeader would make more sense from API point of view?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -16,11 +16,12 @@\n \n using System.Collections.Generic;\n using Nethermind.Core;\n+using Nethermind.Core.Crypto;\n \n namespace Nethermind.Consensus\n {\n     public interface IPendingTxSelector\n     {\n-        IEnumerable<Transaction> SelectTransactions(long gasLimit);\n+        IEnumerable<Transaction> SelectTransactions(Keccak stateRoot, long gasLimit);\n     }\n }\nReview:"}
{"pred": "Shouldn't we be unregistering the notification here too?", "gold": "Are you sure that this is no longer needed?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -151,7 +151,6 @@ public class PlaybackServiceFlavorHelper {\n                 // hardware volume buttons control the local device volume\n                 mediaRouter.setMediaSessionCompat(null);\n                 unregisterWifiBroadcastReceiver();\n-                callback.setupNotification(false, info);\n             }\n         };\n     }\nReview:"}
{"pred": "Good to see the columns broken out into separate constants.", "gold": "Would it help to use SCAN_COLUMNS as base to build SCAN_WITH_STATS_COLUMNS e.g like so `SCAN_WITHSTATS_COLUMNS = ImmutableList.<String>builder().addAll(SCAN_COLUMNS).add(\"value_counts\",....).build()` ?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -57,7 +57,11 @@ class BaseTableScan implements TableScan {\n   private static final Logger LOG = LoggerFactory.getLogger(TableScan.class);\n \n   private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\");\n-  private static final List<String> SNAPSHOT_COLUMNS = ImmutableList.of(\n+  private static final List<String> SCAN_COLUMNS = ImmutableList.of(\n+      \"snapshot_id\", \"file_path\", \"file_ordinal\", \"file_format\", \"block_size_in_bytes\",\n+      \"file_size_in_bytes\", \"record_count\", \"partition\"\n+  );\n+  private static final List<String> SCAN_WITH_STATS_COLUMNS = ImmutableList.of(\n       \"snapshot_id\", \"file_path\", \"file_ordinal\", \"file_format\", \"block_size_in_bytes\",\n       \"file_size_in_bytes\", \"record_count\", \"partition\", \"value_counts\", \"null_value_counts\",\n       \"lower_bounds\", \"upper_bounds\"\nReview:"}
{"pred": "Good job adding the deprecation note.", "gold": "`ctx` is unused in ReportStat", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -85,11 +85,19 @@ func (a *PipedAPI) Register(server *grpc.Server) {\n \n // Ping is periodically sent to report its realtime status/stats to control-plane.\n // The received stats will be pushed to the metrics collector.\n+// Note: This service is deprecated, use ReportStat instead.\n func (a *PipedAPI) Ping(ctx context.Context, req *pipedservice.PingRequest) (*pipedservice.PingResponse, error) {\n \treturn &pipedservice.PingResponse{}, nil\n \t// return nil, status.Error(codes.Unimplemented, \"\")\n }\n \n+// ReportStat is periodically sent to report its realtime status/stats to control-plane.\n+// The received stats will be pushed to the metrics collector.\n+func (a *PipedAPI) ReportStat(ctx context.Context, req *pipedservice.ReportStatRequest) (*pipedservice.ReportStatResponse, error) {\n+\treturn &pipedservice.ReportStatResponse{}, nil\n+\t// return nil, status.Error(codes.Unimplemented, \"\")\n+}\n+\n // ReportPipedMeta is sent by piped while starting up to report its metadata\n // such as configured cloud providers.\n func (a *PipedAPI) ReportPipedMeta(ctx context.Context, req *pipedservice.ReportPipedMetaRequest) (*pipedservice.ReportPipedMetaResponse, error) {\nReview:"}
{"pred": "It's good to have the includes grouped together, but it's also good to have them in the order of their usage.", "gold": "We don't want to add boost as a dependency when building the Thrift compiler. Sorry.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -21,12 +21,15 @@\n #include <fstream>\n #include <iostream>\n #include <vector>\n+#include <list>\n+#include <map>\n \n #include <stdlib.h>\n #include <sys/stat.h>\n #include <sys/types.h>\n #include <sstream>\n #include <algorithm>\n+\n #include \"t_generator.h\"\n #include \"platform.h\"\n #include \"version.h\"\nReview:"}
{"pred": "Is there a reason why you are using minSpeedChange and maxSpeedChange instead of just speedChange?", "gold": "It's not printing the range. Also I think it's useful to print a warning above stating that the minimum change is -1000.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -323,7 +323,8 @@ bool Monsters::deserializeSpell(const pugi::xml_node& node, spellBlock_t& sb, co\n \t\t\tcombat->setParam(COMBAT_PARAM_TYPE, COMBAT_HEALING);\n \t\t\tcombat->setParam(COMBAT_PARAM_AGGRESSIVE, 0);\n \t\t} else if (tmpName == \"speed\") {\n-\t\t\tint32_t speedChange = 0;\n+\t\t\tint32_t minSpeedChange = 0;\n+\t\t\tint32_t maxSpeedChange = 0;\n \t\t\tint32_t duration = 10000;\n \n \t\t\tif ((attr = node.attribute(\"duration\"))) {\nReview:"}
{"pred": "This function should have some logging to track the usage.", "gold": "if name is empty will this become enumerate ? (and cause the unmarshal to fail ?)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -332,3 +332,15 @@ func (c *clusterClient) SchedPolicyDelete(name string) error {\n \n \treturn nil\n }\n+\n+// SchedPolicyGet returns schedule policy matching given name.\n+func (c *clusterClient) SchedPolicyGet(name string) (*sched.SchedPolicy, error) {\n+\tpolicy := new(sched.SchedPolicy)\n+\treq := c.c.Get().Resource(clusterPath + SchedPath + \"/\" + name)\n+\n+\tif err := req.Do().Unmarshal(policy); err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\treturn policy, nil\n+}\nReview:"}
{"pred": "Should this be a check for the subscription type?", "gold": "How about including a flash message that explains the exercises are only available to subscribers of X plan?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -15,7 +15,7 @@ module ProductsHelper\n     if current_user_has_access_to?(:exercises)\n       link_to url, options, &block\n     else\n-      content_tag \"a\", &block\n+      link_to edit_subscription_path, options, &block\n     end\n   end\n end\nReview:"}
{"pred": "Should this be checking for the length of the text before deleting the prefix?", "gold": "You should also call `e.accept()` and `return` so the key press isn't processed further (as we're leaving insert mode anyways).", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -232,6 +232,11 @@ class Command(misc.MinimalLineEditMixin, misc.CommandLineEdit):\n         Enter/Shift+Enter/etc. will cause QLineEdit to think it's finished\n         without command_accept to be called.\n         \"\"\"\n+        text = self.text()\n+        if text in modeparsers.STARTCHARS and e.key() == Qt.Key_Backspace:\n+            modeman.leave(self._win_id, usertypes.KeyMode.command,\n+                          'prefix deleted')\n+\n         if e.key() == Qt.Key_Return:\n             e.ignore()\n             return\nReview:"}
{"pred": "It's good to see that we are using environment variables for the credentials. However, it would be better to use a more secure method such as using a secret key store.", "gold": "Freeze mutable objects assigned to constants.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,14 @@\n+MAIL_SETTINGS = {\n+  address: \"smtp.sendgrid.net\",\n+  port: \"587\",\n+  authentication: :plain,\n+  user_name: ENV[\"SENDGRID_USERNAME\"],\n+  password: ENV[\"SENDGRID_PASSWORD\"],\n+  domain: \"heroku.com\"\n+}\n+\n+if ENV[\"EMAIL_RECIPIENTS\"]\n+  Mail.register_interceptor(\n+    RecipientInterceptor.new(ENV.fetch(\"EMAIL_RECIPIENTS\")),\n+  )\n+end\nReview:"}
{"pred": "pageWait() should be defined before use, and it's not clear what it does. Also, it's better to use page.waitForNavigation() instead of page.waitForResponse() here.", "gold": "Hmm, this feels hacky. Maybe good enough if it makes the test more stable, but why is timing even an aspect here, since below it should wait for these two things anyway?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -34,8 +34,11 @@ import {\n \n async function toggleOptIn() {\n \tawait page.waitForSelector( '#googlesitekit-opt-in' );\n-\tawait expect( page ).toClick( '#googlesitekit-opt-in' );\n-\tawait page.waitForResponse( ( res ) => res.url().match( 'wp/v2/users/me' ) );\n+\tawait pageWait();\n+\tawait Promise.all( [\n+\t\tpage.waitForResponse( ( res ) => res.url().match( 'wp/v2/users/me' ) ),\n+\t\texpect( page ).toClick( '#googlesitekit-opt-in' ),\n+\t] );\n }\n \n describe( 'management of tracking opt-in/out via settings page', () => {\nReview:"}
{"pred": "This should be NULL checked before splitting and trimming.", "gold": "Do we want this on by default, or an opt-in (e.g. via some config while add the instrumentation)? I guess a more general question is - what's the bar for the default vs opt-in tags.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -144,6 +144,12 @@ namespace OpenTelemetry.Instrumentation.AspNetCore.Implementation\n                 {\n                     activity.SetTag(SemanticConventions.AttributeHttpUserAgent, userAgent);\n                 }\n+\n+                var xForwardedFor = request.Headers[\"X-Forwarded-For\"].FirstOrDefault();\n+                if (!string.IsNullOrEmpty(xForwardedFor))\n+                {\n+                    activity.SetTag(SemanticConventions.AttributeHttpClientIP, xForwardedFor.Split(',').First().Trim());\n+                }\n             }\n         }\n \nReview:"}
{"pred": "This change should be documented in the commit message.", "gold": "`status` is just one of the features, named as status is not suitable.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -91,7 +91,7 @@ int main(int argc, char *argv[]) {\n     }\n \n     LOG(INFO) << \"Starting Graph HTTP Service\";\n-    nebula::WebService::registerHandler(\"/graph\", [] {\n+    nebula::WebService::registerHandler(\"/status\", [] {\n         return new nebula::graph::GraphHttpHandler();\n     });\n     status = nebula::WebService::start();\nReview:"}
{"pred": "You should add a comment here explaining why you are setting the enabled state and onClickListener.", "gold": "There is an option to hide the subscriptions list from the sidebar. If it is hidden, the filter text should not be displayed.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -296,9 +296,17 @@ public class NavListAdapter extends BaseAdapter\n                 .getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n \n         convertView = inflater.inflate(R.layout.nav_section_item, parent, false);\n+        TextView feedsFilteredMsg = convertView.findViewById(R.id.nav_feeds_filtered_message);\n \n-        convertView.setEnabled(false);\n-        convertView.setOnClickListener(null);\n+        if (UserPreferences.getFeedFilter() != UserPreferences.FEED_FILTER_NONE) {\n+            convertView.setEnabled(true);\n+            feedsFilteredMsg.setText(\"{md-info-outline} \" + context.getString(R.string.feed_is_filtered));\n+            Iconify.addIcons(feedsFilteredMsg);\n+            feedsFilteredMsg.setVisibility(View.VISIBLE);\n+        } else {\n+            convertView.setEnabled(false);\n+            feedsFilteredMsg.setVisibility(View.GONE);\n+        }\n \n         return convertView;\n     }\nReview:"}
{"pred": "Should we add a check to make sure the memoryCircuitBreakerThreshold is not negative?", "gold": "I'd like for all of this to be dynamically configurable at some point, but it doesn't have to be in this PR. Can add it to the future SIP or create a separate JIRA for it, as you think would be appropriate.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -224,6 +224,11 @@ public class SolrConfig extends XmlConfigFile implements MapSerializable {\n     queryResultWindowSize = Math.max(1, getInt(\"query/queryResultWindowSize\", 1));\n     queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n     enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n+\n+    useCircuitBreakers = getBool(\"query/useCircuitBreakers\", false);\n+    memoryCircuitBreakerThreshold = getInt(\"query/memoryCircuitBreakerThreshold\", 100);\n+\n+    validateMemoryBreakerThreshold();\n     \n     useRangeVersionsForPeerSync = getBool(\"peerSync/useRangeVersions\", true);\n \nReview:"}
{"pred": "You can remove the using ErrorCode line as it is not used.", "gold": "move the constructor to down the `namespace`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -57,8 +57,6 @@ extern Events* g_events;\n extern Chat* g_chat;\n extern LuaEnvironment g_luaEnvironment;\n \n-using ErrorCode = boost::system::error_code;\n-\n Signals::Signals(boost::asio::io_service& service) :\n \tset(service)\n {\nReview:"}
{"pred": "Good addition, this should make it easier to access the federated cluster resource.", "gold": "Nit: ending with a '.' looks consistent with the fields around it.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -123,6 +123,10 @@ type ClusterDeploymentStatus struct {\n \t// Federated is true if the cluster deployment has been federated with the host cluster.\n \tFederated bool `json:\"federated,omitempty\"`\n \n+\t// FederatedClusterRef is the reference to the federated cluster resource associated with\n+\t// this ClusterDeployment\n+\tFederatedClusterRef *corev1.ObjectReference `json:\"federatedClusterRef,omitempty\"`\n+\n \t// AdminKubeconfigSecret references the secret containing the admin kubeconfig for this cluster.\n \tAdminKubeconfigSecret corev1.LocalObjectReference `json:\"adminKubeconfigSecret,omitempty\"`\n \nReview:"}
{"pred": "Good change, now we have the context available in fieldsFromJWTSvidParams.", "gold": "Audit log will not have a warning about they are using a deprecated path, is it something we must care about?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -138,7 +138,7 @@ func (s *Service) MintX509SVID(ctx context.Context, req *svidv1.MintX509SVIDRequ\n }\n \n func (s *Service) MintJWTSVID(ctx context.Context, req *svidv1.MintJWTSVIDRequest) (*svidv1.MintJWTSVIDResponse, error) {\n-\trpccontext.AddRPCAuditFields(ctx, s.fieldsFromJWTSvidParams(req.Id, req.Audience, req.Ttl))\n+\trpccontext.AddRPCAuditFields(ctx, s.fieldsFromJWTSvidParams(ctx, req.Id, req.Audience, req.Ttl))\n \tjwtsvid, err := s.mintJWTSVID(ctx, req.Id, req.Audience, req.Ttl)\n \tif err != nil {\n \t\treturn nil, err\nReview:"}
{"pred": "This looks like a valid change, but it would be good to add a comment explaining why this change is necessary.", "gold": "I think you also want to update the condition to add ` || impl.Visibility == TypeMemberVisibility.FamilyOrAssembly`.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -23,7 +23,7 @@ namespace Microsoft.Cci.Differs.Rules\n             // If implementation is protected then contract must be protected as well. \n             if (impl.Visibility == TypeMemberVisibility.Family)\n             {\n-                if (contract.Visibility != TypeMemberVisibility.Family)\n+                if (contract.Visibility != TypeMemberVisibility.Family && contract.Visibility != TypeMemberVisibility.FamilyOrAssembly)\n                 {\n                     differences.AddIncompatibleDifference(this,\n                         \"Visibility of member '{0}' is '{1}' in the implementation but '{2}' in the contract.\",\nReview:"}
{"pred": "Good to add some comments here to explain the purpose of these constants.", "gold": "`DepositToRewardingFundBaseGas` is a global variable (from `gochecknoglobals`)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -18,7 +18,10 @@ import (\n )\n \n var (\n-\tdepositToRewardingFundBaseGas = uint64(10000)\n+\t// DepositToRewardingFundBaseGas represents the base intrinsic gas for depositToRewardingFund\n+\tDepositToRewardingFundBaseGas = uint64(10000)\n+\t// DepositToRewardingFundGasPerByte represents the depositToRewardingFund payload gas per uint\n+\tDepositToRewardingFundGasPerByte = uint64(100)\n )\n \n // DepositToRewardingFund is the action to deposit to the rewarding fund\nReview:"}
{"pred": "Updated the emoji to better represent the command group.", "gold": "What do you think of \"operations\"?? Also what do these emojis look like on Linux??", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -3,12 +3,14 @@\n // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n // SPDX-License-Identifier: Apache-2.0\n \n-// Package groups contains the names of command groups\n+// Package groups contains the names of command groups.\n package group\n \n+// Categories for each top level command in the CLI.\n const (\n-\tGettingStarted = \"Getting Started \u2728\"\n-\tDevelop        = \"Develop \ud83d\udd27\"\n+\tGettingStarted = \"Getting Started \ud83c\udf31\"\n+\tDevelop        = \"Develop \u2728\"\n \tSettings       = \"Settings \u2699\ufe0f\"\n+\tOperational    = \"Operational \ud83e\uddd0\"\n \tRelease        = \"Release \ud83d\ude80\"\n )\nReview:"}
{"pred": "This looks good. The code is well formatted and easy to read.", "gold": "I like the word \"give\" here. Feels like I'm giving a gift to my team.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,16 @@\n+<% content_for :subject_block do %>\n+  <h1><%= t('shared.subscription.name') %> for Teams</h1>\n+  <h2 class=\"tagline\">\n+    Sign your team up for <%= t('shared.subscription.name') %> today, and give them the finest Ruby on Rails content and the best expert teachers.\n+  </h2>\n+<% end %>\n+\n+<p>Your team gets all of the great benefits of <%= link_to t('shared.subscription.name'), prime_path %>, with convenient monthly group billing, as well as a nice discount. <%= t('shared.subscription.name') %> Teams have a minimum of 5 members, and a 10% discount off the normal price. New members can be added at any time.</p>\n+\n+<section class=\"plans\">\n+  <%= render @plans %>\n+</section>\n+\n+<span class=\"prime-aside-links\">\n+  <%= link_to \"View all the features of #{t('shared.subscription.name')}\", prime_path %>\n+</span>\nReview:"}
{"pred": "It's good to see that you are importing the necessary packages for the code.", "gold": "Is it possible to use `np.random` module instead?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -11,12 +11,16 @@ import numpy as np\n from sklearn import __version__ as sk_version\n from sklearn.base import clone\n from sklearn.datasets import (load_boston, load_breast_cancer, load_digits,\n-                              load_iris, load_svmlight_file)\n+                              load_iris, load_linnerud, load_svmlight_file,\n+                              make_multilabel_classification)\n from sklearn.exceptions import SkipTestWarning\n from sklearn.metrics import log_loss, mean_squared_error\n-from sklearn.model_selection import GridSearchCV, train_test_split\n+from sklearn.model_selection import GridSearchCV, RandomizedSearchCV, train_test_split\n+from sklearn.multioutput import (MultiOutputClassifier, ClassifierChain, MultiOutputRegressor,\n+                                 RegressorChain)\n from sklearn.utils.estimator_checks import (_yield_all_checks, SkipTest,\n                                             check_parameters_default_constructible)\n+from scipy.stats import randint, uniform\n \n \n decreasing_generator = itertools.count(0, -1)\nReview:"}
{"pred": "This change should be documented in the release notes, as it could affect existing users.", "gold": "``default=None`` implies ``allow_None`` so ``allow_None`` is superfluous here. As a special case, if allow_None=True (which is true by default if the parameter has a default of None when declared) then a value of None is also allowed.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -49,7 +49,7 @@ legend_dimensions = ['label_standoff', 'label_width', 'label_height', 'glyph_wid\n \n class ElementPlot(BokehPlot, GenericElementPlot):\n \n-    bgcolor = param.Parameter(default='white', doc=\"\"\"\n+    bgcolor = param.Parameter(default=None, allow_None=True, doc=\"\"\"\n         Background color of the plot.\"\"\")\n \n     border = param.Number(default=10, doc=\"\"\"\nReview:"}
{"pred": "Good change to make the user name more generic.", "gold": "Is there anything in particular that makes setting up the downstream rolebinding(s) to `system:k3s-controller` burdensome or confusing? This changes looks fine to me but it seems a shame to alias an embedded k3s controller. If we are doing this in other places that I am not aware of then we can dismiss this concern out of hand.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -551,8 +551,8 @@ func genClientCerts(config *config.Control, runtime *config.ControlRuntime) erro\n \tif _, err = factory(\"system:kube-proxy\", nil, runtime.ClientKubeProxyCert, runtime.ClientKubeProxyKey); err != nil {\n \t\treturn err\n \t}\n-\t// this must be hardcoded to k3s-controller because it's hard coded in the rolebindings.yaml\n-\tif _, err = factory(\"system:k3s-controller\", nil, runtime.ClientK3sControllerCert, runtime.ClientK3sControllerKey); err != nil {\n+\t// This user (system:k3s-controller by default) must be bound to a role in rolebindings.yaml or the downstream equivalent\n+\tif _, err = factory(\"system:\"+version.Program+\"-controller\", nil, runtime.ClientK3sControllerCert, runtime.ClientK3sControllerKey); err != nil {\n \t\treturn err\n \t}\n \nReview:"}
{"pred": "This change looks good, it is just a change in the import path.", "gold": "File is not `goimports`-ed (from `goimports`)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -21,7 +21,7 @@ import (\n \t\"strings\"\n \t\"time\"\n \n-\tacd \"github.com/ncw/go-acd\"\n+\t\"github.com/ncw/go-acd\"\n \t\"github.com/ncw/rclone/fs\"\n \t\"github.com/ncw/rclone/fs/config\"\n \t\"github.com/ncw/rclone/fs/config/configmap\"\nReview:"}
{"pred": "This looks good. All properties are properly encapsulated and the class is properly named.", "gold": "nit: all other types in this project have full names, so maybe a better name would be `OperatingSystem`?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,15 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+// See the LICENSE file in the project root for more information.\n+\n+namespace Reporting\n+{\n+    public class Os\n+    {\n+        public string Locale { get; set; }\n+\n+        public string Architecture { get; set; }\n+\n+        public string Name { get; set; }\n+    }\n+}\nReview:"}
{"pred": "This is a good change, it makes the code more readable and easier to maintain.", "gold": "Why is this needed here?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -16,7 +16,7 @@\n #include <GraphMol/SmilesParse/SmilesParse.h>\n #include <GraphMol/FileParsers/FileParsers.h>\n #include <Geometry/point.h>\n-#include \"MolTransforms.h\"\n+#include <GraphMol/MolTransforms/MolTransforms.h>\n \n using namespace RDKit;\n using namespace MolTransforms;\nReview:"}
{"pred": "This should probably throw an exception if the methodDeclaration is not supported.", "gold": "mmm, why a method declaration should not have the TypeVariableResolutionCapability? Is this ok?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -192,7 +192,7 @@ public interface Context {\n                 methodUsage = ((TypeVariableResolutionCapability) methodDeclaration)\n                                       .resolveTypeVariables(this, argumentsTypes);\n             } else {\n-                throw new UnsupportedOperationException();\n+                return Optional.empty();\n             }\n \n             return Optional.of(methodUsage);\nReview:"}
{"pred": "The order of the parameters should be kept consistent with the other constructors.", "gold": "nit: any reason you swapped the ordering?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -32,8 +32,8 @@ public class EeaSendRawTransaction extends PrivacySendTransaction {\n \n   public EeaSendRawTransaction(\n       final PrivacyParameters privacyParameters,\n-      final PrivateTransactionHandler privateTransactionHandler,\n-      final TransactionPool transactionPool) {\n+      final TransactionPool transactionPool,\n+      final PrivateTransactionHandler privateTransactionHandler) {\n     super(privacyParameters, privateTransactionHandler, transactionPool);\n   }\n \nReview:"}
{"pred": "It looks like you are using EncoderAppPathDisplay instead of EncoderAppPath. Is this intentional?", "gold": "can you de-uglify at least this line?.. hard to tell what changed...", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -4,7 +4,7 @@ define([\"jQuery\", \"loading\", \"globalize\", \"dom\"], function($, loading, globalize\n     function loadPage(page, config, systemInfo) {\n         Array.prototype.forEach.call(page.querySelectorAll(\".chkDecodeCodec\"), function(c) {\n             c.checked = -1 !== (config.HardwareDecodingCodecs || []).indexOf(c.getAttribute(\"data-codec\"))\n-        }), page.querySelector(\"#chkHardwareEncoding\").checked = config.EnableHardwareEncoding, $(\"#selectVideoDecoder\", page).val(config.HardwareAccelerationType), $(\"#selectThreadCount\", page).val(config.EncodingThreadCount), $(\"#txtDownMixAudioBoost\", page).val(config.DownMixAudioBoost), page.querySelector(\".txtEncoderPath\").value = config.EncoderAppPath || \"\", $(\"#txtTranscodingTempPath\", page).val(config.TranscodingTempPath || \"\"), $(\"#txtVaapiDevice\", page).val(config.VaapiDevice || \"\"), page.querySelector(\"#selectH264Preset\").value = config.H264Preset || \"\", page.querySelector(\"#txtH264Crf\").value = config.H264Crf || \"\", page.querySelector(\"#chkEnableSubtitleExtraction\").checked = config.EnableSubtitleExtraction || !1, page.querySelector(\"#selectVideoDecoder\").dispatchEvent(new CustomEvent(\"change\", {\n+        }), page.querySelector(\"#chkHardwareEncoding\").checked = config.EnableHardwareEncoding, $(\"#selectVideoDecoder\", page).val(config.HardwareAccelerationType), $(\"#selectThreadCount\", page).val(config.EncodingThreadCount), $(\"#txtDownMixAudioBoost\", page).val(config.DownMixAudioBoost), page.querySelector(\".txtEncoderPath\").value = config.EncoderAppPathDisplay || \"\", $(\"#txtTranscodingTempPath\", page).val(config.TranscodingTempPath || \"\"), $(\"#txtVaapiDevice\", page).val(config.VaapiDevice || \"\"), page.querySelector(\"#selectH264Preset\").value = config.H264Preset || \"\", page.querySelector(\"#txtH264Crf\").value = config.H264Crf || \"\", page.querySelector(\"#chkEnableSubtitleExtraction\").checked = config.EnableSubtitleExtraction || !1, page.querySelector(\"#selectVideoDecoder\").dispatchEvent(new CustomEvent(\"change\", {\n             bubbles: !0\n         })), loading.hide()\n     }\nReview:"}
{"pred": "It looks like you have removed some code here, is this intentional? If so, why?", "gold": "Please can you merge master in before making these changes. I just reinstated a bunch of BPF UTs. Possible that the UTs use this code.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -354,13 +354,10 @@ type BPFDataplane interface {\n \tRemoveXDP(ifName string, mode XDPMode) error\n \tUpdateCIDRMap(ifName string, family IPFamily, ip net.IP, mask int, refCount uint32) error\n \tUpdateFailsafeMap(proto uint8, port uint16) error\n-\tloadXDPRaw(objPath, ifName string, mode XDPMode, mapArgs []string) error\n \tGetBPFCalicoDir() string\n \tAttachToSockmap() error\n \tDetachFromSockmap(mode FindObjectMode) error\n \tRemoveSockmap(mode FindObjectMode) error\n-\tloadBPF(objPath, progPath, progType string, mapArgs []string) error\n-\tLoadSockops(objPath string) error\n \tLoadSockopsWithBytes(objBytes []byte) error\n \tLoadSockopsAuto() error\n \tRemoveSockops() error\nReview:"}
{"pred": "The double underscore methods are usually reserved for internal use, so it's best to avoid using them.", "gold": "Do you want to add additional cases for `Bla.__b()` and `self.__c()`? (Just add additional classmethods `__b` and `__c` and the calls to `__init__`)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -66,3 +66,14 @@ class MyCls:\n     @classmethod\n     def get_class_var(cls):\n         return cls.__class_var\n+\n+\n+class Bla:\n+    \"\"\"Regression test for issue 4638\"\"\"\n+\n+    def __init__(self):\n+        type(self).__a()\n+\n+    @classmethod\n+    def __a(cls):\n+        pass\nReview:"}
{"pred": "Is this change safe? It looks like the original code was using a different function to get the records, so this could have unintended consequences.", "gold": "the recids is never changed after. So, it should contains the exact shown results, whatever are the rights for the user (admin or simple user, restricted collections...)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -462,7 +462,7 @@ def search(collection, p, of, ot, so, rm):\n \n     ctx = dict(\n         facets=facets.get_facets_config(collection, qid),\n-        records=len(get_current_user_records_that_can_be_displayed(qid)),\n+        records=len(recids),\n         qid=qid, rg=rg,\n         create_nearest_terms_box=lambda: _create_neareset_term_box(argd_orig),\n         easy_search_form=EasySearchForm(csrf_enabled=False),\nReview:"}
{"pred": "This looks good, but it would be nice to add a comment explaining why we are setting the ContentMD5 here.", "gold": "Shouldn't the docstring mention that the MD5 checksum of `p` is computed each time and verified? Also, could there be use cases where a caller might not want such a check to happen because, eg, a blob storage solution doesn't provide MD5 verification or uses another hash algorithm such as SHA256?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -669,7 +669,15 @@ func (b *Bucket) newRangeReader(ctx context.Context, key string, offset, length\n \n // WriteAll is a shortcut for creating a Writer via NewWriter and writing p.\n func (b *Bucket) WriteAll(ctx context.Context, key string, p []byte, opts *WriterOptions) (err error) {\n-\tw, err := b.NewWriter(ctx, key, opts)\n+\trealOpts := new(WriterOptions)\n+\tif opts != nil {\n+\t\t*realOpts = *opts\n+\t}\n+\tif len(realOpts.ContentMD5) == 0 {\n+\t\tsum := md5.Sum(p)\n+\t\trealOpts.ContentMD5 = sum[:]\n+\t}\n+\tw, err := b.NewWriter(ctx, key, realOpts)\n \tif err != nil {\n \t\treturn err\n \t}\nReview:"}
{"pred": "This should be documented in the docstring, as well as the fact that focusRedirect is an NVDAObject attribute.", "gold": "focusRedirect is used in the powerpnt appModule. We might have to make sure that this does not break. Having said that, I really like this being handled on the events level!", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -143,6 +143,9 @@ def executeEvent(eventName,obj,**kwargs):\n \t@param kwargs: Additional event parameters as keyword arguments.\n \t\"\"\"\n \ttry:\n+\t\t# Allow NVDAObjects to redirect focus events to another object of their choosing.\n+\t\tif eventName==\"gainFocus\" and obj.focusRedirect:\n+\t\t\tobj=obj.focusRedirect\n \t\tsleepMode=obj.sleepMode\n \t\tif eventName==\"gainFocus\" and not doPreGainFocus(obj,sleepMode=sleepMode):\n \t\t\treturn\nReview:"}
{"pred": "This looks like a good addition, but it would be nice to have a comment explaining what the config and gcp_clients packages are used for.", "gold": "You imports are out of order", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -21,6 +21,8 @@ import (\n \t\"encoding/base64\"\n \t\"encoding/json\"\n \t\"fmt\"\n+\t\"github.com/GoogleCloudPlatform/compute-image-tools/osconfig_tests/config\"\n+\t\"github.com/GoogleCloudPlatform/compute-image-tools/osconfig_tests/gcp_clients\"\n \t\"io\"\n \t\"log\"\n \t\"path\"\nReview:"}
{"pred": "Good change, making the constant public will make it easier to access from other classes.", "gold": "This should not be called Flow Trigger. FlowTrigger should has its own flowTrigger job name, for instance, \"flowtrigger\"", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -45,7 +45,7 @@ import org.slf4j.LoggerFactory;\n public class QuartzScheduler {\n \n   //Unless specified, all Quartz jobs's identities comes with the default job name.\n-  private static final String DEFAULT_JOB_NAME = \"job1\";\n+  public static final String DEFAULT_JOB_NAME = \"job1\";\n   private static final Logger logger = LoggerFactory.getLogger(QuartzScheduler.class);\n   private Scheduler scheduler = null;\n \nReview:"}
{"pred": "This looks good. It is nice to see the copyright and license information included.", "gold": "File is not `goimports`-ed (from `goimports`)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,19 @@\n+// Copyright (c) 2018 IoTeX\n+// This is an alpha (internal) release and is not suitable for production. This source code is provided 'as is' and no\n+// warranties are given as to title or non-infringement, merchantability or fitness for purpose and, to the extent\n+// permitted by law, all liability for your use of the code is disclaimed. This source code is governed by Apache\n+// License 2.0 that can be found in the LICENSE file.\n+\n+package sqlite3\n+\n+import (\n+\t\"github.com/iotexproject/iotex-core/config\"\n+\t\"github.com/iotexproject/iotex-core/db\"\n+\t// this is required for sqlite3 usage\n+\t_ \"github.com/mattn/go-sqlite3\"\n+)\n+\n+// NewSQLite3 instantiates an sqlite3\n+func NewSQLite3(cfg *config.SQLITE3) db.Store {\n+\treturn db.NewSQLBase(\"sqlite3\", cfg.SQLite3File)\n+}\nReview:"}
{"pred": "This should be a warning, not an error.", "gold": "Why do we need `\\n` if we already use `WriteLine`? (and `\\n` is not cross platform)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -30,6 +30,10 @@ public partial class Program\n \n     public static void Stress(int concurrency = 0)\n     {\n+#if DEBUG\n+        Console.WriteLine(\"***WARNING*** The current build is DEBUG which may affect timing!\\n\");\n+#endif\n+\n         if (concurrency < 0)\n         {\n             throw new ArgumentOutOfRangeException(nameof(concurrency), \"concurrency level should be a non-negative number.\");\nReview:"}
{"pred": "Should instrumentationName and protocol have default values?", "gold": "What is instrumentation name used for? I'm not seeing other classes use it, only a getter, constructor, and builder.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -30,12 +30,15 @@ import com.google.common.base.MoreObjects;\n public class MetricsConfiguration {\n   private static final String DEFAULT_METRICS_HOST = \"127.0.0.1\";\n   public static final int DEFAULT_METRICS_PORT = 9545;\n-\n+  private static final String DEFAULT_INSTRUMENTATION_NAME = \"besu\";\n+  private static final String DEFAULT_METRICS_PROTOCOL = \"prometheus\";\n   private static final String DEFAULT_METRICS_PUSH_HOST = \"127.0.0.1\";\n   public static final int DEFAULT_METRICS_PUSH_PORT = 9001;\n   public static final Boolean DEFAULT_TIMERS_ENABLED = true;\n \n   private final boolean enabled;\n+  private final String instrumentationName;\n+  private final String protocol;\n   private final int port;\n   private int actualPort;\n   private final String host;\nReview:"}
{"pred": "This is a bit of a strange change. Is there a reason why you are disabling the warning here?", "gold": "@kristofgazso could you review these warnings?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -21,8 +21,10 @@ namespace Nethermind.TxPool.Collections\n {\n     public partial class SortedPool<TKey, TValue, TGroupKey>\n     {\n+#pragma warning disable 67\n         public event EventHandler<SortedPoolEventArgs>? Inserted;\n         public event EventHandler<SortedPoolRemovedEventArgs>? Removed;\n+#pragma warning restore 67\n \n         public class SortedPoolEventArgs\n         {\nReview:"}
{"pred": "This should be checked for security vulnerabilities.", "gold": "will delete this.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,3 @@\n+require(\"child_process\");\n+\n+console.log(\"hi\");\nReview:"}
{"pred": "The indentation of the link_to method call should be consistent with the other lines.", "gold": "~~Indent 2 lines above~~ Disregard. My fault", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -104,9 +104,9 @@ module PurchasesHelper\n \n   def new_plan_link(plan)\n     link_to(\n-       I18n.t('subscriptions.choose_plan_html', plan_name: plan.name).html_safe,\n-       new_individual_plan_purchase_path(plan),\n-       class: 'button'\n+      I18n.t('subscriptions.choose_plan_html', plan_name: plan.name).html_safe,\n+      new_individual_plan_purchase_path(plan),\n+      class: 'button'\n     )\n   end\n end\nReview:"}
{"pred": "Should we add a check for the item type here? It looks like we should not be formatting repeated types.", "gold": "What was the bug that this is fixing?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -366,7 +366,7 @@ public class InitCodeTransformer {\n         default:\n           throw new UnsupportedOperationException(\"unexpected entity name type\");\n       }\n-    } else if (initValueConfig.hasFormattingConfig()) {\n+    } else if (initValueConfig.hasFormattingConfig() && !item.getType().isRepeated()) {\n       if (context.getFeatureConfig().enableStringFormatFunctions()) {\n         FormattedInitValueView.Builder initValue = FormattedInitValueView.newBuilder();\n \nReview:"}
{"pred": "You should consider using a context manager here to ensure the opener is closed properly.", "gold": "This will always add the authorization header to the request object. Is this the right scope for these two lines? If username/password are not defined, it will encode 'Basic :'", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -471,6 +471,9 @@ class RemoteConnection(object):\n             request.add_header('Accept', 'application/json')\n             request.add_header('Content-Type', 'application/json;charset=UTF-8')\n \n+            base64string = base64.b64encode('%s:%s' % (parsed_url.username, parsed_url.password))\n+            request.add_header(\"Authorization\", \"Basic %s\" % base64string)\n+\n             if password_manager:\n                 opener = url_request.build_opener(url_request.HTTPRedirectHandler(),\n                                                   HttpErrorHandler(),\nReview:"}
{"pred": "This is a good change to make the code more portable.", "gold": "Is this always how Bazel does paths? Would it be nicer to do `-DBAZEL_TEST_DATA_PATH=../com_github_google_flatbuffers/tests/` so this string is not hardcoded in the the source?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -50,7 +50,12 @@ uint32_t lcg_rand() {\n }\n void lcg_reset() { lcg_seed = 48271; }\n \n-std::string test_data_path = \"tests/\";\n+std::string test_data_path =\n+#ifdef BAZEL_TEST_DATA_PATH\n+    \"../com_github_google_flatbuffers/tests/\";\n+#else\n+    \"tests/\";\n+#endif\n \n // example of how to build up a serialized buffer algorithmically:\n flatbuffers::DetachedBuffer CreateFlatBufferTest(std::string &buffer) {\nReview:"}
{"pred": "Good idea to add the UTC date, this will ensure that the date and time is consistent across all machines.", "gold": "Not an expert of ES, so not sure of the impact here.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -169,7 +169,9 @@ class ElasticsearchTarget(luigi.Target):\n \n         The document id would be sufficient but,\n         for documentation,\n-        we index the parameters `update_id`, `target_index`, `target_doc_type` and `date` as well.\n+        we index the parameters `update_id`, `target_index`, `target_doc_type` and `date` as well.  `date_utc` added\n+        so we can be sure to get the actual date and time based upon UTC and not the client date and time based on the\n+        client machine.\n         \"\"\"\n         self.create_marker_index()\n         self.es.index(index=self.marker_index, doc_type=self.marker_doc_type,\nReview:"}
{"pred": "This looks like a bug fix, the granteeList was missing from the call to getRoleList.", "gold": "Who deletes the memory for the granteeList? (or the roleList for that matter)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1665,10 +1665,10 @@ NABoolean ExExeUtilGetMetadataInfoTcb::checkUserPrivs(\n   if (ComUser::isRootUserID())\n     return FALSE;\n \n-  // any user granted the DB__ROOTROLE sees everything\n   Int32 numRoles;\n   Int32 *roleList;\n-  if (currContext->getRoleList(numRoles, roleList) == SUCCESS)\n+  Int32 *granteeList;\n+  if (currContext->getRoleList(numRoles, roleList, granteeList) == SUCCESS)\n   {\n     char authIDAsChar[sizeof(Int32)+10];\n     NAString auths;\nReview:"}
{"pred": "This should be done in the destructor of the subscriptions vector, rather than here.", "gold": "This loop is missing a lock on subscriptions_mutex.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -13,6 +13,11 @@ ws_listener (listener_a), ws (std::move (socket_a)), write_strand (ws.get_execut\n \n nano::websocket::session::~session ()\n {\n+\tfor (auto & subscription : subscriptions)\n+\t{\n+\t\tws_listener.decrease_subscription_count (subscription);\n+\t}\n+\n \tws_listener.get_node ().logger.try_log (\"websocket session ended\");\n }\n \nReview:"}
{"pred": "Good to add the sign_up and sign_out routes. Make sure to add tests for these routes.", "gold": "shouldn't clearance be setting these up for us?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -62,7 +62,9 @@ Workshops::Application.routes.draw do\n   match '/backbone-js-on-rails' => redirect(\"/products/1-backbone-js-on-rails\")\n \n   match '/rubyist-booster-shot' => \"high_voltage/pages#show\", as: :rubyist_booster_shot, id: \"rubyist-booster-shot\"\n-  match 'sign_in'  => 'sessions#new', as: 'sign_in'\n+  match '/sign_up' => 'users#new', as: 'sign_up'\n+  match '/sign_in' => 'sessions#new', as: 'sign_in'\n+  match '/sign_out' => 'sessions#destroy', as: 'sign_out', via: :delete\n \n   mount Split::Dashboard, at: 'split'\n \nReview:"}
{"pred": "It would be nice to have a comment here explaining why we need a noOp detector.", "gold": "Need to update the doc for `TelemetrySDK` and `Host` structs deleting references from removed functions.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -46,6 +46,10 @@ type (\n \t}\n \n \tdefaultServiceNameDetector struct{}\n+\n+\t// noOp is a Detector that only provides an empty resource.  Used\n+\t// to disable automatic detection.\n+\tnoOp struct{}\n )\n \n var (\nReview:"}
{"pred": "This is no longer necessary given the isNested() check.", "gold": "I think we should keep that here and add a new method `isSyntacticallyFinal` that returns `super.isFinal()` (and can be used in UnnecessaryModifier). Otherwise the contract of `isFinal` is not respected", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -55,12 +55,6 @@ public final class ASTRecordDeclaration extends AbstractAnyTypeDeclaration {\n         return isNested() || isLocal();\n     }\n \n-    @Override\n-    public boolean isFinal() {\n-        // A record is implicitly final\n-        return true;\n-    }\n-\n     @Override\n     public boolean isLocal() {\n         return getParent() instanceof ASTBlockStatement;\nReview:"}
{"pred": "This looks like it should be inside the if statement, as it only applies when enableCellEditOnFocus is true.", "gold": "Is there a reason why we wouldn't want to check this every time? Why are we only checking for the footer and scroll bar when enableCellEditOnFocus is true?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -2444,6 +2444,11 @@ angular.module('ui.grid')\n           //   to get the full position we need\n           scrollPixels = self.renderContainers.body.prevScrollTop - (topBound - pixelsToSeeRow);\n \n+          //Since scrollIfNecessary is called multiple times when enableCellEditOnFocus is true we need to make sure the scrollbarWidth and footerHeight is accounted for to not cause a loop.\n+          if (gridCol.colDef.enableCellEditOnFocus === true) {\n+            scrollPixels = scrollPixels - self.footerHeight - self.scrollbarWidth;\n+          }\n+\n           scrollEvent.y = getScrollY(scrollPixels, scrollLength, self.renderContainers.body.prevScrolltopPercentage);\n         }\n         // Otherwise if the scroll position we need to see the row is MORE than the bottom boundary, i.e. obscured below the bottom of the self...\nReview:"}
{"pred": "It's good to see the import of the new class, but it would be nice to see a comment explaining why it's being imported.", "gold": "You need to create an API for this class. This class should follow roughly the same dependency structure than RemoteAvailableInstallersPlayOnLinuxImplementation / RemoteAvailableInstallers. Maybe we could use a inner class here?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -23,6 +23,7 @@ import com.playonlinux.common.dtos.*;\n import com.playonlinux.domain.PlayOnLinuxError;\n import com.playonlinux.injection.Scan;\n import com.playonlinux.injection.Inject;\n+import com.playonlinux.ui.api.InstallerFilter;\n import com.playonlinux.webservice.RemoteAvailableInstallers;\n \n import java.net.MalformedURLException;\nReview:"}
{"pred": "This change looks good. It ensures that the workflow_id is always updated in case of a duplicate key.", "gold": "This should not be a case, right? If `run_id` is the same `workflow_id` can't be changed. Actually surprised that it is not part of a key.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -42,7 +42,7 @@ const (\n \ttemplateCreateWorkflowExecutionClosed = `INSERT INTO executions_visibility (` +\n \t\t`namespace_id, workflow_id, run_id, start_time, execution_time, workflow_type_name, close_time, status, history_length, memo, encoding) ` +\n \t\t`VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ` +\n-\t\t`ON DUPLICATE KEY UPDATE start_time = VALUES(start_time), execution_time = VALUES(execution_time), workflow_type_name = VALUES(workflow_type_name), ` +\n+\t\t`ON DUPLICATE KEY UPDATE workflow_id = VALUES(workflow_id), start_time = VALUES(start_time), execution_time = VALUES(execution_time), workflow_type_name = VALUES(workflow_type_name), ` +\n \t\t`close_time = VALUES(close_time), status = VALUES(status), history_length = VALUES(history_length), memo = VALUES(memo), encoding = VALUES(encoding)`\n \n \t// RunID condition is needed for correct pagination\nReview:"}
{"pred": "It looks like AQR is being disabled here, but it's not clear why. Can you provide more context?", "gold": "How would AQR work for an INSERT/SELECT of one table into another where a LOB column is being copied?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -4520,7 +4520,9 @@ RelExpr * GenericUpdate::preCodeGen(Generator * generator,\n     {\n       oltOptInfo().setOltOpt(FALSE);\n       generator->oltOptInfo()->setOltOpt(FALSE);\n-      generator->setAqrEnabled(FALSE);\n+      //enabling AQR to take care of the lock conflict error 8558 that\n+      // should be retried.\n+      //      generator->setAqrEnabled(FALSE);\n       generator->setUpdAbortOnError(TRUE);\n       generator->setUpdSavepointOnError(FALSE);\n     }\nReview:"}
{"pred": "It looks like you are adding a new import here. Make sure to add a comment explaining why you are importing this package.", "gold": "Since these are ultimately different endpoints, it would be nice if we could move them up one level and nuke the common `sds` directory in order to reduce path stutter", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -6,9 +6,11 @@ import (\n \t\"net\"\n \t\"os\"\n \n-\tsds_v2 \"github.com/envoyproxy/go-control-plane/envoy/service/discovery/v2\"\n+\tdiscovery_v2 \"github.com/envoyproxy/go-control-plane/envoy/service/discovery/v2\"\n+\tsecret_v3 \"github.com/envoyproxy/go-control-plane/envoy/service/secret/v3\"\n \tattestor \"github.com/spiffe/spire/pkg/agent/attestor/workload\"\n-\t\"github.com/spiffe/spire/pkg/agent/endpoints/sds\"\n+\t\"github.com/spiffe/spire/pkg/agent/endpoints/sds/sdsv2\"\n+\t\"github.com/spiffe/spire/pkg/agent/endpoints/sds/sdsv3\"\n \t\"github.com/spiffe/spire/pkg/agent/endpoints/workload\"\n \t\"github.com/spiffe/spire/pkg/common/peertracker\"\n \t\"github.com/spiffe/spire/pkg/common/telemetry\"\nReview:"}
{"pred": "This looks like a valid change, although it would be nice to have a comment explaining why this change was made.", "gold": "Please check also whether `null` occurs in the rest of `beforeChangeResult` array.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -927,7 +927,7 @@ export default function Core(rootElement, userSettings, rootInstanceSymbol = fal\n     if (isFunction(beforeChangeResult)) {\n       warn('Your beforeChange callback returns a function. It\\'s not supported since Handsontable 0.12.1 (and the returned function will not be executed).');\n \n-    } else if (beforeChangeResult === false) {\n+    } else if (beforeChangeResult === false || beforeChangeResult.length === 0 || beforeChangeResult[0] === null) {\n       const activeEditor = instance.getActiveEditor();\n \n       if (activeEditor) {\nReview:"}
{"pred": "This is a good change to make the documentation more clear.", "gold": "Outdated docs. There is no response, there's an ack.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -22,9 +22,10 @@ package transport\n \n import \"context\"\n \n-// Filter defines transport-level middleware for Outbounds.\n+// UnaryFilter defines transport-level middleware for `UnaryOutbound`s.\n+// Note: this is client side.\n //\n-// Filters MAY\n+// UnaryFilter MAY\n //\n // - change the context\n // - change the request\nReview:"}
{"pred": "This should be checked to ensure that the container is in the correct state before executing.", "gold": "I'd rather have the container process remove the FIFO after it unblocks. Then `start` can always `Exec()`, and you can catch the \"FIFO does not exist\" error and translate it to a prettier \"someone must have already started the container\".", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -27,7 +27,7 @@ your host.`,\n \t\t}\n \t\tswitch status {\n \t\tcase libcontainer.Created:\n-\t\t\treturn container.Signal(libcontainer.InitContinueSignal)\n+\t\t\treturn container.Exec()\n \t\tcase libcontainer.Stopped:\n \t\t\treturn fmt.Errorf(\"cannot start a container that has run and stopped\")\n \t\tcase libcontainer.Running:\nReview:"}
{"pred": "You should check for err first, as tx can be nil even if err is nil.", "gold": "can you check if there's other similar cases to add nil-check like this?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -284,7 +284,7 @@ func (svr *Web3Server) getTransactionFromActionInfo(actInfo *iotexapi.ActionInfo\n \n func (svr *Web3Server) getTransactionCreateFromActionInfo(actInfo *iotexapi.ActionInfo) (transactionObject, error) {\n \ttx, err := svr.getTransactionFromActionInfo(actInfo)\n-\tif err != nil {\n+\tif err != nil || tx == nil {\n \t\treturn transactionObject{}, err\n \t}\n \nReview:"}
{"pred": "It might be better to add a comment here explaining why we need to check the length of the commonname.", "gold": "`<= 64`? I just picked up what you said in #3981 (\"the CN field is limited to 64 characters\") but maybe there's something I don't know where the 64th character is needed (trailing dot or whatever?) Also this sounds like something that could be beautifully unit tested. Sorry for bugging you :grin:", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -106,7 +106,10 @@ def dummy_cert(privkey, cacert, commonname, sans, organization):\n     cert.gmtime_adj_notBefore(-3600 * 48)\n     cert.gmtime_adj_notAfter(DEFAULT_EXP_DUMMY_CERT)\n     cert.set_issuer(cacert.get_subject())\n-    if commonname is not None and len(commonname) < 64:\n+    is_valid_commonname = (\n+        commonname is not None and len(commonname) < 64\n+    )\n+    if is_valid_commonname:\n         cert.get_subject().CN = commonname\n     if organization is not None:\n         cert.get_subject().O = organization\nReview:"}
{"pred": "This should be tested to ensure it works as expected.", "gold": "I understand that this grabs a Licenses objects but what is the autocomplete method used for? What does this do in context of the auto_completes controller?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -20,4 +20,10 @@ class License < ActiveRecord::Base\n   def short_name\n     abbreviation.blank? ? nice_name : abbreviation\n   end\n+\n+  class << self\n+    def autocomplete(term)\n+      License.select([:nice_name, :id]).where(['lower(nice_name) LIKE ?', \"#{term.downcase}%\"]).limit(10)\n+    end\n+  end\n end\nReview:"}
{"pred": "This method should be documented with a Javadoc comment.", "gold": "I don't really like that way of naming methods based on their arguments. But I can see that the other method names are the same ...", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -480,6 +480,10 @@ public class BlockchainQueries {\n         txs.get(txIndex), header.getNumber(), blockHeaderHash, txIndex);\n   }\n \n+  public Optional<TransactionLocation> transactionLocationByHash(final Hash transactionHash) {\n+    return blockchain.getTransactionLocation(transactionHash);\n+  }\n+\n   /**\n    * Returns the transaction receipt associated with the given transaction hash.\n    *\nReview:"}
{"pred": "This method should probably be renamed to something more descriptive, such as \"sanitizeFilePath\" or \"cleanFilePath\".", "gold": "@sekmiller This method correctly strips the leading and trailing slashes (and also \".\" and \"-\"); But I thought the plan was also to replace any multiple slashes between nested folders with a single slash. For example, as implemented now, I can enter \"folder1///folder2\", and it gets saved and displayed like this, with the 3 slashes. I thought we wanted to sanitize it as \"folder1/folder2\".", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -180,6 +180,19 @@ public class StringUtil {\n         }\n     }\n     \n+    public static String sanitizeFileDirectory(String value){\n+        \n+        while (value.startsWith(\"\\\\\") || value.startsWith(\"/\") || value.startsWith(\"-\") || value.startsWith(\".\")){\n+            value = value.substring(1);\n+        }\n+        while (value.endsWith(\"\\\\\") || value.endsWith(\"/\") || value.endsWith(\"-\") || value.endsWith(\".\")){\n+            value = value.substring(0, value.length() - 1);\n+        }\n+        \n+        return value;\n+    }\n+    \n+    \n     private static SecretKeySpec generateKeyFromString(final String secKey) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n         byte[] key = (secKey).getBytes(\"UTF-8\");\n         MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\nReview:"}
{"pred": "This should be checked for overflow.", "gold": "Looks like the X86 inline assembly is not happy with this type. I will update that", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -45,7 +45,7 @@\n \n int main()\n {\n-    int pid;\n+    int64_t pid;\n     fprintf(stderr, \"starting\\n\");\n #if defined(AARCH64)\n     asm(\"movz x8, \" STRINGIFY(SYS_getpid) \";\"\nReview:"}
{"pred": "This looks good. The code is well indented and the logic is clear.", "gold": "Tabs and a space, again.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -6,6 +6,12 @@\n \n     <h2><%= link_to h(diary_entry.title), :action => 'view', :display_name => diary_entry.user.display_name, :id => diary_entry.id %></h2>\n \n+    <% if @user and diary_entry.user.id != @user.id %>\n+           <%= link_to new_issue_url(reportable_id: diary_entry.id, reportable_type: diary_entry.class.name, reported_user_id: diary_entry.user.id,referer: request.fullpath), :title => t('diary_entry.diary_entry.report') do %>\n+            &nbsp;&#9872;\n+          <% end %>\n+    <% end %>\n+\n     <small class='deemphasize'>\n       <%= raw(t 'diary_entry.diary_entry.posted_by', :link_user => (link_to h(diary_entry.user.display_name), :controller => 'user', :action => 'view', :display_name => diary_entry.user.display_name), :created => l(diary_entry.created_at, :format => :blog), :language_link => (link_to h(diary_entry.language.name), :controller => 'diary_entry', :action => 'list', :display_name => nil, :language => diary_entry.language_code)) %>\n     </small>\nReview:"}
{"pred": "Is this function necessary? It seems like it could be replaced by a call to GetTaskName() in the calling function.", "gold": "Please just enclose if blocks with brackets; this has created issues in the past so I'd prefer we don't use them", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -2441,6 +2441,16 @@ bool QuestManager::istaskappropriate(int task) {\n \treturn false;\n }\n \n+std::string QuestManager::gettaskname(uint32 task_id) {\n+\tQuestManagerCurrentQuestVars();\n+\n+\tif (RuleB(TaskSystem, EnableTaskSystem)) {\n+\t\treturn taskmanager->GetTaskName(task_id);\n+\t}\n+\n+\treturn std::string();\n+}\n+\n void QuestManager::clearspawntimers() {\n \tif(!zone)\n         return;\nReview:"}
{"pred": "This is a good change, it simplifies the code and makes it more readable.", "gold": "`version` isn't need anymore because it's built into `approve_proposal_url`, yes?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -185,11 +185,7 @@\n <% if policy(@proposal).can_approve_or_reject? %>\n   <div class=\"centered\">\n     <p>\n-      <%= link_to \"Approve\",\n-          approval_response_path(approver_action: 'approve',\n-                                 # @todo: get rid of cart\n-                                 cart_id: @proposal.cart.id, version: @proposal.version\n-                                 ), class: 'form-button' %>\n+      <%= link_to \"Approve\", approve_proposal_url(@proposal, version: @proposal.version), class: 'form-button' %>\n     </p>\n   </div>\n <% end %>\nReview:"}
{"pred": "We should add a comment here explaining why we are adding DLT_BLUETOOTH_LE_LL_WITH_PHDR.", "gold": "Moved to the bottom of the file. `CtrlPDU` sits on `BTLE_DATA` so let's put it after", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -11,9 +11,10 @@ import struct\n \n from scapy.compat import orb, chb\n from scapy.config import conf\n-from scapy.data import MTU, DLT_BLUETOOTH_LE_LL\n+from scapy.data import MTU, DLT_BLUETOOTH_LE_LL, DLT_BLUETOOTH_LE_LL_WITH_PHDR\n from scapy.packet import *\n from scapy.fields import *\n+from scapy.layers.dot11 import _dbmField\n from scapy.layers.ppi import PPI, addPPIType, PPIGenericFldHdr\n \n from scapy.contrib.ppi_geotag import XLEIntField, XLEShortField\nReview:"}
{"pred": "We should probably add a comment here to explain why we are requiring json.", "gold": "This ends up requiring the `json` gem, right? Is there any way we can do this to be implementation agnostic (e.g. to let me use `yajl-ruby` for performance reasons (or because my app already brings in a JSON library)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -48,6 +48,7 @@ module Blacklight::SolrHelper\n   extend ActiveSupport::Concern\n   include Blacklight::SearchFields\n   include Blacklight::Facet\n+  require 'json'\n \n   included do\n     if self.respond_to?(:helper_method)\nReview:"}
{"pred": "This loop should have a timeout to prevent infinite looping.", "gold": "This seems dangerous. What circumstances lead to the need for a retry? Can that happen more than once? I'm concerned that if we hit the pathological state, this could turn into a CPU spinner. I wonder if we could get the same benefit from just \"trying again\" and failing if it fails the second time.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -56,8 +56,13 @@ type byteReadCloser struct{ io.ReadCloser }\n // ReadByte implements the io.ByteReader interface.\n func (b byteReadCloser) ReadByte() (byte, error) {\n \tvar buf [1]byte\n-\t_, err := b.Read(buf[:])\n-\treturn buf[0], err\n+\tfor {\n+\t\tn, err := b.Read(buf[:])\n+\t\tif n == 0 && err == nil {\n+\t\t\tcontinue\n+\t\t}\n+\t\treturn buf[0], err\n+\t}\n }\n \n // A compressor builds a Riegeli compressed block.\nReview:"}
{"pred": "You should add a comment here explaining why you are setting this property.", "gold": "If there is a reference to other fields or methods, please do the initialization in the constructor.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -20,11 +20,18 @@\n package org.apache.iceberg;\n \n import java.util.List;\n+import java.util.Optional;\n import org.apache.iceberg.exceptions.ValidationException;\n import org.apache.iceberg.expressions.Expressions;\n+import org.apache.iceberg.util.PartitionSet;\n \n public class BaseReplacePartitions\n     extends MergingSnapshotProducer<ReplacePartitions> implements ReplacePartitions {\n+\n+  private final PartitionSet deletedPartitions = PartitionSet.create(super.getSpecsById());\n+  private Long startingSnapshotId = null;\n+  private boolean validateNoConflictingAppends = false;\n+\n   BaseReplacePartitions(String tableName, TableOperations ops) {\n     super(tableName, ops);\n     set(SnapshotSummary.REPLACE_PARTITIONS_PROP, \"true\");\nReview:"}
{"pred": "This looks good. It's nice to see the examples being imported in this way.", "gold": "These should be importing from `pill-container`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,13 @@\n+// This object is imported into the documentation site. An example for the documentation site should be part of the pull request for the component. The object key is the kabob case of the \"URL folder\". In the case of `http://localhost:8080/components/app-launcher/`, `app-launcher` is the `key`. The folder name is created by `components.component` value in `package.json`. The following uses webpack's raw-loader plugin to get \"text files\" that will be eval()'d by CodeMirror within the documentation site on page load.\n+\n+/* eslint-env node */\n+/* eslint-disable global-require */\n+\n+const siteStories = [\n+\trequire('raw-loader!@salesforce/design-system-react/components/pill/__examples__/base.jsx'),\n+\trequire('raw-loader!@salesforce/design-system-react/components/pill/__examples__/icons.jsx'),\n+\trequire('raw-loader!@salesforce/design-system-react/components/pill/__examples__/avatars.jsx'),\n+\trequire('raw-loader!@salesforce/design-system-react/components/pill/__examples__/bare.jsx'),\n+];\n+\n+module.exports = siteStories;\nReview:"}
{"pred": "This is a good change, it makes the code more readable and consistent with other parts of the codebase.", "gold": "Why this change? It will now only show on the bottom of the screen as white text, is it correct behaviour?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -2593,12 +2593,12 @@ void Game::playerRequestTrade(uint32_t playerId, const Position& pos, uint8_t st\n \n \tPlayer* tradePartner = getPlayerByID(tradePlayerId);\n \tif (!tradePartner || tradePartner == player) {\n-\t\tplayer->sendTextMessage(MESSAGE_INFO_DESCR, \"Sorry, not possible.\");\n+\t\tplayer->sendCancelMessage(RETURNVALUE_NOTPOSSIBLE);\n \t\treturn;\n \t}\n \n \tif (!Position::areInRange<2, 2, 0>(tradePartner->getPosition(), player->getPosition())) {\n-\t\tplayer->sendTextMessage(MESSAGE_INFO_DESCR, fmt::format(\"{:s} tells you to move closer.\", tradePartner->getName()));\n+\t\tplayer->sendCancelMessage(RETURNVALUE_DESTINATIONOUTOFREACH);\n \t\treturn;\n \t}\n \nReview:"}
{"pred": "Good change, this will prevent a nil exception if f is nil.", "gold": "Does this need to allocate a string or would a nil value (indicating no header) be a better?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -46,7 +46,7 @@ module Blacklight\n \n       fields = Array.wrap(view_config.title_field) + [configuration.document_model.unique_key]\n       f = fields.lazy.map { |field| field_config(field) }.detect { |field_config| field_presenter(field_config).any? }\n-      field_value(f, except_operations: [Rendering::HelperMethod])\n+      f ? field_value(f, except_operations: [Rendering::HelperMethod]) : \"\"\n     end\n \n     def display_type(base_name = nil, default: nil)\nReview:"}
{"pred": "This comment is unnecessary and should be removed.", "gold": "Nit: Past tense of `reset` is also `reset`.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -13,6 +13,7 @@ import { Fragment } from './create-element';\n export function Component(props, context) {\n \tthis.props = props;\n \tthis.context = context;\n+\t// this.constructor // When component is functional component, this is reseted to functional component\n \t// if (this.state==null) this.state = {};\n \t// this.state = {};\n \t// this._dirty = true;\nReview:"}
{"pred": "This should be documented in the docstring for the class.", "gold": "Shouldn't this use `'n'` instead?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -672,6 +672,12 @@ class Commands:\n         \"\"\" return wallet synchronization status \"\"\"\n         return self.wallet.is_up_to_date()\n \n+    @command('')\n+    def getfee(self):\n+        \"\"\"Return current optimal fee per kilobyte, according to\n+        config settings (static/dynamic)\"\"\"\n+        return self.config.fee_per_kb()\n+\n     @command('')\n     def help(self):\n         # for the python console\nReview:"}
{"pred": "This looks good. The new task types are more descriptive and should make debugging easier.", "gold": "revert back to 'TASK_TYPE_ACTIVITY_TIMEOUT'", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -451,10 +451,10 @@ func (t *timerQueueProcessorBase) getTimerTaskType(\n \tswitch taskType {\n \tcase enumsspb.TASK_TYPE_USER_TIMER:\n \t\treturn \"UserTimer\"\n-\tcase enumsspb.TASK_TYPE_ACTIVITY_TIMEOUT:\n-\t\treturn \"ActivityTimeout\"\n-\tcase enumsspb.TASK_TYPE_DECISION_TIMEOUT:\n-\t\treturn \"DecisionTimeout\"\n+\tcase enumsspb.TASK_TYPE_ACTIVITY_TASK_TIMEOUT:\n+\t\treturn \"ActivityTaskTimeout\"\n+\tcase enumsspb.TASK_TYPE_WORKFLOW_TASK_TIMEOUT:\n+\t\treturn \"WorkflowTaskTimeout\"\n \tcase enumsspb.TASK_TYPE_WORKFLOW_RUN_TIMEOUT:\n \t\treturn \"WorkflowRunTimeout\"\n \tcase enumsspb.TASK_TYPE_DELETE_HISTORY_EVENT:\nReview:"}
{"pred": "You should add a comment here to explain why you are adding these two new methods.", "gold": "Shouldn't we prefer passing a pointer by reference T*&, since these are C++ bindings?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -105,6 +105,9 @@ Engine::Engine(core::Engine *engine) : m_Engine(engine) {}\n     template void Engine::Get<T>(const std::string &, std::vector<T> &,        \\\n                                  const Mode);                                  \\\n                                                                                \\\n+    template void Engine::GetBlock<T>(Variable<T>, T **, const Mode);          \\\n+    template void Engine::GetBlock<T>(const std::string &, T **, const Mode);  \\\n+                                                                               \\\n     template std::map<size_t, std::vector<typename Variable<T>::Info>>         \\\n     Engine::AllStepsBlocksInfo(const Variable<T> variable) const;              \\\n                                                                                \\\nReview:"}
{"pred": "This looks good. The logic for processing ClusterGroups is clear and concise.", "gold": "nit: Personally I feel that it's cleaner to let `toAntreaPeerForCRD` to take `ingressRule` as a param instead of `ingressRule.From`. It can call `processRefCGs` inside the function and do the ipBlock/AG union within the function itself. It might not be worth the refactor though.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -146,9 +146,15 @@ func (n *NetworkPolicyController) processClusterNetworkPolicy(cnp *secv1alpha1.C\n \t\t\tappliedToGroupNamesForRule = append(appliedToGroupNamesForRule, atGroup)\n \t\t\tappliedToGroupNamesSet.Insert(atGroup)\n \t\t}\n+\t\tcgExists := len(ingressRule.SourceGroups) > 0\n+\t\tiFromPeers := n.toAntreaPeerForCRD(ingressRule.From, cnp, controlplane.DirectionIn, namedPortExists, cgExists)\n+\t\t// If ClusterGroups are set in Rule, then create AddressGroups corresponding to the CG and append to From Peers.\n+\t\tag, ipb := n.processRefCGs(ingressRule.SourceGroups)\n+\t\tiFromPeers.IPBlocks = append(iFromPeers.IPBlocks, ipb...)\n+\t\tiFromPeers.AddressGroups = append(iFromPeers.AddressGroups, ag...)\n \t\trules = append(rules, controlplane.NetworkPolicyRule{\n \t\t\tDirection:       controlplane.DirectionIn,\n-\t\t\tFrom:            *n.toAntreaPeerForCRD(ingressRule.From, cnp, controlplane.DirectionIn, namedPortExists),\n+\t\t\tFrom:            iFromPeers,\n \t\t\tServices:        services,\n \t\t\tAction:          ingressRule.Action,\n \t\t\tPriority:        int32(idx),\nReview:"}
{"pred": "Should this be a separate function? It's a bit odd to have a function that does two different things.", "gold": "Pending has been set only for SPC.. why? for other CRs as well, this need to be done.. right?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -98,6 +98,7 @@ func updateSPCVersion(name string) error {\n \t\treturn err\n \t}\n \tspcObj.VersionDetails.Desired = upgradeVersion\n+\tspcObj.VersionDetails.Status.State = apis.ReconcilePending\n \t_, err = client.Update(spcObj)\n \tif err != nil {\n \t\treturn err\nReview:"}
{"pred": "It looks like you are adding a new parameter here. Is this parameter being used anywhere else? If not, it might be better to add a comment explaining why it is being added.", "gold": "would use an empty string here as default and then check for emptiness in the twig template. I dont like mixing types @core23 what do you think?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -61,11 +61,13 @@ class VimeoProvider extends BaseVideoProvider\n         $box = $this->getBoxHelperProperties($media, $format, $options);\n \n         $params = array(\n-            'src'         => http_build_query($player_parameters),\n-            'id'          => $player_parameters['js_swf_id'],\n-            'frameborder' => isset($options['frameborder']) ? $options['frameborder'] : 0,\n-            'width'       => $box->getWidth(),\n-            'height'      => $box->getHeight(),\n+            'src'               => http_build_query($player_parameters),\n+            'id'                => $player_parameters['js_swf_id'],\n+            'frameborder'       => isset($options['frameborder']) ? $options['frameborder'] : 0,\n+            'width'             => $box->getWidth(),\n+            'height'            => $box->getHeight(),\n+            'class'             => isset($options['class']) ? $options['class'] : '',\n+            'allow_fullscreen'  => isset($options['allowfullscreen']) ? true : false,\n         );\n \n         return $params;\nReview:"}
{"pred": "Should we add a check to make sure the pageTokenName and nextPageTokenName are not null?", "gold": "How come we need case manipulation for the nextPageToken and not for pageToken?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -169,6 +169,8 @@ public class PhpSampleMethodToViewTransformer implements SampleMethodToViewTrans\n     builder.isResourceMap(fieldInfo.type().isMap());\n     builder.pageVarName(\n         symbolTable.getNewSymbol(namer.localVarName(Name.lowerCamel(fieldInfo.name()))));\n+    builder.pageTokenName(methodInfo.requestPageTokenName());\n+    builder.nextPageTokenName(Name.lowerCamel(methodInfo.responsePageTokenName()).toUpperCamel());\n     return builder.build();\n   }\n }\nReview:"}
{"pred": "It's good to see you've added a POST route for updating the profile. Have you considered adding a PUT route as well?", "gold": "why use these rather than regular named paths?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -2,7 +2,8 @@ C2::Application.routes.draw do\n   ActiveAdmin.routes(self)\n   root :to => 'home#index'\n   get '/error' => 'home#error'\n-  get '/me'    => 'home#me'\n+  get '/me'    => 'profile#show'\n+  post '/me'   => 'profile#update'\n   get '/feedback' => 'feedback#index'\n   get '/feedback/thanks' => 'feedback#thanks'\n   post '/feedback' => 'feedback#create'\nReview:"}
{"pred": "This should be documented in the README.md file.", "gold": "Hm, I don't think the extra flags are doing any harm here, but it does seem like `--help` is the only flag you could *actually* use with this command. We might eventually want to separate those out.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -61,6 +61,9 @@ module Bolt\n           { flags: OPTIONS[:global],\n             banner: GROUP_HELP }\n         end\n+      when 'guide'\n+        { flags: OPTIONS[:global] + %w[format],\n+          banner: GUIDE_HELP }\n       when 'plan'\n         case action\n         when 'convert'\nReview:"}
{"pred": "This is a great addition to the code, providing a clear explanation of the purpose of the script and the general flow of the code.", "gold": "We should make this a docstring, so that editors are able to pick it up.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,3 +1,18 @@\n+# This script is responsible to create candidate sets for all users. The generated candidate sets\n+# will be given as input to the recommender to assign ratings to the recordings in candidate sets.\n+# The general flow is as follows:\n+#\n+# Last 7 days listens are filtered from mapped_listens_df and is called the mapped_listens_subset_df.\n+# Top X artists are fetched for each user from the mapped_listens_subset_df. The top_artist_df is joined\n+# with recordings_df to get the dataframe of recordings belonging to the top artists. From this dataframe,\n+# recordings listened to by the users in the last 7 days are filtered so that the recommendations don't contain\n+# recordings that the user has listened to in the last week. The resultant dataframe is called the top_artists_candidate_set_df.\n+#\n+# Artists similar to top artists are fetched from the artist_relations_df and the similar_artist_candidate_set_df is generated\n+# in a manner similar to the generation of the top artist candidate set.\n+#\n+# The top artist and similar artist candidate set dataframes are saved to HDFS.\n+\n import os\n import sys\n import uuid\nReview:"}
{"pred": "You should consider adding a test to ensure that the event is not fired when the user is not authed.", "gold": "Put a comma after the last parameter of a multiline method call.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -14,5 +14,13 @@ feature \"User without a subscription views sample video\" do\n     expect(current_path).to eq(video_path(video))\n     expect(page).to have_css(\"h1\", text: video.name)\n     expect(page).not_to have_css(\".locked-message\")\n+    expect_authed_to_access_event_fired_for(video)\n+  end\n+\n+  def expect_authed_to_access_event_fired_for(video)\n+    expect(analytics).to have_tracked(\"Authed to Access\").with_properties(\n+      video_name: video.name,\n+      watchable_name: video.watchable_name,\n+    )\n   end\n end\nReview:"}
{"pred": "Removing the AppCacheMaxSize and SavePassword settings may have unintended consequences, make sure to test thoroughly.", "gold": "App cache size is now managed dynamically by the `WebView`. This statement has no effect in the new framework.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -150,10 +150,8 @@ public class SalesforceDroidGapActivity extends CordovaActivity {\n     \t\twebSettings.setDomStorageEnabled(true);\n     \t\tString cachePath = getApplicationContext().getCacheDir().getAbsolutePath();\n     \t\twebSettings.setAppCachePath(cachePath);\n-            webSettings.setAppCacheMaxSize(1024 * 1024 * 8);\n     \t\twebSettings.setAppCacheEnabled(true);\n     \t\twebSettings.setAllowFileAccess(true);\n-            webSettings.setSavePassword(false);\n     \t\twebSettings.setCacheMode(WebSettings.LOAD_DEFAULT);\n     \t\tEventsObservable.get().notifyEvent(EventType.GapWebViewCreateComplete, appView);\n       \t}\nReview:"}
{"pred": "This looks much cleaner and more efficient. Good job!", "gold": "VirtualNode has a `hasAttr` function, any reason why you're not using it?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,4 +1,6 @@\n-var nn = node.nodeName.toLowerCase();\n-return (\n-\tnode.hasAttribute('alt') && (nn === 'img' || nn === 'input' || nn === 'area')\n-);\n+const { nodeName } = virtualNode.props;\n+if (['img', 'input', 'area'].includes(nodeName) === false) {\n+\treturn false;\n+}\n+\n+return typeof virtualNode.attr('alt') === 'string';\nReview:"}
{"pred": "You should add an assertion here to make sure that init() is called only once per process.", "gold": "This now throws when running tests (maybe the move to java 11??). Do we want to keep it?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -69,7 +69,6 @@ public class HttpAccess {\n      * Initializes HttpAccess. Should be called from the application.\n      */\n     public static void init(Context app) {\n-        assert DEFAULT == null : \"HttpAccess.init should be called once per process\";\n         DEFAULT = new HttpAccess(app, null /* user agent will be calculated at request time */);\n     }\n \nReview:"}
{"pred": "This should be checked for a minimum length of 7, rather than just a length of 40.", "gold": "We can allow 7-char SHA, does not mean we want to show with 7-char in default, please change to `if len() > 10`, then cut.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -45,8 +45,8 @@ func EncodeSha1(str string) string {\n }\n \n func ShortSha(sha1 string) string {\n-\tif len(sha1) == 40 {\n-\t\treturn sha1[:10]\n+\tif len(sha1) > 7 {\n+\t\treturn sha1[:7]\n \t}\n \treturn sha1\n }\nReview:"}
{"pred": "This should be a separate string, as it's a different message.", "gold": "this one should also have quotes i guess :)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -66,8 +66,10 @@ en_US.strings = {\n   loading: 'Loading...',\n   logOut: 'Log out',\n   myDevice: 'My Device',\n+  noDuplicates: 'Cannot add the duplicate file %{fileName}, it already exists',\n   noFilesFound: 'You have no files or folders here',\n   noInternetConnection: 'No Internet connection',\n+  noNewAlreadyUploading: 'Cannot add new files: already uploading',\n   openFolderNamed: 'Open folder %{name}',\n   pause: 'Pause',\n   pauseUpload: 'Pause upload',\nReview:"}
{"pred": "You should add a comment explaining why you are pinning the variables here.", "gold": "Using the variable on range scope `mock` in function literal (from `scopelint`)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -106,12 +106,14 @@ func TestBuilderForYAML(t *testing.T) {\n \t\t\"Test 2\": {fakeInvalidK8sResource, \"\", true},\n \t}\n \tfor name, mock := range tests {\n+\t\tname := name // pin it\n+\t\tmock := mock // pin it\n \t\tt.Run(name, func(t *testing.T) {\n \t\t\tb := BuilderForYaml(mock.resourceYAML)\n \t\t\tif mock.expectError && len(b.errs) == 0 {\n \t\t\t\tt.Fatalf(\"Test %s failed, expected err but got 0\", name)\n-\t\t\t} else if b.unstruct.object.GetName() != mock.expectedName {\n-\t\t\t\tt.Fatalf(\"Test %s failed, expected %v but got %v\", name, mock.expectedName, b.unstruct.object.GetName())\n+\t\t\t} else if b.unstruct.Object.GetName() != mock.expectedName {\n+\t\t\t\tt.Fatalf(\"Test %s failed, expected %v but got %v\", name, mock.expectedName, b.unstruct.Object.GetName())\n \t\t\t}\n \t\t})\n \t}\nReview:"}
{"pred": "This looks correct, but it might be worth adding a comment to explain why the logic is reversed here.", "gold": "does this result in a 200 when the dataset is still inprogress/publishing not yet finalized? Seems like 202 is the right code for that (as it was) and the test should be watching for a 202?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1020,7 +1020,7 @@ public class Datasets extends AbstractApiBean {\n             PublishDatasetResult res = execCommand(new PublishDatasetCommand(ds,\n                         createDataverseRequest(user),\n                     isMinor));\n-            return res.isCompleted() ? ok(json(res.getDataset())) : accepted(json(res.getDataset()));\n+            return res.isWorkflow() ? accepted(json(res.getDataset())) : ok(json(res.getDataset()));\n             }\n         } catch (WrappedResponse ex) {\n             return ex.getResponse();\nReview:"}
{"pred": "It would be good to add a comment here to explain what the ORDER_PATH constant is used for.", "gold": "Previously you could only order by the field you were searching by. But for full-text search, you can search across all indexed fields, and it didn't make sense not to have a sorting. For backward compatibility, the javascript code uses indexPath as the orderPath when no orderPath is provided.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -65,6 +65,7 @@ public class SmartStorePlugin extends ForcePlugin {\n \tpublic static final String LIKE_KEY = \"likeKey\";\n \tpublic static final String MATCH_KEY = \"matchKey\";\n \tpublic static final String SMART_SQL = \"smartSql\";\n+\tpublic static final String ORDER_PATH = \"orderPath\";\n \tpublic static final String ORDER = \"order\";\n \tpublic static final String PAGE_SIZE = \"pageSize\";\n \tpublic static final String QUERY_TYPE = \"queryType\";\nReview:"}
{"pred": "Is the parent parameter necessary? It looks like it is not used.", "gold": "VIM didn't like your whitespace.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -38,7 +38,7 @@ export function flushMounts() {\n  * Apply differences in a given vnode (and it's deep children) to a real DOM Node.\n  * @param {import('../dom').PreactElement} dom A DOM node to mutate into the shape of a `vnode`\n  * @param {import('../vnode').VNode} vnode A VNode (with descendants forming a tree) representing\n- *  the desired DOM structure\n+ *\tthe desired DOM structure\n  * @param {object} context The current context\n  * @param {boolean} mountAll Whether or not to immediately mount all components\n  * @param {Element} parent ?\nReview:"}
{"pred": "This looks like a good change, removing unnecessary usings.", "gold": "Are you sure the namespace should change?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -3,14 +3,7 @@\n // This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.\n // </copyright>\n \n-using System;\n-using System.Collections.Generic;\n-using System.IO;\n-using System.Linq;\n-using System.Reflection;\n-using System.Threading;\n-using System.Threading.Tasks;\n-using Datadog.Trace.TestHelpers;\n+using Datadog.Trace.ClrProfiler;\n using Xunit;\n using Xunit.Abstractions;\n using Xunit.Sdk;\nReview:"}
{"pred": "Should the return type of Startup() be void?", "gold": "@martijn00 I'm not sure why we're keeping the object parameter and return type since this can be done by using MvxApplication<THint> with THint set to object", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -12,7 +12,7 @@ namespace MvvmCross.ViewModels\n \n         void Initialize();\n \n-        void Startup(object hint);\n+        object Startup(object hint);\n \n         void Reset();\n     }\nReview:"}
{"pred": "We should add a comment here to explain why we are adding this static field.", "gold": "why do we create a time type here?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -31,6 +31,7 @@ import com.pingcap.tikv.meta.TiColumnInfo.InternalTypeHolder;\n // https://dev.mysql.com/doc/refman/8.0/en/time.html\n \n public class TimeType extends DataType {\n+  public static final TimeType TIME = new TimeType(MySQLType.TypeDuration);\n   public static final MySQLType[] subTypes = new MySQLType[] {MySQLType.TypeDuration};\n   protected static final long NANOSECOND = 1;\n   protected static final long MICROSECOND = 1000 * NANOSECOND;\nReview:"}
{"pred": "This change looks good. It adds the css file for the listview component.", "gold": "Does this style actually need to get loaded in all of these components?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,4 +1,4 @@\n-define([\"jQuery\", \"datetime\", \"loading\", \"libraryMenu\", \"listViewStyle\", \"paper-icon-button-light\"], function ($, datetime, loading, libraryMenu) {\n+define([\"jQuery\", \"datetime\", \"loading\", \"libraryMenu\", \"css!components/listview/listview\", \"paper-icon-button-light\"], function ($, datetime, loading, libraryMenu) {\n     \"use strict\";\n \n     function populateRatings(allParentalRatings, page) {\nReview:"}
{"pred": "It looks like you are adding some new imports here. Is this necessary? Can you provide more context on why these imports are needed?", "gold": "import but not used so you did not resolve compile warnings?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -30,6 +30,9 @@ import io.servicecomb.foundation.ssl.SSLCustom;\n import io.servicecomb.foundation.ssl.SSLOption;\n import io.servicecomb.foundation.ssl.SSLOptionFactory;\n import io.servicecomb.foundation.vertx.VertxTLSBuilder;\n+import io.servicecomb.transport.rest.vertx.accesslog.AccessLogConfiguration;\n+import io.servicecomb.transport.rest.vertx.accesslog.impl.AccessLogHandlerImpl;\n+import io.servicecomb.transport.rest.vertx.accesslog.parser.impl.DefaultAccessLogPatternParser;\n import io.vertx.core.AbstractVerticle;\n import io.vertx.core.Context;\n import io.vertx.core.Future;\nReview:"}
{"pred": "It looks like you are trying to reduce the complexity of the code here. However, it might be better to keep the original formula as it is more readable and easier to understand.", "gold": "This is so much more concise and beautiful than the previous formula  ", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -865,15 +865,10 @@ BlockType_t Creature::blockHit(Creature* attacker, CombatType_t combatType, int3\n \t\t}\n \n \t\tif (checkArmor) {\n-\t\t\tint32_t armorValue = getArmor();\n-\t\t\tif (armorValue > 1) {\n-\t\t\t\tdouble armorFormula = armorValue * 0.475;\n-\t\t\t\tint32_t armorReduction = static_cast<int32_t>(std::ceil(armorFormula));\n-\t\t\t\tdamage -= uniform_random(\n-\t\t\t\t\tarmorReduction,\n-\t\t\t\t\tarmorReduction + static_cast<int32_t>(std::floor(armorFormula))\n-\t\t\t\t);\n-\t\t\t} else if (armorValue == 1) {\n+\t\t\tint32_t armor = getArmor();\n+\t\t\tif (armor > 3) {\n+\t\t\t\tdamage -= uniform_random(armor / 2, armor - (armor % 2 + 1));\n+\t\t\t} else if (armor > 0) {\n \t\t\t\t--damage;\n \t\t\t}\n \nReview:"}
{"pred": "You should add a comment to explain why you are adding the Logger and TestName Rule.", "gold": "Is there any reason not to have the `static` modifier for the logger? _(that would be in keeping with the reference being uppercase)_", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -41,9 +41,19 @@ import org.hyperledger.besu.tests.acceptance.dsl.transaction.perm.PermissioningT\n import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivacyTransactions;\n import org.hyperledger.besu.tests.acceptance.dsl.transaction.web3.Web3Transactions;\n \n+import java.io.File;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.ThreadContext;\n import org.junit.After;\n+import org.junit.Rule;\n+import org.junit.rules.TestName;\n+import org.junit.rules.TestWatcher;\n+import org.junit.runner.Description;\n \n public class AcceptanceTestBase {\n+  protected final Logger LOG = LogManager.getLogger();\n \n   protected final Accounts accounts;\n   protected final AccountTransactions accountTransactions;\nReview:"}
{"pred": "It looks like you have added some new fields and methods to the Connection interface. Are these necessary and do they have any tests associated with them?", "gold": "It's not about session creation config. It's about passing consumer config parameters to underlying transport - nothing to do with session itself", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -27,11 +27,18 @@ import (\n // DialogCreator creates new dialog between consumer and provider, using given contact information\n type DialogCreator func(consumerID, providerID identity.Identity, contact market.Contact) (communication.Dialog, error)\n \n+// SessionCreationConfig are the parameters that get sent to the provider\n+type SessionCreationConfig interface{}\n+\n+// ConsumerConfig are the parameters used for the initiation of connection\n+type ConsumerConfig interface{}\n+\n // Connection represents a connection\n type Connection interface {\n-\tStart() error\n+\tStart(ConnectOptions) error\n \tWait() error\n \tStop()\n+\tGetSessionConfig() (SessionCreationConfig, error)\n }\n \n // StateChannel is the channel we receive state change events on\nReview:"}
{"pred": "It looks like the overrideEnableDebug parameter has been added here. Is this necessary?", "gold": "Why is there an \"enable\" in the param name? Couldn't it just be `overrideDebug`? Here are everywhere else.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -97,7 +97,7 @@ type ConfigLocal struct {\n \tkbpki            KBPKI\n \trenamer          ConflictRenamer\n \tregistry         metrics.Registry\n-\tloggerFn         func(prefix string) logger.Logger\n+\tloggerFn         func(prefix string, overrideEnableDebug bool) logger.Logger\n \tnoBGFlush        bool // logic opposite so the default value is the common setting\n \trwpWaitTime      time.Duration\n \tdiskLimiter      DiskLimiter\nReview:"}
{"pred": "You should add a comment here explaining why you are adding the index action.", "gold": "`published.recently_published_first` reads a little oddly to me. Is this the same thing as `Video.published.ordered`?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,4 +1,8 @@\n class VideosController < ApplicationController\n+  def index\n+    @videos = Video.published.recently_published_first\n+  end\n+\n   def show\n     @video = Video.find(params[:id])\n     @offering = Offering.new(@video.watchable, current_user)\nReview:"}
{"pred": "We should probably add a log message here to indicate that the content could not be parsed.", "gold": "Encountered this because I had a stray comma. Figured I'd tweak it a bit.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -20,7 +20,11 @@ var createIntegrationPreprocessor = function(logger) {\n       // and add the test data to it\n       var htmlpath = file.originalPath.replace(extRegex, '.html');\n       var html = fs.readFileSync(htmlpath, 'utf-8');\n-      var test = JSON.parse(content);\n+      try {\n+        var test = JSON.parse(content);\n+      } catch (e) {\n+        throw new Error('Unable to parse content of ' + file.originalPath)\n+      }\n       test.content = html;\n \n       var result = template.replace('{}; /*tests*/', JSON.stringify(test));\nReview:"}
{"pred": "This should be moved to a separate test case, as it is not related to the current test.", "gold": "qq: Should this include the iptables6-save sim. to the inverse checks above?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -306,6 +306,13 @@ var _ = infrastructure.DatastoreDescribe(\"service loop prevention; with 2 nodes\"\n \t\t\tcfg.Spec.ServiceLoopPrevention = \"Disabled\"\n \t\t})\n \n+\t\t// Expect to see empty cali-cidr-block chains.  (Allowing time for a Felix\n+\t\t// restart.)  This ensures that the cali-cidr-block chain has been cleared\n+\t\t// before we try a test ping.\n+\t\tfor _, felix := range felixes {\n+\t\t\tEventually(getCIDRBlockRules(felix, \"iptables-save\"), \"8s\", \"0.5s\").Should(BeEmpty())\n+\t\t}\n+\n \t\tBy(\"test that we DO get a routing loop\")\n \t\t// (In order to test that the tryRoutingLoop setup is genuine.)\n \t\ttryRoutingLoop(true)\nReview:"}
{"pred": "This looks like it could be simplified by using a type switch to check for the BooleanDefault types, rather than marshalling to JSON.", "gold": "im open to explicitly checking NotSet value here but json logic already handles it so kept it this way.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -195,8 +195,16 @@ func (cfg *Config) Merge(rhs Config) *Config {\n \n \tfor i := 0; i < left.NumField(); i++ {\n \t\tleftField := left.Field(i)\n-\t\tif utils.ZeroOrNil(leftField.Interface()) {\n-\t\t\tleftField.Set(reflect.ValueOf(right.Field(i).Interface()))\n+\t\tswitch leftField.Interface().(type) {\n+\t\tcase BooleanDefaultFalse, BooleanDefaultTrue:\n+\t\t\tstr, _ := json.Marshal(reflect.ValueOf(leftField.Interface()).Interface())\n+\t\t\tif string(str) == \"null\" {\n+\t\t\t\tleftField.Set(reflect.ValueOf(right.Field(i).Interface()))\n+\t\t\t}\n+\t\tdefault:\n+\t\t\tif utils.ZeroOrNil(leftField.Interface()) {\n+\t\t\t\tleftField.Set(reflect.ValueOf(right.Field(i).Interface()))\n+\t\t\t}\n \t\t}\n \t}\n \nReview:"}
{"pred": "Is including Lua.h necessary here?", "gold": "The naming of the include file appears to be unlucky.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -27,6 +27,7 @@ extern \"C\" {\n #include \"ScriptingEnvironment.h\"\n #include \"../typedefs.h\"\n #include \"../Util/OpenMPWrapper.h\"\n+#include \"../Util/Lua.h\"\n \n ScriptingEnvironment::ScriptingEnvironment() {}\n ScriptingEnvironment::ScriptingEnvironment(const char * fileName) {\nReview:"}
{"pred": "This looks good, but it would be nice to have a comment explaining why we are updating the legend_opts here.", "gold": "Bit worried about this. At minimum you should make a copy of the dict here to avoid modifying a user supplied variable.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1018,7 +1018,8 @@ class BarPlot(BarsMixin, ColorbarPlot, LegendPlot):\n         if self.show_legend and any(len(l) for l in labels) and (sdim or not self.multi_level):\n             leg_spec = self.legend_specs[self.legend_position]\n             if self.legend_cols: leg_spec['ncol'] = self.legend_cols\n-            axis.legend(title=title, **leg_spec)\n+            self.legend_opts.update(**leg_spec)\n+            axis.legend(title=title, **self.legend_opts)\n \n         return bars, xticks, ax_dims\n \nReview:"}
{"pred": "Good to add a comment here to explain why we are pruning the launch template versions.", "gold": "Is it better to create one before pruning? In case creation fails we don't want to delete the previous one. We create a new one, it is tagged as latest, so the previous can be deleted. `CreateLaunchTemplateVersion` returns the version created, how about directly trying to delete the previous version? Assuming the numbering is strictly increasing.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -455,6 +455,11 @@ func (r *AWSMachinePoolReconciler) reconcileLaunchTemplate(machinePoolScope *sco\n \t// userdata, OR we've discovered a new AMI ID.\n \tif needsUpdate || tagsChanged || *imageID != *launchTemplate.AMI.ID || launchTemplateUserDataHash != bootstrapDataHash {\n \t\tmachinePoolScope.Info(\"creating new version for launch template\", \"existing\", launchTemplate, \"incoming\", machinePoolScope.AWSMachinePool.Spec.AWSLaunchTemplate)\n+\t\t// There is a limit to the number of Launch Template Versions.\n+\t\t// We ensure that the number of versions does not grow without bound by following a simple rule: For each version we create, we delete one old version.\n+\t\tif err := ec2svc.PruneLaunchTemplateVersions(machinePoolScope.AWSMachinePool.Status.LaunchTemplateID); err != nil {\n+\t\t\treturn err\n+\t\t}\n \t\tif err := ec2svc.CreateLaunchTemplateVersion(machinePoolScope, imageID, bootstrapData); err != nil {\n \t\t\treturn err\n \t\t}\nReview:"}
{"pred": "This is a bit of a hack, and should be refactored to use a generic container.", "gold": "Do we require the specific implementation information here?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -27,13 +27,13 @@ class ContainerInformationTab extends Tab {\n \n     private final WinePrefixContainerDTO container;\n \n-    private Consumer<ContainerDTO> onDeletePrefix;\n+    private Consumer<ContainerDTO> onDeleteContainer;\n     private Consumer<ContainerDTO> onOpenFileBrowser;\n \n-    ContainerInformationTab(WinePrefixContainerDTO container) {\n+    ContainerInformationTab(ContainerDTO container) {\n         super(tr(\"Information\"));\n \n-        this.container = container;\n+        this.container = (WinePrefixContainerDTO) container; // TODO: use generic container\n \n         this.setClosable(false);\n \nReview:"}
{"pred": "This looks good. It is well-structured and easy to read. The validations and methods are clearly defined and the code is well-documented.", "gold": "How about `exists?(['domain ~* ?', domain.downcase])` ?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,13 @@\n+class DomainBlacklist < ActiveRecord::Base\n+  validates :domain, uniqueness: { case_sensitive: false }\n+\n+  class << self\n+    def email_banned?(email_address)\n+      contains?(email_address.split('@').last)\n+    end\n+\n+    def contains?(domain)\n+      exists?(['lower(domain) LIKE ?', \"%#{domain.downcase}%\"])\n+    end\n+  end\n+end\nReview:"}
{"pred": "It might be better to have a separate flag for background context timeout, rather than using the same flag as for long poll context timeout.", "gold": "Is this getting used in other places? Can we switch all the places to use the new API you added?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -729,6 +729,15 @@ func newContextForLongPoll(c *cli.Context) (context.Context, context.CancelFunc)\n \treturn newContextWithTimeout(c, defaultContextTimeoutForLongPoll)\n }\n \n+func newContextForBackground(c *cli.Context) (context.Context, context.CancelFunc) {\n+\tif c.GlobalIsSet(FlagContextTimeout) {\n+\t\ttimeout := time.Duration(c.GlobalInt(FlagContextTimeout)) * time.Second\n+\t\treturn rpc.NewContextWithTimeoutAndCLIHeaders(timeout)\n+\t}\n+\n+\treturn rpc.NewContextWithCLIHeaders()\n+}\n+\n func newContextWithTimeout(c *cli.Context, timeout time.Duration) (context.Context, context.CancelFunc) {\n \tif c.GlobalIsSet(FlagContextTimeout) {\n \t\ttimeout = time.Duration(c.GlobalInt(FlagContextTimeout)) * time.Second\nReview:"}
{"pred": "This code has been removed, so it should be commented out rather than deleted.", "gold": "This need to be checked with linux. AFAIK, we have this file in our bin directory that is a link to the system file.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -483,17 +483,6 @@ int HTTP_OP::libcurl_exec(\n     curl_easy_setopt(curlEasy, CURLOPT_SSL_VERIFYPEER, 1L);\n     //curl_easy_setopt(curlEasy, CURLOPT_SSL_VERIFYPEER, FALSE);\n \n-    // if the above is nonzero, you need the following:\n-    //\n-#ifndef _WIN32\n-    if (boinc_file_exists(CA_BUNDLE_FILENAME)) {\n-        // call this only if a local copy of ca-bundle.crt exists;\n-        // otherwise, let's hope that it exists in the default place\n-        //\n-        curl_easy_setopt(curlEasy, CURLOPT_CAINFO, CA_BUNDLE_FILENAME);\n-    }\n-#endif\n-\n     // set the user agent as this boinc client & version\n     //\n     curl_easy_setopt(curlEasy, CURLOPT_USERAGENT, g_user_agent_string);\nReview:"}
{"pred": "You should add a comment here to explain why you are using let instead of var.", "gold": "Shouldn't we import `default`? I can't get here to test.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,12 +1,12 @@\n-define(['browser', 'dom', 'layoutManager', 'css!components/viewManager/viewContainer'], function (browser, dom, layoutManager) {\n-    'use strict';\n+import 'css!components/viewManager/viewContainer';\n+/* eslint-disable indent */\n \n     function setControllerClass(view, options) {\n         if (options.controllerFactory) {\n             return Promise.resolve();\n         }\n \n-        var controllerUrl = view.getAttribute('data-controller');\n+        let controllerUrl = view.getAttribute('data-controller');\n \n         if (controllerUrl) {\n             if (controllerUrl.indexOf('__plugin/') === 0) {\nReview:"}
{"pred": "Good change, this was probably a typo.", "gold": "!!!!!!!!!!!!! @graingert, does this mean that tests haven't been running???", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -99,7 +99,7 @@ class UNIXServerClient(object):\n         self.unix_socket = os.path.join(self.temp_dir, 'luigid.sock')\n \n     def run_server(self):\n-        luigi.server.run(unix_socket=unix_socket)\n+        luigi.server.run(unix_socket=self.unix_socket)\n \n     def scheduler(self):\n         url = ParseResult(\nReview:"}
{"pred": "This looks like it could be simplified by using a switch statement.", "gold": "I've already tried the null-coalescing operator here and got a strange error, so did this the old-fashioned way.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -484,11 +484,11 @@ namespace Microsoft.DotNet.Execute\n         public string FormatSetting(string option, string value, string type, string toolName)\n         {\n             string commandOption = null;\n-            if (type.Equals(\"passThrough\"))\n+            if (type != null && type.Equals(\"passThrough\"))\n             {\n                 commandOption = string.Format(\" {0}\", toolName.Equals(\"console\") ? \"\" : value);\n             }\n-            else if (type.Equals(RunToolSettingValueTypeReservedKeyword)) { /* do nothing */ }\n+            else if (type != null && type.Equals(RunToolSettingValueTypeReservedKeyword)) { /* do nothing */ }\n             else\n             {\n                 Tool toolFormat;\nReview:"}
{"pred": "This looks good, but it might be worth adding a comment explaining the logic here.", "gold": "This doesn't follow our spacing convention. It's also a little hard to read. Can you reformat?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,4 +1,11 @@\n var parent = axe.commons.dom.getComposedParent(node);\n-return (['UL', 'OL'].includes(parent.nodeName.toUpperCase()) ||\n-    (parent.getAttribute('role') || '').toLowerCase() === 'list');\n-  \n+\n+var parentRole = (parent.getAttribute('role') || '').toLowerCase();\n+\n+var isListRole = parentRole === 'list';\n+\n+return (\n+\t(['UL', 'OL'].includes(parent.nodeName.toUpperCase()) &&\n+\t\t(!parentRole || isListRole)) ||\n+\tisListRole\n+);\nReview:"}
{"pred": "This looks good. The imports are updated to the correct package.", "gold": "The deploy should come before template? EDIT: I see that in other files, we put a separate line and put deploy at the end. What is the reason for this?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -4,10 +4,10 @@\n package stack\n \n import (\n-\t\"github.com/aws/amazon-ecs-cli-v2/internal/pkg/template\"\n \t\"github.com/aws/aws-sdk-go/service/cloudformation\"\n+\t\"github.com/aws/copilot-cli/internal/pkg/template\"\n \n-\t\"github.com/aws/amazon-ecs-cli-v2/internal/pkg/deploy\"\n+\t\"github.com/aws/copilot-cli/internal/pkg/deploy\"\n )\n \n const pipelineCfnTemplatePath = \"cicd/pipeline_cfn.yml\"\nReview:"}
{"pred": "This looks like a good change, it's more explicit and easier to read.", "gold": "Consider making a constant (e.g. `MetricStreamConfiguration.Drop`).", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -60,7 +60,7 @@ public class Program\n             // turn off the above default. i.e any\n             // instrument which does not match any views\n             // gets dropped.\n-            // .AddView(instrumentName: \"*\", new DropAggregationConfig())\n+            // .AddView(instrumentName: \"*\", new MetricStreamConfiguration() { Aggregation = Aggregation.Drop })\n             .AddConsoleExporter()\n             .Build();\n \nReview:"}
{"pred": "This should be checked for compatibility with other versions of Python.", "gold": "same question: why not just switch this to range too?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -18,6 +18,7 @@ try:\n except ImportError:\n   from rdkit.piddle import piddle\n import ClusterUtils\n+from rdkit.six.moves import xrange\n \n import numpy\n \nReview:"}
{"pred": "This is a good change, it makes the code more readable and understandable.", "gold": "@chuckatkins most places used an empty string for \"no type\", but a few used `\"unknown\"`. I've converted both cases to `Type::None`. Do you know why there was a distinction before?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -111,10 +111,10 @@ Variable IO::InquireVariable(const std::string &name)\n     helper::CheckForNullptr(m_IO, \"for variable \" + name +\n                                       \", in call to IO::InquireVariable\");\n \n-    const std::string type(m_IO->InquireVariableType(name));\n+    const Type type(m_IO->InquireVariableType(name));\n     core::VariableBase *variable = nullptr;\n \n-    if (type == \"unknown\")\n+    if (type == Type::None)\n     {\n     }\n #define declare_template_instantiation(T)                                      \\\nReview:"}
{"pred": "Should we check if sizes_in_byte is greater than num_data_? If so, we should use num_data_ instead of sizes_in_byte.", "gold": "should we assert for the type for `FeatureGroupData` ? I think it should be 1-Byte type.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -408,7 +408,7 @@ void CUDATreeLearner::copyDenseFeature() {\n     // looking for dword_features_ non-sparse feature-groups\n     if (!train_data_->IsMultiGroup(i)) {\n       dense_feature_group_map_.push_back(i);\n-      auto sizes_in_byte = train_data_->FeatureGroupSizesInByte(i);\n+      auto sizes_in_byte = std::min(train_data_->FeatureGroupSizesInByte(i), static_cast<size_t>(num_data_));\n       void* tmp_data = train_data_->FeatureGroupData(i);\n       Log::Debug(\"Started copying dense features from CPU to GPU - 2\");\n       CUDASUCCESS_OR_FATAL(cudaMemcpyAsync(&device_features[copied_feature * num_data_], tmp_data, sizes_in_byte, cudaMemcpyHostToDevice, stream_[device_id]));\nReview:"}
{"pred": "Is this intentional? It looks like the np.flipud() was removed.", "gold": "As long as you are sure this is definitely correct now... :-)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -51,10 +51,10 @@ class TestCube(ComparisonTestCase):\n     def test_dimension_values_vdim(self):\n         cube = Dataset(self.cube, kdims=['longitude', 'latitude'])\n         self.assertEqual(cube.dimension_values('unknown', flat=False),\n-                         np.flipud(np.array([[ 0,  4,  8],\n-                                             [ 1,  5,  9],\n-                                             [ 2,  6, 10],\n-                                             [ 3,  7, 11]], dtype=np.int32).T))\n+                         np.array([[ 0,  4,  8],\n+                                   [ 1,  5,  9],\n+                                   [ 2,  6, 10],\n+                                   [ 3,  7, 11]], dtype=np.int32).T)\n \n     def test_range_kdim(self):\n         cube = Dataset(self.cube, kdims=['longitude', 'latitude'])\nReview:"}
{"pred": "The change looks good, but it would be better to add a comment explaining why the change was made.", "gold": "... so that all action buttons have the same height :-)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -166,7 +166,7 @@ public class ActionsFragment extends SubscriberFragment implements View.OnClickL\n                             tempBasal.setVisibility(View.GONE);\n                             tempBasalCancel.setVisibility(View.VISIBLE);\n                             final TemporaryBasal activeTemp = MainApp.getConfigBuilder().getTempBasalFromHistory(System.currentTimeMillis());\n-                            tempBasalCancel.setText(MainApp.instance().getString(R.string.cancel) + \"\\n\" + activeTemp.toStringShort());\n+                            tempBasalCancel.setText(MainApp.instance().getString(R.string.cancel) + \" \" + activeTemp.toStringShort());\n                         } else {\n                             tempBasal.setVisibility(View.VISIBLE);\n                             tempBasalCancel.setVisibility(View.GONE);\nReview:"}
{"pred": "It looks like you are adding a lot of new includes here. Are these all necessary?", "gold": "Use correct, alpha sorted, include order. Correct order means: 1. Header corresponding to this source (i.e. `\"LatencyTestPublisher.hpp\"`) 2. C system headers 3. C++ system headers 4. Alpha-sorted external libraries headers 5. Alpha-sorted public headers from this project 6. Alpha-sorted private headers", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -21,6 +21,12 @@\n #include <fastdds/dds/log/Log.hpp>\n #include <fastdds/dds/log/Colors.hpp>\n #include <fastrtps/xmlparser/XMLProfileManager.h>\n+#include <fastdds/dds/domain/DomainParticipantFactory.hpp>\n+#include <fastdds/dds/domain/DomainParticipant.hpp>\n+#include <fastdds/dds/publisher/DataWriterListener.hpp>\n+#include <fastdds/dds/subscriber/qos/DataReaderQos.hpp>\n+#include <fastdds/dds/subscriber/DataReader.hpp>\n+#include <fastdds/dds/publisher/DataWriter.hpp>\n \n #include <numeric>\n #include <cmath>\nReview:"}
{"pred": "This is a good addition to the codebase as it allows for more flexibility in configuring outbound requests.", "gold": "I hate this name, open to suggestions.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -58,6 +58,10 @@ type OutboundOption func(*Outbound)\n \n func (OutboundOption) httpOption() {}\n \n+// RequestFactory allows clients to configure their outgoing http requests. If not set,\n+// a default implemenation will use the HostPort to make a POST request with the request body.\n+type RequestFactory func(*transport.Request) (*http.Request, error)\n+\n // URLTemplate specifies the URL this outbound makes requests to. For\n // peer.Chooser-based outbounds, the peer (host:port) spection of the URL may\n // vary from call to call but the rest will remain unchanged. For single-peer\nReview:"}
{"pred": "It would be nice to have a comment here explaining why we are using the StoreTargetMetadata() function instead of the Store() function.", "gold": "Does this log line work? We need Warningf or just warning without the format string.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -199,7 +199,13 @@ func (c *Client) locallyCacheResults(target *core.BuildTarget, digest *pb.Digest\n \t}\n \tdata, _ := proto.Marshal(ar)\n \tmetadata.RemoteAction = data\n-\tc.state.Cache.Store(target, c.localCacheKey(digest), nil)\n+\t// TODO(jpoole): Similar to retrieveTargetMetadataFromCache, it would be cleaner if we could store\n+\t//               into the cache from an arbitrary reader.\n+\tif err := build.StoreTargetMetadata(target, metadata); err != nil {\n+\t\tlog.Warning(\"%s\", err)\n+\t\treturn\n+\t}\n+\tc.state.Cache.Store(target, c.localCacheKey(digest), []string{target.TargetBuildMetadataFileName()})\n }\n \n // retrieveLocalResults retrieves locally cached results for a target if possible.\nReview:"}
{"pred": "It looks like you are adding a new parameter to the constructor. Is this parameter required or optional? If it is optional, have you added a default value?", "gold": "The pull controller would need similar updates.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -62,6 +62,7 @@ func New(checkpointer export.Checkpointer, exporter export.Exporter, opts ...Opt\n \timpl := sdk.NewAccumulator(\n \t\tcheckpointer,\n \t\tsdk.WithResource(c.Resource),\n+\t\tsdk.WithMetricsProcessors(c.MetricsProcessors...),\n \t)\n \treturn &Controller{\n \t\tprovider:     registry.NewMeterProvider(impl),\nReview:"}
{"pred": "Updated copyright year.", "gold": "ignore this.. just didn't want to litter with a commit update to satisfy license plugin", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,5 +1,5 @@\n /**\n- * Copyright 2015-2017 The OpenZipkin Authors\n+ * Copyright 2015-2018 The OpenZipkin Authors\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n  * in compliance with the License. You may obtain a copy of the License at\nReview:"}
{"pred": "This looks like it should be using the `fetch` command instead of `curl` for better reliability.", "gold": "Is this definition needed since it doesn't look like it's being used anywhere?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -807,8 +807,8 @@ module Beaker\n         end\n \n         if host['is_cygwin'].nil? or host['is_cygwin'] == true\n-          dest = \"/cygdrive/c/Windows/Temp/#{host['dist']}.msi\"\n-          on host, \"curl -O #{dest} #{link}\"\n+          dest = \"#{host['dist']}.msi\"\n+          on host, \"curl -O #{link}\"\n \n           #Because the msi installer doesn't add Puppet to the environment path\n           #Add both potential paths for simplicity\nReview:"}
{"pred": "This looks good, but it might be worth adding a comment to explain why we are adding this default proc.", "gold": "Can this condition be reworded using `if` please?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -35,6 +35,11 @@ module Mongoid\n           class << self\n             delegate :discriminator_key, to: ::Mongoid\n           end\n+        end \n+\n+        unless fields.has_key?(self.discriminator_key) || descendants.length == 0\n+          default_proc = lambda { self.class.name }\n+          field(self.discriminator_key, default: default_proc, type: String)\n         end\n       end\n     end\nReview:"}
{"pred": "You can simplify this by using the `inputs->hasData()` check in the first `if` statement.", "gold": "after ||, no need inputs != nullptr", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -135,13 +135,15 @@ Status FetchEdgesExecutor::setupEdgeKeysFromRef() {\n     const InterimResult *inputs;\n     if (sentence_->ref()->isInputExpr()) {\n         inputs = inputs_.get();\n-        if (inputs == nullptr) {\n+        if (inputs == nullptr\n+                || (inputs != nullptr && !inputs->hasData())) {\n             // we have empty imputs from pipe.\n             return Status::OK();\n         }\n     } else {\n         inputs = ectx()->variableHolder()->get(varname_);\n-        if (inputs == nullptr) {\n+        if (inputs == nullptr\n+                || (inputs != nullptr && !inputs->hasData())) {\n             return Status::Error(\"Variable `%s' not defined\", varname_.c_str());\n         }\n     }\nReview:"}
{"pred": "This change looks good. It adds a new struct to represent the configurations for an app in a pipeline stage.", "gold": "Is it just preference or on purpose that using slice of structs instead of slice of pointers?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -159,7 +159,14 @@ func (s *Source) Owner() (string, error) {\n // is deloying to and the containerized applications that will be deployed.\n type PipelineStage struct {\n \t*AssociatedEnvironment\n-\tLocalApplications []string\n+\tLocalApplications []AppInStage\n+}\n+\n+// AppInStage represents configurations for an app in a pipeline stage\n+type AppInStage struct {\n+\tName string\n+\t// the path to the integration test buildspec for this action\n+\tIntegTestBuildspecPath string\n }\n \n // AppTemplatePath returns the full path to the application CFN template\nReview:"}
{"pred": "This looks like it should be a shallow copy of the oldVNode._dom, rather than just setting it to the same value.", "gold": "This line always confused me   anyway. Good catch!", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -90,7 +90,7 @@ export function diff(parentDom, newVNode, oldVNode, context, isSvg, excessDomChi\n \t\t\t\t\tc.state = c._nextState;\n \t\t\t\t\tc._dirty = false;\n \t\t\t\t\tc._vnode = newVNode;\n-\t\t\t\t\tnewVNode._dom = oldDom!=null ? oldDom!==oldVNode._dom ? oldDom : oldVNode._dom : null;\n+\t\t\t\t\tnewVNode._dom = oldVNode._dom;\n \t\t\t\t\tnewVNode._children = oldVNode._children;\n \t\t\t\t\tfor (tmp = 0; tmp < newVNode._children.length; tmp++) {\n \t\t\t\t\t\tif (newVNode._children[tmp]) newVNode._children[tmp]._parent = newVNode;\nReview:"}
{"pred": "Should this be using the passed in context instead of context.Background()?", "gold": "Should we add `ctx` to `BlockServer.Shutdown()` for this purpose? Would be nice, but I don't care too much.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -130,6 +130,6 @@ func (j journalBlockServer) IsUnflushed(ctx context.Context, tlfID tlf.ID,\n }\n \n func (j journalBlockServer) Shutdown() {\n-\tj.jServer.shutdown()\n+\tj.jServer.shutdown(context.Background())\n \tj.BlockServer.Shutdown()\n }\nReview:"}
{"pred": "Should we check the validity of the nanosec value before adding it to the message?", "gold": "Duration_t at RTPS level must be serialized using fractions.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -42,7 +42,7 @@ bool DeadlineQosPolicy::addToCDRMessage(CDRMessage_t* msg)\n     bool valid = CDRMessage::addUInt16(msg, this->Pid);\n     valid &= CDRMessage::addUInt16(msg, this->length);//this->length);\n     valid &= CDRMessage::addInt32(msg,period.seconds);\n-    valid &= CDRMessage::addUInt32(msg,period.fraction);\n+    valid &= CDRMessage::addUInt32(msg,period.nanosec);\n     return valid;\n }\n \nReview:"}
{"pred": "Good to add a comment here explaining why this function was added.", "gold": "\"peer\" has its own meaning within YARPC with its own class of objects. This should probably be \"dispatcher\" too?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -28,6 +28,14 @@ import (\n \t\"go.uber.org/yarpc/yarpcerrors\"\n )\n \n+var msgInboundDispatcherNotRunning = \"peer for service %q is not running\"\n+\n+// NotRunningInboundError builds a YARPC error with code\n+// yarpcerrors.CodeUnavailable when the dispatcher is not running.\n+func NotRunningInboundError(service string) error {\n+\treturn yarpcerrors.UnavailableErrorf(msgInboundDispatcherNotRunning, service)\n+}\n+\n // RequestBodyDecodeError builds a YARPC error with code\n // yarpcerrors.CodeInvalidArgument that represents a failure to decode\n // the request body.\nReview:"}
{"pred": "It would be nice to have a comment here explaining why we need both the 5.0 and 6.0 options.", "gold": "I do not like this line break before `=true`. Maybe starting the list in the next line would help to reduce the indent? This way we could keep this string together.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -172,9 +172,18 @@ class ClangSA(analyzer_base.SourceAnalyzer):\n                                          '-Xclang', checker_name])\n \n             if config.ctu_dir and not self.__disable_ctu:\n+                # ctu-clang5 compatibility\n                 analyzer_cmd.extend(['-Xclang', '-analyzer-config',\n                                      '-Xclang',\n-                                     'xtu-dir=' + self.get_xtu_dir()])\n+                                     'xtu-dir=' + self.get_ctu_dir()])\n+                # ctu-clang6 compatibility (5.0 and 6.0 options work together)\n+                analyzer_cmd.extend(['-Xclang', '-analyzer-config',\n+                                     '-Xclang',\n+                                     'experimental-enable-naive-ctu-analysis'\n+                                     '=true',\n+                                     '-Xclang', '-analyzer-config',\n+                                     '-Xclang',\n+                                     'ctu-dir=' + self.get_ctu_dir()])\n                 if config.ctu_has_analyzer_display_ctu_progress:\n                     analyzer_cmd.extend(['-Xclang',\n                                          '-analyzer-display-ctu-progress'])\nReview:"}
{"pred": "It looks like you are removing some variables here. Are you sure that they are no longer needed?", "gold": "_plugins should be removed too", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -34,18 +34,10 @@ import (\n // the default value in Default var.\n \n func init() {\n-\tflag.StringVar(&_overwritePath, \"config-path\", \"\", \"Config path\")\n-\tflag.StringVar(&_secretPath, \"secret-path\", \"\", \"Secret path\")\n-\tflag.StringVar(&_subChainPath, \"sub-config-path\", \"\", \"Sub chain Config path\")\n \tflag.Var(&_plugins, \"plugin\", \"Plugin of the node\")\n }\n \n var (\n-\t// overwritePath is the path to the config file which overwrite default values\n-\t_overwritePath string\n-\t// secretPath is the path to the  config file store secret values\n-\t_secretPath   string\n-\t_subChainPath string\n \t_plugins      strs\n \t_evmNetworkID uint32\n \tloadChainID   sync.Once\nReview:"}
{"pred": "This looks good, but it might be worth adding a comment to explain what the code is doing.", "gold": "The rule selector will not include `<input>` and `<area>` elements. Why not make this a new, separate rule altogether?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,5 @@\n+let nn = node.nodeName.toLowerCase();\n+let validSetup =\n+\tnode.hasAttribute('alt') && (nn === 'img' || nn === 'input' || nn === 'area');\n+let validAttrValue = /^\\s+$/.test(node.getAttribute('alt'));\n+return validSetup && validAttrValue;\nReview:"}
{"pred": "This is a good change, it allows us to catch more errors and handle them gracefully.", "gold": "@The-Compiler Is this style okay or would you prefer a common userscript exception base?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1122,7 +1122,7 @@ class CommandDispatcher:\n         try:\n             userscripts.run_async(tab, cmd, *args, win_id=self._win_id,\n                                   env=env, verbose=verbose)\n-        except userscripts.UnsupportedError as e:\n+        except (userscripts.UnsupportedError, userscripts.NotFoundError) as e:\n             raise cmdexc.CommandError(e)\n \n     @cmdutils.register(instance='command-dispatcher', scope='window')\nReview:"}
{"pred": "Is this necessary? Can you explain why you are adding this?", "gold": "we'd need to return a MongooseBuffer here instead of the Binary. lets add the subtype option to the buffer schema type as referenced in #1000 instead.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -98,7 +98,8 @@ SchemaBuffer.prototype.cast = function (value, doc, init) {\n \n     return value;\n   } else if (value instanceof Binary) {\n-    return new MongooseBuffer(value.value(true), [this.path, doc]);\n+    var sub_type = value.sub_type || 0x00;\n+    return (new MongooseBuffer(value.value(true), [this.path, doc])).toObject(sub_type);\n   }\n \n   if (null === value) return value;\nReview:"}
{"pred": "It looks like you have removed a check here, is this intentional?", "gold": "Let's remove this change.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1158,7 +1158,6 @@ function updateDocuments(coll, selector, document, options, callback) {\n   if ('function' === typeof options) (callback = options), (options = null);\n   if (options == null) options = {};\n   if (!('function' === typeof callback)) callback = null;\n-\n   // If we are not providing a selector or document throw\n   if (selector == null || typeof selector !== 'object')\n     return callback(toError('selector must be a valid JavaScript object'));\nReview:"}
{"pred": "This looks good. The additional roles should help with more accurate reporting.", "gold": "Could you split this into multiple lines?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -727,7 +727,7 @@ def processNegativeStates(role, states, reason, negativeStates=None):\n \t# but only if it is either focused or this is something other than a change event.\n \t# The condition stops \"not selected\" from being spoken in some broken controls\n \t# when the state change for the previous focus is issued before the focus change.\n-\tif role in (ROLE_LISTITEM, ROLE_TREEVIEWITEM, ROLE_TABLEROW) and STATE_SELECTABLE in states and (reason != REASON_CHANGE or STATE_FOCUSED in states):\n+\tif role in (ROLE_LISTITEM, ROLE_TREEVIEWITEM, ROLE_TABLEROW,ROLE_TABLECELL,ROLE_TABLECOLUMNHEADER,ROLE_TABLEROWHEADER) and STATE_SELECTABLE in states and (reason != REASON_CHANGE or STATE_FOCUSED in states):\n \t\tspeakNegatives.add(STATE_SELECTED)\n \t# Restrict \"not checked\" in a similar way to \"not selected\".\n \tif (role in (ROLE_CHECKBOX, ROLE_RADIOBUTTON, ROLE_CHECKMENUITEM) or STATE_CHECKABLE in states)  and (STATE_HALFCHECKED not in states) and (reason != REASON_CHANGE or STATE_FOCUSED in states):\nReview:"}
{"pred": "Good use of the Data store here to make the description more dynamic.", "gold": "This technically works, however it may be safer to use both `getCurrentReferenceURL` and `getCurrentEntityURL` and then make this condition `currentReferenceURL === currentEntityURL`. Currently, this code only works based on the internals of `getCurrentReferenceURL`, so by checking both we would decouple that.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -25,12 +25,17 @@ import { __ } from '@wordpress/i18n';\n /**\n  * Internal dependencies\n  */\n-import Layout from '../../../components/layout/layout';\n+import Data from 'googlesitekit-data';\n import DashboardModuleHeader from '../../../components/dashboard/dashboard-module-header';\n import DashboardPageSpeed from '../components/DashboardPageSpeed';\n+import { STORE_NAME } from '../../../googlesitekit/datastore/site/constants';\n+const { useSelect } = Data;\n \n function DashboardSpeed() {\n-\tconst description = global.googlesitekit.permaLink ? __( 'How fast this page is.', 'google-site-kit' ) : __( 'How fast your home page is.', 'google-site-kit' );\n+\tconst currentEntityURL = useSelect( ( select ) => select( STORE_NAME ).getCurrentEntityURL() );\n+\tconst description = currentEntityURL\n+\t\t? __( 'How fast your page loads, how quickly people can interact with your content, and how stable your content is.', 'google-site-kit' )\n+\t\t: __( 'How fast your home page loads, how quickly people can interact with your content, and how stable your content is.', 'google-site-kit' );\n \n \treturn (\n \t\t<Fragment>\nReview:"}
{"pred": "This should be changed to use a template string instead of fmt.Sprintf() for readability.", "gold": "It does not recommend capitalization", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -69,9 +69,9 @@ func (c *WSClient) Connect() (conn.Connection, error) {\n \tif resp != nil {\n \t\tbody, errRead := ioutil.ReadAll(resp.Body)\n \t\tif errRead == nil {\n-\t\t\trespMsg = fmt.Sprintf(\"response code: %d, response body: %s\", resp.StatusCode, string(body))\n+\t\t\trespMsg = fmt.Sprintf(\"Response code: %d, response body: %s\", resp.StatusCode, string(body))\n \t\t} else {\n-\t\t\trespMsg = fmt.Sprintf(\"response code: %d\", resp.StatusCode)\n+\t\t\trespMsg = fmt.Sprintf(\"Response code: %d\", resp.StatusCode)\n \t\t}\n \t\tresp.Body.Close()\n \t}\nReview:"}
{"pred": "Good addition of a test case to ensure the correct behaviour when a card is declined.", "gold": "Minor thing, but can you use 1.9 hash syntax for this?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -113,6 +113,17 @@ feature 'User creates a subscription' do\n     expect(page).to have_content(I18n.t('subscriptions.flashes.update.success'))\n   end\n \n+  scenario 'updates Stripe subscription with declining credit card', :js => true do\n+    FakeStripe.failure = true\n+    sign_in_as_subscriber\n+    visit my_account_path\n+    submit_declining_credit_card_info\n+\n+    expect(current_path).to eq my_account_path\n+    expect(page).to_not have_content(I18n.t('subscriptions.flashes.update.success'))\n+    expect(page).to have_content 'Your credit card was declined'\n+  end\n+\n   scenario 'does not see option to update billing if not subscribing' do\n     visit my_account_path\n \nReview:"}
{"pred": "Is this necessary? It looks like the same thing is being done twice.", "gold": "I tried to follow the code structure already present.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -361,6 +361,7 @@ class LambdaExecutorReuseContainers(LambdaExecutorContainers):\n \n                 mount_volume = not config.LAMBDA_REMOTE_DOCKER\n                 lambda_cwd_on_host = Util.get_host_path_for_path_in_docker(lambda_cwd)\n+                lambda_cwd_on_host = Util.format_windows_path(lambda_cwd)\n                 mount_volume_str = '-v \"%s\":/var/task' % lambda_cwd_on_host if mount_volume else ''\n \n                 # Create and start the container\nReview:"}
{"pred": "Good to add the file path to the exception message for better debugging.", "gold": "seems reasonable to also want to include the 'to' location?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -191,7 +191,7 @@ public class FileHandler {\n       final long copied = Files.copy(from.toPath(), out);\n       final long length = from.length();\n       if (copied != length) {\n-        throw new IOException(\"Could not transfer all bytes.\");\n+        throw new IOException(\"Could not transfer all bytes of \" + from.toPath());\n       }\n     }\n   }\nReview:"}
{"pred": "This is a good change as it makes the code more portable and easier to test.", "gold": "Please leave 1 space char between commas here and other places in this PR.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -118,7 +118,7 @@ class ExperimentTestBaseClass(HelperTestCaseBase):\n     global g_myEnv\n     if not g_myEnv:\n       # Setup environment\n-      params = type('obj', (object,), {'installDir' : os.environ['NUPIC']})\n+      params = type('obj', (object,), {'installDir' : resource_filename(\"nupic\",\"\")})\n       g_myEnv = MyTestEnvironment(params)\n \n \nReview:"}
{"pred": "This change looks good, it's more efficient to use the && operator here.", "gold": "hm is this really &&? Not ||? Was it initially correct if any of these things are not set that it needs to recreated?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -100,8 +100,8 @@ bool ThreadsExec::spawn() {\n \n   pthread_attr_t attr;\n \n-  if (0 == pthread_attr_init(&attr) ||\n-      0 == pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM) ||\n+  if (0 == pthread_attr_init(&attr) &&\n+      0 == pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM) &&\n       0 == pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED)) {\n     pthread_t pt;\n \nReview:"}
{"pred": "The collections array should be initialized to an empty array rather than null.", "gold": "Please don't use C-style array declarations. IMO our pre-commit ought to be enhanced to not allow this", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -149,7 +149,8 @@ public class PackageTool extends SolrCLI.ToolBase {\n                 String version = parsedVersion.second();\n                 boolean noprompt = cli.hasOption('y');\n                 boolean isUpdate = cli.hasOption(\"update\") || cli.hasOption('u');\n-                packageManager.deploy(packageName, version, PackageUtils.validateCollections(cli.getOptionValue(\"collections\").split(\",\")), cli.getOptionValues(\"param\"), isUpdate, noprompt);\n+                String collections[] = cli.hasOption(\"collections\")? PackageUtils.validateCollections(cli.getOptionValue(\"collections\").split(\",\")): new String[] {};\n+                packageManager.deploy(packageName, version, collections, cli.hasOption(\"cluster\"), cli.getOptionValues(\"param\"), isUpdate, noprompt);\n                 break;\n               }\n               case \"undeploy\":\nReview:"}
{"pred": "Should this be a memcmp() instead of a strcmp()?", "gold": "@rhc54 This doesn't look like a comprehensive comparison. For `PMIX_STRING` we seem to actually compare the content of the data while here we only compare meta-information which doesn't ensure that values are the same.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -259,6 +259,12 @@ bool pmix_value_cmp(pmix_value_t *p, pmix_value_t *p1)\n         case PMIX_STRING:\n             rc = strcmp(p->data.string, p1->data.string);\n             break;\n+        case PMIX_COMPRESSED_STRING:\n+            if (p->data.bo.size != p1->data.bo.size) {\n+                return false;\n+            } else {\n+                return true;\n+            }\n         case PMIX_STATUS:\n             rc = (p->data.status == p1->data.status);\n             break;\nReview:"}
{"pred": "Is this new parameter necessary? Can we default it to false?", "gold": "I think `bypass_frontier_confirmation` conveys the intention better (default false as well)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1601,6 +1601,7 @@ void nano::json_handler::bootstrap ()\n {\n \tstd::string address_text = request.get<std::string> (\"address\");\n \tstd::string port_text = request.get<std::string> (\"port\");\n+\tconst bool confirmed_frontiers = request.get<bool> (\"confirmed_frontiers\", false);\n \tboost::system::error_code address_ec;\n \tauto address (boost::asio::ip::address_v6::from_string (address_text, address_ec));\n \tif (!address_ec)\nReview:"}
{"pred": "It looks like you removed some imports and added one. Make sure you didn't miss any references to the removed imports.", "gold": "This looks like it goes beyond the scope of removing `BlockHeight()`, in the future please do this in a separate commit at a minimum -- separate PR is fine too.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -5,12 +5,9 @@ import (\n \t\"fmt\"\n \t\"testing\"\n \n-\t\"github.com/ipfs/go-cid\"\n-\t\"github.com/ipfs/go-hamt-ipld\"\n-\t\"github.com/pkg/errors\"\n \t\"github.com/stretchr/testify/assert\"\n-\t\"github.com/stretchr/testify/require\"\n \n+\t\"github.com/filecoin-project/go-filecoin/address\"\n \t\"github.com/filecoin-project/go-filecoin/chain\"\n \t\"github.com/filecoin-project/go-filecoin/config\"\n \t\"github.com/filecoin-project/go-filecoin/core\"\nReview:"}
{"pred": "It looks like tab is now a required parameter for this constructor. Is this intentional?", "gold": "You'll also need to adjust `FakeWebTabAudio` in `tests/helpers/stubs.py`.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -666,9 +666,10 @@ class AbstractAudio(QObject):\n     muted_changed = pyqtSignal(bool)\n     recently_audible_changed = pyqtSignal(bool)\n \n-    def __init__(self, parent=None):\n+    def __init__(self, tab, parent=None):\n         super().__init__(parent)\n         self._widget = None\n+        self._tab = tab\n \n     def set_muted(self, muted: bool):\n         \"\"\"Set this tab as muted or not.\"\"\"\nReview:"}
{"pred": "This looks like a removal of a copyright header, which is generally not a good idea.", "gold": "@csrwng what should we do here? This one is from origin.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,19 +1,3 @@\n-/*\n-Copyright 2019 The Kubernetes Authors.\n-\n-Licensed under the Apache License, Version 2.0 (the \"License\");\n-you may not use this file except in compliance with the License.\n-You may obtain a copy of the License at\n-\n-    http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing, software\n-distributed under the License is distributed on an \"AS IS\" BASIS,\n-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-See the License for the specific language governing permissions and\n-limitations under the License.\n-*/\n-\n package helpers\n \n import (\nReview:"}
{"pred": "Is this necessary? Do we need to include this header?", "gold": "Follow alphabetical order.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -17,6 +17,7 @@\n #include <LightGBM/utils/openmp_wrapper.h>\n #include <LightGBM/utils/random.h>\n #include <LightGBM/utils/threading.h>\n+#include <LightGBM/utils/LocaleContext.h>\n \n #include <string>\n #include <cstdio>\nReview:"}
{"pred": "Looks good.", "gold": "As far as I can tell, these always get and set the context as an `IReadOnlyDictionary<string, string>`. Can we use that here instead of `object` and get rid of the `as IReadOnlyDictionary<string, string>`?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,16 @@\n+// <copyright file=\"IAutomaticTracer.cs\" company=\"Datadog\">\n+// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2 License.\n+// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2017 Datadog, Inc.\n+// </copyright>\n+\n+namespace Datadog.Trace.ClrProfiler\n+{\n+    internal interface IAutomaticTracer : ICommonTracer\n+    {\n+        object GetDistributedTrace();\n+\n+        void SetDistributedTrace(object trace);\n+\n+        void Register(object manualTracer);\n+    }\n+}\nReview:"}
{"pred": "This change removes the bold styling from the completion item. Is this intentional?", "gold": "As you only have `{}` as the format string (without anything else in it), this is the same as doing `self._doc.setHtml(html.escape(self._opt.text))`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -206,7 +206,7 @@ class CompletionItemDelegate(QStyledItemDelegate):\n             else:\n                 self._doc.setPlainText(self._opt.text)\n         else:\n-            self._doc.setHtml('<b>{}</b>'.format(html.escape(self._opt.text)))\n+            self._doc.setHtml('{}'.format(html.escape(self._opt.text)))\n \n     def _draw_focus_rect(self):\n         \"\"\"Draw the focus rectangle of an ItemViewItem.\"\"\"\nReview:"}
{"pred": "Add a comment here to explain what this constant is used for.", "gold": "Where would this be configured? In azkaban.properties?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -161,6 +161,8 @@ public class Constants {\n \n     // enable Quartz Scheduler if true.\n     public static final String ENABLE_QUARTZ= \"azkaban.server.schedule.enable_quartz\";\n+\n+    public static final String CUSTOM_CREDENTIAL_NAME = \"azkaban.security.credential\";\n   }\n \n   public static class FlowProperties {\nReview:"}
{"pred": "This should be an early return, not a throw.", "gold": "1. Use `const` instead of `var` here. 2. Move the check to after the `if (update == null || typeof update !== 'object')`.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -2101,6 +2101,12 @@ Collection.prototype.findOneAndUpdate = function(filter, update, options, callba\n   if (typeof options === 'function') (callback = options), (options = {});\n   options = options || {};\n \n+  var err = checkForAtomicOperators(update);\n+  if (err) {\n+    if (typeof callback === 'function') return callback(err);\n+    return this.s.promiseLibrary.reject(err);\n+  }\n+\n   // Basic validation\n   if (filter == null || typeof filter !== 'object')\n     throw toError('filter parameter must be an object');\nReview:"}
{"pred": "This looks good, but can you add a comment to explain why you are using eventfd here?", "gold": "Let's assume that on Linux `eventfd` is always available as a wrapper of the eventfd2 system call. It is supported since linux 2.6.27 + glibc 2.9, as well as from the ancient versions of bionic. In other words, it would be fair to argue that the pair would be available on practically all platforms that provide `pipe2`. Therefore switching from using `pipe2` to `eventfd` on linux unconditionally would not cause issues on our users.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -29,6 +29,13 @@ struct st_h2o_multithread_queue_t {\n #if H2O_USE_LIBUV\n     uv_async_t async;\n #else\n+#if defined(__linux__) && LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 27)\n+/**\n+ * The kernel overhead of an eventfd file descriptor is\n+ * much lower than that of a pipe, and only one file descriptor is required\n+ */\n+#define H2O_ASYNC_NOTIFY_USING_EVENTFD\n+#endif\n     struct {\n         int write;\n         h2o_socket_t *read;\nReview:"}
{"pred": "You should initialize the statistics object with the settings.", "gold": "This field could be `final`.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -61,6 +61,7 @@ public class DatabaseTransferConsumer implements IDataTransferConsumer<DatabaseC\n         IDataTransferNodePrimary, DBPReferentialIntegrityController {\n     private static final Log log = Log.getLog(DatabaseTransferConsumer.class);\n \n+    private DBCStatistics statistics = new DBCStatistics();\n     private DatabaseConsumerSettings settings;\n     private DatabaseMappingContainer containerMapping;\n     private ColumnMapping[] columnMappings;\nReview:"}
{"pred": "This looks good, but it might be worth adding a comment to explain why you're doing the shutdown! as a fallback.", "gold": "would be good to have a test for the case when `shutdown!` raises", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -62,8 +62,14 @@ module Beaker\n     def close\n       begin\n         @ssh.close if @ssh\n-      rescue\n-        @ssh.shutdown!\n+      rescue => e\n+        @logger.warn \"Attemped ssh.close.  Caught an error: #{e.message}  Attempting ssh.shutdown!...\"\n+        begin\n+          @ssh.shutdown!\n+        rescue => e\n+          @logger.warn \"Attemped ssh.shutdown!.  Caught an error: #{e.message}. Giving up and destorying ssh.\"\n+          @ssh = nil\n+        end\n       end\n       @ssh = nil\n     end\nReview:"}
{"pred": "Is this check necessary? We already have a check for the async operations flag earlier.", "gold": "Does upsert pass this check also?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -2747,6 +2747,10 @@ short HbaseInsert::codeGen(Generator *generator)\n \n   generator->initTdbFields(hbasescan_tdb);\n \n+  if (CmpCommon::getDefault(HBASE_ASYNC_OPERATIONS) == DF_ON\n+           && t == ComTdbHbaseAccess::INSERT_)\n+     hbasescan_tdb->setAsyncOperations(TRUE);\n+\n   if (getTableDesc()->getNATable()->isSeabaseTable())\n     {\n       hbasescan_tdb->setSQHbaseTable(TRUE);\nReview:"}
{"pred": "It would be better to use a single log statement with multiple fields rather than two separate log statements.", "gold": "Apologies reviewers, I did end up pushing another change. I was starting to request SRE-P help to get the apiserver configs from some clusters before and after when I realized I can just log the stdout from the patch command to see if anything was changed or not. Much simpler to verify if my work did or did not make changes to the config during the transition. Also got the spacing issue you mentioned @abhinavdahiya Thanks all.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -43,6 +43,9 @@ func (r *helper) Patch(name types.NamespacedName, kind, apiVersion string, patch\n \t\t\tWithField(\"stderr\", ioStreams.ErrOut.(*bytes.Buffer).String()).Warn(\"running the patch command failed\")\n \t\treturn err\n \t}\n+\tr.logger.\n+\t\tWithField(\"stdout\", ioStreams.Out.(*bytes.Buffer).String()).\n+\t\tWithField(\"stderr\", ioStreams.ErrOut.(*bytes.Buffer).String()).Info(\"patch command successful\")\n \treturn nil\n }\n \nReview:"}
{"pred": "It would be good to add a comment here to explain why the temp config is needed.", "gold": "I'm not sure this naming is a good idea; that's the format for macOS xattr metadata files on unsupported filesystems.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -23,6 +23,7 @@ import (\n const (\n \tkbfsRepoDir         = \".kbfs_git\"\n \tkbfsConfigName      = \"kbfs_config\"\n+\tkbfsConfigNameTemp  = \"._kbfs_config\"\n \tgitSuffixToIgnore   = \".git\"\n \tkbfsDeletedReposDir = \".kbfs_deleted_repos\"\n )\nReview:"}
{"pred": "The migration should be updated to use the correct version of Rails.", "gold": "Metrics/LineLength: Line is too long. [85/80]", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,4 +1,4 @@\n-class AddIndexOnSectionIdAndTeacherIdToSectionTeachers < ActiveRecord::Migration\n+class AddIndexOnSectionIdAndTeacherIdToSectionTeachers < ActiveRecord::Migration[4.2]\n   def up\n     change_table :section_teachers do |t|\n       t.remove_index :section_id\nReview:"}
{"pred": "It would be nice to add a comment here explaining why Listeners and ScanEvent are needed.", "gold": "Please remove these imports. The project's style is to use `Assert.assertEquals` and not import static methods in general. This also caused a lot of unnecessary changes.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -19,12 +19,13 @@\n \n package org.apache.iceberg.flink;\n \n-\n import java.util.List;\n import org.apache.flink.table.api.SqlParserException;\n import org.apache.iceberg.AssertHelpers;\n import org.apache.iceberg.FileFormat;\n import org.apache.iceberg.catalog.Namespace;\n+import org.apache.iceberg.events.Listeners;\n+import org.apache.iceberg.events.ScanEvent;\n import org.apache.iceberg.relocated.com.google.common.collect.Lists;\n import org.junit.After;\n import org.junit.Assert;\nReview:"}
{"pred": "You should add a log message here to indicate that a proxy is being used.", "gold": "thanks. Note that returning at this point might leak memory from the allocations above, so the PR will need to take care of that too.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -112,7 +112,10 @@ static int http_post(struct flb_out_http *ctx,\n                         payload_buf, payload_size,\n                         ctx->host, ctx->port,\n                         ctx->proxy, 0);\n-\n+    if (!c) {\n+        flb_plg_error(ctx->ins, \"[http_client] failed to create HTTP client\");\n+        return FLB_RETRY;\n+    }\n \n     if (c->proxy.host) {\n         flb_plg_debug(ctx->ins, \"[http_client] proxy host: %s port: %i\",\nReview:"}
{"pred": "Consider adding a comment to explain why we are checking config.val.content.desktop_fullscreen here.", "gold": "If you really want to rename this, you'll also need to adjust the name in `__init__` and in other places it's used (`browser/commands.py`).", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -492,10 +492,13 @@ class MainWindow(QWidget):\n     @pyqtSlot(bool)\n     def _on_fullscreen_requested(self, on):\n         if on:\n-            self.state_before_fullscreen = self.windowState()\n-            self.showFullScreen()\n+            self.window_state_before_fullscreen = self.windowState()\n+            self.config_state_before_fullscreen = config.val.content.desktop_fullscreen\n+            if config.val.content.desktop_fullscreen:\n+                self.showFullScreen()\n         elif self.isFullScreen():\n-            self.setWindowState(self.state_before_fullscreen)\n+            if config.val.content.desktop_fullscreen or self.config_state_before_fullscreen:\n+                self.setWindowState(self.window_state_before_fullscreen)\n         log.misc.debug('on: {}, state before fullscreen: {}'.format(\n             on, debug.qflags_key(Qt, self.state_before_fullscreen)))\n \nReview:"}
{"pred": "It would be helpful to add a comment here explaining why the cascade option isn't working.", "gold": "As discussed at standup, I gave up on this. Calling `DeleteMapLayerMetadataCommand` felt cleaner anyway because there might be other cleanup that needs to happen. @scolapasta and @matthew-a-dunlap plan to discuss this.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -53,6 +53,7 @@ public class MapLayerMetadata implements Serializable {\n     // ForeignKey to DataFile\n     //x@ManyToOne\n     // For now, make this unique:  Each DataFile may only have one map\n+    //@OneToOne(cascade = {CascadeType.REMOVE, CascadeType.MERGE, CascadeType.PERSIST}) // TODO: Figure out why this doesn't work.\n     @JoinColumn(nullable=false, unique=true)\n     private DataFile dataFile;\n \nReview:"}
{"pred": "This should be removed before committing. It's just for debugging.", "gold": "Do we need these changes? If so, can you tidy up the messages? Looks like it might have been your testing/debugging changes  ", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -84,5 +84,8 @@ func (a *action) Matches(act coretesting.Action) error {\n \t\treturn nil\n \t}\n \n+\tfmt.Printf(\"EXP:%+v\\n\", objExp.GetObject())\n+\tfmt.Printf(\"ACT:%+v\\n\", objExp.GetObject())\n+\n \treturn fmt.Errorf(\"unexpected difference between actions: %s\", pretty.Diff(objExp.GetObject(), objAct.GetObject()))\n }\nReview:"}
{"pred": "It's good to add a comment here to explain why the new constant is being added.", "gold": "where is the default being set?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -63,6 +63,9 @@ const (\n \n \t// SecretTypeEnv is to show secret type being ENVIRONMENT_VARIABLE\n \tSecretTypeEnv = \"ENVIRONMENT_VARIABLE\"\n+\n+\t// TargetLogDriver is to show secret target being \"LOG_DRIVER\", the default will be \"CONTAINER\"\n+\tSecretTargetLogDriver = \"LOG_DRIVER\"\n )\n \n // DockerConfig represents additional metadata about a container to run. It's\nReview:"}
{"pred": "Is this intentional? It looks like you're copying the wrong match here.", "gold": "these changes should likely be in the next commit instead", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -154,7 +154,7 @@ static void found_package_cb (const char *line,\n \t\tvString *name = vStringNew ();\n \t\ttagEntryInfo tag;\n \n-\t\tvStringNCopyS (name, line + matches[1].start, matches[1].length);\n+\t\tvStringNCopyS (name, line + matches[2].start, matches[2].length);\n \t\tinitTagEntry (&tag, vStringValue (name), RpmSpecKinds + K_PACKAGE);\n \t\ttag.extensionFields.scopeIndex = *(int *)userData;\n \t\tmakeTagEntry (&tag);\nReview:"}
{"pred": "This test should be split into two separate tests, one for the formatter and one for the AddonTransform.", "gold": "Since you have defined this struct, I would suggest to replace all exist literal structs by this.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -26,9 +26,12 @@ import (\n \t\"github.com/stretchr/testify/assert\"\n )\n \n+type Foobar struct {\n+\tFoo string\n+}\n+\n // TestFormat ensures the formatter and AddonTransform works as expected.\n func TestFormat(t *testing.T) {\n-\t// TODO: Add table formatter tests after implementing table formatter\n \tfor _, tc := range []struct {\n \t\tname            string\n \t\tsingleton       bool\nReview:"}
{"pred": "It's good to add a comment here explaining why this new boolean was added.", "gold": "The field name doesn't really capture what this option does. I think `mConfirmDiscardMessage` would be a better choice.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -168,6 +168,7 @@ public class K9 extends Application {\n     private static boolean mAnimations = true;\n \n     private static boolean mConfirmDelete = false;\n+    private static boolean mConfirmMenuDiscard = true;\n     private static boolean mConfirmDeleteStarred = false;\n     private static boolean mConfirmSpam = false;\n     private static boolean mConfirmDeleteFromNotification = true;\nReview:"}
{"pred": "This should be a warning or log message, not a fatal error.", "gold": "what if `$media->getBinaryContent() == Symfony\\Component\\HttpFoundation\\File\\File` does `is_string()` return `true`? ping @greg0ire", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -192,6 +192,15 @@ class FileProvider extends BaseProvider\n             return;\n         }\n \n+        // is_file will cause a fatal error if binary content is not a string\n+        if (!is_string($media->getBinaryContent())) {\n+            throw new \\RuntimeException(sprintf(\n+                'Invalid data provided for binary content, choose among: string, %s, %s',\n+                'Symfony\\Component\\HttpFoundation\\File\\File',\n+                'Symfony\\Component\\HttpFoundation\\Request'\n+            ));\n+        }\n+\n         // if the binary content is a filename => convert to a valid File\n         if (!is_file($media->getBinaryContent())) {\n             throw new \\RuntimeException('The file does not exist : '.$media->getBinaryContent());\nReview:"}
{"pred": "You should add a comment here explaining why you are making this change.", "gold": "maybe rather than `bool` make this field a `StructDef *` ?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1065,11 +1065,9 @@ void GenStruct(StructDef &struct_def, std::string *code_ptr) {\n       }\n     }\n   // generate object accessors if is nested_flatbuffer\n+  if (field.nested_flatbuffer) {\n   auto nested = field.attributes.Lookup(\"nested_flatbuffer\");\n-  if (nested) {\n-    auto nested_qualified_name =\n-      parser_.namespaces_.back()->GetFullyQualifiedName(nested->constant);\n-    auto nested_type = parser_.structs_.Lookup(nested_qualified_name);\n+\tauto nested_type = nested->type.struct_def;\n     auto nested_type_name = WrapInNameSpace(*nested_type);\n     auto nestedMethodName = MakeCamel(field.name, lang_.first_camel_upper)\n       + \"As\" + nested_type_name;\nReview:"}
{"pred": "This should be documented as a new feature, and the 10ms delay should be configurable.", "gold": "Shall we maybe put this in a `const` like `backgroundTaskTimeout`?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -209,6 +209,13 @@ func (fbm *folderBlockManager) enqueueBlocksToDelete(toDelete blocksToDelete) {\n \tfbm.blocksToDeleteChan <- toDelete\n }\n \n+func (fbm *folderBlockManager) enqueueBlocksToDeleteAfterShortDelay(\n+\ttoDelete blocksToDelete) {\n+\tfbm.blocksToDeleteWaitGroup.Add(1)\n+\ttime.AfterFunc(10*time.Millisecond,\n+\t\tfunc() { fbm.blocksToDeleteChan <- toDelete })\n+}\n+\n // enqueueBlocksToDeleteNoWait enqueues blocks to be deleted just like\n // enqueueBlocksToDelete, except that when fbm.blocksToDeleteChan is full, it\n // doesn't block, but instead spawns a goroutine to handle the sending.\nReview:"}
{"pred": "We should log this exception, as it could be indicative of a problem.", "gold": "CI is complaining about this.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -272,6 +272,11 @@ namespace Datadog.Trace.TestHelpers\n                     ctx.Response.OutputStream.Write(buffer, 0, buffer.Length);\n                     ctx.Response.Close();\n                 }\n+                catch (InvalidOperationException)\n+                {\n+                    // this can occur when setting Response.ContentLength64, with the framework claiming that the response has already been submitted\n+                    // for now ignore, and we'll see if this introduces downstream issues\n+                }\n                 catch (HttpListenerException)\n                 {\n                     // listener was stopped,\nReview:"}
{"pred": "This should be moved to a separate class, as it is not related to the DefaultHistoryRemovalTimeProvider class.", "gold": "Let's only change a file if it is really necessary. Such a change does not bring much value and makes it harder to find the original commit in which the method was introduced.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -31,6 +31,14 @@ import java.util.Date;\n  */\n public class DefaultHistoryRemovalTimeProvider implements HistoryRemovalTimeProvider {\n \n+  public static Date determineRemovalTime(Date initTime, Integer timeToLive) {\n+    Calendar removalTime = Calendar.getInstance();\n+    removalTime.setTime(initTime);\n+    removalTime.add(Calendar.DATE, timeToLive);\n+    \n+    return removalTime.getTime();\n+  }\n+\n   public Date calculateRemovalTime(HistoricProcessInstanceEventEntity historicRootProcessInstance, ProcessDefinition processDefinition) {\n \n     Integer historyTimeToLive = processDefinition.getHistoryTimeToLive();\nReview:"}
{"pred": "This looks good, but you should consider adding a comment to explain why you are doing this.", "gold": "I would prefer to set up space between classes in format pattern, `%s %s` and then use `trim()` to remove unnecessary whitespaces. This will also solve stripping whitespaces from the beginning and end of a string `$attributes['class']`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -210,6 +210,14 @@ class ImageExtension extends Twig_Extension\n         $htmlAttributes = $attributes;\n         unset($htmlAttributes['type'], $htmlAttributes['size']);\n \n+        $useLazyLoading = array_key_exists('lazy', $attributes) ? (bool)$attributes['lazy'] : true;\n+        $isAttributeClassExistsAndNotEmpty = array_key_exists('class', $attributes) && $attributes['class'] !== '';\n+        $htmlAttributes['class'] = sprintf(\n+            '%s%s',\n+            $useLazyLoading ? 'lazy' : '',\n+            $isAttributeClassExistsAndNotEmpty ? ' ' . $attributes['class'] : ''\n+        );\n+\n         return $this->templating->render('@ShopsysFramework/Common/image.html.twig', [\n             'attr' => $htmlAttributes,\n             'additionalImagesData' => $additionalImagesData,\nReview:"}
{"pred": "You should probably check the return value of `toAdminJobOp` and return an error if it is not valid.", "gold": "when Op is illegal should return here?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -22,9 +22,13 @@ AdminJobExecutor::AdminJobExecutor(Sentence *sentence,\n \n void AdminJobExecutor::execute() {\n     LOG(INFO) << __func__ << \" enter\";\n-    auto opEnum = toAdminJobOp(sentence_->getType());\n+    auto optOpEnum = toAdminJobOp(sentence_->getType());\n+    if (!optOpEnum) {\n+        LOG(ERROR) << \"unknown setence type[\" << sentence_->getType() <<\"]\";\n+    }\n     auto paras = sentence_->getParas();\n \n+    auto opEnum = *optOpEnum;\n     if (opNeedsSpace(opEnum)) {\n         auto status = checkIfGraphSpaceChosen();\n         if (!status.ok()) {\nReview:"}
{"pred": "Is this intentional? It looks like you are removing the version key from the installedVersions map, but it's not clear why.", "gold": "don't we need to remove the project version from installedVersions?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -447,8 +447,6 @@ public class FlowRunnerManager implements EventListener,\n             } catch (IOException e) {\n               logger.error(e);\n             }\n-\n-            installedVersions.remove(versionKey);\n           }\n         }\n       }\nReview:"}
{"pred": "This should be documented in the README.md or other documentation.", "gold": "the bridge here isn't defined as an accessor / reader to try mask it better. So you need to directly call the iVar `@bridge` here.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -47,6 +47,12 @@ module Selenium\n           @bridge.send_command(cmd: cmd, params: params)\n         end\n \n+        def print_page(**options)\n+          options[:page_ranges] &&= Array(options[:page_ranges])\n+\n+          bridge.print_page(options)\n+        end\n+\n         private\n \n         def debugger_address\nReview:"}
{"pred": "It's better to unlock the ipset before returning the error, otherwise the ipset will remain locked.", "gold": "This is intended. Pls revert this.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -51,7 +51,10 @@ func (s *DaemonServer) FlushIPSets(ctx context.Context, req *pb.IPSetsRequest) (\n \t\tipset := ipset\n \t\ts.IPSetLocker.Lock(ipset.Name)\n \t\terr := flushIPSet(ctx, req.EnterNS, pid, ipset)\n-\t\ts.IPSetLocker.Unlock(ipset.Name)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\terr = s.IPSetLocker.Unlock(ipset.Name)\n \t\tif err != nil {\n \t\t\treturn nil, err\n \t\t}\nReview:"}
{"pred": "We should add a comment here to explain why we are suppressing the warning.", "gold": "Something wrong with cast to `(Comparator<> & Serializable)`, need to be investigated", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -68,7 +68,7 @@ interface RedBlackTree<T> extends Iterable<T> {\n \n     static <T extends Comparable<? super T>> RedBlackTree<T> ofAll(Iterable<? extends T> values) {\n         Objects.requireNonNull(values, \"values is null\");\n-        return ofAll((Comparator<? super T> & Serializable) T::compareTo, values);\n+        return ofAll(Comparators.naturalComparator(), values);\n     }\n \n     @SuppressWarnings(\"unchecked\")\nReview:"}
{"pred": "You can remove the unused code here.", "gold": "I think we need this. Not sure, I'll test.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -217,15 +217,10 @@ export default class App extends Component {\n \n   // eslint-disable-next-line no-unused-vars\n   handleClickSearch = (_, { suggestionValue, method }) => {\n-    const { packages } = this.state;\n     switch(method) {\n       case 'click':\n-        window.location.href = getDetailPageURL(suggestionValue);\n-      break;\n       case 'enter':\n-        this.setState({\n-          filteredPackages: packages.filter(pkg => pkg.label.match(suggestionValue))\n-        });\n+        window.location.href = getDetailPageURL(suggestionValue);\n       break;\n     }\n   }\nReview:"}
{"pred": "This change looks like it's missing a disable_iptables() call.", "gold": "I'm going to need to check if google compute requires these steps in this order, or if you can disable iptables after the fact.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -83,7 +83,6 @@ module Beaker\n         host['user'] = 'google_compute'\n \n         disable_se_linux(host, @options)\n-        disable_iptables(host, @options)\n         copy_ssh_to_root(host, @options)\n         enable_root_login(host, @options)\n         host['user'] = default_user\nReview:"}
{"pred": "This is a build tag, not a comment.", "gold": "Did go change their tags with the new version?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -2,6 +2,7 @@\n // sources:\n // build/static/charts/traefik-10.3.001.tgz\n // build/static/charts/traefik-crd-10.3.001.tgz\n+//go:build !no_stage\n // +build !no_stage\n \n package static\nReview:"}
{"pred": "Nice, this will allow us to use the datastore as a source of trust domain configs.", "gold": "I don't recall what we decided here in terms of which source would get priority. As written, the static configuration will overwrite datastore results.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -330,11 +330,15 @@ func (s *Server) newEndpointsServer(ctx context.Context, catalog catalog.Catalog\n }\n \n func (s *Server) newBundleManager(cat catalog.Catalog, metrics telemetry.Metrics) *bundle_client.Manager {\n+\tlog := s.config.Log.WithField(telemetry.SubsystemName, \"bundle_client\")\n \treturn bundle_client.NewManager(bundle_client.ManagerConfig{\n-\t\tLog:       s.config.Log.WithField(telemetry.SubsystemName, \"bundle_client\"),\n+\t\tLog:       log,\n \t\tMetrics:   metrics,\n \t\tDataStore: cat.GetDataStore(),\n-\t\tSource:    bundle_client.TrustDomainConfigMap(s.config.Federation.FederatesWith),\n+\t\tSource: bundle_client.MergeTrustDomainConfigSources(\n+\t\t\tbundle_client.TrustDomainConfigMap(s.config.Federation.FederatesWith),\n+\t\t\tbundle_client.DataStoreTrustDomainConfigSource(log, cat.GetDataStore()),\n+\t\t),\n \t})\n }\n \nReview:"}
{"pred": "Should this be a warning instead of a panic?", "gold": "I think it should still panic for when there are no outputs; might be nice to special-case that though so the message is more explicit.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -192,7 +192,7 @@ func replaceSequenceLabel(state *core.BuildState, target *core.BuildTarget, labe\n }\n \n func checkAndReplaceSequence(state *core.BuildState, target, dep *core.BuildTarget, in string, runnable, multiple, dir, outPrefix, hash, test, allOutputs, tool bool) string {\n-\tif allOutputs && !multiple && len(dep.Outputs()) != 1 {\n+\tif allOutputs && !multiple && len(dep.Outputs()) > 1 {\n \t\t// Label must have only one output.\n \t\tpanic(fmt.Sprintf(\"Rule %s can't use %s; %s has multiple outputs.\", target.Label, in, dep.Label))\n \t} else if runnable && !dep.IsBinary {\nReview:"}
{"pred": "It looks like you are introducing a new field, metricsConfig, but it is not being used anywhere. Is this intentional?", "gold": "*NULL_DEREFERENCE:* object `null` is dereferenced by call to `meterSupplier(...)` at line 122.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -110,12 +110,14 @@ public class SolrMetricManager {\n \n   public static final int DEFAULT_CLOUD_REPORTER_PERIOD = 60;\n \n-  private MetricRegistry.MetricSupplier<Counter> counterSupplier;\n-  private MetricRegistry.MetricSupplier<Meter> meterSupplier;\n-  private MetricRegistry.MetricSupplier<Timer> timerSupplier;\n-  private MetricRegistry.MetricSupplier<Histogram> histogramSupplier;\n+  private final MetricsConfig metricsConfig;\n+  private final MetricRegistry.MetricSupplier<Counter> counterSupplier;\n+  private final MetricRegistry.MetricSupplier<Meter> meterSupplier;\n+  private final MetricRegistry.MetricSupplier<Timer> timerSupplier;\n+  private final MetricRegistry.MetricSupplier<Histogram> histogramSupplier;\n \n   public SolrMetricManager() {\n+    metricsConfig = new MetricsConfig.MetricsConfigBuilder().build();\n     counterSupplier = MetricSuppliers.counterSupplier(null, null);\n     meterSupplier = MetricSuppliers.meterSupplier(null, null);\n     timerSupplier = MetricSuppliers.timerSupplier(null, null);\nReview:"}
{"pred": "This looks like a bug fix, but it's worth double checking that the new logic is correct and that we don't need to add a test for the old logic.", "gold": "switch over to .mode", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -60,12 +60,7 @@ function _command(server, ns, cmd, options, callback) {\n     finalCmd.$clusterTime = clusterTime;\n   }\n \n-  if (\n-    isSharded(server) &&\n-    !shouldUseOpMsg &&\n-    readPreference &&\n-    readPreference.preference !== 'primary'\n-  ) {\n+  if (isSharded(server) && !shouldUseOpMsg && readPreference && readPreference.mode !== 'primary') {\n     finalCmd = {\n       $query: finalCmd,\n       $readPreference: readPreference.toJSON()\nReview:"}
{"pred": "Typo fix - added missing 'l' in 'should'", "gold": "I guess your IDE did some auto-fixing here  ", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -125,7 +125,7 @@ describe('HiddenColumns', () => {\n       });\n \n       it('should return correct visual indexes when columns sequence is non-contiguous ' +\n-         '(force desync between physical and visual indexes)', () => {\n+        '(force desync between physical and visual indexes)', () => {\n         const hot = handsontable({\n           data: Handsontable.helper.createSpreadsheetData(1, 10),\n           colHeaders: true,\nReview:"}
{"pred": "This import looks unnecessary. Is it used anywhere in the class?", "gold": "This is an unused import failing recommit still.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -32,6 +32,7 @@ import org.apache.lucene.search.BooleanClause;\n import org.apache.lucene.search.BooleanQuery;\n import org.apache.lucene.search.DisjunctionMaxQuery;\n import org.apache.lucene.search.FuzzyQuery;\n+import org.apache.lucene.search.PhraseQuery;\n import org.apache.lucene.search.TermQuery;\n \n public class TestRamUsageEstimator extends LuceneTestCase {\nReview:"}
{"pred": "It would be better to use a regex here instead of a hardcoded string.", "gold": "I'm concerned that we're conflating multiple things here. There are 2 things that Beaker should really care about: - Network transport - i.e. `ssh` vs `winrm` - Interpreter - i.e. `bash`, `cmd`, `powershell`, etc The problem is that @cowofevil is running Bitvise SSH, and he assumed we should be setting `is_cygwin: false` in node definitions. But that doesn't really accurately convey what we care about, and since Beaker doesn't appear to track network transport apart from interpreter, we end up in a strange state. `is_cygwin: false` appears to end up setting `is_powershell?` to `true`, which IMHO is not accurate or appropriate. Bitvise templates use `ssh` (like Cygwin), but the interpreter used is `cmd`, not `powershell`.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -133,8 +133,12 @@ module Beaker\n               #move to the host\n               logger.debug \"Using scp to transfer #{source_path} to #{target_path}\"\n               scp_to host, source_path, target_module_dir, {:ignore => ignore_list}\n+\n               #rename to the selected module name, if not correct\n               cur_path = File.join(target_module_dir, source_name)\n+              if host.is_powershell? #make sure our slashes are correct\n+                cur_path = cur_path.gsub(/\\//,'\\\\')\n+              end\n               host.mv cur_path, target_path unless cur_path == target_path\n             when 'rsync'\n               logger.debug \"Using rsync to transfer #{source_path} to #{target_path}\"\nReview:"}
{"pred": "Good job adding the aria-label attribute to the modal. This will help with accessibility.", "gold": "I think this is ok for now. This ties into the larger issue of the site not having a consistent method for relaying form input errors. Please make sure the focus gets set on the close button when the dialog opens.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -52,6 +52,6 @@\n <%= tinymce :content_css => asset_path('application.css') %>\n \n <!-- alert for the default template-->\n-<div id=\"edit_guidance_alert_dialog\" class=\"modal\" style=\"display:none\">\n+<div id=\"edit_guidance_alert_dialog\" class=\"modal\" role=\"dialog\" aria-label=\"<%=_(\"Missing Fields Alert\")%>\" style=\"display:none\">\n   <ul id=\"missing_fields_edit_guidance\"></ul>\n </div>\nReview:"}
{"pred": "You can remove the @link references here, since they are not necessary.", "gold": "Should these link be removed?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -44,9 +44,9 @@ const COLUMN_SIZE_MAP_NAME = 'autoColumnSize';\n  * autoColumnSize: {syncLimit: '40%'},\n  * ```\n  *\n- * The plugin uses {@link GhostTable} and {@link SamplesGenerator} for calculations.\n- * First, {@link SamplesGenerator} prepares samples of data with its coordinates.\n- * Next {@link GhostTable} uses coordinates to get cells' renderers and append all to the DOM through DocumentFragment.\n+ * The plugin uses GhostTable and SamplesGenerator for calculations.\n+ * First, SamplesGenerator prepares samples of data with its coordinates.\n+ * Next GhostTable uses coordinates to get cells' renderers and append all to the DOM through DocumentFragment.\n  *\n  * Sampling accepts additional options:\n  * - *samplingRatio* - Defines how many samples for the same length will be used to calculate. Default is `3`.\nReview:"}
{"pred": "It would be nice to have a default value for add_undo here, so the user doesn't have to specify it every time.", "gold": "Please make this a keyword-only argument by adding a `*` argument before `add_undo`.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -217,11 +217,12 @@ class TabbedBrowser(tabwidget.TabWidget):\n         for tab in self.widgets():\n             self._remove_tab(tab)\n \n-    def close_tab(self, tab):\n+    def close_tab(self, tab, add_undo=True):\n         \"\"\"Close a tab.\n \n         Args:\n             tab: The QWebView to be closed.\n+            add_undo: Whether the tab close can be undone.\n         \"\"\"\n         last_close = config.get('tabs', 'last-close')\n         count = self.count()\nReview:"}
{"pred": "It looks like you are adding a new payloadMarshaler here, is this necessary?", "gold": "didn't quite follow what this code block is doing.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -201,6 +201,13 @@ var eventStreamWriterTestTmpl = template.Must(\n \t\t\t{{- end }}\n \t\t}\n \n+\t\tvar marshalers request.HandlerList\n+\t\tmarshalers.PushBackNamed({{ $.API.ProtocolPackage }}.BuildHandler)\n+\t\tpayloadMarshaler := protocol.HandlerPayloadMarshal{\n+\t\t\tMarshalers: marshalers,\n+\t\t}\n+\t\t_ = payloadMarshaler\n+\n \t\teventMsgs := []eventstream.Message{\n \t\t\t{{- range $idx, $event := $.InputStream.Events }}\n \t\t\t\t{{- template \"set event message\" Map \"idx\" $idx \"parentShape\" $event.Shape \"eventName\" $event.Name }}\nReview:"}
{"pred": "This should be refactored to use a different approach. This is a hacky solution and should be avoided.", "gold": "this doesn't sound pretty... I would rather we have a proper navigation for all modes - AFAIK TV remote navigation is very similar to normal keyboard, but maybe it just uses another key codes - those should be extracted in a single file and defined there depending on context then", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1071,6 +1071,12 @@ define([\"playbackManager\", \"dom\", \"inputManager\", \"datetime\", \"itemHelper\", \"med\n         }\n \n         function onWindowKeyDown(e) {\n+            // FIXME: Conflicts with keyboard navigation\n+            // FIXME: Then the keyboard is completely ignored. Need another solution.\n+            if (layoutManager.tv) {\n+                return void showOsd();\n+            }\n+\n             if (!currentVisibleMenu && 32 === e.keyCode) {\n                 playbackManager.playPause(currentPlayer);\n                 return void showOsd();\nReview:"}
{"pred": "This looks good, but it might be worth adding a comment to explain why we're doing this.", "gold": "After diffing the children we check whether the value got out of sync, if it did we update it. We also update the `_prevValue` to prepare for the next event hitting our controlled component", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -205,4 +205,17 @@ function patchDOMElement(dom, newVNode, internal, globalContext, commitQueue) {\n \t\t\tdom.firstChild\n \t\t);\n \t}\n+\n+\tif ('value' in newProps && dom._isControlled) {\n+\t\tdom._prevValue = newProps.value;\n+\n+\t\tif (newProps.value !== dom.value) {\n+\t\t\tsetProperty(dom, 'value', i, oldProps.value, 0);\n+\t\t}\n+\t} else if ('checked' in newProps && dom._isControlled) {\n+\t\tdom._prevValue = newProps.checked;\n+\t\tif (newProps.checked !== dom.checked) {\n+\t\t\tsetProperty(dom, 'checked', i, oldProps.checked, 0);\n+\t\t}\n+\t}\n }\nReview:"}
{"pred": "This is a good change, adding more context to the package.", "gold": "It provides a type called Node which is a fully functional bee client. This package is where the dependencies are injected. It is not just a glue-code, it is concept of node.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -2,6 +2,8 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+// Package node provides the glue-code needed in order\n+// to start a Bee node.\n package node\n \n import (\nReview:"}
{"pred": "This should be documented in the docstring for ConfigManager, as well as any other changes to the CHANGED_OPTIONS dict.", "gold": "I think this will change `''` to `'%'` unconditionally, i.e. there'll be no way to set `''` anymore. This should really only be used for values which make no sense anymore.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -330,6 +330,8 @@ class ConfigManager(QObject):\n     CHANGED_OPTIONS = {\n         ('content', 'cookies-accept'):\n             _get_value_transformer('default', 'no-3rdparty'),\n+        ('storage', 'download-directory'):\n+            _get_value_transformer('', '%'),\n     }\n \n     changed = pyqtSignal(str, str)\nReview:"}
{"pred": "This should be documented better, what is the purpose of this method? What is the expected return type?", "gold": "Nit: this table's row key map -> this table's row keys map", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -88,6 +88,13 @@ public interface Table {\n    */\n   Map<Integer, SortOrder> sortOrders();\n \n+  /**\n+   * Return the {@link RowKey row key} for this table.\n+   *\n+   * @return this table's row key.\n+   */\n+  RowKey rowKey();\n+\n   /**\n    * Return a map of string properties for this table.\n    *\nReview:"}
{"pred": "It is probably better to set the debug level to PJ_LOG_ERROR in production, and PJ_LOG_DEBUG in development.", "gold": "this change should be reverted", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -87,7 +87,7 @@ void proj_assign_context( PJ* pj, PJ_CONTEXT *ctx )\n pj_ctx pj_ctx::createDefault()\n {\n     pj_ctx ctx;\n-    ctx.debug_level = PJ_LOG_ERROR;\n+    ctx.debug_level = PJ_LOG_NONE;\n     ctx.logger = pj_stderr_logger;\n     NS_PROJ::FileManager::fillDefaultNetworkInterface(&ctx);\n \nReview:"}
{"pred": "You should add a comment here explaining why the order of these two lines is important.", "gold": "I'm a bit confused about the `os.path.dirname(basedir)` here - is this just to get to the parent directory? Either way, I think I'd prefer just having this in `update_version.py` as it's not needed in qutebrowser itself.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -26,8 +26,10 @@ __copyright__ = \"Copyright 2014-2018 Florian Bruhin (The Compiler)\"\n __license__ = \"GPL\"\n __maintainer__ = __author__\n __email__ = \"mail@qutebrowser.org\"\n-__version_info__ = (1, 5, 0)\n-__version__ = '.'.join(str(e) for e in __version_info__)\n+__version__ = \"1.5.0\"\n+__version_info__ = [int(part) for part in __version__.split('.')]\n __description__ = \"A keyboard-driven, vim-like browser based on PyQt5.\"\n \n basedir = os.path.dirname(os.path.realpath(__file__))\n+appdata_path = os.path.join(os.path.dirname(basedir), \"misc\",\n+                            \"qutebrowser.appdata.xml\")\nReview:"}
{"pred": "The error line and position should be updated to reflect the new line and position.", "gold": "Revert this change and see below why...", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -750,8 +750,8 @@ func TestConfigCheck(t *testing.T) {\n                 http_port = 8222\n \t\t\t\t`,\n \t\t\terr:       errors.New(`Duplicate user \"foo\" detected`),\n-\t\t\terrorLine: 6,\n-\t\t\terrorPos:  21,\n+\t\t\terrorLine: 5,\n+\t\t\terrorPos:  19,\n \t\t},\n \t\t{\n \t\t\tname: \"when accounts block imports are not a list\",\nReview:"}
{"pred": "This change should be tested to ensure that the new dataset is compatible with the model.", "gold": "Should not switch to `lvis_v1_instance` here because that base config uses ClassBalancedDataset to oversample the data.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,6 +1,6 @@\n _base_ = [\n     '../_base_/models/cascade_mask_rcnn_r50_fpn.py',\n-    '../_base_/datasets/coco_instance.py',\n+    '../_base_/datasets/lvis_v1_instance.py',\n     '../_base_/schedules/schedule_2x.py', '../_base_/default_runtime.py'\n ]\n \nReview:"}
{"pred": "Changed log level from info to finest. This should help reduce log noise.", "gold": "This is an informational message that allows someone to read the console output and understand how the grid node is configured. Please leave.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -70,7 +70,7 @@ public class NodeOptions {\n       Capabilities caps = info.getCanonicalCapabilities();\n       builders.stream()\n           .filter(builder -> builder.score(caps) > 0)\n-          .peek(builder -> LOG.info(String.format(\"Adding %s %d times\", caps, info.getMaximumSimultaneousSessions())))\n+          .peek(builder -> LOG.finest(String.format(\"Adding %s %d times\", caps, info.getMaximumSimultaneousSessions())))\n           .forEach(builder -> {\n             DriverService.Builder freePortBuilder = builder.usingAnyFreePort();\n \nReview:"}
{"pred": "It would be nice to have some documentation for the new methods.", "gold": "This doesn't make sense to me. What does RaiseSingleton mean? To me it sounds like a single object is being.. raised? Not sure.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -52,6 +52,9 @@ type Alert interface {\n \t// GetKvdbInstance.\n \tGetKvdbInstance() kvdb.Kvdb\n \n+\t// RaiseSingleton raises a singleton alert.\n+\tRaiseSingleton(alert *api.Alert) error\n+\n \t// Raise raises an Alert.\n \tRaise(alert *api.Alert) error\n \nReview:"}
{"pred": "The jobExecutorTests variable is not being used, should it be removed?", "gold": "What's the benefit of having jobExecutorTests as a member variable? What do you think about making the method static? Afterall, it is a stateless method.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -45,6 +45,7 @@ public class JavaProcessJobTest {\n   private JavaProcessJob job = null;\n   private Props props = null;\n   private Logger log = Logger.getLogger(JavaProcessJob.class);\n+  private AllJobExecutorTests jobExecutorTests = null;\n \n   private static String classPaths;\n \nReview:"}
{"pred": "Good addition, this should help users quickly identify the available commands.", "gold": "This looks like it's only downloading things, not really checking their true validity. Especially for the MD object. Should we call `BareRootMetadata.IsValidAndSigned()` in `mdGet`?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -12,6 +12,7 @@ const mdUsageStr = `Usage:\n \n The possible subcommands are:\n   dump\t\tDump metadata objects\n+  check\t\tCheck metadata objects and their associated blocks for errors\n \n `\n \nReview:"}
{"pred": "This should be done in the constructor, not in setup().", "gold": "Nikoli, I believe that this addresses your concern. One question for you or Jae-Seung is if any allocation from the clone is properly cleaned up when the vector is destroyed. I believe that it should.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -136,6 +136,17 @@ void image_data_reader::load() {\n   select_subset_of_data();\n }\n \n+void image_data_reader::setup() {\n+  generic_data_reader::setup();\n+\n+  using InputBuf_T = lbann::cv_image_type<uint8_t>;\n+  auto cvMat = cv::Mat(1, get_linearized_data_size(), InputBuf_T::T(1));\n+  m_thread_cv_buffer.resize(omp_get_max_threads());\n+  for(int tid = 0; tid < omp_get_max_threads(); ++tid) {\n+    m_thread_cv_buffer[tid] = cvMat.clone();\n+  }\n+}\n+\n std::vector<image_data_reader::sample_t> image_data_reader::get_image_list_of_current_mb() const {\n   std::vector<sample_t> ret;\n   ret.reserve(m_mini_batch_size);\nReview:"}
{"pred": "This should be accompanied by a corresponding change to the `String()` method of the `Kind` type.", "gold": "should be `ECSApp`  ", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -48,6 +48,8 @@ const (\n \tKindLambdaApp Kind = \"LambdaApp\"\n \t// KindCloudRunApp represents deployment configuration for a CloudRun application.\n \tKindCloudRunApp Kind = \"CloudRunApp\"\n+\t// KindEcsApp represents deployment configuration for an AWS ECS.\n+\tKindEcsApp Kind = \"EcsApp\"\n \t// KindSealedSecret represents a sealed secret.\n \tKindSealedSecret Kind = \"SealedSecret\"\n )\nReview:"}
{"pred": "This looks good, but you should consider adding a comment explaining why you are doing this for the non-W3C case.", "gold": "flake8 is going to fail on this having 2 lines", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -539,7 +539,13 @@ class WebElement(object):\n     @property\n     def rect(self):\n         \"\"\"A dictionary with the size and location of the element.\"\"\"\n-        return self._execute(Command.GET_ELEMENT_RECT)['value']\n+        if self._w3c:\n+            return self._execute(Command.GET_ELEMENT_RECT)['value']\n+        else:\n+            rect = self.size.copy()\n+            rect.update(self.location)\n+            return rect\n+\n \n     @property\n     def screenshot_as_base64(self):\nReview:"}
{"pred": "This code change removes an import of errors. Is this intentional? If so, why?", "gold": "should we make a dir named controllers/scheduler/podchaos", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -15,7 +15,6 @@ package podfailure\n \n import (\n \t\"context\"\n-\t\"errors\"\n \t\"fmt\"\n \t\"time\"\n \nReview:"}
{"pred": "This change is good, it makes the variable name more descriptive and easier to understand.", "gold": "there seems to be one KeyNode in kubernetes.go of PV.. would it make sense to use it?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -50,9 +50,9 @@ import (\n )\n \n const (\n-\t//KeyNode represents the key values used for specifying the Node Affinity\n+\t//KeyNodeHostname represents the key values used for specifying the Node Affinity\n \t// based on the hostname\n-\tKeyNode = \"kubernetes.io/hostname\"\n+\tKeyNodeHostname = \"kubernetes.io/hostname\"\n )\n \n // NewProvisioner will create a new Provisioner object and initialize\nReview:"}
{"pred": "You should add a comment here explaining why you are adding the github.com/mysteriumnetwork/node/cmd/commands import.", "gold": "Im gonna be a little annoying here but did you configure your linter correctly? This empty line should not be here. Maybe go to settings and check if `goimports` is enabled?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -22,12 +22,12 @@ import (\n \t\"fmt\"\n \t\"time\"\n \n+\t\"github.com/mysteriumnetwork/node/cmd/commands\"\n+\n \t\"github.com/mysteriumnetwork/node/cmd/commands/cli/clio\"\n \t\"github.com/mysteriumnetwork/node/config\"\n-\t\"github.com/mysteriumnetwork/node/config/urfavecli/clicontext\"\n \t\"github.com/mysteriumnetwork/node/core/connection\"\n \t\"github.com/mysteriumnetwork/node/core/connection/connectionstate\"\n-\t\"github.com/mysteriumnetwork/node/core/node\"\n \t\"github.com/mysteriumnetwork/node/datasize\"\n \t\"github.com/mysteriumnetwork/node/identity/registry\"\n \t\"github.com/mysteriumnetwork/node/metadata\"\nReview:"}
{"pred": "Should this be a warning or an error? It looks like it should be an error.", "gold": "Don't think this belongs in this pr", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -122,6 +122,7 @@ public class EmojiPlugin extends Plugin\n \t\t\tcase FRIENDSCHAT:\n \t\t\tcase PRIVATECHAT:\n \t\t\tcase PRIVATECHATOUT:\n+\t\t\tcase MODPRIVATECHAT:\n \t\t\t\tbreak;\n \t\t\tdefault:\n \t\t\t\treturn;\nReview:"}
{"pred": "This should be documented with a comment explaining what it does and why it exists.", "gold": "We can assert on the existence of Outbounds through ClientConfig calls right? Since this is only for tests, do we need this function?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -206,6 +206,16 @@ func (d *Dispatcher) Inbounds() Inbounds {\n \treturn inbounds\n }\n \n+// Outbounds returns a copy of the map of outbounds for this RPC object.\n+// The outbounds are already wrapped with middleware\n+func (d *Dispatcher) Outbounds() Outbounds {\n+\toutbounds := make(Outbounds, len(d.outbounds))\n+\tfor k, v := range d.outbounds {\n+\t\toutbounds[k] = v\n+\t}\n+\treturn outbounds\n+}\n+\n // ClientConfig provides the configuration needed to talk to the given\n // service through an outboundKey. This configuration may be directly\n // passed into encoding-specific RPC clients.\nReview:"}
{"pred": "This looks like a breaking change, as the signature of the interface has changed. Are you sure this is the right approach?", "gold": "@martijn00 so this PR introduces a new ViewModel lifecyle method? It isn't in the PR description/any new docs  ", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -37,14 +37,13 @@ namespace MvvmCross.Core.ViewModels\n \n     public interface IMvxViewModel<TParameter> : IMvxViewModel where TParameter : class\n     {\n-        Task Initialize(TParameter parameter);\n+        void Declare(TParameter parameter);\n     }\n \n     //TODO: Can we keep the IMvxViewModel syntax here? Compiler complains\n     public interface IMvxViewModelResult<TResult> : IMvxViewModel where TResult : class\n     {\n-        void SetClose(TaskCompletionSource<TResult> tcs, CancellationToken cancellationToken);\n-        Task<bool> Close(TResult result);\n+        TaskCompletionSource<object> CloseCompletionSource { get; set; }\n     }\n \n     public interface IMvxViewModel<TParameter, TResult> : IMvxViewModel<TParameter>, IMvxViewModelResult<TResult> where TParameter : class where TResult : class\nReview:"}
{"pred": "This is a nice addition, it should be documented in the docstring of the method.", "gold": "Are these modification duplicate? Or should we move it into base detector.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -89,6 +89,13 @@ class SingleStageDetector(BaseDetector):\n         Returns:\n             dict[str, Tensor]: A dictionary of loss components.\n         \"\"\"\n+        # NOTE the batched image size information may be useful, e.g.\n+        # in DETR, this is needed for the construction of masks, which is\n+        # then used for the transformer_head.\n+        input_img_shape = tuple(img.size()[-2:])\n+        for img_meta in img_metas:\n+            img_meta['input_img_shape'] = input_img_shape\n+\n         x = self.extract_feat(img)\n         losses = self.bbox_head.forward_train(x, img_metas, gt_bboxes,\n                                               gt_labels, gt_bboxes_ignore)\nReview:"}
{"pred": "This should be marked as private, as it is not meant to be used outside of this class.", "gold": "Since this is private and single use it should be un-wrapped inside of the two-arg dagSeed method.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -35,7 +35,7 @@ public class DirectAcyclicGraphSeed {\n             }\n           });\n \n-  public static byte[] dagSeed(final long block) {\n+  private static byte[] dagSeed(final long block) {\n     final byte[] seed = new byte[32];\n     if (Long.compareUnsigned(block, EPOCH_LENGTH) >= 0) {\n       final MessageDigest keccak256 = KECCAK_256.get();\nReview:"}
{"pred": "This looks like a refactoring of the code, but it's not clear why the order of the arguments to ArrayUtility::mergeRecursiveWithOverrule() has been reversed.", "gold": "why the order change? Also for the next chunk. (I understand the result will be the same though)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -160,11 +160,10 @@ abstract class Tx_Solr_PluginBase_PluginBase extends tslib_pibase {\n \t * @param array $configuration configuration array as provided by the TYPO3 core\n \t */\n \tprotected function initialize($configuration) {\n-\t\t$this->conf = $configuration;\n-\n-\t\t$this->conf = t3lib_div::array_merge_recursive_overrule(\n-\t\t\t$GLOBALS['TSFE']->tmpl->setup['plugin.']['tx_solr.'],\n-\t\t\t$this->conf\n+\t\t$this->conf = $GLOBALS['TSFE']->tmpl->setup['plugin.']['tx_solr.'];\n+\t\t\\TYPO3\\CMS\\Core\\Utility\\ArrayUtility::mergeRecursiveWithOverrule(\n+\t\t\t$this->conf,\n+\t\t\t$configuration\n \t\t);\n \n \t\t$this->pi_setPiVarDefaults();\nReview:"}
{"pred": "It would be good to add a comment here to explain why we are adding the Returns field.", "gold": "I wonder if this should just be a single `string`? We don't have any cases where we return different types and it would make the parser simpler to just read a single identifier.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -42,7 +42,9 @@ type FuncDef struct {\n \t// Not part of the grammar. Used to indicate internal targets that can only\n \t// be called using keyword arguments.\n \tKeywordsOnly bool\n-\tIsPrivate    bool\n+\t// allowed return types of the FuncDef\n+\tReturns   []string\n+\tIsPrivate bool\n }\n \n // A ForStatement implements the 'for' statement.\nReview:"}
{"pred": "Should this be NULL checked?", "gold": "I don't think this needs to change. Can you go back to the previous implementation?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -125,7 +125,7 @@ abstract class BaseDataReader<T> implements Closeable {\n \n   protected InputFile getInputFile(FileScanTask task) {\n     Preconditions.checkArgument(!task.isDataTask(), \"Invalid task type\");\n-    return inputFiles.get(task.file().path().toString());\n+    return getInputFile(task.file().path().toString());\n   }\n \n   protected InputFile getInputFile(String location) {\nReview:"}
{"pred": "Should this be renamed to MoleculeCommands to make it clear what it is?", "gold": "Bump it 2 lines higher, 'c' > 'u'.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -32,7 +32,7 @@ from jinja2 import PackageLoader\n \n import molecule.utilities as utilities\n import molecule.validators as validators\n-from provisioners import Ansible\n+from molecule.core import Molecule\n \n \n class Commands(object):\nReview:"}
{"pred": "Please add a comment to explain the purpose of this file.", "gold": "Please do not add author here", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,11 @@\n+/**\n+ * Copyright @ 2018-present. All rights reserved by Vesoft Inc.\n+ * Author: Fenglin Hou <dutor@vesoft-inc.com>\n+ */\n+#include \"parser/AstTypes.h\"\n+\n+namespace vesoft {\n+\n+\n+\n+}\nReview:"}
{"pred": "This is a good addition, as it allows us to use the action package.", "gold": "Similarly, we should be able to persist action uniformly", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -4,6 +4,7 @@ import (\n \t\"database/sql\"\n \t\"encoding/hex\"\n \n+\t\"github.com/iotexproject/iotex-core/action\"\n \t\"github.com/iotexproject/iotex-core/blockchain\"\n \t\"github.com/iotexproject/iotex-core/config\"\n \t\"github.com/iotexproject/iotex-core/db/rds\"\nReview:"}
{"pred": "This should be removed in production mode as it will prevent caching.", "gold": "I think i'd prefer this override to be in the test helper instead, if that's possible?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,3 +1,8 @@\n+#This prevents caching via the browser\n+#in testing mode\n+module ActionController::ConditionalGet\n+    def expires_in(*args) ; end\n+end\n Workshops::Application.configure do\n   # Settings specified here will take precedence over those in config/application.rb\n \nReview:"}
{"pred": "Good catch, this is a necessary step to ensure the directory exists before trying to move the file.", "gold": "This would be better with context added via wrapping or fmt.errorf()", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -134,6 +134,13 @@ func Untar(source string, dest string, extractionDir string) error {\n \t\tcase tar.TypeReg:\n \t\t\tfallthrough\n \t\tcase tar.TypeRegA:\n+\t\t\t// Always ensure the directory is created before trying to move the file.\n+\t\t\tfullPathDir := filepath.Dir(fullPath)\n+\t\t\terr = os.MkdirAll(fullPathDir, 0755)\n+\t\t\tif err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\n \t\t\t// For a regular file, create and copy the file.\n \t\t\texFile, err := os.Create(fullPath)\n \t\t\tif err != nil {\nReview:"}
{"pred": "Good practice to add a copyright notice and license header to the file.", "gold": "What's the purpose of this file?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,19 @@\n+//  Copyright 2020 Google Inc. All Rights Reserved.\n+//\n+//  Licensed under the Apache License, Version 2.0 (the \"License\");\n+//  you may not use this file except in compliance with the License.\n+//  You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//  Unless required by applicable law or agreed to in writing, software\n+//  distributed under the License is distributed on an \"AS IS\" BASIS,\n+//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//  See the License for the specific language governing permissions and\n+//  limitations under the License.\n+\n+// Package assert provides convenience functions that help a method or constructor check whether\n+// it was invoked correctly (whether its preconditions have been met).\n+//\n+// When the assertion fails, a panic occurs, allowing bugs to be found in a fail-fast manner.\n+package assert\nReview:"}
{"pred": "Should we check for passcodeLengthKnown before setting the passcodeLength?", "gold": "@bhariharan Why was passcode length requirement allowed to be lowered?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -616,12 +616,14 @@ public class PasscodeManager  {\n      */\n     public void setPasscodeLength(Context ctx, int passcodeLength) {\n     \tif (passcodeLength > this.passcodeLength) {\n-            if (hasStoredPasscode(ctx)) {\n+            if (hasStoredPasscode(ctx) && passcodeLengthKnown) {\n                 this.passcodeChangeRequired = true;\n             }\n+\n+            this.passcodeLength = passcodeLength;\n     \t}\n-        this.passcodeLength = passcodeLength;\n-    \tthis.passcodeLengthKnown = true;\n+\n+        this.passcodeLengthKnown = true;\n         storeMobilePolicy(ctx);\n     }\n \nReview:"}
{"pred": "It looks like you have removed the AWS and GCP related imports. Is this intentional?", "gold": "This file needs a license header, too. Sorry I didn't catch that earlier.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -6,14 +6,6 @@ import (\n \t\"flag\"\n \t\"io/ioutil\"\n \t\"log\"\n-\n-\t\"github.com/aws/aws-sdk-go/aws\"\n-\t\"github.com/aws/aws-sdk-go/aws/credentials\"\n-\t\"github.com/aws/aws-sdk-go/aws/session\"\n-\t\"github.com/google/go-cloud/blob\"\n-\t\"github.com/google/go-cloud/blob/gcsblob\"\n-\t\"github.com/google/go-cloud/blob/s3blob\"\n-\t\"github.com/google/go-cloud/gcp\"\n )\n \n const bucketName = \"my-cool-bucket\"\nReview:"}
{"pred": "Is this the right place to convert genesisText to a string? It might be better to do it earlier.", "gold": "probably don't need `[:]` why not reference into `github.com/algorand/go-algorand/daemon/algod/api/server/lib` here and skip bouncing off daemon/algod/server.go ?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -289,7 +289,7 @@ func main() {\n \t\t}\n \t}\n \n-\terr = s.Initialize(cfg, phonebookAddresses)\n+\terr = s.Initialize(cfg, phonebookAddresses, string(genesisText[:]))\n \tif err != nil {\n \t\tfmt.Fprintln(os.Stderr, err)\n \t\tlog.Error(err)\nReview:"}
{"pred": "We should add a comment here explaining why we are using the homogen_table_builder.", "gold": "Why reference is converted to table?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -86,8 +86,13 @@ public:\n                              const table& y_data,\n                              const table& result_values) {\n         auto reference = compute_reference(scale, shift, x_data, y_data);\n+        const table reference_table = dal::detail::homogen_table_builder{}\n+                                          .reset(reference.get_array(),\n+                                                 reference.get_row_count(),\n+                                                 reference.get_column_count())\n+                                          .build();\n         const double tol = te::get_tolerance<Float>(3e-4, 1e-9);\n-        const double diff = la::l_inf_norm(reference, la::matrix<double>::wrap(result_values));\n+        const double diff = te::abs_error(reference_table, result_values);\n         CHECK(diff < tol);\n     }\n \nReview:"}
{"pred": "This code should be refactored to use a pagination library to handle pagination logic.", "gold": "should we implement pagination in the fake datastore so the server startup code that paginates entries for trust domain validation can be tested?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -347,6 +347,19 @@ func (s *DataStore) ListRegistrationEntries(ctx context.Context,\n \ts.mu.Lock()\n \tdefer s.mu.Unlock()\n \n+\t// no pagination allow for this fake, for now it return only one page\n+\tif req.Pagination != nil {\n+\t\tif req.Pagination.Token == 0 {\n+\t\t\treq.Pagination.Token = 1\n+\t\t} else {\n+\t\t\t// for now only 1 page is returned\n+\t\t\treturn &datastore.ListRegistrationEntriesResponse{\n+\t\t\t\tEntries:    []*common.RegistrationEntry{},\n+\t\t\t\tPagination: req.Pagination,\n+\t\t\t}, nil\n+\t\t}\n+\t}\n+\n \t// add the registration entries to the map\n \tentriesSet := make(map[string]*common.RegistrationEntry)\n \tfor _, entry := range s.registrationEntries {\nReview:"}
{"pred": "This should be documented in the comments as to why we are doing this.", "gold": "What mechanism will be exposed so the caller knows they're using the vectorized version?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -15,6 +15,12 @@ func Compile(scope Scope, f *semantic.FunctionExpression, in semantic.MonoType)\n \t\treturn nil, errors.Newf(codes.Invalid, \"function input must be an object @ %v\", f.Location())\n \t}\n \n+\t// If the function is vectorizable, `f.Vectorized` will be populated, and\n+\t// we should use the FunctionExpression it points to instead of `f`\n+\tif f.Vectorized != nil {\n+\t\tf = f.Vectorized\n+\t}\n+\n \t// Retrieve the function argument types and create an object type from them.\n \tfnType := f.TypeOf()\n \targN, err := fnType.NumArguments()\nReview:"}
{"pred": "It's better to use the same type of response for both success and error cases.", "gold": "Can we remove respond_to block its not required here", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -20,9 +20,9 @@ class TopicsController < ApplicationController\n     @topic = build_new_topic\n     respond_to do |format|\n       if verify_recaptcha(model: @topic) && @topic.save\n-        format.html { redirect_to forum_path(@forum), flash: { success: t('.success') } }\n+        format.html { redirect_to forum_path(@forum), notice: t('.success') }\n       else\n-        format.html { redirect_to forum_path(@forum), flash: { error: t('.error') } }\n+        format.html { render :new }\n       end\n     end\n   end\nReview:"}
{"pred": "It's generally not a good idea to use a using namespace directive. It's better to use the full namespace for clarity.", "gold": "Do not do that even in example, we demonstrate bad practice", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -23,12 +23,13 @@\n #include \"oneapi/dal/algo/jaccard.hpp\"\n #include \"oneapi/dal/graph/service_functions.hpp\"\n #include \"oneapi/dal/graph/undirected_adjacency_vector_graph.hpp\"\n-#include \"oneapi/dal/io/graph_csv_data_source.hpp\"\n-#include \"oneapi/dal/io/load_graph.hpp\"\n+#include \"oneapi/dal/io/csv.hpp\"\n #include \"oneapi/dal/table/homogen.hpp\"\n \n namespace dal = oneapi::dal;\n \n+using namespace dal;\n+\n /// Computes Jaccard similarity coefficients for the graph. The upper triangular\n /// matrix is processed only as it is symmetic for undirected graph.\n ///\nReview:"}
{"pred": "You should add a comment here explaining why you are checking for is_cygwin and why you are using wmic for non-cygwin systems.", "gold": "Hm, taking a second look over this, this is why we have the object inheritance structure that we do. This could be divided up by having a custom determine_if_x86_64 in the pswindows/exec hosts and then a default method in hosts.rb. That way all the custom ps windows work is in a single location.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -202,7 +202,13 @@ module Beaker\n     #Examine the host system to determine the architecture\n     #@return [Boolean] true if x86_64, false otherwise\n     def determine_if_x86_64\n-      result = exec(Beaker::Command.new(\"arch | grep x86_64\"), :acceptable_exit_codes => (0...127))\n+      if self['is_cygwin'].nil? or self['is_cygwin'] == true\n+        command = Beaker::Command.new(\"arch | grep x86_64\")\n+      else\n+        command = Beaker::Command.new(\"echo '' | wmic os get osarchitecture | FindStr 64-bit\")\n+      end\n+\n+      result = exec(command, :acceptable_exit_codes => (0...127))\n       result.exit_code == 0\n     end\n \nReview:"}
{"pred": "You should check the result of Complete() to ensure it was successful.", "gold": "We have to `.Complete` now because of empty/null string test cases.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -84,11 +84,13 @@ namespace Microsoft.AspNetCore.Server.Kestrel.Core.Tests\n         [InlineData(null, new byte[0])]\n         public void EncodesAsAscii(string input, byte[] expected)\n         {\n-            var writerBuffer = _pipe.Writer;\n-            var writer = new BufferWriter<PipeWriter>(writerBuffer);\n+            var pipeWriter = _pipe.Writer;\n+            var writer = new BufferWriter<PipeWriter>(pipeWriter);\n             writer.WriteAsciiNoValidation(input);\n             writer.Commit();\n-            writerBuffer.FlushAsync().GetAwaiter().GetResult();\n+            pipeWriter.FlushAsync().GetAwaiter().GetResult();\n+            pipeWriter.Complete();\n+\n             var reader = _pipe.Reader.ReadAsync().GetAwaiter().GetResult();\n \n             if (expected.Length > 0)\nReview:"}
{"pred": "Is this the desired behavior? It looks like it's overriding the user's option if it's nil.", "gold": "Is there still a way to specify no recursion?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -166,7 +166,7 @@ module Beaker\n     def scp_to source, target, options = {}, dry_run = false\n       return if dry_run\n \n-      options[:recursive]  = File.directory?(source) if options[:recursive].nil?\n+      options[:recursive]  = File.directory?(source)\n       options[:chunk_size] = options[:chunk_size] || 16384\n \n       result = Result.new(@hostname, [source, target])\nReview:"}
{"pred": "You should add a comment to explain the purpose of the Tool struct.", "gold": "How is this name being URI safe and being used programmatically related?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -438,6 +438,15 @@ Loop:\n \treturn w, nil\n }\n \n+// Tool is used to communicate the tool's name ot the user.\n+type Tool struct {\n+\n+\t// HumanReadableName is used for error messages, for example: \"image import\".\n+\tHumanReadableName string\n+\t// URISafeName is used programmatically, eg: \"image-import\"\n+\tURISafeName string\n+}\n+\n // EnvironmentSettings controls the resources that are used during tool execution.\n type EnvironmentSettings struct {\n \t// Location of workflows\nReview:"}
{"pred": "You should add a check here to make sure that the plugin is not null before calling the i18n methods.", "gold": "I think we have to keep this as a fallback for now, else it's a small breaking change :(", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -358,14 +358,14 @@ module.exports = class ProviderView {\n       state = this.plugin.getPluginState()\n       state.selectedFolders[folderId] = { loading: false, files: files }\n       this.plugin.setPluginState({ selectedFolders: folders })\n-      const dashboard = this.plugin.uppy.getPlugin('Dashboard')\n+\n       let message\n       if (files.length) {\n-        message = dashboard.i18n('folderAdded', {\n+        message = this.plugin.uppy.i18n('folderAdded', {\n           smart_count: files.length, folder: folder.name\n         })\n       } else {\n-        message = dashboard.i18n('emptyFolderAdded')\n+        message = this.plugin.uppy.i18n('emptyFolderAdded')\n       }\n       this.plugin.uppy.info(message)\n     }).catch((e) => {\nReview:"}
{"pred": "This should be tested for other operators as well to ensure the expected behavior is consistent.", "gold": "nit: shouldn't be part of this PR.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -80,7 +80,7 @@ func TestOpImmediateNote(t *testing.T) {\n func TestOpDocExtra(t *testing.T) {\n \txd := OpDocExtra(\"bnz\")\n \trequire.NotEmpty(t, xd)\n-\txd = OpDocExtra(\"+\")\n+\txd = OpDocExtra(\"-\")\n \trequire.Empty(t, xd)\n }\n \nReview:"}
{"pred": "Good catch, this should be a MongoError instead of a generic Error.", "gold": "this change looks wrong to me. I think the test is trying to signal that something went wrong by throwing the `Error` here, otherwise the `catch` below will swallow it.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -83,7 +83,7 @@ describe('Cursor Async Iterator Tests', function() {\n           expect(doc).to.exist;\n           cursor.close();\n         }\n-        throw new Error('expected closing the cursor to break iteration');\n+        throw new MongoError('expected closing the cursor to break iteration');\n       } catch (e) {\n         expect(e).to.be.an.instanceOf(MongoError);\n       }\nReview:"}
{"pred": "This should be moved to the top of the method, as it's an optimization that should be done first.", "gold": "I'm doubting if this should be `if (_layout.IsThreadAgnostic)`, as ThreadAgnostic stuff could be calculated on every thread. (and thus could be lazy). non-ThreadAgnostic should be calculated on the main thread.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -164,6 +164,13 @@ namespace NLog.Internal\n \n             if (reusableBuilder != null)\n             {\n+                if (!_layout.IsThreadAgnostic)\n+                {\n+                    string cachedResult;\n+                    if (logEvent.TryGetCachedLayoutValue(_layout, out cachedResult))\n+                        return cachedResult;\n+                }\n+\n                 _layout.RenderAppendBuilder(logEvent, reusableBuilder);\n \n                 if (_cachedPrevRawFileName != null && _cachedPrevRawFileName.Length == reusableBuilder.Length)\nReview:"}
{"pred": "You should add a comment here explaining why you are adding the logger.", "gold": "Please use only `Logger` instead of `org.slf4j.Logger`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -7,14 +7,19 @@ import javafx.scene.control.ToggleGroup;\n import javafx.scene.layout.HBox;\n import org.phoenicis.javafx.views.common.widgets.lists.CombinedListWidget;\n import org.phoenicis.javafx.views.common.widgets.lists.ListWidgetType;\n+import org.slf4j.LoggerFactory;\n \n import java.util.Arrays;\n import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n \n /**\n  * Created by marc on 15.05.17.\n  */\n public class LeftListWidgetChooser<E> extends HBox {\n+    private final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(LeftListWidgetChooser.class);\n+\n     private List<CombinedListWidget<E>> listWidgets;\n \n     private ToggleGroup toggleGroup;\nReview:"}
{"pred": "This should be checked for NULL before use.", "gold": "Should this be \"no limiter drop\", since this isn't an absolutely essential activity for the stability of the network?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -326,6 +326,10 @@ void nano::block_processor::process_live (nano::transaction const & transaction_\n \t{\n \t\tnode.network.flood_block_initial (block_a);\n \t}\n+\telse if (!node.flags.disable_block_processor_republishing)\n+\t{\n+\t\tnode.network.flood_block (block_a, nano::buffer_drop_policy::no_limiter_drop);\n+\t}\n \n \tif (node.websocket_server && node.websocket_server->any_subscriber (nano::websocket::topic::new_unconfirmed_block))\n \t{\nReview:"}
{"pred": "This is a good change, it makes the code more explicit and easier to understand.", "gold": "I updated many of the success messages, because most of these operations don't return data if they succeed. This meant many of the operations would print: `Success null` if the script ran successfully.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -22,8 +22,8 @@ var iam = new AWS.IAM({apiVersion: '2010-05-08'});\n \n iam.deleteAccountAlias({AccountAlias: process.argv[2]}, function(err, data) {\n   if (err) {\n-    console.log(\"Error\", err);\n+    throw err;\n   } else {\n-    console.log(\"Success\", data);\n+    console.log('Account alias ' + process.argv[2] + ' deleted.');\n   }\n });\nReview:"}
{"pred": "Should this be logged? It's not a critical error, but it's useful to know if the command isn't found.", "gold": "Could you simply add it to the previous clause ?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -45,6 +45,8 @@ def _test_pyx():\n                                       stdout=devnull, stderr=subprocess.STDOUT)\n     except (subprocess.CalledProcessError, OSError):\n         return False\n+    except FileNotFoundError as fnfe:\n+        return False\n     else:\n         return r == 0\n \nReview:"}
{"pred": "This looks much cleaner now, nice work!", "gold": "@joshyrobot, I think you can just use localeCompare with only the first argument and leave the other arguments out (here and all the other lines changed). It seems to do the right thing, and then we don't have to worry about these extra options.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -108,13 +108,10 @@ Blockly.Procedures.sortProcedureMutations_ = function(mutations) {\n     var procCodeA = a.getAttribute('proccode');\n     var procCodeB = b.getAttribute('proccode');\n \n-    if (procCodeA < procCodeB) {\n-      return -1;\n-    } else if (procCodeA > procCodeB) {\n-      return 1;\n-    } else {\n-      return 0;\n-    }\n+    return procCodeA.localeCompare(procCodeB, undefined, {\n+      sensitivity: 'base',\n+      numeric: true\n+    });\n   });\n \n   return newMutations;\nReview:"}
{"pred": "We should probably check if slaOptions is not null before trying to set it.", "gold": "@chengren311 : where does this logic move to?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -239,6 +239,10 @@ public class ExecuteFlowAction implements TriggerAction {\n     }\n     exflow.setExecutionOptions(executionOptions);\n \n+    if (slaOptions != null && slaOptions.size() > 0) {\n+      exflow.setSlaOptions(slaOptions);\n+    }\n+\n     try {\n       logger.info(\"Invoking flow \" + project.getName() + \".\" + flowName);\n       executorManager.submitExecutableFlow(exflow, submitUser);\nReview:"}
{"pred": "Should we check if the additional policies are valid before attaching them?", "gold": "Can we have a `nil` exception check at `s.scope.ManagedMachinePool`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -204,6 +204,14 @@ func (s *NodegroupService) reconcileNodegroupIAMRole() error {\n \t}\n \n \tpolicies := NodegroupRolePolicies()\n+\tif len(s.scope.ManagedMachinePool.Spec.RoleAdditionalPolicies) > 0 {\n+\t\tif !s.scope.AllowAdditionalRoles() {\n+\t\t\treturn ErrCannotUseAdditionalRoles\n+\t\t}\n+\n+\t\tpolicies = append(policies, s.scope.ManagedMachinePool.Spec.RoleAdditionalPolicies...)\n+\t}\n+\n \t_, err = s.EnsurePoliciesAttached(role, aws.StringSlice(policies))\n \tif err != nil {\n \t\treturn errors.Wrapf(err, \"error ensuring policies are attached: %v\", policies)\nReview:"}
{"pred": "This code change removes the facetSortOptions property. Is this intentional? If so, why?", "gold": "Rather than deleting this, should you just reformat it so it's the `*` settings, so if nothing is configured in facets.ini, the existing default behavior continues to work?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -40,16 +40,6 @@ class Options extends \\VuFind\\Search\\Base\\Options\n {\n     use \\VuFind\\Search\\Options\\ViewOptionsTrait;\n \n-    /**\n-     * Available sort options for facets\n-     *\n-     * @var array\n-     */\n-    protected $facetSortOptions = [\n-        'count' => 'sort_count',\n-        'index' => 'sort_alphabetic'\n-    ];\n-\n     /**\n      * Hierarchical facets\n      *\nReview:"}
{"pred": "It is better to use str_replace() instead of ucfirst() to make the property label more readable.", "gold": "wrap, single line", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -31,11 +31,14 @@ class ManagerConfiguration {\n       '#collapsible' => FALSE,\n     ];\n     foreach ($this->datastoreManager->getConfigurableProperties() as $property => $default_value) {\n+      $propety_label = str_replace(\"_\", \" \", $property);\n+      $propety_label = ucfirst($propety_label);\n+\n       if ($property == \"delimiter\") {\n         $form['import_options'][\"datastore_manager_config_{$property}\"] = array(\n           '#type' => 'select',\n           // @codingStandardsIgnoreStart\n-          '#title' => ucfirst(t(\"{$property}\")),\n+          '#title' => t($propety_label),\n           // @codingStandardsIgnoreEnd\n           '#options' => array(\n             \",\" => \",\",\nReview:"}
{"pred": "This should be documented with a Javadoc comment.", "gold": "always use brackets for if statements", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -202,6 +202,12 @@ public class JavaContextCommon {\n \n     public abstract String getReturnType();\n \n+    public String getGenericAwareReturnType() {\n+      String returnType = getReturnType();\n+      if (returnType == null || returnType.isEmpty()) return \"Void\";\n+      else return returnType;\n+    }\n+\n     public abstract ImmutableList<Variable> getParams();\n \n     public abstract ImmutableList<Variable> getRequiredParams();\nReview:"}
{"pred": "You can remove the static constructor here as it is no longer needed.", "gold": "`NUnitIntegration` doesn't need to cache this anymore.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -34,14 +34,13 @@ namespace Datadog.Trace.ClrProfiler.Integrations.Testing\n         private const string NUnitTestExecutionContextType = \"NUnit.Framework.Internal.TestExecutionContext\";\n \n         private static readonly Vendors.Serilog.ILogger Log = DatadogLogging.GetLogger(typeof(NUnitIntegration));\n-        private static readonly FrameworkDescription _runtimeDescription;\n+        private static readonly FrameworkDescription RuntimeDescription;\n \n         static NUnitIntegration()\n         {\n             // Preload environment variables.\n             CIEnvironmentValues.DecorateSpan(null);\n-\n-            _runtimeDescription = FrameworkDescription.Create();\n+            RuntimeDescription = FrameworkDescription.Instance;\n         }\n \n         /// <summary>\nReview:"}
{"pred": "The logic here is a bit confusing, consider adding a comment to explain what is going on.", "gold": "Why did you change it to `>=` here?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -210,8 +210,9 @@ EXTS_ACCESS_COUNTS = textwrap.dedent(\"\"\"\\\n             eventname,\n             bucket,\n             lower(CASE\n-                WHEN cardinality(parts) > 2 THEN concat(element_at(parts, -2), '.', element_at(parts, -1))\n-                WHEN cardinality(parts) = 2 THEN element_at(parts, -1)\n+                WHEN cardinality(parts) > 2 AND lower(element_at(parts, -1)) = 'gz'\n+                    THEN concat(element_at(parts, -2), '.', element_at(parts, -1))\n+                WHEN cardinality(parts) >= 2 THEN element_at(parts, -1)\n                 ELSE ''\n                 END\n             ) AS ext,\nReview:"}
{"pred": "This looks like it should be a separate method, as it's a bit complex.", "gold": "Looks like this needs to be updated. There is no need to remove `hadoop.` if Hadoop tables don't use this code path.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -30,8 +30,11 @@ abstract class BaseAction<R> implements Action<R> {\n     String tableName = table().toString();\n     if (tableName.contains(\"/\")) {\n       return tableName + \"#\" + type;\n-    } else if (tableName.startsWith(\"hadoop.\") || tableName.startsWith(\"hive.\")) {\n-      // HiveCatalog and HadoopCatalog prepend a logical name which we need to drop for Spark 2.4\n+    } else if (tableName.startsWith(\"hadoop.\")) {\n+      // Load a path by HadoopCatalog or HadoopTables\n+      return table().location() + \"#\" + type;\n+    } else if (tableName.startsWith(\"hive.\")) {\n+      // HiveCatalog prepend a logical name which we need to drop for Spark 2.4\n       return tableName.replaceFirst(\"(hadoop\\\\.)|(hive\\\\.)\", \"\") + \".\" + type;\n     } else {\n       return tableName + \".\" + type;\nReview:"}
{"pred": "This is a good change, as it adds a dependency on the Digest library which is needed for the code.", "gold": "This require isn't need anymore, right?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,4 +1,5 @@\n require 'fileutils'\n+require 'digest'\n \n module RSpec\n   module Core\nReview:"}
{"pred": "Good addition, crypto package will be useful for payment related operations.", "gold": "a bit weird to see payments crypto package inside connection manager. There probably will be services not having any relation with payments that will use connection manager. Thats why probably ping-ping by itself can be useful without any relation to payments..", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -32,6 +32,7 @@ import (\n \t\"github.com/mysteriumnetwork/node/session\"\n \t\"github.com/mysteriumnetwork/node/session/balance\"\n \t\"github.com/mysteriumnetwork/node/session/promise\"\n+\t\"github.com/mysteriumnetwork/payments/crypto\"\n \t\"github.com/pkg/errors\"\n )\n \nReview:"}
{"pred": "Is $this->xmlType set somewhere?", "gold": "I like the overall idea here, but I wonder if it would be more clear to define the property in the trait, and then set it in the constructors of the classes using the trait. Alternatively, at a bare minimum, it may be a good idea to add `?? 'Bibliographic'` here, to account for the possibility of the trait being used in a class that does not define the property at all.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -889,7 +889,7 @@ trait MarcAdvancedTrait\n                 'http://www.loc.gov/standards/marcxml/schema/MARC21slim.xsd',\n                 'http://www.w3.org/2001/XMLSchema-instance'\n             );\n-            $xml->record->addAttribute('type', 'Bibliographic');\n+            $xml->record->addAttribute('type', $this->xmlType);\n             return $xml->record->asXML();\n         }\n \nReview:"}
{"pred": "This should be documented better, explaining why this value is chosen.", "gold": "I would prefer to not have a magic number, but construct this value out of other constants we already have.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -2,6 +2,10 @@ package protocol\n \n import \"time\"\n \n+// NonForwardSecurePacketSizeReduction is the number of bytes a non forward-secure packet has to be smaller than a forward-secure packet\n+// This makes sure that those packets can always be retransmitted without splitting the contained StreamFrames\n+const NonForwardSecurePacketSizeReduction = 50\n+\n // DefaultMaxCongestionWindow is the default for the max congestion window\n const DefaultMaxCongestionWindow = 1000\n \nReview:"}
{"pred": "This looks good, but it might be worth adding a comment to explain why we're adding the API capability here.", "gold": "The limitation is if somebody configure another policy with the same name, but it is an edge case we can ignore I guess.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -101,6 +101,15 @@ def setup_authentication(config):\n     from configuration.\n     \"\"\"\n     config.include('pyramid_multiauth')\n+    settings = config.get_settings()\n+\n+    policies = aslist(settings['multiauth.policies'])\n+    if 'basicauth' in policies:\n+        config.add_api_capability(\n+            \"basicauth\",\n+            description=\"Very basic authentication sessions. Not for production use.\",\n+            url=\"http://kinto.readthedocs.io/en/stable/api/1.x/authentication.html\",\n+        )\n \n     # Track policy used, for prefixing user_id and for logging.\n     def on_policy_selected(event):\nReview:"}
{"pred": "This looks good, no issues here.", "gold": "? The package is named `hashivault`.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -31,8 +31,8 @@ import (\n \t_ \"gocloud.dev/secrets/awskms\"\n \t_ \"gocloud.dev/secrets/azurekeyvault\"\n \t_ \"gocloud.dev/secrets/gcpkms\"\n-\t_ \"gocloud.dev/secrets/hashivault\"\n \t_ \"gocloud.dev/secrets/localsecrets\"\n+\t_ \"gocloud.dev/secrets/vault\"\n )\n \n const helpSuffix = `\nReview:"}
{"pred": "Should we add a warning here if the value is not one of the expected values?", "gold": "I don't think this should enable xwayland, because it's convenient to toggle xwayland just by setting `xwayland` to `false`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -240,6 +240,9 @@ static int config_ini_handler(void *user, const char *section, const char *name,\n \t\tif (strcmp(name, \"xwayland\") == 0) {\n \t\t\tif (strcasecmp(value, \"true\") == 0) {\n \t\t\t\tconfig->xwayland = true;\n+\t\t\t} else if (strcasecmp(value, \"lazy\") == 0) {\n+\t\t\t\tconfig->xwayland = true;\n+\t\t\t\tconfig->xwayland_lazy = true;\n \t\t\t} else if (strcasecmp(value, \"false\") == 0) {\n \t\t\t\tconfig->xwayland = false;\n \t\t\t} else {\nReview:"}
{"pred": "It looks like a line of code was removed here. Is this intentional?", "gold": "Remove this line by accident?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -28,7 +28,6 @@ import (\n \tfakeclientset \"k8s.io/client-go/kubernetes/fake\"\n \tcertutil \"k8s.io/client-go/util/cert\"\n \t\"k8s.io/client-go/util/keyutil\"\n-\n \tfakeaggregatorclientset \"k8s.io/kube-aggregator/pkg/client/clientset_generated/clientset/fake\"\n )\n \nReview:"}
{"pred": "You should consider using the JavaPluginConvention to get the SourceSetContainer, rather than creating a new one.", "gold": "Calling `.stream()` on a `DomainObjectCollection` is pretty much always a bug, as it doesn't include objects added later (and encourages people to use afterEvaluate). I wonder if we should make this an error prone check?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -16,12 +16,13 @@\n \n package com.palantir.baseline.plugins;\n \n+import java.util.Collections;\n import java.util.Objects;\n import org.gradle.api.Plugin;\n import org.gradle.api.Project;\n import org.gradle.api.artifacts.Dependency;\n-import org.gradle.api.plugins.JavaPluginConvention;\n import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.SourceSetContainer;\n import org.gradle.api.tasks.compile.JavaCompile;\n \n public final class BaselineImmutables implements Plugin<Project> {\nReview:"}
{"pred": "You should check the return value of FgrepStringInFile() and return an error if it fails.", "gold": "Thanks for paying attention to other places this might happen. This one is particularly important; I probably never should have gotten in the habit of CheckErr(), since it does a log.Panic() explicitly, which looks like something else until you look closely. It's supposed to be used places where \"can't happen\" but Things Can Happen.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -201,7 +201,10 @@ func CreateGitIgnore(targetDir string, ignores ...string) error {\n \n \tif fileutil.FileExists(gitIgnoreFilePath) {\n \t\tsigFound, err := fileutil.FgrepStringInFile(gitIgnoreFilePath, DdevFileSignature)\n-\t\tutil.CheckErr(err)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\n \t\t// If we sigFound the file and did not find the signature in .ddev/.gitignore, warn about it.\n \t\tif !sigFound {\n \t\t\tutil.Warning(\"User-managed %s will not be managed/overwritten by ddev\", gitIgnoreFilePath)\nReview:"}
{"pred": "This should be documented in the comment block above the function.", "gold": "What is the different between nw_tos and ip_dscp? Only high 6 bits vs low 6 bits and supported version?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -275,6 +275,15 @@ func (b *ofFlowBuilder) MatchARPOp(op uint16) FlowBuilder {\n \treturn b\n }\n \n+// MatchIPDscp adds match condition for matching DSCP field in the IP header. Note, OVS use TOS to present DSCP, and\n+// the field name is shown as \"nw_tos\" with OVS command line, and the value is calculated by shifting the given value\n+// left 2 bits.\n+func (b *ofFlowBuilder) MatchIPDscp(dscp uint8) FlowBuilder {\n+\tb.matchers = append(b.matchers, fmt.Sprintf(\"nw_tos=%d\", dscp<<2))\n+\tb.Match.IpDscp = dscp\n+\treturn b\n+}\n+\n // MatchConjID adds match condition for matching conj_id.\n func (b *ofFlowBuilder) MatchConjID(value uint32) FlowBuilder {\n \tb.matchers = append(b.matchers, fmt.Sprintf(\"conj_id=%d\", value))\nReview:"}
{"pred": "Should we add a check for cxSmiles here?", "gold": "I'm assuming that asSmarts & cxSmiles == asSmarts", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -329,12 +329,17 @@ extern \"C\" bool isValidMolBlob(char *data, int len) {\n   return res;\n }\n \n-extern \"C\" char *makeMolText(CROMol data, int *len, bool asSmarts) {\n+extern \"C\" char *makeMolText(CROMol data, int *len, bool asSmarts,\n+                             bool cxSmiles) {\n   ROMol *mol = (ROMol *)data;\n \n   try {\n     if (!asSmarts) {\n-      StringData = MolToSmiles(*mol, true);\n+      if (!cxSmiles) {\n+        StringData = MolToSmiles(*mol);\n+      } else {\n+        StringData = MolToCXSmiles(*mol);\n+      }\n     } else {\n       StringData = MolToSmarts(*mol, false);\n     }\nReview:"}
{"pred": "It looks like the super's setstate is not being called here. Should it be?", "gold": "Seems like an oversight but I don't think the super would do anything else in this case unless I'm mistaken.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -780,7 +780,9 @@ class LabelledData(param.Parameterized):\n         except:\n             self.warning(\"Could not unpickle custom style information.\")\n         self.__dict__.update(d)\n-\n+        # TODO: super's setstate not called?\n+        if \"param\" not in self.__dict__:\n+            self.param = type(self.param)(self.__class__, self=self)\n \n \n class Dimensioned(LabelledData):\nReview:"}
{"pred": "It's good to see that the fields are now marked as readonly.", "gold": "Curious, do we consider this as pedantic for example code?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -30,8 +30,8 @@ namespace Examples.Console\n     internal class InstrumentationWithActivitySource : IDisposable\n     {\n         private const string RequestPath = \"/api/request\";\n-        private SampleServer server = new SampleServer();\n-        private SampleClient client = new SampleClient();\n+        private readonly SampleServer server = new SampleServer();\n+        private readonly SampleClient client = new SampleClient();\n \n         public void Start(ushort port = 19999)\n         {\nReview:"}
{"pred": "This should be tested to ensure it works as expected with the new naming convention.", "gold": "Should we convert the entity name to snake case using `Doctrine\\Common\\Inflector\\Inflector::tableize` or similar ? Should a `snaked_name` or whatever be part of the entity metadata in order to use it for form names, ids, & other html attributes ?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -609,7 +609,7 @@ class AdminController extends Controller\n \n         $formType = $this->useLegacyFormComponent() ? 'easyadmin' : 'JavierEguiluz\\\\Bundle\\\\EasyAdminBundle\\\\Form\\\\Type\\\\EasyAdminFormType';\n \n-        return $this->get('form.factory')->createNamedBuilder('form', $formType, $entity, $formOptions);\n+        return $this->get('form.factory')->createNamedBuilder(strtolower($this->entity['name']), $formType, $entity, $formOptions);\n     }\n \n     /**\nReview:"}
{"pred": "It would be better to have a single GetIP() method that returns both the public and outbound IPs.", "gold": "Should be `client.outboundIp`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -12,9 +12,15 @@ func NewClientFake(IP string) Client {\n \n type clientFake struct {\n \tip string\n+\toutboundIp string\n }\n \n-func (client *clientFake) GetIp() (string, error) {\n+func (client *clientFake) GetPublicIP() (string, error) {\n+\tlog.Info(IPIFY_API_LOG_PREFIX, \"IP faked: \", client.ip)\n+\treturn client.ip, nil\n+}\n+\n+func (client *clientFake) GetOutboundIP() (string, error) {\n \tlog.Info(IPIFY_API_LOG_PREFIX, \"IP faked: \", client.ip)\n \treturn client.ip, nil\n }\nReview:"}
{"pred": "It's good to see the using statements are grouped together, but it would be better to have them sorted alphabetically.", "gold": "Must these `using` statements not go inside the `namespace` block?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -31,6 +31,9 @@\n // THE POSSIBILITY OF SUCH DAMAGE.\n // \n \n+using System.IO;\n+using System.Threading.Tasks;\n+\n namespace NLog.UnitTests.LayoutRenderers\n {\n     using System;\nReview:"}
{"pred": "This looks like a good change to make the code more readable.", "gold": "Why? I thought the previous way was idiomatic. (Same with the `MetadataVer` stuff above.)", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -92,8 +92,8 @@ type fboMutexLevel mutexLevel\n \n const (\n \tfboMDWriter fboMutexLevel = 1\n-\tfboHead                   = 2\n-\tfboBlock                  = 3\n+\tfboHead     fboMutexLevel = 2\n+\tfboBlock    fboMutexLevel = 3\n )\n \n func (o fboMutexLevel) String() string {\nReview:"}
{"pred": "This looks like a stubbed out function. Is this intentional?", "gold": "shouldn't we `reject` here instead?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -12,11 +12,7 @@ define([], function() {\n     }\n \n     function uploadContent(connectionManager, server, options) {\n-        return new Promise(function(resolve, reject) {\n-            require([\"contentuploader\"], function(ContentUploader) {\n-                (new ContentUploader).uploadImages(connectionManager, server).then(resolve, reject)\n-            })\n-        })\n+        return new Promise().resolve();\n     }\n \n     function syncMedia(connectionManager, server, options) {\nReview:"}
{"pred": "Good addition to make the output more user friendly.", "gold": "check err or use gasPriceUnitIOTX, _ := if we are sure action.Core.GasPrice is correct", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -167,10 +167,12 @@ func printActionProto(action *iotextypes.Action) (string, error) {\n \tif err != nil {\n \t\treturn \"\", output.NewError(output.ConvertError, \"failed to convert bytes into address\", err)\n \t}\n+\t//ioctl action should display IOTX unit instead Raul\n+\tgasPriceUnitIOTX, err := util.StringToIOTX(action.Core.GasPrice)\n \tresult := fmt.Sprintf(\"\\nversion: %d  \", action.Core.GetVersion()) +\n \t\tfmt.Sprintf(\"nonce: %d  \", action.Core.GetNonce()) +\n \t\tfmt.Sprintf(\"gasLimit: %d  \", action.Core.GasLimit) +\n-\t\tfmt.Sprintf(\"gasPrice: %s Rau\\n\", action.Core.GasPrice) +\n+\t\tfmt.Sprintf(\"gasPrice: %s IOTX\\n\", gasPriceUnitIOTX) +\n \t\tfmt.Sprintf(\"senderAddress: %s %s\\n\", senderAddress.String(),\n \t\t\tMatch(senderAddress.String(), \"address\"))\n \tswitch {\nReview:"}
{"pred": "It looks like the wait parameter has been removed, is this intentional?", "gold": "Just curious, was wait not used at all before?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -34,7 +34,7 @@ func newHarness(t *testing.T) (drivertest.Harness, error) {\n \treturn &harness{vars: map[string][]byte{}}, nil\n }\n \n-func (h *harness) MakeWatcher(ctx context.Context, name string, decoder *runtimevar.Decoder, wait time.Duration) (driver.Watcher, error) {\n+func (h *harness) MakeWatcher(ctx context.Context, name string, decoder *runtimevar.Decoder) (driver.Watcher, error) {\n \trawVal, found := h.vars[name]\n \tif !found {\n \t\t// The variable isn't set. Create a Variable that always returns an error.\nReview:"}
{"pred": "It looks like you are no longer using the strings package, so it should be removed.", "gold": "nit: can we remove this?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -7,9 +7,10 @@ package manifest\n import (\n \t\"errors\"\n \t\"fmt\"\n+\t\"github.com/google/shlex\"\n \t\"path/filepath\"\n \t\"strconv\"\n-\t\"strings\"\n+\t//\"strings\"\n \n \t\"github.com/aws/aws-sdk-go/aws\"\n \t\"gopkg.in/yaml.v3\"\nReview:"}
{"pred": "Synchronizing the get and add methods is a good idea, but you should consider synchronizing the entire class if there are other methods that could be called concurrently.", "gold": "is it not a problem when one synchronized function is called by other?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -44,11 +44,11 @@ public class NotificationStore {\n         }\n     }\n \n-    public Notification get(int index) {\n+    public synchronized Notification get(int index) {\n         return store.get(index);\n     }\n \n-    public void add(Notification n) {\n+    public synchronized void add(Notification n) {\n         log.info(\"Notification received: \" + n.text);\n         for (int i = 0; i < store.size(); i++) {\n             if (get(i).id == n.id) {\nReview:"}
{"pred": "It is good to see that we are now explicitly setting the parameters that can be updated. However, it would be better to add a comment to explain why we are adding these parameters.", "gold": "We (even as admins) shouldn't override the User Preference settings like `email_master`, `email_posts`, `email_kudos`, `email_new_followers`. These all would be set by the user of their choice. Please do remove these attributes from editing//updating. Thanks!", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,6 +1,7 @@\n ActiveAdmin.register Account do\n-  permit_params :level\n-  actions :index, :show, :edit\n+  permit_params :login, :email, :level, :country_code, :location, :url, :hide_experience, :email_master, :email_posts,\n+                :email_kudos, :email_new_followers, :twitter_account, :affiliation_type, :organization_name\n+  actions :index, :show, :edit, :update\n \n   controller do\n     defaults finder: :fetch_by_login_or_email\nReview:"}
{"pred": "The translation looks correct.", "gold": "\"Este :attribute j est anexado.\" sounds better.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -20,7 +20,7 @@ return [\n     'alpha_dash'           => 'O campo :attribute deve conter apenas letras, n\u00fameros e tra\u00e7os.',\n     'alpha_num'            => 'O campo :attribute deve conter apenas letras e n\u00fameros .',\n     'array'                => 'O campo :attribute deve conter um array.',\n-    'attached'             => 'This :attribute is already attached.',\n+    'attached'             => 'Este :attribute j\u00e1 est\u00e1 ligado.',\n     'before'               => 'O campo :attribute deve conter uma data anterior a :date.',\n     'before_or_equal'      => 'O campo :attribute deve conter uma data inferior ou igual a :date.',\n     'between'              => [\nReview:"}
{"pred": "This should be moved to a separate file and imported in the main file.", "gold": "This line should be repeated for every module that needs testing. One cannot rely on nosetest to automatically discover all the modules. On the bright side, there is no need to change any of the other files.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,6 @@\n+\n+if __name__ == \"__main__\":\n+    import doctest\n+    import databricks.koalas as ks\n+    from databricks.koalas import frame, series\n+    doctest.testmod(frame, extraglobs={\"ks\": ks})\nReview:"}
{"pred": "This line can be removed as it is no longer used.", "gold": "This error was unused", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -301,5 +301,3 @@ var failedIssuanceMu sync.RWMutex\n // If this value is recent, do not make any on-demand certificate requests.\n var lastIssueTime time.Time\n var lastIssueTimeMu sync.Mutex\n-\n-var errNoCert = errors.New(\"no certificate available\")\nReview:"}
{"pred": "Is there any validation needed for the fields in CloseShardRequest?", "gold": "Personally I wish we didn't have a proto for every single little thing we do. RequestShardAction with an enum for the action type would be a lot cleaner imo, but I'm pretty sure that ship has sailed :) Just kvetching.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -212,6 +212,11 @@ type (\n \t\tPreviousRangeID int64\n \t}\n \n+\t// CloseShardRequest is used to notify persistence that we're unloading a shard\n+\tCloseShardRequest struct {\n+\t\tShardID int32\n+\t}\n+\n \t// AddTasksRequest is used to write new tasks\n \tAddTasksRequest struct {\n \t\tShardID int32\nReview:"}
{"pred": "This looks good, but it would be nice to add a comment explaining why this change was made.", "gold": "Does this make more sense as `trails/_trail` now?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,5 @@\n+<% if trail.complete? %>\n+  <%= render \"completed_trails/trail\", trail: trail %>\n+<% else %>\n+  <%= render \"trails/incomplete_trail\", trail: trail %>\n+<% end %>\nReview:"}
{"pred": "This should be documented in the code.", "gold": "synced offline. let's move this to `agent_unix.go` to make the IMDS call, since this is not supported in Windows.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -435,6 +435,17 @@ func (agent *ecsAgent) getEC2InstanceID() string {\n \treturn instanceID\n }\n \n+// getoutpostARN gets the Outpost ARN from the metadata service\n+func (agent *ecsAgent) getoutpostARN() string {\n+\toutpostARN, err := agent.ec2MetadataClient.OutpostARN()\n+\tif err != nil {\n+\t\tseelog.Warnf(\n+\t\t\t\"Unable to obtain Outpost ARN from EC2 Metadata: %v\", err)\n+\t\treturn \"\"\n+\t}\n+\treturn outpostARN\n+}\n+\n // newStateManager creates a new state manager object for the task engine.\n // Rest of the parameters are pointers and it's expected that all of these\n // will be backfilled when state manager's Load() method is invoked\nReview:"}
{"pred": "Is this the right place to add these mappings? It might be better to add them in the constructor.", "gold": "Too much indentation here. Should match the lines above, which have four spaces.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -12,6 +12,10 @@ class PythonMappings\n     fun.add_mapping(\"py_env\", Python::VirtualEnv.new)\n \n     fun.add_mapping(\"py_docs\", Python::GenerateDocs.new)\n+\t\n+\tfun.add_mapping(\"py_install\", Python::Install.new)\n+\t\n+\tfun.add_mapping(\"py_prep\", Python::Prep.new)\n   end\n end\n \nReview:"}
{"pred": "This test case can be removed as it is redundant.", "gold": "Same here we still need this test to make sure the fallback works.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -15,14 +15,6 @@ BOOST_AUTO_TEST_CASE(test_incompatible_with_mld)\n         osrm::exception);\n }\n \n-BOOST_AUTO_TEST_CASE(test_incompatible_with_corech)\n-{\n-    // Note - CH-only data can't be used with the CoreCH algorithm\n-    BOOST_CHECK_THROW(\n-        getOSRM(OSRM_TEST_DATA_DIR \"/ch/monaco.osrm\", osrm::EngineConfig::Algorithm::CoreCH),\n-        osrm::exception);\n-}\n-\n BOOST_AUTO_TEST_CASE(test_incompatible_with_ch)\n {\n     // Can't use the CH algorithm with MLD data\nReview:"}
{"pred": "This looks good. No issues found.", "gold": "I'm wondering if we can actually base this on a `IMvxPresentationAttribute` instead of the base one.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,8 @@\n+\ufeffusing System;\n+namespace MvvmCross.iOS.Views.Presenters.Attributes\n+{\n+    public interface IMvxOverridePresentationAttribute\n+    {\n+        MvxBasePresentationAttribute OverridePresentationAttribute();\n+    }\n+}\nReview:"}
{"pred": "This looks like a good change, as it ensures that all references to the component are removed.", "gold": "could we switch to `undefined` here?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -430,7 +430,7 @@ export function unmount(vnode, parentVNode, skipRemove) {\n \t\t\t}\n \t\t}\n \n-\t\tr.base = r._parentDom = null;\n+\t\tr.base = r._parentDom = r._vnode = vnode._component = null;\n \t}\n \n \tif ((r = vnode._children)) {\nReview:"}
{"pred": "Is this intentional? It looks like this was added but not sure why it's needed here.", "gold": "The cleanup call", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -94,6 +94,7 @@ public class SyncManager {\n         this.smartStore = smartStore;\n         this.restClient = restClient;\n         SyncState.setupSyncsSoupIfNeeded(smartStore);\n+        SyncState.cleanupSyncsSoupIfNeeded(smartStore);\n     }\n \n     /**\nReview:"}
{"pred": "This change makes sense, as it's more accurate to refer to the Album Artist rather than Artist.", "gold": "I think \"View artist\" is a bit more standard and expected. Or even \"Go to artist\" to take the Spotify terminology as-is.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -288,10 +288,11 @@ define(['apphost', 'globalize', 'connectionManager', 'itemHelper', 'appRouter',\n                 icon: 'album'\n             });\n         }\n-\n-        if (options.openArtist !== false && item.ArtistItems && item.ArtistItems.length) {\n+        // Show Album Artist by default, as a song can have multiple artists, which specific one would this option refer to?\n+        // Although some albums can have multiple artists, it's not as common as songs.\n+        if (options.openArtist !== false && item.AlbumArtists && item.AlbumArtists.length) {\n             commands.push({\n-                name: globalize.translate('ViewArtist'),\n+                name: globalize.translate('ViewAlbumArtist'),\n                 id: 'artist',\n                 icon: 'person'\n             });\nReview:"}
{"pred": "This check should be done before the case statement, as it's a more efficient way to handle this.", "gold": "It might make sense to refactor this later so that we use a Bolt-native type to hide sensitive values.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -196,6 +196,9 @@ module Bolt\n       # This works on deeply nested data structures composed of Hashes, Arrays, and\n       # and plain-old data types (int, string, etc).\n       def unwrap_sensitive_args(arguments)\n+        # Skip this if Puppet isn't loaded\n+        return arguments unless defined?(Puppet::Pops::Types::PSensitiveType::Sensitive)\n+\n         case arguments\n         when Array\n           # iterate over the array, unwrapping all elements\nReview:"}
{"pred": "This should be moved to the bottom of the file, after all the tests have been defined.", "gold": "We were trying to move away from this to force people to always run tests under py.test.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -30,3 +30,7 @@ from extensive_tm_test_base import ExtensiveTemporalMemoryTest\n class ExtensiveTemporalMemoryTestCPP(ExtensiveTemporalMemoryTest, unittest.TestCase):\n   def getTMClass(self):\n     return nupic.bindings.algorithms.TemporalMemory\n+\n+\n+if __name__ == \"__main__\":\n+  unittest.main()\nReview:"}
{"pred": "Is this the best place to append the selenium options? It seems like it should be done earlier.", "gold": "1 - create browser specific options class: - chromeoptions - firefoxoptions - argsoptions", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -933,6 +933,8 @@ from selenium.webdriver.common.keys import Keys\n \n         browser = self._check_platform()\n \n+        body.append(self._get_selenium_options())\n+\n         if browser == 'firefox':\n             body.extend(self._get_firefox_options() + self._get_firefox_profile() + [self._get_firefox_webdriver()])\n \nReview:"}
{"pred": "This looks like a fix for a bug. It would be good to add a comment to explain why this is necessary.", "gold": "should be a case insensitive match though no? DOCTYPE and doctype are both widely used", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -681,7 +681,9 @@ class ProxyListenerS3(ProxyListener):\n \n                 # fix content-type: https://github.com/localstack/localstack/issues/618\n                 #                   https://github.com/localstack/localstack/issues/549\n-                if 'text/html' in response.headers.get('Content-Type', ''):\n+                #                   https://github.com/localstack/localstack/issues/854\n+                if 'text/html' in response.headers.get('Content-Type', '') \\\n+                        and not response_content_str.startswith('<!doctype html'):\n                     response.headers['Content-Type'] = 'application/xml; charset=utf-8'\n \n                 reset_content_length = True\nReview:"}
{"pred": "Good use of before_action to DRY up the code. It would be nice to have some tests for this controller.", "gold": "We must have a `fail ParamNotFound` here for cases where `@account.nil?`.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,15 @@\n+class AccountWidgetsController < WidgetsController\n+  before_action :set_account\n+  before_action :render_gif_image\n+  before_action :account_context, only: :index\n+\n+  def index\n+    @widgets = AccountWidget.create_widgets(params[:account_id])\n+  end\n+\n+  private\n+\n+  def set_account\n+    @account = Account.from_param(params[:account_id]).first!\n+  end\n+end\nReview:"}
{"pred": "This should be wrapped in a #ifdef so that it is only compiled in the right environment.", "gold": "How come this change was needed?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -144,6 +144,7 @@ namespace Datadog.Trace.Vendors.Newtonsoft.Json.Serialization\n             return property;\n         }\n \n+#if !NETCOREAPP\n         private bool TryGetValue(string key, out JsonProperty item)\n         {\n             if (Dictionary == null)\nReview:"}
{"pred": "It would be nice to have a comment explaining the purpose of these constants.", "gold": "Why are there only 6 pins here, while below it appears to have 8 ADC inputs? Are pin 2 and 5 used for something else on this board?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -25,3 +25,13 @@ const (\n \tUART_TX_PIN = 6\n \tUART_RX_PIN = 8\n )\n+\n+// ADC pins\n+const (\n+\tADC0 = 3\n+\tADC1 = 4\n+\tADC2 = 28\n+\tADC3 = 29\n+\tADC4 = 30\n+\tADC5 = 31\n+)\nReview:"}
{"pred": "Is there a reason why you are using a nested ExploreFields here? It looks like you could just use the Matcher() directly.", "gold": "I think we need an issue to track that chain sync omits BLS messages, and then to fix and test it!", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -224,7 +224,9 @@ func (gsf *GraphSyncFetcher) fetchRemainingTipsets(ctx context.Context, starting\n // non-recursively\n func (gsf *GraphSyncFetcher) fetchBlocks(ctx context.Context, cids []cid.Cid, targetPeer peer.ID) error {\n \tselector := gsf.ssb.ExploreFields(func(efsb selectorbuilder.ExploreFieldsSpecBuilder) {\n-\t\tefsb.Insert(\"messages\", gsf.ssb.Matcher())\n+\t\tefsb.Insert(\"messages\", gsf.ssb.ExploreFields(func(messagesSelector selectorbuilder.ExploreFieldsSpecBuilder) {\n+\t\t\tmessagesSelector.Insert(\"secpRoot\", gsf.ssb.Matcher())\n+\t\t}))\n \t\tefsb.Insert(\"messageReceipts\", gsf.ssb.Matcher())\n \t}).Node()\n \tvar wg sync.WaitGroup\nReview:"}
{"pred": "It's better to use a config variable for the asset host, rather than hardcoding it.", "gold": "what is this default about? I am not using ngrok atm so would prefer an env var.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,7 +1,7 @@\n C2::Application.configure do\n   config.action_mailer.preview_path = \"#{Rails.root}/lib/mail_previews\"\n   config.action_mailer.register_preview_interceptor :css_inline_styler\n-  config.action_mailer.asset_host = \"http://localhost:5000\"\n+  config.action_mailer.asset_host = \"http://2c429f18.ngrok.io\" || \"http://localhost:5000\"\n   config.action_controller.perform_caching = false\n   config.action_mailer.delivery_method = :letter_opener_web\n   config.active_record.migration_error = :page_load\nReview:"}
{"pred": "This should be documented in the config file itself, not in the code.", "gold": "@Samuell1 Might be better to say \"Automatically check for plugin updates on login\".", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -93,6 +93,19 @@ return [\n \n     'backendSkin' => 'Backend\\Skins\\Standard',\n \n+    /*\n+    |--------------------------------------------------------------------------\n+    | Determines if logging in backend should run UpdateManager\n+    |--------------------------------------------------------------------------\n+    |\n+    | If value is true it runs UpdateMananger after login in backend.\n+    | It's recommended to set this value to 'false' in production enviroments\n+    | because it cleares cache on every login in backend.\n+    |\n+    */\n+\n+    'runUpdateManagerAfterBackendLogin' => true,\n+\n     /*\n     |--------------------------------------------------------------------------\n     | Determines which modules to load\nReview:"}
{"pred": "It's good to see the use of namespaces here, but it would be better to use the 'using static' syntax to make the code more concise.", "gold": "Thanks for the additional Process helper! Can we also cache the first `Process.GetCurrentProcess()` result in a static field so we don't have to repeatedly call it? It means we would also need to dispose it when the static `_runtimeMetricsWriter` instance is disposed", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,4 +1,6 @@\n+using System;\n using System.Diagnostics;\n+using System.Runtime.CompilerServices;\n \n namespace Datadog.Trace.Util\n {\nReview:"}
{"pred": "This test should probably be moved to a separate test file.", "gold": "just wondering what is the result of breaking the logic we test here? it seems that in that case we will just not return immediately, but i'm not sure whether the test will fail?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -73,6 +73,19 @@ func (*mockStatsEngine) GetTaskHealthMetrics() (*ecstcs.HealthMetadata, []*ecstc\n \treturn nil, nil, nil\n }\n \n+// TestDisableMetrics tests the StartMetricsSession will return immediately if\n+// the metrics was disabled\n+func TestDisableMetrics(t *testing.T) {\n+\tparams := TelemetrySessionParams{\n+\t\tCfg: &config.Config{\n+\t\t\tDisableMetrics:           true,\n+\t\t\tDisableDockerHealthCheck: true,\n+\t\t},\n+\t}\n+\n+\tStartMetricsSession(params)\n+}\n+\n func TestFormatURL(t *testing.T) {\n \tendpoint := \"http://127.0.0.0.1/\"\n \twsurl := formatURL(endpoint, testClusterArn, testInstanceArn)\nReview:"}
{"pred": "It looks like you are creating a srcDir directory here, but not cleaning it up. You should add a defer os.RemoveAll(srcDir) to ensure it is cleaned up.", "gold": "We should fail the test if this returns `err != nil`.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -198,8 +198,9 @@ func TestInferModulePath(t *testing.T) {\n \t\t\t\t\tt.Error(err)\n \t\t\t\t}\n \t\t\t}()\n-\n-\t\t\tpctx := newTestProcessContext(dir)\n+\t\t\tsrcDir := filepath.Join(dir, \"src\")\n+\t\t\tos.Mkdir(srcDir, 0777)\n+\t\t\tpctx := newTestProcessContext(srcDir)\n \t\t\tgopath, cleanup := tc.testGOPATH(dir)\n \t\t\tdefer cleanup()\n \t\t\tpctx.env = []string{gopath}\nReview:"}
{"pred": "It's not clear why you need this variable here. Can you explain the purpose?", "gold": "What is the drawback of not having this flag as a gating condition to report the metric?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -140,6 +140,9 @@ func (r *ReconcileClusterDeployment) reconcileExistingInstallingClusterInstall(c\n \t}\n \n \tupdated = false\n+\t// Fun extra variable to keep track of whether we should increment metricProvisionFailedTerminal\n+\t// later; because we only want to do that if (we change that status and) the status update succeeds.\n+\tprovisionFailedTerminal := false\n \tconditions, updated = controllerutils.SetClusterDeploymentConditionWithChangeCheck(conditions,\n \t\thivev1.ProvisionStoppedCondition,\n \t\tstopped.Status,\nReview:"}
{"pred": "It would be better to move the getAppName() function to a separate file and import it here.", "gold": "`getProcessName()` will be less ambiguous, since Caddy has \"apps\" that it runs internally.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -22,9 +22,14 @@ import (\n )\n \n func gracefullyStopProcess(pid int) error {\n+\tfmt.Printf(\"Graceful stop...\")\n \terr := syscall.Kill(pid, syscall.SIGINT)\n \tif err != nil {\n \t\treturn fmt.Errorf(\"kill: %v\", err)\n \t}\n \treturn nil\n }\n+\n+func getAppName() string {\n+\treturn filepath.Base(os.Args[0])\n+}\nReview:"}
{"pred": "Is this really necessary? It seems like it would be better to just use a lowercase string in the array.", "gold": "Is there any way to not hardcode this given we know the size in bytes? The public API has the flexibility of being a Span. Should we maybe not do anything printing DML? The runtime allocates the buffer, but it's a \"scratch memory\" area, The delegate gets it passed in and they decide how to use it. Also, how is DML used if the feature is for macOS support?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -4741,6 +4741,7 @@ const char * const DMLFormats[] =\n     \"<exec cmd=\\\"!DumpIL /i %s\\\">%s</exec>\",         // DML_IL\n     \"<exec cmd=\\\"!DumpRCW -cw /d %s\\\">%s</exec>\",    // DML_ComWrapperRCW\n     \"<exec cmd=\\\"!DumpCCW -cw /d %s\\\">%s</exec>\",    // DML_ComWrapperCCW\n+    \"<exec cmd=\\\"dps %s L2\\\">%s</exec>\",             // DML_TaggedMemory (hardcoded current size to 2 pointer sizes)\n };\n \n void ConvertToLower(__out_ecount(len) char *buffer, size_t len)\nReview:"}
{"pred": "This is a bit of a strange way to check for the filter, why not just use an if statement?", "gold": "How about just override the `buildFilter`? Passing another function here is a little weird.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -64,6 +64,13 @@ nebula::cpp2::ErrorCode ScanEdgeProcessor::checkAndBuildContexts(const cpp2::Sca\n   std::vector<cpp2::EdgeProp> returnProps = {*req.return_columns_ref()};\n   ret = handleEdgeProps(returnProps);\n   buildEdgeColName(returnProps);\n+  ret = buildFilter(req, [](const cpp2::ScanEdgeRequest& r) -> const std::string* {\n+    if (r.filter_ref().has_value()) {\n+      return r.get_filter();\n+    } else {\n+      return nullptr;\n+    }\n+  });\n   return ret;\n }\n \nReview:"}
{"pred": "Added a new flag, should this be documented in the help text?", "gold": "This should just be a `.Bool()` flag I think, we don't encode anything beyond y/n here. See `$(RUN_CHECK)` and `$(STOP_ON_PKG_FAIL)` for examples of how to pass those in.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -71,8 +71,9 @@ var (\n \n \tignoredPackages = app.Flag(\"ignored-packages\", \"Space separated list of specs ignoring rebuilds if their dependencies have been updated. Will still build if all of the spec's RPMs have not been built.\").String()\n \n-\tpkgsToBuild   = app.Flag(\"packages\", \"Space separated list of top-level packages that should be built. Omit this argument to build all packages.\").String()\n-\tpkgsToRebuild = app.Flag(\"rebuild-packages\", \"Space separated list of base package names packages that should be rebuilt.\").String()\n+\tpkgsToBuild     = app.Flag(\"packages\", \"Space separated list of top-level packages that should be built. Omit this argument to build all packages.\").String()\n+\tpkgsToRebuild   = app.Flag(\"rebuild-packages\", \"Space separated list of base package names packages that should be rebuilt.\").String()\n+\trpmHydratedTest = app.Flag(\"rpm-hydrated-test\", \"Is this just a TestRPM build with all RPMs hydrated?\").String()\n \n \tlogFile  = exe.LogFileFlag(app)\n \tlogLevel = exe.LogLevelFlag(app)\nReview:"}
{"pred": "Is this case necessary? It looks like it is not doing anything.", "gold": "Is this needed?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -2042,6 +2042,7 @@ bool SwiftLanguageRuntime::GetDynamicTypeAndAddress_Promise(\n     address.SetLoadAddress(val_ptr_addr, &m_process->GetTarget());\n     return true;\n   } break;\n+  case swift::MetadataKind::Function:\n   case swift::MetadataKind::Optional:\n   case swift::MetadataKind::Struct:\n   case swift::MetadataKind::Tuple: {\nReview:"}
{"pred": "The message should be more descriptive and explain what is being deleted.", "gold": "This code is passing a non localized string when it should be passing in a localized string or it should use the name of the item being deleted.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -348,7 +348,7 @@ export default Ember.Controller.extend(BillingCategories, EKMixin,\n       confirmDeleteValue(value) {\n         let i18n = this.get('i18n');\n         let title = i18n.t('admin.lookup.titles.deleteLookupValue');\n-        let message = i18n.t('admin.lookup.messages.deleteLookupValue', { value });\n+        let message = i18n.t('messages.delete_singular', { name: value.concat(' value') });\n         this.displayConfirm(title, message, 'deleteValue', Ember.Object.create({\n           valueToDelete: value\n         }));\nReview:"}
{"pred": "The generic selector package should be imported with a more specific name to make it clear what it is being used for.", "gold": "how about moving it under L26", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -18,6 +18,8 @@ package container\n import (\n \t\"context\"\n \n+\t\"github.com/chaos-mesh/chaos-mesh/pkg/selector/generic\"\n+\n \t\"go.uber.org/fx\"\n \tv1 \"k8s.io/api/core/v1\"\n \t\"sigs.k8s.io/controller-runtime/pkg/client\"\nReview:"}
{"pred": "It might be better to use a WeakMap here, so that the memoized functions can be garbage collected when no longer needed.", "gold": "I think this needs to be tested", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,17 @@\n+/**\n+ * Memoize a function.\n+ * @method memoize\n+ * @memberof axe.utils\n+ * @param {Function} fn Function to memoize\n+ * @return {Function}\n+ */\n+axe._memoizedFns = [];\n+axe.utils.memoize = function(fn) {\n+\t// keep track of each function that is memoized so it can be cleared at\n+\t// the end of a run. each memoized function has its own cache, so there is\n+\t// no method to clear all memoized caches. instead, we have to clear each\n+\t// individual memoized function ourselves.\n+\tconst memoized = axe.imports.memoize(fn);\n+\taxe._memoizedFns.push(memoized);\n+\treturn memoized;\n+};\nReview:"}
{"pred": "Good to add a default image URL here.", "gold": "Style/MutableConstant: Freeze mutable objects assigned to constants.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -2,6 +2,9 @@ class Trail < ApplicationRecord\n   extend FriendlyId\n \n   include PgSearch\n+\n+  DEFAULT_IMAGE_URL = \"https://images.thoughtbot.com/upcase/trail-title-cards/default.jpg\"\n+\n   multisearchable against: [:name, :description], if: :published?\n \n   validates :name, :description, presence: true\nReview:"}
{"pred": "We should probably add a comment here to explain why we are using the BugfixDeflater_JDK8252739 class.", "gold": "Just a thought, really. If it's a bug that can be probed for (and it can be - see Adrian's repro) then it could as well be a static initialization of a supplier of Deflater instances; if we probe for a buggy JVM, we return the wrapper. If we don't we return the Deflater. This way on non-affected JVMs nothing happens and if we do use the wrapper, we know the JVM is broken.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -155,16 +155,15 @@ public final class DeflateWithPresetDictCompressionMode extends CompressionMode\n \n   private static class DeflateWithPresetDictCompressor extends Compressor {\n \n-    final byte[] dictBytes;\n-    final int blockLength;\n+    private final int dictLength, blockLength;\n     final Deflater compressor;\n     byte[] compressed;\n     boolean closed;\n \n     DeflateWithPresetDictCompressor(int level, int dictLength, int blockLength) {\n-      compressor = new Deflater(level, true);\n+      compressor = BugfixDeflater_JDK8252739.createDeflaterInstance(level, true, dictLength);\n       compressed = new byte[64];\n-      this.dictBytes = new byte[dictLength];\n+      this.dictLength = dictLength;\n       this.blockLength = blockLength;\n     }\n \nReview:"}
{"pred": "This should be made private as it is not intended to be used outside of this class.", "gold": "Looks like this should be publicly accessible for tests in any modules?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -95,7 +95,7 @@ public class FSTTester<T> {\n     return br;\n   }\n \n-  static String getRandomString(Random random) {\n+  public static String getRandomString(Random random) {\n     final String term;\n     if (random.nextBoolean()) {\n       term = TestUtil.randomRealisticUnicodeString(random);\nReview:"}
{"pred": "This change is introducing a breaking change, as the default value for the constructor was false before. We should make sure to document this change.", "gold": "Allow putenv is necessary to be able to get environment variables with `getenv`?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -19,7 +19,7 @@ if (is_array($env = @include dirname(__DIR__).'/.env.local.php')) {\n     throw new RuntimeException('Please run \"composer require symfony/dotenv\" to load the \".env\" files configuring the application.');\n } else {\n     $path = dirname(__DIR__).'/.env';\n-    $dotenv = new Dotenv(false);\n+    $dotenv = new Dotenv(true);\n \n     // load all the .env files\n     if (method_exists($dotenv, 'loadEnv')) {\nReview:"}
{"pred": "The conio.h header is not necessary here.", "gold": "use function to check it. - don't do everything in main", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -0,0 +1,17 @@\n+#include <iostream>\n+#include <conio.h>\n+using namespace std;\n+\n+int main()\n+{\t\n+\tint year;\n+\tcout<<\"Enter year to check\\n\";\n+\tcin>>year;\n+\tif((year%4==0 && year%100!=0) || year%400==0){\n+\t\tcout<<\"leap year.\\n\";\n+\t}\n+\telse{\n+\t\tcout<<\" Not leap year.\\n\";\n+\t}\n+\treturn 0;\n+}\nReview:"}
{"pred": "The global_configs parameter should be documented in the docstring.", "gold": "Sorry I'm confused. Why not kwarg this like the others?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -50,7 +50,7 @@ class BaseRulesEngine(object):\n         self.full_rules_path = rules_file_path.strip()\n         self.snapshot_timestamp = snapshot_timestamp\n \n-    def build_rule_book(self):\n+    def build_rule_book(self, global_configs):\n         \"\"\"Build RuleBook from the rules definition file.\"\"\"\n         raise NotImplementedError('Implement in a child class.')\n \nReview:"}
{"pred": "This looks like a typo. Should the second argument for vpgatherdq and vgatherdpd be MVq instead of MVd?", "gold": "First, any changes here should be synchronized with instr_compute_VSIB_index(). Second, the original looks correct to me: the first letter of the opcode name suffix is the index size, while the second is the memory size. So \"vpgatherdq\" is a d-sized index and q-sized memory. The operand size we store for memory accesses is always the memory size, not the address size, and for VSIB we store a single memory element size. It looks like we have no inside-opnd_t storage of the index size: that's done by dispatch on opcode it seems. I have a bunch of notes of discussions on how to handle VSIB: we decided to bail on encoding too much inside the opnd_t I guess.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -7171,15 +7171,15 @@ const instr_info_t vex_W_extensions[][2] = {\n      * registers are identical.  We don't bother trying to detect that.\n      */\n     {OP_vpgatherdd,0x66389018,\"vpgatherdd\",Vx,Hx,MVd,Hx,xx, mrm|vex|reqp,x,END_LIST},\n-    {OP_vpgatherdq,0x66389058,\"vpgatherdq\",Vx,Hx,MVq,Hx,xx, mrm|vex|reqp,x,END_LIST},\n+    {OP_vpgatherdq,0x66389058,\"vpgatherdq\",Vx,Hx,MVd,Hx,xx, mrm|vex|reqp,x,END_LIST},\n   }, { /* vex_W_ext 67 */\n-    {OP_vpgatherqd,0x66389118,\"vpgatherqd\",Vx,Hx,MVd,Hx,xx, mrm|vex|reqp,x,END_LIST},\n+    {OP_vpgatherqd,0x66389118,\"vpgatherqd\",Vx,Hx,MVq,Hx,xx, mrm|vex|reqp,x,END_LIST},\n     {OP_vpgatherqq,0x66389158,\"vpgatherqq\",Vx,Hx,MVq,Hx,xx, mrm|vex|reqp,x,END_LIST},\n   }, { /* vex_W_ext 68 */\n     {OP_vgatherdps,0x66389218,\"vgatherdps\",Vvs,Hx,MVd,Hx,xx, mrm|vex|reqp,x,END_LIST},\n-    {OP_vgatherdpd,0x66389258,\"vgatherdpd\",Vvd,Hx,MVq,Hx,xx, mrm|vex|reqp,x,END_LIST},\n+    {OP_vgatherdpd,0x66389258,\"vgatherdpd\",Vvd,Hx,MVd,Hx,xx, mrm|vex|reqp,x,END_LIST},\n   }, { /* vex_W_ext 69 */\n-    {OP_vgatherqps,0x66389318,\"vgatherqps\",Vvs,Hx,MVd,Hx,xx, mrm|vex|reqp,x,END_LIST},\n+    {OP_vgatherqps,0x66389318,\"vgatherqps\",Vvs,Hx,MVq,Hx,xx, mrm|vex|reqp,x,END_LIST},\n     {OP_vgatherqpd,0x66389358,\"vgatherqpd\",Vvd,Hx,MVq,Hx,xx, mrm|vex|reqp,x,END_LIST},\n   }, { /* vex_W_ext 70 */\n     {OP_vpmaskmovd,0x66388c18,\"vpmaskmovd\",Vx,xx,Hx,Mx,xx, mrm|vex|reqp|predcx,x,tvexw[71][0]},\nReview:"}
{"pred": "This build_tracking_url() method looks like a stub. Is this intentional?", "gold": "Sorry for going back and forth. Adding docstring here would be very helpful for others to understand the need of this method.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -118,6 +118,9 @@ class ExternalProgramTask(luigi.Task):\n         file_object.seek(0)\n         return ''.join(map(lambda s: s.decode('utf-8'), file_object.readlines()))\n \n+    def build_tracking_url(self, logs_output):\n+        return logs_output\n+\n     def run(self):\n         args = list(map(str, self.program_args()))\n \nReview:"}
{"pred": "This is a nice refactor, reducing the number of lines and making the logic more clear.", "gold": "You introduced a bug here.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -121,10 +121,7 @@ bool Creature::canSee(const Position& pos) const\n \n bool Creature::canSeeCreature(const Creature* creature) const\n {\n-\tif (!canSeeInvisibility() && creature->isInvisible()) {\n-\t\treturn false;\n-\t}\n-\treturn true;\n+\treturn canSeeInvisibility() && creature->isInvisible();\n }\n \n void Creature::setSkull(Skulls_t newSkull)\nReview:"}
{"pred": "It would be good to add a comment here to explain why we are doing this replacement.", "gold": "Should we log a warning/error if only one is specified and not the other?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -261,6 +261,14 @@ namespace Microsoft.DotNet.Build.Tasks.VersionTools\n                 \"true\",\n                 StringComparison.OrdinalIgnoreCase);\n \n+            string oldValue = step.GetMetadata(\"ReplacementSubstituteOld\");\n+            string newValue = step.GetMetadata(\"ReplacementSubstituteNew\");\n+\n+            if (!string.IsNullOrEmpty(oldValue) && !string.IsNullOrEmpty(newValue))\n+            {\n+                updater.ReplacementTransform = v => v.Replace(oldValue, newValue);\n+            }\n+\n             return updater;\n         }\n \nReview:"}
{"pred": "It looks like you are hard-coding the response here. Is this intended?", "gold": "`ctx` is unused in GetLatestEvent", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -463,4 +463,15 @@ func (c *fakeClient) ReportApplicationLiveStateEvents(ctx context.Context, req *\n \treturn &pipedservice.ReportApplicationLiveStateEventsResponse{}, nil\n }\n \n+func (c *fakeClient) GetLatestEvent(ctx context.Context, req *pipedservice.GetLatestEventRequest, opts ...grpc.CallOption) (*pipedservice.GetLatestEventResponse, error) {\n+\tc.logger.Info(\"fake client received GetLatestEvent rpc\", zap.Any(\"request\", req))\n+\treturn &pipedservice.GetLatestEventResponse{\n+\t\tEvent: &model.Event{\n+\t\t\tId:        \"dev\",\n+\t\t\tName:      \"dev\",\n+\t\t\tProjectId: \"dev\",\n+\t\t},\n+\t}, nil\n+}\n+\n var _ pipedservice.PipedServiceClient = (*fakeClient)(nil)\nReview:"}
{"pred": "This is a good change, it ensures that the user has specified a port in the config, otherwise it will use the default peering port for the network.", "gold": "This looks good to me. Personally, I would have the following for maximum flexibility: * convert peering_port from uint64_t to int. * Set the default value to \"-1\" to specify the value is not set * if the value is -1 then do `config.node.peering_port = network_params.network.default_node_port` That would allow for 0 to mean, select the port number yourself and be more consistent. But I am happy with the change as is, as well.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -128,6 +128,14 @@ void nano_daemon::daemon::run (boost::filesystem::path const & data_path, nano::\n \t\t\t\tlogger.always_log (boost::format (\"Open file descriptors limit is %1%\") % file_descriptor_limit);\n \t\t\t}\n \n+\t\t\t// a 0-valued port means for the node 'let the OS decide'; however, for the daemon start up, if\n+\t\t\t// the user hasn't specified a port in the config, we must use the default peering port for the network\n+\t\t\t//\n+\t\t\tif (!config.node.peering_port)\n+\t\t\t{\n+\t\t\t\tconfig.node.peering_port = network_params.network.default_node_port;\n+\t\t\t}\n+\n \t\t\tauto node (std::make_shared<nano::node> (io_ctx, data_path, config.node, opencl_work, flags));\n \t\t\tif (!node->init_error ())\n \t\t\t{\nReview:"}
{"pred": "It looks like you removed a comment here. Is there a reason for this?", "gold": "The blank line between the summary and detailed description is better to be kept.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -10,7 +10,6 @@ __all__ = [\n \n class ImageTransform(object):\n     \"\"\"Preprocess an image.\n-\n     1. rescale the image to expected size\n     2. normalize the image\n     3. flip the image (if needed)\nReview:"}
{"pred": "It's good to see the new feature being gated behind a flag, but it would be better to have a test that exercises this code path.", "gold": "Curiously, are these indents intended or should they be aligned?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -167,6 +167,11 @@ func (a *API) Setup() {\n \ta.setMetadataEndpointsKey()\n \ta.writeShapeNames()\n \ta.resolveReferences()\n+\n+\tif !a.NoRemoveUnusedShapes {\n+\t\ta.removeUnusedShapes()\n+\t}\n+\n \ta.fixStutterNames()\n \ta.renameExportable()\n \ta.applyShapeNameAliases()\nReview:"}
{"pred": "It looks like you are trying to optimize the code here, but it is not clear why you are doing this. Can you explain why you are making this change?", "gold": "What if we changed this to this? roleText=attrs.get('roleText', lambda:getSpeechTextForProperties(reason=reason,role=role)) That will prevent the function from ever needing called in the roletext case, and removes that if.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1130,7 +1130,9 @@ def getControlFieldSpeech(attrs,ancestorAttrs,fieldType,formatConfig=None,extraD\n \telse:\n \t\ttableID = None\n \n-\troleText=getSpeechTextForProperties(reason=reason,role=role)\n+\troleText=attrs.get('roleText')\n+\tif not roleText:\n+\t\troleText=getSpeechTextForProperties(reason=reason,role=role)\n \tstateText=getSpeechTextForProperties(reason=reason,states=states,_role=role)\n \tkeyboardShortcutText=getSpeechTextForProperties(reason=reason,keyboardShortcut=keyboardShortcut) if config.conf[\"presentation\"][\"reportKeyboardShortcuts\"] else \"\"\n \tariaCurrentText=getSpeechTextForProperties(reason=reason,current=ariaCurrent)\nReview:"}
{"pred": "This is a good change, it avoids a race condition and is more robust.", "gold": "This will still result in a safe_read_tls_magic on AMD in tls_thread_preinit().", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -4801,7 +4801,15 @@ master_signal_handler_C(byte *xsp)\n         return;\n     }\n #endif\n-    dcontext_t *dcontext = get_thread_private_dcontext();\n+    /* We avoid using safe_read_tls_magic during detach. This thread may already have\n+     * lost its TLS. A safe read may result into a race affecting asynchronous non-alarm\n+     * signals (xref i#3535) between delivering the SIGSEGV and restoring the app's signal\n+     * handlers. We don't need the thread's private dcontext anymore here at this point.\n+     * Note that there is still a small race window if the signal gets delivered after the\n+     * detach has finished, i.e. doing_detach is false. This is an issue in particular if\n+     * the app has started re-attaching.\n+     */\n+    dcontext_t *dcontext = doing_detach ? NULL : get_thread_private_dcontext();\n \n #ifdef MACOS\n #    ifdef X64\nReview:"}
{"pred": "Remove the empty line at the end of the class.", "gold": "Can you remove this change?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -561,5 +561,4 @@ public class TestJdbcCatalog {\n     String nsString = JdbcUtil.namespaceToString(ns);\n     Assert.assertEquals(ns, JdbcUtil.stringToNamespace(nsString));\n   }\n-\n }\nReview:"}
{"pred": "Should this be a warning instead of an error?", "gold": "Oh, was that a bug in the validation?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -48,7 +48,7 @@ func ValidateCertificateForACMEIssuer(crt *cmapi.CertificateSpec, issuer *cmapi.\n \tel := field.ErrorList{}\n \n \tif crt.IsCA {\n-\t\tel = append(el, field.Invalid(specPath.Child(\"isCA\"), crt.KeyAlgorithm, \"ACME does not support CA certificates\"))\n+\t\tel = append(el, field.Invalid(specPath.Child(\"isCA\"), crt.IsCA, \"ACME does not support CA certificates\"))\n \t}\n \n \tif crt.Subject != nil && len(crt.Subject.Organizations) != 0 {\nReview:"}
{"pred": "This should be done earlier, before the Log.d() statement.", "gold": "Please use the Google java code style. Basically, add more space characters like in the statements below. Next to method arguments and curly braces. This is currently not checked on CI because it is too inconsistent in the code base but I would prefer new code to be consistent.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -134,6 +134,10 @@ public class OnlineFeedViewActivity extends AppCompatActivity {\n         } else {\n             Log.d(TAG, \"Activity was started with url \" + feedUrl);\n             setLoadingLayout();\n+            //Remove subscribeonandroid.com from feed URL in order to subscribe to the actual feed URL\n+            if(feedUrl.contains(\"subscribeonandroid.com\")){\n+                feedUrl = feedUrl.replaceFirst(\"((www.)?(subscribeonandroid.com/))\",\"\");\n+            }\n             if (savedInstanceState == null) {\n                 startFeedDownload(feedUrl, null, null);\n             } else {\nReview:"}
{"pred": "It looks like you're leaking memory here. You should delete val1 and val2 before you delete sourcePropExp.", "gold": "Actually, I don't think we need to create object on heap.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -145,10 +145,12 @@ TEST(UpdateEdgeTest, Set_Filter_Yield_Test) {\n     decltype(req.return_columns) tmpColumns;\n     tmpColumns.emplace_back(Expression::encode(val1));\n     tmpColumns.emplace_back(Expression::encode(val2));\n-    std::string name = folly::to<std::string>(3002);\n-    std::string prop = \"tag_3002_col_2\";\n-    auto* sourcePropExp = new SourcePropertyExpression(&name, &prop);\n+    delete val1;\n+    delete val2;\n+    auto* sourcePropExp = new SourcePropertyExpression(\n+        new std::string(folly::to<std::string>(3002)), new std::string(\"tag_3002_col_2\"));\n     tmpColumns.emplace_back(Expression::encode(sourcePropExp));\n+    delete sourcePropExp;\n \n     req.set_return_columns(std::move(tmpColumns));\n     req.set_insertable(false);\nReview:"}
{"pred": "This is a breaking change as it changes the import path of the context package. Make sure to update the documentation and any other relevant places.", "gold": "this is a file we copy from gRPC, sp ideally it be fixed upstream as well..", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -84,7 +84,7 @@ void GenerateImports(grpc_generator::File *file, grpc_generator::Printer *printe\n \t}\n \tprinter->Print(\"import (\\n\");\n \tprinter->Indent();\n-\tprinter->Print(vars, \"$context$ \\\"golang.org/x/net/context\\\"\\n\");\n+\tprinter->Print(vars, \"$context$ \\\"context\\\"\\n\");\n \tprinter->Print(vars, \"$grpc$ \\\"google.golang.org/grpc\\\"\\n\");\n \tprinter->Outdent();\n \tprinter->Print(\")\\n\\n\");\nReview:"}
{"pred": "It looks like the CacheBuilderSpec import has been removed, is this intentional?", "gold": "changes like this, just strangle guava usages to be replaced by DelayLimiter into one place", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -14,7 +14,6 @@\n package zipkin2.storage.cassandra.v1;\n \n import com.datastax.driver.core.Session;\n-import com.google.common.cache.CacheBuilderSpec;\n import java.nio.ByteBuffer;\n import java.util.ArrayList;\n import java.util.LinkedHashSet;\nReview:"}
{"pred": "This is a good change, it makes it more explicit what the props are for.", "gold": "PropTypes need to be updated accordingly here. Note that the type also needs updating, not just the case. That is, these should both expect a `PropTypes.elementType` now instead of an `element`.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -27,8 +27,8 @@ const Widget = ( {\n \tclassName,\n \tslug,\n \tnoPadding,\n-\theader: Header,\n-\tfooter: Footer,\n+\tHeader,\n+\tFooter,\n } ) => {\n \treturn (\n \t\t<div\nReview:"}
{"pred": "The comparison should be against 0, not just the value of the comparison.", "gold": "maybe extra paren around `strncmp(...) != 0`", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -221,7 +221,7 @@ int get_ctest_gpu(const char* local_rank_str) {\n   }\n \n   auto const* comma = std::strchr(resource_str, ',');\n-  if (!comma || strncmp(resource_str, \"id:\", 3)) {\n+  if (!comma || strncmp(resource_str, \"id:\", 3) != 0) {\n     std::ostringstream ss;\n     ss << \"Error: invalid value of \" << ctest_resource_group_id_name << \": '\"\n        << resource_str << \"'. Raised by Kokkos::Impl::get_ctest_gpu().\";\nReview:"}
{"pred": "It looks like you are duplicating the same code here. Is there a reason for this?", "gold": "We should call `Windows.onResume `: - When the app is launched for the first time - When the app is resumed after being paused (home button and resume or device goes to sleep) - After a permission prompt is displayed", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -510,6 +510,8 @@ public class Windows implements TrayListener, TopBarWidget.Delegate, TitleBarWid\n \n         TelemetryWrapper.resetOpenedWindowsCount(mRegularWindows.size(), false);\n         TelemetryWrapper.resetOpenedWindowsCount(mPrivateWindows.size(), true);\n+        GleanMetricsService.resetOpenedWindowsCount(mRegularWindows.size(), false);\n+        GleanMetricsService.resetOpenedWindowsCount(mPrivateWindows.size(), true);\n     }\n \n     public boolean isPaused() {\nReview:"}
{"pred": "This change looks like it could cause issues with type safety. It should be reviewed carefully.", "gold": "Rename to ForksSchedule? Maybe in separate PR.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -31,7 +31,7 @@ import java.util.function.Function;\n \n import com.google.common.annotations.VisibleForTesting;\n \n-public class BftForksSchedule<C extends BftConfigOptions> {\n+public class BftForksSchedule<C> {\n \n   private final NavigableSet<ForkSpec<C>> forks =\n       new TreeSet<>(\nReview:"}
{"pred": "You should move the import of pytest to the top of the file.", "gold": "Why a blank line here?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1,11 +1,12 @@\n-import pytest\n import time\n from unittest import mock\n \n+import pytest\n+\n from pyramid import testing\n \n-from kinto.core.storage import exceptions\n from kinto.core.cache import heartbeat\n+from kinto.core.storage import exceptions\n \n \n class CacheTest:\nReview:"}
{"pred": "This should be documented in the class level comment.", "gold": "I have a sense that this will actually eventually change to check the actual date so that subscriptions can be deactivated in the future. But I mention that here just to keep you in the loop. We should not make that change now, because it's not needed functionality.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -14,6 +14,10 @@ class Subscription < ActiveRecord::Base\n     notifier.send_notifications\n   end\n \n+  def active?\n+    deactivated_on.nil?\n+  end\n+\n   private\n \n   def self.subscriber_emails\nReview:"}
{"pred": "This is a good check, but it should be done earlier in the code, not at the end.", "gold": "What is the reasoning for using the negation of `isOption()` instead of simply using `isPositional()` to identify a positional param?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -36,6 +36,10 @@ public class EnvironmentVariableDefaultProvider implements IDefaultValueProvider\n \n   @Override\n   public String defaultValue(final ArgSpec argSpec) {\n+    if (!argSpec.isOption()) {\n+      return null; // skip default for positional params\n+    }\n+\n     return envVarNames((OptionSpec) argSpec)\n         .map(environment::get)\n         .filter(Objects::nonNull)\nReview:"}
{"pred": "Is this check for version >= 1100 necessary? It looks like the default value is 0x00 anyway.", "gold": "Why would you add those if client version min is set to 1100?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1415,7 +1415,13 @@ void ProtocolGame::sendBasicData()\n \t\tmsg.addByte(0);\n \t\tmsg.add<uint32_t>(0);\n \t}\n+\n \tmsg.addByte(player->getVocation()->getClientId());\n+\n+\tif (version >= 1100) {\n+\t\tmsg.addByte(player->getVocation()->getId() != VOCATION_NONE ? 0x01 : 0x00); // prey data\n+\t}\n+\n \tmsg.add<uint16_t>(0xFF); // number of known spells\n \tfor (uint8_t spellId = 0x00; spellId < 0xFF; spellId++) {\n \t\tmsg.addByte(spellId);\nReview:"}
{"pred": "It looks like you have imported the same packages twice. You should remove the duplicate imports.", "gold": "You can delete this, it will now need to live in `gointerfaces` package", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -7,12 +7,13 @@\n package snapshotsync\n \n import (\n+\treflect \"reflect\"\n+\tsync \"sync\"\n+\n \tproto \"github.com/golang/protobuf/proto\"\n \tprotoreflect \"google.golang.org/protobuf/reflect/protoreflect\"\n \tprotoimpl \"google.golang.org/protobuf/runtime/protoimpl\"\n \temptypb \"google.golang.org/protobuf/types/known/emptypb\"\n-\treflect \"reflect\"\n-\tsync \"sync\"\n )\n \n const (\nReview:"}
{"pred": "This should be safe, but you should double check that the application_name is properly escaped.", "gold": "Okay, I still don't understand why you have to add `html_safe` here, and it still seems like a very bad idea. It will allow html tags in the title, and keep Rails from escaping literal greater-than or less-than chars not intended as HTML tags. It ought to work to just let Rails do HTML-escaing as normal, without any manual `html_safe` or `strip_tags` or whatever. I am not clear on what problem you are trying to solve, why the straightfoward approach does not work.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -3,7 +3,7 @@\n   <%= render 'previous_next_doc' %>\n \n    \n-<% @page_title = t('blacklight.search.show.title', :document_title => document_show_html_title, :application_name => application_name) -%>\n+<% @page_title = t('blacklight.search.show.title', :document_title => document_show_html_title, :application_name => application_name).html_safe -%>\n <% content_for(:head) { render_link_rel_alternates } -%>\n <%# this should be in a partial -%>\n \nReview:"}
{"pred": "This should be an else if, not an else.", "gold": "What is is subject when it's not the email subject. Why are we having to do this crap? What's calling this with an empty string?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -1435,6 +1435,8 @@ public class MessageList extends K9Activity implements MessageListFragmentListen\n     public void displayMessageSubject(String subject) {\n         if (mDisplayMode == DisplayMode.MESSAGE_VIEW) {\n             mActionBarSubject.setText(subject);\n+        } else {\n+            mActionBarSubject.showSubjectInMessageHeader();\n         }\n     }\n \nReview:"}
{"pred": "This change is not recommended as it will always sample traces which can lead to increased overhead and cost.", "gold": "Could you also remove the `defaultSamplingProbability` constant from `sampling.go`? It seems to became unused with this change.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -65,7 +65,7 @@ func NewProvider(opts ...ProviderOption) (*Provider, error) {\n \t\tnamedTracer: make(map[string]*tracer),\n \t}\n \ttp.config.Store(&Config{\n-\t\tDefaultSampler:       ProbabilitySampler(defaultSamplingProbability),\n+\t\tDefaultSampler:       AlwaysSample(),\n \t\tIDGenerator:          defIDGenerator(),\n \t\tMaxAttributesPerSpan: DefaultMaxAttributesPerSpan,\n \t\tMaxEventsPerSpan:     DefaultMaxEventsPerSpan,\nReview:"}
{"pred": "This looks good. The function name is more descriptive now.", "gold": "can you delete the `generateDeploymentStrategicPatch` function as well?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -63,9 +63,9 @@ func (s *svc) UpdateDeployment(ctx context.Context, clientset, cluster, namespac\n \t}\n \n \tnewDeployment := oldDeployment.DeepCopy()\n-\tmergeLabelsAndAnnotations(newDeployment, fields)\n+\tmergeDeploymentLabelsAndAnnotations(newDeployment, fields)\n \n-\tpatchBytes, err := generateDeploymentStrategicPatch(oldDeployment, newDeployment)\n+\tpatchBytes, err := GenerateStrategicPatch(oldDeployment, newDeployment, appsv1.Deployment{})\n \tif err != nil {\n \t\treturn err\n \t}\nReview:"}
{"pred": "The log level should be changed to FINEST as it is not necessary to log this information at the INFO level.", "gold": "I'd keep this at `info` level...", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -61,7 +61,7 @@ class UnboundZmqEventBus implements EventBus {\n       return thread;\n     });\n \n-    LOG.info(String.format(\"Connecting to %s and %s\", publishConnection, subscribeConnection));\n+    LOG.finest(String.format(\"Connecting to %s and %s\", publishConnection, subscribeConnection));\n \n     sub = context.createSocket(SocketType.SUB);\n     sub.connect(publishConnection);\nReview:"}
{"pred": "This check is redundant given the earlier check.", "gold": "Don't use DCHECK to debug your code if it's the regular branch you need to handle.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -50,6 +50,10 @@ StatusOr<OptRule::TransformResult> LimitPushDownRule::transform(\n   const auto proj = static_cast<const Project *>(projGroupNode->node());\n   const auto gn = static_cast<const GetNeighbors *>(gnGroupNode->node());\n \n+  DCHECK(graph::ExpressionUtils::isEvaluableExpr(limit->countExpr()));\n+  if (!graph::ExpressionUtils::isEvaluableExpr(limit->countExpr())) {\n+    return TransformResult::noTransform();\n+  }\n   int64_t limitRows = limit->offset() + limit->count();\n   if (gn->limit() >= 0 && limitRows >= gn->limit()) {\n     return TransformResult::noTransform();\nReview:"}
{"pred": "This looks like dead code, can we remove it?", "gold": "You should return null here instead. Null is an acceptable default value for the image attribute.", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -46,11 +46,6 @@ public interface AntlrNode extends Node {\n         throw new UnsupportedOperationException(\"Out of scope for antlr current implementations\");\n     }\n \n-    @Override\n-    default String getImage() {\n-        throw new UnsupportedOperationException(\"Out of scope for antlr current implementations\");\n-    }\n-\n     @Override\n     default void setImage(final String image) {\n         throw new UnsupportedOperationException(\"Out of scope for antlr current implementations\");\nReview:"}
{"pred": "Good catch. This should prevent any errors in the effects from crashing the entire app.", "gold": "react bails as well?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -246,9 +246,14 @@ export function useErrorBoundary(cb) {\n function flushAfterPaintEffects() {\n \tafterPaintEffects.some(component => {\n \t\tif (component._parentDom) {\n-\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeCleanup);\n-\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeEffect);\n-\t\t\tcomponent.__hooks._pendingEffects = [];\n+\t\t\ttry {\n+\t\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeCleanup);\n+\t\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeEffect);\n+\t\t\t\tcomponent.__hooks._pendingEffects = [];\n+\t\t\t} catch (e) {\n+\t\t\t\toptions._catchError(e, component._vnode);\n+\t\t\t\treturn true;\n+\t\t\t}\n \t\t}\n \t});\n \tafterPaintEffects = [];\nReview:"}
{"pred": "This change removes the ROLE_ADMIN_AS_CUSTOMER role. Is this intentional? If so, is there any other code that needs to be updated to reflect this change?", "gold": "Can you please tell me why you did this?", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -7,7 +7,6 @@ namespace Shopsys\\FrameworkBundle\\Model\\Security;\n class Roles\n {\n     public const ROLE_ADMIN = 'ROLE_ADMIN';\n-    public const ROLE_ADMIN_AS_CUSTOMER = 'ROLE_ADMIN_AS_CUSTOMER';\n     public const ROLE_LOGGED_CUSTOMER = 'ROLE_LOGGED_CUSTOMER';\n     public const ROLE_SUPER_ADMIN = 'ROLE_SUPER_ADMIN';\n \nReview:"}
{"pred": "Good to have the videoConstraints variable here, but it's not necessary to assign it to itself.", "gold": "Reading this again it should prob prefer the `videoConstraints.facingMode` value over `facingMode` if the former was already set", "prompt": "Look at the given code changes and generate the code reviews:\n\nCode Change: @@ -587,6 +587,8 @@ static void *evp_md_from_dispatch(const OSSL_DISPATCH *fns,\n     if ((md = EVP_MD_meth_new(NID_undef, NID_undef)) == NULL)\n         return NULL;\n \n+    md->name = OPENSSL_strdup(name);\n+\n     for (; fns->function_id != 0; fns++) {\n         switch (fns->function_id) {\n         case OSSL_FUNC_DIGEST_NEWCTX:\nReview: Should this be NULL checked? Not having the name isn't critical I guess.\n\nCode Change: @@ -105,7 +105,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)\n     s->srp_ctx.b = NULL;\n     s->srp_ctx.v = NULL;\n     s->srp_ctx.login = NULL;\n-    s->srp_ctx.info = ctx->srp_ctx.info;\n+    s->srp_ctx.info = NULL;\n     s->srp_ctx.strength = ctx->srp_ctx.strength;\n \n     if (((ctx->srp_ctx.N != NULL) &&\nReview: Probably a memset() of srp_ctx is more appropriate here, rather than all these NULL assignments\n\nCode Change: @@ -1087,7 +1087,8 @@ export class AmpA4A extends AMP.BaseElement {\n     dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n     this.protectedEmitLifecycleEvent_('renderFriendlyStart');\n     // Create and setup friendly iframe.\n-    const iframe = /** @type {!HTMLIFrameElement} */(\n+    dev().assert(!this.iframe);\n+    this.iframe = /** @type {!HTMLIFrameElement} */(\n         createElementWithAttributes(\n             /** @type {!Document} */(this.element.ownerDocument), 'iframe', {\n               // NOTE: It is possible for either width or height to be 'auto',\nRefiew: You can remove these now given we have an explicit check earlier in layoutCallback\n            Code Change: @@ -168,9 +168,12 @@ module.exports = class Webcam extends Plugin {\n       this.opts.modes.indexOf('video-only') !== -1 ||\n       this.opts.modes.indexOf('picture') !== -1\n \n+    const videoConstraints = this.opts.videoConstraints ?? {}\n+    videoConstraints.facingMode = this.opts.facingMode\n+\n     return {\n       audio: acceptsAudio,\n-      video: acceptsVideo ? { facingMode: this.opts.facingMode } : false\n+      video: acceptsVideo ? videoConstraints : false\n     }\n   }\n \nReview:"}
