id,index,diff,claim,correctness (1/0/-1/-2),based on diff,additional claims,old_file,new_file
37758,7560,"@@ -48,7 +48,7 @@ export default function CountrySelect() {
 				timezone: countriesByCode[ newCountryCode ].defaultTimeZoneId,
 			} );
 		}
-	}, [ setValues ] );
+	}, [ setValues, value ] );
 
 	return (
 		<Select",The dependency array for the useEffect hook has been modified.,,,,test7560_old.js,test7560_new.js
,,,"Previously, the hook was dependent on only 'setValues'.",,,,,
,,,"Now, it is dependent on both 'setValues' and 'value'.",,,,,
,,,"The effect within the useEffect hook will now be triggered not only when 'setValues' changes, but also when 'value' changes.",,,,,
,,,"This could potentially lead to more frequent updates of the effect, which could have performance implications if the effect is resource-intensive.",,,,,
,,,It could also lead to unnecessary executions of the effect if 'value' is not expected to change frequently.,,,,,
,,,If 'value' is not provided or changes,,,,,
15026,3516,"@@ -327,6 +327,16 @@ class FirefoxProfile(object):
                     rc.append(node.data)
             return ''.join(rc).strip()
 
+        def parse_manifest_json(content):
+            """"""Extracts the details from the contents of a WebExtensions `manifest.json` file.""""""
+            manifest = json.loads(content)
+            return {
+                'id': manifest['applications']['gecko']['id'],
+                'version': manifest['version'],
+                'name': manifest['version'],
+                'unpack': False,
+            }
+
         if not os.path.exists(addon_path):
             raise IOError('Add-on path does not exist: %s' % addon_path)
 ",A new method called `parse_manifest_json` has been added to the `FirefoxProfile` class.,,,,test3516_old.js,test3516_new.js
,,,This method takes a parameter `content` which is expected to be the content of a WebExtensions `manifest.json` file.,,,,,
,,,The method uses the `json.loads` function to parse the JSON content into a Python dictionary.,,,,,
,,,"It then returns a dictionary with the 'id', 'version', 'name', and 'unpack' keys. The 'id', 'version', and 'name' values are extracted from the parsed JSON dictionary, while the 'unpack' value is set to False.",,,,,
,,,The addition of this method,,,,,
16536,9367,"@@ -22,6 +22,16 @@ options._catchError = function(error, newVNode, oldVNode) {
 	oldCatchError(error, newVNode, oldVNode);
 };
 
+const oldUnmount = options.unmount;
+options.unmount = function(vnode) {
+	/** @type {import('./internal').Component} */
+	const component = vnode._component;
+	if (component && component._onResolve) {
+		component._onResolve();
+	}
+	if (oldUnmount) oldUnmount(vnode);
+};
+
 function detachedClone(vnode, detachedParent, parentDom) {
 	if (vnode) {
 		if (vnode._component && vnode._component.__hooks) {",A new constant `oldUnmount` is defined and assigned the value of `options.unmount`.,,,,test9367_old.js,test9367_new.js
,,,The `unmount` function in the `options` object is overridden. This new function takes a `vnode` as an argument.,,,,,
,,,"Inside the new `unmount` function, a `component` constant is defined and assigned the value of `vnode._component`.",,,,,
,,,"A conditional statement checks if the `component` exists and if `component._onResolve` exists. If both conditions are met, `component._onResolve()` is called.",,,,,
,,,The old `unmount` function is called with `vnode` as an argument if,,,,,
14171,8548,"@@ -51,7 +51,7 @@
     // @vue/component
     var commonFormattersMixin = {
         methods: {
-            formatTimeAgo: countlyCommon.formatTimeAgo,
+            formatTimeAgo: countlyCommon.formatTimeAgoText,
             formatNumber: countlyCommon.formatNumber,
             getShortNumber: countlyCommon.getShortNumber
         }",The method used for formatting time ago has been changed from countlyCommon.formatTimeAgo to countlyCommon.formatTimeAgoText.,,,,test8548_old.js,test8548_new.js
,,,"This change could affect the way time ago is formatted. The new method, formatTimeAgoText, might provide a different output than the old method, formatTimeAgo.",,,,,
,,,Any parts of the application that use the formatTimeAgo method will now receive a different formatted time ago output.,,,,,
,,,"If the formatTimeAgoText method does not provide the same functionality as the formatTimeAgo method, this could lead to unexpected behavior in the application.",,,,,
20700,8607,"@@ -473,7 +473,7 @@ describe('GridFS Stream', function () {
                     // Fail if user tries to abort an aborted stream
                     uploadStream.abort().then(null, function (error) {
                       expect(error.toString()).to.equal(
-                        'MongoDriverError: Cannot call abort() on a stream twice'
+                        'MongoGridFSStreamError: Cannot call abort() on a stream twice'
                       );
                       client.close(done);
                     });",The error message in the test case has been changed.,,,,test8607_old.js,test8607_new.js
,,,"Previously, the error was 'MongoDriverError: Cannot call abort() on a stream twice'. Now, it has been updated to 'MongoGridFSStreamError: Cannot call abort() on a stream twice'.",,,,,
,,,This change suggests that the error handling in the application has been updated to handle 'MongoGridFSStreamError' instead of 'MongoDriverError'.,,,,,
,,,The test case is now expected to fail with 'MongoGridFSStreamError' instead of 'MongoDriverError'.,,,,,
,,,"If the error handling in the application is not updated accordingly, the test case",,,,,
4930,566,"@@ -2,7 +2,7 @@ import { pathOr, curry, merge } from 'ramda';
 
 /**
  * Flattens a property path so that its fields are spread out into the provided object.
- *
+ * It's like {@link RA.spreadPath|spreadPath}, but preserves object under property path
  *
  * @func flattenPath
  * @memberOf RA","The description of the function ""flattenPath"" has been updated.",,,,test566_old.js,test566_new.js
,,,The comment block that describes the function has been reformatted.,,,,,
,,,A new line has been added to the comment block.,,,,,
,,,"The updated description provides more detailed information about the function, which can be useful for developers using this function.",,,,,
,,,The reformatting of the comment block might have been done to improve the readability of the code.,,,,,
,,,The addition of a new line does not change the functionality of the code but might have been done to adhere to a specific coding style or convention.,,,,,
13380,2455,"@@ -13,7 +13,8 @@ var reportsInstance = {},
     localize = require('../../../api/utils/localization.js'),
     common = require('../../../api/utils/common.js'),
     log = require('../../../api/utils/log')('reports:reports'),
-    versionInfo = require('../../../frontend/express/version.info');
+    versionInfo = require('../../../frontend/express/version.info'),
+    offlineMode = plugins.getConfig(""api"").offline_mode;
 
 versionInfo.page = (!versionInfo.title) ? ""https://count.ly"" : null;
 versionInfo.title = versionInfo.title || ""Countly"";",The code change involves the addition of a new variable called 'offlineMode' which is assigned the value of the 'offline_mode' configuration from the 'api' plugin.,,,,test2455_old.js,test2455_new.js
,,,"The 'versionInfo' variable is still being required from the 'version.info' file, but no changes have been made to it.",,,,,
,,,The addition of the 'offlineMode' variable suggests that the application may now be handling offline mode functionality. This could mean that the application can now function even when there is no internet connection.,,,,,
,,,"The 'versionInfo' variable is still being used in the code, but no changes are being made to it. This could mean that the version information",,,,,
13587,9144,"@@ -1656,7 +1656,7 @@ class TargetLocator {
   window(nameOrHandle) {
     return this.driver_.schedule(
         new command.Command(command.Name.SWITCH_TO_WINDOW).
-            setParameter('name', nameOrHandle),
+            setParameter('handle', nameOrHandle),
         'WebDriver.switchTo().window(' + nameOrHandle + ')');
   }
 ","The code change is in the TargetLocator class, specifically in the window method.",,,,test9144_old.js,test9144_new.js
,,,The parameter passed to the setParameter method has been changed from 'name' to 'handle'.,,,,,
,,,The new parameter 'handle' is set to the value of the variable 'nameOrHandle'.,,,,,
,,,This change implies that the way the window method handles window names has been deprecated in favor of handling window handles.,,,,,
,,,"The change could potentially affect the way the webdriver switches between windows, as it now uses window handles instead of names.",,,,,
,,,"If there are any dependencies or functionalities that rely on the window method using window names, they may not function as expected after this",,,,,
5472,349,"@@ -45,6 +45,7 @@ program
   .option('-C <build_dir>', 'build config (out/Debug, out/Release')
   .option('--target_arch <target_arch>', 'target architecture', 'x64')
   .option('--mac_signing_identifier <id>', 'The identifier to use for signing')
+  .option('--mac_installer_signing_identifier <id>', 'The identifier to use for signing the installer')
   .option('--mac_signing_keychain <keychain>', 'The identifier to use for signing', 'login')
   .option('--debug_build <debug_build>', 'keep debugging symbols')
   .option('--official_build <official_build>', 'force official build settings')",A new option has been added to the program.,,,,test349_old.js,test349_new.js
,,,The new option is '--mac_installer_signing_identifier <id>'.,,,,,
,,,The description for this new option is 'The identifier to use for signing the installer'.,,,,,
,,,This change allows the user of the program to specify the identifier to use for signing the installer.,,,,,
,,,"This could potentially affect the way the installer is signed, potentially improving security or changing the behavior of the installer.",,,,,
,,,"The user now has more control over the signing process, which could be beneficial or problematic depending on the context.",,,,,
11992,8988,"@@ -3,9 +3,9 @@ import { h } from './h';
 
 /**
  * Clones the given VNode, optionally adding attributes/props and replacing its children.
- * @param {VNode} vnode		The virtual DOM element to clone
- * @param {Object} props	Attributes/props to add when cloning
- * @param {VNode} rest		Any additional arguments will be used as replacement children.
+ * @param {import('./vnode').VNode} vnode The virtual DOM element to clone
+ * @param {object} props Attributes/props to add when cloning
+ * @param {Array<import('./vnode').VNode>} [rest] Any additional arguments will be used as replacement children.
  */
 export function cloneElement(vnode, props) {
 	return h(","The type of the 'vnode' parameter in the 'cloneElement' function has been changed. Previously, it was of type 'VNode'. Now, it is imported from the './vnode' module and is of type 'VNode'.",,,,test8988_old.js,test8988_new.js
,,,The 'props' parameter in the 'cloneElement' function remains of type 'Object'.,,,,,
,,,"The 'rest' parameter in the 'cloneElement' function has been changed. Previously, it was of type 'VNode'. Now, it is an array of 'VNode' imported from the './vnode' module. The 'rest' parameter is optional and its default value is an empty array.",,,,,
,,,The change,,,,,
12790,3422,"@@ -87,8 +87,11 @@ export function useReducer(reducer, initialState, init) {
 			init == null ? invokeOrReturn(null, initialState) : init(initialState),
 
 			action => {
-				hookState._value[0] = reducer(hookState._value[0], action);
-				hookState._component.setState({});
+				const nextValue = reducer(hookState._value[0], action);
+				if (!Object.is(hookState._value[0], nextValue)) {
+					hookState._value[0] = nextValue;
+					hookState._component.setState({});
+				}
 			}
 		];
 	}",The code has been refactored to not only calculate the next value for the state but also to check if the next value is different from the current value.,,,,test3422_old.js,test3422_new.js
,,,A new constant `nextValue` has been introduced to hold the value calculated by the reducer.,,,,,
,,,A conditional statement has been added to check if the `nextValue` is not equal to the current value of `hookState._value[0]`.,,,,,
,,,"If the `nextValue` is different from the current value, the `hookState._value[0]` is updated with the `nextValue` and the state of the component is set to an empty object.",,,,,
,,,The refact,,,,,
16303,4298,"@@ -27,7 +27,12 @@ function collectResultsFromFrames(
   frames.forEach(frame => {
     const tabindex = parseInt(frame.node.getAttribute('tabindex'), 10);
     const focusable = isNaN(tabindex) || tabindex >= 0;
+
     const rect = frame.node.getBoundingClientRect();
+    let width = parseInt(frame.node.getAttribute('width'), 10);
+    let height = parseInt(frame.node.getAttribute('height'), 10);
+    width = isNaN(width) ? rect.width : width;
+    height = isNaN(height) ? rect.height : height;
 
     var params = {
       options: options,",Four lines of code have been added to the function collectResultsFromFrames.,,,,test4298_old.js,test4298_new.js
,,,The added code is used to get the width and height of the frame from the frame's attributes.,,,,,
,,,"If the width or height is not a number (NaN), it is replaced with the width or height from the bounding client rectangle.",,,,,
,,,The added code ensures that the width and height of the frame are always valid numbers.,,,,,
,,,This could prevent potential errors or unexpected behavior in the subsequent code that rely on the width and height of the frame.,,,,,
,,,"The change could potentially affect the layout or positioning of the frames, depending on how the width and height are used in",,,,,
12633,2886,"@@ -31,6 +31,10 @@ msg.Number = {};
 msg.Number.min = ""Path `{PATH}` ({VALUE}) is less than minimum allowed value ({MIN})."";
 msg.Number.max = ""Path `{PATH}` ({VALUE}) is more than maximum allowed value ({MAX})."";
 
+msg.Date = {};
+msg.Date.min = ""Path `{PATH}` ({VALUE}) is before than minimum allowed value ({MIN})."";
+msg.Date.max = ""Path `{PATH}` ({VALUE}) is after than maximum allowed value ({MAX})."";
+
 msg.String = {};
 msg.String.enum = ""`{VALUE}` is not a valid enum value for path `{PATH}`."";
 msg.String.match = ""Path `{PATH}` is invalid ({VALUE})."";","Three new properties have been added to the 'msg' object. Two of these properties are objects themselves, and the third is a string.",,,,test2886_old.js,test2886_new.js
,,,"The first added property is 'Date', which is an object.",,,,,
,,,"Two new properties have been added to the 'Date' object. The first is 'min', which is a string. The second is 'max', also a string.",,,,,
,,,"The 'min' property contains a message template that displays the path of the invalid value, the value itself, and the minimum allowed value.",,,,,
,,,"The 'max' property contains a message template that displays the path of the invalid value, the value itself, and the maximum allowed value.",,,,,
15124,721,"@@ -1,4 +1,6 @@
-var nn = node.nodeName.toLowerCase();
-return (
-	node.hasAttribute('alt') && (nn === 'img' || nn === 'input' || nn === 'area')
-);
+const { nodeName } = virtualNode.props;
+if (['img', 'input', 'area'].includes(nodeName) === false) {
+	return false;
+}
+
+return typeof virtualNode.attr('alt') === 'string';",The code has been refactored to use destructuring to get the 'nodeName' property from the 'virtualNode.props' object.,,,,test721_old.js,test721_new.js
,,,"A new conditional statement has been added to check if the 'nodeName' is not included in the array ['img', 'input', 'area']. If it's not, the function returns false.",,,,,
,,,The return statement has been updated to check the type of 'alt' attribute of the 'virtualNode' instead of the 'node' object.,,,,,
,,,The refactoring to use destructuring makes the code cleaner and easier to read.,,,,,
,,,The new conditional statement improves the performance of the function by avoiding unnecessary checks if,,,,,
8188,2290,"@@ -113,7 +113,9 @@ class CapacitorSplashScreen {
     `;
 
     this.mainWindowRef.on('closed', () => {
-      this.splashWindow.close();
+      if (this.splashWindow && !this.splashWindow.isDestroyed) { 
+        this.splashWindow.close(); 
+      }
     });
 
     this.splashWindow.loadURL(`data:text/html;charset=UTF-8,${splashHtml}`, {baseURLForDataURL: `file://${rootPath}/splash_assets/`});",The code change involves adding a conditional statement to check if the 'splashWindow' exists and has not been destroyed before attempting to close it.,,,,test2290_old.js,test2290_new.js
,,,The condition `if (this.splashWindow && !this.splashWindow.isDestroyed)` ensures that the 'close' method is not called on a possibly non-existent or already destroyed 'splashWindow' object.,,,,,
,,,This change adds a layer of safety and prevents potential errors or unexpected behavior by checking if the 'splashWindow' object exists before attempting to close it.,,,,,
,,,"It also ensures that the 'close' method is not called on a potentially destroyed object, which could lead to a",,,,,
10735,6199,"@@ -5,8 +5,7 @@ import { enqueueRender } from '../render-queue';
 import { getNodeProps } from './index';
 import { diff, mounts, diffLevel, flushMounts, recollectNodeTree, removeChildren } from './diff';
 import { createComponent, collectComponent } from './component-recycler';
-
-
+import remove from './remove';
 
 /** Set a component's `props` (generally derived from JSX attributes).
  *	@param {Object} props",An import statement has been added to the code. The function 'remove' is imported from the file './remove'.,,,,test6199_old.js,test6199_new.js
,,,The function 'remove' can now be used in the code without needing to reference its full path every time. This could make the code cleaner and easier to read.,,,,,
,,,"The addition of the 'remove' function implies that the functionality it provides is being used in the code, potentially for removal or deletion of elements or components. This could have implications for the program's functionality and the user interface it provides.",,,,,
,,,"If the './remove' file or the 'remove' function is not properly documented, it could lead to confusion for other developers working on the project",,,,,
11085,9725,"@@ -26,6 +26,18 @@ describe ""Selenium::WebDriver::TargetLocator"" do
     end
   end
 
+  it ""should switch to parent frame"" do
+    driver.navigate.to url_for(""iframes.html"")
+
+    iframe = driver.find_element(:tag_name => ""iframe"")
+    driver.switch_to.frame(iframe)
+
+    driver.find_element(:name, 'login').should be_kind_of(WebDriver::Element)
+
+    driver.switch_to.parent_frame
+    driver.find_element(:id, 'iframe_page_heading').should be_kind_of(WebDriver::Element)
+  end
+
   # switching by name not yet supported by safari
   not_compliant_on :browser => [:ie, :iphone, :safari] do
     it ""should switch to a window and back when given a block"" do",A new test case has been added to the code.,,,,test9725_old.js,test9725_new.js
,,,The test case checks if the webdriver can switch to a parent frame.,,,,,
,,,"The test case navigates to the ""iframes.html"" page.",,,,,
,,,It then finds the iframe element and switches the webdriver to that frame.,,,,,
,,,The test case then checks if the 'login' element exists and is of the correct type (WebDriver::Element).,,,,,
,,,The webdriver then switches back to the parent frame.,,,,,
,,,"Finally, the test case checks if the 'iframe_page_heading' element exists and is of the correct type (WebDriver::Element).",,,,,
18051,8007,"@@ -36,6 +36,11 @@ function writeCommand(server, type, opsField, ns, ops, options, callback) {
     writeCommand.bypassDocumentValidation = options.bypassDocumentValidation;
   }
 
+  if (writeConcern.w === 0) {
+    // don't include session for unacknowledged writes
+    delete options.session;
+  }
+
   const commandOptions = Object.assign(
     {
       checkKeys: type === 'insert',",A new condition has been added to the writeCommand function.,,,,test8007_old.js,test8007_new.js
,,,This condition checks if the write concern (w) of the server is 0.,,,,,
,,,"If the write concern is 0, the session option is removed from the options object.",,,,,
,,,"The session option is typically used to maintain state across multiple operations. By removing it when the write concern is 0, this could potentially affect the state of the application.",,,,,
,,,"This change could affect the performance of the application, as unacknowledged writes (w=0) are less common and may not always be desired.",,,,,
,,,"It could also affect the reliability of the application, as the session option",,,,,
15319,3406,"@@ -25,7 +25,11 @@ const isPromiseLike = require('../utils').isPromiseLike;
 function addToOperationsList(bulkOperation, docType, document) {
   // Get the bsonSize
   const bsonSize = bson.calculateObjectSize(document, {
-    checkKeys: false
+    checkKeys: false,
+
+    // Since we don't know what the user selected for BSON options here,
+    // err on the safe side, and check the size with ignoreUndefined: false.
+    ignoreUndefined: false
   });
 
   // Throw error if the doc is bigger than the max BSON size",The code change is in the function addToOperationsList where the BSON options are being set.,,,,test3406_old.js,test3406_new.js
,,,"The option 'checkKeys: false' has been removed and added back, possibly to correct a formatting or syntax error.",,,,,
,,,A new option 'ignoreUndefined: false' has been added. This is likely to change the behavior of the BSON size calculation.,,,,,
,,,The removal and re-addition of 'checkKeys: false' does not change the functionality of the code but might be a part of code formatting or syntax correction.,,,,,
,,,The addition of 'ignoreUndefined: false' implies that the BSON size calculation will now consider,,,,,
12883,2307,"@@ -87,11 +87,11 @@ export function diff(dom, parentDom, newVNode, oldVNode, context, isSvg, excessD
 			c._vnode = newVNode;
 
 			// Invoke getDerivedStateFromProps
-			let s = c._nextState || c.state;
+			if (c._nextState==null) {
+				c._nextState = c.state;
+			}
 			if (newType.getDerivedStateFromProps!=null) {
-				oldState = assign({}, c.state);
-				if (s===c.state) s = c._nextState = assign({}, s);
-				assign(s, newType.getDerivedStateFromProps(newVNode.props, s));
+				assign(c._nextState==c.state ? (c._nextState = assign({}, c._nextState)) : c._nextState, newType.getDerivedStateFromProps(newVNode.props, c._nextState));
 			}
 
 			// Invoke pre-render lifecycle methods",The code has been refactored to improve readability and efficiency.,,,,test2307_old.js,test2307_new.js
,,,The logic for setting the value of the 's' variable has been moved inside a conditional statement.,,,,,
,,,"The 'oldState' variable is no longer assigned a value, as it is no longer needed.",,,,,
,,,The assignment of 's' to 'c._nextState' is now only performed if 's' is not equal to 'c.state'.,,,,,
,,,"The code is now easier to read and understand, which can help in future debugging and maintenance.",,,,,
,,,"The removal of the 'oldState' variable can help in memory management, as it is no longer needed.",,,,,
8812,7290,"@@ -1076,9 +1076,14 @@ Blockly.WorkspaceSvg.prototype.deleteVariableById = function(id) {
  * @package
  */
 Blockly.WorkspaceSvg.prototype.createVariable = function(name, opt_type, opt_id) {
+  var variableInMap = (this.getVariable(name) != null);
   var newVar = Blockly.WorkspaceSvg.superClass_.createVariable.call(this, name,
     opt_type, opt_id);
-  this.refreshToolboxSelection_();
+  // For performance reaons, only refresh the the toolbox for new variables.
+  // Variables that already exist should already be there.
+  if (!variableInMap) {
+    this.refreshToolboxSelection_();
+  }
   return newVar;
 };
 ",A new variable `variableInMap` has been introduced which checks if the variable `name` exists in the map.,,,,test7290_old.js,test7290_new.js
,,,The `refreshToolboxSelection_()` function call has been moved inside a conditional statement. This function is now only called if the variable `name` does not exist in the map.,,,,,
,,,"A comment has been added to explain the reason behind the changes made. The comment suggests that for performance reasons, the toolbox should only be refreshed for new variables, and variables that already exist should already be there.",,,,,
,,,"The `refreshToolboxSelection_()` function is now called less frequently, which could potentially improve performance if the function was previously",,,,,
11960,5474,"@@ -70,3 +70,18 @@ dom.isNativelyFocusable = function(el) {
 	}
 	return false;
 };
+
+/**
+ * Determines if an element is in the focus order, but would not be if its
+ * tabindex were unspecified.
+ * @method insertedIntoFocusOrder
+ * @memberof axe.commons.dom
+ * @instance
+ * @param {HTMLElement} el The HTMLElement
+ * @return {Boolean} True if the element is in the focus order but wouldn't be
+ * if its tabindex were removed. Else, false.
+ */
+dom.insertedIntoFocusOrder = function(el) {
+	return (el.tabIndex > -1 && dom.isFocusable(el) &&
+			!dom.isNativelyFocusable(el));
+};","A new method called ""insertedIntoFocusOrder"" has been added to the axe.commons.dom object.",,,,test5474_old.js,test5474_new.js
,,,This method takes an HTMLElement as a parameter and returns a boolean value.,,,,,
,,,"The method checks if the tabIndex of the element is greater than -1, if the element is focusable, and if the element is not natively focusable.",,,,,
,,,A comment block has been added to describe the purpose of the method and its parameters/return value.,,,,,
,,,"The addition of the ""insertedIntoFocusOrder"" method suggests that there is a need to check if an element is in the focus order but would not be if its",,,,,
14145,4235,"@@ -273,6 +273,7 @@ var testFiles = [
   , '/test/functional/byo_promises_tests.js'
 
   // Functionality tests
+  , '/test/functional/dns_txt_records_tests.js'
   , '/test/functional/mongo_client_tests.js'
   , '/test/functional/collection_tests.js'
   , '/test/functional/db_tests.js'",A new test file has been added to the testFiles array. The new test file is '/test/functional/dns_txt_records_tests.js'.,,,,test4235_old.js,test4235_new.js
,,,"The new test file will now be included in the testing process. This could mean that the DNS TXT records functionality will now be tested, which was not previously the case.",,,,,
,,,"This change could potentially increase the total number of tests being performed, improving the reliability and accuracy of the software.",,,,,
,,,"If the new test file contains any bugs or issues, it could potentially affect the software's functionality. However, with the added test, the likelihood of this happening is reduced.",,,,,
12215,9770,"@@ -14,7 +14,13 @@ class Tag extends BaseItem {
 	}
 
 	static async noteIds(tagId) {
-		const rows = await this.db().selectAll('SELECT note_id FROM note_tags WHERE tag_id = ?', [tagId]);
+		// Get NoteIds of that are tagged with current tag or its descendants
+		const rows = await this.db().selectAll(`WITH RECURSIVE
+												parent_of(id, child_id) AS 
+												(SELECT id, id FROM tags where id=?
+												UNION ALL
+												SELECT parent_of.id, tags2.id FROM parent_of JOIN tags AS tags2 ON parent_of.child_id=tags2.parent_id)
+												SELECT note_id FROM note_tags WHERE tag_id IN (SELECT child_id from parent_of)`, [tagId]);
 		const output = [];
 		for (let i = 0; i < rows.length; i++) {
 			output.push(rows[i].note_id);",The original code that was used to fetch note_ids associated with a particular tagId has been replaced.,,,,test9770_old.js,test9770_new.js
,,,The new code uses a recursive common table expression (CTE) to generate a list of all child tags for a given tagId.,,,,,
,,,The query then selects all note_ids associated with these child tags.,,,,,
,,,The change expands the scope of the query to include not only the current tagId but also all of its descendants.,,,,,
,,,"This could potentially return more note_ids than the previous query, as a tag's descendants will also have note_ids associated with them.",,,,,
,,,This change could potentially improve the accuracy of the,,,,,
15736,7059,"@@ -490,6 +490,18 @@ class Builder {
     return this;
   }
 
+  /**
+   * Sets the {@link ie.ServiceBuilder} to use to manage the geckodriver
+   * child process when creating IE sessions locally.
+   *
+   * @param {ie.ServiceBuilder} service the service to use.
+   * @return {!Builder} a self reference.
+   */
+  setIeService(service) {
+    this.ieService_ = service;
+    return this;
+  }
+
   /**
    * Set {@linkplain edge.Options options} specific to Microsoft's Edge browser
    * for drivers created by this builder. Any proxy settings defined on the","A new method called ""setIeService"" has been added to the ""Builder"" class.",,,,test7059_old.js,test7059_new.js
,,,"This method takes a parameter ""service"" of type ""ie.ServiceBuilder"".",,,,,
,,,"The method sets the ""ieService_"" property of the current instance to the provided service.",,,,,
,,,"The method returns a self reference, i.e., it returns ""this"".",,,,,
,,,"This change allows the ""Builder"" class to be used to set the IE service, which is used to manage the geckodriver child process when creating IE sessions locally.",,,,,
,,,The new method could potentially improve the flexibility and control over the IE service used by the builder.,,,,,
,,,The,,,,,
17220,4907,"@@ -206,7 +206,6 @@ describe('Configure Options', function() {
       iframe.src = '/test/mock/frames/context.html';
       iframe.onload = function() {
         axe.configure(config);
-        iframe.contentWindow.axe.configure(config);
 
         axe.run(
           '#target',",The code line that was removed is the one that configures the axe accessibility testing library within the content window of the iframe.,,,,test4907_old.js,test4907_new.js
,,,This change implies that the axe accessibility testing library is no longer being configured within the content window of the iframe.,,,,,
,,,"This could potentially affect the accessibility of the content within the iframe, as the axe library is now not being applied.",,,,,
,,,"If the axe library was being used for other purposes within the iframe, this change could potentially break those functionalities.",,,,,
,,,This change could also potentially improve performance if the axe library was previously causing performance issues in the iframe.,,,,,
15369,1525,"@@ -1,7 +1,7 @@
 'use strict';
 
 const Aspect = {
-  SKIP_SESSION: Symbol('SKIP_SESSION')
+  SKIP_SESSION: 'SKIP_SESSION'
 };
 
 /**",The value of the constant 'SKIP_SESSION' has been changed from a Symbol to a string.,,,,test1525_old.js,test1525_new.js
,,,"The change from Symbol to string could affect the behavior of the code where the 'SKIP_SESSION' constant is used. If there are any parts of the code that rely on the Symbol type, those parts may not work as expected after this change.",,,,,
,,,"The change could also affect the performance of the code, as strings are generally faster than symbols in JavaScript.",,,,,
,,,"The change could also affect the readability of the code, as strings are easier to read and understand than symbols.",,,,,
6073,2863,"@@ -7,6 +7,12 @@ const createDist = (buildConfig = config.defaultBuildConfig, options) => {
   config.buildConfig = buildConfig
   config.update(options)
 
+  if (config.notarize) {
+    notarize = config.notarize
+    notary_user = config.notary_user
+    notary_password = config.notary_password
+  }
+
   util.updateBranding()
   fs.removeSync(path.join(config.outputDir, 'dist'))
   config.buildTarget = 'create_dist'",The code changes involve adding a conditional block that checks if the 'notarize' configuration exists.,,,,test2863_old.js,test2863_new.js
,,,"If the 'notarize' configuration exists, three variables are assigned values from the 'config' object: 'notarize', 'notary_user', and 'notary_password'.",,,,,
,,,"The added code allows the application to handle notarization configurations, which could be used for notarizing the application before distributing it.",,,,,
,,,"The 'notarize', 'notary_user', and 'notary_password' variables are then used elsewhere in the code, which could affect the notarization process.",,,,,
,,,If the 'notarize,,,,,
10883,1472,"@@ -278,9 +278,7 @@ describe('src/Core', () => {
       plugins: {},
       totalProgress: 0
     })
-    expect(core.plugins.acquirer[0].mocks.uninstall.mock.calls.length).toEqual(
-      1
-    )
+    expect(core.plugins[Object.keys(core.plugins)[0]].length).toEqual(0)
   })
 
   describe('upload hooks', () => {",The code expectation for the length of the uninstall mock calls has been changed.,,,,test1472_old.js,test1472_new.js
,,,"Previously, the code was expecting the length of the uninstall mock calls to be 1.",,,,,
,,,"Now, the code is expecting the length of the uninstall mock calls to be 0.",,,,,
,,,The change in the code expectation implies that the uninstall mock was not being called as expected.,,,,,
,,,"This could be due to a bug in the code that is not allowing the uninstall mock to be called, or it could be due to the uninstall mock being called after the code was no longer expecting it to be called.",,,,,
,,,The change in the expectation could potentially affect the test,,,,,
14685,2663,"@@ -91,6 +91,7 @@ class MergeCells extends BasePlugin {
     this.autofillCalculations = new AutofillCalculations(this);
     this.selectionCalculations = new SelectionCalculations();
 
+    this.hot.selection.transformation.addLocalHook('afterTransformStart', (...args) => this.onAfterLocalTransformStart(...args));
     this.addHook('afterInit', (...args) => this.onAfterInit(...args));
     this.addHook('beforeKeyDown', (...args) => this.onBeforeKeyDown(...args));
     this.addHook('modifyTransformStart', (...args) => this.onModifyTransformStart(...args));",A new line of code has been added to the MergeCells class.,,,,test2663_old.js,test2663_new.js
,,,The new line of code adds a local hook to the 'afterTransformStart' event of the transformation of the selection in the hot.selection object.,,,,,
,,,The callback function for this hook is set to the 'onAfterLocalTransformStart' method of the MergeCells class.,,,,,
,,,The 'onAfterLocalTransformStart' method will now be called after any transformation start event in the hot.selection.transformation object.,,,,,
,,,This could potentially change the behavior of the application in response to transformation start events.,,,,,
,,,If the 'onAfterLocalTransformStart' method is not,,,,,
35758,8350,"@@ -33,6 +33,8 @@ let baseModuleStore = Modules.createModuleStore( 'tagmanager', {
 		'internalAMPContainerID',
 		'useSnippet',
 		'ownerID',
+		'gaAMPPropertyID',
+		'gaPropertyID',
 	],
 	submitChanges,
 	validateCanSubmitChanges,",Two new properties have been added to the baseModuleStore object. These properties are 'gaAMPPropertyID' and 'gaPropertyID'.,,,,test8350_old.js,test8350_new.js
,,,The addition of the 'gaAMPPropertyID' and 'gaPropertyID' properties suggests that the code now has the ability to handle Google Analytics properties specifically for AMP (Accelerated Mobile Pages). This could mean that the application now has more detailed tracking capabilities.,,,,,
,,,"These properties could be used to track events or user behavior on AMP pages, which could provide more detailed insights into user interactions.",,,,,
,,,"If these properties are not properly initialized or handled, it could potentially lead to errors or unexpected behavior in the application. Therefore,",,,,,
14051,6146,"@@ -204,5 +204,4 @@ function server (inputCompanionOptions = {}) {
   return { app, companionOptions }
 }
 
-const { app, companionOptions } = server()
-module.exports = { app, companionOptions, server }
+module.exports = { server }",The destructuring assignment of the server function's return values into the variables app and companionOptions has been removed.,,,,test6146_old.js,test6146_new.js
,,,"The server function's return values, which were previously being destructured into app and companionOptions, are no longer being used in the rest of the code.",,,,,
,,,The module's exports have been updated to no longer include the variables app and companionOptions. Only the server function is being exported.,,,,,
,,,The server function can now be called directly without needing to destructure its return values. This could make the code cleaner and more concise.,,,,,
,,,"The server function's return values are no longer being used in the rest of the code, which",,,,,
24612,5890,"@@ -0,0 +1,19 @@
+
+import { wpApiFetch } from './wp-api-fetch';
+
+import { testClientConfig } from './test-client-config';
+
+/**
+ *
+ * @param {*} config
+ */
+export async function setClientConfig( config = testClientConfig ) {
+	return await wpApiFetch( {
+		path: 'google-site-kit/v1/e2e/auth/client-config',
+		method: 'post',
+		data: {
+			clientID: config.web.client_id,
+			clientSecret: config.web.client_secret,
+		},
+	} );
+}","The code introduces a new file, './wp-api-fetch' and './test-client-config'. These files are not provided in the diff.",,,,test5890_old.js,test5890_new.js
,,,The code imports the 'wpApiFetch' function from the './wp-api-fetch' file and the 'testClientConfig' object from the './test-client-config' file.,,,,,
,,,"The code defines an asynchronous function 'setClientConfig' that takes an optional parameter 'config'. If 'config' is not provided, it defaults to 'testClientConfig'.",,,,,
,,,The 'setClientConfig' function uses the 'wpApiFetch' function to make a POST request to the 'google-site-kit/v,,,,,
12872,2830,"@@ -87,11 +87,11 @@ export function diff(dom, parentDom, newVNode, oldVNode, context, isSvg, excessD
 			c._vnode = newVNode;
 
 			// Invoke getDerivedStateFromProps
-			let s = c._nextState || c.state;
+			if (c._nextState==null) {
+				c._nextState = c.state;
+			}
 			if (newType.getDerivedStateFromProps!=null) {
-				oldState = assign({}, c.state);
-				if (s===c.state) s = c._nextState = assign({}, s);
-				assign(s, newType.getDerivedStateFromProps(newVNode.props, s));
+				c.setState(newType.getDerivedStateFromProps(newVNode.props, c._nextState));
 			}
 
 			// Invoke pre-render lifecycle methods",The code has been refactored to improve readability and efficiency.,,,,test2830_old.js,test2830_new.js
,,,"The logic for setting the state 's' has been moved into a conditional statement that checks if 'c._nextState' is null. If it is, 'c._nextState' is set to a copy of 'c.state'.",,,,,
,,,The 'oldState' assignment and the state update have been replaced with a single line of code that uses 'c.setState' to update the state with the result of 'getDerivedStateFromProps'.,,,,,
,,,"The refactored code is easier to read and understand, which can help in future debugging and maintenance.",,,,,
,,,The use,,,,,
11952,8357,"@@ -68,13 +68,14 @@ export function renderComponent(component, opts, mountAll, isChild) {
 		state = component.state,
 		context = component.context,
 		previousProps = component.prevProps || props,
-		previousState = component.prevState || state,
+		previousState = extend({}, component.prevState || state),
 		previousContext = component.prevContext || context,
 		isUpdate = component.base,
 		nextBase = component.nextBase,
 		initialBase = isUpdate || nextBase,
 		initialChildComponent = component._component,
 		skip = false,
+		snapshot = previousContext,
 		rendered, inst, cbase;
 
 	if (component.constructor.getDerivedStateFromProps) {",The previousState object has been changed from being a reference to a new object created by extending the current state. This is to prevent any potential side effects that might occur due to changes in the state object.,,,,test8357_old.js,test8357_new.js
,,,A new variable named 'snapshot' has been introduced. This variable is set to the previousContext.,,,,,
,,,The change in the previousState object could potentially prevent any bugs or errors that might occur due to changes in the state object.,,,,,
,,,"The introduction of the 'snapshot' variable suggests that some part of the code might now be dealing with the context at a certain point in time. This could have implications for the rest of the code, especially if the 'snapshot",,,,,
17726,6426,"@@ -2,6 +2,7 @@
  * and will be replaced soon by a Vue component.
  */
 
+/* eslint-disable no-var */
 import browser from 'browser';
 import dom from 'dom';
 import 'css!./navdrawer';","An ESLint rule has been disabled in the code. ESLint is a tool for identifying and reporting on patterns found in ECMAScript/JavaScript code, with the aim of making code more consistent and avoiding bugs. The specific rule that has been disabled is 'no-var'.",,,,test6426_old.js,test6426_new.js
,,,"The 'no-var' rule is used in ESLint to warn when the var keyword is used in the code. This rule is generally recommended to be used to avoid using the var keyword, as it can lead to issues with scope and hoisting. By disabling this rule, the developer is indicating that they are okay with using the var keyword in this particular section of the code. This",,,,,
10707,4604,"@@ -380,8 +380,15 @@ class RemoteConnection(object):
             # Authorization header
             headers[""Authorization""] = ""Basic %s"" % auth
 
-        self._conn.request(method, parsed_url.path, data, headers)
-        resp = self._conn.getresponse()
+        if body and method != 'POST' and method != 'PUT':
+            body = None
+        try:
+          self._conn.request(method, parsed_url.path, body, headers)
+          resp = self._conn.getresponse()
+        except httplib.HTTPException:
+          self._conn.close()
+          raise
+
         statuscode = resp.status
         statusmessage = resp.msg
         LOGGER.debug('%s %s' % (statuscode, statusmessage))","The code now checks if the 'body' is not None and the 'method' is not 'POST' or 'PUT'. If both conditions are met, the 'body' is set to None.",,,,test4604_old.js,test4604_new.js
,,,"The code now includes a try-except block. Inside this block, the 'request' method is called with 'body' as the data parameter and the response is obtained using the 'getresponse' method.",,,,,
,,,"If an 'HTTPException' occurs during the execution of the try block, the connection is closed with the 'close' method and the exception is reraised.",,,,,
,,,The change ensures that the 'body' is not sent with the 'request' method if,,,,,
25369,6397,"@@ -31,7 +31,7 @@ storiesOf( 'Global', module )
 				title={ __( 'Top content over the last 28 days', 'google-site-kit' ) }
 				headerCtaLink=""https://analytics.google.com""
 				headerCtaLabel={ __( 'See full stats in Analytics', 'google-site-kit' ) }
-				footerCtaLabel={ __( 'Analytics', 'google-site-kit' ) }
+				footerCtaLabel={ _x( 'Analytics', 'Service name', 'google-site-kit' ) }
 				footerCtaLink=""https://analytics.google.com""
 			>
 				<AnalyticsDashboardWidgetTopPagesTable />",The label for the footer call-to-action (footerCtaLabel) has been changed from 'Analytics' to 'Analytics'.,,,,test6397_old.js,test6397_new.js
,,,The change is done using the _x function instead of the __ function.,,,,,
,,,"The change implies that the label for the footer CTA is now expected to be translated. If the language of the website is not set to English, the label will be displayed in the translated language.",,,,,
,,,"This change could potentially affect the accessibility of the website, as screen readers may read out the translated label instead of the default label.",,,,,
,,,"If the 'Analytics' label is not translated into the desired language, it may lead",,,,,
15111,4259,"@@ -18,10 +18,14 @@ const handleCallback = require('../utils').handleCallback;
 const indexInformationDb = require('./db_ops').indexInformation;
 const isObject = require('../utils').isObject;
 const Long = require('mongodb-core').BSON.Long;
+const makeLazyLoader = require('../utils').makeLazyLoader;
 const MongoError = require('mongodb-core').MongoError;
 const ReadPreference = require('mongodb-core').ReadPreference;
 const toError = require('../utils').toError;
 
+const collLoader = makeLazyLoader(`${__dirname}/../collection`);
+const dbLoader = makeLazyLoader(`${__dirname}/../db`);
+
 /**
  * Group function helper
  * @ignore",Three new lines of code have been added to the file.,,,,test4259_old.js,test4259_new.js
,,,The first new line imports the function 'makeLazyLoader' from the '../utils' module.,,,,,
,,,"The second and third new lines create two new variables, 'collLoader' and 'dbLoader', which are assigned the result of calling the 'makeLazyLoader' function with the paths to the '../collection' and '../db' directories, respectively.",,,,,
,,,The addition of the 'makeLazyLoader' function suggests that the code may now be using lazy loading to improve performance by loading modules only when they are needed.,,,,,
,,,The 'collLoader' and 'dbLoader' variables,,,,,
12707,3853,"@@ -44,9 +44,12 @@ module.exports = class Client {
       body: data
     }).then((response) => response.json()).then((assembly) => {
       if (assembly.error) {
-        const error = new Error(assembly.error)
+        const error = new Error(assembly)
         error.message = assembly.error
-        error.details = assembly.reason
+        error.details = assembly.message
+        if (assembly.assembly_id) {
+          error.details += ' ' + `assembly_id: ${assembly.assembly_id}`
+        }
         throw error
       }
 ",The error object is now created using the entire 'assembly' object instead of just the 'error' property.,,,,test3853_old.js,test3853_new.js
,,,The 'details' property of the error object is now set to the 'message' property of the 'assembly' object.,,,,,
,,,"An additional check has been added to include the 'assembly_id' property of the 'assembly' object in the 'details' property of the error object, if it exists.",,,,,
,,,"The error message will now be more descriptive, as it will now include the entire 'assembly' object. This could potentially make debugging more difficult.",,,,,
,,,The 'details' property of the error object will now include the 'assembly_id,,,,,
15182,2396,"@@ -93,7 +93,7 @@ function setProperty(dom, name, value, oldValue, isSvg) {
 		}
 	}
 	// Benchmark for comparison: https://esbench.com/bench/574c954bdb965b9a00965ac6
-	else if (name[0] === 'o' && name[1] === 'n') {
+	else if (name.slice(0, 2) === 'on') {
 		let useCapture = name !== (name = name.replace(/Capture$/, ''));
 		let nameLower = name.toLowerCase();
 		name = (nameLower in dom ? nameLower : name).slice(2);","The condition for the else if statement has been changed. Previously, it checked if the first two characters of the 'name' variable were 'o' and 'n'. Now, it checks if the first two characters of the 'name' variable match the string 'on'.",,,,test2396_old.js,test2396_new.js
,,,"This change will affect the way the code handles events. It may affect how it recognizes and responds to events, potentially leading to different behaviors.",,,,,
,,,"It could potentially fix a bug in the previous version of the code, where the event listener was not being correctly identified.",,,,,
,,,"This change could also potentially improve the performance of the code, as it will skip unnecessary checks for the first two characters of",,,,,
16810,1454,"@@ -22,5 +22,7 @@ describe('Client Side Encryption', function() {
     return testContext.setup(this.configuration);
   });
 
-  generateTopologyTests(testSuites, testContext);
+  generateTopologyTests(testSuites, testContext, spec => {
+    return !spec.description.match(/type=regex/);
+  });
 });","The function call to ""generateTopologyTests"" has been modified.",,,,test1454_old.js,test1454_new.js
,,,"Previously, the function was called with two arguments, ""testSuites"" and ""testContext"".",,,,,
,,,"Now, an additional argument ""spec"" has been added to the function.",,,,,
,,,"The ""spec"" argument is a function that returns the result of a match between the description of the ""spec"" object and the string ""type=regex"".",,,,,
,,,"The change in the function call implies that the ""generateTopologyTests"" function now requires an additional argument.",,,,,
,,,"The new ""spec"" argument is a function that filters out ""spec"" objects where the description matches the string """,,,,,
16461,5610,"@@ -213,7 +213,6 @@ const CASE_TRANSLATION = {
   tlscafile: 'tlsCAFile',
   tlscertificatekeyfile: 'tlsCertificateKeyFile',
   tlscertificatekeyfilepassword: 'tlsCertificateKeyFilePassword',
-  wtimeout: 'wTimeoutMS',
   j: 'journal'
 };
 ",The code change involves the removal of a key-value pair from the constant object CASE_TRANSLATION. The key removed is 'wtimeout'.,,,,test5610_old.js,test5610_new.js
,,,The removal of 'wtimeout' from the CASE_TRANSLATION object will prevent any future references to 'wtimeout' in the codebase from accessing the value 'wTimeoutMS'.,,,,,
,,,This could potentially lead to errors if the 'wtimeout' is still being used in the codebase.,,,,,
,,,"The removal of this key-value pair will also remove the corresponding entry from the object, freeing up memory.",,,,,
26815,5405,"@@ -61,7 +61,7 @@ class AdSenseSetupWidget extends Component {
 
 	async getAccounts() {
 		try {
-			const responseData = await data.get( TYPE_MODULES, 'adsense', 'accounts' );
+			const responseData = await data.get( TYPE_MODULES, 'adsense', 'accounts', { maybeSetAccount: true } );
 
 			/**
 			 * Defines the account status. Possible values:","The code change is in the AdSenseSetupWidget class, specifically in the getAccounts method.",,,,test5405_old.js,test5405_new.js
,,,The change is in the way the data.get method is called.,,,,,
,,,"Previously, the method was called with three arguments: TYPE_MODULES, 'adsense', and 'accounts'.",,,,,
,,,"Now, an object is passed as an additional argument. The object has a property 'maybeSetAccount' set to true.",,,,,
,,,The change suggests that the 'accounts' data is now being retrieved in a way that may set an account.,,,,,
,,,This could mean that the 'accounts' data is now being used for some other,,,,,
15097,958,"@@ -0,0 +1,17 @@
+/**
+ * Memoize a function.
+ * @method memoize
+ * @memberof axe.utils
+ * @param {Function} fn Function to memoize
+ * @return {Function}
+ */
+axe._memoizedFns = [];
+axe.utils.memoize = function(fn) {
+	// keep track of each function that is memoized so it can be cleared at
+	// the end of a run. each memoized function has its own cache, so there is
+	// no method to clear all memoized caches. instead, we have to clear each
+	// individual memoized function ourselves.
+	const memoized = axe.imports.memoize(fn);
+	axe._memoizedFns.push(memoized);
+	return memoized;
+};",A new function named `memoize` has been added to the `axe.utils` object.,,,,test958_old.js,test958_new.js
,,,This function takes a single argument `fn` which is expected to be a function.,,,,,
,,,The function `memoize` returns a new function which is the memoized version of the input function `fn`.,,,,,
,,,A new array `axe._memoizedFns` has been added to the `axe` object. This array is used to keep track of all the memoized functions.,,,,,
,,,The `memoize` function pushes the memoized function it returns into the `axe._memoizedFns` array.,,,,,
16753,8415,"@@ -18,7 +18,7 @@ function pageNoDuplicateEvaluate(node, options, virtualNode) {
   cache.set(key, true);
 
   let elms = querySelectorAllFilter(axe._tree[0], options.selector, elm =>
-    isVisible(elm.actualNode)
+    isVisible(elm.actualNode, true)
   );
 
   // Filter elements that, within certain contexts, don't map their role.","The function call to ""isVisible"" has been modified.",,,,test8415_old.js,test8415_new.js
,,,"Previously, the function ""isVisible"" was called with one argument, ""elm.actualNode"".",,,,,
,,,"Now, the function ""isVisible"" is called with two arguments, ""elm.actualNode"" and ""true"".",,,,,
,,,"The change implies that the ""isVisible"" function now requires two arguments instead of one.",,,,,
,,,"The second argument passed to the ""isVisible"" function is a boolean value set to ""true"".",,,,,
,,,"This could potentially affect the visibility check performed by the ""isVisible"" function.",,,,,
,,,"The change could potentially affect the results of the ""pageNo",,,,,
16864,516,"@@ -47,13 +47,13 @@ class Selection {
      */
     this.selectedByCorner = false;
     /**
-     * The collection of the selection layer levels where the whole row was selected using the row header.
+     * The collection of the selection layer levels where the whole row was selected using the row header or the corner header.
      *
      * @type {Set.<number>}
      */
     this.selectedByRowHeader = new Set();
     /**
-     * The collection of the selection layer levels where the whole column was selected using the column header.
+     * The collection of the selection layer levels where the whole column was selected using the column header or the corner header.
      *
      * @type {Set.<number>}
      */","The description of the selection layer levels where the whole row was selected using the row header has been updated. Previously, it was only mentioned that the row was selected using the row header. Now, it also includes the possibility of being selected using the corner header.",,,,test516_old.js,test516_new.js
,,,"The description of the selection layer levels where the whole column was selected using the column header has been updated. Previously, it was only mentioned that the column was selected using the column header. Now, it also includes the possibility of being selected using the corner header.",,,,,
,,,The changes imply that the selection process can now also be triggered by the corner header. This could mean that the user interface is more interactive and user-friendly,,,,,
15884,9584,"@@ -87,6 +87,7 @@ function buildRules(grunt, options, commons, callback) {
 		var tags = options.tags ? options.tags.split(/\s*,\s*/) : [];
 		var rules = result.rules;
 		var checks = result.checks;
+		parseChecks(checks);
 
 		// Translate checks
 		if (locale && locale.checks) {",A new line of code has been added to the buildRules function.,,,,test9584_old.js,test9584_new.js
,,,The new line of code calls the function parseChecks with the parameter checks.,,,,,
,,,The parseChecks function is likely used to process or transform the checks data in some way.,,,,,
,,,"This change could affect the rules and checks variables, as the parseChecks function may modify these.",,,,,
,,,"If the parseChecks function has any side effects, such as modifying global state or causing errors, it could potentially impact other parts of the code that rely on the rules and checks variables.",,,,,
14195,1220,"@@ -255,6 +255,10 @@ function diffElementNodes(dom, newVNode, oldVNode, context, isSvg, excessDomChil
 		// (as above, don't diff props during hydration)
 		if (!isHydrating) {
 			if (('value' in newProps) && newProps.value!==undefined && newProps.value !== dom.value) dom.value = newProps.value==null ? '' : newProps.value;
+			// preact/#1899
+			// We need this value for input masking.
+			dom._lastValue = dom.value;
+
 			if (('checked' in newProps) && newProps.checked!==undefined && newProps.checked !== dom.checked) dom.checked = newProps.checked;
 		}
 	}",A new comment has been added to explain the purpose of the code change. The comment suggests that the code is related to a preact issue (#1899).,,,,test1220_old.js,test1220_new.js
,,,A new property '_lastValue' has been added to the 'dom' object.,,,,,
,,,The '_lastValue' property is set to the current value of 'dom.value'.,,,,,
,,,The addition of the '_lastValue' property could be used to store the previous value of 'dom.value'. This could be useful for input masking or other operations that require the previous value.,,,,,
,,,The new comment suggests that the code change is related to a specific issue in the preact library. This could,,,,,
14470,1668,"@@ -139,6 +139,13 @@ describe('text.formControlValue', function() {
 				axe.utils
 					.querySelectorAll(axe._tree[0], '#fixture input')
 					.forEach(function(target) {
+						// Safari and IE11 do not support the color input type
+						// and thus treat them as text inputs. ignore fallback
+						// inputs
+						if (target.actualNode.type === 'text') {
+							return;
+						}
+
 						assert.equal(
 							nativeTextboxValue(target),
 							'',",A new condition has been added to the function 'text.formControlValue'.,,,,test1668_old.js,test1668_new.js
,,,This condition checks if the type of the actual node of the 'target' is 'text'.,,,,,
,,,"If the type of the actual node is 'text', the function immediately returns without doing anything else.",,,,,
,,,"This condition is specific to Safari and IE11, as they do not support the 'color' input type and thus treat them as 'text' inputs.",,,,,
,,,The comment suggests that these inputs should be ignored as a fallback.,,,,,
,,,"The changes suggest that the 'color' input type is not supported in Safari and IE11, which could lead",,,,,
18489,6873,"@@ -320,6 +320,7 @@ export class TopOverlay extends Overlay {
       return this.wot.wtTable.holderOffset.top;
 
     }
+
     return 0;
 
   }",A blank line has been added after the return statement in the TopOverlay class.,,,,test6873_old.js,test6873_new.js
,,,This change does not affect the functionality of the code as it is merely a formatting change. It might have been done to make the code look cleaner and more organized.,,,,,
15098,1728,"@@ -3,6 +3,7 @@
 
 // Clean up after resolve / reject
 function cleanup() {
+	axe._memoizedFns.forEach(fn => fn.clear());
 	axe._cache.clear();
 	axe._tree = undefined;
 	axe._selectorData = undefined;",A new line of code has been added to the cleanup function.,,,,test1728_old.js,test1728_new.js
,,,The new line of code is calling the clear() method on each function in the _memoizedFns array.,,,,,
,,,"The clear() method is typically used to remove all elements from an array or clear the contents of an object. In this case, it is being called on each function in the _memoizedFns array.",,,,,
,,,"This change could potentially affect the performance of the cleanup function, as additional operations are now being performed for each function in the array.",,,,,
,,,"It could also have implications for the memory management of the application, as the clear() method is typically used to free",,,,,
18174,8814,"@@ -59,6 +59,13 @@ public class NodeStatus {
     }
   }
 
+  public boolean hasCapability(Capabilities caps) {
+    long count = slots.stream()
+        .filter(slot -> slot.isSupporting(caps))
+        .count();
+    return count > 0;
+  }
+
   public boolean hasCapacity() {
     return slots.stream().anyMatch(slot -> !slot.getSession().isPresent());
   }","A new method named ""hasCapability"" has been added to the ""NodeStatus"" class.",,,,test8814_old.js,test8814_new.js
,,,"This method takes a parameter ""caps"" of type ""Capabilities"".",,,,,
,,,"Inside the method, a long variable named ""count"" is declared and initialized with the count of slots that support the given capabilities.",,,,,
,,,"The method returns a boolean value that checks if the ""count"" is greater than 0.",,,,,
,,,"The addition of the ""hasCapability"" method implies that the ""NodeStatus"" class now has the ability to check if it has a specific capability.",,,,,
,,,This could be used to determine if a node has the necessary resources or functionality to support,,,,,
13395,7495,"@@ -44,7 +44,7 @@ var PrivateKey = function PrivateKey(data, network, compressed) {
   };
 
   // detect type of data
-  if (!data){
+  if (typeof(data) === 'undefined' || data === 'random'){
     info.bn = PrivateKey._getRandomBN();
   } else if (data instanceof BN) {
     info.bn = data;","The condition for the if statement has been changed. Previously, it was checking if the 'data' variable was not defined. Now, it checks if the 'data' variable is either undefined or equal to 'random'.",,,,test7495_old.js,test7495_new.js
,,,The code now handles a new condition where the 'data' variable could be either undefined or equal to 'random'. This could potentially lead to different behavior depending on the value of the 'data' variable.,,,,,
,,,"The change could potentially affect the way the 'PrivateKey' function handles data, as it now has more flexibility in what it accepts as input.",,,,,
,,,"If the 'data' variable is equal to 'random', the function will now generate a random",,,,,
12235,4523,"@@ -69,7 +69,8 @@ module.exports = class Webcam extends Plugin {
         'picture'
       ],
       mirror: true,
-      facingMode: 'user'
+      facingMode: 'user',
+      preferredMimeType: null
     }
 
     // merge default options with the ones set by user",A comma was added at the end of the line defining the 'facingMode' property.,,,,test4523_old.js,test4523_new.js
,,,A new property 'preferredMimeType' was added to the Webcam class. Its value is set to null.,,,,,
,,,The addition of the 'preferredMimeType' property suggests that the Webcam class now has a preference for a specific MIME type. This could affect the format of the data returned by the webcam.,,,,,
,,,The comma added after 'facingMode' could not change the functionality of the code but it is a good coding style to follow.,,,,,
21152,6561,"@@ -51,9 +51,9 @@ if (options.arch) {
 
 const buildType = options.buildType;
 
-const ndkPath = process.env[""ANDROID_NDK""];
+const ndkPath = process.env[""ANDROID_NDK""] || process.env[""ANDROID_NDK_HOME""];
 if (!ndkPath) {
-  throw Error(""ANDROID_NDK environment variable not set"");
+  throw Error(""ANDROID_NDK / ANDROID_NDK_HOME environment variable not set"");
 }
 
 const sdkPath = getAndroidSdkPath();","The code has been modified to allow the use of the ""ANDROID_NDK_HOME"" environment variable in place of ""ANDROID_NDK"".",,,,test6561_old.js,test6561_new.js
,,,"The error message has been updated to reflect this change, stating that both ""ANDROID_NDK"" and ""ANDROID_NDK_HOME"" environment variables must be set.",,,,,
,,,"The change allows for more flexibility in the code as it now supports both ""ANDROID_NDK"" and ""ANDROID_NDK_HOME"" environment variables.",,,,,
,,,"This could potentially lead to issues if the ""ANDROID_NDK"" environment variable is not set, as the code",,,,,
15371,689,"@@ -927,7 +927,7 @@ export default function Core(rootElement, userSettings, rootInstanceSymbol = fal
     if (isFunction(beforeChangeResult)) {
       warn('Your beforeChange callback returns a function. It\'s not supported since Handsontable 0.12.1 (and the returned function will not be executed).');
 
-    } else if (beforeChangeResult === false) {
+    } else if (beforeChangeResult === false || beforeChangeResult.length === 0 || beforeChangeResult[0] === null) {
       const activeEditor = instance.getActiveEditor();
 
       if (activeEditor) {",The condition for the else if statement has been expanded.,,,,test689_old.js,test689_new.js
,,,"Previously, the statement would execute if the 'beforeChangeResult' was strictly equal to false.",,,,,
,,,"Now, the statement will execute if 'beforeChangeResult' is either strictly equal to false or if the length of 'beforeChangeResult' is 0 or if the first element of 'beforeChangeResult' is null.",,,,,
,,,The code will now handle more scenarios where the 'beforeChangeResult' could be false.,,,,,
,,,"This could potentially lead to more robust error handling and debugging, as the code will now be able to handle more edge cases.",,,,,
,,,"However, this could also",,,,,
20706,4122,"@@ -473,6 +473,7 @@ describe('GridFS Stream', function () {
                     // Fail if user tries to abort an aborted stream
                     uploadStream.abort().then(null, function (error) {
                       expect(error.toString()).to.equal(
+                        // TODO(NODE-3405): Replace with MongoStreamClosedError
                         'MongoDriverError: Cannot call abort() on a stream twice'
                       );
                       client.close(done);","A comment has been added to the code describing a task to be completed in the future. The comment suggests that the current error handling for aborting an aborted stream should be replaced with a specific error type, MongoStreamClosedError.",,,,test4122_old.js,test4122_new.js
,,,The added comment indicates a potential area of improvement or a bug in the code that needs to be addressed in the future. It suggests that the current error handling for aborting an aborted stream might not be the best approach or might not be handling the error correctly.,,,,,
,,,The comment does not affect the current behavior of the code. It is a reminder or a note for the developer or team member who might be working on this code in,,,,,
12721,4078,"@@ -10,11 +10,14 @@ import options from '../options';
  * @param {boolean} isSvg Whether or not this node is an SVG node
  */
 export function diffProps(dom, newProps, oldProps, isSvg) {
-	for (let i in newProps) {
-		if (i!=='children' && i!=='key' && (!oldProps || ((i==='value' || i==='checked') ? dom : oldProps)[i]!==newProps[i])) {
-			setProperty(dom, i, newProps[i], oldProps[i], isSvg);
+	let keys = Object.keys(newProps).sort();
+	for (let i = 0; i < keys.length; i++) {
+		let k = keys[i];
+		if (k!=='children' && k!=='key' && (!oldProps || ((k==='value' || k==='checked') ? dom : oldProps)[k]!==newProps[k])) {
+			setProperty(dom, k, newProps[k], oldProps[k], isSvg);
 		}
 	}
+
 	for (let i in oldProps) {
 		if (i!=='children' && i!=='key' && (!newProps || !(i in newProps))) {
 			setProperty(dom, i, null, oldProps[i], isSvg);","The loop that was previously iterating over the properties of `newProps` has been changed. Instead of using a `for...in` loop, it now uses a regular `for` loop that iterates over the keys of `newProps`.",,,,test4078_old.js,test4078_new.js
,,,A new variable `k` has been introduced to hold the current key being processed in the loop.,,,,,
,,,The condition for setting a property on the DOM node has been updated to use `k` instead of `i`.,,,,,
,,,The sorting of the keys in `newProps` has been removed.,,,,,
,,,The change from `for...in` to a regular `for` loop might affect the order of the,,,,,
14370,9649,"@@ -30,7 +30,7 @@ function ariaOwns(nodes, role) {
 		if (nodes[index] === null) {
 			continue;
 		}
-		let virtualTree = axe.utils.getNodeFromTree(axe._tree[0], nodes[index]);
+		let virtualTree = axe.utils.getNodeFromTree(nodes[index]);
 		if (owns(nodes[index], virtualTree, role, true)) {
 			return true;
 		}",The code change involves the removal of an argument from the function call to `getNodeFromTree`.,,,,test9649_old.js,test9649_new.js
,,,The argument that was removed was `axe._tree[0]`.,,,,,
,,,"Previously, `getNodeFromTree` was called with two arguments: the first one was `axe._tree[0]` and the second one was `nodes[index]`.",,,,,
,,,"Now, the function `getNodeFromTree` is called with only one argument: `nodes[index]`.",,,,,
,,,"This change implies that the second argument, `axe._tree[0]`, is no longer needed and can be removed from the function call",,,,,
17921,5013,"@@ -0,0 +1,8 @@
+import Vue from 'vue'
+import App from './App.vue'
+
+Vue.config.productionTip = false
+
+new Vue({
+  render: h => h(App),
+}).$mount('#app')",The Vue library has been imported into the file.,,,,test5013_old.js,test5013_new.js
,,,The App component from the './App.vue' file has been imported.,,,,,
,,,The productionTip configuration of Vue has been set to false.,,,,,
,,,"A new Vue instance has been created, with the render function set to render the App component.",,,,,
,,,The new Vue instance is mounted to the element with the id 'app'.,,,,,
,,,"The Vue library is now being used in this file, which could mean that more of its features are being used or implemented.",,,,,
,,,"The App component is being used in this file, which could mean that the App component is being used in this part",,,,,
33068,5803,"@@ -23,7 +23,7 @@ const viewports = require( './viewports' );
 // This will be passed through with the `backstop` command run with docker.
 if ( process.argv.includes( '--docker' ) ) {
 	const hostname = require( './detect-storybook-host' );
-	process.argv.push( `--storybook-host=${ hostname }` );
+	process.argv.push( `--storybook-host=http://${ hostname }:9001/` );
 }
 
 module.exports = {",The code change is in the process of adding an additional argument to the process.argv array.,,,,test5803_old.js,test5803_new.js
,,,"The new argument is a string that starts with ""--storybook-host="" and ends with the hostname of the storybook instance.",,,,,
,,,The hostname is followed by a colon and the port number 9001.,,,,,
,,,This change will affect how the storybook instance is accessed through the backstop command.,,,,,
,,,The new URL will likely direct the backstop command to a different location or port than before.,,,,,
,,,"This could potentially affect the functionality or performance of the backstop command, depending on the changes made to the storybook instance at",,,,,
11968,2690,"@@ -21,11 +21,18 @@ export function setComponentProps(component, props, opts, context, mountAll) {
 	if ((component.__key = props.key)) delete props.key;
 
 	if (!component.base || mountAll) {
-		if (component.componentWillMount) component.componentWillMount();
+		if (component.componentWillMount) {
+			options.warn(""'componentWillMount' is deprecated"");
+			component.componentWillMount();
+		}
 	}
 	else if (component.componentWillReceiveProps) {
+		options.warn(""'componentWillReceiveProps' is deprecated"");
 		component.componentWillReceiveProps(props, context);
 	}
+	if (component.getDerivedStateFromProps) {
+		component.setState(component.getDerivedStateFromProps(props, component.state));
+	}
 
 	if (context && context!==component.context) {
 		if (!component.prevContext) component.prevContext = component.context;",The code has been modified to include a warning message when the 'componentWillMount' method is called. The warning message indicates that the 'componentWillMount' method is deprecated.,,,,test2690_old.js,test2690_new.js
,,,"The warning message for the 'componentWillReceiveProps' method is now included, indicating that this method is also deprecated.",,,,,
,,,"A new condition has been added to check if the 'getDerivedStateFromProps' method exists. If it does, the state of the component is updated with the result of calling this method.",,,,,
,,,"The application will now be more informative when a deprecated method is used, which can help developers in maintaining the code and avoiding potential issues in the future.",,,,,
32122,6017,"@@ -30,13 +30,17 @@ import { STORE_NAME as CORE_USER } from '../googlesitekit/datastore/user/constan
 /**
  * Gets the current dateRange string.
  *
- * @param {string} [dateRange] Optional. The date range slug.
+ * @param {string} [dateRange]      Optional. The date range slug.
+ * @param {boolean} [returnNumber]  Optional. If true, returns the number only.
  * @return {string} the date range string.
  */
-export function getCurrentDateRange( dateRange = getCurrentDateRangeSlug() ) {
+export function getCurrentDateRange( dateRange = getCurrentDateRangeSlug(), returnNumber = false ) {
 	const daysMatch = dateRange.match( /last-(\d+)-days/ );
 
 	if ( daysMatch && daysMatch[ 1 ] ) {
+		if ( returnNumber ) {
+			return parseInt( daysMatch[ 1 ], 10 );
+		}
 		return sprintf(
 			/* translators: %s: Number of days matched. */
 			_n( '%s day', '%s days', parseInt( daysMatch[ 1 ], 10 ), 'google-site-kit' ),",The function signature of `getCurrentDateRange` has been modified to include an additional parameter `returnNumber`.,,,,test6017_old.js,test6017_new.js
,,,The `returnNumber` parameter is optional and its default value is set to `false`.,,,,,
,,,"A new condition has been added to the `getCurrentDateRange` function. If `returnNumber` is true, the function will return the number of days matched as an integer.",,,,,
,,,"The `getCurrentDateRange` function can now be used with an additional parameter `returnNumber`. This allows the function to either return the date range string or the number of days matched, depending on the value of `returnNumber`.",,,,,
,,,The default behavior,,,,,
11993,108,"@@ -7,4 +7,17 @@
 axe.utils.toArray = function (thing) {
 	'use strict';
 	return Array.prototype.slice.call(thing);
-};
+};
+
+
+/**
+ * Creates an array without duplicate values from 2 array inputs
+ * @param  {Array} arr1 First array
+ * @param  {Array} arr2 Second array
+ * @return {Array}
+ */
+axe.utils.uniqueArray = (arr1, arr2) => {
+  return arr1.concat(arr2).filter((elem, pos, arr) => {
+    return arr.indexOf(elem) === pos;
+  });
+};",A new function called `axe.utils.uniqueArray` has been added.,,,,test108_old.js,test108_new.js
,,,"This function takes two parameters, `arr1` and `arr2`, which are arrays.",,,,,
,,,The function concatenates `arr1` and `arr2` and then filters out any duplicate values.,,,,,
,,,The filter condition checks if the index of the current element is equal to the position of the first occurrence of the element in the array.,,,,,
,,,The addition of the `axe.utils.uniqueArray` function provides a new utility for creating an array without duplicate values.,,,,,
,,,This could be used in various parts of the code where duplicate values need to be removed,,,,,
10113,9657,"@@ -213,9 +213,10 @@ module.exports = class GoldenRetriever extends Plugin {
       this.IndexedDBStore.delete(fileID)
     })
 
-    this.core.on('core:success', (fileIDs) => {
+    this.core.on('core:complete', ({ successful }) => {
+      const fileIDs = successful.map((file) => file.id)
       this.deleteBlobs(fileIDs).then(() => {
-        this.core.log(`[GoldenRetriever] removed ${fileIDs.length} files that finished uploading`)
+        this.core.log(`RestoreFiles: removed ${successful.length} files that finished uploading`)
       })
     })
 ",The event listener for the 'core:success' event has been replaced with an event listener for the 'core:complete' event.,,,,test9657_old.js,test9657_new.js
,,,"The callback function for the 'core:complete' event now receives an object as an argument, which contains an array of 'successful' files.",,,,,
,,,"The 'fileIDs' variable is no longer needed, as the 'successful' files' IDs can be directly accessed from the 'successful' array.",,,,,
,,,The logging message has been updated to reflect the new event and the new way of accessing the 'successful' files' IDs.,,,,,
,,,"The code now handles the 'core:complete' event, which",,,,,
16892,8051,"@@ -158,6 +158,10 @@ class Server extends EventEmitter {
     // setup listeners
     this.s.pool.on('parseError', parseErrorEventHandler(this));
 
+    this.s.pool.on('drain', err => {
+      this.emit('error', err);
+    });
+
     // it is unclear whether consumers should even know about these events
     // this.s.pool.on('timeout', timeoutEventHandler(this));
     // this.s.pool.on('reconnect', reconnectEventHandler(this));",A new event listener has been added to the 'drain' event of the pool in the server.,,,,test8051_old.js,test8051_new.js
,,,"When the 'drain' event is emitted, an error is emitted from the server with the error message.",,,,,
,,,"The server will now be notified when the pool is drained, which could mean that there are no more available connections in the pool.",,,,,
,,,"This could potentially lead to errors being thrown when the 'drain' event is emitted, as it is now possible for the server to emit errors.",,,,,
,,,"The addition of this event listener could potentially increase the number of error events emitted from the server, depending on the frequency and sever",,,,,
34289,1270,"@@ -46,6 +46,7 @@ domReady( () => {
 	Modules.registerModule(
 		'analytics',
 		{
+			name: 'Analytics',
 			settingsEditComponent: SettingsEdit,
 			settingsViewComponent: SettingsView,
 			setupComponent: SetupMain,",A new property named 'name' has been added to the object passed to the 'registerModule' function.,,,,test1270_old.js,test1270_new.js
,,,The value of this new property is set to the string 'Analytics'.,,,,,
,,,The addition of the 'name' property could be used to identify or refer to this module in the application.,,,,,
,,,"This change could potentially affect any functionality that relies on the structure of the object passed to the 'registerModule' function, as the addition of the 'name' property might now be mandatory.",,,,,
,,,"If other parts of the code are not updated to handle this new property, it could lead to errors or unexpected behavior.",,,,,
18747,7542,"@@ -86,7 +86,7 @@ before(function(_done) {
         }
 
         this.configuration = new TestConfiguration(parsedURI, context);
-        done();
+        client.close(done);
       });
     });
   });",The function `done()` has been replaced with `client.close(done)`.,,,,test7542_old.js,test7542_new.js
,,,The `done()` function is no longer being called after the `configuration` object has been created.,,,,,
,,,The `client.close(done)` function is now being called instead. This could mean that the client connection will be closed after the `done` function has been executed.,,,,,
,,,This change could potentially affect any other parts of the code that rely on the `done()` function being called after the `configuration` object is created.,,,,,
,,,"The `client.close(done)` function might also have implications for the `done` function, as it might",,,,,
36252,5873,"@@ -74,7 +74,7 @@ class DashboardModulesAlerts extends Component {
 						title={ notification.title || '' }
 						description={ notification.description || '' }
 						blockData={ notification.blockData || [] }
-						winImage={ notification.winImage ? `${ global._googlesitekitLegacyData.admin.assetsRoot }images/${ notification.winImage }` : '' }
+						WinImageSVG={ notification.WinImageSVG }
 						format={ notification.format || 'small' }
 						learnMoreURL={ notification.learnMoreURL || '' }
 						learnMoreDescription={ notification.learnMoreDescription || '' }",The property name 'winImage' has been changed to 'WinImageSVG' in the DashboardModulesAlerts component.,,,,test5873_old.js,test5873_new.js
,,,"The value of the 'WinImageSVG' property is now being assigned directly from the 'notification.WinImageSVG' object, instead of being constructed from the 'notification.winImage' object.",,,,,
,,,"This change implies that the 'WinImageSVG' property is now expected to hold an SVG image, instead of a URL to an image.",,,,,
,,,Any code that relies on the 'winImage' property being a URL to an image will need to be updated to accommodate this change.,,,,,
,,,If the ',,,,,
14201,8368,"@@ -378,11 +378,12 @@ const executeOperation = (topology, operation, args, options) => {
 
   // The driver sessions spec mandates that we implicitly create sessions for operations
   // that are not explicitly provided with a session.
-  let session, opOptions;
+  let session, opOptions, owner;
   if (!options.skipSessions && topology.hasSessionSupport()) {
     opOptions = args[args.length - 2];
     if (opOptions == null || opOptions.session == null) {
-      session = topology.startSession();
+      owner = {};
+      session = topology.startSession({ owner });
       const optionsIndex = args.length - 2;
       args[optionsIndex] = Object.assign({}, args[optionsIndex], { session: session });
     } else if (opOptions.session && opOptions.session.hasEnded) {",The code has been modified to include a new variable 'owner' in the 'executeOperation' function.,,,,test8368_old.js,test8368_new.js
,,,The 'owner' variable is initialized as an empty object.,,,,,
,,,"The 'session' is now started with the 'owner' object as an argument, instead of being started without any arguments.",,,,,
,,,The addition of the 'owner' object when starting a session could be used for session management or tracking purposes.,,,,,
,,,This change could potentially affect any functionality that relies on the session not having an 'owner'.,,,,,
,,,"If other parts of the code are not updated to handle the 'owner' object when starting a session, this could lead to unexpected behavior or errors.",,,,,
17217,2884,"@@ -32,9 +32,8 @@ module.exports = function(config, auth, storage) {
     });
   });
 
-  router.get('/-/logo', function(req, res) {
-    res.sendFile(_.get(config, 'web.logo') || `${env.APP_ROOT}/static/logo-sm.png`
-    );
+  router.get('/-/verdaccio/logo', function(req, res) {
+    res.send(_.get(config, 'web.logo') || '/-/static/logo.png');
   });
 
   router.get('/', function(req, res) {",The route for serving the logo has been changed from '/-/logo' to '/-/verdaccio/logo'.,,,,test2884_old.js,test2884_new.js
,,,"The logic for sending the logo file has been modified. Previously, if the 'web.logo' configuration was not found, the server would send the 'logo-sm.png' file from the 'static' directory. Now, if the 'web.logo' configuration is not found, the server will send the 'logo.png' file from the '/-/static' directory.",,,,,
,,,The change in route might affect how the logo is accessed by other parts of the application. If there are references to the old route '/-/logo',,,,,
18855,8551,"@@ -46,7 +46,7 @@ export function generateRandomHexString(length: number = 8) {
 
 export function signPayload(payload: JWTPayload, secret: string, options: JWTSignOptions) {
   return jwt.sign(payload, secret, {
-    notBefore: '1000', // Make sure the time will not rollback :)
+    notBefore: '1', // Make sure the time will not rollback :)
     ...options,
   });
 }",The value of the 'notBefore' option in the 'jwt.sign' function has been changed from '1000' to '1'.,,,,test8551_old.js,test8551_new.js
,,,"The 'notBefore' option is used to specify the time before which the JWT MUST NOT be accepted for processing. By reducing the value of 'notBefore' from '1000' to '1', the JWT will now be accepted for processing 999 seconds after the time specified by the 'notBefore' option. This could potentially allow for more time for the system to process the JWT before it is no longer valid.",,,,,
,,,This change could potentially affect the authentication process as,,,,,
12872,7055,"@@ -9,6 +9,9 @@ function SIN(type, payload) {
     SIN.super_.call(this, type, payload);
     return;
   }
+  if ( !Buffer.isBuffer(payload) ||  payload.length != 20)
+    throw new Error('Payload must be 20 bytes');
+
   this.data = new Buffer(1 + 1 + payload.length);
   this.converters = this.encodings['binary'].converters;
   this._encoding = this.encodings['binary']._encoding;","Two lines of code have been added to the function SIN(type, payload).",,,,test7055_old.js,test7055_new.js
,,,The added code checks if the 'payload' is not a buffer or if its length is not equal to 20.,,,,,
,,,"If the 'payload' is not a buffer or its length is not 20, an error is thrown with the message 'Payload must be 20 bytes'.",,,,,
,,,The added code ensures that the 'payload' is a buffer of exactly 20 bytes.,,,,,
,,,This could prevent potential errors or unexpected behavior in the subsequent code if the 'payload' is not a buffer or its length is not 20.,,,,,
12941,3638,"@@ -93,7 +93,9 @@ export function coerceToVNode(possibleVNode) {
 
 	// Clone vnode if it has already been used. ceviche/#57
 	if (possibleVNode._dom!=null) {
-		return createVNode(possibleVNode.type, possibleVNode.props, possibleVNode.text, possibleVNode.key, null);
+		let vnode = createVNode(possibleVNode.type, possibleVNode.props, possibleVNode.text, possibleVNode.key, null);
+		vnode._dom = possibleVNode._dom;
+		return vnode;
 	}
 
 	return possibleVNode;",The function `coerceToVNode` has been modified to create a new variable `vnode` which is assigned the result of the `createVNode` function.,,,,test3638_old.js,test3638_new.js
,,,"The `createVNode` function is now called with the same parameters as before, but the `_dom` property of `possibleVNode` is now assigned to `vnode._dom`.",,,,,
,,,The function now returns the `vnode` variable instead of directly returning the result of the `createVNode` function.,,,,,
,,,"The `vnode` variable now holds a reference to the `_dom` property of `possibleVNode`, which could potentially affect the behavior of the program",,,,,
18980,1248,"@@ -669,6 +669,8 @@ const REGISTERED_HOOKS = [
    * @param {CellRange} sourceRange The range values will be filled from.
    * @param {CellRange} targetRange The range new values will be filled into.
    * @param {string} direction Declares the direction of the autofill. Possible values: `up`, `down`, `left`, `right`.
+   * @param {boolean} hasFillDataChanged Indicates whether the original fillData has been changed in
+   *                                     the `beforeAutofill` hook.
    */
   'afterAutofill',
 ",A new parameter has been added to the function in the code.,,,,test1248_old.js,test1248_new.js
,,,The new parameter is a boolean type named 'hasFillDataChanged'.,,,,,
,,,The parameter indicates whether the original 'fillData' has been changed in the 'beforeAutofill' hook.,,,,,
,,,The function will now have a new behavior depending on the value of 'hasFillDataChanged'.,,,,,
,,,"If 'hasFillDataChanged' is true, the function may perform different operations compared to when 'hasFillDataChanged' is false.",,,,,
,,,"This change could affect the functionality of the 'afterAutofill' hook, potentially affecting the autofill feature.",,,,,
,,,The change could,,,,,
7738,3225,"@@ -335,6 +335,8 @@ public class Camera extends Plugin {
       returnBase64(call, exif, bitmapOutputStream);
     } else if (settings.getResultType() == CameraResultType.URI) {
       returnFileURI(call, exif, bitmap, u, bitmapOutputStream);
+    } else if (settings.getResultType() == CameraResultType.BASE64NOMETADATA) {
+      returnBase64NoMetadata(call, exif, bitmapOutputStream);
     } else {
       call.reject(INVALID_RESULT_TYPE_ERROR);
     }",An additional condition has been added to the existing if-else block in the Camera class.,,,,test3225_old.js,test3225_new.js
,,,This new condition checks if the result type of the camera settings is equal to CameraResultType.BASE64NOMETADATA.,,,,,
,,,"If the result type is BASE64NOMETADATA, the method returnBase64NoMetadata is called with the parameters call, exif, and bitmapOutputStream.",,,,,
,,,"The added condition allows the application to handle a new result type, BASE64NOMETADATA, from the camera settings.",,,,,
,,,The method returnBase64NoMetadata must be implemented elsewhere in the codebase and should,,,,,
11031,4668,"@@ -99,6 +99,10 @@ module.exports = function(config) {
 		customLaunchers: sauceLabs ? sauceLabsLaunchers : travisLaunchers,
 
 		files: [
+			// We can't load this up front because it's ES2015 and we need it only
+			// for certain tests that run under those conditions. We also can't load
+			// it via CDN because { included: false } won't work.
+			{ pattern: 'custom-elements-es5-adapter.js', included: false },
 			{ pattern: 'polyfills.js', watched: false },
 			{ pattern: '{browser,shared}/**.js', watched: false }
 		],",A comment has been added to explain that the 'custom-elements-es5-adapter.js' file cannot be loaded upfront because it's in ES2015 and needs to be loaded only for certain tests that run under those conditions.,,,,test4668_old.js,test4668_new.js
,,,The 'custom-elements-es5-adapter.js' file is now being loaded only when the 'included' option is set to 'false'. This is because the file cannot be loaded via a CDN and the { included: false } option will not work.,,,,,
,,,The addition of the 'custom-elements-es5-adapter.js' file means that it will now only be loaded when,,,,,
11947,1720,"@@ -34,6 +34,8 @@ function assertServerError (res) {
 }
 
 module.exports = class AwsS3Multipart extends Plugin {
+  static VERSION = require('../package.json').version
+
   constructor (uppy, opts) {
     super(uppy, opts)
     this.type = 'uploader'",A new static property called VERSION has been added to the AwsS3Multipart class.,,,,test1720_old.js,test1720_new.js
,,,The value of this new property is set to the version of the package obtained from the '../package.json' file.,,,,,
,,,The AwsS3Multipart class now has a version property that can be accessed through the class itself.,,,,,
,,,This could be useful for keeping track of the version of the AwsS3Multipart class or for logging or debugging purposes.,,,,,
,,,"If the version in the '../package.json' file is not properly maintained or updated, it could potentially lead to incorrect version information being stored in the VERSION property.",,,,,
12081,4891,"@@ -10,6 +10,17 @@ export function extend(obj, props) {
 	return obj;
 }
 
+/** Invoke or update a ref, depending on whether it is a function or object ref.
+ *  @param {object|function} [ref=null]
+ *  @param {any} [value]
+ */
+export function applyRef(ref, value) {
+	if (ref!=null) {
+		if (typeof ref=='function') ref(value);
+		else ref.current = value;
+	}
+}
+
 /**
  * Call a function asynchronously, as soon as possible. Makes
  * use of HTML Promise to schedule the callback if available,",A new function called `applyRef` has been added.,,,,test4891_old.js,test4891_new.js
,,,This function takes two parameters: `ref` and `value`.,,,,,
,,,The function checks if `ref` is not null.,,,,,
,,,"If `ref` is a function, it is invoked with `value` as an argument.",,,,,
,,,"If `ref` is an object, its `current` property is updated with `value`.",,,,,
,,,This function can be used to update a ref in a React component.,,,,,
,,,"It can handle both functions and objects as refs, which can make the code more flexible.",,,,,
,,,The function checks if `ref` is not null before attempting,,,,,
11101,15,"@@ -1,8 +1,6 @@
 /*exported DqElement */
 
 function truncate(str, maxLength) {
-	'use strict';
-
 	maxLength = maxLength || 300;
 
 	if (str.length > maxLength) {","The 'use strict' directive has been removed from the code. This directive was used to enable strict mode in the function, which could potentially improve the performance of the code by making it more efficient.",,,,test15_old.js,test15_new.js
,,,"The removal of the 'use strict' directive could potentially disable strict mode, which could lead to less strict or less strict-like behavior in the function. This could make the code less error-prone and less likely to have unexpected behavior.",,,,,
,,,"However, this change could also potentially enable less strict or less strict-like behavior, depending on the context in which the function is used. This could make the code less efficient or less performant.",,,,,
15194,8052,"@@ -368,6 +368,15 @@ function processNewChange(args) {
   const change = args.change;
   const callback = args.callback;
   const eventEmitter = args.eventEmitter || false;
+
+  if (changeStream.isClosed()) {
+    if (eventEmitter) return;
+
+    const error = new Error('ChangeStream is closed');
+    if (typeof callback === 'function') return callback(error, null);
+    return changeStream.promiseLibrary.reject(error);
+  }
+
   const topology = changeStream.topology;
   const options = changeStream.cursor.options;
 ",A new condition has been added to check if the changeStream is closed.,,,,test8052_old.js,test8052_new.js
,,,"If the changeStream is closed and an eventEmitter is provided, the function will return immediately.",,,,,
,,,"If the changeStream is closed and no eventEmitter is provided, a new Error object is created with the message 'ChangeStream is closed'.",,,,,
,,,"The function will then check if a callback function is provided. If it is, the error is passed to the callback and the function returns.",,,,,
,,,"If no callback is provided, the error is rejected in the promise library of the changeStream.",,,,,
,,,The function will now handle the scenario where the changeStream is closed. This,,,,,
20131,8014,"@@ -0,0 +1,18 @@
+import path from 'path';
+import execa from 'execa';
+import {
+  displayErrorMessage
+} from '../../scripts/utils/console.mjs';
+
+((async function() {
+  try {
+    await execa('npm', ['run', 'swap-package-links'], {
+      cwd: path.resolve(process.cwd(), '..'),
+      stdio: 'inherit'
+    });
+
+  } catch (error) {
+    displayErrorMessage('Error running the script.');
+    process.exit(error.exitCode);
+  }
+})());",The code introduces new import statements for the 'path' and 'execa' modules.,,,,test8014_old.js,test8014_new.js
,,,It also imports the 'displayErrorMessage' function from the 'console.mjs' file in the 'utils' directory.,,,,,
,,,A new asynchronous function is defined and executed immediately.,,,,,
,,,"Inside this function, an asynchronous call to 'execa' is made with 'npm' as the command and 'swap-package-links' as an argument. The 'cwd' option is set to the parent directory of the current working directory.",,,,,
,,,"The 'stdio' option is set to 'inherit', which means that the standard input, output, and error streams will be inherited from",,,,,
15120,9835,"@@ -7,7 +7,9 @@ module.exports = {
   },
   extends: [
     'airbnb',
-    'plugin:@typescript-eslint/recommended',
+    ""eslint:recommended"",
+    ""plugin:@typescript-eslint/eslint-recommended"",
+    ""plugin:@typescript-eslint/recommended"",
     'prettier',
     'prettier/@typescript-eslint',
     'plugin:prettier/recommended',",The 'plugin:@typescript-eslint/recommended' rule has been removed from the 'extends' array.,,,,test9835_old.js,test9835_new.js
,,,"Three new rules have been added to the 'extends' array: ""eslint:recommended"", ""plugin:@typescript-eslint/eslint-recommended"", and ""plugin:@typescript-eslint/recommended"".",,,,,
,,,The removal of 'plugin:@typescript-eslint/recommended' rule implies that the 'recommended' rules provided by the '@typescript-eslint/eslint-plugin' will no longer be applied. This could potentially lead to different or fewer rules,,,,,
13439,5492,"@@ -0,0 +1,18 @@
+/* global dom */
+
+/**
+ * Get all descendents that are focusable from a given node
+ * @method getFocusableElements
+ * @memberof axe.commons.dom
+ * @instance
+ * @param  {Object} virtualNode The virtualNode to assess
+ * @return {Boolean}
+ */
+dom.getFocusableElements = function getFocusableElements(virtualNode) {
+	const descendents = axe.utils.querySelectorAll(virtualNode, '*');
+	const focusableElms = descendents.filter(({ actualNode: el }) => {
+		const isElFocusable = dom.isFocusable(el);
+		return isElFocusable;
+	});
+	return focusableElms;
+};",A new function called `getFocusableElements` has been added to the `dom` object.,,,,test5492_old.js,test5492_new.js
,,,This function takes a `virtualNode` as an argument and returns all focusable elements from that node.,,,,,
,,,The function uses the `axe.utils.querySelectorAll` method to get all descendents of the `virtualNode`.,,,,,
,,,"It then filters these descendents to only include those that are focusable, as determined by the `dom.isFocusable` method.",,,,,
,,,"This change allows for easier retrieval of focusable elements from a given node, which can be useful for accessibility testing or other purposes.",,,,,
,,,The `getFocusable,,,,,
18070,8514,"@@ -1,8 +1,10 @@
+import {CREDENTIALS} from ""../config.func"";
+
 module.exports = function(server) {
 
     test('who am I?', () => {
       return server.whoami().then(function (username) {
-        expect(username).toMatch('test');
+        expect(username).toMatch(CREDENTIALS.user);
       });
     });
 ",The code has been modified to import the CREDENTIALS object from the config.func file.,,,,test8514_old.js,test8514_new.js
,,,The test case for the function server.whoami() has been updated to expect the username to match the user credential from the imported CREDENTIALS object.,,,,,
,,,The change implies that the test is now expecting the username to match the user credential from the configuration file instead of a hardcoded 'test'.,,,,,
,,,"This could mean that the test is now more robust and is not just checking if the username matches 'test', but also matches the user credential from the configuration file.",,,,,
,,,If the CREDENTIALS.user does not exist,,,,,
10224,1903,"@@ -214,7 +214,7 @@ describe('Components', () => {
 
 		let good, bad;
 		let root = render(<GoodContainer ref={c=>good=c} />, scratch);
-		expect(scratch.innerText, 'new component with key present').to.equal('A\nB');
+		expect(scratch.textContent, 'new component with key present').to.equal('AB');
 		expect(Comp.prototype.componentWillMount).to.have.been.calledTwice;
 		expect(sideEffect).to.have.been.calledTwice;
 ",The code change is in the assertion of the expected output of the innerText of the scratch object.,,,,test1903_old.js,test1903_new.js
,,,The expected output was 'A\nB' and it has been changed to 'AB'.,,,,,
,,,The change in the expected output from 'A\nB' to 'AB' suggests that the actual output may no longer be as expected after the changes have been made.,,,,,
,,,"This could potentially lead to the test failing, indicating that the component is not functioning as expected after the changes have been made.",,,,,
,,,"The change could also potentially affect the visual representation of the component, as innerText and textContent may have different behaviors in different contexts.",,,,,
11790,5582,"@@ -0,0 +1,13 @@
+/**
+ * Returns the tagName,
+ * if it is a HTMLElement it gets lowercased
+ * @param  {Element} node element
+ * @return {String}       normalized tagName
+ */
+axe.utils.getTagName = function(node) {
+	if (node.namespaceURI === 'http://www.w3.org/1999/xhtml') {
+		return node.tagName.toLowerCase();
+	}
+
+	return node.tagName;
+};",A new function called `axe.utils.getTagName` has been added.,,,,test5582_old.js,test5582_new.js
,,,This function takes an `element` as a parameter.,,,,,
,,,The function checks if the `namespaceURI` of the element is equal to 'http://www.w3.org/1999/xhtml'.,,,,,
,,,"If the `namespaceURI` is equal to 'http://www.w3.org/1999/xhtml', the function returns the lowercased `tagName` of the element.",,,,,
,,,"If the `namespaceURI` is not equal to 'http://www.w3.org/1999/xhtml', the function simply returns the `tag",,,,,
15739,1189,"@@ -142,7 +142,11 @@ class EditorManager {
 
     if (editorClass) {
       this.activeEditor = getEditorInstance(editorClass, this.instance);
+      this.activeEditor.row = row; // pre-preparation needed by getEditedCell
+      this.activeEditor.col = col;
       const td = this.activeEditor.getEditedCell();
+      this.activeEditor.row = null; // restore the un-initialized state
+      this.activeEditor.col = null;
       this.activeEditor.prepare(row, col, prop, td, originalValue, cellProperties);
 
     } else {",Four lines of code have been added to the EditorManager class.,,,,test1189_old.js,test1189_new.js
,,,The added code assigns the row and column values to the activeEditor object.,,,,,
,,,"After the preparation for the getEditedCell method, the row and column values of the activeEditor object are set to null.",,,,,
,,,The added code implies that the row and column values are being used somewhere in the getEditedCell method or elsewhere in the EditorManager class.,,,,,
,,,The nullification of the row and column values after the getEditedCell method call suggests that the editor is no longer needed at these positions.,,,,,
,,,This change could potentially affect the functionality of the getEditedCell method if,,,,,
14227,6840,"@@ -57,8 +57,10 @@ module Selenium
     #
     # @return [Driver]
     #
-    # @see Selenium::WebDriver::Remote::Bridge
+    # @see Selenium::WebDriver::Remote::OSSBridge
+    # @see Selenium::WebDriver::Remote::W3CBridge
     # @see Selenium::WebDriver::Firefox::Bridge
+    # @see Selenium::WebDriver::Firefox::W3CBridge
     # @see Selenium::WebDriver::IE::Bridge
     # @see Selenium::WebDriver::Edge::Bridge
     # @see Selenium::WebDriver::Chrome::Bridge",The code change involves the modification of the documentation comments for the Selenium module.,,,,test6840_old.js,test6840_new.js
,,,The comment for the method that returns the Driver object has been updated.,,,,,
,,,"The comment now includes two new see tags, one for Selenium::WebDriver::Remote::OSSBridge and one for Selenium::WebDriver::Remote::W3CBridge.",,,,,
,,,"Additionally, a new see tag has been added for Selenium::WebDriver::Firefox::W3CBridge.",,,,,
,,,"The changes suggest that the Driver object may now be associated with two different types of bridges, OSSBridge and W3CBridge, from the Selen",,,,,
7808,3281,"@@ -33,7 +33,7 @@ export default Controller.extend(SettingsSaveMixin, {
     }),
 
     iconImageSource: computed('model.icon', function () {
-        return this.get('model.icon') || '';
+        return this.get('model.icon') || '/favicon.ico';
     }),
 
     coverImageSource: computed('model.cover', function () {",The code change is in the computed property 'iconImageSource' of the controller.,,,,test3281_old.js,test3281_new.js
,,,The default value returned by the computed property 'iconImageSource' has been changed from an empty string to '/favicon.ico'.,,,,,
,,,The change will affect how the 'iconImageSource' is computed and returned. This could potentially affect any part of the application that relies on this computed property.,,,,,
,,,"The new default value '/favicon.ico' suggests that if the 'model.icon' is not provided or is empty, the computed property will now return the path to the favicon.ico file.",,,,,
,,,This change could potentially fix a bug in the application where,,,,,
14132,7043,"@@ -6,7 +6,7 @@ var attr,
 	attrName,
 	allowed,
 	role = node.getAttribute('role'),
-	attrs = node.attributes;
+	attrs = axe.utils.getNodeAttributes(node);
 
 if (!role) {
 	role = axe.commons.aria.implicitRole(node);",The code change involves the way the 'attrs' variable is assigned.,,,,test7043_old.js,test7043_new.js
,,,"Previously, 'attrs' was assigned the 'attributes' property of the 'node' object.",,,,,
,,,"In the updated code, 'attrs' is now assigned the result of the 'getNodeAttributes' function, which is passed 'node' as an argument.",,,,,
,,,The change could potentially affect how attributes are retrieved from the 'node' object.,,,,,
,,,"The 'getNodeAttributes' function might provide more control or functionality over how attributes are retrieved, which could be beneficial in certain scenarios.",,,,,
,,,This change could also potentially affect any other parts of the,,,,,
30935,9280,"@@ -1,3 +1,4 @@
+/* eslint-disable sitekit/camelcase-acronyms */
 /**
  * Profile Select component tests.
  *",An ESLint rule has been disabled for the code block that follows. The rule being disabled is 'sitekit/camelcase-acronyms'. This rule is used to enforce camelCase for acronyms in JavaScript and React code.,,,,test9280_old.js,test9280_new.js
,,,This change will temporarily disable the 'sitekit/camelcase-acronyms' rule for the code block that follows. This means that any acronyms in the code that are not in camelCase format will no longer be checked by ESLint.,,,,,
,,,"This could potentially allow for acronyms to be used without being in camelCase format, which could lead to confusion for other developers",,,,,
40481,6733,"@@ -0,0 +1,6 @@
+const jestConfig = require( './jest.config' );
+
+module.exports = {
+	...jestConfig,
+	testMatch: [ '<rootDir>/.storybook/?(*.)test.js' ],
+};",A new constant `jestConfig` is defined and assigned the value of the `jest.config` file imported using the `require` function.,,,,test6733_old.js,test6733_new.js
,,,A new module is being exported.,,,,,
,,,The exported module extends the `jestConfig` object and adds a new property `testMatch`.,,,,,
,,,The `testMatch` property is assigned an array that contains a single string. The string is a pattern that matches any file in the `.storybook` directory that ends with `test.js`.,,,,,
,,,The changes suggest that the Jest configuration has been modified to include more specific matching for test files in the `.storybook` directory.,,,,,
35316,2139,"@@ -43,13 +43,16 @@ import { isZeroReport } from '../../modules/search-console/util/is-zero-report';
 import sumObjectListValue from '../../util/sum-object-list-value';
 const { useSelect } = Data;
 
+// reportArgs is declared in this higher scope so that it can be used by hasData.
+let reportArgs;
+
 const AdminBarClicks = ( { className } ) => {
 	const url = useSelect( ( select ) => select( CORE_SITE ).getCurrentEntityURL() );
 	const { compareStartDate, endDate } = useSelect( ( select ) => select( CORE_USER ).getDateRangeDates( {
 		compare: true,
 		offsetDays: DATE_RANGE_OFFSET,
 	} ) );
-	const reportArgs = {
+	reportArgs = {
 		startDate: compareStartDate,
 		endDate,
 		dimensions: 'date',","The variable `reportArgs` is declared in the higher scope of the code, not inside a function.",,,,test2139_old.js,test2139_new.js
,,,"The `reportArgs` variable is then assigned an object with `startDate`, `endDate`, and `dimensions` properties.",,,,,
,,,"The `reportArgs` object is assigned the values of `compareStartDate` and `endDate` from the `useSelect` hook, and `'date'` as the value for the `dimensions` property.",,,,,
,,,"The `reportArgs` variable is now available outside the scope of the `AdminBarClicks` function, which could potentially affect the functionality of other parts of the code that use this",,,,,
10955,9691,"@@ -24,6 +24,8 @@ describe('th-has-data-cells', function () {
 			'<table>' +
 			'  <tr> <th>hi</th> <td>hello</td> </tr>' +
 			'  <tr> <th>hi</th> <td>hello</td> </tr>' +
+			'  <tr> <td>hello</td> <th>hi</th> </tr>' +
+			'  <tr> <td>hello</td> <th>hi</th> </tr>' +
 			'</table>';
 
 		var node = fixture.querySelector('table');",Two new rows have been added to the table in the code.,,,,test9691_old.js,test9691_new.js
,,,The first row contains a 'td' element with the text 'hello' and a 'th' element with the text 'hi'.,,,,,
,,,"The second row is identical to the first, again containing a 'td' element with the text 'hello' and a 'th' element with the text 'hi'.",,,,,
,,,"The addition of these two rows implies that the table now has four rows, not the previous two.",,,,,
,,,"The 'th' element in the second row seems to be a mistake or a correction of the previous code, as it should not be there.",,,,,
,,,The structure of the table,,,,,
14581,3981,"@@ -1268,7 +1268,13 @@ var AppRouter = Backbone.Router.extend({
         }
 
         // Init sidebar based on the current url
-        self.sidebar.init();
+        if (countlyVue.sideBarComponent) {
+            var selectedMenuItem = countlyVue.sideBarComponent.$store.getters[""countlySidebar/getSelectedMenuItem""];
+            var currLink = ""#"" + Backbone.history.fragment;
+            if (selectedMenuItem.item.url !== currLink) {
+                countlyVue.sideBarComponent.$store.dispatch(""countlySidebar/updateSelectedMenuItem"", null);
+            }
+        }
     },
     sidebar: {
         init: function() {",The code has been modified to check if the 'countlyVue.sideBarComponent' exists before attempting to access its properties.,,,,test3981_old.js,test3981_new.js
,,,"A new variable 'selectedMenuItem' has been defined, which is assigned the result of getting the 'getSelectedMenuItem' getter from the 'countlyVue.sideBarComponent.$store'.",,,,,
,,,"A new variable 'currLink' has been defined, which is assigned the current URL fragment (Backbone.history.fragment) prefixed with a '#'.",,,,,
,,,A conditional statement has been added to check if the 'url' property of 'selectedMenuItem.item' is not equal to 'currLink'.,,,,,
,,,If the,,,,,
13816,9317,"@@ -13,7 +13,8 @@ module.exports = function selectPopulatedFields(query) {
     var userProvidedFields = query._userProvidedFields || {};
     if (query.selectedInclusively()) {
       for (i = 0; i < paths.length; ++i) {
-        if (!isPathInFields(userProvidedFields, paths[i])) {
+        var hasPath = query._fields[paths[i]];
+        if (!isPathInFields(userProvidedFields, paths[i]) && hasPath) {
           query.select(paths[i]);
         }
       }",The code has been modified to include a check for whether a path exists in the fields of the query.,,,,test9317_old.js,test9317_new.js
,,,A new variable `hasPath` has been introduced which checks if the path exists in the fields of the query.,,,,,
,,,"The condition for selecting a path in the query has been modified. Previously, the path was selected if it was not in the user-provided fields. Now, the path is selected only if it is not in the user-provided fields and the path exists in the fields of the query.",,,,,
,,,This change adds an extra layer of validation before selecting a path in the query. The path is only selected if it exists in the fields of the,,,,,
11121,1748,"@@ -11,7 +11,7 @@ if (typeof define === 'function' && define.amd) {
 	});
 }
 if (typeof module === 'object' && module.exports && typeof axeFunction.toString === 'function') {
-    axe.source = '(' + axeFunction.toString() + ')(this, this.document);';
+    axe.source = '(' + axeFunction.toString() + ')(typeof window === ""object"" ? window : this);';
     module.exports = axe;
 }
 if (typeof window.getComputedStyle === 'function') {",The code change involves the assignment of a new value to the 'source' property of the 'axe' object.,,,,test1748_old.js,test1748_new.js
,,,"Previously, the 'source' property was being assigned a string that evaluated the 'axeFunction' to a string representation of 'this' and 'this.document'.",,,,,
,,,"The new code changes the 'source' property to evaluate 'axeFunction' to a string representation of 'window' if 'typeof window === ""object""', otherwise it evaluates to 'this'.",,,,,
,,,The change could potentially affect how the 'axe' object is accessed or interacted with in the application.,,,,,
,,,If 'window' is not an object (,,,,,
14688,5898,"@@ -368,6 +368,8 @@ class RemoteConnection(object):
                 ('POST', '/session/$sessionId/window/rect'),
             Command.GET_WINDOW_RECT:
                 ('GET', '/session/$sessionId/window/rect'),
+            Command.W3C_MINIMIZE_WINDOW:
+                ('POST', '/session/$sessionId/window/minimize'),
             Command.MAXIMIZE_WINDOW:
                 ('POST', '/session/$sessionId/window/$windowHandle/maximize'),
             Command.W3C_MAXIMIZE_WINDOW:",A new command called Command.W3C_MINIMIZE_WINDOW has been added to the RemoteConnection class.,,,,test5898_old.js,test5898_new.js
,,,This command is associated with a POST request to the URL '/session/$sessionId/window/minimize'.,,,,,
,,,The addition of the new command Command.W3C_MINIMIZE_WINDOW implies that the RemoteConnection class now has the ability to handle minimizing windows in a web application.,,,,,
,,,"This could be used to simulate user actions such as minimizing a window, which may not be possible through other means.",,,,,
,,,The change could potentially affect all parts of the application that use the RemoteConnection class,,,,,
