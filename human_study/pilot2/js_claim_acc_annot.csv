id,index,diff,type,claim/issue,correctness (1/0/-1),additional claims,old_file,new_file
37758,7560,"@@ -48,7 +48,7 @@ export default function CountrySelect() {
 				timezone: countriesByCode[ newCountryCode ].defaultTimeZoneId,
 			} );
 		}
-	}, [ setValues ] );
+	}, [ setValues, value ] );
 
 	return (
 		<Select",claim,The code change in the GIT DIFF modifies the dependencies array for the useEffect hook,,,test7560_old.js,test7560_new.js
,,,claim,"Previously, it was only dependent on ""setValues""",,,,
,,,claim,"Now, it is dependent on both ""setValues"" and ""value""",,,,
,,,claim,"This suggests that the effect of the hook will now be re-run whenever either ""setValues"" or ""value"" changes.",,,,
15026,3516,"@@ -327,6 +327,16 @@ class FirefoxProfile(object):
                     rc.append(node.data)
             return ''.join(rc).strip()
 
+        def parse_manifest_json(content):
+            """"""Extracts the details from the contents of a WebExtensions `manifest.json` file.""""""
+            manifest = json.loads(content)
+            return {
+                'id': manifest['applications']['gecko']['id'],
+                'version': manifest['version'],
+                'name': manifest['version'],
+                'unpack': False,
+            }
+
         if not os.path.exists(addon_path):
             raise IOError('Add-on path does not exist: %s' % addon_path)
 ",claim,The GIT DIFF shows that a new function named `parse_manifest_json` has been added to the `FirefoxProfile` class,,,test3516_old.js,test3516_new.js
,,,claim,This function takes a string argument `content` which represents the contents of a WebExtensions `manifest.json` file,,,,
,,,claim,"The function parses the JSON content and returns a dictionary with keys 'id', 'version', 'name', and 'unpack'",,,,
,,,claim,The 'id' and 'version' values are extracted from the 'gecko' application in the manifest file,,,,
,,,claim,The 'name' value is set to the 'version' value from the manifest file,,,,
,,,claim,The 'unpack' value is set to False.,,,,
16536,9367,"@@ -22,6 +22,16 @@ options._catchError = function(error, newVNode, oldVNode) {
 	oldCatchError(error, newVNode, oldVNode);
 };
 
+const oldUnmount = options.unmount;
+options.unmount = function(vnode) {
+	/** @type {import('./internal').Component} */
+	const component = vnode._component;
+	if (component && component._onResolve) {
+		component._onResolve();
+	}
+	if (oldUnmount) oldUnmount(vnode);
+};
+
 function detachedClone(vnode, detachedParent, parentDom) {
 	if (vnode) {
 		if (vnode._component && vnode._component.__hooks) {",claim,"The code change adds a new function to the ""unmount"" option in the options object",,,test9367_old.js,test9367_new.js
,,,claim,This new function is designed to be called when a vnode is unmounted,,,,
,,,claim,"It checks if the vnode has a component and if the component has a ""_onResolve"" method",,,,
,,,claim,"If these conditions are met, it calls the ""_onResolve"" method",,,,
,,,claim,"After that, it calls the old ""unmount"" function if it exists",,,,
,,,claim,"This new function seems to be a more robust version of the old ""unmount"" function, adding error handling and resolving a potential issue where the ""_onResolve"" method was not being called.",,,,
,,,issue,"line 25, col 1, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 28, col 5, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
14171,8548,"@@ -51,7 +51,7 @@
     // @vue/component
     var commonFormattersMixin = {
         methods: {
-            formatTimeAgo: countlyCommon.formatTimeAgo,
+            formatTimeAgo: countlyCommon.formatTimeAgoText,
             formatNumber: countlyCommon.formatNumber,
             getShortNumber: countlyCommon.getShortNumber
         }",claim,"The code change in the GIT DIFF replaces the method ""formatTimeAgo"" with a new method ""formatTimeAgoText""",,,test8548_old.js,test8548_new.js
,,,claim,This suggests that the formatting of time ago has been changed to a textual format instead of the original method.,,,,
20700,8607,"@@ -473,7 +473,7 @@ describe('GridFS Stream', function () {
                     // Fail if user tries to abort an aborted stream
                     uploadStream.abort().then(null, function (error) {
                       expect(error.toString()).to.equal(
-                        'MongoDriverError: Cannot call abort() on a stream twice'
+                        'MongoGridFSStreamError: Cannot call abort() on a stream twice'
                       );
                       client.close(done);
                     });",claim,The code change in the GIT DIFF replaces an error message,,,test8607_old.js,test8607_new.js
,,,claim,The original error message was 'MongoDriverError: Cannot call abort() on a stream twice',,,,
,,,claim,The updated error message is 'MongoGridFSStreamError: Cannot call abort() on a stream twice',,,,
,,,claim,This indicates that the error has been specific to the GridFS stream and not the general MongoDriverError.,,,,
4930,566,"@@ -2,7 +2,7 @@ import { pathOr, curry, merge } from 'ramda';
 
 /**
  * Flattens a property path so that its fields are spread out into the provided object.
- *
+ * It's like {@link RA.spreadPath|spreadPath}, but preserves object under property path
  *
  * @func flattenPath
  * @memberOf RA",claim,"The code change in the GIT DIFF adds a new line of comment to the function ""flattenPath""",,,test566_old.js,test566_new.js
,,,claim,"The comment explains that the function is similar to ""spreadPath"", but it preserves the object under the property path",,,,
,,,claim,"This suggests that the function is a variation of the ""spreadPath"" function that maintains the structure of the object under the property path.",,,,
13380,2455,"@@ -13,7 +13,8 @@ var reportsInstance = {},
     localize = require('../../../api/utils/localization.js'),
     common = require('../../../api/utils/common.js'),
     log = require('../../../api/utils/log')('reports:reports'),
-    versionInfo = require('../../../frontend/express/version.info');
+    versionInfo = require('../../../frontend/express/version.info'),
+    offlineMode = plugins.getConfig(""api"").offline_mode;
 
 versionInfo.page = (!versionInfo.title) ? ""https://count.ly"" : null;
 versionInfo.title = versionInfo.title || ""Countly"";",claim,"The code change in the GIT DIFF adds a new line to require the 'offline_mode' configuration from the ""api"" plugin",,,test2455_old.js,test2455_new.js
,,,claim,"This suggests that the code now has an additional dependency on the offline mode configuration, which was not previously required.",,,,
13587,9144,"@@ -1656,7 +1656,7 @@ class TargetLocator {
   window(nameOrHandle) {
     return this.driver_.schedule(
         new command.Command(command.Name.SWITCH_TO_WINDOW).
-            setParameter('name', nameOrHandle),
+            setParameter('handle', nameOrHandle),
         'WebDriver.switchTo().window(' + nameOrHandle + ')');
   }
 ",claim,"The code change in the GIT DIFF modifies a line of code in the ""window"" function of the ""TargetLocator"" class",,,test9144_old.js,test9144_new.js
,,,claim,"The parameter of the ""setParameter"" function has been changed from ""name"" to ""handle""",,,,
,,,claim,This suggests a change in the way the window is being referenced or handled in the code.,,,,
5472,349,"@@ -45,6 +45,7 @@ program
   .option('-C <build_dir>', 'build config (out/Debug, out/Release')
   .option('--target_arch <target_arch>', 'target architecture', 'x64')
   .option('--mac_signing_identifier <id>', 'The identifier to use for signing')
+  .option('--mac_installer_signing_identifier <id>', 'The identifier to use for signing the installer')
   .option('--mac_signing_keychain <keychain>', 'The identifier to use for signing', 'login')
   .option('--debug_build <debug_build>', 'keep debugging symbols')
   .option('--official_build <official_build>', 'force official build settings')",claim,The code change adds a new option to the command line interface,,,test349_old.js,test349_new.js
,,,claim,The new option is '--mac_installer_signing_identifier <id>',,,,
,,,claim,This option is used to specify the identifier to use for signing the installer.,,,,
11992,8988,"@@ -3,9 +3,9 @@ import { h } from './h';
 
 /**
  * Clones the given VNode, optionally adding attributes/props and replacing its children.
- * @param {VNode} vnode		The virtual DOM element to clone
- * @param {Object} props	Attributes/props to add when cloning
- * @param {VNode} rest		Any additional arguments will be used as replacement children.
+ * @param {import('./vnode').VNode} vnode The virtual DOM element to clone
+ * @param {object} props Attributes/props to add when cloning
+ * @param {Array<import('./vnode').VNode>} [rest] Any additional arguments will be used as replacement children.
  */
 export function cloneElement(vnode, props) {
 	return h(",claim,"The code changes in the GIT DIFF are related to the documentation comments for the function ""cloneElement""",,,test8988_old.js,test8988_new.js
,,,claim,"The type of the ""vnode"" parameter is now explicitly imported from './vnode'",,,,
,,,claim,"The ""props"" parameter is now an object instead of a VNode",,,,
,,,claim,"The ""rest"" parameter is now an array of VNodes, with the square brackets indicating that it is optional",,,,
,,,claim,This change makes the code more robust and explicit about its type requirements.,,,,
,,,issue,"line 10, col 1, 'export' is only available in ES6 (use 'esversion: 6').",,,,
12790,3422,"@@ -87,8 +87,11 @@ export function useReducer(reducer, initialState, init) {
 			init == null ? invokeOrReturn(null, initialState) : init(initialState),
 
 			action => {
-				hookState._value[0] = reducer(hookState._value[0], action);
-				hookState._component.setState({});
+				const nextValue = reducer(hookState._value[0], action);
+				if (!Object.is(hookState._value[0], nextValue)) {
+					hookState._value[0] = nextValue;
+					hookState._component.setState({});
+				}
 			}
 		];
 	}",claim,The code change in the GIT DIFF modifies the way the state is updated in the hook,,,test3422_old.js,test3422_new.js
,,,claim,"Previously, the state was directly updated by calling the reducer function and then setting the component state",,,,
,,,claim,"The new code calculates the next state value by calling the reducer function with the current state and the action, and then checks if the next state value is different from the current state value",,,,
,,,claim,"If it is, the state is updated and the component state is set",,,,
,,,claim,"This change adds a check to see if the state has changed before updating it, which can help prevent unnecessary re-renders.",,,,
,,,issue,"line 89, col 20, 'arrow function syntax (=>)' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 90, col 17, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
16303,4298,"@@ -27,7 +27,12 @@ function collectResultsFromFrames(
   frames.forEach(frame => {
     const tabindex = parseInt(frame.node.getAttribute('tabindex'), 10);
     const focusable = isNaN(tabindex) || tabindex >= 0;
+
     const rect = frame.node.getBoundingClientRect();
+    let width = parseInt(frame.node.getAttribute('width'), 10);
+    let height = parseInt(frame.node.getAttribute('height'), 10);
+    width = isNaN(width) ? rect.width : width;
+    height = isNaN(height) ? rect.height : height;
 
     var params = {
       options: options,",claim,The code changes added four new lines,,,test4298_old.js,test4298_new.js
,,,claim,These lines are extracting the width and height attributes from the frame node and parsing them into integers,,,,
,,,claim,"If the width or height is not a number (NaN), they are set to the width or height of the bounding client rectangle, respectively",,,,
,,,claim,This ensures that the width and height are always valid numbers.,,,,
,,,issue,"line 27, col 24, 'arrow function syntax (=>)' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 28, col 5, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 29, col 5, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 31, col 5, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 32, col 5, 'let' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 33, col 5, 'let' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
12633,2886,"@@ -31,6 +31,10 @@ msg.Number = {};
 msg.Number.min = ""Path `{PATH}` ({VALUE}) is less than minimum allowed value ({MIN})."";
 msg.Number.max = ""Path `{PATH}` ({VALUE}) is more than maximum allowed value ({MAX})."";
 
+msg.Date = {};
+msg.Date.min = ""Path `{PATH}` ({VALUE}) is before than minimum allowed value ({MIN})."";
+msg.Date.max = ""Path `{PATH}` ({VALUE}) is after than maximum allowed value ({MAX})."";
+
 msg.String = {};
 msg.String.enum = ""`{VALUE}` is not a valid enum value for path `{PATH}`."";
 msg.String.match = ""Path `{PATH}` is invalid ({VALUE})."";",claim,"The code changes added a new block of code that defines a new message object ""Date""",,,test2886_old.js,test2886_new.js
,,,claim,"This object has two properties, ""min"" and ""max"", which are used to handle minimum and maximum date validation errors respectively",,,,
,,,claim,The error messages for these validations are also defined in the added lines.,,,,
15124,721,"@@ -1,4 +1,6 @@
-var nn = node.nodeName.toLowerCase();
-return (
-	node.hasAttribute('alt') && (nn === 'img' || nn === 'input' || nn === 'area')
-);
+const { nodeName } = virtualNode.props;
+if (['img', 'input', 'area'].includes(nodeName) === false) {
+	return false;
+}
+
+return typeof virtualNode.attr('alt') === 'string';",claim,The code change represented by the GIT DIFF replaces a block of code with a new block of code,,,test721_old.js,test721_new.js
,,,claim,"The new code extracts the 'nodeName' from the 'virtualNode.props' and checks if it is not included in the array ['img', 'input', 'area']",,,,
,,,claim,"If it is not included, the function returns false",,,,
,,,claim,"If the 'nodeName' is included, the function then checks if the 'alt' attribute of the 'virtualNode' is a string and returns the result",,,,
,,,claim,This change makes the code more concise and easier to read.,,,,
,,,issue,"line 1, col 1, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 1, col 1, 'destructuring binding' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
8188,2290,"@@ -113,7 +113,9 @@ class CapacitorSplashScreen {
     `;
 
     this.mainWindowRef.on('closed', () => {
-      this.splashWindow.close();
+      if (this.splashWindow && !this.splashWindow.isDestroyed) { 
+        this.splashWindow.close(); 
+      }
     });
 
     this.splashWindow.loadURL(`data:text/html;charset=UTF-8,${splashHtml}`, {baseURLForDataURL: `file://${rootPath}/splash_assets/`});",claim,The code change in the GIT DIFF adds a conditional check before closing the splash window,,,test2290_old.js,test2290_new.js
,,,claim,The check ensures that the splash window exists and has not been destroyed before attempting to close it,,,,
,,,claim,This is to prevent potential null reference errors.,,,,
,,,issue,"line 115, col 38, 'arrow function syntax (=>)' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 121, col 31, 'template literal syntax' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 121, col 97, 'template literal syntax' is only available in ES6 (use 'esversion: 6').",,,,
10735,6199,"@@ -5,8 +5,7 @@ import { enqueueRender } from '../render-queue';
 import { getNodeProps } from './index';
 import { diff, mounts, diffLevel, flushMounts, recollectNodeTree, removeChildren } from './diff';
 import { createComponent, collectComponent } from './component-recycler';
-
-
+import remove from './remove';
 
 /** Set a component's `props` (generally derived from JSX attributes).
  *	@param {Object} props",claim,The code change represented by the GIT DIFF adds a new line of code to import the 'remove' module from './remove',,,test6199_old.js,test6199_new.js
,,,claim,This suggests that the 'remove' module will be used later in the code.,,,,
,,,issue,"line 5, col 1, 'import' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 6, col 1, 'import' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 7, col 1, 'import' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 8, col 1, 'import' is only available in ES6 (use 'esversion: 6').",,,,
11085,9725,"@@ -26,6 +26,18 @@ describe ""Selenium::WebDriver::TargetLocator"" do
     end
   end
 
+  it ""should switch to parent frame"" do
+    driver.navigate.to url_for(""iframes.html"")
+
+    iframe = driver.find_element(:tag_name => ""iframe"")
+    driver.switch_to.frame(iframe)
+
+    driver.find_element(:name, 'login').should be_kind_of(WebDriver::Element)
+
+    driver.switch_to.parent_frame
+    driver.find_element(:id, 'iframe_page_heading').should be_kind_of(WebDriver::Element)
+  end
+
   # switching by name not yet supported by safari
   not_compliant_on :browser => [:ie, :iphone, :safari] do
     it ""should switch to a window and back when given a block"" do",claim,The GIT DIFF shows that a new test case has been added to the code,,,test9725_old.js,test9725_new.js
,,,claim,"This test case is titled ""should switch to parent frame""",,,,
,,,claim,"The test case navigates to the ""iframes.html"" page, finds an iframe element, switches to the iframe, and then checks if an element with the name 'login' exists",,,,
,,,claim,It then switches back to the parent frame and checks if an element with the id 'iframe_page_heading' exists,,,,
,,,claim,This test case ensures that the driver can switch between frames and find elements in both the parent and child frames.,,,,
18051,8007,"@@ -36,6 +36,11 @@ function writeCommand(server, type, opsField, ns, ops, options, callback) {
     writeCommand.bypassDocumentValidation = options.bypassDocumentValidation;
   }
 
+  if (writeConcern.w === 0) {
+    // don't include session for unacknowledged writes
+    delete options.session;
+  }
+
   const commandOptions = Object.assign(
     {
       checkKeys: type === 'insert',",claim,The code change adds a new conditional block that checks if the write concern (writeConcern) for the current operation is set to 0,,,test8007_old.js,test8007_new.js
,,,claim,"If it is, the session option is removed from the options object",,,,
,,,claim,This suggests that the session is not needed for unacknowledged writes.,,,,
,,,issue,"line 44, col 3, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
15319,3406,"@@ -25,7 +25,11 @@ const isPromiseLike = require('../utils').isPromiseLike;
 function addToOperationsList(bulkOperation, docType, document) {
   // Get the bsonSize
   const bsonSize = bson.calculateObjectSize(document, {
-    checkKeys: false
+    checkKeys: false,
+
+    // Since we don't know what the user selected for BSON options here,
+    // err on the safe side, and check the size with ignoreUndefined: false.
+    ignoreUndefined: false
   });
 
   // Throw error if the doc is bigger than the max BSON size",claim,"The code change in the GIT DIFF adds a comment explaining that the user may not have selected specific BSON options, so it is safer to err on the side of checking the size of the document with ""ignoreUndefined: false""",,,test3406_old.js,test3406_new.js
,,,claim,"The line of code that sets the ""checkKeys"" option to false remains unchanged.",,,,
,,,issue,"line 27, col 3, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
12883,2307,"@@ -87,11 +87,11 @@ export function diff(dom, parentDom, newVNode, oldVNode, context, isSvg, excessD
 			c._vnode = newVNode;
 
 			// Invoke getDerivedStateFromProps
-			let s = c._nextState || c.state;
+			if (c._nextState==null) {
+				c._nextState = c.state;
+			}
 			if (newType.getDerivedStateFromProps!=null) {
-				oldState = assign({}, c.state);
-				if (s===c.state) s = c._nextState = assign({}, s);
-				assign(s, newType.getDerivedStateFromProps(newVNode.props, s));
+				assign(c._nextState==c.state ? (c._nextState = assign({}, c._nextState)) : c._nextState, newType.getDerivedStateFromProps(newVNode.props, c._nextState));
 			}
 
 			// Invoke pre-render lifecycle methods",claim,The code changes in the GIT DIFF remove a block of code that was setting up the state for the derived state from props,,,test2307_old.js,test2307_new.js
,,,claim,The removed code was setting up a variable 's' to either the '_nextState' or 'state' of the component 'c',,,,
,,,claim,It then checked if 's' was equal to the 'state' of the component 'c',,,,
,,,claim,"If it was, it would assign a new object to '_nextState'",,,,
,,,claim,The removed code then assigned the result of 'getDerivedStateFromProps' to 's',,,,
,,,claim,,,,,
,,,claim,The new code instead checks if '_nextState' is null,,,,
,,,claim,"If it is, it assigns the 'state' of the component 'c' to '_nextState'",,,,
,,,claim,The new,,,,
8812,7290,"@@ -1076,9 +1076,14 @@ Blockly.WorkspaceSvg.prototype.deleteVariableById = function(id) {
  * @package
  */
 Blockly.WorkspaceSvg.prototype.createVariable = function(name, opt_type, opt_id) {
+  var variableInMap = (this.getVariable(name) != null);
   var newVar = Blockly.WorkspaceSvg.superClass_.createVariable.call(this, name,
     opt_type, opt_id);
-  this.refreshToolboxSelection_();
+  // For performance reaons, only refresh the the toolbox for new variables.
+  // Variables that already exist should already be there.
+  if (!variableInMap) {
+    this.refreshToolboxSelection_();
+  }
   return newVar;
 };
 ",claim,The code change in the GIT DIFF adds a new block of code that checks if a variable already exists in the map,,,test7290_old.js,test7290_new.js
,,,claim,"If it does not, it refreshes the toolbox selection",,,,
,,,claim,"This is done for performance reasons, as refreshing the toolbox for existing variables would be unnecessary",,,,
,,,claim,The comment above the added code explains this new logic.,,,,
,,,issue,"line 1078, col 1, 'Blockly' is not defined.",,,,
,,,issue,"line 1080, col 16, 'Blockly' is not defined.",,,,
11960,5474,"@@ -70,3 +70,18 @@ dom.isNativelyFocusable = function(el) {
 	}
 	return false;
 };
+
+/**
+ * Determines if an element is in the focus order, but would not be if its
+ * tabindex were unspecified.
+ * @method insertedIntoFocusOrder
+ * @memberof axe.commons.dom
+ * @instance
+ * @param {HTMLElement} el The HTMLElement
+ * @return {Boolean} True if the element is in the focus order but wouldn't be
+ * if its tabindex were removed. Else, false.
+ */
+dom.insertedIntoFocusOrder = function(el) {
+	return (el.tabIndex > -1 && dom.isFocusable(el) &&
+			!dom.isNativelyFocusable(el));
+};",claim,"The GIT DIFF shows that a new function named ""insertedIntoFocusOrder"" has been added to the ""axe.commons.dom"" object",,,test5474_old.js,test5474_new.js
,,,claim,This function takes an HTMLElement as a parameter and returns a boolean value,,,,
,,,claim,"The function checks if the element's tabIndex is greater than -1, if the element is focusable, and if the element is not natively focusable",,,,
,,,claim,"If all these conditions are met, the function returns true, indicating that the element is in the focus order but would not be if its tabindex were unspecified",,,,
,,,claim,"If any of these conditions is not met, the function returns false.",,,,
14145,4235,"@@ -273,6 +273,7 @@ var testFiles = [
   , '/test/functional/byo_promises_tests.js'
 
   // Functionality tests
+  , '/test/functional/dns_txt_records_tests.js'
   , '/test/functional/mongo_client_tests.js'
   , '/test/functional/collection_tests.js'
   , '/test/functional/db_tests.js'",claim,The code change adds a new line to the list of test files,,,test4235_old.js,test4235_new.js
,,,claim,The new line adds the path '/test/functional/dns_txt_records_tests.js' to the list,,,,
,,,claim,This indicates that a new test file for DNS TXT records has been added.,,,,
,,,issue,"line 273, col 5, Misleading line break before ','; readers may interpret this as an expression boundary.",,,,
,,,issue,"line 276, col 5, Misleading line break before ','; readers may interpret this as an expression boundary.",,,,
,,,issue,"line 277, col 5, Misleading line break before ','; readers may interpret this as an expression boundary.",,,,
,,,issue,"line 278, col 5, Misleading line break before ','; readers may interpret this as an expression boundary.",,,,
,,,issue,"line 279, col 5, Misleading line break before ','; readers may interpret this as an expression boundary.",,,,
12215,9770,"@@ -14,7 +14,13 @@ class Tag extends BaseItem {
 	}
 
 	static async noteIds(tagId) {
-		const rows = await this.db().selectAll('SELECT note_id FROM note_tags WHERE tag_id = ?', [tagId]);
+		// Get NoteIds of that are tagged with current tag or its descendants
+		const rows = await this.db().selectAll(`WITH RECURSIVE
+												parent_of(id, child_id) AS 
+												(SELECT id, id FROM tags where id=?
+												UNION ALL
+												SELECT parent_of.id, tags2.id FROM parent_of JOIN tags AS tags2 ON parent_of.child_id=tags2.parent_id)
+												SELECT note_id FROM note_tags WHERE tag_id IN (SELECT child_id from parent_of)`, [tagId]);
 		const output = [];
 		for (let i = 0; i < rows.length; i++) {
 			output.push(rows[i].note_id);",claim,The code change in the GIT DIFF replaces an existing line of code,,,test9770_old.js,test9770_new.js
,,,claim,The replaced line of code now uses a recursive query to select all note_ids that are tagged with the current tag or its descendants,,,,
,,,claim,"The new query is more complex and uses a WITH RECURSIVE clause to define a recursive common table expression (CTE) named ""parent_of""",,,,
,,,claim,"The CTE is then used to select note_ids where the tag_id is in the child_id of the ""parent_of"" CTE",,,,
,,,claim,This change suggests that the code is now capable of handling a more complex and dynamic tagging system.,,,,
,,,issue,"line 16, col 12, 'async functions' is only available in ES8 (use 'esversion: 8').",,,,
,,,issue,"line 18, col 9, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 18, col 48, 'template literal syntax' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 24, col 9, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 25, col 14, 'let' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
15736,7059,"@@ -490,6 +490,18 @@ class Builder {
     return this;
   }
 
+  /**
+   * Sets the {@link ie.ServiceBuilder} to use to manage the geckodriver
+   * child process when creating IE sessions locally.
+   *
+   * @param {ie.ServiceBuilder} service the service to use.
+   * @return {!Builder} a self reference.
+   */
+  setIeService(service) {
+    this.ieService_ = service;
+    return this;
+  }
+
   /**
    * Set {@linkplain edge.Options options} specific to Microsoft's Edge browser
    * for drivers created by this builder. Any proxy settings defined on the",claim,"The GIT DIFF shows that a new method named ""setIeService"" has been added to the ""Builder"" class",,,test7059_old.js,test7059_new.js
,,,claim,"This method takes a parameter ""service"" of type ""ie.ServiceBuilder"" and sets the ""ieService_"" property of the class to the provided service",,,,
,,,claim,"The method also returns a self reference to the class, allowing for method chaining",,,,
,,,claim,This new method is documented with a comment block that explains its purpose and usage.,,,,
17220,4907,"@@ -206,7 +206,6 @@ describe('Configure Options', function() {
       iframe.src = '/test/mock/frames/context.html';
       iframe.onload = function() {
         axe.configure(config);
-        iframe.contentWindow.axe.configure(config);
 
         axe.run(
           '#target',",claim,The code change represented by the GIT DIFF removes a line of code that was previously configuring the axe accessibility testing library within the content window of an iframe,,,test4907_old.js,test4907_new.js
,,,claim,"This suggests that the accessibility testing library is now being configured directly on the axe object, rather than within the iframe's content window.",,,,
15369,1525,"@@ -1,7 +1,7 @@
 'use strict';
 
 const Aspect = {
-  SKIP_SESSION: Symbol('SKIP_SESSION')
+  SKIP_SESSION: 'SKIP_SESSION'
 };
 
 /**",claim,The code change in the GIT DIFF modifies the value of the SKIP_SESSION constant from a Symbol to a string,,,test1525_old.js,test1525_new.js
,,,claim,"This change does not affect the functionality of the code, but it may be done for style consistency or to adhere to a specific coding standard.",,,,
,,,issue,"line 1, col 1, Use the function form of ""use strict"".",,,,
,,,issue,"line 3, col 1, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
6073,2863,"@@ -7,6 +7,12 @@ const createDist = (buildConfig = config.defaultBuildConfig, options) => {
   config.buildConfig = buildConfig
   config.update(options)
 
+  if (config.notarize) {
+    notarize = config.notarize
+    notary_user = config.notary_user
+    notary_password = config.notary_password
+  }
+
   util.updateBranding()
   fs.removeSync(path.join(config.outputDir, 'dist'))
   config.buildTarget = 'create_dist'",claim,"The code change adds a new conditional block that checks if the configuration option ""notarize"" is set",,,test2863_old.js,test2863_new.js
,,,claim,"If it is, it assigns the values of ""notarize"", ""notary_user"", and ""notary_password"" from the configuration to the variables ""notarize"", ""notary_user"", and ""notary_password"" respectively",,,,
,,,claim,"This suggests that the code now supports notarization, which is the process of signing and timestamping a software package for macOS.",,,,
,,,issue,"line 7, col 35, Missing semicolon.",,,,
,,,issue,"line 8, col 25, Missing semicolon.",,,,
,,,issue,"line 11, col 31, Missing semicolon.",,,,
,,,issue,"line 12, col 37, Missing semicolon.",,,,
,,,issue,"line 13, col 45, Missing semicolon.",,,,
,,,issue,"line 16, col 24, Missing semicolon.",,,,
,,,issue,"line 17, col 53, Missing semicolon.",,,,
,,,issue,"line 18, col 37, Missing semicolon.",,,,
10883,1472,"@@ -278,9 +278,7 @@ describe('src/Core', () => {
       plugins: {},
       totalProgress: 0
     })
-    expect(core.plugins.acquirer[0].mocks.uninstall.mock.calls.length).toEqual(
-      1
-    )
+    expect(core.plugins[Object.keys(core.plugins)[0]].length).toEqual(0)
   })
 
   describe('upload hooks', () => {",claim,The code change in the GIT DIFF replaces an existing line of code,,,test1472_old.js,test1472_new.js
,,,claim,The replaced line of code now checks if the length of the first plugin in the core plugins object is equal to 0,,,,
,,,claim,The original line of code checked if the length of the uninstall mock calls on the first acquirer plugin was equal to 1,,,,
,,,claim,This suggests a change in the expected state of the plugins object after the uninstall operation.,,,,
,,,issue,"line 280, col 7, Missing semicolon.",,,,
,,,issue,"line 281, col 73, Missing semicolon.",,,,
,,,issue,"line 282, col 5, Missing semicolon.",,,,
,,,issue,"line 284, col 29, 'arrow function syntax (=>)' is only available in ES6 (use 'esversion: 6').",,,,
14685,2663,"@@ -91,6 +91,7 @@ class MergeCells extends BasePlugin {
     this.autofillCalculations = new AutofillCalculations(this);
     this.selectionCalculations = new SelectionCalculations();
 
+    this.hot.selection.transformation.addLocalHook('afterTransformStart', (...args) => this.onAfterLocalTransformStart(...args));
     this.addHook('afterInit', (...args) => this.onAfterInit(...args));
     this.addHook('beforeKeyDown', (...args) => this.onBeforeKeyDown(...args));
     this.addHook('modifyTransformStart', (...args) => this.onModifyTransformStart(...args));",claim,The code change adds a new line that adds a local hook to the 'afterTransformStart' event of the selection transformation of the 'hot' object,,,test2663_old.js,test2663_new.js
,,,claim,The hook is triggered when the transformation starts and calls the 'onAfterLocalTransformStart' method with the provided arguments,,,,
,,,claim,This suggests that the code is now capable of performing some action or operation after the local transformation starts.,,,,
,,,issue,"line 94, col 76, 'rest operator' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 94, col 83, 'arrow function syntax (=>)' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 94, col 120, 'spread operator' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 95, col 32, 'rest operator' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 95, col 39, 'arrow function syntax (=>)' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 95, col 61, 'spread operator' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 96, col 36, 'rest operator' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 96, col 43, 'arrow function syntax (=>)' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 96, col 69, 'spread operator' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 97, col 43, 'rest operator' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 97, col 50, 'arrow function syntax (=>)' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 97, col 83, 'spread operator' is only available in ES6 (use 'esversion: 6').",,,,
35758,8350,"@@ -33,6 +33,8 @@ let baseModuleStore = Modules.createModuleStore( 'tagmanager', {
 		'internalAMPContainerID',
 		'useSnippet',
 		'ownerID',
+		'gaAMPPropertyID',
+		'gaPropertyID',
 	],
 	submitChanges,
 	validateCanSubmitChanges,",claim,The code change adds two new lines to the array of module names,,,test8350_old.js,test8350_new.js
,,,claim,These new lines are 'gaAMPPropertyID' and 'gaPropertyID',,,,
,,,claim,This suggests that the code now includes support for two new modules: 'gaAMPPropertyID' and 'gaPropertyID'.,,,,
,,,issue,"line 39, col 5, 'object short notation' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 40, col 5, 'object short notation' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
14051,6146,"@@ -204,5 +204,4 @@ function server (inputCompanionOptions = {}) {
   return { app, companionOptions }
 }
 
-const { app, companionOptions } = server()
-module.exports = { app, companionOptions, server }
+module.exports = { server }",claim,The code change represented by the GIT DIFF removes two lines of code and adds one line,,,test6146_old.js,test6146_new.js
,,,claim,"The removed lines were importing the ""app"" and ""companionOptions"" from the ""server"" function and then exporting them",,,,
,,,claim,"The added line is simply exporting the ""server"" function itself",,,,
,,,claim,"This suggests that the ""app"" and ""companionOptions"" are no longer needed to be exported from the ""server"" function.",,,,
,,,issue,"line 204, col 12, 'object short notation' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 204, col 17, 'object short notation' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 204, col 35, Missing semicolon.",,,,
,,,issue,"line 207, col 20, 'object short notation' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 207, col 28, Missing semicolon.",,,,
24612,5890,"@@ -0,0 +1,19 @@
+
+import { wpApiFetch } from './wp-api-fetch';
+
+import { testClientConfig } from './test-client-config';
+
+/**
+ *
+ * @param {*} config
+ */
+export async function setClientConfig( config = testClientConfig ) {
+	return await wpApiFetch( {
+		path: 'google-site-kit/v1/e2e/auth/client-config',
+		method: 'post',
+		data: {
+			clientID: config.web.client_id,
+			clientSecret: config.web.client_secret,
+		},
+	} );
+}",claim,The GIT DIFF shows that a new file has been added,,,test5890_old.js,test5890_new.js
,,,claim,"This file imports two functions, 'wpApiFetch' and 'testClientConfig', and defines an asynchronous function 'setClientConfig'",,,,
,,,claim,"The function takes an optional parameter 'config', which defaults to 'testClientConfig'",,,,
,,,claim,The function uses 'wpApiFetch' to make a POST request to the 'google-site-kit/v1/e2e/auth/client-config' endpoint with the client ID and client secret from the 'config' object.,,,,
,,,issue,"line 2, col 1, 'import' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 4, col 1, 'import' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 10, col 1, 'export' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 10, col 47, 'default parameters' is only available in ES6 (use 'esversion: 6').",,,,
12872,2830,"@@ -87,11 +87,11 @@ export function diff(dom, parentDom, newVNode, oldVNode, context, isSvg, excessD
 			c._vnode = newVNode;
 
 			// Invoke getDerivedStateFromProps
-			let s = c._nextState || c.state;
+			if (c._nextState==null) {
+				c._nextState = c.state;
+			}
 			if (newType.getDerivedStateFromProps!=null) {
-				oldState = assign({}, c.state);
-				if (s===c.state) s = c._nextState = assign({}, s);
-				assign(s, newType.getDerivedStateFromProps(newVNode.props, s));
+				c.setState(newType.getDerivedStateFromProps(newVNode.props, c._nextState));
 			}
 
 			// Invoke pre-render lifecycle methods",claim,The code changes in the GIT DIFF replace a block of code that was handling the getDerivedStateFromProps method,,,test2830_old.js,test2830_new.js
,,,claim,"The original code was assigning the state to a variable, checking if the state was the same as the next state, and if so, assigning the next state to a new object",,,,
,,,claim,"The new code instead checks if the next state is null and if so, assigns the current state to the next state",,,,
,,,claim,It then calls the setState method with the result of the getDerivedStateFromProps method applied to the new node's props and the current next state,,,,
,,,claim,This change simplifies the code and makes it more readable.,,,,
11952,8357,"@@ -68,13 +68,14 @@ export function renderComponent(component, opts, mountAll, isChild) {
 		state = component.state,
 		context = component.context,
 		previousProps = component.prevProps || props,
-		previousState = component.prevState || state,
+		previousState = extend({}, component.prevState || state),
 		previousContext = component.prevContext || context,
 		isUpdate = component.base,
 		nextBase = component.nextBase,
 		initialBase = isUpdate || nextBase,
 		initialChildComponent = component._component,
 		skip = false,
+		snapshot = previousContext,
 		rendered, inst, cbase;
 
 	if (component.constructor.getDerivedStateFromProps) {",claim,"The code changes in this GIT DIFF involve modifying the way the ""previousState"" variable is assigned",,,test8357_old.js,test8357_new.js
,,,claim,"Previously, it was directly assigned the value of ""component.prevState || state""",,,,
,,,claim,"Now, it is assigned a new object created by extending the existing ""component.prevState || state"" object",,,,
,,,claim,"Additionally, a new variable ""snapshot"" is also assigned the value of ""previousContext""",,,,
,,,claim,"This suggests that the ""previousState"" object is now being cloned to prevent mutation, and a snapshot of the ""previousContext"" is being maintained for later use.",,,,
17726,6426,"@@ -2,6 +2,7 @@
  * and will be replaced soon by a Vue component.
  */
 
+/* eslint-disable no-var */
 import browser from 'browser';
 import dom from 'dom';
 import 'css!./navdrawer';",claim,"The code change represented by the GIT DIFF adds a new line of code that disables the ESLint rule for the ""no-var"" error",,,test6426_old.js,test6426_new.js
,,,claim,This means that the code will not enforce the rule that disallows the use of the var keyword.,,,,
,,,issue,"line 6, col 1, 'import' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 7, col 1, 'import' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 8, col 1, 'import' is only available in ES6 (use 'esversion: 6').",,,,
10707,4604,"@@ -380,8 +380,15 @@ class RemoteConnection(object):
             # Authorization header
             headers[""Authorization""] = ""Basic %s"" % auth
 
-        self._conn.request(method, parsed_url.path, data, headers)
-        resp = self._conn.getresponse()
+        if body and method != 'POST' and method != 'PUT':
+            body = None
+        try:
+          self._conn.request(method, parsed_url.path, body, headers)
+          resp = self._conn.getresponse()
+        except httplib.HTTPException:
+          self._conn.close()
+          raise
+
         statuscode = resp.status
         statusmessage = resp.msg
         LOGGER.debug('%s %s' % (statuscode, statusmessage))",claim,The code changes include the addition of a conditional statement to check if the 'body' variable is not empty and the 'method' is not 'POST' or 'PUT',,,test4604_old.js,test4604_new.js
,,,claim,"If these conditions are met, the 'body' variable is set to None",,,,
,,,claim,A try block is then added to make a request to the server with the updated 'body' variable,,,,
,,,claim,"If a httplib.HTTPException is encountered, the connection is closed and the exception is re-raised",,,,
,,,claim,This change is likely made to prevent unnecessary requests and handle potential errors.,,,,
25369,6397,"@@ -31,7 +31,7 @@ storiesOf( 'Global', module )
 				title={ __( 'Top content over the last 28 days', 'google-site-kit' ) }
 				headerCtaLink=""https://analytics.google.com""
 				headerCtaLabel={ __( 'See full stats in Analytics', 'google-site-kit' ) }
-				footerCtaLabel={ __( 'Analytics', 'google-site-kit' ) }
+				footerCtaLabel={ _x( 'Analytics', 'Service name', 'google-site-kit' ) }
 				footerCtaLink=""https://analytics.google.com""
 			>
 				<AnalyticsDashboardWidgetTopPagesTable />",claim,The code change in the GIT DIFF modifies the label for the footer CTA (Call to Action) in the code,,,test6397_old.js,test6397_new.js
,,,claim,"Originally, the label was ""Analytics""",,,,
,,,claim,"The updated label, however, is now translated to ""Service name"" using the _x function",,,,
,,,claim,This suggests that the code is now supporting internationalization and the label for the footer CTA is now being localized based on the user's language preference.,,,,
15111,4259,"@@ -18,10 +18,14 @@ const handleCallback = require('../utils').handleCallback;
 const indexInformationDb = require('./db_ops').indexInformation;
 const isObject = require('../utils').isObject;
 const Long = require('mongodb-core').BSON.Long;
+const makeLazyLoader = require('../utils').makeLazyLoader;
 const MongoError = require('mongodb-core').MongoError;
 const ReadPreference = require('mongodb-core').ReadPreference;
 const toError = require('../utils').toError;
 
+const collLoader = makeLazyLoader(`${__dirname}/../collection`);
+const dbLoader = makeLazyLoader(`${__dirname}/../db`);
+
 /**
  * Group function helper
  * @ignore",claim,The code changes include the addition of a new line to import the 'makeLazyLoader' function from the '../utils' module,,,test4259_old.js,test4259_new.js
,,,claim,"Two new variables, 'collLoader' and 'dbLoader', are then created by calling 'makeLazyLoader' with the paths to the '../collection' and '../db' directories, respectively",,,,
,,,claim,"These new variables are then used to load the collection and database modules lazily, which can improve the performance of the application by reducing the number of required resources at startup.",,,,
,,,issue,"line 18, col 1, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 19, col 1, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 20, col 1, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 21, col 1, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 22, col 1, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 23, col 1, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 24, col 1, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 26, col 1, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 26, col 35, 'template literal syntax' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 27, col 1, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 27, col 33, 'template literal syntax' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 18, col 28, 'require' is not defined.",,,,
,,,issue,"line 19, col 18, 'require' is not defined.",,,,
,,,issue,"line 20, col 14, 'require' is not defined.",,,,
,,,issue,"line 21, col 24, 'require' is not defined.",,,,
,,,issue,"line 22, col 20, 'require' is not defined.",,,,
,,,issue,"line 23, col 24, 'require' is not defined.",,,,
,,,issue,"line 24, col 17, 'require' is not defined.",,,,
,,,issue,"line 26, col 38, '__dirname' is not defined.",,,,
,,,issue,"line 27, col 36, '__dirname' is not defined.",,,,
12707,3853,"@@ -44,9 +44,12 @@ module.exports = class Client {
       body: data
     }).then((response) => response.json()).then((assembly) => {
       if (assembly.error) {
-        const error = new Error(assembly.error)
+        const error = new Error(assembly)
         error.message = assembly.error
-        error.details = assembly.reason
+        error.details = assembly.message
+        if (assembly.assembly_id) {
+          error.details += ' ' + `assembly_id: ${assembly.assembly_id}`
+        }
         throw error
       }
 ",claim,The code changes in the GIT DIFF modify the error handling in the Client class,,,test3853_old.js,test3853_new.js
,,,claim,The original code was creating a new Error object with the error message from the assembly object and setting the error details to the reason from the assembly object,,,,
,,,claim,The updated code is creating a new Error object with the entire assembly object as the error message and setting the error details to the message from the assembly object,,,,
,,,claim,"If the assembly object has an assembly_id, it is appended to the error details",,,,
,,,claim,This change provides more detailed error information.,,,,
,,,issue,"line 45, col 22, 'arrow function syntax (=>)' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 45, col 58, 'arrow function syntax (=>)' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 47, col 9, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 47, col 42, Missing semicolon.",,,,
,,,issue,"line 48, col 39, Missing semicolon.",,,,
,,,issue,"line 49, col 41, Missing semicolon.",,,,
,,,issue,"line 51, col 34, 'template literal syntax' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 51, col 72, Missing semicolon.",,,,
,,,issue,"line 53, col 20, Missing semicolon.",,,,
15182,2396,"@@ -93,7 +93,7 @@ function setProperty(dom, name, value, oldValue, isSvg) {
 		}
 	}
 	// Benchmark for comparison: https://esbench.com/bench/574c954bdb965b9a00965ac6
-	else if (name[0] === 'o' && name[1] === 'n') {
+	else if (name.slice(0, 2) === 'on') {
 		let useCapture = name !== (name = name.replace(/Capture$/, ''));
 		let nameLower = name.toLowerCase();
 		name = (nameLower in dom ? nameLower : name).slice(2);",claim,The code change in the GIT DIFF modifies an existing conditional statement,,,test2396_old.js,test2396_new.js
,,,claim,The original condition checked if the first two characters of the variable 'name' were 'o' and 'n',,,,
,,,claim,The updated condition checks if the first two characters of 'name' match the string 'on',,,,
,,,claim,This change simplifies the condition and makes it more readable.,,,,
,,,issue,"line 97, col 9, 'let' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 98, col 9, 'let' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
16810,1454,"@@ -22,5 +22,7 @@ describe('Client Side Encryption', function() {
     return testContext.setup(this.configuration);
   });
 
-  generateTopologyTests(testSuites, testContext);
+  generateTopologyTests(testSuites, testContext, spec => {
+    return !spec.description.match(/type=regex/);
+  });
 });",claim,"The code change in the GIT DIFF modifies the function call to ""generateTopologyTests""",,,test1454_old.js,test1454_new.js
,,,claim,The updated function call now includes a callback function as an additional argument,,,,
,,,claim,"This callback function checks if the test description matches the regex pattern ""/type=regex/""",,,,
,,,claim,"If it does, the function returns false, which will exclude the test from the topology tests",,,,
,,,claim,This change allows for more control over which tests to include in the topology tests.,,,,
,,,issue,"line 25, col 55, 'arrow function syntax (=>)' is only available in ES6 (use 'esversion: 6').",,,,
16461,5610,"@@ -213,7 +213,6 @@ const CASE_TRANSLATION = {
   tlscafile: 'tlsCAFile',
   tlscertificatekeyfile: 'tlsCertificateKeyFile',
   tlscertificatekeyfilepassword: 'tlsCertificateKeyFilePassword',
-  wtimeout: 'wTimeoutMS',
   j: 'journal'
 };
 ",claim,The code change represented by the GIT DIFF removes a line of code that was previously mapping the key 'wtimeout' to the value 'wTimeoutMS',,,test5610_old.js,test5610_new.js
,,,claim,This suggests that the 'wtimeout' key is no longer used in the CASE_TRANSLATION object.,,,,
26815,5405,"@@ -61,7 +61,7 @@ class AdSenseSetupWidget extends Component {
 
 	async getAccounts() {
 		try {
-			const responseData = await data.get( TYPE_MODULES, 'adsense', 'accounts' );
+			const responseData = await data.get( TYPE_MODULES, 'adsense', 'accounts', { maybeSetAccount: true } );
 
 			/**
 			 * Defines the account status. Possible values:",claim,The code change in the GIT DIFF modifies the parameters of the 'get' function call,,,test5405_old.js,test5405_new.js
,,,claim,"Originally, the function was called with three parameters: TYPE_MODULES, 'adsense', 'accounts'",,,,
,,,claim,The updated code now includes an additional parameter: { maybeSetAccount: true },,,,
,,,claim,"This suggests that the 'get' function has been updated to handle an additional option or configuration for setting an account, possibly in the context of AdSense.",,,,
,,,issue,"line 62, col 5, 'async functions' is only available in ES8 (use 'esversion: 8').",,,,
,,,issue,"line 64, col 13, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
15097,958,"@@ -0,0 +1,17 @@
+/**
+ * Memoize a function.
+ * @method memoize
+ * @memberof axe.utils
+ * @param {Function} fn Function to memoize
+ * @return {Function}
+ */
+axe._memoizedFns = [];
+axe.utils.memoize = function(fn) {
+	// keep track of each function that is memoized so it can be cleared at
+	// the end of a run. each memoized function has its own cache, so there is
+	// no method to clear all memoized caches. instead, we have to clear each
+	// individual memoized function ourselves.
+	const memoized = axe.imports.memoize(fn);
+	axe._memoizedFns.push(memoized);
+	return memoized;
+};",claim,"The GIT DIFF shows the addition of a new function named ""memoize"" in the ""axe.utils"" namespace",,,test958_old.js,test958_new.js
,,,claim,This function takes a function as an argument and returns a memoized version of that function,,,,
,,,claim,"The memoized function is then added to the ""_memoizedFns"" array, which is used to keep track of all memoized functions",,,,
,,,claim,This function is used to optimize performance by storing the results of expensive function calls and reusing them when the same inputs occur again.,,,,
,,,issue,"line 14, col 5, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
16753,8415,"@@ -18,7 +18,7 @@ function pageNoDuplicateEvaluate(node, options, virtualNode) {
   cache.set(key, true);
 
   let elms = querySelectorAllFilter(axe._tree[0], options.selector, elm =>
-    isVisible(elm.actualNode)
+    isVisible(elm.actualNode, true)
   );
 
   // Filter elements that, within certain contexts, don't map their role.",claim,"The code change in the GIT DIFF modifies the function call to ""isVisible""",,,test8415_old.js,test8415_new.js
,,,claim,"The original call passed ""elm.actualNode"" as an argument, but the updated call now passes ""elm.actualNode"" and ""true"" as arguments",,,,
,,,claim,This suggests that the visibility of the element is now being checked in a different context.,,,,
,,,issue,"line 20, col 3, 'let' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 20, col 73, 'arrow function syntax (=>)' is only available in ES6 (use 'esversion: 6').",,,,
16864,516,"@@ -47,13 +47,13 @@ class Selection {
      */
     this.selectedByCorner = false;
     /**
-     * The collection of the selection layer levels where the whole row was selected using the row header.
+     * The collection of the selection layer levels where the whole row was selected using the row header or the corner header.
      *
      * @type {Set.<number>}
      */
     this.selectedByRowHeader = new Set();
     /**
-     * The collection of the selection layer levels where the whole column was selected using the column header.
+     * The collection of the selection layer levels where the whole column was selected using the column header or the corner header.
      *
      * @type {Set.<number>}
      */",claim,The code changes in the GIT DIFF modify two comment lines,,,test516_old.js,test516_new.js
,,,claim,The changes indicate that the selection of the row or the corner header is now considered when determining the selection layer levels for the whole row and the whole column,,,,
,,,claim,"Previously, the selection was only considered when the row or column header was used individually.",,,,
15884,9584,"@@ -87,6 +87,7 @@ function buildRules(grunt, options, commons, callback) {
 		var tags = options.tags ? options.tags.split(/\s*,\s*/) : [];
 		var rules = result.rules;
 		var checks = result.checks;
+		parseChecks(checks);
 
 		// Translate checks
 		if (locale && locale.checks) {",claim,"The code change adds a new line that calls the function ""parseChecks"" with the variable ""checks"" as an argument",,,test9584_old.js,test9584_new.js
,,,claim,This suggests that the code now has a new functionality to parse checks.,,,,
14195,1220,"@@ -255,6 +255,10 @@ function diffElementNodes(dom, newVNode, oldVNode, context, isSvg, excessDomChil
 		// (as above, don't diff props during hydration)
 		if (!isHydrating) {
 			if (('value' in newProps) && newProps.value!==undefined && newProps.value !== dom.value) dom.value = newProps.value==null ? '' : newProps.value;
+			// preact/#1899
+			// We need this value for input masking.
+			dom._lastValue = dom.value;
+
 			if (('checked' in newProps) && newProps.checked!==undefined && newProps.checked !== dom.checked) dom.checked = newProps.checked;
 		}
 	}",claim,"The code change adds a new line that stores the current value of the DOM element in a new property ""_lastValue""",,,test1220_old.js,test1220_new.js
,,,claim,"This is done for input masking purposes, as mentioned in the comment",,,,
,,,claim,"The comment also indicates that this change is related to the issue or bug mentioned in the comment, which is likely to do with input masking.",,,,
14470,1668,"@@ -139,6 +139,13 @@ describe('text.formControlValue', function() {
 				axe.utils
 					.querySelectorAll(axe._tree[0], '#fixture input')
 					.forEach(function(target) {
+						// Safari and IE11 do not support the color input type
+						// and thus treat them as text inputs. ignore fallback
+						// inputs
+						if (target.actualNode.type === 'text') {
+							return;
+						}
+
 						assert.equal(
 							nativeTextboxValue(target),
 							'',",claim,The code change adds a new condition to ignore fallback inputs in the test,,,test1668_old.js,test1668_new.js
,,,claim,It checks if the type of the actual node is 'text',,,,
,,,claim,"If it is, the function returns immediately",,,,
,,,claim,This is because Safari and IE11 do not support the color input type and thus treat them as text inputs.,,,,
18489,6873,"@@ -320,6 +320,7 @@ export class TopOverlay extends Overlay {
       return this.wot.wtTable.holderOffset.top;
 
     }
+
     return 0;
 
   }",claim,The code change represented by the GIT DIFF adds a new line break after the return statement of the function,,,test6873_old.js,test6873_new.js
,,,claim,This is a minor change and does not affect the functionality of the code,,,,
,,,claim,It may be done for style consistency or to adhere to a specific coding standard.,,,,
15098,1728,"@@ -3,6 +3,7 @@
 
 // Clean up after resolve / reject
 function cleanup() {
+	axe._memoizedFns.forEach(fn => fn.clear());
 	axe._cache.clear();
 	axe._tree = undefined;
 	axe._selectorData = undefined;",claim,"The code change adds a new line that calls the ""forEach"" method on ""axe._memoizedFns"" and then calls the ""clear"" method on each function in the array",,,test1728_old.js,test1728_new.js
,,,claim,"This suggests that the code is now clearing all memoized functions in ""axe._memoizedFns"" before proceeding with the rest of the cleanup process.",,,,
,,,issue,"line 6, col 33, 'arrow function syntax (=>)' is only available in ES6 (use 'esversion: 6').",,,,
18174,8814,"@@ -59,6 +59,13 @@ public class NodeStatus {
     }
   }
 
+  public boolean hasCapability(Capabilities caps) {
+    long count = slots.stream()
+        .filter(slot -> slot.isSupporting(caps))
+        .count();
+    return count > 0;
+  }
+
   public boolean hasCapacity() {
     return slots.stream().anyMatch(slot -> !slot.getSession().isPresent());
   }",claim,"The code change added a new method called ""hasCapability"" to the ""NodeStatus"" class",,,test8814_old.js,test8814_new.js
,,,claim,"This method takes a parameter of type ""Capabilities"" and returns a boolean value",,,,
,,,claim,The method uses a stream to filter the slots that support the given capabilities and then counts the number of such slots,,,,
,,,claim,"If the count is greater than 0, it returns true, indicating that the node has the capability.",,,,
13395,7495,"@@ -44,7 +44,7 @@ var PrivateKey = function PrivateKey(data, network, compressed) {
   };
 
   // detect type of data
-  if (!data){
+  if (typeof(data) === 'undefined' || data === 'random'){
     info.bn = PrivateKey._getRandomBN();
   } else if (data instanceof BN) {
     info.bn = data;",claim,The code change in the GIT DIFF modifies an existing conditional statement,,,test7495_old.js,test7495_new.js
,,,claim,The original condition checked if the 'data' variable was not set,,,,
,,,claim,The updated condition checks if the 'data' variable is either undefined or equal to 'random',,,,
,,,claim,This change allows for more flexibility in handling different types of 'data' inputs.,,,,
12235,4523,"@@ -69,7 +69,8 @@ module.exports = class Webcam extends Plugin {
         'picture'
       ],
       mirror: true,
-      facingMode: 'user'
+      facingMode: 'user',
+      preferredMimeType: null
     }
 
     // merge default options with the ones set by user",claim,"The code change adds a new line to set the ""preferredMimeType"" to null",,,test4523_old.js,test4523_new.js
,,,claim,This suggests that the default MIME type is now being used instead of the previously specified MIME type.,,,,
,,,issue,"line 74, col 6, Missing semicolon.",,,,
21152,6561,"@@ -51,9 +51,9 @@ if (options.arch) {
 
 const buildType = options.buildType;
 
-const ndkPath = process.env[""ANDROID_NDK""];
+const ndkPath = process.env[""ANDROID_NDK""] || process.env[""ANDROID_NDK_HOME""];
 if (!ndkPath) {
-  throw Error(""ANDROID_NDK environment variable not set"");
+  throw Error(""ANDROID_NDK / ANDROID_NDK_HOME environment variable not set"");
 }
 
 const sdkPath = getAndroidSdkPath();",claim,"The code change in the GIT DIFF modifies how the ""ndkPath"" variable is assigned",,,test6561_old.js,test6561_new.js
,,,claim,"Previously, it was directly assigned the value of the ""ANDROID_NDK"" environment variable",,,,
,,,claim,"Now, it first tries to assign the value of the ""ANDROID_NDK"" environment variable",,,,
,,,claim,"If this fails (i.e., if the ""ANDROID_NDK"" environment variable is not set), it then attempts to assign the value of the ""ANDROID_NDK_HOME"" environment variable",,,,
,,,claim,"If this also fails, it throws an error indicating that both ""ANDROID_NDK"" and ""ANDROID_NDK_HOME"" environment variables are not set.",,,,
,,,issue,"line 52, col 1, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 54, col 1, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 54, col 28, ['ANDROID_NDK'] is better written in dot notation.",,,,
,,,issue,"line 54, col 58, ['ANDROID_NDK_HOME'] is better written in dot notation.",,,,
,,,issue,"line 59, col 1, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
15371,689,"@@ -927,7 +927,7 @@ export default function Core(rootElement, userSettings, rootInstanceSymbol = fal
     if (isFunction(beforeChangeResult)) {
       warn('Your beforeChange callback returns a function. It\'s not supported since Handsontable 0.12.1 (and the returned function will not be executed).');
 
-    } else if (beforeChangeResult === false) {
+    } else if (beforeChangeResult === false || beforeChangeResult.length === 0 || beforeChangeResult[0] === null) {
       const activeEditor = instance.getActiveEditor();
 
       if (activeEditor) {",claim,The code change in the GIT DIFF modifies an existing conditional statement,,,test689_old.js,test689_new.js
,,,claim,"The updated condition now checks if the ""beforeChangeResult"" is either false, an empty array, or the first element of the ""beforeChangeResult"" array is null",,,,
,,,claim,"This change broadens the scope of the ""beforeChangeResult"" validation in the code.",,,,
,,,issue,"line 931, col 7, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
20706,4122,"@@ -473,6 +473,7 @@ describe('GridFS Stream', function () {
                     // Fail if user tries to abort an aborted stream
                     uploadStream.abort().then(null, function (error) {
                       expect(error.toString()).to.equal(
+                        // TODO(NODE-3405): Replace with MongoStreamClosedError
                         'MongoDriverError: Cannot call abort() on a stream twice'
                       );
                       client.close(done);",claim,The code change adds a comment line that suggests replacing the current error message with a more specific error message,,,test4122_old.js,test4122_new.js
,,,claim,"The comment indicates that the current error message is ""MongoDriverError: Cannot call abort() on a stream twice"" and suggests replacing it with ""MongoStreamClosedError""",,,,
,,,claim,This change is likely a placeholder or temporary solution until a more specific error message is implemented.,,,,
12721,4078,"@@ -10,11 +10,14 @@ import options from '../options';
  * @param {boolean} isSvg Whether or not this node is an SVG node
  */
 export function diffProps(dom, newProps, oldProps, isSvg) {
-	for (let i in newProps) {
-		if (i!=='children' && i!=='key' && (!oldProps || ((i==='value' || i==='checked') ? dom : oldProps)[i]!==newProps[i])) {
-			setProperty(dom, i, newProps[i], oldProps[i], isSvg);
+	let keys = Object.keys(newProps).sort();
+	for (let i = 0; i < keys.length; i++) {
+		let k = keys[i];
+		if (k!=='children' && k!=='key' && (!oldProps || ((k==='value' || k==='checked') ? dom : oldProps)[k]!==newProps[k])) {
+			setProperty(dom, k, newProps[k], oldProps[k], isSvg);
 		}
 	}
+
 	for (let i in oldProps) {
 		if (i!=='children' && i!=='key' && (!newProps || !(i in newProps))) {
 			setProperty(dom, i, null, oldProps[i], isSvg);",claim,The code change in the GIT DIFF modifies the way the properties are being iterated over in the `diffProps` function,,,test4078_old.js,test4078_new.js
,,,claim,"Instead of directly iterating over the `newProps` object, the keys are now sorted and then iterated over",,,,
,,,claim,This change could potentially improve the performance of the function by reducing the number of iterations and potentially improving the order of operations.,,,,
,,,issue,"line 12, col 1, 'export' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 13, col 5, 'let' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 14, col 10, 'let' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 15, col 9, 'let' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 21, col 10, 'let' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
14370,9649,"@@ -30,7 +30,7 @@ function ariaOwns(nodes, role) {
 		if (nodes[index] === null) {
 			continue;
 		}
-		let virtualTree = axe.utils.getNodeFromTree(axe._tree[0], nodes[index]);
+		let virtualTree = axe.utils.getNodeFromTree(nodes[index]);
 		if (owns(nodes[index], virtualTree, role, true)) {
 			return true;
 		}",claim,"The code change in the GIT DIFF modifies how the ""virtualTree"" variable is assigned",,,test9649_old.js,test9649_new.js
,,,claim,"Previously, it was assigned the result of the ""getNodeFromTree"" function with two arguments: ""axe._tree[0]"" and ""nodes[index]""",,,,
,,,claim,"Now, it is assigned the result of the same function with only one argument: ""nodes[index]""",,,,
,,,claim,"This suggests that the ""axe._tree[0]"" argument is no longer needed in the ""getNodeFromTree"" function call.",,,,
,,,issue,"line 33, col 9, 'let' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
17921,5013,"@@ -0,0 +1,8 @@
+import Vue from 'vue'
+import App from './App.vue'
+
+Vue.config.productionTip = false
+
+new Vue({
+  render: h => h(App),
+}).$mount('#app')",claim,The GIT DIFF shows that a new file has been added to the codebase,,,test5013_old.js,test5013_new.js
,,,claim,This file imports the Vue library and the App component from './App.vue',,,,
,,,claim,"It then configures Vue to disable the production tip and finally, it creates a new Vue instance and mounts it to the '#app' element in the DOM.",,,,
,,,issue,"line 1, col 1, 'import' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 1, col 22, Missing semicolon.",,,,
,,,issue,"line 2, col 1, 'import' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 2, col 28, Missing semicolon.",,,,
,,,issue,"line 4, col 33, Missing semicolon.",,,,
,,,issue,"line 7, col 13, 'arrow function syntax (=>)' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 8, col 18, Missing semicolon.",,,,
33068,5803,"@@ -23,7 +23,7 @@ const viewports = require( './viewports' );
 // This will be passed through with the `backstop` command run with docker.
 if ( process.argv.includes( '--docker' ) ) {
 	const hostname = require( './detect-storybook-host' );
-	process.argv.push( `--storybook-host=${ hostname }` );
+	process.argv.push( `--storybook-host=http://${ hostname }:9001/` );
 }
 
 module.exports = {",claim,The code change in the GIT DIFF modifies an existing line of code,,,test5803_old.js,test5803_new.js
,,,claim,"The updated line of code now pushes the argument ""--storybook-host=http://${ hostname }:9001/"" into the process argument vector",,,,
,,,claim,This indicates that the storybook host is now being specified as a URL with a port number of 9001.,,,,
,,,issue,"line 25, col 5, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 26, col 24, 'template literal syntax' is only available in ES6 (use 'esversion: 6').",,,,
11968,2690,"@@ -21,11 +21,18 @@ export function setComponentProps(component, props, opts, context, mountAll) {
 	if ((component.__key = props.key)) delete props.key;
 
 	if (!component.base || mountAll) {
-		if (component.componentWillMount) component.componentWillMount();
+		if (component.componentWillMount) {
+			options.warn(""'componentWillMount' is deprecated"");
+			component.componentWillMount();
+		}
 	}
 	else if (component.componentWillReceiveProps) {
+		options.warn(""'componentWillReceiveProps' is deprecated"");
 		component.componentWillReceiveProps(props, context);
 	}
+	if (component.getDerivedStateFromProps) {
+		component.setState(component.getDerivedStateFromProps(props, component.state));
+	}
 
 	if (context && context!==component.context) {
 		if (!component.prevContext) component.prevContext = component.context;",claim,The code changes include the addition of a warning message when the 'componentWillMount' method is used,,,test2690_old.js,test2690_new.js
,,,claim,This method is now deprecated and the code has been updated to call this method only if it exists,,,,
,,,claim,"The warning message is "" 'componentWillMount' is deprecated""",,,,
,,,claim,,,,,
,,,claim,"Additionally, the 'componentWillReceiveProps' method is now deprecated and a warning message is added",,,,
,,,claim,"The 'getDerivedStateFromProps' method, which is used to update the state based on changes to props, is also now supported",,,,
,,,claim,"This method is called with the new props and the current state as arguments, and the returned value is used to update the state.",,,,
32122,6017,"@@ -30,13 +30,17 @@ import { STORE_NAME as CORE_USER } from '../googlesitekit/datastore/user/constan
 /**
  * Gets the current dateRange string.
  *
- * @param {string} [dateRange] Optional. The date range slug.
+ * @param {string} [dateRange]      Optional. The date range slug.
+ * @param {boolean} [returnNumber]  Optional. If true, returns the number only.
  * @return {string} the date range string.
  */
-export function getCurrentDateRange( dateRange = getCurrentDateRangeSlug() ) {
+export function getCurrentDateRange( dateRange = getCurrentDateRangeSlug(), returnNumber = false ) {
 	const daysMatch = dateRange.match( /last-(\d+)-days/ );
 
 	if ( daysMatch && daysMatch[ 1 ] ) {
+		if ( returnNumber ) {
+			return parseInt( daysMatch[ 1 ], 10 );
+		}
 		return sprintf(
 			/* translators: %s: Number of days matched. */
 			_n( '%s day', '%s days', parseInt( daysMatch[ 1 ], 10 ), 'google-site-kit' ),",claim,"The code changes in the GIT DIFF add a new optional parameter ""returnNumber"" to the ""getCurrentDateRange"" function",,,test6017_old.js,test6017_new.js
,,,claim,"If this parameter is true, the function will return the number only when the date range matches a certain format",,,,
,,,claim,"The function call to ""getCurrentDateRange"" has also been updated to include this new parameter.",,,,
,,,issue,"line 37, col 1, 'export' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 37, col 48, 'default parameters' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 37, col 90, 'default parameters' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 38, col 5, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
11993,108,"@@ -7,4 +7,17 @@
 axe.utils.toArray = function (thing) {
 	'use strict';
 	return Array.prototype.slice.call(thing);
-};
+};
+
+
+/**
+ * Creates an array without duplicate values from 2 array inputs
+ * @param  {Array} arr1 First array
+ * @param  {Array} arr2 Second array
+ * @return {Array}
+ */
+axe.utils.uniqueArray = (arr1, arr2) => {
+  return arr1.concat(arr2).filter((elem, pos, arr) => {
+    return arr.indexOf(elem) === pos;
+  });
+};",claim,"The GIT DIFF shows that a new function named ""uniqueArray"" has been added to the ""axe.utils"" object",,,test108_old.js,test108_new.js
,,,claim,This function takes two arrays as arguments and returns a new array that contains only the unique elements from the two input arrays,,,,
,,,claim,"The function uses the ""concat"" method to combine the two arrays and the ""filter"" method to remove any duplicate elements",,,,
,,,claim,"The function uses the ""indexOf"" method to check if the element is the first occurrence in the array",,,,
,,,claim,"If it is, it returns true, otherwise it returns false",,,,
,,,claim,This function is used to create an array of unique values from two input arrays.,,,,
,,,issue,"line 19, col 36, 'arrow function syntax (=>)' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 20, col 50, 'arrow function syntax (=>)' is only available in ES6 (use 'esversion: 6').",,,,
10113,9657,"@@ -213,9 +213,10 @@ module.exports = class GoldenRetriever extends Plugin {
       this.IndexedDBStore.delete(fileID)
     })
 
-    this.core.on('core:success', (fileIDs) => {
+    this.core.on('core:complete', ({ successful }) => {
+      const fileIDs = successful.map((file) => file.id)
       this.deleteBlobs(fileIDs).then(() => {
-        this.core.log(`[GoldenRetriever] removed ${fileIDs.length} files that finished uploading`)
+        this.core.log(`RestoreFiles: removed ${successful.length} files that finished uploading`)
       })
     })
 ",claim,The code changes in this GIT DIFF involve a modification of the event handling for the 'core:complete' event,,,test9657_old.js,test9657_new.js
,,,claim,"Instead of using the 'fileIDs' parameter from the 'core:success' event, the 'core:complete' event now uses a 'successful' parameter, which is an array of successful files",,,,
,,,claim,The code then maps this array to get an array of file IDs,,,,
,,,claim,"The logging message has also been updated to reflect this change, replacing the 'GoldenRetriever' prefix with 'RestoreFiles'.",,,,
,,,issue,"line 213, col 41, Missing semicolon.",,,,
,,,issue,"line 214, col 7, Missing semicolon.",,,,
,,,issue,"line 216, col 35, 'destructuring binding' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 216, col 50, 'arrow function syntax (=>)' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 217, col 7, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 217, col 43, 'arrow function syntax (=>)' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 217, col 56, Missing semicolon.",,,,
,,,issue,"line 218, col 39, 'arrow function syntax (=>)' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 219, col 23, 'template literal syntax' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 219, col 98, Missing semicolon.",,,,
,,,issue,"line 220, col 9, Missing semicolon.",,,,
,,,issue,"line 221, col 7, Missing semicolon.",,,,
16892,8051,"@@ -158,6 +158,10 @@ class Server extends EventEmitter {
     // setup listeners
     this.s.pool.on('parseError', parseErrorEventHandler(this));
 
+    this.s.pool.on('drain', err => {
+      this.emit('error', err);
+    });
+
     // it is unclear whether consumers should even know about these events
     // this.s.pool.on('timeout', timeoutEventHandler(this));
     // this.s.pool.on('reconnect', reconnectEventHandler(this));",claim,The code change adds a new event listener to the 'drain' event of the 's.pool' object,,,test8051_old.js,test8051_new.js
,,,claim,"When this event is emitted, it emits an 'error' event with the error object passed as an argument",,,,
,,,claim,This suggests that the code now handles the 'drain' event and emits an error if it occurs.,,,,
,,,issue,"line 161, col 33, 'arrow function syntax (=>)' is only available in ES6 (use 'esversion: 6').",,,,
34289,1270,"@@ -46,6 +46,7 @@ domReady( () => {
 	Modules.registerModule(
 		'analytics',
 		{
+			name: 'Analytics',
 			settingsEditComponent: SettingsEdit,
 			settingsViewComponent: SettingsView,
 			setupComponent: SetupMain,",claim,The code change adds a new line to the 'analytics' module registration,,,test1270_old.js,test1270_new.js
,,,claim,This new line sets the module's name to 'Analytics',,,,
,,,claim,This change is likely for better clarity and organization in the code.,,,,
18747,7542,"@@ -86,7 +86,7 @@ before(function(_done) {
         }
 
         this.configuration = new TestConfiguration(parsedURI, context);
-        done();
+        client.close(done);
       });
     });
   });",claim,The code change in the GIT DIFF replaces an existing line of code,,,test7542_old.js,test7542_new.js
,,,claim,"The replaced line of code now calls the ""close"" method on the ""client"" object with the ""done"" callback as an argument instead of the original line of code that simply called the ""done"" function",,,,
,,,claim,This indicates that the code is now closing the client connection after the test configuration has been created.,,,,
36252,5873,"@@ -74,7 +74,7 @@ class DashboardModulesAlerts extends Component {
 						title={ notification.title || '' }
 						description={ notification.description || '' }
 						blockData={ notification.blockData || [] }
-						winImage={ notification.winImage ? `${ global._googlesitekitLegacyData.admin.assetsRoot }images/${ notification.winImage }` : '' }
+						WinImageSVG={ notification.WinImageSVG }
 						format={ notification.format || 'small' }
 						learnMoreURL={ notification.learnMoreURL || '' }
 						learnMoreDescription={ notification.learnMoreDescription || '' }",claim,The code change in the GIT DIFF replaces an existing line of code,,,test5873_old.js,test5873_new.js
,,,claim,"The replaced line of code now uses the ""WinImageSVG"" property from the ""notification"" object instead of the ""winImage"" property",,,,
,,,claim,This suggests that the code is now using an SVG image for the win image instead of a traditional image.,,,,
,,,issue,"line 74, col 45, Expected ':' and instead saw '.'.",,,,
,,,issue,"line 74, col 59, Missing semicolon.",,,,
,,,issue,"line 75, col 51, Expected ':' and instead saw '.'.",,,,
,,,issue,"line 75, col 71, Missing semicolon.",,,,
,,,issue,"line 76, col 49, Expected ':' and instead saw '.'.",,,,
,,,issue,"line 76, col 67, Missing semicolon.",,,,
,,,issue,"line 77, col 51, Expected ':' and instead saw '.'.",,,,
,,,issue,"line 77, col 65, Missing semicolon.",,,,
,,,issue,"line 78, col 46, Expected ':' and instead saw '.'.",,,,
,,,issue,"line 78, col 66, Missing semicolon.",,,,
,,,issue,"line 79, col 52, Expected ':' and instead saw '.'.",,,,
,,,issue,"line 79, col 73, Missing semicolon.",,,,
,,,issue,"line 80, col 60, Expected ':' and instead saw '.'.",,,,
,,,issue,"line 80, col 89, Missing semicolon.",,,,
14201,8368,"@@ -378,11 +378,12 @@ const executeOperation = (topology, operation, args, options) => {
 
   // The driver sessions spec mandates that we implicitly create sessions for operations
   // that are not explicitly provided with a session.
-  let session, opOptions;
+  let session, opOptions, owner;
   if (!options.skipSessions && topology.hasSessionSupport()) {
     opOptions = args[args.length - 2];
     if (opOptions == null || opOptions.session == null) {
-      session = topology.startSession();
+      owner = {};
+      session = topology.startSession({ owner });
       const optionsIndex = args.length - 2;
       args[optionsIndex] = Object.assign({}, args[optionsIndex], { session: session });
     } else if (opOptions.session && opOptions.session.hasEnded) {",claim,"The code changes in this GIT DIFF show that a new variable ""owner"" has been introduced to the code",,,test8368_old.js,test8368_new.js
,,,claim,"The ""startSession"" function is now called with an object ""{ owner }"" as an argument",,,,
,,,claim,This suggests that the session is now being started with an owner object,,,,
,,,claim,"The ""session"" and ""opOptions"" variables have also been updated to include the ""owner"" variable.",,,,
,,,issue,"line 381, col 3, 'let' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 386, col 41, 'object short notation' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 387, col 7, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
17217,2884,"@@ -32,9 +32,8 @@ module.exports = function(config, auth, storage) {
     });
   });
 
-  router.get('/-/logo', function(req, res) {
-    res.sendFile(_.get(config, 'web.logo') || `${env.APP_ROOT}/static/logo-sm.png`
-    );
+  router.get('/-/verdaccio/logo', function(req, res) {
+    res.send(_.get(config, 'web.logo') || '/-/static/logo.png');
   });
 
   router.get('/', function(req, res) {",claim,The code changes in the GIT DIFF show that a route has been added to the application,,,test2884_old.js,test2884_new.js
,,,claim,The new route is '/-/verdaccio/logo' and it sends the logo file specified in the configuration or a default logo file if the configuration does not specify a logo,,,,
,,,claim,The old route '/-/logo' has been removed,,,,
,,,claim,This suggests a change in the way the logo is being served in the application.,,,,
18855,8551,"@@ -46,7 +46,7 @@ export function generateRandomHexString(length: number = 8) {
 
 export function signPayload(payload: JWTPayload, secret: string, options: JWTSignOptions) {
   return jwt.sign(payload, secret, {
-    notBefore: '1000', // Make sure the time will not rollback :)
+    notBefore: '1', // Make sure the time will not rollback :)
     ...options,
   });
 }",claim,"The code change in the GIT DIFF modifies the value of the ""notBefore"" option in the JWT signing function",,,test8551_old.js,test8551_new.js
,,,claim,"Originally, the ""notBefore"" option was set to '1000', but it has been changed to '1'",,,,
,,,claim,This suggests that the time requirement for the JWT to be valid has been reduced.,,,,
12872,7055,"@@ -9,6 +9,9 @@ function SIN(type, payload) {
     SIN.super_.call(this, type, payload);
     return;
   }
+  if ( !Buffer.isBuffer(payload) ||  payload.length != 20)
+    throw new Error('Payload must be 20 bytes');
+
   this.data = new Buffer(1 + 1 + payload.length);
   this.converters = this.encodings['binary'].converters;
   this._encoding = this.encodings['binary']._encoding;",claim,The code change adds a new condition to the function,,,test7055_old.js,test7055_new.js
,,,claim,It checks if the payload is not a buffer or if the length of the payload is not 20 bytes,,,,
,,,claim,"If either of these conditions is true, it throws an error stating 'Payload must be 20 bytes'",,,,
,,,claim,This indicates that the function now validates the input payload before proceeding with the rest of the operations.,,,,
,,,issue,"line 16, col 35, ['binary'] is better written in dot notation.",,,,
,,,issue,"line 17, col 34, ['binary'] is better written in dot notation.",,,,
,,,issue,"line 12, col 9, 'Buffer' is not defined.",,,,
,,,issue,"line 15, col 19, 'Buffer' is not defined.",,,,
12941,3638,"@@ -93,7 +93,9 @@ export function coerceToVNode(possibleVNode) {
 
 	// Clone vnode if it has already been used. ceviche/#57
 	if (possibleVNode._dom!=null) {
-		return createVNode(possibleVNode.type, possibleVNode.props, possibleVNode.text, possibleVNode.key, null);
+		let vnode = createVNode(possibleVNode.type, possibleVNode.props, possibleVNode.text, possibleVNode.key, null);
+		vnode._dom = possibleVNode._dom;
+		return vnode;
 	}
 
 	return possibleVNode;",claim,The code change in the GIT DIFF modifies the way a new virtual node is created,,,test3638_old.js,test3638_new.js
,,,claim,"Previously, the function `createVNode` was directly returned",,,,
,,,claim,"Now, a new variable `vnode` is created and assigned the result of `createVNode`",,,,
,,,claim,The `_dom` property of `vnode` is then set to the `_dom` property of `possibleVNode`,,,,
,,,claim,The updated `vnode` is then returned,,,,
,,,claim,This change allows for more control over the new virtual node's properties.,,,,
,,,issue,"line 96, col 9, 'let' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
18980,1248,"@@ -669,6 +669,8 @@ const REGISTERED_HOOKS = [
    * @param {CellRange} sourceRange The range values will be filled from.
    * @param {CellRange} targetRange The range new values will be filled into.
    * @param {string} direction Declares the direction of the autofill. Possible values: `up`, `down`, `left`, `right`.
+   * @param {boolean} hasFillDataChanged Indicates whether the original fillData has been changed in
+   *                                     the `beforeAutofill` hook.
    */
   'afterAutofill',
 ",claim,The code change adds a new parameter to the 'afterAutofill' hook function,,,test1248_old.js,test1248_new.js
,,,claim,"The new parameter, 'hasFillDataChanged', is a boolean that indicates whether the original fillData has been changed in the 'beforeAutofill' hook",,,,
,,,claim,This suggests that the 'afterAutofill' hook now has an additional check to see if the fillData has been changed before autofill.,,,,
7738,3225,"@@ -335,6 +335,8 @@ public class Camera extends Plugin {
       returnBase64(call, exif, bitmapOutputStream);
     } else if (settings.getResultType() == CameraResultType.URI) {
       returnFileURI(call, exif, bitmap, u, bitmapOutputStream);
+    } else if (settings.getResultType() == CameraResultType.BASE64NOMETADATA) {
+      returnBase64NoMetadata(call, exif, bitmapOutputStream);
     } else {
       call.reject(INVALID_RESULT_TYPE_ERROR);
     }",claim,"The code change adds a new else-if block that checks if the result type is ""BASE64NOMETADATA""",,,test3225_old.js,test3225_new.js
,,,claim,"If it is, the function ""returnBase64NoMetadata"" is called",,,,
,,,claim,This suggests that the code now supports returning a base64 encoded image without metadata.,,,,
11031,4668,"@@ -99,6 +99,10 @@ module.exports = function(config) {
 		customLaunchers: sauceLabs ? sauceLabsLaunchers : travisLaunchers,
 
 		files: [
+			// We can't load this up front because it's ES2015 and we need it only
+			// for certain tests that run under those conditions. We also can't load
+			// it via CDN because { included: false } won't work.
+			{ pattern: 'custom-elements-es5-adapter.js', included: false },
 			{ pattern: 'polyfills.js', watched: false },
 			{ pattern: '{browser,shared}/**.js', watched: false }
 		],",claim,The code change adds a new block of code that defines a file pattern for 'custom-elements-es5-adapter.js',,,test4668_old.js,test4668_new.js
,,,claim,This file is not included in the test files,,,,
,,,claim,The comment explains that the file cannot be loaded upfront because it's in ES2015 and needed only for certain tests that run under those conditions,,,,
,,,claim,It also cannot be loaded via CDN because { included: false } will not work.,,,,
11947,1720,"@@ -34,6 +34,8 @@ function assertServerError (res) {
 }
 
 module.exports = class AwsS3Multipart extends Plugin {
+  static VERSION = require('../package.json').version
+
   constructor (uppy, opts) {
     super(uppy, opts)
     this.type = 'uploader'",claim,The code change adds a new line that defines a static version property for the AwsS3Multipart class,,,test1720_old.js,test1720_new.js
,,,claim,The version is retrieved from the package.json file located in the parent directory,,,,
,,,claim,This indicates that the code now includes versioning information in the class.,,,,
,,,issue,"line 36, col 18, 'class' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 37, col 18, Class properties must be methods. Expected '(' but instead saw '='.",,,,
,,,issue,"line 37, col 28, Expected an identifier and instead saw '../package.json'.",,,,
,,,issue,"line 37, col 45, 'function closure expressions' is only available in Mozilla JavaScript extensions (use moz option).",,,,
,,,issue,"line 37, col 46, Expected an identifier and instead saw '.'.",,,,
,,,issue,"line 39, col 3, Class properties must be methods. Expected '(' but instead saw 'constructor'.",,,,
,,,issue,"line 40, col 22, Missing semicolon.",,,,
,,,issue,"line 41, col 27, Missing semicolon.",,,,
12081,4891,"@@ -10,6 +10,17 @@ export function extend(obj, props) {
 	return obj;
 }
 
+/** Invoke or update a ref, depending on whether it is a function or object ref.
+ *  @param {object|function} [ref=null]
+ *  @param {any} [value]
+ */
+export function applyRef(ref, value) {
+	if (ref!=null) {
+		if (typeof ref=='function') ref(value);
+		else ref.current = value;
+	}
+}
+
 /**
  * Call a function asynchronously, as soon as possible. Makes
  * use of HTML Promise to schedule the callback if available,",claim,"The GIT DIFF shows that a new function named ""applyRef"" has been added to the code",,,test4891_old.js,test4891_new.js
,,,claim,"This function takes two parameters, a reference and a value, and applies the value to the reference",,,,
,,,claim,The reference can be either a function or an object reference,,,,
,,,claim,"If the reference is a function, it is invoked with the value",,,,
,,,claim,"If the reference is an object reference, the ""current"" property of the reference is updated with the value",,,,
,,,claim,"If the reference is null, the function does nothing",,,,
,,,claim,This function is used to handle and update references in a flexible manner.,,,,
,,,issue,"line 17, col 1, 'export' is only available in ES6 (use 'esversion: 6').",,,,
11101,15,"@@ -1,8 +1,6 @@
 /*exported DqElement */
 
 function truncate(str, maxLength) {
-	'use strict';
-
 	maxLength = maxLength || 300;
 
 	if (str.length > maxLength) {",claim,"The code change represented by the GIT DIFF removes a line of code that was previously used to enable strict mode in the function ""truncate""",,,test15_old.js,test15_new.js
,,,claim,"This means that the function will now run in a more strict mode, which can help catch errors and prevent potential issues.",,,,
15194,8052,"@@ -368,6 +368,15 @@ function processNewChange(args) {
   const change = args.change;
   const callback = args.callback;
   const eventEmitter = args.eventEmitter || false;
+
+  if (changeStream.isClosed()) {
+    if (eventEmitter) return;
+
+    const error = new Error('ChangeStream is closed');
+    if (typeof callback === 'function') return callback(error, null);
+    return changeStream.promiseLibrary.reject(error);
+  }
+
   const topology = changeStream.topology;
   const options = changeStream.cursor.options;
 ",claim,The code change adds a new conditional block that checks if the change stream is closed,,,test8052_old.js,test8052_new.js
,,,claim,"If the change stream is closed, it checks if the event emitter is present",,,,
,,,claim,"If the event emitter is present, it returns immediately",,,,
,,,claim,"If the event emitter is not present, it creates an error object with the message 'ChangeStream is closed' and checks the type of the callback",,,,
,,,claim,"If the callback is a function, it returns the error object",,,,
,,,claim,"If the callback is not a function, it rejects the error object using the promise library.",,,,
,,,issue,"line 368, col 3, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 369, col 3, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 370, col 3, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 375, col 5, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 380, col 3, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 381, col 3, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
20131,8014,"@@ -0,0 +1,18 @@
+import path from 'path';
+import execa from 'execa';
+import {
+  displayErrorMessage
+} from '../../scripts/utils/console.mjs';
+
+((async function() {
+  try {
+    await execa('npm', ['run', 'swap-package-links'], {
+      cwd: path.resolve(process.cwd(), '..'),
+      stdio: 'inherit'
+    });
+
+  } catch (error) {
+    displayErrorMessage('Error running the script.');
+    process.exit(error.exitCode);
+  }
+})());",claim,The GIT DIFF shows that a new file has been added,,,test8014_old.js,test8014_new.js
,,,claim,"This file imports the 'path' and 'execa' modules, and the 'displayErrorMessage' function from the 'console.mjs' script in the 'scripts/utils' directory",,,,
,,,claim,,,,,
,,,claim,A new asynchronous function is then defined,,,,
,,,claim,"Within this function, an 'execa' command is run to swap package links",,,,
,,,claim,"The 'cwd' option is set to the parent directory of the current working directory, and the 'stdio' option is set to 'inherit', which means that the standard input, output, and error will be inherited from the parent process",,,,
,,,claim,,,,,
,,,claim,"If an error occurs during this operation, the 'displayErrorMessage",,,,
,,,issue,"line 1, col 1, 'import' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 2, col 1, 'import' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 3, col 1, 'import' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 7, col 3, 'async functions' is only available in ES8 (use 'esversion: 8').",,,,
15120,9835,"@@ -7,7 +7,9 @@ module.exports = {
   },
   extends: [
     'airbnb',
-    'plugin:@typescript-eslint/recommended',
+    ""eslint:recommended"",
+    ""plugin:@typescript-eslint/eslint-recommended"",
+    ""plugin:@typescript-eslint/recommended"",
     'prettier',
     'prettier/@typescript-eslint',
     'plugin:prettier/recommended',",claim,The code change in the GIT DIFF replaces a single line of code with three new lines,,,test9835_old.js,test9835_new.js
,,,claim,"The removed line was importing the ""@typescript-eslint/recommended"" plugin from the eslint configuration",,,,
,,,claim,"The added lines are importing ""eslint:recommended"", ""plugin:@typescript-eslint/eslint-recommended"", and ""plugin:@typescript-eslint/recommended"" from the eslint configuration",,,,
,,,claim,"This suggests that the code is now using a more comprehensive set of rules from the eslint configuration, including both the core eslint recommended rules and the typescript-specific rules.",,,,
13439,5492,"@@ -0,0 +1,18 @@
+/* global dom */
+
+/**
+ * Get all descendents that are focusable from a given node
+ * @method getFocusableElements
+ * @memberof axe.commons.dom
+ * @instance
+ * @param  {Object} virtualNode The virtualNode to assess
+ * @return {Boolean}
+ */
+dom.getFocusableElements = function getFocusableElements(virtualNode) {
+	const descendents = axe.utils.querySelectorAll(virtualNode, '*');
+	const focusableElms = descendents.filter(({ actualNode: el }) => {
+		const isElFocusable = dom.isFocusable(el);
+		return isElFocusable;
+	});
+	return focusableElms;
+};",claim,"The GIT DIFF shows the addition of a new function named ""getFocusableElements"" in the ""dom"" object",,,test5492_old.js,test5492_new.js
,,,claim,"This function takes a ""virtualNode"" as an argument and returns all focusable elements from that node",,,,
,,,claim,"It uses the ""querySelectorAll"" function to get all descendents of the node and then filters out the non-focusable elements",,,,
,,,claim,The function is documented with a comment block that describes its purpose and usage.,,,,
,,,issue,"line 12, col 5, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 13, col 5, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 13, col 46, 'destructuring binding' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 13, col 65, 'arrow function syntax (=>)' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 14, col 9, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
18070,8514,"@@ -1,8 +1,10 @@
+import {CREDENTIALS} from ""../config.func"";
+
 module.exports = function(server) {
 
     test('who am I?', () => {
       return server.whoami().then(function (username) {
-        expect(username).toMatch('test');
+        expect(username).toMatch(CREDENTIALS.user);
       });
     });
 ",claim,The code changes include the import of the CREDENTIALS from the config.func file,,,test8514_old.js,test8514_new.js
,,,claim,The test case for 'who am I?' now expects the username to match the user from the CREDENTIALS object instead of the string 'test',,,,
,,,claim,This suggests that the test is now using a more dynamic and secure way to get the expected username.,,,,
,,,issue,"line 1, col 1, 'import' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 5, col 24, 'arrow function syntax (=>)' is only available in ES6 (use 'esversion: 6').",,,,
10224,1903,"@@ -214,7 +214,7 @@ describe('Components', () => {
 
 		let good, bad;
 		let root = render(<GoodContainer ref={c=>good=c} />, scratch);
-		expect(scratch.innerText, 'new component with key present').to.equal('A\nB');
+		expect(scratch.textContent, 'new component with key present').to.equal('AB');
 		expect(Comp.prototype.componentWillMount).to.have.been.calledTwice;
 		expect(sideEffect).to.have.been.calledTwice;
 ",claim,The code change in the GIT DIFF replaces an existing line of code,,,test1903_old.js,test1903_new.js
,,,claim,"The replaced line of code now uses ""scratch.textContent"" instead of ""scratch.innerText"" to check the content of the scratch",,,,
,,,claim,"This change suggests that the content of the scratch is now being checked using the text content of the scratch, rather than the inner text.",,,,
11790,5582,"@@ -0,0 +1,13 @@
+/**
+ * Returns the tagName,
+ * if it is a HTMLElement it gets lowercased
+ * @param  {Element} node element
+ * @return {String}       normalized tagName
+ */
+axe.utils.getTagName = function(node) {
+	if (node.namespaceURI === 'http://www.w3.org/1999/xhtml') {
+		return node.tagName.toLowerCase();
+	}
+
+	return node.tagName;
+};",claim,"The GIT DIFF shows the addition of a new function named ""getTagName"" in the ""axe.utils"" object",,,test5582_old.js,test5582_new.js
,,,claim,This function takes an element as a parameter and returns the tagName of the element,,,,
,,,claim,"If the element is an HTML element with the namespace URI 'http://www.w3.org/1999/xhtml', the function returns the lowercased tagName",,,,
,,,claim,"Otherwise, it returns the tagName as is",,,,
,,,claim,This function is used to normalize the tagName of an element.,,,,
15739,1189,"@@ -142,7 +142,11 @@ class EditorManager {
 
     if (editorClass) {
       this.activeEditor = getEditorInstance(editorClass, this.instance);
+      this.activeEditor.row = row; // pre-preparation needed by getEditedCell
+      this.activeEditor.col = col;
       const td = this.activeEditor.getEditedCell();
+      this.activeEditor.row = null; // restore the un-initialized state
+      this.activeEditor.col = null;
       this.activeEditor.prepare(row, col, prop, td, originalValue, cellProperties);
 
     } else {",claim,The code changes include the addition of four lines,,,test1189_old.js,test1189_new.js
,,,claim,These lines are setting the row and column properties of the active editor before and after calling the getEditedCell method,,,,
,,,claim,This suggests that the getEditedCell method requires these properties to be set before it can be called,,,,
,,,claim,The lines also restore the un-initialized state of the row and column properties of the active editor after calling the getEditedCell method.,,,,
,,,issue,"line 147, col 7, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
14227,6840,"@@ -57,8 +57,10 @@ module Selenium
     #
     # @return [Driver]
     #
-    # @see Selenium::WebDriver::Remote::Bridge
+    # @see Selenium::WebDriver::Remote::OSSBridge
+    # @see Selenium::WebDriver::Remote::W3CBridge
     # @see Selenium::WebDriver::Firefox::Bridge
+    # @see Selenium::WebDriver::Firefox::W3CBridge
     # @see Selenium::WebDriver::IE::Bridge
     # @see Selenium::WebDriver::Edge::Bridge
     # @see Selenium::WebDriver::Chrome::Bridge",claim,The code changes in the GIT DIFF show that three lines of code have been replaced,,,test6840_old.js,test6840_new.js
,,,claim,"The original line that was commented out was ""# @see Selenium::WebDriver::Remote::Bridge""",,,,
,,,claim,"The new lines of code replace this comment and suggest three different classes: ""Selenium::WebDriver::Remote::OSSBridge"", ""Selenium::WebDriver::Remote::W3CBridge"", and ""Selenium::WebDriver::Firefox::W3CBridge""",,,,
,,,claim,"This suggests that the code is now referring to these three different classes instead of the original ""Selenium::WebDriver::Remote::Bridge"".",,,,
7808,3281,"@@ -33,7 +33,7 @@ export default Controller.extend(SettingsSaveMixin, {
     }),
 
     iconImageSource: computed('model.icon', function () {
-        return this.get('model.icon') || '';
+        return this.get('model.icon') || '/favicon.ico';
     }),
 
     coverImageSource: computed('model.cover', function () {",claim,The code change in the GIT DIFF modifies the default value returned by the 'iconImageSource' computed property,,,test3281_old.js,test3281_new.js
,,,claim,"Previously, if 'model.icon' was null or undefined, an empty string would be returned",,,,
,,,claim,"Now, the default value is '/favicon.ico'",,,,
,,,claim,This suggests that the code now uses a fallback icon when 'model.icon' is not set.,,,,
14132,7043,"@@ -6,7 +6,7 @@ var attr,
 	attrName,
 	allowed,
 	role = node.getAttribute('role'),
-	attrs = node.attributes;
+	attrs = axe.utils.getNodeAttributes(node);
 
 if (!role) {
 	role = axe.commons.aria.implicitRole(node);",claim,The code change in the GIT DIFF replaces an existing line of code,,,test7043_old.js,test7043_new.js
,,,claim,"Instead of assigning the attributes of the node to the variable ""attrs"", the new line of code now uses the function ""axe.utils.getNodeAttributes(node)"" to retrieve the attributes of the node",,,,
,,,claim,This suggests that the code is now using a different method to get the node attributes.,,,,
30935,9280,"@@ -1,3 +1,4 @@
+/* eslint-disable sitekit/camelcase-acronyms */
 /**
  * Profile Select component tests.
  *",claim,The code change represented by the GIT DIFF adds a new line of code that disables the ESLint rule for camelcase acronyms,,,test9280_old.js,test9280_new.js
,,,claim,This means that the code will not enforce the rule that requires acronyms to be written in camelcase.,,,,
40481,6733,"@@ -0,0 +1,6 @@
+const jestConfig = require( './jest.config' );
+
+module.exports = {
+	...jestConfig,
+	testMatch: [ '<rootDir>/.storybook/?(*.)test.js' ],
+};",claim,The GIT DIFF shows that a new file has been added,,,test6733_old.js,test6733_new.js
,,,claim,"This file is a configuration file for Jest, a testing framework",,,,
,,,claim,The added code imports the Jest configuration from './jest.config' and then exports a new configuration object,,,,
,,,claim,The new configuration object extends the Jest configuration and replaces the 'testMatch' property with a new array that only includes files matching the pattern '<rootDir>/.storybook/?(*.)test.js',,,,
,,,claim,This suggests that the new configuration is specifically tailored for testing files in the '.storybook' directory.,,,,
,,,issue,"line 1, col 1, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 4, col 5, 'spread operator' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 4, col 8, 'object spread property' is only available in ES9 (use 'esversion: 9').",,,,
35316,2139,"@@ -43,13 +43,16 @@ import { isZeroReport } from '../../modules/search-console/util/is-zero-report';
 import sumObjectListValue from '../../util/sum-object-list-value';
 const { useSelect } = Data;
 
+// reportArgs is declared in this higher scope so that it can be used by hasData.
+let reportArgs;
+
 const AdminBarClicks = ( { className } ) => {
 	const url = useSelect( ( select ) => select( CORE_SITE ).getCurrentEntityURL() );
 	const { compareStartDate, endDate } = useSelect( ( select ) => select( CORE_USER ).getDateRangeDates( {
 		compare: true,
 		offsetDays: DATE_RANGE_OFFSET,
 	} ) );
-	const reportArgs = {
+	reportArgs = {
 		startDate: compareStartDate,
 		endDate,
 		dimensions: 'date',",claim,"The code changes involve the declaration of the variable ""reportArgs""",,,test2139_old.js,test2139_new.js
,,,claim,"Initially, it was declared as a constant, but the changes include the addition of a comment explaining that ""reportArgs"" is declared in this higher scope so that it can be used by the ""hasData"" function",,,,
,,,claim,"The variable is then re-declared as a let, which means it can be reassigned, but its value cannot be changed",,,,
,,,claim,"The assignment of the object to ""reportArgs"" remains the same.",,,,
,,,issue,"line 43, col 1, 'import' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 44, col 1, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 44, col 1, 'destructuring binding' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 47, col 1, 'let' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 49, col 1, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 49, col 24, 'destructuring binding' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 49, col 40, 'arrow function syntax (=>)' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 50, col 5, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 50, col 37, 'arrow function syntax (=>)' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 51, col 5, 'const' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 51, col 5, 'destructuring binding' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
,,,issue,"line 51, col 63, 'arrow function syntax (=>)' is only available in ES6 (use 'esversion: 6').",,,,
,,,issue,"line 57, col 9, 'object short notation' is available in ES6 (use 'esversion: 6') or Mozilla JS extensions (use moz).",,,,
10955,9691,"@@ -24,6 +24,8 @@ describe('th-has-data-cells', function () {
 			'<table>' +
 			'  <tr> <th>hi</th> <td>hello</td> </tr>' +
 			'  <tr> <th>hi</th> <td>hello</td> </tr>' +
+			'  <tr> <td>hello</td> <th>hi</th> </tr>' +
+			'  <tr> <td>hello</td> <th>hi</th> </tr>' +
 			'</table>';
 
 		var node = fixture.querySelector('table');",claim,The code change adds two new lines to the HTML string that is being created,,,test9691_old.js,test9691_new.js
,,,claim,These new lines are rows in a table with two cells,,,,
,,,claim,"The first cell contains the text ""hello"" and the second cell contains the text ""hi""",,,,
,,,claim,This change suggests that the structure of the table has been modified to allow for a different order of elements in the rows.,,,,
14581,3981,"@@ -1268,7 +1268,13 @@ var AppRouter = Backbone.Router.extend({
         }
 
         // Init sidebar based on the current url
-        self.sidebar.init();
+        if (countlyVue.sideBarComponent) {
+            var selectedMenuItem = countlyVue.sideBarComponent.$store.getters[""countlySidebar/getSelectedMenuItem""];
+            var currLink = ""#"" + Backbone.history.fragment;
+            if (selectedMenuItem.item.url !== currLink) {
+                countlyVue.sideBarComponent.$store.dispatch(""countlySidebar/updateSelectedMenuItem"", null);
+            }
+        }
     },
     sidebar: {
         init: function() {",claim,The code change in the GIT DIFF replaces the existing line of code that was initializing the sidebar,,,test3981_old.js,test3981_new.js
,,,claim,The new code now checks if the sideBarComponent exists before attempting to access it,,,,
,,,claim,"If it does exist, it retrieves the selected menu item and the current link from the sideBarComponent's store",,,,
,,,claim,It then checks if the selected menu item's URL is not equal to the current link,,,,
,,,claim,"If it's not equal, it dispatches an action to update the selected menu item to null",,,,
,,,claim,This change seems to be a safeguard against potential null errors or exceptions.,,,,
13816,9317,"@@ -13,7 +13,8 @@ module.exports = function selectPopulatedFields(query) {
     var userProvidedFields = query._userProvidedFields || {};
     if (query.selectedInclusively()) {
       for (i = 0; i < paths.length; ++i) {
-        if (!isPathInFields(userProvidedFields, paths[i])) {
+        var hasPath = query._fields[paths[i]];
+        if (!isPathInFields(userProvidedFields, paths[i]) && hasPath) {
           query.select(paths[i]);
         }
       }",claim,The code change in the GIT DIFF adds a new line to check if a path exists in the fields of the query,,,test9317_old.js,test9317_new.js
,,,claim,It does this by assigning the value of query._fields[paths[i]] to the variable hasPath,,,,
,,,claim,The condition for selecting a path has been updated to first check if the path exists in the fields and only then check if the path is in the user-provided fields,,,,
,,,claim,This change ensures that the code only selects paths that exist in the fields and have been provided by the user.,,,,
11121,1748,"@@ -11,7 +11,7 @@ if (typeof define === 'function' && define.amd) {
 	});
 }
 if (typeof module === 'object' && module.exports && typeof axeFunction.toString === 'function') {
-    axe.source = '(' + axeFunction.toString() + ')(this, this.document);';
+    axe.source = '(' + axeFunction.toString() + ')(typeof window === ""object"" ? window : this);';
     module.exports = axe;
 }
 if (typeof window.getComputedStyle === 'function') {",claim,The code change in the GIT DIFF modifies the source code of the 'axe' object,,,test1748_old.js,test1748_new.js
,,,claim,"The original line of code was setting the 'source' property of the 'axe' object to the string representation of the 'axeFunction' function, with 'this' and 'this.document' as arguments",,,,
,,,claim,The updated line of code now checks if the 'window' object is available before using it as an argument,,,,
,,,claim,"If 'window' is available, it is used as the argument; otherwise, 'this' is used",,,,
,,,claim,"This change ensures that the 'axe' object's source is correctly set, regardless of whether the 'window' object is available.",,,,
14688,5898,"@@ -368,6 +368,8 @@ class RemoteConnection(object):
                 ('POST', '/session/$sessionId/window/rect'),
             Command.GET_WINDOW_RECT:
                 ('GET', '/session/$sessionId/window/rect'),
+            Command.W3C_MINIMIZE_WINDOW:
+                ('POST', '/session/$sessionId/window/minimize'),
             Command.MAXIMIZE_WINDOW:
                 ('POST', '/session/$sessionId/window/$windowHandle/maximize'),
             Command.W3C_MAXIMIZE_WINDOW:",claim,"The code change adds a new command ""W3C_MINIMIZE_WINDOW"" to the RemoteConnection class",,,test5898_old.js,test5898_new.js
,,,claim,This command is associated with the HTTP POST method and the endpoint '/session/$sessionId/window/minimize',,,,
,,,claim,This suggests that the code now supports minimizing a window in a web application.,,,,
