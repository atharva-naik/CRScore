,id,index,diff,type,claim/issue,correctness (1/0/-1),additional claims,old_file,new_file
0,15764,7988,"@@ -204,7 +204,7 @@ class Renderer(Exporter):
             if (((len(plot) == 1 and not plot.dynamic)
                 or (len(plot) > 1 and self.holomap is None) or
                 (plot.dynamic and len(plot.keys[0]) == 0)) or
-                not unbound_dimensions(plot.streams, plot.dimensions)):
+                not unbound_dimensions(plot.streams, plot.dimensions, False)):
                 fmt = fig_formats[0] if self.fig=='auto' else self.fig
             else:
                 fmt = holomap_formats[0] if self.holomap=='auto' else self.holomap",claim,The code change in the GIT DIFF modifies a line of code in the Renderer class,,,test7988_old.py,test7988_new.py
1,,,,claim,"The function ""unbound_dimensions"" was originally called with two parameters: ""plot.streams"" and ""plot.dimensions""",,,,
2,,,,claim,The updated line of code now calls the same function with an additional parameter: False,,,,
3,,,,claim,"This suggests that the function ""unbound_dimensions"" has been updated to handle a third parameter, which is set to False in this context.",,,,
4,,,,issue,"Shotgun smell detected with 1 classes with too many external fuctions and class with most external function calls, `Renderer` having 105 external function calls",,,,
5,,,,issue,Class cohesion smell detected with 1 out of 1 classes having cohesion < 30%,,,,
6,,,,issue,Code complexity smell detected with 3 of 18 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
7,12012,16,"@@ -419,7 +419,10 @@ class S3KeyTest(unittest.TestCase):
         remote_metadata = check._get_remote_metadata()
 
         # TODO: investigate whether encoding ' ' as '%20' makes sense
-        self.assertEqual(check.cache_control, 'public,%20max-age=500')
+        self.assertIn(
+            check.cache_control,
+            ('public,%20max-age=500', 'public, max-age=500')
+        )
         self.assertEqual(remote_metadata['cache-control'], 'public,%20max-age=500')
         self.assertEqual(check.get_metadata('test-plus'), 'A plus (+)')
         self.assertEqual(check.content_disposition, 'filename=Sch%C3%B6ne%20Zeit.txt')",claim,The code change in the GIT DIFF replaces a single line of code with a multiple line of code,,,test16_old.py,test16_new.py
8,,,,claim,"The new code uses the assertIn method to check if the cache control value is either 'public,%20max-age=500' or 'public, max-age=500'",,,,
9,,,,claim,This change suggests that the code is now allowing for variations in the cache control value.,,,,
10,,,,issue,"Shotgun smell detected with 3 classes with too many external fuctions and class with most external function calls, `S3KeyTest` having 256 external function calls",,,,
11,,,,issue,Class cohesion smell detected with 1 out of 3 classes having cohesion < 30%,,,,
12,16852,8942,"@@ -39,14 +39,15 @@ MODULES_TO_CHECK = [
 MODULES_NAMES = [m[1] for m in MODULES_TO_CHECK]
 
 
-@pytest.mark.primer_stdlib
+@pytest.mark.primer
 @pytest.mark.parametrize(
     (""test_module_location"", ""test_module_name""), MODULES_TO_CHECK, ids=MODULES_NAMES
 )
-def test_lib_module_no_crash(
+def test_primer_stdlib_no_crash(
     test_module_location: str, test_module_name: str, capsys: CaptureFixture
 ) -> None:
     """"""Test that pylint does not produces any crashes or fatal errors on stdlib modules""""""
+    __tracebackhide__ = True  # pylint: disable=unused-variable
     os.chdir(test_module_location)
     with _patch_stdout(io.StringIO()):
         try:",claim,The code changes in this GIT DIFF involve renaming a test function and adding a new line to disable a traceback,,,test8942_old.py,test8942_new.py
13,,,,claim,"The test function ""test_lib_module_no_crash"" has been renamed to ""test_primer_stdlib_no_crash""",,,,
14,,,,claim,"Additionally, a new line has been added to disable the traceback for this test function",,,,
15,,,,claim,"This is done by setting the variable ""__tracebackhide__"" to True, which is typically used to hide tracebacks in Python",,,,
16,,,,claim,"However, this change might have been made to suppress the traceback of a specific test function, as indicated by the new name ""test_primer_stdlib_no_crash"".",,,,
17,16274,4904,"@@ -2,7 +2,9 @@
 # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE
 
 import functools
+import optparse  # pylint: disable=deprecated-module
 
+from pylint.lint import PyLinter
 from pylint.testutils.checker_test_case import CheckerTestCase
 
 ",claim,The code changes include the addition of two new lines,,,test4904_old.py,test4904_new.py
18,,,,claim,"The first line imports the ""optparse"" module, with a comment indicating that it is disabled for pylint due to its deprecation",,,,
19,,,,claim,"The second line imports the ""PyLinter"" class from the ""pylint.lint"" module.",,,,
20,17022,7282,"@@ -648,7 +648,7 @@ def log(package):
             str(entry.get('tags', [])), str(entry.get('versions', []))))
     _print_table(table)
 
-def push(package, is_public=False, is_team=False, reupload=False):
+def push(package, hash=None, is_public=False, is_team=False, reupload=False):
     """"""
     Push a Quilt data package to the server
     """"""",claim,"The code change in the GIT DIFF modifies the function signature of the ""push"" function",,,test7282_old.py,test7282_new.py
21,,,,claim,"The function now has a new parameter ""hash"" which is set to None by default",,,,
22,,,,claim,"This suggests that the ""hash"" parameter is now optional for the ""push"" function.",,,,
23,,,,issue,"Shotgun smell detected with 1 classes with too many external fuctions and class with most external function calls, `HTTPResponseException` having 2 external function calls",,,,
24,,,,issue,Code complexity smell detected with 3 of 78 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
25,19830,343,"@@ -944,7 +944,8 @@ class ExcelCellTextInfo(NVDAObjectTextInfo):
 
 	def _getFormatFieldAndOffsets(self,offset,formatConfig,calculateOffsets=True):
 		formatField=textInfos.FormatField()
-		if (self.obj.excelCellObject.Application.Version > ""12.0""):
+		version=int(self.obj.excelCellObject.Application.Version.split('.')[0])
+		if version>12:
 			cellObj=self.obj.excelCellObject.DisplayFormat
 		else:
 			cellObj=self.obj.excelCellObject",claim,The code change in the GIT DIFF modifies the condition in an if statement,,,test343_old.py,test343_new.py
26,,,,claim,"Previously, the condition was checking if the version of the Excel cell object application was greater than ""12.0""",,,,
27,,,,claim,The updated code first converts the version string to an integer by splitting it at the decimal point and taking the first part,,,,
28,,,,claim,It then checks if this integer version is greater than 12,,,,
29,,,,claim,This change allows for a more precise comparison of the Excel cell object application version.,,,,
30,,,,issue,Long method smell detected with 1 long methods and longest method `_getFormatFieldAndOffsets` at line 945 containing 61 lines,,,,
31,,,,issue,Long branch smell detected with 3 methods with long branching and method with most branches `_getFormatFieldAndOffsets` at line 945 having 21 branches,,,,
32,,,,issue,"Shotgun smell detected with 27 classes with too many external fuctions and class with most external function calls, `ExcelCell` having 137 external function calls",,,,
33,,,,issue,Class cohesion smell detected with 10 out of 29 classes having cohesion < 30%,,,,
34,,,,issue,Code complexity smell detected with 7 of 199 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
35,11392,1735,"@@ -176,6 +176,11 @@ def get_port_from_custom_rules(method, path, data, headers):
             # assume that this is an S3 POST request with form parameters or multipart form in the body
             return config.PORT_S3
 
+    if stripped and '/' in stripped:
+        if method == 'PUT':
+            # assume that this is an S3 PUT bucket object request with URL path `/<bucket>/object`
+            return config.PORT_S3
+
     # detect S3 requests sent from aws-cli using --no-sign-request option
     if 'aws-cli/' in headers.get('User-Agent', ''):
         return config.PORT_S3",claim,The code change adds a new conditional block that checks if the 'stripped' variable is not empty and if it contains a '/' character,,,test1735_old.py,test1735_new.py
36,,,,claim,"If these conditions are met, it further checks if the 'method' is 'PUT'",,,,
37,,,,claim,"If it is, it assumes that this is an S3 PUT bucket object request with a URL path that starts with '/<bucket>/object'",,,,
38,,,,claim,"If these conditions are met, it returns the 'PORT_S3' configuration.",,,,
39,,,,issue,"Shotgun smell detected with 1 classes with too many external fuctions and class with most external function calls, `ProxyListenerEdge` having 17 external function calls",,,,
40,,,,issue,Code complexity smell detected with 4 of 13 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
41,20031,5477,"@@ -971,7 +971,7 @@ class JobTask(BaseHadoopJobTask):
             if self.__module__ == '__main__':
                 d = pickle.dumps(self)
                 module_name = os.path.basename(sys.argv[0]).rsplit('.', 1)[0]
-                d = d.replace(b'(c__main__', ""(c"" + module_name)
+                d = d.replace(b'c__main__', b'c' + module_name.encode('ascii'))
                 open(file_name, ""wb"").write(d)
 
             else:",claim,The code change in the GIT DIFF modifies a line of code that replaces a specific string in a byte object,,,test5477_old.py,test5477_new.py
42,,,,claim,"The original line of code was replacing the string ""(c__main__"" with ""(c"" + module_name",,,,
43,,,,claim,"The updated line of code replaces the string ""c__main__"" with ""c"" + module_name.encode('ascii')",,,,
44,,,,claim,This change suggests that the module name is now being encoded in ASCII before being used in the replacement.,,,,
45,,,,issue,"Shotgun smell detected with 8 classes with too many external fuctions and class with most external function calls, `HadoopJobRunner` having 72 external function calls",,,,
46,,,,issue,Class cohesion smell detected with 2 out of 9 classes having cohesion < 30%,,,,
47,,,,issue,Code complexity smell detected with 2 of 76 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
48,10418,4669,"@@ -67,6 +67,10 @@ exclude = [""AuthalicMatrixCoefficients"",
            ""vnl_file_matrix"",
            ""vnl_file_vector"",
            ""vnl_fortran_copy"",
+           ""CosineWindowFunction"",
+           ""HammingWindowFunction"",
+           ""LanczosWindowFunction"",
+           ""WelchWindowFunction"",
            ]
 
 total = 0",claim,The code change represented by the GIT DIFF adds four new lines to the list of excluded classes,,,test4669_old.py,test4669_new.py
49,,,,claim,"The newly added classes are ""CosineWindowFunction"", ""HammingWindowFunction"", ""LanczosWindowFunction"", and ""WelchWindowFunction""",,,,
50,,,,claim,This indicates that the code is now excluding these window functions from its calculations.,,,,
51,19581,3806,"@@ -137,8 +137,14 @@ class Bars(Chart):
 
 class BoxWhisker(Chart):
     """"""
-    BoxWhisker represent data as a distributions highlighting
-    the median, mean and various percentiles.
+    BoxWhisker allows representing the distribution of data grouped
+    into one or more groups by summarizing the data using quartiles.
+    The boxes of a BoxWhisker element represent the first, second and
+    third quartiles. The whiskers follow the Tukey boxplot definition
+    representing the lowest datum still within 1.5 IQR of the lower
+    quartile, and the highest datum still within 1.5 IQR of the upper
+    quartile. Any points falling outside this range are shown as
+    distinct outlier points.
     """"""
 
     group = param.String(default='BoxWhisker', constant=True)",claim,The GIT DIFF shows that the documentation for the BoxWhisker class has been significantly expanded and updated,,,test3806_old.py,test3806_new.py
52,,,,claim,"The original description, which was simply stating that the BoxWhisker class represented data as a distribution highlighting the median, mean, and various percentiles, has been replaced with a more detailed explanation that explains how the BoxWhisker class allows representing the distribution of data grouped into one or more groups by summarizing the data using quartiles",,,,
53,,,,claim,"The boxes of a BoxWhisker element represent the first, second, and third quartiles",,,,
54,,,,claim,"The whiskers follow the Tukey boxplot definition representing the lowest datum still within 1.5 IQR of the lower quartile, and the highest datum still",,,,
55,,,,issue,"Shotgun smell detected with 12 classes with too many external fuctions and class with most external function calls, `Histogram` having 60 external function calls",,,,
56,,,,issue,Class cohesion smell detected with 2 out of 12 classes having cohesion < 30%,,,,
57,,,,issue,Code complexity smell detected with 1 of 23 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
58,19579,966,"@@ -118,6 +118,9 @@ class ExternalProgramTask(luigi.Task):
         file_object.seek(0)
         return ''.join(map(lambda s: s.decode('utf-8'), file_object.readlines()))
 
+    def build_tracking_url(self, logs_output):
+        return logs_output
+
     def run(self):
         args = list(map(str, self.program_args()))
 ",claim,"The code change adds a new method called ""build_tracking_url"" to the ""ExternalProgramTask"" class",,,test966_old.py,test966_new.py
59,,,,claim,"This method takes a parameter ""logs_output"" and returns it",,,,
60,,,,claim,This suggests that the method is used to build a tracking URL based on the output of the logs.,,,,
61,,,,issue,"Shotgun smell detected with 4 classes with too many external fuctions and class with most external function calls, `ExternalProgramTask` having 43 external function calls",,,,
62,,,,issue,Class cohesion smell detected with 1 out of 4 classes having cohesion < 30%,,,,
63,,,,issue,Code complexity smell detected with 1 of 19 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
64,15962,3830,"@@ -118,7 +118,8 @@ class NdIndexableMappingTest(ComparisonTestCase):
         data = [((0, 0.5), 'a'), ((1, 0.5), 'b')]
         ndmap = MultiDimensionalMapping(data, kdims=[self.dim1, self.dim2])
         redimmed = ndmap.redim(intdim='Integer')
-        self.assertEqual(redimmed.kdims, [Dimension('Integer'), Dimension('floatdim')])
+        self.assertEqual(redimmed.kdims, [Dimension('Integer', type=int),
+                                          Dimension('floatdim', type=float)])
 
     def test_idxmapping_add_dimension(self):
         ndmap = MultiDimensionalMapping(self.init_items_1D_list, kdims=[self.dim1])",claim,The code change in the GIT DIFF modifies an assertion in a test case,,,test3830_old.py,test3830_new.py
65,,,,claim,"The original assertion was checking if the 'kdims' attribute of the 'redimmed' object was equal to a list containing two Dimension objects, with the names 'Integer' and 'floatdim'",,,,
66,,,,claim,"The updated assertion now includes type information for these dimensions, specifically indicating that 'Integer' should be of type 'int' and 'floatdim' should be of type 'float'.",,,,
67,,,,issue,"Shotgun smell detected with 3 classes with too many external fuctions and class with most external function calls, `NdIndexableMappingTest` having 61 external function calls",,,,
68,,,,issue,Class cohesion smell detected with 1 out of 3 classes having cohesion < 30%,,,,
69,12377,8481,"@@ -9,6 +9,7 @@
 # Copyright (c) 2019-2020 Pierre Sassoulas <pierre.sassoulas@gmail.com>
 # Copyright (c) 2019 Ashley Whetter <ashley@awhetter.co.uk>
 # Copyright (c) 2019 Taewon D. Kim <kimt33@mcmaster.ca>
+# Copyright (c) 2020 Eli Fine <ejfine@gmail.com>
 
 # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 # For details: https://github.com/PyCQA/pylint/blob/master/COPYING",claim,The code change represented by the GIT DIFF adds a new line of code to the top of the file,,,test8481_old.py,test8481_new.py
70,,,,claim,"This new line of code adds a copyright notice for Eli Fine, who is the current author of the file.",,,,
71,14205,1250,"@@ -95,6 +95,8 @@ class visibility_of(object):
 
 
 def _element_if_visible(element, visibility=True):
+    if isinstance(element, str) or isinstance(element, dict):
+           raise StaleElementReferenceException(""Invalid locator"")
     return element if element.is_displayed() == visibility else False
 
 ",claim,"The code change adds a new conditional statement to the function ""_element_if_visible""",,,test1250_old.py,test1250_new.py
72,,,,claim,"This statement checks if the ""element"" is an instance of either a string or a dictionary",,,,
73,,,,claim,"If it is, it raises a ""StaleElementReferenceException"" with the message ""Invalid locator""",,,,
74,,,,claim,"This indicates that the function now validates the ""element"" before proceeding with the rest of the operations.",,,,
75,,,,issue,"Shotgun smell detected with 17 classes with too many external fuctions and class with most external function calls, `frame_to_be_available_and_switch_to_it` having 4 external function calls",,,,
76,33710,1351,"@@ -65,7 +65,6 @@ PER_YIELD = 1024
 
 def generate_model_handle():
     """"""Generate random model handle.
-
     Returns:
         str: random bytes for handle
     """"""",claim,The code change represented by the GIT DIFF removes an unnecessary line break from the code,,,test1351_old.py,test1351_new.py
77,,,,claim,This is a minor change and does not affect the functionality of the code.,,,,
78,,,,issue,"Shotgun smell detected with 2 classes with too many external fuctions and class with most external function calls, `ModelManager` having 67 external function calls",,,,
79,,,,issue,Class cohesion smell detected with 4 out of 9 classes having cohesion < 30%,,,,
80,15649,7232,"@@ -1045,6 +1045,10 @@ def access_put(owner, package_name, user):
             ""Only the package owner can grant access""
         )
 
+    django_headers = {
+        AUTHORIZATION_HEADER: g.auth_header
+        }
+
     package = (
         Package.query
         .with_for_update()",claim,"The code change adds a new dictionary named ""django_headers"" with a single key-value pair",,,test7232_old.py,test7232_new.py
81,,,,claim,"The key is ""AUTHORIZATION_HEADER"" and the value is ""g.auth_header""",,,,
82,,,,claim,This suggests that the code is now setting a header in the Django HTTP request.,,,,
83,,,,issue,"Shotgun smell detected with 2 classes with too many external fuctions and class with most external function calls, `ApiException` having 2 external function calls",,,,
84,,,,issue,Code complexity smell detected with 4 of 55 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
85,16117,1154,"@@ -35,9 +35,11 @@ class ScalarSpaceEncoderTest(unittest.TestCase):
   def testScalarSpaceEncoder(self):
     """"""scalar space encoder""""""
     # use of forced=True is not recommended, but used in the example for readibility, see scalar.py
-    sse = ScalarSpaceEncoder(1,1,2,False,2,1,1,None,0,False,""delta"", forced=True)
+    sse = ScalarSpaceEncoder(w=21,minval=1,maxval=2,n=100,radius=1,
+            resolution=1,name=""SP1"",verbosity=0,clipInput=False,space=""delta"")
     self.assertTrue(sse.isDelta())
-    sse = ScalarSpaceEncoder(1,1,2,False,2,1,1,None,0,False,""absolute"", forced=True)
+    sse = ScalarSpaceEncoder(w=21,minval=1,maxval=2,n=100,radius=1,
+            resolution=1,name=""sp2"",verbosity=0,clipInput=False,space=""absolute"")
     self.assertFalse(sse.isDelta())
 
      ",claim,The code changes in the GIT DIFF replace two lines of code with new lines of code,,,test1154_old.py,test1154_new.py
86,,,,claim,The new lines of code use a more readable and understandable format for creating a ScalarSpaceEncoder object,,,,
87,,,,claim,"The parameters for the ScalarSpaceEncoder object are now specified as named arguments, rather than positional arguments",,,,
88,,,,claim,"The ""delta"" and ""absolute"" spaces are now specified as strings, rather than boolean values",,,,
89,,,,claim,"The ""forced"" parameter is now set to True for both ""delta"" and ""absolute"" spaces.",,,,
90,,,,issue,"Shotgun smell detected with 1 classes with too many external fuctions and class with most external function calls, `ScalarSpaceEncoderTest` having 7 external function calls",,,,
91,17642,8017,"@@ -152,6 +152,14 @@ class StartButton(IAccessible):
 		states = super(StartButton, self).states
 		states.discard(controlTypes.STATE_SELECTED)
 		return states
+		
+class UIProperty(UIA):
+	#Used for columns in Windows Explorer Details view.
+	#These can contain dates that include unwanted left-to-right and right-to-left indicator characters.
+	
+	def _get_value(self):
+		value = super(UIProperty, self).value
+		return value.replace(u'\u200E','').replace(u'\u200F','')
 
 
 class AppModule(appModuleHandler.AppModule):",claim,"The GIT DIFF shows that a new class named ""UIProperty"" has been added to the code",,,test8017_old.py,test8017_new.py
92,,,,claim,"This class is a subclass of ""UIA""",,,,
93,,,,claim,The class is used for columns in Windows Explorer Details view,,,,
94,,,,claim,"The class contains a method named ""_get_value"" which returns the value of the superclass after removing any unwanted left-to-right and right-to-left indicator characters.",,,,
95,,,,issue,"Shotgun smell detected with 10 classes with too many external fuctions and class with most external function calls, `AppModule` having 22 external function calls",,,,
96,,,,issue,Code complexity smell detected with 3 of 26 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
97,19343,2020,"@@ -64,9 +64,7 @@ def implements(
     obj: ""BaseChecker"",
     interface: Union[Type[""Interface""], Tuple[Type[""Interface""], ...]],
 ) -> bool:
-    """"""Return whether the given object (maybe an instance or class) implements
-    the interface.
-    """"""
+    """"""Does the given object (maybe an instance or class) implements the interface.""""""
     kimplements = getattr(obj, ""__implements__"", ())
     if not isinstance(kimplements, (list, tuple)):
         kimplements = (kimplements,)",claim,The code change represented by the GIT DIFF is a simple comment modification,,,test2020_old.py,test2020_new.py
98,,,,claim,The original comment was explaining the function of the code and was stating that it returns a boolean value indicating whether an object implements a given interface,,,,
99,,,,claim,The updated comment is more concise and does not specify the return value of the function.,,,,
100,,,,issue,"Shotgun smell detected with 1 classes with too many external fuctions and class with most external function calls, `N/A` having N/A external function calls",,,,
101,19072,2051,"@@ -47,6 +47,10 @@ public interface CapabilityType {
   String HAS_TOUCHSCREEN = ""hasTouchScreen"";
   String OVERLAPPING_CHECK_DISABLED = ""overlappingCheckDisabled"";
   String STRICT_FILE_INTERACTABILITY = ""strictFileInteractability"";
+  String TIMEOUTS = ""timeouts"";
+  String IMPLICIT_TIMEOUT = ""implicit"";
+  String PAGE_LOAD_TIMEOUT = ""pageLoad"";
+  String SCRIPT_TIMEOUT = ""script"";
 
   String LOGGING_PREFS = ""loggingPrefs"";
 ",claim,"The code changes added four new lines of code, each defining a new constant of type String",,,test2051_old.py,test2051_new.py
102,,,,claim,"These constants are related to timeouts, specifically the implicit, page load, and script timeouts",,,,
103,,,,claim,This suggests that the code now has the ability to handle timeouts in different contexts.,,,,
104,15498,9892,"@@ -826,6 +826,12 @@ def install(package, hash=None, version=None, tag=None, force=False):
     store = PackageStore()
     existing_pkg = store.get_package(owner, pkg)
 
+    if existing_pkg is not None and not force:
+        print(""{owner}/{pkg} already installed."".format(owner=owner, pkg=pkg))
+        overwrite = input(""Overwrite? (y/n) "")
+        if overwrite.lower() != 'y':
+            return
+
     if version is not None:
         response = session.get(
             ""{url}/api/version/{owner}/{pkg}/{version}"".format(",claim,The code change adds a new conditional block that checks if a package already exists and if the force flag is not set,,,test9892_old.py,test9892_new.py
105,,,,claim,"If the package exists and the force flag is not set, it prints a message asking if the user wants to overwrite the existing package and waits for the user's input",,,,
106,,,,claim,"If the user does not want to overwrite, it returns without performing any action",,,,
107,,,,claim,This change prevents the installation of a package if it already exists and the force flag is not set.,,,,
108,,,,issue,Code complexity smell detected with 2 of 52 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
109,13299,7037,"@@ -14,7 +14,9 @@
 # You should have received a copy of the GNU General Public License
 # along with Scapy. If not, see <http://www.gnu.org/licenses/>.
 
-# scapy.contrib.description = GENEVE
+# flake8: noqa: E501
+
+# scapy.contrib.description = Generic Network Virtualization Encapsulation (GENEVE)
 # scapy.contrib.status = loads
 
 """"""",claim,The code changes in this GIT DIFF involve both comment modifications and code formatting,,,test7037_old.py,test7037_new.py
110,,,,claim,"The line ""# scapy.contrib.description = GENEVE"" has been removed and replaced with two new lines",,,,
111,,,,claim,"The first new line is a flake8 comment ""flake8: noqa: E501"" to suppress a line length check",,,,
112,,,,claim,"The second new line is a longer description of the GENEVE contribution to Scapy, ""scapy.contrib.description = Generic Network Virtualization Encapsulation (GENEVE)""",,,,
113,,,,claim,This change likely reflects a desire to improve the readability and maintainability of the code by breaking up the long description into multiple lines.,,,,
114,,,,issue,"Shotgun smell detected with 2 classes with too many external fuctions and class with most external function calls, `GENEVE` having 15 external function calls",,,,
115,,,,issue,Class cohesion smell detected with 1 out of 2 classes having cohesion < 30%,,,,
116,20687,8238,"@@ -28,7 +28,11 @@ from nupic.support.lockattributes import LockAttributesMixin
 import functools
 
 basicTypes = ['Byte', 'Int16', 'UInt16', 'Int32', 'UInt32', 'Int64', 'UInt64',
-              'Real32', 'Real64', 'Handle']
+              'Real32', 'Real64', 'Handle', 'Bool']
+
+arrayTypes = ['ByteArray', 'Int16Array', 'UInt16Array', 'Int32Array',
+              'UInt32Array', 'Int64Array', 'UInt64Array', 'Real32Array',
+              'Real64Array', 'BoolArray']
 
 pyRegions = (
     (""nupic.regions.AnomalyRegion"", ""AnomalyRegion""),",claim,The code changes include the addition of 'Bool' to the 'basicTypes' list,,,test8238_old.py,test8238_new.py
117,,,,claim,"Additionally, a new list 'arrayTypes' has been created to include all the array types",,,,
118,,,,claim,The 'Bool' type has been added to this new list as well,,,,
119,,,,claim,This suggests that the code now supports boolean values and arrays of these types.,,,,
120,22288,2584,"@@ -23,7 +23,11 @@ class SSDHead(AnchorHead):
         anchor_generator (dict): Config dict for anchor generator
         bbox_coder (dict): Config of bounding box coder.
         reg_decoded_bbox (bool): If true, the regression loss would be
-            applied on decoded bounding boxes. Default: False
+            applied directly on decoded bounding boxes, meaning both the
+            predicted boxes and regression targets are with absolute
+            coordinates format. Default False. Note generally it should be
+            set to `True` when using `IoULoss`, `GIoULoss`, or `DIoULoss`
+            in the bbox head.
         train_cfg (dict): Training config of anchor head.
         test_cfg (dict): Testing config of anchor head.
     """"""  # noqa: W605",claim,"The GIT DIFF shows that the comment for the ""reg_decoded_bbox"" parameter in the SSDHead class has been significantly expanded",,,test2584_old.py,test2584_new.py
121,,,,claim,The original comment stated that the regression loss would be applied on decoded bounding boxes by default,,,,
122,,,,claim,"The new comment expands on this by stating that the regression loss is applied directly on decoded bounding boxes, meaning both the predicted boxes and regression targets are in absolute coordinates format",,,,
123,,,,claim,"The comment also adds a note that the parameter should generally be set to `True` when using `IoULoss`, `GIoULoss`, or `DIoULoss` in the bbox head.",,,,
124,,,,issue,"Shotgun smell detected with 1 classes with too many external fuctions and class with most external function calls, `SSDHead` having 71 external function calls",,,,
125,,,,issue,Class cohesion smell detected with 1 out of 1 classes having cohesion < 30%,,,,
126,9166,4155,"@@ -145,4 +145,7 @@ class AuthorizationPolicy(core_authorization.AuthorizationPolicy):
 
 
 class RouteFactory(core_authorization.RouteFactory):
-    pass
+    def __init__(self, request):
+        super(RouteFactory, self).__init__(request)
+        if self.on_collection and self.resource_name == 'bucket':
+            self.force_empty_list = True",claim,"The code change in the GIT DIFF replaces the ""pass"" statement with a new method definition",,,test4155_old.py,test4155_new.py
127,,,,claim,"The new method, ""__init__"", takes a ""request"" parameter and calls the superclass constructor",,,,
128,,,,claim,It then checks if the current instance is on a collection and if the resource name is 'bucket',,,,
129,,,,claim,"If both conditions are met, it sets the ""force_empty_list"" attribute to True",,,,
130,,,,claim,This suggests that the code is now handling a specific case where an empty list should be forced when on a 'bucket' resource.,,,,
131,,,,issue,"Shotgun smell detected with 2 classes with too many external fuctions and class with most external function calls, `AuthorizationPolicy` having 2 external function calls",,,,
132,14392,7925,"@@ -0,0 +1,7 @@
+from dagster import execute_pipeline
+from docs_snippets.guides.dagster.reexecution.pipeline.unreliable_pipeline import unreliable_pipeline
+
+
+def test_pipeline_compiles_and_executes():
+    result = execute_pipeline(unreliable_pipeline)
+    assert result",claim,The GIT DIFF shows that a new Python file has been added,,,test7925_old.py,test7925_new.py
133,,,,claim,"This file imports the ""execute_pipeline"" function from the ""dagster"" module and the ""unreliable_pipeline"" from the ""docs_snippets.guides.dagster.reexecution.pipeline"" module",,,,
134,,,,claim,,,,,
135,,,,claim,"A new function ""test_pipeline_compiles_and_executes"" has been added",,,,
136,,,,claim,"This function executes the ""unreliable_pipeline"" and asserts that the result is not None",,,,
137,,,,claim,This test function is likely used to verify that the pipeline compiles and executes successfully.,,,,
138,20149,9084,"@@ -25,9 +25,13 @@ class BasicBlock(nn.Module):
                  conv_cfg=None,
                  norm_cfg=dict(type='BN'),
                  dcn=None,
+                 rfp_inplanes=None,
+                 sac=None,
                  plugins=None):
         super(BasicBlock, self).__init__()
         assert dcn is None, 'Not implemented yet.'
+        assert rfp_inplanes is None, 'Not implemented yet.'
+        assert sac is None, 'Not implemented yet.'
         assert plugins is None, 'Not implemented yet.'
 
         self.norm1_name, norm1 = build_norm_layer(norm_cfg, planes, postfix=1)",claim,"The code changes include the addition of two new parameters, ""rfp_inplanes"" and ""sac"", to the BasicBlock class constructor",,,test9084_old.py,test9084_new.py
139,,,,claim,These parameters are both set to None by default,,,,
140,,,,claim,"Two new assertions have been added to the constructor to check if ""rfp_inplanes"" and ""sac"" are None",,,,
141,,,,claim,"If they are not, it raises a 'Not implemented yet.' error",,,,
142,,,,claim,"This suggests that these new parameters are intended to be used in the future, but are not currently implemented.",,,,
143,,,,issue,"Shotgun smell detected with 4 classes with too many external fuctions and class with most external function calls, `ResNet` having 73 external function calls",,,,
144,,,,issue,Class cohesion smell detected with 2 out of 4 classes having cohesion < 30%,,,,
145,,,,issue,Code complexity smell detected with 2 of 27 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
146,14259,6302,"@@ -916,7 +916,7 @@ class LayoutPlot(GenericLayoutPlot, CompositePlot):
 
         # Create title handle
         if self.show_title and len(self.coords) > 1:
-            title = self.handles['fig'].suptitle('', **self._fontsize('title'))
+            title = self.handles['fig'].suptitle('', y=1.05, **self._fontsize('title'))
             self.handles['title'] = title
 
         return layout_subplots, layout_axes, collapsed_layout",claim,The code change in the GIT DIFF modifies the creation of a title handle in the LayoutPlot class,,,test6302_old.py,test6302_new.py
147,,,,claim,The original line of code created a title handle with a default y position of 0,,,,
148,,,,claim,"The updated line of code now specifies a y position of 1.05, which is slightly higher than the default",,,,
149,,,,claim,This change likely adjusts the position of the title relative to the figure.,,,,
150,,,,issue,"Shotgun smell detected with 6 classes with too many external fuctions and class with most external function calls, `GridPlot` having 113 external function calls",,,,
151,,,,issue,Class cohesion smell detected with 3 out of 6 classes having cohesion < 30%,,,,
152,,,,issue,Code complexity smell detected with 6 of 34 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
153,8215,3286,"@@ -20,8 +20,11 @@ Wrappers around spark that correspond to common pandas functions.
 import pyspark
 import numpy as np
 import pandas as pd
+from ._dask_stubs.compatibility import string_types
+from ._dask_stubs.utils import derived_from
 from .typing import Col, pandas_wrap
-from pyspark.sql import Column, DataFrame
+from pyspark.sql import Column, DataFrame, functions as F
+from pyspark.sql.types import NumericType
 
 
 def default_session():",claim,The code changes in the GIT DIFF show that several new import statements have been added to the code,,,test3286_old.py,test3286_new.py
154,,,,claim,"These new imports include ""string_types"" from the ""_dask_stubs.compatibility"" module, ""derived_from"" from the ""_dask_stubs.utils"" module, ""Column"", ""DataFrame"", and ""functions"" from the ""pyspark.sql"" module, and ""NumericType"" from the ""pyspark.sql.types"" module",,,,
155,,,,claim,"This suggests that the code is now using some additional functionality or data types provided by the ""_dask_stubs"" and ""pyspark.sql.types"" modules.",,,,
156,14870,8100,"@@ -39,5 +39,5 @@ class InputDevice(object):
     def clear_actions(self):
         self.actions = []
 
-    def create_pause(self, duraton=0):
+    def create_pause(self, duration=0):
         pass",claim,The code change in the GIT DIFF is a minor correction of a spelling error in the method name,,,test8100_old.py,test8100_new.py
157,,,,claim,"The method ""create_pause"" was originally spelled with a misspelled ""duraton"" parameter",,,,
158,,,,claim,"The corrected code now uses the correct parameter name ""duration""",,,,
159,,,,claim,This is a minor change and does not affect the functionality of the code.,,,,
160,,,,issue,"Shotgun smell detected with 1 classes with too many external fuctions and class with most external function calls, `InputDevice` having 2 external function calls",,,,
161,28270,3134,"@@ -228,6 +228,7 @@ setup(
 		(""libArm64/%s""%version, glob(""libArm64/*.dll"") + glob(""libArm64/*.exe"")),
 		(""waves"", glob(""waves/*.wav"")),
 		(""images"", glob(""images/*.ico"")),
+		(""fonts"", glob(""fonts/*.ttf"")),
 		(""louis/tables"",glob(""louis/tables/*"")),
 		(""COMRegistrationFixes"", glob(""COMRegistrationFixes/*.reg"")),
 		(""."", glob(""../miscDeps/python/*.dll"")),",claim,The code change adds a new line to the setup function,,,test3134_old.py,test3134_new.py
162,,,,claim,This new line is adding a new tuple to the list of files to be included in the distribution,,,,
163,,,,claim,"The tuple contains the string ""fonts"" and a list of all .ttf files in the ""fonts"" directory",,,,
164,,,,claim,This suggests that the code is now including font files in the distribution.,,,,
165,,,,issue,"Shotgun smell detected with 1 classes with too many external fuctions and class with most external function calls, `py2exe` having 9 external function calls",,,,
166,34139,4705,"@@ -1,11 +1,9 @@
-# -*- coding: UTF-8 -*-
-#shlobj.py
-#A part of NonVisual Desktop Access (NVDA)
-#Copyright (C) 2006-2017 NV Access Limited, Babbage B.V.
-#This file is covered by the GNU General Public License.
-#See the file COPYING for more details.
+# A part of NonVisual Desktop Access (NVDA)
+# Copyright (C) 2009-2021 NV Access Limited, Babbage B.V.
+# This file is covered by the GNU General Public License.
+# See the file COPYING for more details.
 
-""""""
+r""""""
 This module wraps the SHGetFolderPath function in shell32.dll and defines the necessary contstants.
 CSIDL (constant special item ID list) values provide a unique system-independent way to
 identify special folders used frequently by applications, but which may not have the same name",claim,The GIT DIFF shows that the comments at the beginning of the file have been reformatted and simplified,,,test4705_old.py,test4705_new.py
167,,,,claim,"The coding line and the file name have been removed, and the copyright year has been updated to 2009-2021",,,,
168,,,,claim,"The file is still part of NonVisual Desktop Access (NVDA), and is covered by the GNU General Public License",,,,
169,,,,claim,"The file content is a reStructuredText (rST) comment, which is used to document the code.",,,,
170,25033,6022,"@@ -151,7 +151,7 @@ class TabWidget(QTabWidget):
 
         fields = self.get_tab_fields(idx)
         fields['current_title'] = fields['current_title'].replace('&', '&&')
-        fields['index'] = idx + 1
+        fields['index'] = str(idx + 1).rjust(2)
 
         title = '' if fmt is None else fmt.format(**fields)
         tabbar = self.tabBar()",claim,The code change in the GIT DIFF modifies how the 'index' field in the 'fields' dictionary is updated,,,test6022_old.py,test6022_new.py
171,,,,claim,"Previously, the 'index' was updated by adding 1 to the current index 'idx'",,,,
172,,,,claim,"Now, the 'index' is updated by converting the current index 'idx' to a string, right-justifying it to a width of 2, and then assigning this string to the 'index' field in the 'fields' dictionary",,,,
173,,,,claim,"This change ensures that the 'index' field always has a width of 2, regardless of the current index 'idx'.",,,,
174,,,,issue,"Shotgun smell detected with 4 classes with too many external fuctions and class with most external function calls, `TabBar` having 124 external function calls",,,,
175,,,,issue,Class cohesion smell detected with 2 out of 4 classes having cohesion < 30%,,,,
176,,,,issue,Code complexity smell detected with 1 of 57 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
177,9979,10095,"@@ -2,7 +2,8 @@ import random
 import string
 
 from kinto.core.storage import generators, exceptions
-from pyramid import httpexceptions
+from pyramid.httpexceptions import (HTTPNotFound)
+from kinto.core.errors import http_error, ERRORS
 
 
 class NameGenerator(generators.Generator):",claim,"The code change in the GIT DIFF shows that the import statement for the ""httpexceptions"" module from the ""pyramid"" package has been replaced with two new import statements",,,test10095_old.py,test10095_new.py
178,,,,claim,"The first new import statement is for the ""HTTPNotFound"" class from the ""pyramid.httpexceptions"" module",,,,
179,,,,claim,"The second new import statement is for the ""http_error"" and ""ERRORS"" classes from the ""kinto.core.errors"" module",,,,
180,,,,claim,"This suggests that the code now uses the ""HTTPNotFound"" exception class and the ""http_error"" and ""ERRORS"" classes from the ""kinto.core.errors"" module, which were not previously imported.",,,,
181,,,,issue,"Shotgun smell detected with 1 classes with too many external fuctions and class with most external function calls, `NameGenerator` having 4 external function calls",,,,
182,11404,9765,"@@ -632,7 +632,7 @@ class InstanceAttribute(dict):
                    'disableApiTermination',
                    'instanceInitiatedShutdownBehavior',
                    'rootDeviceName', 'blockDeviceMapping', 'sourceDestCheck',
-                   'groupSet']
+                   'groupSet', 'productCodes', 'ebsOptimized',]
 
     def __init__(self, parent=None):
         dict.__init__(self)",claim,The code change in the GIT DIFF adds two new items to the list of attributes: 'productCodes' and 'ebsOptimized',,,test9765_old.py,test9765_new.py
183,,,,claim,"The 'groupSet' attribute was also included in the list, but it remained unchanged",,,,
184,,,,claim,"This suggests that the code now includes additional functionality to handle 'productCodes' and 'ebsOptimized', while keeping the 'groupSet' functionality unchanged.",,,,
185,,,,issue,"Shotgun smell detected with 6 classes with too many external fuctions and class with most external function calls, `Instance` having 34 external function calls",,,,
186,,,,issue,Class cohesion smell detected with 1 out of 7 classes having cohesion < 30%,,,,
187,,,,issue,Code complexity smell detected with 2 of 55 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
188,10657,5611,"@@ -0,0 +1,7 @@
+import json
+
+
+def lambda_handler(event, context):
+    # Just print the event was passed to lambda
+    print('{}'.format(json.dumps(event)))
+    return 0",claim,The GIT DIFF shows that a new Python file has been added,,,test5611_old.py,test5611_new.py
189,,,,claim,"This file imports the json module and defines a lambda function named ""lambda_handler""",,,,
190,,,,claim,"The function takes two parameters, ""event"" and ""context"", and prints the event in JSON format",,,,
191,,,,claim,The function then returns 0,,,,
192,,,,claim,This suggests that the lambda function is used to handle and process events in a JSON format.,,,,
193,16890,6525,"@@ -5017,7 +5017,7 @@ def print_record(recID, format='hb', ot='', ln=CFG_SITE_LANG, decompress=zlib.de
         display_claim_this_paper = False
 
     can_edit_record = False
-    if check_user_can_edit_record(user_info, recID):
+    if  not (format.lower().startswith('t')) and check_user_can_edit_record(user_info, recID):
         can_edit_record = True
 
     out = """"",claim,The code change in the GIT DIFF modifies an existing conditional statement,,,test6525_old.py,test6525_new.py
194,,,,claim,The updated condition now checks if the format does not start with 't' and if the user can edit the record,,,,
195,,,,claim,This means that the code will now only check if the user can edit the record if the format is not 't' or 'T'.,,,,
196,16268,7764,"@@ -212,9 +212,10 @@ def config():
     global _registry_url
     _registry_url = None
 
-def _update_auth(team, refresh_token):
+def _update_auth(team, refresh_token, timeout=None):
     response = requests.post(""%s/api/token"" % get_registry_url(team), data=dict(
-        refresh_token=refresh_token
+        refresh_token=refresh_token,
+        timeout=timeout
     ))
 
     if response.status_code != requests.codes.ok:",claim,"The code change in the GIT DIFF modifies the function signature of the ""_update_auth"" function by adding a new parameter ""timeout"" with a default value of None",,,test7764_old.py,test7764_new.py
197,,,,claim,This new parameter is then used in the POST request to the token endpoint,,,,
198,,,,claim,"This change allows for the function to be called with or without a timeout value, providing more flexibility in the function's behavior.",,,,
199,,,,issue,"Shotgun smell detected with 1 classes with too many external fuctions and class with most external function calls, `HTTPResponseException` having 2 external function calls",,,,
200,,,,issue,Code complexity smell detected with 2 of 73 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
201,22116,6691,"@@ -4,6 +4,7 @@ from mmcv.cnn import ConvModule, kaiming_init
 from mmcv.runner import auto_fp16, force_fp32
 
 from mmdet.models.builder import HEADS
+from mmdet.models.utils import ResLayer, SimplifiedBasicBlock
 
 
 @HEADS.register_module()",claim,The code change represented by the GIT DIFF adds two new lines of code,,,test6691_old.py,test6691_new.py
202,,,,claim,These lines import the ResLayer and SimplifiedBasicBlock classes from the mmdet.models.utils module,,,,
203,,,,claim,This suggests that these classes will be used later in the code.,,,,
204,,,,issue,"Many attribute smell detected with 1 classes having many attributes and the class with most attributes, `` having 16 attributes",,,,
205,,,,issue,"Shotgun smell detected with 1 classes with too many external fuctions and class with most external function calls, `FusedSemanticHead` having 30 external function calls",,,,
206,19957,1887,"@@ -121,8 +121,10 @@ def buffer_s3response(s3response):
             found_records = True
         elif 'Progress' in event:
             logger_.info(""select progress: %s"", event['Progress'].get('Details'))
+            print(event['Progress'].get('Details'))
         elif 'Stats' in event:
             logger_.info(""select stats: %s"", event['Stats'])
+            print(event['Stats'])
         elif 'End' in event:
             # End event indicates that the request finished successfully
             end_event_received = True",claim,The code changes added two new lines that print the 'Details' from the 'Progress' event and the 'Stats' from the event,,,test1887_old.py,test1887_new.py
207,,,,claim,This suggests that the code is now logging or printing these additional details for the 'Progress' and 'Stats' events.,,,,
208,13697,3924,"@@ -77,6 +77,7 @@ class BlazeMeterUploader(Reporter, AggregatorListener):
         self.client.user_id = self.parameters.get(""user-id"", None)
         self.client.data_signature = self.parameters.get(""signature"", None)
         self.client.kpi_target = self.parameters.get(""kpi-target"", self.client.kpi_target)
+        self.client.delete_files_before_test = False
 
         if not self.client.test_id:
             try:",claim,"The code change adds a new line that sets the ""delete_files_before_test"" property of the ""client"" object to False",,,test3924_old.py,test3924_new.py
209,,,,claim,This suggests that the code is now configured to not delete files before the test.,,,,
210,,,,issue,"Shotgun smell detected with 8 classes with too many external fuctions and class with most external function calls, `BlazeMeterClient` having 103 external function calls",,,,
211,,,,issue,Class cohesion smell detected with 2 out of 8 classes having cohesion < 30%,,,,
212,,,,issue,Code complexity smell detected with 5 of 75 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
213,15156,3549,"@@ -19,6 +19,7 @@
 # 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
 
 """""" Comments and reviews for records: web interface """"""
+from docutils.nodes import note
 
 __lastupdated__ = """"""$Date$""""""
 ",claim,"The code change represented by the GIT DIFF adds a new line of code to import the ""note"" module from the ""docutils.nodes"" package",,,test3549_old.py,test3549_new.py
214,,,,claim,"This suggests that the subsequent code may use the ""note"" module for some operations.",,,,
215,12032,1089,"@@ -17,10 +17,10 @@ from scapy.config import conf
 from scapy.base_classes import BasePacket,BasePacketList
 from scapy.utils import do_graph,hexdump,make_table,make_lined_table,make_tex_table,get_temp_file
 
-from scapy.consts import plt, MATPLOTLIB_INLINED, MATPLOTLIB_DEFAULT_PLOT_KARGS
+from scapy.extlib import plt, MATPLOTLIB_INLINED, MATPLOTLIB_DEFAULT_PLOT_KARGS
 from functools import reduce
 import scapy.modules.six as six
-from scapy.modules.six.moves import filter, range, zip
+from scapy.modules.six.moves import range, zip
 
 
 #############",claim,The code changes in the GIT DIFF show that the import statements have been modified,,,test1089_old.py,test1089_new.py
216,,,,claim,"The ""plt"" and ""MATPLOTLIB_INLINED"" and ""MATPLOTLIB_DEFAULT_PLOT_KARGS"" from the ""scapy.consts"" module have been moved to the ""scapy.extlib"" module",,,,
217,,,,claim,"The ""filter"", ""range"", and ""zip"" functions from the ""scapy.modules.six.moves"" module have been moved to the same module but not the ""plt"" and ""MATPLOTLIB_INLINED"" and ""MATPLOTLIB_DEFAULT_PLOT_KARGS"" from the ""scapy",,,,
218,,,,issue,"Shotgun smell detected with 2 classes with too many external fuctions and class with most external function calls, `PacketList` having 161 external function calls",,,,
219,,,,issue,Class cohesion smell detected with 1 out of 2 classes having cohesion < 30%,,,,
220,,,,issue,Code complexity smell detected with 2 of 43 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
221,31650,5176,"@@ -52,7 +52,8 @@ class IamPolicyTest(ForsetiTestCase):
             'serviceAccount:abc@def.gserviceaccount.com',
             'user:someone@somewhere.tld',
             'allUsers',
-            'user:anything'
+            'user:anything',
+            'allAuthenticatedUsers'
         ]
 
     # Test IamPolicyMember",claim,The code change in the GIT DIFF adds a new line to the list of members,,,test5176_old.py,test5176_new.py
222,,,,claim,The new member is 'allAuthenticatedUsers',,,,
223,,,,claim,This suggests that the code now includes an additional condition to check for 'allAuthenticatedUsers' in addition to the existing 'user:anything' condition.,,,,
224,,,,issue,"Shotgun smell detected with 1 classes with too many external fuctions and class with most external function calls, `IamPolicyTest` having 143 external function calls",,,,
225,,,,issue,Class cohesion smell detected with 1 out of 1 classes having cohesion < 30%,,,,
226,18409,369,"@@ -311,6 +311,8 @@ class PackageEntry(object):
 class Package(object):
     """""" In-memory representation of a package """"""
 
+    use_tqdm = os.getenv('QUILT_USE_TQDM').lower() == 'true'
+
     def __init__(self):
         self._children = {}
         self._meta = {'version': 'v0'}",claim,"The code change adds a new line that sets the value of the variable ""use_tqdm"" based on the environment variable 'QUILT_USE_TQDM'",,,test369_old.py,test369_new.py
227,,,,claim,"If the environment variable is 'true', 'use_tqdm' is set to True",,,,
228,,,,claim,"Otherwise, it is set to False",,,,
229,,,,claim,"This suggests that the code is now using the tqdm library for progress bars, which is based on the 'QUILT_USE_TQDM' environment variable.",,,,
230,,,,issue,"Many methods smell detected with 1 classes having many methods and the class with most methods, `Package` having 24 methods (`meta`, `install`, `resolve_hash`, `browse`, `fetch`, `keys`, `walk`, `load`, `set_dir`, `get`, `readme`, `set_meta`, `build`, `dump`, `manifest`, `set`, `delete`, `top_hash`, `push`, `rollback`, `diff`, `map`, `filter`, `verify`)",,,,
231,,,,issue,"Shotgun smell detected with 3 classes with too many external fuctions and class with most external function calls, `Package` having 308 external function calls",,,,
232,,,,issue,Class cohesion smell detected with 1 out of 3 classes having cohesion < 30%,,,,
233,,,,issue,Code complexity smell detected with 4 of 76 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
234,15275,8793,"@@ -43,7 +43,7 @@ class TestMasterSecretLogger(tservers.ServerTestBase):
 
             tls.log_master_secret.close()
             with open(logfile, ""rb"") as f:
-                assert f.read().count(b""CLIENT_RANDOM"") >= 2
+                assert f.read().count(b""SERVER_HANDSHAKE_TRAFFIC_SECRET"") >= 2
 
         tls.log_master_secret = _logfun
 ",claim,The code change in the GIT DIFF modifies an assertion in a test case,,,test8793_old.py,test8793_new.py
235,,,,claim,"The original assertion was checking if the count of ""CLIENT_RANDOM"" bytes in the log file was greater than or equal to 2",,,,
236,,,,claim,"The updated assertion checks if the count of ""SERVER_HANDSHAKE_TRAFFIC_SECRET"" bytes in the log file is greater than or equal to 2",,,,
237,,,,claim,This suggests a change in the expected log file content or behavior in the test case.,,,,
238,,,,issue,"Shotgun smell detected with 3 classes with too many external fuctions and class with most external function calls, `TestMasterSecretLogger` having 19 external function calls",,,,
239,,,,issue,Class cohesion smell detected with 1 out of 3 classes having cohesion < 30%,,,,
240,21632,8290,"@@ -8,8 +8,12 @@ except ImportError:
 import numpy as np
 import param
 
-from ..dimension import redim
-from ..util import unique_iterator
+from ..dimension import redim, Dimension, process_dimensions
+from ..element import Element
+from ..ndmapping import OrderedDict
+from ..spaces import HoloMap, DynamicMap
+from ..util import (basestring, dimension_range as d_range, get_param_values,
+                    isfinite, process_ellipses, unique_iterator, wrap_tuple)
 from .interface import Interface, iloc, ndloc
 from .array import ArrayInterface
 from .dictionary import DictInterface",claim,The code change represented by the GIT DIFF replaces two lines of code with multiple lines,,,test8290_old.py,test8290_new.py
241,,,,claim,"The removed lines were importing the functions ""redim"" and ""unique_iterator"" from the ""dimension"" and ""util"" modules respectively",,,,
242,,,,claim,"The added lines are importing multiple functions from the ""dimension"", ""element"", ""ndmapping"", ""spaces"", and ""util"" modules",,,,
243,,,,claim,"These new functions include ""redim"", ""Dimension"", ""process_dimensions"", ""Element"", ""OrderedDict"", ""HoloMap"", ""DynamicMap"", ""basestring"", ""d_range"", ""get_param_values"", ""isfinite"", ""process_ellipses"", and ""unique",,,,
244,,,,issue,"Shotgun smell detected with 2 classes with too many external fuctions and class with most external function calls, `Dataset` having 138 external function calls",,,,
245,,,,issue,Class cohesion smell detected with 1 out of 2 classes having cohesion < 30%,,,,
246,,,,issue,Code complexity smell detected with 8 of 29 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
247,20585,3658,"@@ -166,6 +166,7 @@ def get_filename_question(*, suggested_filename, url, parent=None):
     q.title = ""Save file to:""
     q.text = ""Please enter a location for <b>{}</b>"".format(
         html.escape(url.toDisplayString()))
+    q.yank_text = url.toString()
     q.mode = usertypes.PromptMode.download
     q.completed.connect(q.deleteLater)
     q.default = _path_suggestion(suggested_filename)",claim,"The code change adds a new line that sets the ""yank_text"" property of the ""q"" object to the string representation of the ""url"" object",,,test3658_old.py,test3658_new.py
248,,,,claim,This suggests that the code is now storing the URL in a format that can be yanked or copied.,,,,
249,,,,issue,"Shotgun smell detected with 7 classes with too many external fuctions and class with most external function calls, `DownloadModel` having 97 external function calls",,,,
250,,,,issue,Class cohesion smell detected with 3 out of 12 classes having cohesion < 30%,,,,
251,18201,8795,"@@ -65,6 +65,7 @@ confspec = ConfigObj(StringIO(
 	#possible log levels are DEBUG, IO, DEBUGWARNING, INFO
 	loggingLevel = string(default=""INFO"")
 	showWelcomeDialogAtStartup = boolean(default=true)
+	showSpeechViewerAtStartup = boolean(default=false)
 
 # Speech settings
 [speech]",claim,The code change adds a new line to the configuration file,,,test8795_old.py,test8795_new.py
252,,,,claim,"This new line adds a new boolean setting named ""showSpeechViewerAtStartup"" with a default value of false",,,,
253,,,,claim,This suggests that the speech viewer will not be shown at startup by default.,,,,
254,27360,3447,"@@ -24,6 +24,7 @@ CREATE_TABLE = """"""
         `complete_time` datetime DEFAULT NULL,
         `status` enum('SUCCESS','RUNNING','FAILURE',
                       'PARTIAL_SUCCESS','TIMEOUT') DEFAULT NULL,
+        `has_all_data` bool DEFAULT NULL,
         `schema_version` varchar(255) DEFAULT NULL,
         `cycle_timestamp` varchar(255) DEFAULT NULL,
          PRIMARY KEY (`id`),",claim,"The code change adds a new column ""has_all_data"" to the table",,,test3447_old.py,test3447_new.py
255,,,,claim,This column is a boolean and has a default value of NULL,,,,
256,,,,claim,This suggests that this new column could be used to store a flag indicating whether all data has been processed or not.,,,,
257,12142,125,"@@ -172,6 +172,19 @@ def define_environment_cls(pipeline_def):
     )
 
 
+def context_cls_inst(pipeline_def):
+    check.inst_param(pipeline_def, 'pipeline_def', PipelineDefinition)
+    pipeline_name = camelcase(pipeline_def.name)
+    return SystemNamedDict(
+        name='{pipeline_name}.Context'.format(pipeline_name=pipeline_name),
+        fields={
+            'context': define_maybe_optional_selector_field(
+                define_context_context_cls(pipeline_name, pipeline_def.context_definitions)
+            )
+        },
+    ).inst()
+
+
 def define_expectations_config_cls(name):
     check.str_param(name, 'name')
 ",claim,The GIT DIFF shows that a new function named 'context_cls_inst' has been added to the code,,,test125_old.py,test125_new.py
258,,,,claim,"This function takes a 'pipeline_def' parameter, which is checked to be an instance of 'PipelineDefinition'",,,,
259,,,,claim,The function then camelcases the pipeline name and defines a SystemNamedDict with a name that is the camelcased pipeline name appended with '.Context',,,,
260,,,,claim,"The 'context' field of the SystemNamedDict is defined as a maybe optional selector field, which is defined using the 'define_context_context_cls' function with the pipeline name and context definitions as parameters",,,,
261,,,,claim,The function is then instantiated and returned.,,,,
262,8234,1172,"@@ -3,6 +3,7 @@ import sys
 from cliquet.scripts import cliquet
 from pyramid.scripts import pserve
 from pyramid.paster import bootstrap
+from config import template
 
 CONFIG_FILE = 'config/kinto.ini'
 ",claim,"The code change represented by the GIT DIFF adds a new line of code to import the ""template"" module from the ""config"" package",,,test1172_old.py,test1172_new.py
263,,,,claim,"This suggests that the subsequent code might be using the ""template"" module for some operations.",,,,
264,18227,9509,"@@ -103,7 +103,7 @@ class SparkReader:
         """"""
 
         with self.app.app_context():
-
+            current_app.logger.info('Spark consumer has started!')
             while True:
                 self.init_rabbitmq_connection()
                 self.incoming_ch = utils.create_channel_to_consume(",claim,"The code change adds a new line that logs an informational message ""Spark consumer has started!"" when the Spark consumer has started",,,test9509_old.py,test9509_new.py
265,,,,claim,This indicates that the code now has logging functionality.,,,,
266,,,,issue,"Shotgun smell detected with 1 classes with too many external fuctions and class with most external function calls, `SparkReader` having 20 external function calls",,,,
267,,,,issue,Class cohesion smell detected with 1 out of 1 classes having cohesion < 30%,,,,
268,22381,973,"@@ -1130,7 +1130,9 @@ def getControlFieldSpeech(attrs,ancestorAttrs,fieldType,formatConfig=None,extraD
 	else:
 		tableID = None
 
-	roleText=getSpeechTextForProperties(reason=reason,role=role)
+	roleText=attrs.get('roleText')
+	if not roleText:
+		roleText=getSpeechTextForProperties(reason=reason,role=role)
 	stateText=getSpeechTextForProperties(reason=reason,states=states,_role=role)
 	keyboardShortcutText=getSpeechTextForProperties(reason=reason,keyboardShortcut=keyboardShortcut) if config.conf[""presentation""][""reportKeyboardShortcuts""] else """"
 	ariaCurrentText=getSpeechTextForProperties(reason=reason,current=ariaCurrent)",claim,The code change in the GIT DIFF modifies how the 'roleText' variable is assigned,,,test973_old.py,test973_new.py
269,,,,claim,"Previously, 'roleText' was directly assigned the result of the 'getSpeechTextForProperties' function",,,,
270,,,,claim,"Now, 'roleText' is first assigned the value of 'attrs.get('roleText')'",,,,
271,,,,claim,"If 'roleText' is not found in 'attrs', it falls back to the previous method of calling 'getSpeechTextForProperties'",,,,
272,,,,claim,"This change allows for more flexibility in setting the 'roleText' variable, as it can now be set directly from 'attrs' if available.",,,,
273,19970,3645,"@@ -527,6 +527,12 @@ class BigQueryLoadTask(MixinBigQueryBulkComplete, luigi.Task):
         """"""	Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.""""""
         return False
 
+    @property
+    def project_id(self):
+        """"""Project ID on which to run the BigQuery Job
+        """"""
+        return self.output().table.project_id
+
     def run(self):
         output = self.output()
         assert isinstance(output, BigQueryTarget), 'Output must be a BigQueryTarget, not %s' % (output)",claim,The code change adds a new property to the BigQueryLoadTask class,,,test3645_old.py,test3645_new.py
274,,,,claim,"The property, project_id, returns the project ID on which to run the BigQuery Job",,,,
275,,,,claim,This is achieved by accessing the project_id attribute of the output() method's table object.,,,,
276,,,,issue,"Shotgun smell detected with 9 classes with too many external fuctions and class with most external function calls, `BigQueryClient` having 53 external function calls",,,,
277,,,,issue,Class cohesion smell detected with 3 out of 19 classes having cohesion < 30%,,,,
278,10737,1139,"@@ -243,6 +243,9 @@ class Storage(StorageBase):
         VALUES (:object_id, :parent_id,
                 :collection_id, (:data)::JSONB,
                 from_epoch(:last_modified))
+        ON CONFLICT (id, parent_id, collection_id) DO UPDATE
+        SET data = (:data)::JSONB,
+            last_modified = from_epoch(:last_modified)
         RETURNING id, as_epoch(last_modified) AS last_modified;
         """"""
         placeholders = dict(object_id=record[id_field],",claim,The code change adds a new clause to the SQL query,,,test1139_old.py,test1139_new.py
279,,,,claim,"This clause is an ""ON CONFLICT"" clause that specifies that if a conflict occurs when inserting a new row into the table, the query should perform an ""UPDATE"" operation instead",,,,
280,,,,claim,"The ""UPDATE"" operation will set the ""data"" column to the value of the "":data"" placeholder and the ""last_modified"" column to the value of the "":last_modified"" placeholder",,,,
281,,,,claim,"The conflict is based on the unique constraint on the columns ""id"", ""parent_id"", and ""collection_id"".",,,,
282,,,,issue,"Shotgun smell detected with 1 classes with too many external fuctions and class with most external function calls, `Storage` having 148 external function calls",,,,
283,,,,issue,Class cohesion smell detected with 1 out of 1 classes having cohesion < 30%,,,,
284,,,,issue,Code complexity smell detected with 2 of 20 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
285,18298,521,"@@ -105,7 +105,11 @@ def connect_container_to_network(container, network):
 
 
 def disconnect_container_from_network(container, network):
-    subprocess.check_call([""docker"", ""network"", ""disconnect"", network, container])
+    # subprocess.run instead of subprocess.check_call so we don't fail when
+    # trying to disconnect a container from a network that it's not connected to
+    subprocess.run(  # pylint: disable=subprocess-run-check
+        [""docker"", ""network"", ""disconnect"", network, container]
+    )
 
 
 def hostnames(network):",claim,The code change in the GIT DIFF replaces the existing line of code that was using the subprocess.check_call function to run the Docker network disconnect command,,,test521_old.py,test521_new.py
286,,,,claim,"The new code now uses the subprocess.run function, which allows for more control over the subprocess",,,,
287,,,,claim,"Additionally, a comment has been added to explain that the subprocess.run function is being used instead of the subprocess.check_call function to avoid failing when trying to disconnect a container from a network that it's not connected to",,,,
288,,,,claim,A pylint disable comment has also been added to suppress a warning about the subprocess.run function not being checked for errors.,,,,
289,5664,5007,"@@ -28,6 +28,7 @@ import sys
 import termios
 from subprocess import CalledProcessError
 
+import molecule.validators as validators
 import prettytable
 import sh
 import vagrant",claim,"The code change represented by the GIT DIFF adds a new line of code to import the module ""molecule.validators"" as ""validators""",,,test5007_old.py,test5007_new.py
290,,,,claim,This suggests that the subsequent code may use functions or classes from this module.,,,,
291,15147,7715,"@@ -95,7 +95,7 @@ def get_spotify_oauth():
     """"""
     client_id = current_app.config['SPOTIFY_CLIENT_ID']
     client_secret = current_app.config['SPOTIFY_CLIENT_SECRET']
-    scope = 'user-read-recently-played'
+    scope = 'user-read-recently-played user-read-currently-playing'
     redirect_url = current_app.config['SPOTIFY_CALLBACK_URL']
     return spotipy.oauth2.SpotifyOAuth(client_id, client_secret, redirect_uri=redirect_url, scope=scope)
 ",claim,The code change in the GIT DIFF modifies the scope of the Spotify OAuth,,,test7715_old.py,test7715_new.py
292,,,,claim,"Previously, the scope was set to 'user-read-recently-played'",,,,
293,,,,claim,The updated scope now includes 'user-read-recently-played' and 'user-read-currently-playing',,,,
294,,,,claim,This means that the application now has access to read the user's recently played tracks and the currently playing track.,,,,
295,,,,issue,"Shotgun smell detected with 1 classes with too many external fuctions and class with most external function calls, `Spotify` having 7 external function calls",,,,
296,,,,issue,Class cohesion smell detected with 1 out of 4 classes having cohesion < 30%,,,,
297,15802,3784,"@@ -95,6 +95,7 @@ def sensor(
 def asset_sensor(
     asset_key: AssetKey,
     pipeline_name: Optional[str] = None,
+    target_name: Optional[str] = None,
     name: Optional[str] = None,
     solid_selection: Optional[List[str]] = None,
     mode: Optional[str] = None,",claim,"The code change adds a new parameter ""target_name"" to the ""asset_sensor"" function",,,test3784_old.py,test3784_new.py
298,,,,claim,This parameter is optional and is of type string.,,,,
299,,,,issue,"Long parameter list smell detected with 2 methods with long parameter lists and method `asset_sensor` at line 95 having 9 parameters (`asset_key`, `pipeline_name`, `target_name`, `name`, `solid_selection`, `mode`, `minimum_interval_seconds`, `description`, `job`)",,,,
300,8010,4320,"@@ -197,6 +197,7 @@ class EmrConnection(AWSQueryConnection):
                     steps=[],
                     bootstrap_actions=[],
                     instance_groups=None,
+                    ami_version=""1.0"",
                     additional_info=None):
         """"""
         Runs a job flow",claim,"The code change adds a new parameter ""ami_version"" to the EmrConnection class constructor",,,test4320_old.py,test4320_new.py
301,,,,claim,"The default value for this parameter is set to ""1.0""",,,,
302,,,,claim,This suggests that the code now includes support for a specific AMI version when running a job flow.,,,,
303,,,,issue,"Shotgun smell detected with 1 classes with too many external fuctions and class with most external function calls, `EmrConnection` having 42 external function calls",,,,
304,,,,issue,Class cohesion smell detected with 1 out of 1 classes having cohesion < 30%,,,,
305,20909,10056,"@@ -29,7 +29,8 @@ from pkg_resources import resource_stream
 def getScalarMetricWithTimeOfDayAnomalyParams(metricData,
                                               minVal=None,
                                               maxVal=None,
-                                              minResolution=None):
+                                              minResolution=None,
+                                              tmImplementation = ""cpp""):
   """"""
     Return a dict that can be used to create an anomaly model via OPF's
     ModelFactory.",claim,"The code change in the GIT DIFF adds a new parameter ""tmImplementation"" to the function ""getScalarMetricWithTimeOfDayAnomalyParams""",,,test10056_old.py,test10056_new.py
306,,,,claim,"The default value for this parameter is set to ""cpp""",,,,
307,,,,claim,"This suggests that the function now supports a new feature or option for time implementation, specifically in the C++ language.",,,,
308,14724,7214,"@@ -105,7 +105,7 @@ class HierarchicHTTPRequest(HTTPRequest):
             file_dict[""path""] = path
 
             mime = mimetypes.guess_type(file_dict[""path""])[0] or ""application/octet-stream""
-            file_dict.get('mime-type', mime)
+            file_dict[""mime-type""] = mime
         self.content_encoding = self.config.get('content-encoding', None)
 
 ",claim,The code change in the GIT DIFF replaces a line of code that was using the get method to retrieve the value of the 'mime-type' key from the file_dict dictionary,,,test7214_old.py,test7214_new.py
309,,,,claim,The new line of code now directly assigns the value of the 'mime-type' key in the file_dict dictionary,,,,
310,,,,claim,"This change suggests that the code is now directly setting the 'mime-type' key in the file_dict dictionary, rather than retrieving it first.",,,,
311,,,,issue,"Shotgun smell detected with 13 classes with too many external fuctions and class with most external function calls, `RequestsParser` having 25 external function calls",,,,
312,,,,issue,Class cohesion smell detected with 1 out of 14 classes having cohesion < 30%,,,,
313,,,,issue,Code complexity smell detected with 1 of 52 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
314,10032,3311,"@@ -202,11 +202,11 @@ class Ansible(base.Base):
     ::
 
         ANSIBLE_ROLES_PATH:
-          $ephemeral_directory/roles/:$project_directory/../
+          $ephemeral_directory/roles/:$project_directory/../:$HOME/.ansible/roles:/usr/share/ansible/roles:/etc/ansible/roles
         ANSIBLE_LIBRARY:
-          $ephemeral_directory/library/:$project_directory/library/
+          $ephemeral_directory/modules/:$project_directory/library/:$HOME/.ansible/plugins/modules:/usr/share/ansible/plugins/modules
         ANSIBLE_FILTER_PLUGINS:
-          $ephemeral_directory/plugins/filters/:$project_directory/filter/plugins/
+          $ephemeral_directory/plugins/filter/:$project_directory/filter/plugins/:$HOME/.ansible/plugins/filter:/usr/share/ansible/plugins/modules
 
     Environment variables can be passed to the provisioner.  Variables in this
     section which match the names above will be appened to the above defaults,",claim,"The code changes in the GIT DIFF modify the values of three environment variables: ANSIBLE_ROLES_PATH, ANSIBLE_LIBRARY, and ANSIBLE_FILTER_PLUGINS",,,test3311_old.py,test3311_new.py
315,,,,claim,"The new values include additional paths: $HOME/.ansible/roles, /usr/share/ansible/roles, and /etc/ansible/roles for ANSIBLE_ROLES_PATH, and $HOME/.ansible/plugins/modules and /usr/share/ansible/plugins/modules for ANSIBLE_LIBRARY",,,,
316,,,,claim,"For ANSIBLE_FILTER_PLUGINS, the new values include $",,,,
317,,,,issue,"Shotgun smell detected with 1 classes with too many external fuctions and class with most external function calls, `Ansible` having 80 external function calls",,,,
318,,,,issue,Class cohesion smell detected with 1 out of 1 classes having cohesion < 30%,,,,
319,7567,2087,"@@ -17,8 +17,8 @@ MINIMALIST_COLLECTION = {'data': dict()}
 MINIMALIST_GROUP = {'data': dict(members=['fxa:user'])}
 MINIMALIST_RECORD = {'data': dict(name=""Hulled Barley"",
                                   type=""Whole Grain"")}
-USER_PRINCIPAL = 'basicauth:8a931a10fc88ab2f6d1cc02a07d3a81b5d4768f' \
-                 '6f13e85c5d8d4180419acb1b4'
+USER_PRINCIPAL = 'basicauth:aaedca130273574dd2bd6c3acad57f3545b662a974fa4320' \
+                 '236f25fe474676d6'
 
 
 class BaseWebTest(object):",claim,The code change in the GIT DIFF replaces an existing line of code,,,test2087_old.py,test2087_new.py
320,,,,claim,The replaced line of code now contains a longer and more complex string for the USER_PRINCIPAL variable,,,,
321,,,,claim,This indicates that the code is now using a more secure and complex authentication method.,,,,
322,,,,issue,"Shotgun smell detected with 2 classes with too many external fuctions and class with most external function calls, `BaseWebTest` having 15 external function calls",,,,
323,20125,8542,"@@ -1883,7 +1883,7 @@ UDS_RDBI.dataIdentifiers[0x4080] = ""AirbagLock_NEU""
 UDS_RDBI.dataIdentifiers[0x4140] = ""BodyComConfig""
 UDS_RDBI.dataIdentifiers[0x4ab4] = ""Betriebsstundenzaehler""
 UDS_RDBI.dataIdentifiers[0x5fc2] = ""WDBI_DME_ABGLEICH_PROG_REQ""
-UDS_RDBI.dataIdentifiers[0xd114] = ""Gesamtweg-Streckenzähler Offset""
+UDS_RDBI.dataIdentifiers[0xd114] = ""Gesamtweg-Streckenzaehler Offset""
 UDS_RDBI.dataIdentifiers[0xd387] = ""STATUS_DIEBSTAHLSCHUTZ""
 UDS_RDBI.dataIdentifiers[0xdb9c] = ""InitStatusEngineAngle""
 UDS_RDBI.dataIdentifiers[0xEFE9] = ""WakeupRegistry""",claim,The code change in the GIT DIFF replaces an existing line of code,,,test8542_old.py,test8542_new.py
324,,,,claim,"The replaced line of code now sets the value of ""Gesamtweg-Streckenzaehler Offset"" for the key 0xd114 in the UDS_RDBI.dataIdentifiers array instead of the original line of code that set the value as ""Gesamtweg-Streckenzähler Offset""",,,,
325,,,,claim,This indicates that the code is now using the correct spelling of the identifier.,,,,
326,,,,issue,"Shotgun smell detected with 24 classes with too many external fuctions and class with most external function calls, `SVK` having 9 external function calls",,,,
327,19315,8632,"@@ -231,7 +231,8 @@ class AnchorHead(nn.Module):
         # map up to original set of anchors
         if unmap_outputs:
             num_total_anchors = flat_anchors.size(0)
-            labels = unmap(labels, num_total_anchors, inside_flags)
+            labels = unmap(labels, num_total_anchors, inside_flags,
+                           self.num_classes)  # fill bg label
             label_weights = unmap(label_weights, num_total_anchors,
                                   inside_flags)
             bbox_targets = unmap(bbox_targets, num_total_anchors, inside_flags)",claim,"The code change in the GIT DIFF modifies the unmap function call for the ""labels"" variable",,,test8632_old.py,test8632_new.py
328,,,,claim,"The updated line now includes an additional parameter, ""self.num_classes"", which is used to fill the background label",,,,
329,,,,claim,This suggests that the unmap function has been updated to handle a new parameter or the background label filling has been added.,,,,
330,,,,issue,"Shotgun smell detected with 1 classes with too many external fuctions and class with most external function calls, `AnchorHead` having 130 external function calls",,,,
331,,,,issue,Class cohesion smell detected with 1 out of 1 classes having cohesion < 30%,,,,
332,,,,issue,Code complexity smell detected with 2 of 13 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
333,13065,7007,"@@ -89,6 +89,7 @@ class CompletionView(QTreeView):
     # https://github.com/The-Compiler/qutebrowser/issues/117
 
     resize_completion = pyqtSignal()
+    connected = None
 
     def __init__(self, win_id, parent=None):
         super().__init__(parent)",claim,"The code change adds a new line that declares a variable named ""connected"" and initializes it to None",,,test7007_old.py,test7007_new.py
334,,,,claim,"This suggests that ""connected"" will be used later in the code.",,,,
335,,,,issue,"Shotgun smell detected with 1 classes with too many external fuctions and class with most external function calls, `CompletionView` having 80 external function calls",,,,
336,,,,issue,Class cohesion smell detected with 1 out of 1 classes having cohesion < 30%,,,,
337,26227,3849,"@@ -47,7 +47,7 @@ class BigQueryClient(_base_client.BaseClient):
         return RateLimiter(FLAGS.max_bigquery_api_calls_per_100_seconds,
                            self.DEFAULT_QUOTA_TIMESPAN_PER_SECONDS)
 
-    def get_bigquery_projectids(self):
+    def get_bigquery_projectids(self, key='projects'):
         """"""Request and page through bigquery projectids.
 
         Returns: A list of project_ids enabled for bigquery.",claim,"The code change in the GIT DIFF modifies the method signature of the ""get_bigquery_projectids"" function",,,test3849_old.py,test3849_new.py
338,,,,claim,"The function now has a default parameter ""key"" set to 'projects'",,,,
339,,,,claim,"This means that if the function is called without providing a value for ""key"", it will use 'projects' as the default value.",,,,
340,,,,issue,"Shotgun smell detected with 1 classes with too many external fuctions and class with most external function calls, `BigQueryClient` having 15 external function calls",,,,
341,12929,6081,"@@ -93,8 +93,10 @@ class ObjectStore(six.with_metaclass(ABCMeta)):
         return self.set_object(obj, context, runtime_type, paths)
 
     def get_value(self, context, runtime_type, paths):
-        if runtime_type in self.TYPE_REGISTRY:
-            return self.TYPE_REGISTRY[runtime_type].get_object(self, context, runtime_type, paths)
+        if runtime_type.name is not None and runtime_type.name in self.TYPE_REGISTRY:
+            return self.TYPE_REGISTRY[runtime_type.name].get_object(
+                self, context, runtime_type, paths
+            )
         return self.get_object(context, runtime_type, paths)
 
 ",claim,The code change in the GIT DIFF modifies the condition for retrieving an object from the TYPE_REGISTRY,,,test6081_old.py,test6081_new.py
342,,,,claim,"Previously, the code checked if the runtime_type was in the TYPE_REGISTRY and returned the get_object method if it was",,,,
343,,,,claim,The new code checks if the name attribute of the runtime_type is not None and if this name is in the TYPE_REGISTRY before returning the get_object method,,,,
344,,,,claim,This change ensures that the get_object method is only called if the runtime_type has a valid name.,,,,
345,,,,issue,"Shotgun smell detected with 4 classes with too many external fuctions and class with most external function calls, `FileSystemObjectStore` having 38 external function calls",,,,
346,16562,3002,"@@ -51,10 +51,10 @@ class releaseTestCase(SparkTestCase):
             if entry['release_name'] != '':
                 expected[entry['user_name']].append({
                     'release_name': entry['release_name'],
-                    'release_msid': entry['release_msid'],
-                    'release_mbid': entry['release_mbid'],
+                    'release_msid': entry['release_msid'] or None,
+                    'release_mbid': entry['release_mbid'] or None,
                     'artist_name': entry['artist_name'],
-                    'artist_msid': entry['artist_msid'],
+                    'artist_msid': entry['artist_msid'] or None,
                     'artist_mbids': entry['artist_mbids'],
                     'listen_count': entry['count']
                 })",claim,"The code changes in the GIT DIFF modify how the 'release_msid', 'release_mbid', and 'artist_msid' keys are handled in the expected dictionary",,,test3002_old.py,test3002_new.py
347,,,,claim,"Previously, if these keys were empty, they would be included in the dictionary",,,,
348,,,,claim,"Now, if these keys are empty, 'None' will be used as the value",,,,
349,,,,claim,"This change ensures that these keys always have a value, either the actual value or 'None'.",,,,
350,,,,issue,"Shotgun smell detected with 1 classes with too many external fuctions and class with most external function calls, `releaseTestCase` having 39 external function calls",,,,
351,26110,1500,"@@ -29,6 +29,7 @@ class ResourceType(object):
     FOLDER = 'folder'
     PROJECT = 'project'
     GROUP = 'group'
+    BACKEND_SERVICE = 'backend_service'
     FORWARDING_RULE = 'forwarding_rule'
     BUCKETS_ACL = 'buckets_acl'
     CLOUDSQL_ACL = 'cloudsql_instances'",claim,"The code change adds a new constant ""BACKEND_SERVICE"" to the ResourceType class",,,test1500_old.py,test1500_new.py
352,,,,claim,This suggests that a new type of resource has been introduced in the code.,,,,
353,,,,issue,"Shotgun smell detected with 2 classes with too many external fuctions and class with most external function calls, `Resource` having 5 external function calls",,,,
354,,,,issue,Class cohesion smell detected with 1 out of 3 classes having cohesion < 30%,,,,
355,18644,1518,"@@ -77,6 +77,7 @@ def _launch_local_catalog():
     env = dict(REGISTRY_URL=""http://localhost:5000"",
                S3_PROXY_URL=open_config[""s3Proxy""],
                ALWAYS_REQUIRE_AUTH=""false"",
+               NO_DOWNLOAD=""false"",
                CATALOG_MODE=""LOCAL"",
                SSO_AUTH=""DISABLED"",
                PASSWORD_AUTH=""ENABLED"",",claim,The code change adds a new line to the environment dictionary,,,test1518_old.py,test1518_new.py
356,,,,claim,"This new line sets the ""NO_DOWNLOAD"" environment variable to ""false""",,,,
357,,,,claim,This suggests that the code is now allowing downloads by default.,,,,
358,,,,issue,"Shotgun smell detected with 1 classes with too many external fuctions and class with most external function calls, `ParseConfigDict` having 3 external function calls",,,,
359,,,,issue,Code complexity smell detected with 1 of 14 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
360,19368,9882,"@@ -871,6 +871,14 @@ class UIA(Window):
 					states.add(controlTypes.STATE_CHECKED)
 		return states
 
+	def _get_presentationType(self):
+		presentationType=super(UIA,self).presentationType
+		# UIA NVDAObjects can only be considered content if UI Automation considers them both a control and content.
+		if presentationType==self.presType_content and not (self.UIAElement.cachedIsContentElement and self.UIAElement.cachedIsControlElement):
+			presentationType=self.presType_layout
+		return presentationType 
+
+
 	def correctAPIForRelation(self, obj, relation=None):
 		if obj and self.windowHandle != obj.windowHandle and not obj.UIAElement.cachedNativeWindowHandle:
 			# The target element is not the root element for the window, so don't change API class; i.e. always use UIA.",claim,"The GIT DIFF shows that a new method named ""_get_presentationType"" has been added to the UIA class",,,test9882_old.py,test9882_new.py
361,,,,claim,This method retrieves the presentation type from the superclass and checks if it is equal to the content type,,,,
362,,,,claim,"If the presentation type is content and the UIA element is not considered both a content and control element, it changes the presentation type to layout",,,,
363,,,,claim,This method is used to handle the presentation type of UIA NVDAObjects.,,,,
364,12283,6440,"@@ -208,6 +208,7 @@ def rev_hex(s):
 def int_to_hex(i, length=1):
     assert isinstance(i, int)
     s = hex(i)[2:].rstrip('L')
+    s = s.lstrip('0x')
     s = ""0""*(2*length - len(s)) + s
     return rev_hex(s)
 ",claim,The code change adds a new line that removes the '0x' prefix from the hexadecimal string 's',,,test6440_old.py,test6440_new.py
365,,,,claim,This is done using the lstrip() method,,,,
366,,,,claim,This change is likely made to ensure that the hexadecimal string 's' does not start with '0x'.,,,,
367,,,,issue,"Shotgun smell detected with 4 classes with too many external fuctions and class with most external function calls, `EC_KEY` having 60 external function calls",,,,
368,12769,5389,"@@ -12,7 +12,9 @@ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.""""""
 
-import ldap, traceback
+import traceback
+
+import ldap
 from django.conf import settings
 from django.contrib.auth.models import User
 ",claim,The code change in the GIT DIFF shows that the import statements have been rearranged,,,test5389_old.py,test5389_new.py
369,,,,claim,"The ""ldap"" and ""traceback"" modules were originally imported together, but now they are imported separately",,,,
370,,,,claim,This change could have been made for readability or to adhere to a specific coding style.,,,,
371,,,,issue,"Shotgun smell detected with 1 classes with too many external fuctions and class with most external function calls, `LDAPBackend` having 14 external function calls",,,,
372,25014,6305,"@@ -0,0 +1,10 @@
+_base_ = [
+    'retinanet_pvt_t_fpn_1x_coco.py',
+]
+model = dict(
+    backbone=dict(
+        num_layers=[3, 4, 6, 3],
+        init_cfg=dict(
+            type='Pretrained',
+            checkpoint='https://github.com/whai362/PVT/'
+            'releases/download/v2/pvt_small.pth')))",claim,The GIT DIFF shows that a new configuration file has been added,,,test6305_old.py,test6305_new.py
373,,,,claim,The file is based on the 'retinanet_pvt_t_fpn_1x_coco.py' and it defines a model with a backbone,,,,
374,,,,claim,The backbone has 4 layers and is initialized with a pretrained model from 'https://github.com/whai362/PVT/releases/download/v2/pvt_small.pth'.,,,,
375,14151,6151,"@@ -82,7 +82,7 @@ SINGLE_QUOTED_REGEX = re.compile(""(%s)?'''"" % ""|"".join(_PREFIXES))
 DOUBLE_QUOTED_REGEX = re.compile('(%s)?""""""' % ""|"".join(_PREFIXES))
 QUOTE_DELIMITER_REGEX = re.compile(""(%s)?(\""|')"" % ""|"".join(_PREFIXES), re.DOTALL)
 
-MSGS = {
+MSGS = {  # pylint: disable=consider-using-namedtuple
     ""E1300"": (
         ""Unsupported format character %r (%#02x) at index %d"",
         ""bad-format-character"",",claim,"The code change represented by the GIT DIFF adds a comment to the line of code that defines the ""MSGS"" dictionary",,,test6151_old.py,test6151_new.py
376,,,,claim,"The comment indicates that the dictionary is being defined, and it suggests that the developer might want to use a namedtuple instead",,,,
377,,,,claim,"This change does not affect the functionality of the code, but it may be a hint or warning for the developer to consider using a namedtuple for this dictionary.",,,,
378,,,,issue,"Shotgun smell detected with 2 classes with too many external fuctions and class with most external function calls, `StringFormatChecker` having 92 external function calls",,,,
379,,,,issue,Class cohesion smell detected with 1 out of 2 classes having cohesion < 30%,,,,
380,,,,issue,Code complexity smell detected with 5 of 26 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
381,9994,6924,"@@ -9,6 +9,11 @@ def includeme(config):
         description='Track changes on data.',
         url='http://kinto.readthedocs.io/en/latest/api/1.x/history.html')
 
+    config.add_api_capability(
+        'revert',
+        description='discard all changes after given timestamp.',
+        url='http://kinto.readthedocs.io/en/latest/api/1.x/revert.html')
+
     # Activate end-points.
     config.scan('kinto.plugins.history.views')
 ",claim,The code change adds a new API capability called 'revert',,,test6924_old.py,test6924_new.py
382,,,,claim,This capability allows users to discard all changes after a given timestamp,,,,
383,,,,claim,The description and URL for this capability are also provided.,,,,
384,18547,899,"@@ -210,8 +210,9 @@ EXTS_ACCESS_COUNTS = textwrap.dedent(""""""\
             eventname,
             bucket,
             lower(CASE
-                WHEN cardinality(parts) > 2 THEN concat(element_at(parts, -2), '.', element_at(parts, -1))
-                WHEN cardinality(parts) = 2 THEN element_at(parts, -1)
+                WHEN cardinality(parts) > 2 AND lower(element_at(parts, -1)) = 'gz'
+                    THEN concat(element_at(parts, -2), '.', element_at(parts, -1))
+                WHEN cardinality(parts) >= 2 THEN element_at(parts, -1)
                 ELSE ''
                 END
             ) AS ext,",claim,The code changes in the GIT DIFF modify the conditions for the 'ext' column in the query,,,test899_old.py,test899_new.py
385,,,,claim,"Previously, the 'ext' column was set based on the cardinality of the 'parts' array",,,,
386,,,,claim,"If the cardinality was greater than 2, it would concatenate the second last and last elements of the 'parts' array",,,,
387,,,,claim,"If the cardinality was 2, it would simply take the last element of the 'parts' array",,,,
388,,,,claim,,,,,
389,,,,claim,"Now, the 'ext' column is set based on a more complex condition",,,,
390,,,,claim,"If the cardinality of the 'parts' array is greater than 2 and the lowercased last element of the 'parts' array is 'gz', it will concatenate the second",,,,
391,15067,10111,"@@ -87,8 +87,6 @@ class LocustIOExecutor(ScenarioExecutor, WidgetProvider, FileLister, HavingInsta
 
         wrapper = os.path.join(get_full_path(__file__, step_up=2), ""resources"", ""locustio-taurus-wrapper.py"")
 
-        self.env.add_path({""PYTHONPATH"": self.engine.artifacts_dir})
-        self.env.add_path({""PYTHONPATH"": os.getcwd()})
         self.env.set({""LOCUST_DURATION"": dehumanize_time(load.duration)})
 
         self.log_file = self.engine.create_artifact(""locust"", "".log"")",claim,The code change represented by the GIT DIFF removes two lines of code,,,test10111_old.py,test10111_new.py
392,,,,claim,These lines were previously adding the artifacts directory and the current working directory to the PYTHONPATH environment variable,,,,
393,,,,claim,This suggests that the code no longer needs to add these directories to the PYTHONPATH environment variable.,,,,
394,,,,issue,"Shotgun smell detected with 4 classes with too many external fuctions and class with most external function calls, `LocustIOScriptBuilder` having 66 external function calls",,,,
395,,,,issue,Class cohesion smell detected with 2 out of 4 classes having cohesion < 30%,,,,
396,30112,9809,"@@ -104,7 +104,8 @@ PROJECT_IAM_ROLES_SERVER = [
     'roles/storage.objectViewer',
     'roles/storage.objectCreator',
     'roles/cloudsql.client',
-    'roles/logging.logWriter'
+    'roles/logging.logWriter',
+    'roles/iam.serviceAccountTokenCreator'
 ]
 
 PROJECT_IAM_ROLES_CLIENT = [",claim,The code change in the GIT DIFF adds a new role 'roles/iam.serviceAccountTokenCreator' to the list of PROJECT_IAM_ROLES_SERVER,,,test9809_old.py,test9809_new.py
397,,,,claim,"This suggests that the service account now has the ability to create service account tokens, which was not previously possible.",,,,
398,26796,9690,"@@ -1,6 +1,6 @@
 _base_ = [
     '../_base_/models/mask_rcnn_r50_fpn.py',
-    '../_base_/datasets/coco_instance.py',
+    '../_base_/datasets/lvis_v1_instance.py',
     '../_base_/schedules/schedule_2x.py', '../_base_/default_runtime.py'
 ]
 model = dict(",claim,The code change in the GIT DIFF replaces an existing line of code,,,test9690_old.py,test9690_new.py
399,,,,claim,The replaced line of code now points to '../_base_/datasets/lvis_v1_instance.py' instead of the original line of code that pointed to '../_base_/datasets/coco_instance.py',,,,
400,,,,claim,This indicates that the dataset used in the code has been changed from the COCO instance dataset to the LVIS v1 instance dataset.,,,,
401,11189,1527,"@@ -71,6 +71,7 @@ setup(
     # Metadata
     author='Philippe BIONDI',
     author_email='phil(at)secdev.org',
+    maintainer='Pierre LALET, Guillaume VALADON',
     description='Scapy: interactive packet manipulation tool',
     license='GPLv2',
     url='http://www.secdev.org/projects/scapy',",claim,"The code change adds a new line to the setup function, setting the maintainer to 'Pierre LALET, Guillaume VALADON'",,,test1527_old.py,test1527_new.py
402,,,,claim,"This indicates that the code is now maintained by two individuals, Pierre LALET and Guillaume VALADON.",,,,
403,25917,1042,"@@ -600,11 +600,11 @@ class SABLRetinaHead(BaseDenseHead, BBoxTestMixin):
                 bbox_cls_pred.contiguous(),
                 bbox_reg_pred.contiguous()
             ]
-            bboxes, confids = self.bbox_coder.decode(
+            bboxes, confidences = self.bbox_coder.decode(
                 anchors.contiguous(), bbox_preds, max_shape=img_shape)
             mlvl_bboxes.append(bboxes)
             mlvl_scores.append(scores)
-            mlvl_confids.append(confids)
+            mlvl_confids.append(confidences)
         mlvl_bboxes = torch.cat(mlvl_bboxes)
         if rescale:
             mlvl_bboxes /= mlvl_bboxes.new_tensor(scale_factor)",claim,The code changes in this GIT DIFF are related to the variable names in the decoding process of bounding boxes,,,test1042_old.py,test1042_new.py
404,,,,claim,"The variable ""confids"" is replaced with ""confidences"" in the decoding process",,,,
405,,,,claim,"This change is reflected in the append operation as well, where ""confids"" is replaced with ""confidences""",,,,
406,,,,claim,This change likely improves the clarity and readability of the code by using more descriptive variable names.,,,,
407,,,,issue,"Shotgun smell detected with 1 classes with too many external fuctions and class with most external function calls, `SABLRetinaHead` having 164 external function calls",,,,
408,,,,issue,Class cohesion smell detected with 1 out of 1 classes having cohesion < 30%,,,,
409,,,,issue,Code complexity smell detected with 2 of 12 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
410,32870,6051,"@@ -49,6 +49,15 @@ class ApiClient(object):
             dataset_id (str): id of the dataset to query.
         """"""
 
+    @abc.abstractmethod
+    def fetch_bigquery_iam_policy(self, project_number, dataset_id):
+        """"""Gets IAM policy if a bigquery dataset from gcp API call.
+
+        Args:
+            project_number (str): number of the project to query.
+            dataset_id (str): id of the dataset to query.
+        """"""
+
     @abc.abstractmethod
     def iter_bigquery_datasets(self, project_number):
         """"""Iterate Datasets from GCP API.",claim,"The GIT DIFF shows that a new method named ""fetch_bigquery_iam_policy"" has been added to the ""ApiClient"" class",,,test6051_old.py,test6051_new.py
411,,,,claim,"This method takes two parameters, ""project_number"" and ""dataset_id"", and returns the IAM policy for a bigquery dataset from a GCP API call",,,,
412,,,,claim,"The method is marked as abstract with the ""@abc.abstractmethod"" decorator, indicating that it must be implemented in any subclass of ""ApiClient"".",,,,
413,,,,issue,"Shotgun smell detected with 1 classes with too many external fuctions and class with most external function calls, `ApiClientImpl` having 179 external function calls",,,,
414,,,,issue,Class cohesion smell detected with 1 out of 3 classes having cohesion < 30%,,,,
415,21617,5201,"@@ -21,7 +21,7 @@
 
 """"""Installation script for Python nupic package.""""""
 
-import os
+import OOOOOOOOOOOos
 import pkg_resources
 import sys
 ",claim,The code change in the GIT DIFF replaces an existing line of code,,,test5201_old.py,test5201_new.py
416,,,,claim,"The replaced line of code now imports ""OOOOOOOOOOOOos"" instead of the standard ""os""",,,,
417,,,,claim,This indicates that the code is now using a different module for operating system operations.,,,,
418,,,,issue,"Shotgun smell detected with 1 classes with too many external fuctions and class with most external function calls, `TestCommand` having 5 external function calls",,,,
419,9726,1667,"@@ -14,7 +14,9 @@
 
 import abc
 import logging
+import datetime
 import parameter
+import target
 import warnings
 import traceback
 import pyparsing as pp",claim,The code change represented by the GIT DIFF adds two new lines of code,,,test1667_old.py,test1667_new.py
420,,,,claim,"These lines import the ""datetime"" and ""target"" modules, indicating that the code will now be using date and time functions and target-related functions respectively.",,,,
421,,,,issue,"Shotgun smell detected with 3 classes with too many external fuctions and class with most external function calls, `Task` having 52 external function calls",,,,
422,,,,issue,Class cohesion smell detected with 1 out of 4 classes having cohesion < 30%,,,,
423,,,,issue,Code complexity smell detected with 1 of 47 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
424,29382,3930,"@@ -139,13 +139,11 @@ def build_network_url(project, network):
       The fully qualified network url for the given project/network.
     """"""
     return (u'%(root)s%(api_name)s/%(version)s/projects/%(project)s/global/'
-            'networks/%(network)s') % {
-                'api_name': API_NAME,
-                'network': network,
-                'project': project,
-                'root': API_ROOT,
-                'version': API_VERSION
-            }
+            'networks/%(network)s') % {'api_name': API_NAME,
+                                       'network': network,
+                                       'project': project,
+                                       'root': API_ROOT,
+                                       'version': API_VERSION}
 
 
 class ComputeFirewallAPI(object):",claim,The code change represented by the GIT DIFF removes unnecessary whitespace from the string formatting in the build_network_url function,,,test3930_old.py,test3930_new.py
425,,,,claim,"The formatting remains the same, but the whitespace has been removed",,,,
426,,,,claim,"This change does not affect the functionality of the code, but it improves readability and cleanliness of the code.",,,,
427,,,,issue,"Shotgun smell detected with 3 classes with too many external fuctions and class with most external function calls, `FirewallEnforcer` having 76 external function calls",,,,
428,,,,issue,Code complexity smell detected with 4 of 54 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
429,17464,3040,"@@ -103,7 +103,7 @@ def as_spark_type(tpe) -> types.DataType:
     """"""
     # TODO: Add ""boolean"" and ""string"" types.
     # ArrayType
-    if tpe in (np.ndarray,):
+    if tpe in (list, np.ndarray,):
         return types.ArrayType(types.StringType())
     elif hasattr(tpe, ""__origin__"") and issubclass(tpe.__origin__, list):
         return types.ArrayType(as_spark_type(tpe.__args__[0]))",claim,The code change in the GIT DIFF modifies an existing line of code,,,test3040_old.py,test3040_new.py
430,,,,claim,"The updated line now checks if the type ""tpe"" is in a list containing both ""list"" and ""np.ndarray""",,,,
431,,,,claim,"This suggests that the code is now considering ""np.ndarray"" and ""list"" as the same type when checking if the type ""tpe"" is in the list.",,,,
432,,,,issue,"Shotgun smell detected with 4 classes with too many external fuctions and class with most external function calls, `DataFrameType` having 9 external function calls",,,,
433,,,,issue,Code complexity smell detected with 2 of 17 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
434,33781,8081,"@@ -235,11 +235,16 @@ echo ""echo '{export_forseti_vars}' >> /etc/profile.d/forseti_environment.sh"" | s
 gsutil cp gs://{scanner_bucket}/configs/forseti_conf_server.yaml {forseti_server_conf}
 gsutil cp -r gs://{scanner_bucket}/rules {forseti_home}/
 
+# Download the Newest Config Validator constraints from GCS
+rm -rf /home/ubuntu/config_validator_constraints
+gsutil cp -r gs://{scanner_bucket}/config_validator_constraints /home/ubuntu/
+
 # Start Forseti service depends on vars defined above.
 bash ./install/gcp/scripts/initialize_forseti_services.sh
 
 echo ""Starting services.""
 systemctl start cloudsqlproxy
+systemctl start config-validator
 sleep 5
 
 echo ""Attempting to update database schema, if necessary.""",claim,"The code changes include the addition of a new section that downloads the latest Config Validator constraints from Google Cloud Storage (GCS) and starts the ""config-validator"" service",,,test8081_old.py,test8081_new.py
435,,,,claim,"The existing code was removing and replacing a line of code that was starting the ""cloudsqlproxy"" service.",,,,
436,22814,6662,"@@ -5,10 +5,10 @@ import pytest
 from mmdet.datasets import DATASETS
 
 
-@patch('mmdet.datasets.CocoDataset.load_annotations', MagicMock)
-@patch('mmdet.datasets.CustomDataset.load_annotations', MagicMock)
-@patch('mmdet.datasets.XMLDataset.load_annotations', MagicMock)
-@patch('mmdet.datasets.CityscapesDataset.load_annotations', MagicMock)
+@patch('mmdet.datasets.CocoDataset.load_annotations', MagicMock())
+@patch('mmdet.datasets.CustomDataset.load_annotations', MagicMock())
+@patch('mmdet.datasets.XMLDataset.load_annotations', MagicMock())
+@patch('mmdet.datasets.CityscapesDataset.load_annotations', MagicMock())
 @patch('mmdet.datasets.CocoDataset._filter_imgs', MagicMock)
 @patch('mmdet.datasets.CustomDataset._filter_imgs', MagicMock)
 @patch('mmdet.datasets.XMLDataset._filter_imgs', MagicMock)",claim,"The code changes in the GIT DIFF are related to the patching of the load_annotations method of the CocoDataset, CustomDataset, XMLDataset, and CityscapesDataset classes",,,test6662_old.py,test6662_new.py
437,,,,claim,"The original lines of code were patching these methods with a MagicMock, while the updated lines of code are patching these methods with a MagicMock() call",,,,
438,,,,claim,"This indicates that the load_annotations method is now being mocked with a specific return value or behavior, rather than being entirely replaced with a mock.",,,,
439,,,,issue,Code complexity smell detected with 1 of 1 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
440,25074,2178,"@@ -49,7 +49,7 @@ def readObjects(obj):
 	_startGenerator(readObjectsHelper_generator(obj))
 
 def generateObjectSubtreeSpeech(obj,indexGen):
-	index=indexGen.next()
+	index=next(indexGen)
 	speech.speakObject(obj,reason=controlTypes.REASON_SAYALL,index=index)
 	yield obj,index
 	child=obj.simpleFirstChild",claim,The code change in the GIT DIFF replaces an existing line of code,,,test2178_old.py,test2178_new.py
441,,,,claim,"The replaced line of code now uses the ""next()"" function to get the next value from the ""indexGen"" generator instead of the "".next()"" method",,,,
442,,,,claim,This indicates that the code is now using a different way to get the next value from the generator.,,,,
443,,,,issue,Code complexity smell detected with 2 of 9 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
444,29558,6295,"@@ -1,9 +1,9 @@
 # -*- coding: UTF-8 -*-
-#appModules/explorer.py
-#A part of NonVisual Desktop Access (NVDA)
-#Copyright (C) 2006-2019 NV Access Limited, Joseph Lee, Łukasz Golonka
-#This file is covered by the GNU General Public License.
-#See the file COPYING for more details.
+# appModules/explorer.py
+# A part of NonVisual Desktop Access (NVDA)
+# Copyright (C) 2006-2019 NV Access Limited, Joseph Lee, Łukasz Golonka, Julien Cochuyt
+# This file is covered by the GNU General Public License.
+# See the file COPYING for more details.
 
 """"""App module for Windows Explorer (aka Windows shell and renamed to File Explorer in Windows 8).
 Provides workarounds for controls such as identifying Start button, notification area and others.",claim,The GIT DIFF shows that the copyright notice has been updated to include additional contributors: Julien Cochuyt,,,test6295_old.py,test6295_new.py
445,,,,claim,The file header has also been reformatted to improve readability.,,,,
446,,,,issue,"Shotgun smell detected with 11 classes with too many external fuctions and class with most external function calls, `AppModule` having 30 external function calls",,,,
447,,,,issue,Code complexity smell detected with 3 of 30 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
448,13185,2914,"@@ -26,7 +26,7 @@ import struct
 import time
 from scapy.packet import *
 from scapy.fields import *
-from scapy.contrib.ppi import PPIGenericFldHdr, addPPIType
+from scapy.layers.dot11 import *
 from scapy.error import warning
 import scapy.modules.six as six
 from scapy.modules.six.moves import range",claim,The code change in the GIT DIFF replaces an import statement,,,test2914_old.py,test2914_new.py
449,,,,claim,The original line imported the PPIGenericFldHdr and addPPIType from the scapy.contrib.ppi module,,,,
450,,,,claim,The new line imports all modules from the scapy.layers.dot11 package,,,,
451,,,,claim,"This suggests a change in the way the code is structured or is being used, possibly to work with 802.11 (Wi-Fi) related functions or protocols.",,,,
452,,,,issue,"Shotgun smell detected with 12 classes with too many external fuctions and class with most external function calls, `VectorFlags_Field` having 9 external function calls",,,,
453,,,,issue,Class cohesion smell detected with 1 out of 19 classes having cohesion < 30%,,,,
454,21725,6872,"@@ -270,6 +270,7 @@ def eval_map(det_results,
              iou_thr=0.5,
              dataset=None,
              logger=None,
+             tpfp_func=None,
              nproc=4):
     """"""Evaluate mAP of a dataset.
 ",claim,"The code change adds a new parameter ""tpfp_func=None"" to the ""eval_map"" function",,,test6872_old.py,test6872_new.py
455,,,,claim,"This suggests that the function now accepts an additional argument, ""tpfp_func"", which is set to None by default.",,,,
456,,,,issue,Code complexity smell detected with 5 of 6 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
457,11479,3932,"@@ -1,10 +1,10 @@
-import StringIO
 from pathod import log
 from netlib.exceptions import TcpDisconnect
-import netlib.tcp
 
+from six.moves import cStringIO
 
-class DummyIO(StringIO.StringIO):
+
+class DummyIO(cStringIO):
 
     def start_log(self, *args, **kwargs):
         pass",claim,The code changes in this GIT DIFF involve both import statements and the class definition,,,test3932_old.py,test3932_new.py
458,,,,claim,"The import statement for ""StringIO"" has been removed and replaced with a new import statement that imports ""cStringIO"" from ""six.moves""",,,,
459,,,,claim,"The class ""DummyIO"" has also been changed to inherit from ""cStringIO"" instead of ""StringIO.StringIO""",,,,
460,,,,claim,This suggests a shift in the way string I/O is being handled in the code.,,,,
461,10682,1232,"@@ -827,8 +827,9 @@ class Series(_Frame, IndexOpsMixin, Generic[T]):
         Name: my_name, dtype: int64
         """"""
         if index is None:
-            return self
-        scol = self._scol.alias(index)
+            scol = self._scol
+        else:
+            scol = self._scol.alias(index)
         if kwargs.get('inplace', False):
             self._internal = self._internal.copy(scol=scol)
             return self",claim,"The code change in the GIT DIFF modifies the conditional statement that sets the ""scol"" variable",,,test1232_old.py,test1232_new.py
462,,,,claim,"Previously, if the ""index"" was None, the ""scol"" variable was set to the alias of ""_scol""",,,,
463,,,,claim,"Now, if the ""index"" is not None, the ""scol"" variable is set to the ""_scol"" itself",,,,
464,,,,claim,"If the ""index"" is None, the ""scol"" variable is still set to the alias of ""_scol""",,,,
465,,,,claim,"This change could potentially affect the behavior of the code if the ""_scol"" is not modified when the ""index"" is not None.",,,,
466,,,,issue,"Shotgun smell detected with 1 classes with too many external fuctions and class with most external function calls, `Series` having 323 external function calls",,,,
467,,,,issue,Class cohesion smell detected with 1 out of 1 classes having cohesion < 30%,,,,
468,,,,issue,Code complexity smell detected with 1 of 85 code blocks having cyclomatic complexity of rank C or worse (rank C is moderate to slighly complex with cyclomatic complexity between 11 and 20).,,,,
469,24797,6595,"@@ -376,7 +376,6 @@ def _init_profiles():
         private_profile.setter = ProfileSetter(  # type: ignore[attr-defined]
             private_profile)
         assert private_profile.isOffTheRecord()
-        private_profile.setter.init_profile()
 
 
 def _init_site_specific_quirks():",claim,The code change represented by the GIT DIFF removes a line of code that was previously initializing a profile setter for the private profile,,,test6595_old.py,test6595_new.py
470,,,,claim,This suggests that the profile setter is no longer needed for the private profile.,,,,
471,,,,issue,"Shotgun smell detected with 3 classes with too many external fuctions and class with most external function calls, `WebEngineSettings` having 30 external function calls",,,,
472,,,,issue,Class cohesion smell detected with 1 out of 3 classes having cohesion < 30%,,,,
473,19652,8253,"@@ -87,7 +87,7 @@ class SparkReader:
         try:
             response_handler(response)
         except Exception as e:
-            current_app.logger.error('Error in the response handler: %s, data: %s %'
+            current_app.logger.error('Error in the response handler: %s, data: %s' %
                                      (str(e), json.dumps(response, indent=4)), exc_info=True)
             return
 ",claim,The code change in the GIT DIFF modifies a logging error message,,,test8253_old.py,test8253_new.py
474,,,,claim,The original line of code was logging an error message with a format string that included a space at the end,,,,
475,,,,claim,"The updated line of code removes the space at the end of the format string, which should make the logging message more readable.",,,,
476,,,,issue,"Shotgun smell detected with 1 classes with too many external fuctions and class with most external function calls, `SparkReader` having 21 external function calls",,,,
477,,,,issue,Class cohesion smell detected with 1 out of 1 classes having cohesion < 30%,,,,
