{"msg": "If record_batch_size is not set in config.ini, this code will trigger a notice about an undefined value. I would suggest either wrapping the setPageSize() call in an `if (!empty(...)) {` check, or else providing a default value in the set call (i.e. `$config->Index->record_batch_size ?? 100`)."}
{"msg": "It looks like there's a new `isNavigatingTo( url )` selector for this very purpose so let's use this here instead. This way we just need to use the one selector rather than two. Let's assign that to a similar-named variable here (e.g. `isNavigatingToPostResetURL`) rather than the prop it's used with."}
{"msg": "I think im2col should only accommodate CPUMat."}
{"msg": "Can you explain why is this necessary? Is `snprintf()` with four integer arguments unsafe?"}
{"msg": "How likely would it be that the keyboard layout for the NVDA main thread differs from the keyboard layout of the currently focused app?"}
{"msg": "`zap.String(\"image-provider\", provider.Name())` should be in a same line."}
{"msg": "More clear naming: NONEXISTENT_ENABLED"}
{"msg": "make a SchemaTypeNameConverter.getTypeNameForEmptyType() and call that here."}
{"msg": "Great God, I have a question. This \".nebula_history\" file is used to save history commands. Is there a file size limit? When the file is large, does it take a long time to start initialization (loadHistory)? How did you think about this? Thx."}
{"msg": "Isn't this the same check as two lines above?"}
{"msg": "why not call `respond_to?(\"#{name}=\")` from the `if` line?"}
{"msg": "This was properly set above as `<target>.runfiles/<workspace_name>` (with a fallback to workspace root dir) but never used past this line."}
{"msg": "Are all these namespaces required for this attribute?"}
{"msg": "Looks like this is unused? Did you mean to call it when clearing the block journal?"}
{"msg": "Isn't this case handled as a custom tag in `Span.SetTag()` below? This switch is only for special tags that actually set `Span` properties."}
{"msg": "Are these imports needed (BiConsumer and Consumer)? If they are unused imports, then precommit will fail."}
{"msg": "Why are we catching and logging exceptions? By doing that we make it look like the job has succeeded and it will be removed from the queue - if we didn't do that then it would stay queued..."}
{"msg": "Is the concept of validators exclusive to IBFT2? I wonder if this category should be more explicitly linked to IBFT2."}
{"msg": "Spotless is configured to reject star imports. Please replace with explicit imports."}
{"msg": "Please turn the iteration order around (instead of `0...size` to `size...0`). The reason is that this sometimes skips indices when removing an item. You can therefore end up with feeds that have counter 0 and are still displayed."}
{"msg": "this is a behavior change. solid_subset=[] represents an empty pipeline where as solid_subset=None is the full pipeline"}
{"msg": "The PR description says the lowest on-demand request priority is `2^30`. Why the `-1` here?"}
{"msg": "Need an `if err == nil {break}` above this line so that we don't log/sleep if the retry succeeds."}
{"msg": "to reiterate my point above, this class is not the actual provided Promise, but rather something a user can provide a Promise to/with. I think a name like `PromiseProvider` is more appropriate."}
{"msg": "Why should audio and video elements always return `false` for `isHidden`?"}
{"msg": "`open_id_authentication` is no longer the name of the function, and it's not OpenID specific"}
{"msg": "All stories in this file also need to have the default padding."}
{"msg": "I don't think these asserts are necessary, because `subsurface_find_sibling` already searches in the parent. Or am I missing something?"}
{"msg": "I have forgotten why we thought this restriction is necessary. A user registers a Hive/HBase table with us but is not able to use the table with the registered name in DML. Will UPDATE STATs will be on the original name too (and update stats code will find out registered name and use it for Table_uid?). This was the registration concept is almost like an internal implementation idea, at some point could even be done by some utility program for all existing Hive/hBase tables, and the user need not be aware of it? I am struggling with a user would want to register a table, if they cannot use it by that name."}
{"msg": "Now that you handle this in `webenginetab.py` you can undo all the changes in this file."}
{"msg": "I think we should log the exception to a log file instead of printing it. The current behavior (not catching the exception) should lead to an automatic print of the exception to the terminal/console."}
{"msg": "do you really want to change the behavior on foreign key ?"}
{"msg": "I think \"Don't replace variables ...\" would be cleaner."}
{"msg": "I'd recommend using generateDataDiskName here as well -- might as well benefit from the safety that it gives to protect yourself from future changes to w.ID()."}
{"msg": "qq: do we want to include anything in the name to indicate that it is a position in the manifest?"}
{"msg": "Do you also need to check if Blockly.localConnection_ is non-null?"}
{"msg": "Not really a container, and it's not just about non-config data, not sure of a better description, @myronmarston ?"}
{"msg": "The desktop app will load this fine. on iOS I get `TypeError: undefined is not an object (evaluating '_$$_REQUIRE(_dependencyMap[8], \"stream\").Readable.Readable')` if I change it to `const Readable = require('stream').Readable;` or `const { Readable } = require('stream');` I get undefined errors from the stream on iOS: `[TypeError: stream.on is not a function. (In 'stream.on(\"data\", function (chunk) { return chunks.push(chunk); })', 'stream.on' is undefined)]` What am I missing?"}
{"msg": "this is needed since the chunk feeder shares memory across calls to the pipeline. this is in order to avoid multiple allocations. this change mimics the behavior of shed and localstore, and copies the data from the call into the in-memory store"}
{"msg": "wut. We can do this at the beginning of tests if we want right? Why are we depending on init?"}
{"msg": "Should be `@origin = element || origin || POINTER`"}
{"msg": "curious do we have an API to fetch an inactive flow?"}
{"msg": "This branch is not needed anymore because every `vnode` that passes through `h` in compat or core will have the `$$typeof`-property now ."}
{"msg": "Please import modules and not classes (except for Qt stuff)."}
{"msg": "The expected behaviour for `poll` would be to match what `Deque` does, which is: > Retrieves and removes the head of the queue represented by this deque As such, you shouldn't need the `RequestId` here."}
{"msg": "@MichaelDCurran, thoughts on adding a breakpoint format field attribute? It seems almost app specific, but I guess it does seem odd abusing line-prefix. Is there any more generic concept here?"}
{"msg": "Nice use of std::distance. I'm a bit worried about first += 9 though."}
{"msg": "Shouldn't this be `app.kubernetes.io/managed-by` as prometheus-operator manages this resource, but this resource isn't a part of prometheus-operator?"}
{"msg": "No need to have `xrc20` alias"}
{"msg": "the naming convention I'm been adopting if `_type` for instances of these classes. So maybe `context_config_type` is a better name for this fn"}
{"msg": "Don't call it GPU mining, call it `externalMining`, here and throughout."}
{"msg": "How about `Object.prototype.toString`? Or using the `typeof` operator?"}
{"msg": "I know @jzila suggested this, but I disagree: you're really not supposed to save a context in a struct. Can you get by with just saving the `Done()` channel instead? The `ctx` should continue to be passed around explicitly."}
{"msg": "maybe `toolkitVersion` instead? It doesn't necessarily have to be called that in the generated code, but in the view model classes, I think it makes it clearer that it is the version of toolkit itself."}
{"msg": "the response data was added intentionally in #612, i think we could keep the `setFileState` stuff here as a special case, at least for now "}
{"msg": "I'm not sure if this wanted to be `json:\"tags\"` (which I'd set in my PR) or `json:\"tag\"` that someone elses PR had set. Given that the rest of the fields had their JSON field name set to the same as the struct field name, I opted for `tags`."}
{"msg": "I think we might prefer generalizing the interface rather than creating an exception. Current design of `h2o_next_token` assumes the input to be a comma-separated list, and allows the caller to specify a different separator when parsing a nested list. As I understand, what we are trying to attain in this PR is to have a way of parsing a flat list of semicolon-separated list. Assuming that is the case, I think it would be better to change the API of the function to accept two separators (i.e. inner and outer), where for our existing use-cases `outer` would be `,`."}
{"msg": "Why it is now called `PaymentVersionV3`?"}
{"msg": "@cijothomas I needed a way to set the Exporter.ParentProvider when the Processor's gets set. Internal to SDK though."}
{"msg": "Talking through this scenario with @srividyacb and she's wondering if there should also be a check of `(from_trunk && node_based_graph.GetEdgeData(eid).flags.road_classification.IsLinkClass())` as highways with trunk classifications can also have this scenario."}
{"msg": "where does `master_certname` come from?"}
{"msg": "Do we need to put this on the Call? We only need the API communication between the Encoding and the Transports which is currently done through the Transport.Request. The Call is used by users right?"}
{"msg": "Huh, this seems weird to me... Surely the suspenders render was called again in order to get the new `<div>Hello second 2</div>` output... Imma take a peak at these tests to understand what's going on"}
{"msg": "Since this is just a helper function to create text, perhaps this could live in a helper? I noticed that we have a few other error/message creators in the application controller as well, but I think this type of function should be re-factored to be part of a helper."}
{"msg": "Why can the pool be null?"}
{"msg": "I think the docstring here should include the CLI arg `--alert.query-url` just to make it clear to users which setting this uses."}
{"msg": "Could you check the result content rather than just the number of search results please? For example with this test if the search engine suddenly starts returning \"latin n\" for both queries, we won't know about it."}
{"msg": "nit: I think that `workloadID` should suffice for this test... that's what we'd be issuing anyways"}
{"msg": "We should have a rule to detect identical catch branches"}
{"msg": "I usually set idea to never use wildcard import such as `import java.util.*;` Now i use setting from javaslang standard."}
{"msg": "Where is host['ips'] coming from?"}
{"msg": "Instead of storing the revert flag in the tracer is it possible to use org.hyperledger.besu.ethereum.mainnet.TransactionProcessor.Result#getRevertReason? (via org.hyperledger.besu.ethereum.transaction.TransactionSimulatorResult#getResult)? If a TX reverts without a reason do we get an empty revert reason or a revert reason with zero bytes?"}
{"msg": "nit: this is a package-wide constant so better to narrow the scope like `allEventsSign`."}
{"msg": "Might be cheaper to reuse the `null` assignment of line 313 and set `isHydrating` to null instead WDYT?"}
{"msg": "I think we should only need to do this for `:approve` since we are using `authenticate_user!` for all other actions and that checks for disabled client"}
{"msg": "I wonder if we should create new tests for header checks; here for instance we're mixing querystring and headers. Thoughts?"}
{"msg": "replacing the `1` with `io.SeekCurrent` may be good here"}
{"msg": "`ARM_32` is what clients define as an input to DR, and is not always defined internally: we use just `ARM` to mean AArch32."}
{"msg": "` $event->getAvatarFilename()` this function return `string` or `null`. In this place ` $event->getAvatarFilename()->getValue()` return `Fatal error `"}
{"msg": "Could be a timing thing here. When options are created they'll copy the ref for the current default propagator. If user sets through SDK the global propagator after that, it won't be reflected. Could leave it null here and then when it is used in instrumentation do `options.Propagator ?? Propagators.DefaultTextMapPropagator`. It would be a slight perf hit but it makes it hot-swappable."}
{"msg": "I believe these rules will be enforced both (1) on egress from a local workload, and (2) on ingress **to** a local workload. Right? I understand that we definitely want (1), but do we really want to enforce (2) as well?"}
{"msg": "Use `response.asJsonObject()` instead. Also, use `put()` instead of `putOpt()`, `null` as a value is fine."}
{"msg": "I think here we want the use of `empty()` to take care of empty strings. If you put `dql_filter: ''` in your YAML config ... this will add `->andWhere('')` and it will fail, right?"}
{"msg": "How come we need ``Dimensioned`` in the top-level namespace?"}
{"msg": "excess whitespace through plugin."}
{"msg": "Assigning capabilities to the field here is not the best idea. Semantically this field contains the capabilities returned by the browser after session start. So here we sould better amend capabilities and return them from `init` method to pass later to `startSession` method (that will assign the capabilities returned by the browser to the field)."}
{"msg": "The `_example` field should be updated to include an interpreter with an array value."}
{"msg": "Put this in the godoc of SupportedProtocols instead. Preferably we would just use one map though. Why not just use this one?"}
{"msg": "I'm not a huge fan of this overloading of the prop; accepting very different types of arguments for props like this can be confusing, and wasn't part of the IB. I understand wanting to import the SVG directly, but the IB suggests using `${global._googlesitekitLegacyData.admin.assetsRoot}${userInputSuccessImage}` as the `src`/`smallImage` value here. It'd be great to refactor this to accept components directly in the future, but let's do that all-at-once rather than this hybrid approach that makes the API less clear."}
{"msg": "I don't know about this aliasing and 'factory'. Previous version was rather straightforward: `location.CreateLocationResolver`. Perhaps `location.CreateResolver` would be even better? What do we actually gain here from moving DI to a separate sub-package?"}
{"msg": "I'm not 100% sold on this idea but I like it in general. Nice compromise between using the 'Date' constructor where possible and falling back to the pre #5880 behavior when it makes sense. However, instead of `Number(value) < 0`, let's do `Number(value) < MIN_YEAR` because `new Date('-2017')` is perfectly valid in JS and I don't want to break the date behavior."}
{"msg": "This function signature is a bit complicated, some parameters are IN type (stopLoop which is modified from outside), others are OUT (registeredEvent channel which is modified inside function) I suggest the following signature -> SubscribeToRegistrationEvent(identityAddress) returns registeredEvent chan of type (RegisteredEvent not int), Unsubscribe func(), error (in case of any error). That way caller can always cance subscription if needed and check for any errors. Also - unsubscribe function hides any internal details how subscribtion is really implemented"}
{"msg": "`.wav`?! cannot we use something slightly more modern and compressed instead? :) I dunno, like `.mp3` or `.aac` or `.ogg`..."}
{"msg": "Wouldn't a single signal call be enough? (without the boolean even)"}
{"msg": "I think contains on `Multimap` was broken - it should return true if one of the values is associated with the key? It that right"}
{"msg": "HIP runtime is compiled using a C++ compiler. So comparison to both NULL as well as 0 does not make sense. Just comparing to NULL is sufficient."}
{"msg": "The field `HttpServerErrorCodes` should be called `HttpServerErrorStatuses`"}
{"msg": "This isn't necessarily a year. It may be months, days, or hours. Can we return `intValue()` directly instead?"}
{"msg": "this is redundant because it gets logged immediately on entering the handleContainerChange function"}
{"msg": "We don't want to include the `IntegrationSpecHelper` for models...mind moving this line out of the loop to be `config.include EnvironmentSpecHelper, type: :model`?"}
{"msg": "Do we still need the upper bound `<3.9`?"}
{"msg": "Does this mean `vendor/bin/psalm` is not a symlink (or whatever equivalent Windows has for symlinks) on Windows?"}
{"msg": "@lpabon having a separate package name `aws_test` allows to test the package as if the tester was an external package. If the test package name is the same as the package being tested, the test package can also use methods and variables not exposed to the eventual user."}
{"msg": "The exporter should still be able to test these histogram instrument kinds, right? Is there another reason to remove these?"}
{"msg": "Why change the port from 0 to getAvailablePort()?"}
{"msg": "For me would be great don't repeat timeout sending in every get_locator call. Looks like it should be sent into LocatorsManager init. And possibly it should me non mandatory, something like that: `def __init__ (self, locators, timeout=60):`"}
{"msg": "I feel like since now we don't initiate the `opts.projectName` with `opts.ProjectName()`, which means `opts.projectName` and `opts.ProjectName()` they don't necessarily equal to each other, we need to also substitute all usage of `opts.ProjectName()` within `Ask()`, `Validate()`, and `Execute()` to `opts.projectName`. Otherwise if `-p` is set, `opts.ProjectName()` will get expired."}
{"msg": "why do we thinkg that an empty string is ok to return from this method? I think the null should never be passed in here in the first place"}
{"msg": "You missed `Write<T>(...)`! I'm kidding ofc."}
{"msg": "it's better to be : void attach(String name, Part part);"}
{"msg": "I didn't see where the IOException can get thrown, is this just to match the V1 reader?"}
{"msg": "We normally suppress this warning with `RDUSED_PARAM(forceRDKit)`"}
{"msg": "What if `Game::getPlayerByNameWildcard` had not been called before. It would not find a player, wouldn't it?"}
{"msg": "this parameter is only used in POST, please use `getRequest()->request->get('...');` Thanks"}
{"msg": "I don't quite get why there would be key errors: ``deep_mapped`` is a clone of ``self`` and ``k`` comes from ``self.items()`` so why would the key ever be rejected?"}
{"msg": "Could we use the Rails application's secret token instead? Do we actually need our own here?"}
{"msg": "`HostDataDir` is misleading. Can we rename it to something more relevant ? The constant should also be moved up and reused as necessary."}
{"msg": "I still feel like we are double-counting the outer IP header here (once in `defaultMTUGRE` and once in `ipsecESPOverhead`) but I'm not that familiar with IPsec."}
{"msg": "Not sure what benefit we gain by extending BaseProcessor here, as this seems to be defining a new OnEnd method. Could we modify MeasurementItem to have all the things, and then MeasurementProcessor can be simply extending BaseProcessor<MeasurementItem> (not blocking. just noting some observations in the PR :) )"}
{"msg": "This seems like a more appropriate message under `ListenAndServe`. WDYT?"}
{"msg": "rename? MiningCoordinator always exists"}
{"msg": "@luguanglong , Thanks for the fix, can you re-phrase it to sound better something like \"This OS version is currently un-supported by keadm\""}
{"msg": "should probably be called `_DeleteFpInfoAttr` because it removes it. Cleaning gives the impression it is still there. I would also move this to the end of the function `GetAtomicWeightsForFingerprint`."}
{"msg": "nit, can we use `VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR` here (granted it isn't else where, maybe worth fixing here or in separate PR)"}
{"msg": "Think it's worth extracting this to `Exercise#complete?`?"}
{"msg": "Is it really LEGACY_HELLO if we are using the most up to date HELLO? Perhaps `MONGOS_HELLO` would work here?"}
{"msg": "I am afraid this is going to cause problems on Windows where it is not uncommon to have injected threads (CTRL_SHUTDOWN, CTRL_LOGOFF, etc.) we have no privileges to suspend -- and thus retrying will just fail again, and with the new \"synchall failure is fatal and should kill the process\" approach it turns what used to work for us on Windows into process death."}
{"msg": "Is this behavior correct? It used to return `true`, which should map to `dokan.ExistingDir`. Was that previously a bug?"}
{"msg": "I looked and couldn't find any usage of `container` in any of the editor component files (js or hbs), so I assume this was used once and didn't get removed?"}
{"msg": "I just updated a number of sites using older versions of Roots onto WP 3.6 and this little function change was required. Multiple search bars were displaying when I used the search widget in a widgetized sidebar. Updated the roots_get_search_form as seen in this change resolved it for me!"}
{"msg": "Here is another concatenation which should be updated. Even though `Source:` and the link are essentially separate, it isn't RTL friendly. This would be another good use for `createInterpolateElement` I think so that we wouldn't need to include all of the classnames in the translation string (or extract them to a placeholder). That would allow us to use the `Link` component as well, rather than using its resulting HTML as a string which will be a pain to maintain if we were to make changes to the base `Link` component."}
{"msg": "I would add an overload `GetCancelledZeroTask()` which calls `GetCancelledZeroTask(CancellationToken.None)`. This is cleaner than requiring the caller to pass `default(CancellationToken)` or `CancellationToken.None`."}
{"msg": "I think we can remove this function, right? (duplicate with `ses_starter.py`)"}
{"msg": "You cannot move this here because it breaks detach. Just call `tty.Close()` before returning the error from start"}
{"msg": "minor: skipOSConfigMetadata, otherwise, the name sounds like a boolean"}
{"msg": "~~I think lines 65-67 should be moved into this else clause after `type = ...` Else, it is a bit confusing why we check the enclose type validity a second time~~ Nevermind, will do some refactoring, myself. But thanks for \"fixing\" this!"}
{"msg": "`sessions := endpoints.SessionsDTO{}` and using only `sessions` should be simpler."}
{"msg": "The purpose of this was to allow pushing filters into the manifest files if we ever use a format other than Parquet. I think overall this is a good change because we can add it back later. Just wanted to note why the unused argument was there."}
{"msg": "We should probably just move the `require 'bolt/plan_creator'` in `Bolt::CLI` to `Bolt::Application` so it will already be loaded."}
{"msg": ">20 [](start = 45, length = 2) Can we override this at runtime? Maybe it should be a command line option with default."}
{"msg": "Better call it `CleanUpMirrorInfo`?"}
{"msg": "Shouldn't we do a `reader_payload_pool_.reset()` here?"}
{"msg": "I'd prefer the nomenclature less tightly coupled to DRAND throughout. I played with renaming the `drand` package to `beacon` but it was too much noise in this change."}
{"msg": "I think I would prefer you declare `self._current_key=None` in the constructor and just return `self._current_key`. That way you can prevent anyone from overwriting `current_key` without needing to use `getattr` here."}
{"msg": "I would create a new method (NewStepWithDefaultTimeout?) for this purpose because timeout<=0 looks like a hidden logic"}
{"msg": "Don't you mean `import scapy.consts`?"}
{"msg": "`ctx` is unused in rollbackPrimary"}
{"msg": "U1000: func `fakeGetOk` is unused (from `unused`)"}
{"msg": "Because there is a \"k8s.io/client-go/tools/cache\" below, we can sort out all the \"imports\" here."}
{"msg": "Nit should be using `goimports` to format the import statements with standard libary imports first, new line, followed by non-standard library imports."}
{"msg": "Please remove this blank line - those are only used to group Python/third-party/qutebrowser imports."}
{"msg": "`insecure` is a global variable (from `gochecknoglobals`)"}
{"msg": "This is getting repetitive  maybe you could introduce an abstract test case with a `getExpectedUrl($providerReference)` method ?"}
{"msg": "I do not think returning `Value{}` is correct here. For example, `reflect.MakeFunc(...).Kind()` would return `reflect.Invalid` instead of `reflect.Func`. Therefore, I think this should panic instead."}
{"msg": "I think we should `return arn` as a fallback at the end of this function (otherwise the `['Resource']` entry below could become `None`)."}
{"msg": "nit: can we rename the interface to `wsFileDeleter`"}
{"msg": "We use a suffix \".AUTOCREATED\" for configsets, maybe we can use the same here?"}
{"msg": "This one won't be disposed. Should be (something like) `using var openTelemetry = OpenTelemetrySdk.EnableOpenTelemetry(` no?"}
{"msg": "We could pass `excessDomChildren` to `options._catchError` and only do this if an error-boundary catches the error. Not entirely sure if that's better."}
{"msg": "In php8 named parameters were introduced and now it is required to match called method parameter name when setting parameters by array destructing or call_user_func_array() etc."}
{"msg": "paramsNatOrigin doesn't include sUVtoST. I would just remove that definition for now"}
{"msg": "It feels like the test should be waiting for the prefetcher to shut down, but I don't have a great reason why other than that it might be confusing for debugging if there are still goroutines from old prefetchers lying. But I guess since `TogglePrefetcher(false)` doesn't actually set the prefetcher to nil, the queue shutdown method will still end up waiting for the shutdown to finish. If that sounds right, nevermind me."}
{"msg": "AWS Identity and Access Management (IAM)"}
{"msg": "I am pretty sure that this is infinite recursion as getAllProjects returns the project itself."}
{"msg": "Something I didn't catch before I merged this PR, is the hyphenated constant a problem? E.g. should \"data-lists\" be \"data_lists\"? @paulkaplan"}
{"msg": "Can you write the test as `if not (conf.use_winpcapy or conf.use_pcap or conf.use_dnet):`"}
{"msg": "Can we port this error msg to v2 too? This one is better, as it explicitly states what sources are allowed."}
{"msg": "The convention so far has been to require directly from the defining file (in this case `../../read_preference') . I think the concern has been mostly about the potential for circular dependency cycles"}
{"msg": "Shouldn't these options also include `@babel/preset-env`? Also I see you set `babelrc` to `false`, could we rely on our existing `.babelrc` file? Feels like some duplicate configuration otherwise."}
{"msg": "Nit: We can use `%s` since `disconnectReason` is a string."}
{"msg": "I think it's better to create a new example"}
{"msg": "The stages are correct, but the more forgiving `kAttachmentRasterOrder` should be used, based on a review of the spec. That should give the same effect of suppressing the false positive conflict between the DEPTH R/W and resolve. > End-of-subpass multisample resolves are treated as color attachment writes for the purposes of synchronization. This applies to resolve operations for both color and depth/stencil attachments. That is, they are considered to execute in the VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT pipeline stage and their writes are synchronized with VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT. Synchronization between rendering within a subpass and any resolve operations at the end of the subpass occurs automatically, without need for explicit dependencies or pipeline barriers."}
{"msg": "Repeating: I don't think this should be a core-wide global var. This should be isolated to arch/x86 or at least arch/, maybe inside getter/setters as mentioned above."}
{"msg": "right URL is like in cmdrunner, using search.maven .org"}
{"msg": "Shouldn't it be more specific, like \"gcppubsub supports all UTF-8 strings\"?"}
{"msg": "where would ` static startup_kernel_loader skl;` be instantiated? if it's not instantiated anywhere should this be removed?"}
{"msg": "@sarowe why was this volatile? It's fishy to see this as the only volatile field."}
{"msg": "Rename the registies to `BBOX_ASSIGNERS` and `BBOX_SAMPLERS` to avoid ambiguity. There is also a registry for dataset sampler."}
{"msg": "I'm not clear on whether this really should be the right behavior. Basically we're saying that a replace table will keep the existing location (as opposed to using defaults). I suspect we don't have create or replace with location semantics, but this is making some assumptions that a replacement is somehow the same as the old. If we were to go with id based pathing convention, this wouldn't work. I don't think this is an issue at this point, but it might make sense to push this down to the location provider."}
{"msg": "Not necessary, just write `time.Time{}`"}
{"msg": "What about integrations where we don't plug ourselved on OnMethodBegin?"}
{"msg": "how would you feel about keeping these tests to be more explicit and having them `assert not _validate...`? or is your view that that is too duplicative of the tests in `test_evaluator.py`?"}
{"msg": "why update Copyright ?"}
{"msg": "Since I believe state will never be anything other than 'expanded' or collapse, you can rewrite this as follows: `return row.treeNode.state === 'expanded' ? 'ui-grid-icon-minus-squared' : 'ui-grid-icon-plus-squared'; `"}
{"msg": "Nit: `Http` is redundant in this interface's name."}
{"msg": "what if I set SynchronizableEntitiesPrefix to \"a/b/c/d\" in config?"}
{"msg": "nit: This error message doesn't mention that the path is a directory, maybe \"Dockerfile path is a directory:%s, please provide path to file.\""}
{"msg": "Perhaps we can assume that profiling is enabled if ProfilingPort is set? And/or configure a default port and frequency, so we don't have to set three config vars every time?"}
{"msg": "This nil check won't correctly handle the case where forward_ssh_agent is set to false - it won't be nil but it should still not be set."}
{"msg": "I thought we decided on using the latest active version and not the one which is max ramped up."}
{"msg": "Correct me if I'm wrong, but is this necessary? Why not just use the value returned by `interpreter.Eval` and not mess with the scope? `interpreter.Eval` will return any produced side effects. This means TableObjects as well as any value resulting from any expression statements."}
{"msg": "Do we need this default? Since we aren't using a sql.NullBool or *bool, an unset column will be interpreted as `false` already... We don't set a default on our other bool fields (e.g. entry admin and downstream columns)."}
{"msg": "Can you update the `Usage` to be an absolute path as well? Something like `/path/to/firebug.xpi`"}
{"msg": "This class is missing the `MvxPlugin` attribute"}
{"msg": "What if `wxLang` is returned `None` from `getWxLang`"}
{"msg": "should this file ends with _test.go?"}
{"msg": "It's because of this change. `ss` was unused and it made sense in the program. However I haven't read the IPv6 RFC so I'm unsure of what it does"}
{"msg": "\"Flatten\" is a verb, so I'd probably go with `flattenedIndex` as a variable name here."}
{"msg": "If it can only be called once, perhaps a more appropriate name is something like `setMaskables`? `addX` sounds like you can add many `X`es by calling it many times"}
{"msg": "did you remove **params.qstring.method** intentionally? if so why?"}
{"msg": "Nice to see this `dataverse.rserve.password` fix rolled in."}
{"msg": "How about the following faster alternative that doesn't need `strlen()` at all: if (*tmp_optarg == '\\0' || *endptr != '\\0') { fprintf(...) ... This would treat the bus argument as invalid if it's either empty (`tmp_optarg` points to '\\0') or invalid (`endptr` points to something other that a '\\0'). Actually, the existing code would accept an empty argument and set the bus to `0`, so if (*endptr != '\\0') { fprintf(...) ... would be enough. The check for an empty argument doesn't hurt, though."}
{"msg": "I could be missing something here, but the `from` and `cc` are the same. On the test email sent to gatewaycommunicator, these values are different."}
{"msg": "I'm honestly scared because act is now a hard requirement for useEffect which it wasn't before... This could break some tests :("}
{"msg": "looks like this should be `return array(LegacyFormHelper::getType('form'));`"}
{"msg": "Maybe it would simpler to ignore opt_port if type !== 'number'?"}
{"msg": "You also need to add a similar check on line 992, there's another place where we check `length === 24`"}
{"msg": "nit: can extract the voteProvider as a local variable"}
{"msg": "[0] Not suggesting you change it here, but....kindof weird that there's just not an `assertFuncNotEquals`"}
{"msg": "why are we passing 'registryAddress' here? We probably should construct it together with bc. Registry is not something that change?"}
{"msg": "is 10 too small compared to 1000? consider sync chan is unicast only (vs block chan is broadcast + unicast), i would say use 200~400 for BlockSyncChanSize my concern is that this would potentially slowdown sync speed of full-node"}
{"msg": "A full parse of the plan here on listing the plans will be expensive from both a computation and IO perspective."}
{"msg": "Hmm... this feels like discovery should come first. perhaps `--discovery-dns-url`? @NicolasMassart any opinions on this or ideas on who it should be run by?"}
{"msg": "passwordModificationTime is no longer used - did the change drop a time check that should be restored? Or should the param get dropped from the methods?"}
{"msg": "Would it break here without trim? If so, can we do trim in Startup.cs so we don't need to add this code to every parser?"}
{"msg": "let's keep ActionByActionHash and delete getActionByActionHash"}
{"msg": "please use return type"}
{"msg": "will change to `storage_target`"}
{"msg": "This would be better as `cls.securitycenter_client`, to match what is being instantiated."}
{"msg": "This line should be removed as editController is not used from this context anymore."}
{"msg": "This is correct in concept but the method signature doesn't really communicate the same thing. In other words, if the function produces an output table where is it? Its not on the function signature. Can you explain where the output table is created?"}
{"msg": "This should be `output.colorBright`. Unless I'm missing some reason for adding a new theme variable."}
{"msg": "nit: I wonder if these should be moved down to where version is defined, just to keep them all in the same place."}
{"msg": "I think you should move this block (and the `envpw := os.Getenv(\"RCLONE_CONFIG_PASS\")`) right to the start of the function, then we can remove the duplicate code below"}
{"msg": "should calculate numEpochIn1Year = xxx and <= fairBankEpochNum+numEpochIn1Year a.foundationBonusLastEpoch just happens to be equal to 1 year now, but should not count on that"}
{"msg": "Duplication of line 28 Please refer your tox -e flake8 It seems that XStrField, XShortField, FieldLenField are not used"}
{"msg": "I don't really understand the `self._file_model.index(path)` as parent here - you use `self._root_index` for `rowCount` above, so wouldn't the parent here need to be `self._root_index` as well?"}
{"msg": "Oh ha hah, FNM_PERIOD worked out nicely there. Points for co-opting a file system convention."}
{"msg": "`plan.present?` and `has_active_subscription?` are equivalent. We can drop this change, while leaving the one on `app/controllers/application_controller.rb`."}
{"msg": "Why do you compare by nodeid? Simply saying d == e should be enough. Unless we have to objects in memory with the same nodeid. If that is so, something went really wrong."}
{"msg": "Nit, this could be json:\",omitempty\""}
{"msg": "nit: I like the idea! can we instead change the tag to `integration-remote` to be more specific? I feel like it's possible for us to use the `deploy` build tag for possibly another scenario"}
{"msg": "Would it help to use SCAN_COLUMNS as base to build SCAN_WITH_STATS_COLUMNS e.g like so `SCAN_WITHSTATS_COLUMNS = ImmutableList.<String>builder().addAll(SCAN_COLUMNS).add(\"value_counts\",....).build()` ?"}
{"msg": "You should also call `e.accept()` and `return` so the key press isn't processed further (as we're leaving insert mode anyways)."}
{"msg": "Hmm, this feels hacky. Maybe good enough if it makes the test more stable, but why is timing even an aspect here, since below it should wait for these two things anyway?"}
{"msg": "`status` is just one of the features, named as status is not suitable."}
{"msg": "I think you also want to update the condition to add ` || impl.Visibility == TypeMemberVisibility.FamilyOrAssembly`."}
{"msg": "`DepositToRewardingFundBaseGas` is a global variable (from `gochecknoglobals`)"}
{"msg": "Is there anything in particular that makes setting up the downstream rolebinding(s) to `system:k3s-controller` burdensome or confusing? This changes looks fine to me but it seems a shame to alias an embedded k3s controller. If we are doing this in other places that I am not aware of then we can dismiss this concern out of hand."}
{"msg": "nit: all other types in this project have full names, so maybe a better name would be `OperatingSystem`?"}
{"msg": "Do you want to add additional cases for `Bla.__b()` and `self.__c()`? (Just add additional classmethods `__b` and `__c` and the calls to `__init__`)"}
{"msg": "the recids is never changed after. So, it should contains the exact shown results, whatever are the rights for the user (admin or simple user, restricted collections...)"}
{"msg": "What is instrumentation name used for? I'm not seeing other classes use it, only a getter, constructor, and builder."}
{"msg": "This will always add the authorization header to the request object. Is this the right scope for these two lines? If username/password are not defined, it will encode 'Basic :'"}
{"msg": "Is this always how Bazel does paths? Would it be nicer to do `-DBAZEL_TEST_DATA_PATH=../com_github_google_flatbuffers/tests/` so this string is not hardcoded in the the source?"}
{"msg": "Who deletes the memory for the granteeList? (or the roleList for that matter)"}
{"msg": "This loop is missing a lock on subscriptions_mutex."}
{"msg": "I think we should keep that here and add a new method `isSyntacticallyFinal` that returns `super.isFinal()` (and can be used in UnnecessaryModifier). Otherwise the contract of `isFinal` is not respected"}
{"msg": "Is there a reason why we wouldn't want to check this every time? Why are we only checking for the footer and scroll bar when enableCellEditOnFocus is true?"}
{"msg": "You need to create an API for this class. This class should follow roughly the same dependency structure than RemoteAvailableInstallersPlayOnLinuxImplementation / RemoteAvailableInstallers. Maybe we could use a inner class here?"}
{"msg": "This should not be a case, right? If `run_id` is the same `workflow_id` can't be changed. Actually surprised that it is not part of a key."}
{"msg": "Please check also whether `null` occurs in the rest of `beforeChangeResult` array."}
{"msg": "I'd rather have the container process remove the FIFO after it unblocks. Then `start` can always `Exec()`, and you can catch the \"FIFO does not exist\" error and translate it to a prettier \"someone must have already started the container\"."}
{"msg": "`<= 64`? I just picked up what you said in #3981 (\"the CN field is limited to 64 characters\") but maybe there's something I don't know where the 64th character is needed (trailing dot or whatever?) Also this sounds like something that could be beautifully unit tested. Sorry for bugging you :grin:"}
{"msg": "I understand that this grabs a Licenses objects but what is the autocomplete method used for? What does this do in context of the auto_completes controller?"}
{"msg": "@sekmiller This method correctly strips the leading and trailing slashes (and also \".\" and \"-\"); But I thought the plan was also to replace any multiple slashes between nested folders with a single slash. For example, as implemented now, I can enter \"folder1///folder2\", and it gets saved and displayed like this, with the 3 slashes. I thought we wanted to sanitize it as \"folder1/folder2\"."}
{"msg": "This ends up requiring the `json` gem, right? Is there any way we can do this to be implementation agnostic (e.g. to let me use `yajl-ruby` for performance reasons (or because my app already brings in a JSON library)"}
{"msg": "revert back to 'TASK_TYPE_ACTIVITY_TIMEOUT'"}
{"msg": "nit: Personally I feel that it's cleaner to let `toAntreaPeerForCRD` to take `ingressRule` as a param instead of `ingressRule.From`. It can call `processRefCGs` inside the function and do the ipBlock/AG union within the function itself. It might not be worth the refactor though."}
{"msg": "How come we need case manipulation for the nextPageToken and not for pageToken?"}
{"msg": "App cache size is now managed dynamically by the `WebView`. This statement has no effect in the new framework."}
{"msg": "VirtualNode has a `hasAttr` function, any reason why you're not using it?"}
{"msg": "We can allow 7-char SHA, does not mean we want to show with 7-char in default, please change to `if len() > 10`, then cut."}
{"msg": "does this result in a 200 when the dataset is still inprogress/publishing not yet finalized? Seems like 202 is the right code for that (as it was) and the test should be watching for a 202?"}
{"msg": "Previously you could only order by the field you were searching by. But for full-text search, you can search across all indexed fields, and it didn't make sense not to have a sorting. For backward compatibility, the javascript code uses indexPath as the orderPath when no orderPath is provided."}
{"msg": "@martijn00 I'm not sure why we're keeping the object parameter and return type since this can be done by using MvxApplication<THint> with THint set to object"}
{"msg": "why do we create a time type here?"}
{"msg": "It's not about session creation config. It's about passing consumer config parameters to underlying transport - nothing to do with session itself"}
{"msg": "Why is there an \"enable\" in the param name? Couldn't it just be `overrideDebug`? Here are everywhere else."}
{"msg": "`published.recently_published_first` reads a little oddly to me. Is this the same thing as `Video.published.ordered`?"}
{"msg": "im open to explicitly checking NotSet value here but json logic already handles it so kept it this way."}
{"msg": "Bit worried about this. At minimum you should make a copy of the dict here to avoid modifying a user supplied variable."}
{"msg": "Is it better to create one before pruning? In case creation fails we don't want to delete the previous one. We create a new one, it is tagged as latest, so the previous can be deleted. `CreateLaunchTemplateVersion` returns the version created, how about directly trying to delete the previous version? Assuming the numbering is strictly increasing."}
{"msg": "How about `exists?(['domain ~* ?', domain.downcase])` ?"}
{"msg": "Consider making a constant (e.g. `MetricStreamConfiguration.Drop`)."}
{"msg": "@chuckatkins most places used an empty string for \"no type\", but a few used `\"unknown\"`. I've converted both cases to `Type::None`. Do you know why there was a distinction before?"}
{"msg": "Use correct, alpha sorted, include order. Correct order means: 1. Header corresponding to this source (i.e. `\"LatencyTestPublisher.hpp\"`) 2. C system headers 3. C++ system headers 4. Alpha-sorted external libraries headers 5. Alpha-sorted public headers from this project 6. Alpha-sorted private headers"}
{"msg": "after ||, no need inputs != nullptr"}
{"msg": "Should we add `ctx` to `BlockServer.Shutdown()` for this purpose? Would be nice, but I don't care too much."}
{"msg": "Duration_t at RTPS level must be serialized using fractions."}
{"msg": "we'd need to return a MongooseBuffer here instead of the Binary. lets add the subtype option to the buffer schema type as referenced in #1000 instead."}
{"msg": "I think `bypass_frontier_confirmation` conveys the intention better (default false as well)"}
{"msg": "As you only have `{}` as the format string (without anything else in it), this is the same as doing `self._doc.setHtml(html.escape(self._opt.text))`"}
{"msg": "Where would this be configured? In azkaban.properties?"}
{"msg": "Let's assume that on Linux `eventfd` is always available as a wrapper of the eventfd2 system call. It is supported since linux 2.6.27 + glibc 2.9, as well as from the ancient versions of bionic. In other words, it would be fair to argue that the pair would be available on practically all platforms that provide `pipe2`. Therefore switching from using `pipe2` to `eventfd` on linux unconditionally would not cause issues on our users."}
{"msg": "would be good to have a test for the case when `shutdown!` raises"}
{"msg": "Does upsert pass this check also?"}
{"msg": "Since you have defined this struct, I would suggest to replace all exist literal structs by this."}
{"msg": "The field name doesn't really capture what this option does. I think `mConfirmDiscardMessage` would be a better choice."}
{"msg": "what if `$media->getBinaryContent() == Symfony\\Component\\HttpFoundation\\File\\File` does `is_string()` return `true`? ping @greg0ire"}
{"msg": "Shall we maybe put this in a `const` like `backgroundTaskTimeout`?"}
{"msg": "I would prefer to set up space between classes in format pattern, `%s %s` and then use `trim()` to remove unnecessary whitespaces. This will also solve stripping whitespaces from the beginning and end of a string `$attributes['class']`"}
{"msg": "when Op is illegal should return here?"}
{"msg": "don't we need to remove the project version from installedVersions?"}
{"msg": "Something wrong with cast to `(Comparator<> & Serializable)`, need to be investigated"}
{"msg": "I think it should still panic for when there are no outputs; might be nice to special-case that though so the message is more explicit."}
{"msg": "Please make this a keyword-only argument by adding a `*` argument before `add_undo`."}
{"msg": "this doesn't sound pretty... I would rather we have a proper navigation for all modes - AFAIK TV remote navigation is very similar to normal keyboard, but maybe it just uses another key codes - those should be extracted in a single file and defined there depending on context then"}
{"msg": "After diffing the children we check whether the value got out of sync, if it did we update it. We also update the `_prevValue` to prepare for the next event hitting our controlled component"}
{"msg": "It provides a type called Node which is a fully functional bee client. This package is where the dependencies are injected. It is not just a glue-code, it is concept of node."}
{"msg": "I think this will change `''` to `'%'` unconditionally, i.e. there'll be no way to set `''` anymore. This should really only be used for values which make no sense anymore."}
{"msg": "Nit: this table's row key map -> this table's row keys map"}
{"msg": "Should not switch to `lvis_v1_instance` here because that base config uses ClassBalancedDataset to oversample the data."}
{"msg": "This doesn't make sense to me. What does RaiseSingleton mean? To me it sounds like a single object is being.. raised? Not sure."}
{"msg": "What's the benefit of having jobExecutorTests as a member variable? What do you think about making the method static? Afterall, it is a stateless method."}
{"msg": "there seems to be one KeyNode in kubernetes.go of PV.. would it make sense to use it?"}
{"msg": "We can assert on the existence of Outbounds through ClientConfig calls right? Since this is only for tests, do we need this function?"}
{"msg": "Since this is private and single use it should be un-wrapped inside of the two-arg dagSeed method."}
{"msg": "Why reference is converted to table?"}
{"msg": "should we implement pagination in the fake datastore so the server startup code that paginates entries for trust domain validation can be tested?"}
{"msg": "What mechanism will be exposed so the caller knows they're using the vectorized version?"}
{"msg": "Hm, taking a second look over this, this is why we have the object inheritance structure that we do. This could be divided up by having a custom determine_if_x86_64 in the pswindows/exec hosts and then a default method in hosts.rb. That way all the custom ps windows work is in a single location."}
{"msg": "I'm doubting if this should be `if (_layout.IsThreadAgnostic)`, as ThreadAgnostic stuff could be calculated on every thread. (and thus could be lazy). non-ThreadAgnostic should be calculated on the main thread."}
{"msg": "Please use only `Logger` instead of `org.slf4j.Logger`"}
{"msg": "Should this be \"no limiter drop\", since this isn't an absolutely essential activity for the stability of the network?"}
{"msg": "@joshyrobot, I think you can just use localeCompare with only the first argument and leave the other arguments out (here and all the other lines changed). It seems to do the right thing, and then we don't have to worry about these extra options."}
{"msg": "Can we have a `nil` exception check at `s.scope.ManagedMachinePool`"}
{"msg": "Looks like this needs to be updated. There is no need to remove `hadoop.` if Hadoop tables don't use this code path."}
{"msg": "This require isn't need anymore, right?"}
{"msg": "a bit weird to see payments crypto package inside connection manager. There probably will be services not having any relation with payments that will use connection manager. Thats why probably ping-ping by itself can be useful without any relation to payments.."}
{"msg": "I don't think this should enable xwayland, because it's convenient to toggle xwayland just by setting `xwayland` to `false`"}
{"msg": "What is the different between nw_tos and ip_dscp? Only high 6 bits vs low 6 bits and supported version?"}
{"msg": "I'm assuming that asSmarts & cxSmiles == asSmarts"}
{"msg": "Should we convert the entity name to snake case using `Doctrine\\Common\\Inflector\\Inflector::tableize` or similar ? Should a `snaked_name` or whatever be part of the entity metadata in order to use it for form names, ids, & other html attributes ?"}
{"msg": "Should be `client.outboundIp`"}
{"msg": "Must these `using` statements not go inside the `namespace` block?"}
{"msg": "check err or use gasPriceUnitIOTX, _ := if we are sure action.Core.GasPrice is correct"}
{"msg": "Just curious, was wait not used at all before?"}
{"msg": "We (even as admins) shouldn't override the User Preference settings like `email_master`, `email_posts`, `email_kudos`, `email_new_followers`. These all would be set by the user of their choice. Please do remove these attributes from editing//updating. Thanks!"}
{"msg": "\"Este :attribute j est anexado.\" sounds better."}
{"msg": "Personally I wish we didn't have a proto for every single little thing we do. RequestShardAction with an enum for the action type would be a lot cleaner imo, but I'm pretty sure that ship has sailed :) Just kvetching."}
{"msg": "Does this make more sense as `trails/_trail` now?"}
{"msg": "I'm wondering if we can actually base this on a `IMvxPresentationAttribute` instead of the base one."}
{"msg": "I think \"View artist\" is a bit more standard and expected. Or even \"Go to artist\" to take the Spotify terminology as-is."}
{"msg": "We must have a `fail ParamNotFound` here for cases where `@account.nil?`."}
{"msg": "Why are there only 6 pins here, while below it appears to have 8 ADC inputs? Are pin 2 and 5 used for something else on this board?"}
{"msg": "What is the drawback of not having this flag as a gating condition to report the metric?"}
{"msg": "`getProcessName()` will be less ambiguous, since Caddy has \"apps\" that it runs internally."}
{"msg": "Is there any way to not hardcode this given we know the size in bytes? The public API has the flexibility of being a Span. Should we maybe not do anything printing DML? The runtime allocates the buffer, but it's a \"scratch memory\" area, The delegate gets it passed in and they decide how to use it. Also, how is DML used if the feature is for macOS support?"}
{"msg": "How about just override the `buildFilter`? Passing another function here is a little weird."}
{"msg": "Just a thought, really. If it's a bug that can be probed for (and it can be - see Adrian's repro) then it could as well be a static initialization of a supplier of Deflater instances; if we probe for a buggy JVM, we return the wrapper. If we don't we return the Deflater. This way on non-affected JVMs nothing happens and if we do use the wrapper, we know the JVM is broken."}
{"msg": "This looks good to me. Personally, I would have the following for maximum flexibility: * convert peering_port from uint64_t to int. * Set the default value to \"-1\" to specify the value is not set * if the value is -1 then do `config.node.peering_port = network_params.network.default_node_port` That would allow for 0 to mean, select the port number yourself and be more consistent. But I am happy with the change as is, as well."}
{"msg": "What if we changed this to this? roleText=attrs.get('roleText', lambda:getSpeechTextForProperties(reason=reason,role=role)) That will prevent the function from ever needing called in the roletext case, and removes that if."}
{"msg": "this is a file we copy from gRPC, sp ideally it be fixed upstream as well.."}
{"msg": "maybe extra paren around `strncmp(...) != 0`"}
{"msg": "Rename to ForksSchedule? Maybe in separate PR."}
{"msg": "I have a sense that this will actually eventually change to check the actual date so that subscriptions can be deactivated in the future. But I mention that here just to keep you in the loop. We should not make that change now, because it's not needed functionality."}
{"msg": "What is the reasoning for using the negation of `isOption()` instead of simply using `isPositional()` to identify a positional param?"}
{"msg": "Okay, I still don't understand why you have to add `html_safe` here, and it still seems like a very bad idea. It will allow html tags in the title, and keep Rails from escaping literal greater-than or less-than chars not intended as HTML tags. It ought to work to just let Rails do HTML-escaing as normal, without any manual `html_safe` or `strip_tags` or whatever. I am not clear on what problem you are trying to solve, why the straightfoward approach does not work."}
{"msg": "Could you also remove the `defaultSamplingProbability` constant from `sampling.go`? It seems to became unused with this change."}
{"msg": "can you delete the `generateDeploymentStrategicPatch` function as well?"}
{"msg": "Don't use DCHECK to debug your code if it's the regular branch you need to handle."}
{"msg": "Reading this again it should prob prefer the `videoConstraints.facingMode` value over `facingMode` if the former was already set"}
{"msg": "Please do not modify the `config.Target` field, it should contain exactly what is extracted from the JSON files. Instead, you can either: * Add a getter to the `config` variable (`*compileopts.Config`), so you can simply call `config.WasmAbi()` to get the value. * Use a local variable instead. The getter would be slightly cleaner, as it matches the pattern of other configurations (`CGO_ENABLED`, `GC`, `NeedsStackObjects`, etc)."}
{"msg": "is it necessary to order by id as a second ordering? this will take place only when several new slider items are created without reordering (position is then null). Wouldn't be better to recalculate position after creating a new item? (right now items with null in position behave differently in administration and on frontend)"}
{"msg": "`ClaimFromRewardingFundBaseGas` is a global variable (from `gochecknoglobals`)"}
{"msg": "The VUIDs in this area are not great, but I think `ValidateQueryPoolStride` should probably be skipped if the query pool was created with type `VK_QUERY_TYPE_PERFORMANCE_QUERY`. VUID-02828 might be a better fit, but again, the existing VUIDs step on each other so it requires a bit of interpretation."}
{"msg": "Iguess you should use ToDbKey here"}
{"msg": "Do we need to change occurences where `setup` was called before?"}
{"msg": "We generally don't do parantheses in if conditions in Python. :) this could be better written as `if from_ts is None`"}
{"msg": "`ProvideConfig` was changed, looks like it will not compile for windows, and should be changed too."}
{"msg": "This does not look right, you're listing all private repositories.."}
{"msg": "An OPTIONS request should respond from _any_ path? Seems weird to me..."}
{"msg": "Do we need to distinguish between these two processes? I'm thinking maybe we can have a list of processes and treat them all equally."}
{"msg": "This is used only for out-of-line -- so yes this seems right to do for x64. Inlined is aligned separately at the end of prepare_for_clean_call(). There the ifdef is x86_64 or MACOS -- no ARM, why not? Also, please add || MACOS here to match the inlined."}
{"msg": "This should be `WorldType.isDeadmanWorld(client.getWorldType())` to be inline with the other WorldType calls."}
{"msg": "do we also need to change `mlvl_confid` -> `mlvl_confidences`>"}
{"msg": "I feel slightly that InterfaceExclude is not a clear name - bearing in mind that our config names are, to some extent, an external API. From an external point of view, a clearer name might be IPVSInterfaces. Then it would obviously make sense for the value to be something like 'kube-ipvs0', and it would be a matter of Felix's internal implementation that we choose to exclude those interfaces from our monitoring. Alternatively, if we want to keep this at a level that is more general than just IPVS, perhaps 'UnmonitoredInterfaces'? WDYT?"}
{"msg": "This should be `re.search` with a `^` anchor added to the regex, as what we want here is really any path starting with something like `E:`."}
{"msg": "finalizedHeader should be saved in FinalizationManager when we have FinalizationBlockHash != Keccak.Zero"}
{"msg": "Not using ExactName: true would remove the need for manually adding workflow ID as it would be added automatically by Daisy. E.g. 'disk-importer-2-import-ovf-7mn7h' was created from diskImporterDiskName above even though only 'disk-importer-2' was specified. ExactName: true should be used for resources that shouldn't include any temp prefix/suffix, such as disks that will be permanently attached to a created instance. Scratch disk is not one of them."}
{"msg": "ChannelImplementation field naming is not clear, is it some kind of standard? Maybe it can be named ChannelID?"}
{"msg": "Looks like there is a typo: `expireSnapshots` -> `removeFiles` or whatever name we go with."}
{"msg": "Thanks for looking into this. I think it looks a bit strange to have this check inside the for loop. Wouldn't it also work to initialize `idxCurrentSort` with 0 instead?"}
{"msg": "Is it possible to update/re-evaluate entire metatask object for every repeat? If we decide/need to use a repeatWith resources in let us say labelSelector(bad example) then we would have to add another logic to update those properties."}
{"msg": "User-code doesn't see the internal ADIOS headers anymore. This whole include block should just be `#include <adios2.h>`"}
{"msg": "`lodash` shouldn't be grouped under WordPress dependencies"}
{"msg": "This needs to be public so that Avro can call it."}
{"msg": "why did you remove `zip`? It is used!"}
{"msg": "before php8 \"goto\" was a reserved word and was not allowed as part of the namespace. Now test checks for validity of plugin namespace according to PSR-4"}
{"msg": "nit: I'm not sure it can be addressed in this diff, but it seems odd that NewOutbound supports TLS but NewSingleOutbound does not. As a somewhat naive user I would expect the only difference between these two APIs is how peers are chosen."}
{"msg": "Did you run gradlew tidy? Wildcard imports shouldn't be there, hence the question."}
{"msg": "Intention is to do the lookup here, I believe (where we can cache it). This would make the call non-pure function though. I'll confirm with lotus. ID addresses are the *only* addresses I expect to actually see here."}
{"msg": "Put this higher in the list, like after \"bind\", since I guess we're considering the max request body size to be kind of a native/fundamental feature, built directly into the vhosts."}
{"msg": "I think tmp is also leaked at the end of this loop if no error cases are encountered."}
{"msg": "Why not use StatusOr ? We can't ensure spaceId is greater than zero, especially when AdHocSchemaManager is used."}
{"msg": "I wondered why `buffer` was passed into `LookupPath`. What is happening here? Is `buffer[:0]` equivalent to `[]V4TrieEntry{}`, and hence `buffer` isn't needed any more?"}
{"msg": "Will this.flowFinished verify with every finished state stated in Status.isStatusFinished method? If so, no need to verify isKilled."}
{"msg": "Instead of showing the words \"symbolic link\" under the \"Size\" column, how about we introduce new icons for symbolic link to file and symbolic link to directory?"}
{"msg": "Didn't fix the problem. `href=\"\"` for SVG will still result in `undefined` getting returned by this function."}
{"msg": "As isCaret is False by default, explicitly specifying isCaret=False here is not needed, and is perhaps a little confusing. I'd prefer that anywhere in the codebase that isCaret is only ever specified if it needs to be set to true. Mirroring that of isFocus for setNavigatorObject."}
{"msg": "We can't freeze this and then add something to it in the next line. The `freeze` on line 43 is sufficient. If Rubocop flags this we need to exclude it."}
{"msg": "If FLAGS_meta_server_addrs is not empty, in which case \"toHosts\" return empty array?"}
{"msg": "There is a function to output a \"JSONBool\" string. That would be a good start for finding uses. But maybe just have a look at where we decide whether it is a numerical or not, thus wrapping quotes around its value. Then you have it all I guess."}
{"msg": "oops, it should be `data._scol` so that it respects the expression stored in Series. Let me fix it quick."}
{"msg": "I think `Rate` is a more precise and concise term for `PaymentPerTime`."}
{"msg": "I think this should maybe be: var limit = input.IndexOfAny(new[] { '+', '-', ']' }, **posNext**); You pretty much want to ignore any sign that is before the \"M\". But, if there is a sign somewhere before the M, and also after the M, you'd want to be able to find the sign after the M, right?"}
{"msg": "if `checkStockNotEmpty` returns a reponse, you must return it or your script will continue its execution."}
{"msg": "usually when HTTP_PROXY=\"\" (empty), proxy should be disabled. could you set it to NULL when it's empty string?"}
{"msg": "Can you throw an exception if width or height are both null"}
{"msg": "I don't think this is necessary. When options are used to set the split size in the Spark reader, it uses `TableProperties.SPLIT_SIZE` to pass it here. That should work for metadata tables as well, right? The situation that we need to handle in this PR is setting the default, like you had before. We just want to use a metadata split size so you can set it and not have the same split size used (by default) for both metadata and data scans."}
{"msg": "Maybe add `positional=False`. It does not need it more than the other parameters, but one must start somewhere."}
{"msg": "saw you're also doing this in `test_types.py`: `spark = _spark_context()['test'].resources['spark'].resource_fn(None)` since `_spark_context()` uses `spark_session_local` won't the above break the tests?"}
{"msg": "This variable is mostly unused, how about we make `NewTestCtx` return a pointer?"}
{"msg": "See above, this should probably remain `isFirstAdmin`."}
{"msg": "We can omit the underscore and just use `classwise`."}
{"msg": "please import it like `from kinto.config import template`"}
{"msg": "Can you add a TODO for loading the tarball of the pause image into Docker?"}
{"msg": "Is there any value in setting the process to null like this?"}
{"msg": "The translate library has a method to replace the variables."}
{"msg": "Any proposals how to make the naming somehow include the \"completed\" idea of this hook? `TlsHandshakeCompletedHook` or similar? Or using the `...Start/End...` scheme?"}
{"msg": "it introduces a lot of complexity to the state, can we flush straightaway or create a two level flush store where the questions are read form unflushed data?"}
{"msg": "There are two calls to getUrlFromRouteCache, but you're only urlencoding one of them. Is that intentional? Would it make more sense to do the url-encoding inside the getUrlFromRouteCache function?"}
{"msg": "What was the point of creating `user_block` if you're then not going to use it ;-)"}
{"msg": "Isn't this the default max width? In any case I would prefer to see these definitions in the css files."}
{"msg": "Hmm should we clean up container resources before task resources here? or the order does not really matter here?"}
{"msg": "thanks for adding this missing association"}
{"msg": "Should I remove this in favor of the HttpsConnectionFilterOptions overload?"}
{"msg": "This seems to return the registry_url. The more meaningful URL is the catalog URL, which is the URL the user specifies in `quilt3.login`. The username might also be as useful here if not more useful."}
{"msg": "Was the addition of `GasPriceOracleAddress` here erroneous?"}
{"msg": "I believe that you are going to have to do some work here to get the env var support for these values to still work correctly, otherwise they will get stored as :department instead of host_tags[:department]."}
{"msg": "My only concern with changing the node selector here is that someone else _could_ have built their own images for other platforms and set them to be used using the flag override on the controller, which in turn this change would break. Perhaps not changing the selector for acmesolver pods makes most sense, and then working on actually having support for Windows? wdyt?"}
{"msg": "Why do we need interface `InnerObjectWithSelector`, I searched the usage with this field, it seems nowhere use `GetSelectorSpecs()` methods provided by `InnerObjectWithSelector`"}
{"msg": "Do we need this `init` here? We have already called the `InitContext` in `StartModule` directly."}
{"msg": "Any reason we need to keep this package's `ChecksumAddress` type or can we get rid of it too?"}
{"msg": "Above the one that was picked was the Button* prefix, and here it's the Header* prefix. Maybe the Button prefix is more general."}
{"msg": "I might prefer changing: public Block FindPendingBlock() => FindBlock(PendingHash, BlockTreeLookupOptions.None); public BlockHeader FindPendingHeader() => FindHeader(PendingHash, BlockTreeLookupOptions.None); in IBlockFinder, what do you think?"}
{"msg": "Per AWS docs EC instances have the root mounted at /dev/sda1. This label should be skipped."}
{"msg": "I'm not sure it is a better way to address lose message, if wait here, edge controller cant process message, event from watching api-server will be lost yet, right?"}
{"msg": "Please keep the correct alignment, it seems broken now (at least in Github). Can you reverse the test (`if p.value_size is None`)? Also, do you want `6` when `p.value_size is None` or `x + 6`? Maybe, in that case, something like `lambda p, x: x + 6 + (0 if p.value_size is None else p.value_size)` would be easier to read. Or even easier: `lambda p, x: x + 6 + (p.value_size or 0)`."}
{"msg": "This should now be made into `if (it->second.empty())` ?"}
{"msg": "Do we need to worry about a race condition on this decrement (@The-Compiler)? I'm not sure how the python callbacks work, so this might not need to be something to worry about."}
{"msg": "Should these assert that the extracted `SpanContext` is remote?"}
{"msg": "typo: allow low quality matches."}
{"msg": "@thunterdb, can we increase the minimal version to almost the latest ones? I was thinking people will mostly use the latest version of mlflow"}
{"msg": "This is not the right exception class. There is an InvalidSelectorException class that covers bad locators."}
{"msg": "Would it be better to pass the dependency status as the parameter into the SQL string? In case the enum value is changed in the future, we don't need to change the code here."}
{"msg": "I originally had this PR only changing the R package, but then ran into this error > Error: [LightGBM] [Fatal] Cannot change metric during training This is thrown even if you aren't actually CHANGING `metric`. I think the change here in `c_api` is closer to the desired behavior, only throwing an error if the parameter is being changed."}
{"msg": "These changes are just to make cli_spec a little more readable for VS Code users, as there's a bug with the Ruby plugin's syntax highlighting when you use multi-line regex literals."}
{"msg": "kinesis-mock applies KINESIS_LATENCY to RegisterStreamConsumer actions so I added a sleep here."}
{"msg": "Only V1 or V3 is return from `getMetaVersionFromKV`. So where do we call `updateMetaV2ToV3`?"}
{"msg": "Somehow, this field does not seems useful for the exposed package api, only for the tests. Would you consider having an unexported field in `hostFactory func(context.Context, ...libp2p.Option) (host.Host, error)` instead to be set only by a new helper function defined in export_test.go. This is just a suggestion, not a hard requirement for the PR approval."}
{"msg": "As a first argument to these function, please pass the date that should go forward/backward. Also please clarify what is \"n\" (possible values, unit) and what is timeDuration (possible values, unit, as from your code it seems to be \"day\", \"hours\", etc. but from your example it seems to be milliseconds)."}
{"msg": "Should this be \"the new revision value\"?"}
{"msg": "The license header should be updated to the Apache one."}
{"msg": "Is there a good reason to keep this at the `pe_ver_win` name now that it's per-host?"}
{"msg": "Why delete `StartTime`? This `StartTime` was used to avoid the PID was reused."}
{"msg": "My concern here, is that if the dump_puppet_log also throws then we will lose the data about the teardown_exception."}
{"msg": "Add names to tuple elements ValueTask<(Keccak? Hash, AddTxResult? AddResult)>, should they both be nullable?"}
{"msg": "Huh? The point is that a cast isn't necessary"}
{"msg": "Wouldn't that cause the obsolete indexes to be downloaded over and over again? After all these are still stored in the repository."}
{"msg": "move `this.toolbox_.position();` to just after line 1477. Context: the if statement on line 1472 checks whether this is a toolbox with categories, and if so it populates the toolbox. Positioning the toolbox is a reasonable followup to that, and means you don't need an extra if. You may also need to call `this.flyout_.position()` after line 1483, which is the equivalent for the non-category toolbox."}
{"msg": "Let's not create new connection, but rather user `common.db` one"}
{"msg": "Can this use asset_path rather than defining an image_url helper?"}
{"msg": "Could we just extend PolicyRule with more fields? It was originally designed as the struct required by openflow client, nested structs seem not helping. And for the name of the fields, initialism should be uppercase, OFID and NPName doesn't look good, then maybe FlowID, PolicyName.."}
{"msg": "These defines cause issues in base.h leading to failing android builds. Locale independency is now set in multiple spots, in cmake and in base.h. The base.h uses feature test macros wrong. Feature test macros can be used to indicate that a feature should be made available. They do not guarantee that it is available. On the cmake side this is done by the check symbol macros (similar to what autoconf does). On the android side not. I would suggest removing this from base.h and define locale independent in gradle. It is available since android 21 I believe. Is there a way in gradle to set locale independent only if android api >= 21?"}
{"msg": "looks like you don't need to import first and count here anymore"}
{"msg": "1. Nit: We can have a general helper to identify if a region is pseudo region. We might already have one somewhere. 2. Does any type of ARN support FIPS? If not, we may just move this check in arn package?"}
{"msg": "`('train', 5)` and `('train', 1)` are actually the same."}
{"msg": "Would it be too complicated to refactor `currLimit` to be an `int64`?"}
{"msg": "Is the `codecs.register(lambda name: None)` gracefully handled by codecs? The lambda is expected to return a tuple of functions (encoder, decoder, stream_reader, stream_writer) (or a CodecInfo object), according to the docs. I've only checked python's built-in help, though."}
{"msg": "in this case, it could be either instrument name or the view name, which could be invalid. might be better if we can offer very specific message. (not blocking this, we can add this as a follow up,if needed)"}
{"msg": "I'd rather just send the parameter twice than break encapsulation here. There's already precedence with webelement IDs"}
{"msg": "May be worth making this more specific, to avoid potential conflicts, maybe `pagespeedDashboardWidget`? Or `webVitalsDashboardWidget`?"}
{"msg": "See above note re: blockNum synchronization."}
{"msg": "wonder if we could avoid doing named imports if we type aliased `backoff.Backoff` in the `.../agent/common/backoff` package?"}
{"msg": "I don't feel well about the `ALWAYS_UPDATE` option   &nbsp; sounds like a workaround. I can imagine that some of the plugins want to observe all options. Maybe, in that case, we can reuse the `CONFIG_KEYS` that would return an empty array for observing all settings and `false` for disabling observing at all? I just thinking aloud - Like `CONFIG_KEYS` sounds reasonable. We could support and maintain it in the future, even after implementing the \"observability\" to the MetaManager then `ALWAYS_UPDATE` ... I don't know :)"}
{"msg": "A \"tab difference\"? As in, there are tab characters somewhere? This disabling of clang-format for all the code here seems like overkill. Are you sure there's not some other solution? I don't really understand the problem though. Do you mean clang-format-diff?"}
{"msg": "Exit successfully. We served the help the user wanted."}
{"msg": "Had to rename this because `InitialPackage()` already existed."}
{"msg": "I'm not sure where your 31 comes from? I see 15 here and 2 above for pc and flags, for 17 total beyond the SIMD."}
{"msg": "If you want, you could change this to `allowCors(response` (like in \"version\", above) to allow Cross-Origin Resource Sharing. I'm sort of wondering what's returned if no API terms of use are set."}
{"msg": "I think replacing `.*` with `\\s*` from after the hash makes sense, but not the rest of the changes."}
{"msg": "Could you please elaborate the reason for not using `gkc_summary` like the values above? I ask this, because I assume what we want to collect is a histogram of event loop latency, and we use `gkc_summary` for collecting histograms."}
{"msg": "Unrelated to these changes -- we will probably want some special handling for genesis block validation."}
{"msg": "@janos I moved this back here, to avoid having multiple add peer calls being handled. I think it's either this or a global lock across the whole function. I think this is a better approach, especially since `hive.Broadcast` is blocking . We can remove the map entry on errors if needed. LMKWYT?"}
{"msg": "Minor: can we put the conditional outside of the partial?"}
{"msg": "How \" via service code in response to event.\"? I don't think we'll get in the no schedule option to the release. We should probably wait for some customer feedback first to make sure we're addressing different event-triggers the best way"}
{"msg": "`vecofstructs->size()` already returns a `uoffset_t`. So if you just change the type of `i`, you don't need any casts."}
{"msg": "Nit: Maybe merge this with the configProto check on line 208? Don't feel that strongly though, please keep separate if you prefer."}
{"msg": "I know we already did this in 4.0 so carry on, but I'm facepalming here we should've made an overrided setMessageHandler that sets ismaster to true when hello is present. Esp in 4.0 where we already have some overrides written. We can keep going here and maybe open a ticket to some effect of that solution"}
{"msg": "This was already in vkGetPhysicalDeviceDisplayProperties2KHR..."}
{"msg": "nit: I'd expect a public method called IsDockerEngineRunning to return a boolean yes/no, not the error message. Can we change either the return value or the name? Something like `CallDockerEngine`"}
{"msg": "We may follow the argument order: conv_cfg, norm_cfg, act_cfg."}
{"msg": "Do we have to restrict this to SVG elements? I think setting namespaced attributes on normal dom elements (while not as common) is still valid, so perhaps we can save some bytes by removing the `isSvg` check?"}
{"msg": "What happens if the minimum x coord is > 0? This will incorrectly set it as zero, right?"}
{"msg": "I think you want to look at current pending + batchSize and if that is > o.maxp no?"}
{"msg": "Should this be `codes.Error`? `codes.Internal` was an error status before."}
{"msg": "This kind of concern should be handled in the `TableMetadata` update methods. This is similar to `metadata.rollbackTo`, which not only sets the current version, but also updates the table history. I think that all of those methods should add the current object's `file.location()` to the previous metadata location list, if it is non-null. That way, the caller never needs to remember to update it."}
{"msg": "You just changed my life :) I grew very attached to this safe nav approach when working with Groovy years ago `obj?.method`. Glad to see its now a part of Ruby!"}
{"msg": "`causalConsistency` is already defined on `SessionOptions`. We do not need to duplicate it here."}
{"msg": "Put a space between `(array)` and `$this` and I'll merge it"}
{"msg": "You could add this to stack.go, which has similar functions (to avoid yet another small file). None of these are likely to be implemented considering what TinyGo is designed for."}
{"msg": "the class names `NotificationHolder` and `NotificationsHolder` are fairly difficult to quickly tell apart, particularly since they are often used close to each other"}
{"msg": "Sorry, should have been clearer, I meant adding this to the ``Histogram`` options one line above."}
{"msg": "Small thing, without the check above this will throw a NoNodeException if the path doesn't exist. Maybe this can be wrapped in a try/catch just for the NoNodeException, so that the more user-friendly message used above can be thrown instead: `throw new KeeperException.NoNodeException(\"No collection found at path: \" + path);` Just a thought, I'm not even sure it's worth it."}
{"msg": "Do we want to raise an error here instead of warning? Or would it be better to just see if Bolt happens to succeed, and let it fail on it's own if it fails? I'd lean towards raising an error, but that's different from \"removing support\"."}
{"msg": "This is kind of confusing with the other `filter_options`."}
{"msg": "Could the `deleteFromFavorites` happen when `head == nil` because it's not initialized yet somehow but not because TLF doesn't exist? I was concerned if this would make it possible in any way to have favorites seemingly deleted on a device while it's not actually happened on server."}
{"msg": "Could using the pointer-to-struct approach here cause confusion later? We've had several problems of that kind in the past. What does it mean if the struct is non-nil but its fields are nil? Is that even allowed? (libcalico-go question) Are there any validation requirements for this new rule addition; should it only be allowed if `Protocol == TCP`, for example?"}
{"msg": "More sentence, less list please. > Encoding of the handler. This field is optional. We don't need to mention exactly what it's used for because that list can expand (as it has already in this change)."}
{"msg": "there are changes that are upcoming to this section. For now, this works (to demo the usage of Gauge), and the changes to this section are coming as separate PRs."}
{"msg": "This is equivalent to stdout. Why not just replace stdin with stdout in `IsProcessBackground`?"}
{"msg": "Rather than test for nullptr, just treat the pointer as a bool, i.e. `if(p_jmsg[\"compress_method\"])`"}
{"msg": "I believe these need to be explicitly initialized in `proxy_send_prepare`"}
{"msg": "This is unnecessary. The declaration of `t0` on line 179 is still in scope inside the `except` block."}
{"msg": "The `border_color_`... properties don't support solid colors, not only this one. Maybe `@param solid_color` should be used instead of adding this note to every one of them?"}
{"msg": "Prometheus doesn't have concept of Meter (like OTLP does).. Trying to see if this is a good approach to use the meter name as namespace, to avoid name collisions, when same instrument name is used across multiple instruments, from different Meter."}
{"msg": "One or the other should be non-NULL. If segments is NULL, the alloc above will have size zero, which we do not allow (there's no header): it should assert in debug build. So there should be asserts that one is non-NULL at the top, and if there really needs to be some kind of defensive check down here, it should cover the alloc too."}
{"msg": "Maybe use specific values for all the watt.times fields? Even better, have a const for it at the top of the file?"}
{"msg": "nit: UNICODE_BRAILLE_TABLE or something might be a better name for this. IMO, braille-patterns.cti is a terrible name. This table allows Unicode braille characters to be used anywhere to produce raw dots."}
{"msg": "Why are we removing the option to skip machine pool generation?"}
{"msg": "Maybe \"For configuring which scheduler messages can be received.\"?"}
{"msg": "This code is a bit confusing. Should HttpParameterType set to the original one or it is always BODY?"}
{"msg": "Could you please add a `TODO` here that we won't need `docker.AuthConfiguration` anymore when we migrate to SDK's pull image?"}
{"msg": "Can you leave a note about why we are skipping regex tests?"}
{"msg": "This was the only caller of CreateRepo, so I inlined it."}
{"msg": "As this is already a child of `auth`, I think we can shorten this to `path`"}
{"msg": "This is missing the definition of `fetch_until_empty_page` - it needs to go in the config section above."}
{"msg": "I've gone with this group name, however I'm open to suggestions on alternatives!"}
{"msg": "should this be GOQUORUM"}
{"msg": "because of the above if statement will requires both ex_save and guid_save to be true, this code will always return 'example answer'. This should be revised with `example_answer.present?` and `guidance.present?`"}
{"msg": "Can we keep the other assertion too? I think it's helpful to ensure that the uninstall function was called too"}
{"msg": "`warn_with` prefixes the message with `WARNING:`, right? So this will put `WARNING:` twice. It would be good to verify all the warnings look good after this change, given how easy it is to make a simple mistake like this :(."}
{"msg": "FYI In the message queue I use the term \"stamp\" to refer to the time-like mark associated with each message. It's opaque to the queue/pool and should make no difference if the stamps and age limit were converted to seconds. So this could then become `Stamper` with `CurrentStamp()` method, no reference to \"blocks\" or height etc. The wrapper struct could be `StampedMessage. The interpretation as block height is deferred to the user/constructor that hooks things up, the \"business logic\". This is just an observation, take or ignore as you wish."}
{"msg": "This file could also be cleaned up/deleted. But lets do this separately after ensuring all the event logging has been ported to the current logmxevent_traf.cpp file completely."}
{"msg": "Would this make more sense as an option on an Issuer resource (specifically on the CA issuer) rather than as a flag? It's not ideal that we have a flag that _looks_ like it could be 'global' but is actually not IMO. Also, if Istio is reading the CSR object, is it possible for it to read the CA from the CSR itself too and append the two instead? Not sure if we ever decided whether to use annotations for this purpose @JoshVanL?"}
{"msg": "Because this acts as a coordination point between client and server, it should go in core.py instead of const.py (so eventually the server could use it to guarantee that it delivers dates in the expected format)."}
{"msg": "IMO this doesn't need to be in the `kbfs` repo. And I don't like setting the byte. We can always compare with the randomly generated `TlfID`."}
{"msg": "Thank you this is so much nicer than the old `Rails.configuration.branding['blah']['blah']['blah']` :)"}
{"msg": "For my understanding, the DATA manifest & DELETE manifest could share the same read / write path so I think we could use the common reader+writer. Is there any other reason that we need to make them separate paths ?"}
{"msg": "that change should be sufficient for avoiding the override of contact_us_url helper. The one defined at the .yml it is within a hash so no problem should arise."}
{"msg": "So if I understand this correctly the externalEntities should be computed and stored in GroupMember, while current code usage of GroupMemberPod will be migrated to GroupMember later?"}
{"msg": "`MPRester(os.environ[\"MP_API_KEY\"])` can be left simply as `MPRester()` and it will pick up the API key from the environment. What is the purpose of this file otherwise? Is it better suited for `dev_scripts`, or a test?"}
{"msg": "instanceID should stay the same for a AWSMachine?"}
{"msg": "This should be moved into the PrivacyBlockProcessor instead of adding the constructor here."}
{"msg": "nit: Remove \"insightfilestore\". I think \"insightstore\" is good enough and as I see we are using that name at other places too."}
{"msg": "It looks like you've removed `bisect_round_finished` but kept `bisect_round_started`. Seems a little odd that they aren't paired. Not sure if there's anything to do about that though..."}
{"msg": "why remove `Symbol`?"}
{"msg": "For different datasets, we may want to save the images differently. Sometimes the datasets are categorized into several subfolders, and we want to keep it when saving visualization results, and sometimes we just want to save all images in `out_dir`. An argument may be added to control the behavior."}
{"msg": "if `other` could have a guaranteed `0` byte in it, this whole `if` could be removed, and above you could just add `|| c2 == '\\0'` to get the same effect?"}
{"msg": "  _nitpick_ Isn't it now actually NotLogFakeHttpExceptions**Error**Listener ?"}
{"msg": "Why not just look for the \"type\" property instead of creating a ResourceType property?"}
{"msg": "should use `bc.config.Blockchain.ChainID`"}
{"msg": "I know we discussed if we should add in the resource_name to the hash, and I actually don't think it's required. The violation hash was recently updated (not released) to include the violated rule, so when the next release goes out, user's findings will get updated. The resource name doesn't hurt to have here, but not required."}
{"msg": "The variable name is also misleading imo. The width from the buffer comes from `wl_shm_buffer_get_width` (or a similar EGL thing), which is what gets encoded into `surface->texture->width`."}
{"msg": "flb_strdup() should do the work here. note: use Fluent Bit memory wrappers"}
{"msg": "We used to have a simple check for bucket and object names, we then decided to remove it and rely on the backend service to check for the name. Is there any reason to add an empty name check now?"}
{"msg": "it is mean -> it means PAAHead does not support test-time augmentation."}
{"msg": "@tofumatt, has it been changed intentionally? It doesn't seem to be required in IB, plus we haven't had `content-drilldown` before... If it has been changed intentionally, then should we update the `AnalyticsDashboardWidget` component to be use `content-drilldown` instead of `content-pages` as well?"}
{"msg": "`if (llvm::dyn_cast_or_null<swift::WeakStorageType>(GetSwiftType(compiler_type).getPointer())` ?"}
{"msg": "The `generateVariantWorkloadManifests` function below relies on the config manifests specified in Git, but it was passed with the newly created canary's manifests where their name was updated."}
{"msg": "This change suppose to resolve issue #2968. `loss_weight` should be of length 2, the second entry is ignored."}
{"msg": "Is there an easy way to check for conflict suffix to avoid false positives here?"}
{"msg": "`apply_prep.run_task` also seems like it can just use `@context.run_task`"}
{"msg": "the buckets are created via the stackset, customers don't need to provide them"}
{"msg": "This doesn't have the same behavior as before. Maybe you want `reverse_merge` (and it either just works or we implement it on `Blacklight::Solr::Request`)"}
{"msg": "This should be ` /$(ghc_find #{config[:ghc]})/ ` instead of ` /#{ghc_version}/ `, I think."}
{"msg": "[Super NIT]: i := serialNumber if i == 0 { i = mathrand.Int63n(...) }"}
{"msg": "I think it is better to describe in the release note that `rerender()` was removed."}
{"msg": "I know this is after the fact but imo blockAPI should be blockMiningAPI."}
{"msg": "it's just a pattern as it was. SystemAttributeCode should have it's own definition and validate by it"}
{"msg": "I think `Duration` is useful for this action and we shouldn't ignore it."}
{"msg": "Everything below here can be replaced with `return s.err, len(p) - len(s.dataForWriting)`."}
{"msg": "Again, we can also guard `g_host_hip_lock_arrays.atomic`, can't we?"}
{"msg": "Why has this timeout doubled?"}
{"msg": "Can you try adding back this assertion? I'd like to assert that the texture has been created in the same context as the renderer."}
{"msg": "Why is the respond_to check here?"}
{"msg": "@orklah are you sure it's the same as `$chars[$i]`? It looks like `$i` is changed above, after `$char` assignment."}
{"msg": "Since it's not working for linux, maybe leave the !linux in there as well?"}
{"msg": "We probably want to let the translation library handle the string replacement for these as well."}
{"msg": "I would avoid importing `felix/ipsets` package because this package is the windows equivalent and should be at the same level of `felix/ipsets`. We could add linux specific dependencies into `felix/ipsets` later and it will break Windows build."}
{"msg": "Nit: Should we add support for `int` and `uint` in the `values.New()` function? That would allow us to to handle all of these types in one case. Maybe there's a good reason why we don't do that already, but I'm not sure what it is."}
{"msg": "Since this may be the case, wondering if we should call the param `updated_at_i` or something so that we don't run into a problem distinguishing them down the road?"}
{"msg": "wondering why we need to join the paths here; seems evt.commandLine only takes whatever appExe is"}
{"msg": "1.not format code 2.failed but still continue? 3.\"UTF-8\" can changed to java.nio.charset.StandardCharsets.UTF_8.name()"}
{"msg": "I'm wondering if we should add this to a `utils` module in `astroid`. Porting the util to `pylint` doesn't make sense as we would need to duplicate the globals that are being used in the function, but importing from `brain` also feels weird. @Pierre-Sassoulas Do you have an opinion?"}
{"msg": "adding this `abstract` is a breaking API change. Even though I agree it makes perfect sense to have it, we can't break this API until PMD 7.0.0. We should revert this particular change. We could make a reminder ticket like we did with #463 for 6.0.0"}
{"msg": "I do not think we need to do a source code change to handle this. We could set the subnetwork to default to /32 (/128 for ipv6 ipv4-mapped)"}
{"msg": "This states very clearly that this is a derivative of Chrome and not Chromium. Do we need to extract an abstract `ChromiumCommandExecutor` and have both Edge and Chrome derive from that?"}
{"msg": "it seems to me, the issue lies on `isEnum()` itself, returning false for something that is an enum. I'd rather change it there than here."}
{"msg": "when send log failed, why update the last sent log id?"}
{"msg": "what was the problem with the previous order? `prepend` comes conceptually before `append`, i.e. `insert before` should be before `insert after`, I think"}
{"msg": "Consider naming this class `SpanExtensions` to follow C# conventions."}
{"msg": "used named path (`proposals_path`) instead?"}
{"msg": "Might we want a hook to allow emitting metrics or logs in the case of a permitted empty service header response (or similar UpdateSpanWithErr on empty service header in response if strict enforcement is desired by the caller)?"}
{"msg": "if using dict.get, this could just be `kwargs.get('protocol', 'https')`"}
{"msg": "what does it mean enabled?"}
{"msg": "Getting an error when calling with db.execSQL (in sqlcipher 4.3.0, pragma returns ok)."}
{"msg": "Maybe we could remove `\" \" + ctx.Tr(\"dashboard\")` completely?"}
{"msg": "Should we just null the Map and let the GC handle the memory? Clearing just removes items, but not capacity, so this would leave some memory on the table."}
{"msg": "I think it would be preferred to do `expect(helper).to be_analytics`"}
{"msg": "can we make tabAccessibilityIdentifier = null as default?"}
{"msg": "For which reason do we need to convert this to int here?"}
{"msg": "FWIW, wondering if the error is interesting here (I actually arrived at this code initially to change `supportsFreezer()` to return a `bool`"}
{"msg": "IMO we should instead fix the above call to do `long actualChecksumIn = Long.reverseBytes(in.readLong());` to get the actual checksum value? This way the below error message would also be correct?"}
{"msg": "I think we also need something similar for `rebuild-index`?"}
{"msg": "you should add this to the cover command too (but let's have a more general convo about whether it's a flag or config option)"}
{"msg": "instead of passing in pointer to empty struct, we should make it optional and support passing nil and use default cfg if it is nil."}
{"msg": "If `docs` is an empty array there will be an error"}
{"msg": "Is it really necessary to have the user specify this, or can the reverse proxy infer QUIC from the upstream's Alt-Svc headers?"}
{"msg": "Why do we need to make this optional? Isn't the idea of the builder that if you don't need this value you just don't call the `keyFilePath ` method?"}
{"msg": "if not behind interface then equally we can use SecureRandom.GetBytes directly, otherwise let us push it behind ISecureRandom so we can test with this class wherever used"}
{"msg": "Unfortunately I think the assumption of \"empty\" means the default dependency section is not correct. For a project.json file the default dependencies section is a shared section between all the different target frameworks and our TargetGroup being empty may map to many different target frameworks so they aren't really equated."}
{"msg": "nit: we can use `defer opts.spinner.Stop(\"Error!\")` after l.180 to make it slightly neater"}
{"msg": "It looks like the proto code needs to change the function name from set_name to set_type to be consistent."}
{"msg": "Could you please change this to `#ifndef __linux__`? That's when we use our own implementation instead of `posix_spawnp`."}
{"msg": "Technically the \"right\" variables to use would be the ones in `libgit/autogit_node_wrappers.go\", which define how the tlf types map to subdirs for autogit specifically. (They would have to be exported.) But this is fine too I guess, just a little dirtier."}
{"msg": "Should there be a template or something associated with this email? Right now it's identical to `notification_for_approver`"}
{"msg": "we can't remove functions as that would introduce backward compatibility issues in our java client. So we should also have a function with the original arguments: ` public Roles getRoles(String domainName, Boolean members) { return getRoles(domainName, members, null, null); } ` For the Go client we don't have a wrapper so no option but to update your client code as necessary, but for java we have the wrapper thus we always maintain backward compatibility"}
{"msg": "I'd recommend keeping this in `warn_deprecation` and not adding an override of `warn`."}
{"msg": "I think we should use a `blitz` bin instead"}
{"msg": "Why not make the ``derived_vdims`` flag (or similar, ``validate_vdims`` maybe?) an explicit argument to ``validate``?"}
{"msg": "nit: `as_index must be an boolean` -> `as_index must be a boolean`"}
{"msg": "What is the goal of that method ? And what are `$currentVersion` and `$newVersion` ? Are they Thelia or Module version ? :)"}
{"msg": "I don't think we need these. Simpler just to put `routetable.TargetType...` inline below."}
{"msg": "This check is a little odd, and will still mess up with empty strings `''` because empty string is falsy. Can we change this to `|| _this.getValue(path) == null`?"}
{"msg": "This change in particular is strange. I'm not sure why it would now be necessary. The previous default would've been true, and the default behavior without a new net-ssh version should be unchanged."}
{"msg": "While I think it makes sense to update the mapping programmatically, I don't see much value in exposing it as part of the table API. We want to keep the Table API small, so if we can handle this by using a separate API that consumes and produces JSON, then that is preferred. Also, we may have more than one mapping in the future, so keeping this decoupled also helps out for those use cases. For now, let's build a utility class to perform these updates. We can always add this to the public API later if we choose to."}
{"msg": "We would want ssmp to wake up every 3 seconds if there are no other requests to it and do some cleanup tasks. So, it is not clear why do you want to set this to 0."}
{"msg": "Looks like you've covered `-webkit-transform`, but what about `-ms-transform`?"}
{"msg": "should this be callerTypeTask?"}
{"msg": "Maybe make it configurable? Or store the actual level index in DB, making this binary search obsolete?"}
{"msg": "nit: you could have named it just \"TestCase\" (if django's TestCase was imported differently)"}
{"msg": "All the callers of `ExtractSomeIfAny`, always pass `true` to `synthetic_value`. Can we get rid of the extra argument?"}
{"msg": "Would it be too greedy to preg_replace `VuFind (\\d+\\.?)+` with `'VuFind ' . $this->to` anywhere in the string? This would update something like 'Finna (VuFind 7.1.0)' as well. Just a thought, please disregard if you'd like to keep it as is."}
{"msg": "BTW for brevity, you can remove `getZkStateReader().` here and elsewhere since ZkController has a convenience method for the cluster state."}
{"msg": "If there are no manifests, then entries should be `CloseableIterable.empty()`, not the manifest iterable. That doesn't need to be closeable."}
{"msg": "this class should be named `ArrayInitializationVerbosenessTest` to work"}
{"msg": "we don't want to set default values for this. Since it is the actual email, we want to make sure we are always passing in the `user` and `proposal` . we have a default value of `nil` for modifier because sometimes will update a proposal via `rails console` in which case there will be no recorded modifier."}
{"msg": "`numAccounts` is a global variable (from `gochecknoglobals`)"}
{"msg": "wait, i thought the cborstore was for state tree?"}
{"msg": "This logic is now duplicated here and in `_delete_temporary_files`... Maybe do it all at once - find temp files, delete them, and fix the logical keys?"}
{"msg": "How about name it with NullResponseTypeProcessor"}
{"msg": "You can't rely on QtWebEngine being available - but why do you need to import this here at all?"}
{"msg": "Couldn't you just write this as an if/else or a guard clause like on line 87? Just seems a bit weird doing this conditional assignment for essentially an if/else."}
{"msg": "These changes, while harmless, were no longer needed with newer versions of System.Console thanks to @ianhays"}
{"msg": "While All make some sense here it doesn't make a lot of sense in the SkipOnFramework context. I wonder if we really need to expose anything more here. You can just blindly use 0."}
{"msg": "Actually, this is not correct. Package `cmd/bee` doe snot have any notion of commands or even libraries used for them. It is as simple as possible, just calling the function from `cmd/bee/cmd` which actually implements commands."}
{"msg": "While we're here, this line (and a few others) should be `customThreadPool.submit(() -> IOUtils.closeQuietly(overseer);` I have no idea why we're creating a collection and a stream for a single object."}
{"msg": "IMO, this is the wrong way to associate a model with a trainer... Why the string when you actually have a trainer object?"}
{"msg": "Wondering if we can directly put types here & for other similar ledger_processor items like rai::block_type::state"}
{"msg": "As `DeleteFiles` is not only used for prune this function deserves its own file. Maybe something like `delete_files.go` or `parallel.go`?"}
{"msg": "Can you flip it back (here and in other places)? It is more natural to represent \"10 seconds\" as `10 * time.Second`."}
{"msg": "To me, this is sort of weird to have a completely separate page for this. Can we extract the different stuff (github, videos, downloads) presentation from the top of `app/views/purchases/show.html.erb` and reuse it on this page. I worry that we'll change things with fulfillment or copy and have to change it in multiple places."}
{"msg": "`short_version` and `version_info`"}
{"msg": "I'd actually recommend not putting this in the `SampleConfig`, it's intended more for properties that are inherent of the discovery format. Add a method `getSampleAppName(String apiTypeName)` to `SampleNamer` and override it in the language specific `SampleNamer`s if needed. Then assign it in the transformer."}
{"msg": "Do we need to export these new functions? I thought the plan going forward was to keep util imports separated to make circular imports less likely and possibly do better chunk splitting. Since only new code references these files, we can scope the import to the specific files."}
{"msg": "Rails will autorequire `acts_as_editable` once it encounters the constant `ActsAsEditable`. Thus if we move `ActiveRecord::Base.send :include, ActsAsEditable` from _acts_as_editable.rb_ to this file, the require line will not be needed anymore. Instead of requiring the file ourselves, we will let Rails do it for us. This fix will also remove the need to explicitly require `acts_as_editable` in _mock_active_record_base.rb_."}
{"msg": "I think we should name this `grpcMethodName` or similar. That is what this refers to, right? The fact that it is upper camel is an implementation."}
{"msg": "What if .. appears, but not as the first character, eg \"errors/../../../../../../../../../../../\"?"}
{"msg": "Nit: other statements use all caps for SQL reserved words. Should this be `SHOW TABLES`?"}
{"msg": "Do we need this? isLuaIdentifier() is used not only in extract_next_token() but also in extract_prev_toke(). I wonder whether the change for isLuaIdentifier() has an impact on extract_prev_toke() or not. If you are not sure, keep isLuaIdentifier() as is. If you are sure, could you write your conviction to the commit log."}
{"msg": "This line should actually be: `if c.KubernetesProvider == config.ProviderAKS && c.Wireguard.EncryptHostTraffic {` because we only need to tweak the MTU like this on AKS."}
{"msg": "Would this be possible: `addCNP` has already processed the CNP to an internalNP, just hasn't added this internalNP to the `internalNetworkPolicyStore`. In this case, `reprocessCNP` will skip processing this CNP and `addCNP` will just add the \"old\" internalNP to `internalNetworkPolicyStore`."}
{"msg": "See above, the `isValidWebDataStreamID` implementation from before is actually correct. What we need here instead is a new `isValidMeasurementID` function."}
{"msg": "Should be an error... it is important for the admin of the server attempting to create the leafnode connection to see the error asap."}
{"msg": "I think we can just change this to `Split` instead of `SplitN`. I don't think we need to limit the number of parts in the tag."}
{"msg": "So this is actually a mistake that I introduced without realizing it, and have known would need to be fixed when we get here  . The format of the ports directive is \"host:container\". We only want the host port to change, not the internal container ports. The ports variable probably needs to be a map which maps external -> internal ports."}
{"msg": "An alternate approach would be to always initialize shardInfo with a dummy (non-nil) value, which could protect against other uses before it's initialized (I couldn't find any though). But I can change it to do it that way instead."}
{"msg": "Why did you remove these packages from the prelude, will your new functions not work without this change?"}
{"msg": "I believe this will break common resources, as they are defined in a common file, but must generate classes in service-specific namespace, so using protoFile to determine package of the generated class would not work, because common_resources namespace does not match service namespace."}
{"msg": "The other properties are in `commit.status-check`, not `commit.status-checks`. Could you remove the extra `s`?"}
{"msg": "In the case of accounts generated by API clients, what name gets put for the `inviter_name` or `invited_by` record?"}
{"msg": "@kvwalker should this method have `ignoreUndefined` supported as an `option`?"}
{"msg": "we dont use a `sugaredlogger` anywhere else in clutch, just curious why were using it here?"}
{"msg": "Not evident from looking at this diff but the queue is already being cleared four lines below."}
{"msg": "do we really need the `Ready` call if startup fails midway?"}
{"msg": "Two things to make the code more error-proof and simplify it: 1. To be safe, this should be: `! isUndefined( decimal ) && ! isUndefined( decimal.value )` 2. The other clause that you changed below can be combined with that since `decimal` isn't used anywhere else, and so there's no point to re-check whether it's not undefined. In other words, this should become: `! isUndefined( decimal ) && ! isUndefined( decimal.value ) && 1000 > number`, and then you can remove the `decimal = decimal.value` assignment and replace it with line 146 (assignment of `readableNumber`)."}
{"msg": "Wouldn't composite outbounds compose the transport, such that it would still be represented as a single transport?"}
{"msg": "Should we put in which account we were trying to look up?"}
{"msg": "This is debug-build-only: we want a release-build notice. SYSLOG takes the name w/o the MSG and no _STRING. Args are via events.mc specifiers."}
{"msg": "String valStr = (String)val; valStr.substring(0, Math.min(valStr.length(), prefixLength)) Make it clean."}
{"msg": "Sorry, this still makes no sense.. the value of any union or enum is simply a name integer constant, it has nothing to do with the `BASE_TYPE_` enum. This value should be `0`. In particular: `Every union has the NONE field, which always has value 0`."}
{"msg": "Looks like getAzkabanURL() is added after concrete Alerter (Emailer)::getAzkabanURL(), so that Override annotation is needed."}
{"msg": "The above 3 lines can be written as: `mask = segms[i].astype(bool)`"}
{"msg": "I don't think you can call this optional unless it's a pointer - remove this?"}
{"msg": "I think we also need to add the rollupGroupExprList() to the cache key. If we rebuild the list above from a ValueIdSet on line 418 above, it is probably going to be in the same order, regardless whether it was ROLLUP(a,b) or ROLLUP(b,a)."}
{"msg": "can use `getParamTypeName` instead"}
{"msg": "Why send the parameters? They're accessible directly from `$this->request` so there's no need to inject them in the method"}
{"msg": "Tiny nit: I would prefer `not selected_file` or `len(selected_file) == 0`, as if choose_file starts returning, for example, tuples instead of lists, this won't break."}
{"msg": "private static final, and it should be located in raidsoverlay, as it's not needed in the plugin. also the name could be a bit better, DC_SCOUT_RAIDS or similiar."}
{"msg": "attr_value is 128 bytes?"}
{"msg": "I don't believe this is the right fix. If startTime comes after closeTime, then it means some other event triggered invocation of this code path like workflow timeout. In this case we should still try to fire the cron on previous value so we should just return start the delta between startTime and closeTime immediately."}
{"msg": "Need the `solrClientCache.close();` further down in the method be removed since a shared cache is now used?"}
{"msg": "Panic here if `exp.Target.StressChaos.CintainerName` is nil."}
{"msg": "This allows for some hacks like returning an iterator that matches more docs than the scorer. I liked the previous approach that returned an iterator better."}
{"msg": "Aren't there already logs for this from the underlying file system implementation?"}
{"msg": "`retrials` isn't the word you intend. I think you mean `retries` and to that end, can the var name just be `max_retries`?"}
{"msg": "Value in product should contain 255 characters or less."}
{"msg": "since we're calling the file .rspec-local, I think we should rename local_options to project_options and use local_options for .rspec-local - WDYT?"}
{"msg": "similarly here, are the these cursors not being closed when the client is closed?"}
{"msg": "Or maybe `func(args ...string) Policy` to make it dynamic in case of any future policy that may require more than one args."}
{"msg": "It is `$JAVA_HOME/bin`, not `$JAVA_HOME`, which should be added."}
{"msg": "is this a common rule to wait one extra second after ajax? I'm thinking about moving this extra wait into waitForAjax method."}
{"msg": "I'd prefer a name less chat-specific, since later on we could have other app types that want the same behavior. Maybe `IdentifyAndAllowTrackBreaks`?"}
{"msg": "Maybe `LibraryDetailsPanelType` would be clearer."}
{"msg": "Do you think the godoc should mention that all delimiters will be suffixed with `/`?"}
{"msg": "what if I want to load my own, a different, data URI in Private Browsing mode? I do this often on desktop (e.g., `data:text/html,&times;`). admittedly, I wouldn't expect this to be done by a non-developer, but this will certainly cause a minor bug."}
{"msg": "For all these MYSQL queries unsigned is required. I have tested again and without unsigned these queries are failing."}
{"msg": "Whole thing could be collapsed to `data['config']['transport'] ||= 'local' if target.name == 'localhost'`."}
{"msg": "Let's allow translators for this string to be translated: `self.show_warning(_('Invalid Public key'))`"}
{"msg": "This needs to work with `role=form` too."}
{"msg": "Not really introduced by this PR, but I don't recall why these have to be pointers, while `PodSelector` / `NSSelector` do not. Do you know the reason?"}
{"msg": "Is there a reason why we are ignoring the ackDelay if it would result in a value smaller than the min? Why not `max(sample - ackDelay, minRTT)`?"}
{"msg": "I think that for cloud variables, the default value in the prompt should be the variable name without the cloud prefix; this is slightly different from the scratch 2.0 behavior, but I think would ultimately lead to less confusion. Proposing code changes below:"}
{"msg": "Is this the correct place for this assert? Does this routine rely on it being 64, or was this only for testing?"}
{"msg": "We need to add indexes here on both `subscriber_id` and `changeset_id` or things will quickly collapse as we build up subscribers ;-) What I would suggest is a unique index on `[:subscriber_id, :changeset_id]` which will also make duplicate entries impossible, and an ordinary index on `[:changeset_id]` for finding the subscribers to a changeset."}
{"msg": "Could we move this to a class for Hadoop configuration properties, like `org.apache.iceberg.hadoop.ConfigProperties`?"}
{"msg": "Issue is that `currentMode = newMode;` is called at the end of the method. Passcode screen will come up, but since the activity thinks current mode is biometric check we don't check passcode when submitted."}
{"msg": "I think we can remove the timing for export env vars"}
{"msg": "I'm wondering why this isn't <openssl/md5.h>. Seems like one would have to copy the md5.h file into the source tree somewhere for this to compile cleanly. Maybe you meant to use angle brackets instead of quotes?"}
{"msg": "We don't need to cast to client here. (well, from spell gem not AA etc) We should also make sure the charm is a casted spell before calling SendSpellBarEnable."}
{"msg": "This is not an `id`. This should either be `invocation_time` or `invocated_at` to be consistent with what we are using elsewhere, and also to better rerflect the column's DateTime type. Also, within the context of this table, there is no idea of what `invocation` is. I know that `scanner` may not be future-proof, but we need to find something more descriptive. Perhaps one possibility is to call this `audit_time`."}
{"msg": "should the 'Receiver' be the clawback address in case of clawback transaction?"}
{"msg": "Having it above kept the block info in the cached changes, which could end up confusing things quite a bit."}
{"msg": "If the execute_task returns an `ExecutionResult`, the passing of a block would be unnecessary. Instead, the `ExecutionResult` could be presented to the user in some standardized way (iterating over the result of each node, etc.)."}
{"msg": "There are two question here: 1. If you only modify lastLogId, but the `iter` is not modified, I really don't know whether we can succeed. 2. We will check the if the term has changed in `replicateLogs` (if rollback really happen, the term must have been updated), so I really doubt whether the problem should be fixed in this way. Or you could describe it in more details."}
{"msg": "Hello @jDolba, I have reviewed your PR and I found one problem. `$step->getFormType()` can return `FormTypeInterface`. You cannot use interface as key for an array. Can you find some better way to fix this? Thank you."}
{"msg": "This breaks tests on IE because this will import an `esm` bundle. For that reason `sinon` is available as a global in our test suite and never imported. The global is aliased to the proper `es5` file."}
{"msg": "this field is added so that we can find disk name by device name from attachments"}
{"msg": "First determine if the namespace already exists, so it's clearer that it's handling namespaces that aren't included in the `c.config.Namespaces`"}
{"msg": "What does this contain? Is it PVC namespace or is it openebs?"}
{"msg": "Shouldn't we throw an exception if the context is null instead ?"}
{"msg": "Rename the directory, match_costers -> match_costs"}
{"msg": "I don't think this should go in the model tests, since it is done in the resource. `PaginatedDeleteTest` seems more appropriate"}
{"msg": "It would be better to just change RWD to throw IllegalStateException if you attempt to execute a command after quit (unless it's a second call to quit())"}
{"msg": "These two tests were causing us to use too many goroutines with `-race` using the default block change size, I think due to prefetching."}
{"msg": "Is that `try..except` block really needed? I mean, when it could fail?"}
{"msg": "nit: I'd probably rename this to `BATCH_SIZE_RANGES`, to use a slightly more descriptive name."}
{"msg": "Lets call this getConfigSetService and maybe rename the field now (or later)"}
{"msg": "Did you mean to leave the print statement?"}
{"msg": "I would do `new BN(Interpreter.LOCKTIME_THRESHOLD)`"}
{"msg": "can we use `github.com/pkg/errors`?"}
{"msg": "@sfricke-samsung -- thanks. saves a few atomic ops which is always good :) The TODO is there to track that this object is storing *both* vectors of shared_ptr and plain pointers to the same data. The shared are to ensure scope, and the plain are for backwards compatibility with existing code that consumed a plain pointer vector (and some code that still does). That should be cleaned up."}
{"msg": "I would throw an exception if the type is not solved"}
{"msg": "I'm confused. This exception is thrown when `HeurekaCategory` is not found in database. But this exception extends Http exception. Why? What has database search common with http? If the only reason is that it is the same in the whole project, then fine. But then we have even bigger problem - we don't know how to use exceptions."}
{"msg": "Hmm, I wonder if this should just be e.g. `--with-grub-2.02` instead. (Not sure Autoconf supports periods in these switches.) Today's modern GRUB is tomorrow's ancient GRUB. :) Or maybe we should be specific about the feature this is enabling, which might be safer given that each distro carries so many patches. E.g. `--without-grub-efi-16-suffixes`?"}
{"msg": "Add a GetSerialPortOutput method to Instance that way you don't need to access the client, also it makes the call cleaner as you don't have the odd i.Client and path.Base(i.Project), path.Base(i.Zone)"}
{"msg": "Hmm I'd rather not support this option going forward - it seems like a one-off just to work around this particular issue. Would it be fine to just remove the `deepStackTrace` option? The rest of the PR looks great - I love the idea of switching to sets."}
{"msg": "I wondered why `buffer` was passed into `LookupPath`. What is happening here? Is `buffer[:0]` equivalent to `[]V4TrieEntry{}`, and hence `buffer` isn't needed any more?"}
{"msg": "Feel better not to expose our internal implementation in API/CRD, so no need to mention agent here. Consider: EnableLogging indicates whether or not to generate logs when rules are matched. Default to false."}
{"msg": "All other places that access `notificationIdsInUse` are in methods with descriptive names. We should do the same here. Maybe `markNotificationIdAsFree()`?"}
{"msg": "keep as `ErrNotFound`, it is the same convention as in other packages"}
{"msg": "Would it not be more sensible just to move setting of the title to later in the method rather than duplicating it here?"}
{"msg": "why not do it in `reclaimExpiredSessions`? and `pushSessionToCache` can delete"}
{"msg": "So now we are checking twice, both here and in `weaveCIDRsFromConfig`. Not great. I suggest changing the `ok` return of `weaveCIDRsFromConfig` to a messsage (or error?) instead, which we can then log."}
{"msg": "An alternative to setting format to the default in Package.__init__ would be to set it in create_package. I think we can assume all packages are created by create_package, but not necessarily by build_package."}
{"msg": "No need for those with `super-init-not-called`, as pylint already only turns things off for this function and it's needed for the entire function."}
{"msg": "Instead of doing this let's add another function similar to `hasZeroData` for selecting the `reportArgs` since this is all sourced from selected values. Then `hasZeroData` can use this internally, as well as the component itself. Since this function would be internal just for the purpose of avoiding duplication, we don't need to expose it on the component the same way though."}
{"msg": "This line was useful for auto-completion, I think it should be re-added with specifying the var name (`$exception`) and simplifying the FQCN."}
{"msg": "This currently violates the Law of Demeter. Using `checkout.plan_name` is the quick resolution."}
{"msg": "is there any scenario when `$temporaryFilename` can be null?"}
{"msg": "this is for the `boolean isRoot = root == rowType` check, which seems to be on purpose, but maybe you could double check whether using ref. equality here is still wanted? Same for `SparkTypeToType`"}
{"msg": "No need to damage after `roots_drag_icon_update_position`, this is already done in `roots_drag_icon_update_position`"}
{"msg": "Have you tested exporting to ONNX with `device=cuda`?"}
{"msg": "Do we also need to validate `envName` flag then? `appName` and `envName` are used in `initLogsSvc` which are called by `svc logs` from within `Execute()`"}
{"msg": "@LukeTowers I think I would prefer that we don't force it, on the basis that: a) some people would be opting to configure their web server to protect against this kind of attack and would disable this feature in October CMS to get a small performance increase. b) it might be a bit misleading to say that `app.trustedHosts` set to `false` disables the feature entirely, just to have it be overridden here regardless."}
{"msg": "I prefer starts with `Failed to xxx`, how about `Failed to perform health check on xxx`?"}
{"msg": "This now causes `LessSpecificReturnStatement - src/somefile.php:9:32 - The type 'non-empty-list<5|string>' is more general than the declared return type 'non-empty-list<string>' for takesList`, which seems correct to me. The type `non-empty-list<5|string>` contains the type `non-empty-list<string>`. Thoughts?"}
{"msg": "Note this should be `delay` instead of `scale` here. I'll fix this in my branch."}
{"msg": "This would also change back to /var/www/html/docroot if we go that way."}
{"msg": "no need for this. Devise provides us with `current_user` and `user_signed_in?` helpers."}
{"msg": "Would `Object.equals(capability.getName(), NAME)` would be safer, as you wouldn't have to do null checks?"}
{"msg": "TestNormalize... I would also split them"}
{"msg": "Just thought, using spinlock (busy wait with compare and swap) that generates 2 random numbers inside rlock. We know that collisions are rare and we don't need that \"large\" write lock really but lock namely for \"rand\". Or least use a separate Lock (Mutex), namely for \"rand\" (wrap it into method). Mutex will use some sort of spinlock as well but it may use some linked list to make it more fair."}
{"msg": "Can we grab it directly from `__pkginfo__` as that is the source of truth for the version?"}
{"msg": "This looks weird. `isCloud` should define if it is a cloud or no. Here it does it partially, and it can be overriden by protoPkg value (which also an argument to this function). Please make sure that isCloud completely defines the cloud thing. (i.e. it an be as straightforward as moving `protoPkg.contains(\"cloud\")` from here to the place where `assembleGoImportPath` is called."}
{"msg": "Declaring fileflags to be of type LobTgtFileFlags would eliminate the need for all this casting. And would be safer. (Not a show-stopper though.)"}
{"msg": "Typically we would add something to the build system environment to differentiate this; also is there an alternative that can be used with older OpenSSL? Other folks who are committers will need to decide if it is worth supporting an older and likely quite vulnerable (to hacks) OpenSSL library."}
{"msg": "`readActiveBlockProducersByHeightTests` is a global variable (from `gochecknoglobals`)"}
{"msg": "I believe this is what we want to rearrange: this in.skip() should not be happening here, in the open method, but in the setOffset() method itself. Because we want to be able to change that offset after the initial open. The setOffset() method will need to throw an IOException, if it's called while the InputStream is still null; or if the skip() call itself results in an IOException()"}
{"msg": "In case the method is `void`, there won't be any children and `getChild(0)` throws. We'll need to check with `isVoid()` for that case. I'll update this when I merge."}
{"msg": "If the yarpc.Interceptors wrapper will be added to any user interceptor, why not do it transitively. Can save one step for users. Same apply to filter."}
{"msg": "I added this here because people cards (which depends on cardBuilder) had this added in blurhash. Not sure when this is used though cc @JustAMan"}
{"msg": "We have a bit of a convention where imports are split into three blocks: first Go standard library, then imports from outside the repo, then imports from inside the repo."}
{"msg": "It was @lodejard who initially suggested this pattern. I think that it had something to do about prioritizing future writes even if there was a pending write operation ready to handle the newly requested write. I'm not sure I fully understood the explanation for having up to 3 pending write requests, because only having one queued write at a time still makes sense to me. I'll talk to him about it."}
{"msg": "We have cli --online_weight_clear in cli.cpp"}
{"msg": "How is this message used? Can we remove the \"crashed executor/container\" part which is an implementation detail?"}
{"msg": "if just need to do something after createInvocation just override and call super first is enough?"}
{"msg": "There wasn't any special reason for this to return a pointer, right?"}
{"msg": "Why the need for a `ConcurrentHashMap`?"}
{"msg": "`expect(resources['Notify[local pid]']['events'][0]['desired_value']).to match(/(\\d+)/)` seems clearer."}
{"msg": "can you change the field name here to \"InterfaceAssociationProtocol\"? same for the Config struct in agent/ecscni/types.go. i think it's better to keep the field name consistent between agent and acs payload"}
{"msg": "Can we add some description for this field?  "}
{"msg": "Should its name be Time or Duration? I can see them both."}
{"msg": "So one question I have is why is the error coming back from `buildReplicaPositions` not an `Assign.AssignmentException`? Is it because it is wrapped in a `SolrException` from the remote node?"}
{"msg": "I like it but maybe the better name will be EthGasPriceConstants or EthGasPriceEstimatorConstants? but Constants not Config"}
{"msg": "There is also `v1alpha1.CertificateRequestKind` I think?"}
{"msg": "Can we rename it to make it less confusing? Instead of \"sender-gcpbroker\", maybe name it to \"retryable-sender\""}
{"msg": "So looking at the definition of the `literal()` function in this class, it seems it's possible for it to return null. I guess it's not a concern as we would get NPE on the above call at line 136 when trying to call `.to` if `literal()` returned `null` before even getting to this part that calls `literal().value()`, but something I thought I'd bring up. Perhaps something we might follow up on in another issue or possibly I just missed the workflow that makes `literal()`'s result non-null by the time this `bindLiteralOperration` is called."}
{"msg": "@guolinke Don't you mind to rename this variable to `DATATABLE_INSTALLED`, for the consistency with other variables (for example, there are `PANDAS_INSTALLED` but not `PD_INSTALLED`). Also, `DT` is a little bit confusing: sometimes `dt` is used for `datetime`."}
{"msg": "`RecordPipelineShaderStage()` might change `topology_at_rasterizer `, according to shader code, so we should check `pInputAssemblyState `first."}
{"msg": "Should we just inline the assets here? I can't think of an advantage to having them in a separate file."}
{"msg": "detectStaleEndpoints to be more specific?"}
{"msg": "Make it `internal` if it's just for testing."}
{"msg": "`purpose` and `coin_type` and `account` would mimic the BIP-0044 wording, but it's up to you."}
{"msg": "Is this the critical change? It does seem wrong to use Select() instead of Checked = true. Not sure why that would pass sometimes and not others, though."}
{"msg": "Maybe we could provide our own `configure` function that includes `logger._logger = None` because I don't see a use case in kinto for using `reset_logger` besides configuring the logger."}
{"msg": "I must be missing something, but why does not having a node cache imply not neededing to re-embed the block changes, in particular? Isn't it just the fact that we don't do any writes?"}
{"msg": "Are these changes from `class` to `struct` breaking if called from an older version of `Datadog.Trace.ClrProfiler.Managed`?"}
{"msg": "`isDestroyed` is a function, not a property. This condition will always return false."}
{"msg": "Why are we adding these versions?"}
{"msg": "Would this work, as a one liner? `setTimeout(window.location.reload, 5000);`"}
{"msg": "Can you move `crypto/tls` into the block at the top with all the other stdlib imports?"}
{"msg": "You say on the issue that something has to be receiving while the messages are being published. But here it's possible that the publish goroutine starts, and maybe even completes, before Receive is ever called."}
{"msg": "how do we know that the step in question is an approval type step?"}
{"msg": "Should update the user input address and filter modes and pass those in fillSamplerDescriptor ?"}
{"msg": "This object should be in `lib/music/show.rb` and you should also wrap this object in the `Faker::Music::Show`."}
{"msg": "I think logic will have to move to bolt since the vague discussions around bolt run plan --noop is that it would just skip any tasks that don't support_noop rather than error. This is fine until we actually elaborate that though."}
{"msg": "The true clause of your condition, can't this just be c._nextState since `assign({}, c._nextState)` is equal to returning c._nextState, or am I misunderstanding something here?"}
{"msg": "I know there's only two values but I find it a bit confusing that it's true/false. Could you change it to a string enum with values \"portrait\" and \"landscape\"? Then when calling printToPdf you can just do `landscape: Setting.value('export.pdfPageOrientation') === 'landscape'`"}
{"msg": "Should this be negated? `!@options[:hosts_file].nil?` Otherwise it'll enter the `if` statement and `nil` will be passed to `HostsFileParser.parse_hosts_file`, which I'm assuming is bad."}
{"msg": "nit: allocate the list using the number of processors."}
{"msg": "should the group_id = \"{0}\" be group_id = %s You'd still keep the {} for the group_members_{} for the tablename but make the filter clause parameterized."}
{"msg": "Minor: maybe move the above to a `#fiscal_year` method?"}
{"msg": "You should use the current directory instead - it's a temporary directory that will get removed when the test is done."}
{"msg": "I don't think this should be changed since on the reactive side we don't support anonymous users."}
{"msg": "This can't be merged with any usage of `require 'pathname'` in lib, it's not always available and we don't want false positives for people (where they don't realise they needed to requite it). Its also unnecessary, no other formatter uses it to look up failure locations. See the exception presenter etc for how we format lines."}
{"msg": "`StressChaos` does not contains a field .spec.action"}
{"msg": "I like that we have this attribute here. However, I think the way we use it right now might be confusing in the future. For example, when only camunda admin is checked, this exception will be instantiated with a message and `missingAdminRole` is `false`. I think that is counter-intuitive. I would expect this exception to have `missingAdminRole` set to `true`. With this explicit information, the exception message could now be generated inside this exception class with the text block that is currently used in the authorization manager. We could maybe generally reuse that text block then also for the case where a user is no admin and also has none of the required permissions. I haven't tried it myself but I think it would be great if we could streamline those things a bit more if we're working on it now. Let me know what you think.  "}
{"msg": "This attribute was intentionally private. - lets force usage of factory `NewIdentityManager()` - lets ramake to `NewIdentityManager(keydir string)` -> `NewIdentityManager(keystore keystoreManager)`"}
{"msg": "will this not make it possible to use a zip file, e.g. on other importers who do not have to support it ?"}
{"msg": "What if the app's signal handler, executed at pre-syscall for epoll_pwait, executes its own epoll_pwait? For that matter: what happens natively if that happens? I would not expect the kernel to keep a stack -- does that clobber the kernel's stored pre-syscall mask?"}
{"msg": "Nit: missing a space. I think we should phrase the new content a little differently. \"It is important\" isn't very clear. I think it should be \"offsets will be returned in sorted order.\""}
{"msg": "Even if `pthread_create()` for `ocsp_updater_thread()` fails, `h2o` can continue to serve. But I'm a little worried whether `h2o` should continue to serve in this case. How about you?"}
{"msg": "1. `0` is redundant. 2. We should save result of `strings.LastIndex(DbCfg.Host, \":\")` to a variable and reuse."}
{"msg": "Do you envision \"new\" servers not supporting header, or is it more a way to test mix of old and new? If so, we could make it a \"private\" (non exported) option."}
{"msg": "I'm not sure about changing the flag name. unit is more accurate, but for I think for most people asset is also a fine name to use."}
{"msg": "Which windows gets activated? A random other window?"}
{"msg": "Can you change this to `ResolvedUsersMap` and build a new map with both readers/writers? That way, we get the nice side effect of not exposing the internal map of the handle, and simplifying the callers a bit."}
{"msg": "Do we still support handshakes without SNI present?"}
{"msg": "maybe just do a separate implementation of the pool for openvpn case? It's a bit confusing having two methods here."}
{"msg": "how is it possible to have a `topology` that is falsey when we had to call `topology.connect` in order to get here?"}
{"msg": "Do we need this expectation? If we don't call this method on `PlanFinder` there's no way for the `10` to be returned. Seems somewhat redundant. What do you think?"}
{"msg": "Ah that's how it's happening, it's probably using the `require_relative` in the optimised one and that counts as a different require to the bare one."}
{"msg": "Should we put a TODO here to route the http.Transport through here?"}
{"msg": "Sorry, could you explain more about the issue? Doesn't ComputerName already default to local computer? > -ComputerName Specifies one or more Hyper-V hosts on which the virtual switch is to be configured. NetBIOS names, IP addresses, and fully qualified domain names are allowable. The default is the local computer. Use localhost or a dot (.) to specify the local computer explicitly."}
{"msg": "Why does VirtualMachineMetrics have to implement Metric?"}
{"msg": "The split and join was probably done to ensure that this still works on Windows because os.path.dirname works differently depending on the os you're running under :(. It would probably be a little better to do `dirname, _, fn = path.rpartition('/')` if you want something cleaner than the split/join."}
{"msg": "Can you make this a member var as all the other deadlines? Then you can drop the param to resetTimer() and simplify some of the code below iiuc."}
{"msg": "Prefer TextUtils.isEmpty() which handles getReportSpamRecipient() being null"}
{"msg": "Couldn't you just write this as an if/else or a guard clause like on line 87? Just seems a bit weird doing this conditional assignment for essentially an if/else."}
{"msg": "i guess these types & cron / retry specific belong to a dedicated util / struct"}
{"msg": "`direction` is referenced nowhere. Do I miss something?"}
{"msg": "We may deprecate `gpus` if `gpu_ids` is specified."}
{"msg": "I think we should use `FileExistsPolicy.Overwrite` instead. Files _should_ always be newer, but in the unlikely case they wouldn't be, I'm afraid some files would be overwritten and other not, leading to inconsistencies that will be hard to figure out."}
{"msg": "Will need to think about this one. `additionalIngressRules` feels a bit opaque in terms of eventual outcome."}
{"msg": "Why did you change this equal instead of less or equal?"}
{"msg": "`x_float` instead of `float_x`."}
{"msg": "If this can change the PC of this thread, it requires handling: we can't blindly execute the syscall and lose control of the thread when the flags include CONTEXT_CONTROL. (Note that most docs imply that setting your own context this way is not supported or has undefined or unpredictable results: any idea how often that's the case, or does it generally work?) We need to handle in a similar fashion to NtContinue or setting another thread's context to ensure we retain control."}
{"msg": "Can you update this function to be `ShowHeader`? There is only one use of it at the moment in `tools/fast/series/get_head_block_height.go`."}
{"msg": "@akarve, this disables `tqdm` by default, is it intended? Also name `QUILT_USE_TQDM` might be too specific, IMHO `QUILT_INTERACTIVE` or `QUILT_PROGRESS_BARS` or something might be better."}
{"msg": "This will call `componentWillUpdate()` for mounts because the else clause is removed. It should only be called for updates."}
{"msg": "Operator precedence is very confusing here. Care to add parentheses? ` ((version or 0x0303) >= 0x0200)` Same below."}
{"msg": "javaparser-core has no dependencies and it should stay that way. So no log4j. And even then there would have been a preference for slf4j."}
{"msg": "ecr and ecr0 aren't deterministically named here. This change will just cause confusion in the git history. Could you either: a) fix this and make it deterministic b) regenerate the mock until it doesn't flip definitions for ecr and ecr0"}
{"msg": "The right-hand part shouldn't use `__proto__`. Should be just `PersonObject.__proto__ = Realm.Object`."}
{"msg": "Good catch! But is it guaranteed that `old_size < new_size` here? If not, wouldn't we want to take `min(old_size, new_size)` as the copy length?"}
{"msg": "`LongRunningOperationDetailView` already has `isEmptyOperation`."}
{"msg": "This will always add the authorization header to the request object. Is this the right scope for these two lines? If username/password are not defined, it will encode 'Basic :'"}
{"msg": "Don't think a scope adds much value for us here. Also, for future reference, you don't need to use the `self.all` it is implied. Could just be: `scope :updated_at_desc, -> { order(updated_at: :desc) }` No need to change this one now though, it works."}
{"msg": "Couldn't this result in images being scaled too small when the width is less than the height assuming the width is still what is being passed here?"}
{"msg": "Here also, let's not cache value on top of file, but use `plugins.getConfig(\"api\").offline_mode` directly where it is needed"}
{"msg": "Should there still be a ` bool` trailing `showOutput`?"}
{"msg": "`Bolt::Config.user_path` returns `nil` if there's no homedir, so this will still error in that case."}
{"msg": "I think this should be a keyword-only argument, i.e. do `def add(self, url, title, *, toggle=False):` and adjust the caller to do `toggle=toggle`."}
{"msg": "I think this is somewhat definitive proof that this error exists in `core` rather than `native`. We are correctly resolving the `readPreference` in the previous line, but you are able to identify that eventually the command generated in `core` is not decorated with the passed `readPreference`. Did you try to solve this there already?"}
{"msg": "During genesis sync it can unwind 5M blocks?"}
{"msg": "Do we need `app_host_flags` variable? We can directly concat with `flags`. `sh.cmd curl_cmd(unless Travis::Build.config&.ssl&.verify ? flags + ' -k' : flags, location, static_file_location), cmd_opts` right?"}
{"msg": "Walk should actually be completed (`onWalkCompleted`) after the event is stopped.   This also makes it possible for monster to walk by smaller paths."}
{"msg": "I'm surprised this is needed, but we should probably assert num_scan == 1 at least, otherwise I expect the file is pretty broken."}
{"msg": "Could we set a default value for `partitions` and `{0, network::NetworkUtils::getAvailablePort()}` ?"}
{"msg": "Needs xml docs. The API names alone don't provide enough explanation about what these mean and how to set them. Also, we should provide some validation of inputs, such as MaxTime must be > MinTime, MinimumRate must be >= 0, etc. Consider making the properties readonly and adding a constructor that does these validations."}
{"msg": "We would like this code to run, even when `config.XDPEnabled` is false, so that Felix can clean up its own XDP state after a restart."}
{"msg": "If the status is `ERR_SPACE_NOT_FOUND` why return `SUCCEEDED` ?"}
{"msg": "I don't know if there are strict conventions about this, but I think the name of the warning should be the diagnosis, not the suggested course of action. In this case, that would mean changing the name of the warning to `interactive-exit` or something like that."}
{"msg": "If `crt.Spec.CommonName` is not set, and `cert.Subject.CommonName` *is* set, we are not correctly handling it here."}
{"msg": "This isn't a test, so it shouldn't be named `test_init`. You could name it `cmdhistory_init` or so."}
{"msg": "why is this pulling from `self.spark_version` config section rather than the `spark` config section (`py-packages` appears to pull from a config section called `spark`)"}
{"msg": "This check is still correct in some cases, but I guess erroring out is acceptable if someone explicitly asked for an impossible cgroup configuration (now that we could in principle nest things). I would like to see a test for this though."}
{"msg": "Should we update integral to operate on a single column as well?"}
{"msg": "Just for my own understanding, does aws ecs API take this token as a new input attribute? Which version of the aws sdk? I did not find it in the official aws sdk doc."}
{"msg": "Could we shorten this constant to maybe `FEATURE_USER_AUTH`?"}
{"msg": "Try to use factory association declaration for default values, so it could minimal the line length. You may write in fetch_job factory like association :repository, factory: :repository."}
{"msg": "Seems kinda dangerous - what if models length is different from paths length?"}
{"msg": "Should this be initialized to zeroes?"}
{"msg": "The query is already built at this point, so I don't think this particular change actually helps wrt SOLR-10732? (and the `base.size()==0` case is already trivially optimized in `SolrIndexSearcher.numDocs(Query, DocSet)`)"}
{"msg": "Could we simpify it as `cmd.Stderr = &bytes.Buffer{}`?"}
{"msg": "there's enough \"nots\" in here that while it's correct by my review, I'd like to see a small unit test (just passing in an expired and non-expired cert)"}
{"msg": "this will modify the incoming object, which may not be desirable in some cases. i think we should stick with the local var, override it with deployment.ClusterName if deployment.ClusterName not empty"}
{"msg": "During testing, we adopt the score threshold specified in the config file. Here the threshold is only used for visualization, and the variable name `score_thr` can be misleading. Renaming it to `show_score_thr` would be better."}
{"msg": "can you make this `nav-primary` please? i'd like to roll with this since the `<ul>` class is `nav`, and primary is the name of the navigation menu"}
{"msg": "@georgehrke Just out of curiosity. Couldn't you combine at least the combine the regex for '-' and '' with groups?"}
{"msg": "Why are you dividing by scale in the LTR case but not the RTL case?"}
{"msg": "I added this change to fix a bug with the legacy settings wrapper which was preventing it from working properly with the other modules  "}
{"msg": "isn't AZKABAN_FLOW_VERSION_2_0 more explicit?"}
{"msg": "`s => s.IsHidden == false` What's the purpose of adding this?"}
{"msg": "Honestly not sure myself, but do you think it makes sense to move this conditional into the partial?"}
{"msg": "As discussed in IRC (just so it doesn't get lost): This probably should be `-basedir-`, not `-prefix-`"}
{"msg": "It's stored in `PodDBAdapter.VERSION`. I usually use the expected release version code for that change. As this will be released in AntennaPod 2.2.0, the code would be `2020000`."}
{"msg": "`instanceUrl` should be `cs1.salesforce.com`. `communityUrl` would be `mobilesdk.cs1.my.salesforce.com`."}
{"msg": "Let's use `if(name != nullptr)` to remove ambiguity"}
{"msg": "I wonder if it would make sense to have a separate namer for metadata? Metadata files tend to be expressed in a different language from the repo language, and have mutually exclusive concepts. So, `PackageMetadataNamer`."}
{"msg": "This rule is quite specific to qbft and so I don't think it should be part of the common rules. Would rather the common bft code didn't know anything about contract based voting/validator governance."}
{"msg": "This makes our life harder than it needs to be. A Set is unordered by definition. Please remove this method from Set and add it to SortedSet, but with no default implementation. We need to duplicate it then to LinkedHashSet but that's ok, it is the best we can do. Could you please add it also to SortedMap and LinkedHashMap? We are then able to close the original issue."}
{"msg": "we can replace `for` with `params.update(response_headers)`"}
{"msg": "I think that you need something like `m_using_random_node.emplace(m_io_thread_pool->get_local_thread_id());`"}
{"msg": "I don't think we need to maintain a separate set. The problem here is that the \"assignment\" that is killed for this variable is not really an assignment. If we just don't `assign` the variable with the non-existent value, it will not be reported. I pushed a fix."}
{"msg": "Let me know if this is too pervasive. It is currently a private method in `BaseTableScan`. It seems both `SparkBatchQueryScan` and `SparkMergeScan` need to know the scan-specific split size when planning tasks. Therefore, I made it open. Another approach is to move all the `planTasks` logic to scan implementations, but for the combine tasks by partition feature, it requires grouping scan tasks by partition first, instead of returning them in an iterator fashion. I'm not sure if this is OK. `SparkMergeScan` also seems to re-implemented its own plan tasks logic."}
{"msg": "this is funky. either don't take` minutes` as keyword arg or take both `minutes` and `days` and pass all of them on to `timedelta`. i'm guessing you're aiming for backwards compatibility, but i don't think it's worth it given how confusing this is. atlernatively, make `mins=60*24*30` the default. and that brings me to another issue, `mins=None` is not a very useful default."}
{"msg": "If the logger isn't used, it probably doesn't need to be added."}
{"msg": "Used regexes to do most of this, hence different methods of string creation of UUIDs. I plan to follow up with an additional change to remove direct references to google/pborman UUID so `uuid.New()` and `uuid.NewRandom()` will instead use our `primitives.UUID`."}
{"msg": "Can we instead ensure that `opts[:run_in_parellel]` will always be a boolean? Otherwise we'll have to account for the case when it's a non-boolean value in multiple places, such as any/every other `if` statement."}
{"msg": "As for the testings, we better to verify the actual effects of the compaction. Of course, you could do it in future."}
{"msg": "NewVHS -> NewVersionHistories this one looks better"}
{"msg": "Is this `@missing_text` ?"}
{"msg": "we should have a way to insert components into a i18n string. so that we could define a translation string like `'%{filename} is being edited'`, and inject the filename `<span/>` at the right place. I imagine there must be a language where the `Editing` text should come after the file name. we can think about that later tho."}
{"msg": "does adding a `Stream.<String>empty()` help here?"}
{"msg": "Sorry if I'm missing something here, but shouldn't this message be about failing to match with an *empty* selector, and/or perhaps even an empty *tag* instead of selector? The message seems a bit disconnected from what we're testing?"}
{"msg": "We would change the source code of h2o so that certain syscalls will be invoked through the `h2o_sysfn` macro."}
{"msg": "the name kTimelineCannotBeSignalled is confusing. It's not that a TimelineSemphore cannot be signaled... it's the \"VK_KHR_timeline_semaphore is enabled *variant* of the \"binary cannot be signaled\" message. We should probably have a consistent naming scheme to clarify. kBinaryCannotBeSignalledAltTimeline or hide the complexity in Get*VUID functions as needed somehow (pass in the extension structure?)"}
{"msg": "Could you add a type hint? `percentiles: Optional[List[float]] = None`"}
{"msg": "I don't think we need these. Simpler just to put `routetable.TargetType...` inline below."}
{"msg": "Just combining the inner if/else blocks like this is what I originally meant (I didn't mean replacing all the invisible checks in the outer if, I realize that would have been a functionality change regarding the rule) This should now be equivalent to `if (RuleB(Pets, LivelikeBreakCharmOnInvis) || IsInvisible(formerpet))` (the second check for the rule being false after the `||` would be implied, anything after the `||` would only be evaluated if the rule was false)"}
{"msg": "Good catch! Could you please move this to `PlaybackService.this.onPlaybackEnded`? I think it's more clean if everything is in one single place."}
{"msg": "To minimize the possibility of regret, perhaps we name this `ZapLogger`."}
{"msg": "This looks a little weird, but it's a feature of the gem we're using. You can give it a symbol representing the method you want called on current_user."}
{"msg": "`Anomaly` imported here, but not used. Please run the changed files through pylint with nupic pylint config and fix pylint findings related to your changes."}
{"msg": "minor, you can just use `wf` instead of `worker.wf`"}
{"msg": "could not import github.com/openebs/maya/pkg/upgrade/templates (invalid package name: \"\") (from `typecheck`)"}
{"msg": "Maybe ditch these since `StackSummary` is not used anymore."}
{"msg": "IMO `dot` should be preferred. Remember `aXe`?"}
{"msg": "What is this `collection_id` field here?"}
{"msg": "Is this intended to be `spells[spell_id].reflectable` here? Edit: Should be `spells[spell_id].feedbackable`, right?"}
{"msg": "How should we set this for existing teams?"}
{"msg": "Consider make the second argument a `encoderOptions` which includes the `lowercaseFields` just like opening a collection."}
{"msg": "Hm. This could be a case of left-sided driving, having u-turn lanes on the right side. Good catch, but looks good to me."}
{"msg": "There was a [JsonPropertyName(\"success\")] here it did serialize fine for me, so I am not sure what was the matter? Also maybe uppercase?"}
{"msg": "Could you replace local hook with global hook `afterModifyTransformStart`?"}
{"msg": "Maybe it would simpler to ignore opt_port if type !== 'number'?"}
{"msg": "As far as I can tell, `IDictionary<string, object>` implements `IEnumerable<KeyValuePair,string, object>>` so we are just making it more generic. From the issue, I understood that we want to maintain sequence/order. I believe `IEnumerable<>` won't fix the issue."}
{"msg": "I will add the following to the list: - api.SpecScale - api.SpecSticky"}
{"msg": "As defaultSendPort is being removed, and I don't like TODOs on examples, please remove the whole line"}
{"msg": "since we are now no longer expecting an input of float to return an empty string, i have removed this test case."}
{"msg": "It would be cleaner if you were to pack the name&desc in a `MetricName` and pass it to `MakeCounter`"}
{"msg": "I guess this using is what causes the build to fail"}
{"msg": "I like the explicit unregister approach."}
{"msg": "We should able to use 0x30 as summary, and make 0x80 reserved for future."}
{"msg": "This check/exception is a guard for the next few lines of code. It shouldn't be necessary now. In fact, I don't think you need the if (parentConnection.type == Blockly.INPUT_VALUE) branch at all."}
{"msg": "nit: I think this would be more readable as \"Some language names contain Unicode characters\"."}
{"msg": "Is there a way to derive this value from the locale itself? I feel hardcoding the prefix in the props isn't the right approach, but I'm not sure what the locale file contains exactly."}
{"msg": "nit: ServiceReference represents a reference to a v1.Service."}
{"msg": "since it changes to the array, how about change the name to `DeviceNames`"}
{"msg": "No need for this, as pylint already only turns things off for this function and it's needed for the entire function."}
{"msg": "instead of modifying 'Status' which impacts the state diagram, how about using some annotations on CVR? This can probably help for our upgrade as well. Is this possible? cc: @AmitKumarDas"}
{"msg": "Rename this as KubernetesGPGURL - >KubernetesUbuntuGPGURL , Modify it where ever it is used."}
{"msg": "Why do you need to include this using declaration?"}
{"msg": "What do these `#if TRUE` accomplish?"}
{"msg": "Probably a good optimization to have this, but I don't think it's strictly required. For \"legacy\" Activity flows we pass them through an ActivitySource for sampling. So the logic below should also catch these?"}
{"msg": "I think you could condense this code considerably by getting rid of the initialization and foreach loop and simply saying: `$firstname = trim(implode(' ', $nameArr));` What do you think?"}
{"msg": "I'm being picky here, but I think I would prefer `toggle` to be kept here and just change the condition to `contentType !== 'movies' && contentType !== 'mixed'` or `!['movies', 'mixed'].includes(contentType)`."}
{"msg": "Shall we rename this status to CONTAINER_FAILED? ^^ cc: @sshardool"}
{"msg": "It seems a little odd to have both `host.is_cygwin?` *and* `host.cygwin_installed?` defined (with a possibility of having `is_cygwin?` be `true`, but `cygwin_installed?` returning `false`). Do the docs clearly explain the difference?"}
{"msg": "Does this mean manifests will be written with the v2 schema (i.e. with sequence numbers) even though `TableMetadata` is v1 and the manifest list is written with v1? And this should work because we do a projection on read and sequence number is optional?"}
{"msg": "Should we be sharing this property key with the read? Maybe it should be belong to the file-scan-task object itself?"}
{"msg": "Nice! Good idea to move these out of the main struct."}
{"msg": "Converting this to an enum makes it obvious that I combined things that don't really belong together. It would probably be better to create two enums `StoreType` and `TransportType` (in more appropriate locations). That also makes it necessary to have (at least) two `ServerSettings` classes. `IncomingServerSettings` and `OutgoingServerSettings`. Also, the naming is inconsistent. Maybe it would be better to make the string that is used for import/export explicit, e.g. WEBDAV(\"WebDAV\")."}
{"msg": "this package has to be renamed to `typeinference`"}
{"msg": "change to timerIntervalInMillis"}
{"msg": "`any rules` should be `any roles`"}
{"msg": "To keep it simple, how would you feel about just using r.RemoteAddr? Since every request comes through here I want it to be as lean as possible. Frankly I'm OK with the port showing up in the log; maybe it'd even be useful to someone."}
{"msg": "grant bonus depends on both `admin{}` stored in statedb, and `P2Start/End` in local struct, which is kind of weird at Kamchatka height, we add the bonus Start/End epoch into `admin{}`, so it solely depends on `admin{}` stored in statedb"}
{"msg": "Is there a reason why we need a special case for Email at this point? Is the idea that other methods can turn into Email even if it's not configured as a top-level option?"}
{"msg": "Why do we need both `HPX::m_hpx_initialized` and `HPX:: m_was_initialized`?"}
{"msg": "also check RPCName?"}
{"msg": "Remove unused import"}
{"msg": "Report listeners are synchronized, even 'though the cache is thread-safe... I've not profiled it, but it may be a cause of contingency. Any better way around this? Also, do listeners **really** need to be synchronized? Can't we just make them thread-safe?"}
{"msg": "Why do this rather than `args = []` in the function signature?"}
{"msg": "`m_al_comms` now contains smart pointers."}
{"msg": "This change is suspicious. Why did the number of partitions increase?"}
{"msg": "Is this change relevant to the PR? (and I believe we should use `text/plain` considering the fact that it can be displayed using web browsers...)"}
{"msg": "`[Flags]` is now auto-generated by an argument to the `EnumHint`. (The attributes happen to come out in this order. I don't think it's worth controlling the order.) #Resolved"}
{"msg": "Why using `fmt.Sprintf` where `fmt.Sprint` would do the work (notice no `f` in function name)?"}
{"msg": "Is the `flowDefinitionId` sufficient to uniquely identify the flow or does it need to be the tuple `<flowId,flowDefinitionId>` ?"}
{"msg": "Shouldn't it be in the reverse order? `DateTime::createFromInterface()` returns `self` and accepts `DateTimeInterface`."}
{"msg": "Can this be refactored to avoid including the aws sdk in the types that we expose? I know it's not being exposed directly through the types we expose, but I do worry that it might make it easier to accidentally do that in the future and not realize it as easily."}
{"msg": "Hi thomas, i would propose to indicate in the name, that only the indextime is updated, otherwise somebody might think the whole items is getting updated. I would propose something like \"updateIndexTimeByItem(Item $item)\""}
{"msg": "This is not the right exception class. There is an InvalidSelectorException class that covers bad locators."}
{"msg": "`Vector<byte>.Count` should Jit to const when intrinsic; not sure when `Vector.IsHardwareAccelerated == false` ; however we know `readonly static int` does Jit to const."}
{"msg": "`gofmt` allows a more compact form `defer func() { _ = f.Close() }()` or just add `// nolint:errcheck` before `defer`."}
{"msg": "We should not create channel of node which are not connected."}
{"msg": "Please use properties without suffix `_fr` so they can work across different languages as @teolemon mentioned"}
{"msg": "Declaration here is `static` but the definition at the bottom is non-static?"}
{"msg": "# `attr_value['string'] is not None` probably not required as `attr_value['string'] == value` check is already being done"}
{"msg": "You're accessing private variables here - `last_hovered_link` should be public in `TabData`. As for `tabbed_browser._now_focused`, I think you can use `tabbed_browser.widget.currentWidget()` instead."}
{"msg": "`@param float` can be dropped here."}
{"msg": "I wouldn't make MethodDeclarator an AccessNode, nor an Annotatable. It's the MethodDeclaration that can be annotated, and has info about the modifiers, and is already an AccessNode"}
{"msg": "Why is api-version now removed in the generated code?"}
{"msg": "We may register all built-in optimizers of PyTorch here to simplify the builder."}
{"msg": "But now you may get DATA RACE reports because c.acc is sometimes changed. I wonder if we should not rework that whole sending subs through route."}
{"msg": "Should MAX_PERTABLE_ENTRY here be 10 ?"}
{"msg": "I think we need some YARD docs here, particularly to list all the color symbols that are valid. Otherwise users will have to look at the source to discover that."}
{"msg": "Is this really an Option? IIUC, you compute it automatically for the URLOpener case, why would we require a user to fill it in when using the constructor? I.e., can't we drop this and use `adal.MSIAvailable` instead? If that call is expensive, cache it on `bucket`, not `Options`."}
{"msg": "This looks like it will only work for the first child, since after that we've overridden `desired_group`. Should we have a separate variable for this?"}
{"msg": "nit: The format recognized by tooling is `// Deprecated: [..]` so you likely want this to be, // Deprecated: Use \"go.uber.org/yarpc/peer/peerlist/v2\".Implementation instead."}
{"msg": "I believe this can be fixed with the original code if you just omit the \".dll\" file extension so it reads `[DllImport(\"Datadog.Trace.ClrProfiler.Native\")]`. On Windows it would look for `Datadog.Trace.ClrProfiler.Native.dll` and Linux/Mac it would look for `Datadog.Trace.ClrProfiler.Native.so`."}
{"msg": "What happens if nodes throughout a hierarchy are modified (as they would be)? It looks like we're going to `Reset` once for each `NodeID` affected."}
{"msg": "I would prefer an active verb for this property, e.g. `initializeTelemetry`. The reason is that this property refers to something the engine does once on startup. Other properties that use passive voice (e.g. `authorizationEnabled`) refer to a state of the engine during its lifetime."}
{"msg": "missing `{` here (and then `}` after `notary_password = config.notary_password`); it's only going to do the first one"}
{"msg": "This is odd because it's actually in our generated SiteSettingsPath, not in the SiteLocalSettingsPath (wp-config-ddev.php). Are these two files swapped somehow? I'd expect SiteSettingsPath to be wp-config.php and SiteLocalSettingsPath to be wp-config-ddev.php. BTW, I'm *way* ok with renaming that to SiteDdevSettingsPath."}
{"msg": "Should it not be more something like: `MaxAccountConnectionsExceeded` here?"}
{"msg": "If the context is unused, this is equivalent to `var wg errgroup.Group`."}
{"msg": "very minor: I'd prefer these two added rows are switched so that fragsizeIsMinimum directly follows fragsize"}
{"msg": "Please move this test method just below `oauth2LoginWithOneClientConfiguredThenRedirectForAuthorization()`"}
{"msg": "I don't think that we need to check `hasArray` here. I think the reason why this didn't previously check `hasArray` is that the array passed to `DataByteArray` must start at offset 0 and be valid through the array length, so a copy was needed in almost every case. It may be simpler to change this to use `ByteBuffers.toByteArray` and pass the result to create `DataByteArray`."}
{"msg": "`spanReference` -> `baggage`  "}
{"msg": "I think you can just simply fix this line to `self[:2].to_pandas()`"}
{"msg": "not sure \"actual\" adds value - secondsSinceParent is probably closer."}
{"msg": "The error should be `At least :number items are required`"}
{"msg": "Could combine this with `encryptionKeyGetter` to have a single `keyGetter` interface. I'm not sure which way is better."}
{"msg": "Is there any security issue here? If we integrate with Hive security (and I don't know if we have or not) is there some notion of re-authentication at connection time?"}
{"msg": "Does this mean we do not support writeConcern on `createCollection`?"}
{"msg": "I guess `sid` was for `sessionID`, but now it looks strange: `sid.ID`."}
{"msg": "We'll need `infrav1.SecurityGroupBastion` as well"}
{"msg": "Similar to my suggestion for HTTP, let's remove this and use `ServiceHeader` instead."}
{"msg": "The serviceDirOnHost[0:1] was completely wrong. It wasn't just Windows, glad you got this fixed!"}
{"msg": "hmm, in this case perhaps the whole try-except could be removed altogether? because if the file does not exist, it's already returning `None`. In any other case it should actually probably fail with the exception, no?"}
{"msg": "> && this.Extensions.ContainsKey(\"nextMethodName\") [](start = 96, length = 48) From line 124, looks like we don't need `&& this.Extensions.ContainsKey(\"nextMethodName\")` condition or we don't need line 124 #Closed"}
{"msg": "just to clarify - on line 1074 we update `zip_file_content` for non-local lambdas, but never store it, which means lambda never picks it up"}
{"msg": "Golang naming convention is to use camel case `icmpPktWithTypeCode` Often the linter will complain"}
{"msg": "We can do away with assigning the response here too."}
{"msg": "Bumping the newViewportHeight"}
{"msg": "how about `Cannot encode row key with non-integer type` directly?"}
{"msg": "The method names `fetchUnfinishedExecutions` and `fetchUnfinishedFlows` are too similar to each other. Would it be better to use the name `fetchUnfinishedFlowsMetadata` since you are only fetching metadata info about the flow?"}
{"msg": "BLOCKING: Why does `Query` return an `*exec.FunctionSignature`?"}
{"msg": "please move this down to immediately above the assignment to `c.dirtyBcache`"}
{"msg": "Please add two additional SECTIONs that show that this also works if the dative bond is in the reactant (reaction SMARTS `[O:1]->[H+]>>[O:1].[H+]`) or in the agents (reaction SMARTS `[O:1][H]>N->[Cu]>[O:1].[H]`)"}
{"msg": "I'd like to ensure that the error message at least has some reference to the flag that is not allowed. Something like `/ERROR(.+)--hosts/` would work."}
{"msg": "Should we say \"specifying two public subnets\"?"}
{"msg": "maybe we should rename: MinTaskID -> MinTaskIDExclusive, MaxTaskID -> MaxTaskIDInclusive,"}
{"msg": "Originally the DenyExport was a subscribe permission because it meant that if on this LN connection, if we deny export of \"foo\" it means that it would reject a subscription (hence subscribe permission) on \"foo\" from the other side. Now you are changing to simply not allowing this server to publish on \"foo\". I am not saying this is wrong, but we completely flip the meaning."}
{"msg": "Is this the best way to import `FileSystemTarget`?"}
{"msg": "Wait -- os_local_state_t.tid is thread_id_t though, so we need to read a pointer-sized value via READ_TLS_SLOT_IMM, rather than changing these locals to ints. Maybe have a READ_TLS_TIDSZ_SLOT_IMM or sthg."}
{"msg": "// Key returns the private key for a specified name that was encrypted with the // provided password. If the private key does not exists it creates a new one // with a name and the password, and returns with `created` set to true."}
{"msg": "Adding the type hints revealed that it was necessary to distinguish between a ``PackageEntity`` and a ``ClassEntity``, because the ``ClassEntity`` has additional attributes that were dynamically added in the previous code, which confused ``mypy``."}
{"msg": "We'll have to account for CI installations being faster than local ones. Do y'all think we should leave it at < 30 green / < 50 orange | >= 50 red or lower our thresholds?"}
{"msg": "As far as I can tell, there's nothing that creates an instance of `Random` or that calls `rand` or `seed`. Am I missing it? If not, let's remove the `Random` class since we don't really need it and we can move the definitions of `shuffle` into `RSpec::Core::Ordering`. One less type :)."}
{"msg": "maxResults should come from FLAGS once #244 is submitted."}
{"msg": "What exception is actually happening here? AFAIK `pytest.importorskip` with just return `None` if there's nothing to import. Which means that this check'd always return `True`. `pytest.importorskip` is specifically designed to trigger skipping the current test anyway so I don't know why you would wrap it like this."}
{"msg": "Does it send requests with urlencoded bodies anywhere? I thought it sends only json. Maybe content-type should be `application/json` by default?"}
{"msg": "`testExecutionPb` is a global variable (from `gochecknoglobals`)"}
{"msg": "Can we make these more explicitly for Rust only? It seems like JS and Go use flags with their name in them."}
{"msg": "Actually can we avoid mentioning `Register._UNSET_NAMESPACE`. I thought of it as an implementation detail of the simpler concept of \"being unset\". Perhaps the docs become more natural if we remove the \"If called without arguments or with ...\" part and just say \"you have to call this function without arguments at the end of any file it has been used. That is to ensure blah blah\". Something like that. Just a suggestion."}
{"msg": "Since minify can generate errors, it should at least go after the errors middleware. And you definitely don't want to be minifying after the gzip writer has closed."}
{"msg": "nit: we could remove the `config` field as it is a duplicate of the `provider.config` field."}
{"msg": "Why is this better than ApplicationStopping?"}
{"msg": "Maybe worth expanding that these 2 are supported by cert-manager but other values exist"}
{"msg": "What if `node.jsonRpcConfiguration().getAuthenticationPublicKeyFile()` is empty string, would that cause a problem here?"}
{"msg": "It looks like the UID is the only other thing that we use from `namespace`, so I suggest to copy that out and lose `namespace`, so we don't have to worry about setting it to nil."}
{"msg": "I don't like this fixture name, should be a noun like `initialized_linter` ? But it's outside of the scope of this MR."}
{"msg": "Keys.COMMAND seems to be an alias to Keys.META. That isn't mentioned?"}
{"msg": "Might not hurt to mention the function never returns (since this all ends in `execve`) so `main` never actually runs."}
{"msg": "I believe there is some javascript that also uses this 60px number for calculations. I think I'd rather keep the number in px instead of rem to make that correspondence easier to see. If 3.25rem != 60px, can you also change the other place where `60` is used to in the JS?"}
{"msg": "retrying is an installed 3rd party library just like jinja and sendgrid; perhaps try grouping all of them together?"}
{"msg": "you could always use List.listIterator with previous() and hasPrevious() to traverse all kinds of j.u.List backwards. No need for special cases for ArrayList and Vector."}
{"msg": "can you change this instead to just `type.toString()` and then you wouldn't have to expose the getBitMask in the enum. (Alternatively you could have used `type.hashCode()` but that doesn't feel as nice)"}
{"msg": "I'm trying to understand the effects of this change. Is setting this to something other than the old default (that is, `initCodeTransformer = new InitCodeTransformer()`) generally necessary, or are we doing this only to support Python?"}
{"msg": "Why do we have to change the test dir?"}
{"msg": "It's long-winded, but the convention is to give constants a common prefix which, see `reasonDomainVerified` ."}
{"msg": "Using lanes later down, this threshold could be reduced for similar effects. Otherwise we look a bit to far."}
{"msg": "Should we set this back to `false` inside each `t.Run`? so that we can have more than one testcase that can have paginated responses"}
{"msg": "What about using `dataManifests == null || deleteManifests == null`?"}
{"msg": "The `HitsThresholdChecker` should be created once and shared within the collectors ? We also don't need to use the `GlobalHitsThresholdChecker` if the executor is null or if there is a single slice."}
{"msg": "Seems likely to confuse people. What if we moved it into ActivitySourceAdapter and made it private?"}
{"msg": "This already exists under the `theme` lang key, please remove this."}
{"msg": "The `--cpp-field-case` looks like `--cpp-field-style` instead of `-case`. - 'unchanged' - leave unchanged (default); - 'upper_camel' -upper camel case; - 'lower_camel' - lower camel case."}
{"msg": "Feel like \"exit\" doesn't convey that the packet will be dropped. \"drop-and-exit\" or \"error-exit\" maybe?"}
{"msg": "How do you feel about \"The Main actor\" instead of \"A Main actor\", while we're already here changing the message?"}
{"msg": "I cannot see that this new permission is used anywhere? And if the new zk handler is covered by `zk-read`, should not also existing `ZookeeperInfoHandler` handler implement PermissionNameProvider and declare the same permission, for consistency?"}
{"msg": "these tests are currently somewhat nonsensical. This code expands to `a, b = {}.keys` when it really should be expanding to `a, b = {}.keys()` -- though fixing this causes the test to fail so I suspect something worse is going on here that I don't quite understand?"}
{"msg": "in preparation of directly writing the /health endpoint one day.. we should have content checks."}
{"msg": "question (non-blocking): Is there a benefit from using `%q` instead of `%s`?"}
{"msg": "Use upper case: YOLACTHead, YOLACTProtonet, YOLACTSegmHead"}
{"msg": "I would prefer the message to be more actionable. Like 'There should be no space between & and the variable name' or something similar."}
{"msg": "The image attribute is not supposed to be the text of the node. I'd rather keep it separate (the previous `@Text` attribute was fine). A practical reason for that is in the future, other languages may have a way to get the text of their node, in which case that wouldn't be fetched with `getImage`, for compatibility, but probably with a `getText` method, or `getSourceCode` like in #1728. Also we *may* deprecate or otherwise put `getImage` out of use as soon as 7.0, given its contract is super loose."}
{"msg": "i missed these discussions- but ` \"secrets-ssm-environment-variables\"` is what was agreed upon with cp?"}
{"msg": "whats the difference between this package and `github.com/golang/protobuf` ? or did vscode just decided this was the package it wanted to used?"}
{"msg": "Including the scikit-learn dependency here would pull in scikit-learn for everyone who depends on Dagster. If you put it in the setup.py under docs_snippets, we'd avoid that problem (although I think it's already there)."}
{"msg": "Because this defaults to `{}` if `global._googlesitekitUserData?.permissions` is `false`-y, the checks below around `state.capabilities` always result in the `!! capabilities === true` path. This shouldn't have a default value of `{}` if there's the possibility that `global._googlesitekitUserData?.permissions` can be `undefined`/`false`/`null` legitimately."}
{"msg": "From the context, should it say \"Flags defined in this class must be used with caution...\" ?"}
{"msg": "\"Exported key for account\"?"}
{"msg": "I think this is related to the social stats and probably does not need to be removed."}
{"msg": "Yep, jsdoc again .. It seems that when the plugin description is wrapped within `eslint-disable/enable` expression it's not generated at all. After adding the `@class AutoColumnSize` tag right after the `@plugin` tag the plugin appears in the docs. Please review the other plugins."}
{"msg": "This usage of the result doesn't look quite right. I would not expect the first page of values to be empty if there were multiple pages of results. This also obscures the error case when no values are returned (handled in the next `if` block) by returning a more generic error from the Azure SDK from `result.NextWithContext()`."}
{"msg": "I think this may be a RW lock."}
{"msg": "Doing a select query inside of a loop like this is not ideal. We should fetch recipes once and then loop through it in memory to perform this check"}
{"msg": "I think this method should be either: - a static method of `RTPSWriter` to avoid a StatelessWriter redefinition of the function. - a setter in the `CacheChange_t` struct."}
{"msg": "You add a stream back reference for trailers, and all of the sudden we have tight coupling!  "}
{"msg": "We are using a different style for JSON tags. `ethAddress` - camalCase `referral_code` - snake_case"}
{"msg": "Should this be `\"Microsoft.AspNetCore.Http.DefaultHttpContext\"`?"}
{"msg": "removed asserts from `Vector` as it's stable enough and it may hinder inlining, even if turned off :/"}
{"msg": "@straker should this not push to `vnode._cache.isHiddenWithCSS`?"}
{"msg": "ListWorkflowExecutionsRequest <- this can be nil?"}
{"msg": "Do we need `ConcurrentDictionary`? `Dictionary` can be safely read from multiple threads. See `GlobalTags`."}
{"msg": "this seems like more of a Debugf statement"}
{"msg": "We're capturing cb_state non-const, but the function is const so, safe enough, but after going to reader/writer locks we're all going to have to key a careful eye on anything in this pattern."}
{"msg": "Probably want to wrap the endpoint discovery work that follows in this `if` statement instead of returning early. This will make it easier to add additional request code generation logic in the future. e.g. if we add any code generation after the endpoint discovery block this check will cause it to be skipped."}
{"msg": "This test was giving a false positive because my change caused it to throw a different error that contained `createElement` when it should've been throwing this error. Caught this by looking at the code coverage and noticing that the line under the condition I changed was no longer covered lol."}
{"msg": "Each `ExpectedCondition` implements `java.util.Function` These are expected to be stateless. This condition will leak previous `elementText` on the second usage, which doesn't seem ideal."}
{"msg": "Could we consider a more explicit name, like `devicePciAddress`?"}
{"msg": "Should we include the files with otf extension here, too? If not, I wonder why we do allow them in the source but we don't include them as per the setup"}
{"msg": "Does this need to be public? The only reference to `FlinkTypeVisitor` that I see in this PR is here, so I'm not sure why this is needed."}
{"msg": "This looks unused, shouldn't it point to inner processor in any way?"}
{"msg": "There may be a few isolated cases where the FirstN node is added during preCodeGen. Please see GenPreCode.cpp RelRoot::preCodeGen(). The example given there about Order by where sort is added in optimizer, or a FirstN where the N value is to be specified with a param seem to be cases where we would add the FirstN later. Will current change cause such views to marked as updateable? This is minor and could be resolved later, if any change is necessary."}
{"msg": "I think you should compose the %sClient part using the Name class, and then do the remaining composition with plain concatenation. Side question: why does the return type name look like it is a client type name?"}
{"msg": "All stories in this file also need the default padding."}
{"msg": "change `v.recipient` to address.Address, so can use `AccountState(v,recipient)`"}
{"msg": "Open to doing away with this altogether and maybe injecting this logic somehow into `requires_approval_notice?` in LinearDispatcher."}
{"msg": "remove this and always enable tracer, just set the default timeout to something higher (20 seconds)"}
{"msg": "Can we give this field a more descriptive name? When I use a variable named `icon` I normally expect an `Image` object."}
{"msg": "can't these just use the global `include` and `exclude` flags?"}
{"msg": "Maybe with this change we can remove `using OpenTelemetry.Logs`."}
{"msg": "We shouldn't require dimension values to be a string. They just need to be scalar values (probably we could check whether it's either a string or a number). Something more important to cover in the validation here though is to ensure that a map of `dimensionName => dimensionValue` is passed. The keys here actually need to be strings. For example someone shouldn't be able to pass an array of values."}
{"msg": "I'm halfway tempted to disable this for all https connections. Do you know of any clients that actually renegotiate for any reason?"}
{"msg": "I think this should be initialized to `null` instead of a predicate. There is no need to run an extra predicate (with an extra method dispatch for each row in a data file. That's a tight loop so we should do more work here to avoid it. Instead of using `isDeleted.or`, this should test whether `isDeleted` is `null` and either initialize `isDeleted` or call `isDeleted.or`."}
{"msg": "looks like the code is not properly formatted. for example here are some missing spaces in **if** command. please take care and reformat the code using default android formatting."}
{"msg": "Is it only Symbols we're worried about converting? Is it not safe to just call `to_s` anyway?"}
{"msg": "What about `sort_by(&:in_progress?)`? Maybe with a `.reverse` thrown in?"}
{"msg": "Flag is removed because it is only gRPC now."}
{"msg": "Might be better to rephrase to: Please refer to the ``init scenario`` command in order to generate a custom ``molecule`` scenario. Since you aren't customizing the default scenario since it already exists, right?"}
{"msg": "Shall we merge these `if` for `path lib` and then do the `attrname` one. I'm trying to count `if`-calls and its getting late but I think we can reduce the number checks needed to get into L648 from 3 to 2 if you understand what I mean  "}
{"msg": "why depend on recovery???"}
{"msg": "the done channel only aims to be closed, so `chan struct{}` is better then `chan interface{}`"}
{"msg": "This isn't the correct logic. if allowOverride == true and !blobExists then upload. Just don't do the exist check if allowOverride is set to true."}
{"msg": "Why do you configure the UART like this? It's already configured by default."}
{"msg": "and is it possible that mset.mirror.msgs be nil? because if so, then you would get a panic also because of that."}
{"msg": "`next->opaque` should not be cleared."}
{"msg": "Seems len(cnb[0]) will be the length after the write since of the *v thing we saw no?"}
{"msg": "this should happen before the `go k.manage()`, otherwise the node will always try the bootnodes first"}
{"msg": "what does this do that str_param does not?"}
{"msg": "May be better make `stopped` atomic, then it can be just `for (auto i (node.store.latest_begin (transaction_a, next_frontier_account)), n (node.store.latest_end ()); i != n && && !stopped && elections_count < max_elections; ++i)`"}
{"msg": "In `src/storage/InternalStorageServiceHandler.h ` file, the client in `client->future_chainAddEdges ` should be InterStorageServiceAsyncClient?"}
{"msg": "Not sure if this was discussed previously, but is there a specific use case in mind for having this as an API field rather than a configuration option on the controller manager? Is there a specific use case in mind where one would want to choose different backends for individual Clusters/Machines vs having it a global configuration for an instance of the infrastructure provider?"}
{"msg": "this shouldn't be beforeClickOn, but rather beforeSubmit? and added to WebDriverEventListener. Since submit does not synthesize the 'click' events, this isn't accurate."}
{"msg": "Per my understanding, this flag only impacts \"NoCleanup\" disk. If so, we may name it more clear. The reason of this ask is because I plan to add some other flag to force cleanup for other non-NoCleanup disks."}
{"msg": "Shouldn't this be called `hp` instead of `life`?"}
{"msg": "Because the default value of allowedOrigins is * (all origins), so it isn't necessary to set again at all."}
{"msg": "What do you think about `mentor_mail_to` or `mentor_mail_to_link` in order to match Rails' `mail_to` method, which is what this calls? I'm not sure about this suggestion..."}
{"msg": "Maybe `it \"can safely be reset when there are not yet any shared example groups\"`? That's the edge case that wasn't working, right?"}
{"msg": "Don't forget the {} symbols, and please use EqualsBuilder and HashcodeBuilder as possible"}
{"msg": "It would be better to check that system.nodes[1]->network.port is somewhere in the target without specifying its exact position. But it is a very minor point and I have no string opinion on it just thought I'd mention it because our tests in general have too implementation detail."}
{"msg": "When Activity is lost (more precisely, ExecutionContext is lost) in the HttpModule we restore the root (HttpIn) Activity. That makes this assert invalid. I tried to fix the HttpModule so that it restores the Activity that was last running, but it is impossible to retrieve do to the way ExecutionContext works. It isn't an issue to remove the assert, but it is unnerving. Any instrumentation running in IIS reliant on Activity.Current could run into trouble."}
{"msg": "At this point we probably want to ensure there's a store command set."}
{"msg": "huh, look at that, I wasn't aware you could constrain a type by Enum"}
{"msg": "What is the purpose of this interface? Unlike ParamDocView, it doesn't seem to be used anywhere to enable polymorphism"}
{"msg": "I guess it's not no-access to match Windows where guard pages are readable."}
{"msg": "Not a blocker, but would probably be useful to have a `scope :non_pending_approvers` on the `Proposal` model."}
{"msg": "I see someone say SIGKILL can not be caught by process. The original code here about `SIGKILL` is useless?"}
{"msg": "Please move using inside namespace."}
{"msg": "Should this `PUPPET_AGENT_STARTUP_MODE` have a corresponding yardoc change?"}
{"msg": "Why not simply remove the `pytest` import now that it's not needed anymore? :wink:"}
{"msg": "should we also do `reloadCache` when database is null?"}
{"msg": "Why not just return QueryMol directly? Why require the copy?"}
{"msg": "nitpick: Please lower-case `Zero_count` (as it's a literal argument name) and `Argument` here."}
{"msg": "So I haven't tested this - but since the icon location is just directly dumped into the img _src_ attribute, won't this cause issues with Ghost blogs in a subdirectory? If I'm misunderstanding what the purpose of the default is then let me know  "}
{"msg": "How about `column_index_names`? `column_names` sounds ambiguous."}
{"msg": "+1 on this. Do we want to have it as `WRITE_METRICS_MODE_COLUMN_CONF_PREFIX` to be consistent with defaults? Is there a possibility we will have `READ_METRICS_MODE_COLUMN_CONF_PREFIX`? Not sure."}
{"msg": "looks like we should drop this var from the transport options struct"}
{"msg": "nit: probably swap the if condition and `if/else` and check `NETCOREAPP2_1` which looks more natural."}
{"msg": "nit: there should be a newline between `types` and `go-ipfs-files`."}
{"msg": "just calling UpdateSnapshotInfo() should be fine"}
{"msg": "Was `DefaultLogMessageRateLimit` not configurable anywhere?"}
{"msg": "To avoid a circular import between pcapdnet and automaton"}
{"msg": "it feels that the WorkloadIdentityCondition should be added to this Status... And if you have workload identity enabled, but not working, then you can mark that condition failed, and also Mark the ready false... not entirely sure though"}
{"msg": "An `if` statement would be better here. Functions, concat and reverse are all very expensive."}
{"msg": "I thought about adjusting for case here as well? For example `.rb,rb,.RB,.rb` would all map to ruby interpreter specified? Is that too much \"magic\"? Is there a sane workflow that someone would choose to map `.rb` to one interpreter and `.RB` to another?"}
{"msg": "In this and the one below, should we assert `self != NULL` first?"}
{"msg": "we already have .meta() so I don't think we want get_meta() for PackageEntry"}
{"msg": "question: can we always get the startts from dagrequest?"}
{"msg": "This technically works because we call `get_targets` before we remove the target, so it's bound to have been resolved. But I'm not sure I would like to rely on that assumption. Should we also remove it from `@unresolved_targets` to be safe?"}
{"msg": "Mb change it to 'doesPassRestrictions()'? Doesn't sound enough like a boolean-returning method to me."}
{"msg": "TODO: in fact At when used with noncurrent time should not return a next index. only latest should.."}
{"msg": "There are scenario's where we skip an update with a placeholder, in this case tmp returns null with render, this is not an array so we `[null]` it"}
{"msg": "I don't see any place that checks whether the from snapshot is an ancestor of the to snapshot. That seems like a requirement for this to work correctly to me."}
{"msg": "Other calls to getHelpText() are wrapped in an `isset()` check. Would it make sense to be consistent, and either restore that here or remove it elsewhere?"}
{"msg": "Why the change? If `output_stream` is set to something non-nil, it seems odd (and potentially wrong) to overwrite it...."}
{"msg": "Please rename this class that it ends with the suffix \"Test\" - otherwise the tests won't be executed."}
{"msg": "I take it memQuotaRatio is an \"out\" parameter at line 1810? Also, why use MIN_QUOTA in both the cases of memQuota being too low and too high? Contrast this code with RelRoot::codeGen where we set MIN_QUOTA only in the too low case."}
{"msg": "- Use type from `service_discovery/dto/price.go` - Rename `Price` -> `Money`"}
{"msg": "I like the new directory `/api`, what is the thinking behind `/external`?"}
{"msg": "staticcheck flags this: replace with `for k := ..`"}
{"msg": "There's already a sleep right above"}
{"msg": "Can we move this logic into the `boto.compat` module? Then it's just `from boto.compat import OrderedDict` instead. Also, this is introducing a new dependency. What about users on 2.6.x that don't have the OrderedDict module installed? We may need to fall back to an ordinary `dict` so that existing code in the wild does not break."}
{"msg": "\"Gets the JSON serialization settings.\" would be better?"}
{"msg": "The endpoint should be in plural `/files`."}
{"msg": "probably better to assert the values directly; technically you could pass this test with an implementation that always returned \"\" for the subrepo for example."}
{"msg": "These test checks if selection coordinates don't return negative values in that edge cases. Please revert the changes and set `autoWrapCol` and `autoWrapRow` to `false` to the Handsontable instance. This change applies to the entire Core_selection.spec.js file."}
{"msg": "I was wondering, things like EDITOR_TYPE, VALIDATOR_TYPE, RENDERER_TYPE are not obligatory. Therefore if the custom editor will be registered with this method, `name` will be set to `undefined`. Should we handle this scenario?"}
{"msg": "# `attr_value['string'] is not None` probably not required as `attr_value['string'] == value` check is already being done"}
{"msg": "we shouldn't need the \"addon\" rename"}
{"msg": "`isFunction(Symbol)` triggers a `ReferenceError` if Symbol is undefined. Using `typeof Symbol === 'function'` is OK however."}
{"msg": "This should be `modelPromises.roles = this.get('store').query('role', ...` and the promise body should just `return roles;`. This is because the `model()` hook will pause for the returned promises to be resolved before continuing so when returning `RSVP.hash` you end up with a hash containing the values returned from the promises so the controller and everything else relying on the `model` object doesn't need to worry about things being async."}
{"msg": "This is basically a repeat of `main-is-top-level.js`. I suggest having these 3 checks point to the same evaluate file. You can change what element they test through the rule selector as well as the check.json options property. So you would have `main-is-top-level.json`, `banner-is-top-level.json` and `contentinfo-is-top-level.json` each point to `landmark-is-top-level.js`, and pass in a different `options` object which tells it what element you're trying to test."}
{"msg": "Why do we need this check? setCore already handles nulls."}
{"msg": "Hmm leaking the library name out in the Workload API doesn't seem great. Do we want to catch these errors and return a canned \"could not parse token\" or something instead?"}
{"msg": "I think `-f gradlew` is better for code unity"}
{"msg": "Turns out that if the hosts are not in an `array`, an `Exception` is not thrown anymore :-( It simply returns `null`. So, we need to attempt to parse a `string` outside the `catch` block for it to work."}
{"msg": "I think the more complete solution will save off a `ignoreUndefined` in the base class for the bulk operation (with a default of `false`), and use that for calculations. Was there a reason you didn't want to support the option from the operation level?"}
{"msg": "The catch (Exception e) block that follows does an updateSync, which will get a SmartStore instance (while logging out is taking place) - and then terrible things will happen - a database gets created for the outgoing user that won't be openable by the returning user causing the app to crash at logout. This is a somewhat superficial fix - SmartStore should not return an instance for an outgoing user."}
{"msg": "I think it would be more clear to have local-feed-hiding all in one place (bottom of this method?). Further up the method, there already is some code that hides the website icon, for example."}
{"msg": "Let's be neutral with tag names. Let's just have \"ReportURL\""}
{"msg": "The logic now is to look for `<account_out` if that is present return the string starting from there. If it is not present look for `<error` and return the string from there (which can produce malformed XML because you do not check if the closing tag matches). If this is also not found return an empty `<account_out/>`. This `<error>` output is also not consistent with the other two functions you mentioned. Do the other two RPCs not report an error?"}
{"msg": "showNPCs is not needed"}
{"msg": "Should this if block better be changed to `#if H2O_USE_LIBUV \\n #else ... #endif`? The reason I wonder is because that's the way the QUIC context is being initilaized at the beginning of this function. Though I would not expect practical difference between the two approaches, because ATM the only case where we create QUIC connections is when the protocol selector is set to non-zero, and because when it is set to non-zero `h2o_quiy_close_all_connections` becomes a no-op."}
{"msg": "`Object.is` is an ES6 feature of JS so I don't think we can use it here (or we have to change our browser support matrix or specify that an Object.is polyfill is pre-req of `preact/hooks`). Should we just do an `===` check in `preact/hooks` and provide a `Object.is` polyfill and version of `useReducer` in `preact/compat`?"}
{"msg": "`ExpectedBalances` is a global variable (from `gochecknoglobals`)"}
{"msg": "Feels like this should be left as is and add a new createClientWithIssuers or something like that. Avoid all the \"\""}
{"msg": "Can we rename this field to `HttpServerErrorCodes` or `HttpServerErrorStatuses`? It will contain a list of status _codes_, not a list of _errors_. (Personally I prefer \"codes\" over \"statuses\", but we can't change `DD_HTTP_SERVER_ERROR_CODES`.)"}
{"msg": "maybe renamed to `async_simple_test` if we consider supporting aug test later on?"}
{"msg": "So where is default_attributes now? Is it used anywhere else still? If not, can it be removed along with any tests of it?"}
{"msg": "This change is necessary because the schema version is ignored unless a schema is specified. I think that has always been the intent."}
{"msg": "Just do: `return node.hasAttribute('aria-hidden')`"}
{"msg": "Do we need `_processDataPoisoned`? Can the name or the id of the current process ever change? Or the machine name?"}
{"msg": "variable names suggestions from me: - damageboost, ITEM_PARSE_DAMAGEBOOST, \"damage boost +x%\" - healingboost, ITEM_PARSE_HEALINGBOOST, \"healing power +y%\" - managainboost, ITEM_PARSE_MANAGAINBOOST, \"mana restoration +z%\" alternatively the other names can stay, because \"increase\" convention isn't that bad, just change mana values to: - \"increasemanarestored\", ITEM_PARSE_INCREASEMANARESTORED, \"mana restoration +z%\""}
{"msg": "Does it make sense to generate a Exception here? Maybe yes, because it wouldn't make sense to generate a path without the id of the media right?"}
{"msg": "`ctx` is unused in UpdateProjectStaticUser"}
{"msg": "A repository has many badges so we should also add type column in scope."}
{"msg": "1.toLowerCase(Locale.US)? 2.where is accept bug fix?"}
{"msg": "check Lukasz's fix with NonceReserving - is that not better?"}
{"msg": "Would you explain why here please? E.g. from the PR description > the renderer expects to be able to use the secondary color as the fill for a shadow."}
{"msg": "Is it fine to pass the \"-o compression=on\" in the middle instead of at the end ?"}
{"msg": "Why not just check the backdrop setting here as well for the time being? We can combine the code later but at least then it would be configurable if people like the backgrounds."}
{"msg": "why are we turning this one into a Warning?"}
{"msg": "Perhaps the code at `source/core.py:564: postNvdaStartup.notify()` should be queued instead? If we are saying the loop must have started before NVDA's startup is complete, then the `postNvdaStartup` action is incorrect."}
{"msg": "wait, if we only do this for successful status codes won't we miss a whole slew of responses? We should be checking this for all codes right?"}
{"msg": "Adding a small blurb about why someone would want to enable this flag would help clarify what it is for. Such as something about when providing a custom retry handler and how`ShouldRetry` will be handled with and without the flag enabled."}
{"msg": "The value of `key` will never be `null` at this point, because `getKey()` will generate a value if it is `null`."}
{"msg": "NIT: You should first check if AdoNetExcludedTypes.Count is greater than 0 before calling Contains (fast-path)"}
{"msg": "what is the use case for create workflow with completed state?"}
{"msg": "Looks like this was previously guarded by `EnableCleanupReplicationTask` flag. Now looks like this is always needed. Just want to confirm the intention is if `GlobalNamespace` is enabled then we want run cleanupReplicationTasks in all cases?"}
{"msg": "Potentially it'll be good to remove all of them excluding \"tbb/tbb.h\" But let's do it next time  "}
{"msg": "I would just mention which tolerance - namely as reported by ``sys.float_info``"}
{"msg": "This follows the convention of each callback starting with the `IsIntegrationEnabled` check."}
{"msg": "please add `var _ impltypes.ChaosImpl = (*Delegate)(nil)`"}
{"msg": "nit: change to \"Telemetry configuration loaded from '%s'\""}
{"msg": "maybe `duckpubsubv1alpha1` ?"}
{"msg": "Maybe the empty `delete()` should be implemented as default in the interface."}
{"msg": "How to ensure CMAKE_SOURCE_DIR is set correctly?"}
{"msg": "safer to make a copy of incoming *big.Int"}
{"msg": "@nbbeeken what were the cases where `!!this[kIsMaster]` was yielding an incorrect value? we should try to cover them in the tests"}
{"msg": "Can you rename this and the file `InfluxDBProvider` and `influxdb_provider.go` respectively?"}
{"msg": "This is the real culprit, as now vlen will always be a Number (and known to the compiler as such). You could probably go one step further and avoid the ToBoolean on `vchildren` as well by writing something like `vlen = (vchildren !== undefined) ? vchildren.length : 0` if that matches the contract."}
{"msg": "missing space before `TextView`"}
{"msg": "These functions only ever read from the API and should always be reading from a cache, so I have made that explicit by expecting a Reader here and supplying a `cache.Cache` as the client."}
{"msg": "Should we abstract this into a reusable utility so it doesn't have to get repeated in every test file needing Shadow DOM support?"}
{"msg": "Maybe we rename this to `command_monitoring.test.js` to match the directory name change? Or would you rather do that as part of the greater test cleanup? I'm fine either way."}
{"msg": "This newly added method should be well defined, should it return `TableIdentifier` or just `String`?"}
{"msg": "have a relation with a product"}
{"msg": "I guess that there is still a window here, because the GC could happen between the `PodExist` and `Delete` calls. Would it be better instead to check `err` and allow it if it says \"pod has already been deleted\"?"}
{"msg": "SQLAlchemy's session management does magic to make sure that if the rollback fails you still get the original exception that caused the rollback. Also it looks nicer."}
{"msg": "I think `==` for nodes is more readable than equals. An equals calls looks like it could be recursing, because intuitively two nodes are equal if their subtree are the equal. But everywhere you replaced, we don't want to test whether the subtrees are structurally equal, we want to know whether they're the same. Only `==` captures this intent, using equals obscures this. Not to mention that equals may NPE and is in that sense less ergonomic. I think we should enhance the rule with a list of types for which `==` is correct. Edit: in the meantime i think we could suppress those new violations..."}
{"msg": "What's the scenario for passing multiple filters?"}
{"msg": "Can we delete such const like `CloudBuildSourceEvent` and `CloudBuildSourceBuildId` since all those are contained under schemas/v1?"}
{"msg": "Could the name of this controller just be shortened to `TwitterCardsController`? Is the `Player` there adding information?"}
{"msg": "nit: `AZURE_KEYVAULT_AUTH_VIA_CLI` is defined by us, so it might be helpful to differentiate it from azure's env names. Maybe starts with `GOCDK`."}
{"msg": "Does it send requests with urlencoded bodies anywhere? I thought it sends only json. Maybe content-type should be `application/json` by default?"}
{"msg": "Now it's double logging, is not it? Because `service.ipForward.Enable()` logs extra `warning`"}
{"msg": "...and in turn, this should probably be var updatePreviews = true; if (!(localConnection && localConnection.type == Blockly.OUTPUT_VALUE) && (Blockly.localConnection_ && Blockly.highlightedConnection_)) { since the first clause is a no-op. If you want to leave it this way for clarity, that's fine too."}
{"msg": "The testing cases are failing because `SetHeader` does not only handle cases where input are from files. It also reads categorical feature indices from the config parameters (see the part outside the `if (filename != nullptr) { ... }`). Skipping `SetHeader` directly here will cause errors when we load data from numpy or pandas arrays (where `filename == nullptr`) and use categorical features. So I think we should move the the check `filename != nullptr && CheckCanLoadFromBin(filename) == \"\"` into `SetHeader`. That is, we change `if (filename != nullptr) { ... }` into `if (filename != nullptr && CheckCanLoadFromBin(filename) == \"\") { ... }`"}
{"msg": "I think we should change the variable name of `err` in `if err, ok := err.(*exec.ExitError); ok `, this re-assignment of `err` still affects the next `else` branch"}
{"msg": "Swapped these to ensure that we aren't passing a nil cluster in to util.IsPaused"}
{"msg": "A bit late, but I don't think this is necessary, as all callers will send absolute paths. And if you ever get a relative path, resolving it with `toAbsolutePath()` leads to it being relative to whatever CWD the app is started with, while the typical resolving of relative `instanceDir` is to resolve it relative to CoreContainer#coreRootDirectory."}
{"msg": "There's an awful lot of test failures here because `localFieldPathType.schema` may not contain a `getters` array."}
{"msg": "Mysql allows for `||` concatenation (e.g. `firstname||' '||surname`) if you enable it: `set sql_mode=PIPES_AS_CONCAT;`. I think this check is safer though"}
{"msg": "I'm curious why you are using `draw` in this route file?"}
{"msg": "I like the idea of replacing all the `#if NET461` with `#if NETFRAMEWORK`... is that worth doing now? Means fewer changes if we go to 4.7.2 at some point  "}
{"msg": "This bugfix also included, in case a subjectAlternativeName was present in the cert, then URIs (e.g SVID SPIFFE auth) would not have been attempted."}
{"msg": "Is this the code that's supposed to use the Rails app's only when in Rails4? What's the point of the first `if app.respond_to?(:secrets)`, both the `if` and the `elsif` have the same body, is only the second one needed? If `app.config` has a `secret_key_base`, then use it, the end. Is there a need for first checking if `app.respond_to?(:secrets)`?"}
{"msg": "We can't really test this anymore since ref and props.ref are at the backing node level now"}
{"msg": "This looks fine as a first approach, and can we put a TODO here about ubuntu 18.04 being hardcoded?"}
{"msg": "I worry that this association name is a bit confusing. Yoz was asking me about the concept of completion yesterday, which is why I think of it. It wasn't clear to him exactly what it was. what about calling this a `step_completer` ? we know that a proposal has many steps, so I think that might be clearer. in the future, we also might want the rename the `approver` relation because a step is not always an approval these days."}
{"msg": "Just add a to-do saying we need to add api-version in the check some time in the future when we enable the single-swagger spec mode for validation."}
{"msg": "@lunika Please see this. It allows us to do `Propel::getConnection()` easily, as we have only one database."}
{"msg": "Note that there are multiple OAI servers -- that's why `$serverClass` is a variable here. You'll want to fetch `$serverClass` from the service manager rather than a hard-coded value, and also set up a module.config.php for the authority record version, `VuFind\\OAI\\Server\\Auth`. Should be easy enough since it can share the same factory."}
{"msg": "Maybe just `env_prefix`, I don't think this is referring to the WQ manager."}
{"msg": "`cfg.model.get('neck')` will return None if neck does not exist, thus we can omit the default value."}
{"msg": "I don't see why a `cxxflags` key is necessary? C flags are important in the target file because they define things like the float ABI. But these flags are also used for C++. I can't think of a reason why you would want to configure C++ flags in a target file."}
{"msg": "Can we update this PR to not be a breaking change? i.e. if a user specifies `accessKeyID`, it is still used. But if a user specifies `accessKeyIDSecretRef`, it takes precedence?"}
{"msg": "why? event.getInvocationType is not you want?"}
{"msg": "nit: how about `GitSHA`?"}
{"msg": "If you move the other functions, this should also be moved to `makeflow_gc.h`."}
{"msg": "This whole block bugs me. Expire_time to me suggest that an absolute time of when something happens and duration is an interval of time. While the code looks correct, it feels awkward to read."}
{"msg": "Can we add `_dom` as an argument to createVNode here? I think it might be shorter (could totally be wrong!)"}
{"msg": "shouldn't this be `return TALKACTION_BREAK;` as the player does not meet the required group access?"}
{"msg": "does this still work if minerNode1 has already proposed a block before 2 & 3 are stopped?"}
{"msg": "Do we need to also change `length` here (and below) to `bytesize`? Perhaps we ought to make a copy of `in_buffer` encoded as binary and then the existing algorithm should work."}
{"msg": "Can we just say that having a non-nil `autocomplete_path` implies that autocomplete is enabled?"}
{"msg": "Note that the package github.com/golang/protobuf/proto is deprecated. We're instructed to use the \"google.golang.org/protobuf/proto\" package instead. I didn't want to change it now to avoid intrusive changes whose consequences are, currently, unknown."}
{"msg": "Are these gone routes? Do we need to 301 them?"}
{"msg": "can we rewrite this as: `ignored event '%s' for cstor pool '%s'`"}
{"msg": "Do we want to redirect this to the forum or something in case people have it linked/bookmarked?"}
{"msg": "@peterzimon came up with this 'NM' piece as a placeholder for New Member initials, without this the screen looks broken. It changes to normal initials calculation once email or name is entered. Lmk if you'd like to put something different here ;)"}
{"msg": "@kevinansfield Would be cool if you can take a   if this is the best way to add `subscriptions` info on member model. This uses the transform + separate model definition way which seemed to be the right way from other references in Admin  "}
{"msg": "can we move the code before deleteNodeFromDB ? this way even if the node crashes after remove config we can still re-run decommission again ?"}
{"msg": "Seems the default value of `melt`'s `var_name` at namespace.py should be changed as well."}
{"msg": "So the intention is you configure with `-CMAKE_CXX_FLAGS=\"-D KOKKOS_IMPL_TURN_OFF_CUDA_HOST_INIT_CHECK\"`?"}
{"msg": "I think this should be called after the if below (the one for disable positive acks)"}
{"msg": "Should these restore the stashed env after the test runs?"}
{"msg": "We're calculating the full list of kwargs here (even if the first element of the list would return True) so we could improve performance by using a generator line 408 in ``for default_node in all_defaults:``."}
{"msg": "Can ndelta differ depending on when the deltas are compacted? That is, when intermediate updates are dropped?"}
{"msg": "This task can probably be deleted since we don't need gulp to run Jest."}
{"msg": "Doesn't this need to include `Errno::ECONNRESET` to fix the issue?"}
{"msg": "never heard of a qirector... what's their role again? (also should be 'for a movie')"}
{"msg": "Can we change `_getCheckpointParentDir` to be a public function explicitly? It seems like something that clients of experiment runner may wish to use."}
{"msg": "I understand that we want to have a possibility to configure the IcebergInputFormat to be case sensitive or case insensitive since it can be used by other MR jobs as well. Do we want to allow the users of Hive to shot themselves on the foot and enable case sensitivity? My first guess would be that we should not use the configuration here, just go with `false`, but if you have some specific use-case in your mind I can be easily convinced  "}
{"msg": "Will the above call to cStorPoolAddEventHandler() get executed in the same thread as this line?"}
{"msg": "I don't think alloca instructions are always at the start of the entry block. I think it would be safer to check the entire entry block for alloca instructions, just in case some are not the first instruction. (Technically they can be anywhere in the function but we check in other places that this isn't possible)."}
{"msg": "Can this be `Import operations failure`? In addition, is this the right time to change the variable names? e.g. `ReasonImportOperationsFailure`, `ReasonImportFailure`, `ReasonImportSuccessful`, `ReasonCreateResourceFailure`, `ReasonImportResourceSuccessful` Naming convention that i have assumed here is as follows: `Reason<Action><Entity/Adjective of the Entity><Sucess/Failure>`"}
{"msg": "I suspect this isn't needed because I think `rb_intern` gets marked already."}
{"msg": "Same as above: don't start error strings with a capital letter, and don't fix unneeded things in an unrelated commit ;)"}
{"msg": "you'll need to wrap the _whole thing_ within this async call (or refactor it so everything below is in a new temporary function). The code below this section depends on a value for `object` after the parsing occurs, but what you're doing here is kicking off a race condition where `object` is null, but _might_ parse quickly enough to assign it the parsed parts. Instead, you need to do everything that depends on the parsed object in the callback of `parse`."}
{"msg": "Should we change the name of this test struct to be `testTracerProvider` as well?"}
{"msg": "Could we public events if `manager.serStatus()`?"}
{"msg": "nit: Should we have something like `volumeName@snapShotname` and this will be filled only if it is a clone creation"}
{"msg": "These should probably move to `constants.js`"}
{"msg": "it should be `Faker::Space.launch_vehicle`, otherwise it will crash"}
{"msg": "Isn't it quite expensive to check whether the file exists on every write?"}
{"msg": "Did you mean for this to be `FORM`, instead of `FROM`?"}
{"msg": "You lose the value of `result` when you `goto out`"}
{"msg": "Just a style thing, why not `this.ratio_ || 0`?"}
{"msg": "I think the stdlib's `net.IP` has a `Mask()` method, does that do what we need?"}
{"msg": "Why does substitute need to be public? Are we allowing/encouraging variable usage when using Daisy as a library?"}
{"msg": "We should probably use ctrl-enter if `tab` is given, just like in `follow_selected`?"}
{"msg": "What happens here if you send the `wheelEvent` directly to the `tabbed_browser` and let it take care of propagating it to its children (i.e. the focused tab)? If that works, I guess that'd be cleaner."}
{"msg": "Same here, can we presume if `privacyParameters` is set we need goQuorum handling? Or is there a goQuorum sub option in `privacyParametes`?"}
{"msg": "The addition of delete files in `newManifests` far above the addition of data files threw me a bit. Is it intentional to ensure the delete files are at the front of the list?"}
{"msg": "Interesting. The call to `Array(groups)` below this would seem to indicate this doesn't _have_ to be an array. I think the problem is actually that passing a hash to `Array()` actually converts the hash to an array of key/value pairs rather than wrapping it in an array. So maybe `Array(groups)` should be `groups = [groups] unless groups.is_a?(Array)`."}
{"msg": "shouldn't the import be renamed `crdv1alpha1` by convention? It seems that you took care of renaming everywhere else..."}
{"msg": "Git doc seems to suggest `for-push` is a optimization. Do we have a plan/ticket for treating them differently?"}
{"msg": "not sure why this is in a \"rule\" child package from the interface..."}
{"msg": "Shouldn't the logic be: * the result is a mismatch if either is a unix path but the other is not * if both are unix paths, then perform case-sensitive comparison * if both are not unix paths, then perform case-insensitive comparison"}
{"msg": "this could receive the MediaInterface directly or an identifier, it is correct to type it with int|string? or just use mixed?"}
{"msg": "Looks like we are trying to match the new ordering of fields in `ManifestFile`. Earlier, we co-located `...FilesCount` with `...RowsCount` to match the ordering of methods in `ManifestFile` and args in constructors. Is this change intentional?"}
{"msg": "`once` is very generic and doesn't specify it's purpose - `closeOnce`?"}
{"msg": "Why did this need to change from `private`? Oh for the test below. And this is only a test class too.  "}
{"msg": "I think you want to be asserting/clicking $saveLink, not $link."}
{"msg": "We don't have `target_name` on `@sensor` - why introduce it for `@asset_sensor`? If we do want to introduce it everywhere, can we just call it `job_name` to avoid introducing a new term?"}
{"msg": "why is the file named `pipeline_definition_definition_sensor`?"}
{"msg": "So it seems that loading a script file from the classpath needs to be enabled explicitly now since this is `false` by default. Is it possible to enable this via the YAML config file in a Camunda Platform Run distribution?"}
{"msg": "I suggest we remove all these unused functions. I don't expect any external projects to be importing packages from `cert-manager/test/...`"}
{"msg": "Are we removing this public method? Could it be useful to someone? Maybe we could implement it once in Node using the metamodel"}
{"msg": "I know we discussed this before and decided to reuse the AntreaPolicy gate. But do you think realization status will introduce much overhead or not?"}
{"msg": "This is not really needed, the line added in `GridNodeConfiguration.java` is what really fixes the `remoteHost` regression."}
{"msg": "If strstr returns NULL, the check on 378 won't fire, because param_name will be at least SET_PARAM_CMD_LEN."}
{"msg": "maybe 'standard Tukey boxplot definition' if it is standard? Otherwise sounds like it is just *a* definition for boxplots..."}
{"msg": "This needs to take the group id, not the gsuite id."}
{"msg": "Kind of unrelated to this PR, but let's update this to `getDataErrorComponent( 'search-console', error.message, false, false, false, error )` so that everything is passed as expected."}
{"msg": ":obj:\\`dataset\\` cannot be correctly rendered"}
{"msg": "I think `email` is something we get from devise, and I think the goal of putting it in the generator was not to tie others to that particular implementation?"}
{"msg": "If the span producers pushing to the queue do so faster than the this can drain, it will cause this to hang. I'm guessing we can update the `enqueue` method to check if the `stopCh` is closed and not send any more spans while this flushes what has already been pushed."}
{"msg": "Not sure about that, an array is iterable right? But if I pass array, that clear method wont work"}
{"msg": "I looked at the new `conditionalBranchesEvaluated` function and it looks like the part added is a duplicate of the line above?"}
{"msg": "can you put this flag in `blockRefInfo` instead? It would be a shame to add one more file per block, especially since we've run into inode limits. I guess `blockRefInfo` should maybe then be renamed to `blockInfo` or something. But we're stuck with the filename."}
{"msg": "Was this just wrong before? The names indicated types but type wasn't specified. I guess the tests passed as comparison worked with ``type=None``?"}
{"msg": "icebergCol.name() is the unqualified column name"}
{"msg": "We run prettier as an eslint plugin, so this harmful"}
{"msg": "`agent/gpu/nvidia_gpu_manager_unix.go:47: struct field lock has json tag but is not exported`"}
{"msg": "nit: better rename to `TEST_QUEUE_ARN` or `TEST_EVENT_SOURCE_ARN`"}
{"msg": "Would this mean that podMonitorSelectors suffer from the same issue if they are the only configuration set?"}
{"msg": "We usually use OkDialog()"}
{"msg": "I still don't seem to fully understand this. Why are we testing the host if DR_HOST_NOT_TARGET is not set?"}
{"msg": "hmm, I think we can just do `new Error(assembly.error)` and that should set `error.message` correctly too. I don't know why it was done this way with a separate `.message` assignment before :sweat_smile: Should we do `error.assembly = assembly` so the template editor can access it that way, rather than parsing `error.details`?"}
{"msg": "minor: please rename all occurrences of `A` to `T`. please also rename `v` to `value`."}
{"msg": "Do we want it to be so dynamic? My first idea was to base it on SyncConfig.BeamSync ."}
{"msg": "can you change this instead to just `type.toString()` and then you wouldn't have to expose the getBitMask in the enum. (Alternatively you could have used `type.hashCode()` but that doesn't feel as nice)"}
{"msg": "Let's keep using NewKeeper so that it got covered by tests."}
{"msg": "Make sure the old logging functions still work, but add deprecation warnings (unfortunately Python suppresses deprecation warnings by default, so I'm not sure if anyone'll notice)."}
{"msg": "Not directly related to the topic of this ticket: I think this API design is a bit confusing. To disable delemetry, I would write `managementService.enableTelemetry(false)` which is not intuitive to read. Maybe `toggleTelemetry` instead of `enableTelemetry` is more clear."}
{"msg": "Again I suggest returning `AnnotatedCodeLocation[][]`."}
{"msg": "Am I right in thinking this completely avoids the situation where `enable_calltarget_state_by_ref` is `true`, but the managed integrations don't expect a by ref argument? For example, if there's an exception here, that seems like a fatal problem, as we would have a mismatch for jit rewriting? We should disable instrumentation entirely in that case shouldn't we? i.e. if this (or the existing `EnableByRefInstrumentation`) calls fail, should we bail out of this method entirely as we can't safely instrument?"}
{"msg": "Talking about style, IMO extracting either `getComponent()` or `getPubDate()` to variables would make this line easier to read."}
{"msg": "Just a thought (doesn't change the output or anything) - do you think we'll ever want to access the other properties of `oldVNode` from within `_childDidSuspend`? If so we could pass `oldVNode` here and then check these properties in the _childDidSuspend implementation. I don't have strong feelings either way, just occurred to me."}
{"msg": "Can you do a nil check here, as the task isn't always nil here?"}
{"msg": "`lodash` shouldn't be grouped under WordPress dependencies"}
{"msg": "If this value doesn't exist (do an `, ok := ...` check), we should initialize and store it"}
{"msg": "Would use parenthesis to explicitly state the associations of operands ```js const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || (-(2 ** 53) - 1)"}
{"msg": "This handle is now private to pyserial, but if there is no public function to retrieve it I guess this is the best we can do."}
{"msg": "Why did we not leave this as just `svcDescriber`?"}
{"msg": "What's the theory on why this could fix the hang? It seems like the call to `GetRootNodeForTest` will always need to call into the crypto object before returning an error, and so it should block on that `c` receive, after which the test immediately drains `errCh`. So I don't quite see how buffering would help..."}
{"msg": "I wonder what does this `// nolint` ignore? And what are the standards that you choose which error to fix and which to ignore?"}
{"msg": "I think this is the only line in JS legacy code that should be updated based on the renaming. `global.googlesitekit.setup.isAuthenticated = response.authenticated;` would be sufficient to keep the old name for the legacy JS data (which will be phased out in the long term) while supporting the new name in the API route. All updates to the JS components above wouldn't be necessary."}
{"msg": "I only want the proxy request for this to run for kinesalite. So this just returns true if the KINESIS_PROVIDER is kinesis-mock"}
{"msg": "Maybe maxRetryTimes should be bigger than 2. Return Max(maxRestryTime, 2)?"}
{"msg": "Call `userName` is good enough, `signedUserName` is narrowing the actual usage of this method."}
{"msg": "the partInstall.go isn't an auto-generated file, and the part.sql doesn't exists either."}
{"msg": "Use IOUtils instead"}
{"msg": "Make `CircuitBreakerManager` implement `PluginInfoInitialized`"}
{"msg": "This is extra awkward, QVariant.convert() takes a QMetaType which takes the value of a QMetaType.Type."}
{"msg": "Probably cleaner and more general to do this: string,Format(\"Column {0}\", i+1) That way if the local language has a convention like \"3 column, this is\" it still works."}
{"msg": "I would say that client class should have default of False and Cloud prov should enable deleting."}
{"msg": "Did this remove the BOM or something?"}
{"msg": "Naming of this sounds a bit awkward. Perhaps priv_legacy_getTransactionCount or priv_legacyGetTransactionCount?"}
{"msg": "Would be nice to know what the `update` argument does in the docstring."}
{"msg": "Not passing in a `:params` key here."}
{"msg": "So now there're two ways to get requests: `ScenarioExecutor.get_requests()` and `Scenario.get_requests()`. To avoid confusion we should probably make `Scenario.get_requests()` method private, or hide it in some other way."}
{"msg": "@codepoet2017390 You have already initialized this ArrayList in the onPreExecute method then why do it here too?"}
{"msg": "It fills me with endless sadness that we can't use Selenium's own `SessionId` here."}
{"msg": "Interesting. So you've found that it's faster to request only the \"Stat\" without the data so long as this is the typical path?"}
{"msg": "Maybe we should better call the dispose function without checking the value of `item.data` (since the dispose function is setup before `data` is set up)."}
{"msg": "Why set to GPU, is it CPU?"}
{"msg": "Why you think that `model_ptr` will be `nullptr` when memory allocation is failed? I think `new daal_knn::Model(column_count)` would throw `std::bad_alloc` if `operator new` is not overloaded. Is it overloaded by DAAL in the way it simply returns `nullptr` in case of bad allocation?"}
{"msg": "so we don't have universal rules afterwards? In that case I'd remove this entirely (and maybe some places where it's used get cleaner) since we shouldn't ever add a universal rule. Not only because it's way simpler in TS, I'm also just super skeptical about \"universal\". In case of this rule, even control characters may have their place in Swaggers, e.g. in `examples` sections where you can have raw response bodies where control characters are perfectly valid."}
{"msg": "Just a thought that any further extensions of `buildBinaryFor` signature could be done as `buildBinaryFor(..., opts... BuildOptions)` for better readability."}
{"msg": "I'll fix the InMemoryExporter right after this PR lands"}
{"msg": "maybe need to add microserviceId too."}
{"msg": "It's no longer possible to use `modifyRow` to trim rows and that's ok to use TrimRows instead. But I think we should move this test to TrimRows plugin tests as `trimRows` setting is not a part of the `core`."}
{"msg": "The function seems to either return \"default\" or return the extension stripping the preceding dot. Does the fact mean that we can no longer register `.default` as an extension?"}
{"msg": "I like when `@deprecated` contains how to resolve it - eg. \"use `SplFileObject::fgetcsv()` instead\". The information in upgrade notes is usefull only during upgrade."}
{"msg": "As defaultSendPort is being removed, and I don't like TODOs on examples, please remove the whole line"}
{"msg": "Should we return `nil` when `err == errChangeSetEmpty` instead of calling l.103 `WaitUntilStackUpdateCompleteWithContext`?"}
{"msg": "INCR_BATCH and DECR_BATCH could be exposed as tuneable command line options but that might be too low level to expose. I think keeping private for now where \"in the know\" folks could use to try and tune makes sense. These values were choosen mostly \"at random\" and have worked out for us thus far."}
{"msg": "Do we need to check if `exp.Target.StressChaos` is `nil`?"}
{"msg": "Can't you just add `SelectSubscriptionActivity` directly to the manifest instead of opening `MainActivity` that then starts it?"}
{"msg": "I think after change this check `rowInMapper === null` is always false, so it's useless."}
{"msg": "ClockIpLpi2c4.Enable() is required. The same change is required for enablePeripheralClocks()."}
{"msg": "Not sure if Intl can be defined but not `Intl.DateTimeFormat`. Both seem to have the same percentage on CanIUse."}
{"msg": "Here, is it `null` because it is `null` in `$fieldConfiguration`, or because it has been set to `null` above in the `array_replace` ? If it doesn't exists at all in `$fieldConfiguration`, I think you should add `type => 'text'` above in the `array_replace`."}
{"msg": "I was thinking about this for #2928 too, which also uses `endsWith`... Presumably `SomeOtherObject` would match `endsWith(\"Object\")`, meaning that something more sophisticated like splitting it then iterating right to left would be needed in order to do this robustly?"}
{"msg": "I think this name is a bit confusing because if you asked someone what type of exporter they were using they would probably say Zipkin or Jaeger, etc. How about `ProcessorType` with `Simple` and `Batch` definitions?"}
{"msg": "`req` is unused in RecreatePipedKey"}
{"msg": "The \"Adsense\" term needs to be capitalized - I just noticed this was wrong through ACs and IB, so not a problem of the PR itself really. I'll quickly fix it."}
{"msg": "@bmckinney does this mean that the bibtex citation will be available via API?"}
{"msg": "We should probably tag the cliquet-fxa version as well."}
{"msg": "IIRC we need to use memset, because an empty brace is not C99 comformant, and because we cannot use `{0}` because how the struct is organized is not defined in POSIX (the initializer cannot be `{0}` if the first property of the struct is a struct)."}
{"msg": "I am a bit confused about PING here. Ping is implied and it overlaps with \"$SYS.REQ.ACCOUNT.%s.%s\" where the last token is what is requested (CONNZ) and the one before is the requested account id."}
{"msg": "nit: s/has cancel method/has a cancel method"}
{"msg": "Useless assignment to variable - `second_quiz`. Use `_` or `_second_quiz` as a variable name to indicate that it won't be used."}
{"msg": "Is this still needed since there's the `GzipPrecompressed` type?"}
{"msg": "@danieldietrich let's leave existing extension. Here we just mark `keyComparator()` with `@Deprecated` annotation"}
{"msg": "This breaks CI. I am not sure why you need to include io.h in this file especially on linux."}
{"msg": "moto mock setup needs to happen before boto usage."}
{"msg": "`hasattr(cb, 'first_metric_only') and cb.first_metric_only` -> `getattr(cb, 'first_metric_only', False)`"}
{"msg": "This makes me feel icky. We could also go the route of making `wlr_output.scale` a double instead of a float, but that would be a more widely reaching change."}
{"msg": "You're moving multiple times from `step.name`; you're not allowed to do that. Instead you have to copy the `step.name` string and (if you want to) move once at the very last."}
{"msg": "Can you rename alias to `executiongenpb`. The rule is package+\"pb\" for `temporal-proto` and package+\"genpb\" for server protos."}
{"msg": "Any noticeable performance hit? Any other way to avoid the allocation and copy even of the array?"}
{"msg": "Please add a space between `if` and `(`."}
{"msg": "Thanks for catching the bug. Here your change lets `v4IPNet` and `v6IPNet` take the first IPv4/IPv6 address in `addrList`. Maybe choose the last one also works and makes code simpler? What's your idea? @tnqn"}
{"msg": "Please also increment `Settings.VERSION` and update `AccountSettings`."}
{"msg": "I think this should just say \"build <date>\". And when builddate wasn't set, e.g. somebody built weave with 'go build' or some other way, this should return \"unknown\"."}
{"msg": "Not sure it makes sense to send the reply if we did not delete from the map, but I guess it does not hurt.."}
{"msg": "I think you should remove `if isinstance(by, str):`,. We also should fix the error message `raise ValueError('Not a valid index: TODO')` to match with pandas'"}
{"msg": "Curious - do we want this to be `OTel.GrpcHandler.Request`? For example, if someone is debugging a crash dump, they would get some hint that it was added by OpenTelemetry."}
{"msg": "FYI: I deployed a stack with multiple lengths for the stack name and resource id to cloudformation, to see how it truncates the parts for the final FunctionName"}
{"msg": "shouldn't this be `android_keystore_name`?"}
{"msg": "Should the interface have 2 `ParseHeaders` methods?"}
{"msg": "Nit: Does this make more sense as `iceberg.hive.metadata...`? The rest of the configs seem to start with `iceberg.hive`."}
{"msg": "Can we print a more human-friendly warning here, saying that plotting won't work or something along those lines?"}
{"msg": "I would avoid importing `felix/ipsets` package because this package is the windows equivalent and should be at the same level of `felix/ipsets`. We could add linux specific dependencies into `felix/ipsets` later and it will break Windows build."}
{"msg": "Wouldn't we want `PARAMETER_MAX_RESULTS` in here as well? (I might be miunderstanding how this is used)"}
{"msg": "Wouldn't we have the same issue with the internal libevent? IIRC, the integration is pretty close to an exact duplicate. Or does the libevent m4 code already take that into account when setting this variable? PMIx _requires_ libevent, so it isn't like pmix_libevent_support can be anything other than 1. I'm okay with leaving this question for separate resolution - just wondering why we don't have the same issue here."}
{"msg": "We'd lose the data here from the original teardown_exception and only get the dump_exception - I fear that that could make the actual error difficult to track if it cascades."}
{"msg": "somewhere in reward protocol, we need to do if epoch is Fairbank { a.foundationBonusP2StartEpoch = genesis.xxx a.foundationBonusP2EndEpoch = genesis.yyy p.state(sm, adminKey, &a) } that is to write the 2 new values at Fairbank height then this logic can follow"}
{"msg": "While it is technically OK to use `m.GetPaths()` here, and it's a mock code so it doesn't really matter, I'd still like to have `m.Path(\"devices\")` used here, because since commit 714c91e9f73a1512808476eb532b4aa36bbb7530 we're not supposed to use GetPaths() for anything other than state save/restore."}
{"msg": "Let's be consistent everywhere: either \"Disable\"/\"Enable\" or \"Disabled\"/\"Enabled\". I'm voting for the latter.:)"}
{"msg": "Could you explain the logic with prevFolderId?"}
{"msg": "It bothers me that the user calls `initialize` without also calling `finalize`. It seems to me that we're essentially making `lbann_comm` a singleton object. Going further down this path, we would put `initialize` inside `lbann_comm`'s constructor and `finalize` in the destructor. This has it's own weirdness - the user must make sure it's lifespan matches the beginning and end of the program. We may also run into the case where someone might want multiple instances of `lbann_comm`, but this is not too important."}
{"msg": "late to the party, but I bet it meant to be `capitalizeLettersAfterNumbers` :)"}
{"msg": "haven't we got rid off `randomSP` recently? (I think `not learn` implied that)"}
{"msg": "Why we need use `in.GetStatus()` function here? Can we use `in.Status.xxxx` directly?"}
{"msg": "@cretz Just a thought: what if another renewal process updates the certificate between the beginning of this for loop (above on line 67) and actually calling RenewCert? Even though we have a read lock on the certCache, something else could have renewed it by now, and finished, which would cause this certificate to be renewed twice. Could you double-check my thinking here and see if that's a plausible 'race' condition? I wonder if the lock needs to be put over this whole function. (It's still early here; I could be wrong...)"}
{"msg": "You could change the name of the command line switch too. Short options are typically one character after hyphen. wxWidgets' command line parser seems to handle `-nd` without confusing it with `-n` or `-d` but I'm not sure if that's by design or by accident. I'd remove the short option. `--no-daemon` is with hyphen but the rest of Manager and client uses underscore. Please change that."}
{"msg": "Why are we mentioning toybox in this message? AND it still says \"tdnf error\". What's the actual error? Should it be resolved instead of flagged?"}
{"msg": "This should be computed('i18n.locale'...."}
{"msg": "What does 1 << 32 do? In irb typing this yields 4294967296. I didn't find the append operator in Numeric or Integer."}
{"msg": "This was very confusing until I realized this might refer to the *bokeh* use of the word 'streaming'."}
{"msg": "Can you rename this as `tasksToContainerStates` ? If you do that, you can rename the lock as well"}
{"msg": "An iterator **of {\\@code n} sequential elements,** where each element ~are~ **is the** given {\\@code element}."}
{"msg": "If all of the `SqlCommandIntegrationName` values are the same, can we just remove it from `IAdoNetClientData` entirely and put the constant there?"}
{"msg": "Maybe regroup this import with the other cert-manager packages."}
{"msg": "We should pass the size limit as a parameter to Drain so that we don't take messages out of the pool and then drop them. It's ok to merge as is, I will file an issue."}
{"msg": "Patch lists are used in many places so this is going to break other updates. This should just be a local change in emit_special_ibl_xfer() to pass the second-to-last instruction instead of the last instruction."}
{"msg": "I don't know if we've actually had this problem on Upcase. I'd lean towards having a blank file unless (like on robots) we see multiple errors per week from this crawler."}
{"msg": "I'm not good at picking colors, if anyone else has a preference."}
{"msg": "Note that even if you cancel the timer, the refreshFolders function might still be running since it's async. Could that be a problem for the test units? One big issue I had with tests is they sometimes would work and sometimes fail randomly, and that's because there are still code running in the background. One example was the ItemChange class, which saves data asynchronously. So I've implemented a waitForAllSaved(), which can be used for test units, to make sure nothing is running once the test ends. So just wondering if we might end up with this issue here."}
{"msg": "Why is this a pointer?"}
{"msg": "This attribute is not defined if the condition is not met. Instead, you could define another RouteFactory (e.g. `BucketRouteFactory` with a class attribute like `allow_empty_list`)"}
{"msg": "Can we use the existing `InstalledTimestamp` function?"}
{"msg": "weird naming: `is` but `fields` (plural or singular ?) . If the method checks if the fragment has an invalid value, then \"hasInvalidValue\" or \"containsInvalidValue\" is fine no ?"}
{"msg": "Thoughts on this? I'm not crazy about the brittleness of this but haven't found a good way to test more generically that a specific (custom) template has been rendered."}
{"msg": "Have we reached binding-level agreement on the `subscribe` terminology? My only concern is that it doesn't seem descriptive enough and may be confused with subscribing for notifications."}
{"msg": "I think this might read better: > some apps need the response headers before starting to stream content with http2, so it's important to explicitly flush the headers to the client before streaming the data."}
{"msg": "What does this return if there is no partition? I think that we should consider adding a struct type that describes this tuple. That way, we can use an empty struct for unpartitioned and a non-empty struct for tasks that are combined by partition. We could also support more combinations, like combining across day partitions by not across bucket partitions or similar."}
{"msg": "Also, it might be worth returning this for the above lookup on `kbfsRepoDir` as well, which could happen if someone tries to delete a repo in a TLF that has never had any repos at all."}
{"msg": "Wouldn't this set $strictVariables = true when Config::get returns false?"}
{"msg": "Please update the method described to point out that it maintains a chain of interceptors and they will be called in the same order passed in the options."}
{"msg": "If key is present, tree.put(k,v) needs to return a new instance for Maps and the same instance for Sets. Therefore we currently perform an additional 'contains' check for Sets. A future optimization may add an additional flag `replace` to the backing HAMT.put() / RedBlackTree.insert() methods. Sets set it to replace=false, Maps set it to replace=true. But for now this solution is working for us."}
{"msg": "I'm wondering if we need to delete jsonStr and jsonAttr after the json_extract_path_text call to avoid unnecessary heap pressure. Though if json_extract_path_text itself does new's on the same heap, we'd get heap fragmentation. Another approach would be to allocate these on the stack instead, avoiding both concerns: char jsonStr[len1+1]; char jsonAttr[len2+1]; ..."}
{"msg": "This is so useful and safety, I want to propose making AppendBool, AppendInt, etc. all private functions, and forcing us to use AppendValue(j, values.New(false)), etc."}
{"msg": "I think you are missing `cftime.DatetimeAllLeap` here. That said, all of these are subclasses of `cftime.datetime`, so I think you could get away with just using `cftime.datetime` here, rather than enumerating all of the different subclasses (since `cftime_types` is only used for instance checks)."}
{"msg": "`expect(cancellation).to be_can_downgrade_instead` would be preferred :rainbow: :rainbow:"}
{"msg": "This is a parameter available for the matplotlib backend IIRC. In which case, it is good to see this support added to the Bokeh backend."}
{"msg": "trim has performance impact and this is the lowest level library... seems the trim if occurs should happen in the UI or Query controller instead.."}
{"msg": "BLOCKING: This is a problem. We shouldn't be introducing new dependencies on proofs into actors. The miner has some dependencies that should be removed (#2555). This could be accomplished either by moving `proofs.Mode` to `types.ProofsMode` or by forgoing a new type altogether and replacing it with a boolean. The later would have the additional advantage of reducing the number of types we have to export through ABI. I get why `proofs.Mode` has value as a type over a boolean, but I'm not sure it's worth it here."}
{"msg": "We probably want to log the fact that a `MessageId` was not present in the response. In addition the `RequestID` from `request.Request` should be included in the message so that the user is aware of the issue."}
{"msg": "It feels a bit strange to re-assign that here, as that line itself has no context on why it's reassigned. I'd prefer if we could pass `{ propertyID: webPropertyId }` below instead (that's how we do that elsewhere too). This also applies to other similar re-assignments below - let's rather pass the values within the objects as applicable, since then there is more clear context on why this \"rename\" / \"reassignment\" is necessary (because of an object expecting specific properties)."}
{"msg": "check varHolder is nullptr is redundant, ExecutionContext ensure"}
{"msg": "Make these frozen constants?"}
{"msg": "Please use something like html.escape() to ensure that the text is totally safe to include within html. &lt; is not enough."}
{"msg": "as opposed to exposing the chooser function and increasing our API exposure for the purpose of tests, can we move the HTTP transport config test into this package?"}
{"msg": "Please name the file ShareExtension.js, as you import it under this name (also could you convert it to TypeScript please?)"}
{"msg": "It's the whole `PublicHeader` that will change soon, and we should state that here, not in the member functions. If Jana's proposal for a new header is accepted, we might also want to rename the fields here. For example, there won't be a dedicated version flag anymore, so a more appropriate name might be `ContainsVersion` instead of `VersionFlag`."}
{"msg": "I think `element` can stay of type `Character` because `Character` is a final class. The we do not need the cast in the line below."}
{"msg": "Not sure, if we should do it the other way round. If you ask be in the middle of the night, whether Interface should return true as \"isInterface\" and what Annotation would return. I'd tell you, Annotations should return false.... I want to say, on first glance, I'd say, it's easier to have \"isInterface\" and \"isAnnotation\" rather than \"isInterface\", \"isAnnotation\" and \"isRegularInterface\"... But I see, we also have \"isRegularClass\".... We still have the possibility to change the semantics of those APIs in PMD 7 *Update:* Or in other words: What is less surprising? That isInterface returns true for annotations or that it returns false?"}
{"msg": "Please remove `HIP_UNSUPPORTED`"}
{"msg": "if this is a \"Status\" type then the variable name \"Stats\" (which implies \"statistics\") seems wrong (or at least confusing to me)"}
{"msg": "maybe will be better to put it into the default worker's config rather than hardcoding the address?"}
{"msg": "It seems like this is not meant to test the option failure, but rather that `raw` can be set. This may be a superfluous test now, and we might want to delete it."}
{"msg": "This is already done by `view_set_fullscreen`"}
{"msg": "mmm I followed the convention of this collection. It has Add, Remove, RemoveAll, so All sounds reasonable. Else It would likely be AddPeer, RemovePeer, RemovePeers and Peers."}
{"msg": "This should still have a value when there is no page title, e.g. just `__( 'Search Traffic Summary', 'google-site-kit' )`."}
{"msg": "Please take a look at the docstring of `F.binary_cross_entropy_with_logits`. `weight` should be a tensor that matches the input tensor shape. It is Not the class-aware weight. `pos_weight` should be a vector with a length equal to the number of classes."}
{"msg": "Can we do this without a breaking API change? What about adding a different name to convert directly to a Schema?"}
{"msg": "Why do we need to pull bluebird in here?"}
{"msg": "Looks like loop with overhead. You can: - create SID - test private function `sessionIsUnique()`"}
{"msg": "In my opinion, it would be better to have two separate settings. One that stores if sorting is enabled and one that stores the order. That allows to toggle automatic sort without having to re-select the order."}
{"msg": "nit: maybe call these `loadCollection()/loadDb()`"}
{"msg": "Did you consider just do `return Task is an external data dependency and data does not exist (yet?).'`? Less `None`'s and `ifs`."}
{"msg": "Please log once here at Error level \"Failed to connect to Typha, will retry...\""}
{"msg": "Can you revert this change? The `VERSION` value will be updated after maintainer determines the version at release."}
{"msg": "It could be better if we use the up case letter to specify the constant string name. Such as QUALIFIED_SERVICE_NAME_KEY can let the user know it's a constant string."}
{"msg": "This should be `@configuration.failure_exit_code`, we don't want to hard code 1."}
{"msg": "Changed per review in Blockly."}
{"msg": "Hi @wenyingd . so what's the original dst MAC of the reply packet from kube-proxy?"}
{"msg": "This should be called before any `os.Exit` otherwise it could still mess up things."}
{"msg": "shouldn't this be `short` ?"}
{"msg": "Can you please paste the output of `volume list` command which will show capacity of a openebs volume."}
{"msg": "I'd make this a `throw new NullPointerException(\"metric == null\");` instead"}
{"msg": "We need to pass in the Activity context here, so that LoginActivity is used, and so that LoginActivity can get onActivityResult from the PasscodeActivity. Without this, the application context is used, and we don't get a callback when the passcode is done."}
{"msg": "Can you move these to the top please, for consistency with other models - normally we put scopes immediately after the associations at the top of the model. As to names I agree with @gravitystorm that these names may be confusing but I'm not sure the ones I suggested are perfect either so I'm not really sure what's best. The goal of my names was just to separate point which could be ordered (as `ordered`) from those which can't (as `unordered`) but I realise that may not be very clear from the names."}
{"msg": "Looks like the episode should also not be deleted when repeating"}
{"msg": "So I tried adding this VU a long time ago, thought it would be this simple of a check, but turns out there were other validation in the way for getting here in `ValidateImageAspectMask` I assume that is what is failing CI here, realized it would require some more refactoring"}
{"msg": "This method is not needed for postgresql, by default sum function omits null values so we can remove this file"}
{"msg": "Can you provide a `--with-systemdsystemgeneratordir` option here? So that I can do unprivileged installs without completely turning off systemd. I can add it as a follow-up PR too."}
{"msg": "`classification` is misspelled"}
{"msg": "Can you change this to `sampleInitCode`?"}
{"msg": "I added a startTs information in `TiDagRequest` output. Not really sure if it is useful? @zhexuany"}
{"msg": "was there a reason to not loop over parent classes here?"}
{"msg": "@billybonks Why move `import Ember from 'ember';` to the top?"}
{"msg": "Everything's so simple (a `ThreeStateWorkflow`) until it isn't :smirk:"}
{"msg": "I don't quite understand where the NaNs come from..."}
{"msg": "I am not sure if we need this, we already have DifficultyBombDelays"}
{"msg": "remove `genesisConfig.GravityChainStartHeight == 0`"}
{"msg": "this might kill whole application if `var-dumper` will not be installed. What about two separate file_exists conditions (monorepo/project)?"}
{"msg": "Hrm. Maybe this isn't the correct spot to run this? Because it errors if the app type doesn't support settings. But we want to check that before running it."}
{"msg": "as we discussed, maybe it would be better to - [ ] set OVERRIDE_IN_DOCKER=1 in the Dockerfile - [ ] replace the if statement with `os.path.exists(\"/run/.containerenv\")` as @dfangl suggested"}
{"msg": "Our preference here is to either have inline statements e.g. `@group_level -= 1 if @group_level > 0` but stylistically here I think `return @group_level if @group_level == 0` might be nicer. As it stands however our rubocop is picking this up as a fail :("}
{"msg": "Spark3 Is supported in OSS Iceberg, Do you mean this particular function is not supported in Spark3? If so I think we should have a more clear reason why"}
{"msg": "I wonder if we should push this and the search_params_logic into the blacklight config."}
{"msg": "I wonder if this absolute path is gonna affect the build-cache relocatability of these compile tasks??"}
{"msg": "nitpick: Please only `import string` here and use `string.ascii_lowercase` - I really like to see what module stuff is coming from without looking at the imports."}
{"msg": "nitpick: the only reason we have a catch for every one of these promises is because the test isn't properly chaining promises (returning them within each `then`). We could reduce the `catch` with `console.dir` to a single instance if that was done"}
{"msg": "For consistency, would it not be best to also replace the first class name? `traceLog('Class ' . static::class . ' has been deprecated, use ' . SystemMediaLibrary::class . ' instead.')`"}
{"msg": "this should be `EnabledAdminAPI` and the json string should then be `enableAdminAPI`"}
{"msg": "as a future improvement, maybe we should just change `ForAllFlowRecordsDo` so that `updateOrSendFlowRecord` uses a flow record pointer instead of a copy of stored flow record. This whole code is executed with the lock any way."}
{"msg": "1) These names are not great, doesn't help explain what they do. 2) Instead of methods like this that hard code some number of = and *, why not a method that takes the string, defaults to a char to surround with, and a width? 3) Do we really even need headers like this in the output? Maybe we ditch them."}
{"msg": "i think this missed the reconciler to callsite change"}
{"msg": "Should we use the shared chai-addon.js file here? Actually we should consolidate any `chai.use` calls, I see 20 instances, quick win?"}
{"msg": "I see the `+1` issue, but we used to check if `o.lss != nil` and we don't anymore, so we are sure that it won't be nil here, right?"}
{"msg": "I made this change because I wasn't getting printouts of the 'result' value when the assert was inlined for some reason. I think it's related to creating new CallbackCheckers maybe?"}
{"msg": "you could use `bpf_map_update_elem` with `BPF_EXIST`"}
{"msg": "A few things: - This may not serialize because I think the property for the sequence number on an input is `.sequenceNumber`. - There should be tests to cover these statements - Indentation is incorrect (should be two spaces, as similar to the statements above)"}
{"msg": "If this is a base method that could be used by others, should you hardcode 'GCS uploader' here?"}
{"msg": "just a little thing: let's introduce a `final int bound = length - back.length();` that saves us calculating the bound each time checking the loop condition."}
{"msg": "I think that this should be a POST method, as it changes the state. Get requests should not change the state. With different method, I would suggest to have the handler under `\"/settlements/{peer}\"` path."}
{"msg": "We should let this module inherits from the EvalHook supported in MMCV, and only override the `__init__` function by adding the warnings. The other functions can use those in MMCV."}
{"msg": "Let's move the check outside the `for`-loop so that we don't have to do it for every prop. If we change it to check for `vnode.type === 'string'` we can automatically skip checking text nodes which don't have props  "}
{"msg": "Seems like the docstring here should simply be \"Deprecated; use `hooks` instead.\"."}
{"msg": "The `SymbolTable` deals only with symbols, I think we can just call this `isUsed` here."}
{"msg": "JMX offers normal APIs for this. I don't think you want the glassfish one."}
{"msg": "Maybe it would simpler to ignore opt_port if type !== 'number'?"}
{"msg": "I am wondering if it is better to consolidate all committer checkpoint states into a single structure, e.g. Pojo class or Avro record which are Flink supported state types for schema evolution."}
{"msg": "I assume this is a performance optimization to only check this once when creating the signal filter? While you're at it, maybe make `BLACKLIST` a set instead?"}
{"msg": "Please use async/await and try/catch"}
{"msg": "Like I said, this code looks incorrect. Why is it still looking up the attribute? Why is it getting the type from `nested->type.struct_def` instead of `field.nested_flatbuffer`? Are you running `generate_code.sh`, because I think `nested->type.struct_def` would be null?"}
{"msg": "this can just me `link_text` :tomato:"}
{"msg": "Every place you see a change like this, it's because `PhysicalLocation` is now its own object, not an array of `PhysicalLocationComponent` objects. The `Uri` is the key into the `FileInfo` dictionary."}
{"msg": "nit : I think it would be better to have the multiplier being calculated along with `pool.numPendingWholeBlocks`, so that we could always multiply the feePerByte with that multiplier. Not only that it would be faster, but it would also have constant time. btw - Correct me if I'm wrong, but with this change, you're practically rolling back your previous change while making it `pool.expFeeFactor` adjustable, right ?"}
{"msg": "A new translation dump should be made after this change (removing the \"Email\" message)"}
{"msg": "CI is failing saying `expected [TypeError: null is not an object (evaluating 'implicitNodes(role).map')] to equal null`."}
{"msg": "Can we create some post records to assert sort_by"}
{"msg": "What is the purpose of this? It seems like it is used to indicate whether there is a filter on a span. But what filter? Could there eventually be multiple filters per span? Just not understanding."}
{"msg": "I've fixed it for this change but for future reference there's no point doing string substitution for a single value like that - it will just slow things down. Just use `:mlat => trace.latitude` etc instead."}
{"msg": "Usually we only keep the assertions that are relevant to the specification (ie. the test title). For example, the test on the values of id and details is not properly relevant for the spec _collections are isolated by bucket_. I suggest that you only keep the assertions regarding `details` in dedicated tests similar to `test_unknown_collection_raises_404` from `test_views_records.py`, but for each of bucket, group, collection and record in the other `test_views_` files."}
{"msg": "isn't the usual capitalization for subcommands force-qr? (don't care too much about it)"}
{"msg": "Does `f0[::-1, :]` mean all the rows taken in a reverse order?"}
{"msg": "How about `nextAlreadyDefined` variable name in method signature?"}
{"msg": "Fixed this since it no longer needed to be switched from a generator to a list, this was missed when I cleaned up the dataset code in an earlier PR."}
{"msg": "If these are applied in order, should `LambdaMethoReference` come after `OptionalOrElseMethodInvocation`"}
{"msg": "Why do we do this check here? `sys.version_info` cannot be less than 3.3 as pylint does not support older versions. I think we should avoid popping `__main__` altogether."}
{"msg": "I'm a little worried about the new extra calls to `MakeMdId`, since in most local-server KBFS profiles, hashing is the biggest CPU user, and not re-using the value calculated by the client will result in even more hashing. That said, I understand why you did it this way, and I don't have a concrete suggestion on how to make it better. Just something to keep in mind; plus it might be worth comparing the test speed before and after this change to make sure it didn't slow things down too much."}
{"msg": "`lodash` shouldn't be grouped under WordPress dependencies"}
{"msg": "This TODO and this `sort` depend on how the UI looks like. So I think we should fix the UI before continuing on updating this web API. For example, in case the UI flow is as below, this API will receive a Piped ID and then return just ones belonging to that Piped. - User picks where they want to deploy first (select one Piped and one cloud provider) - Then API will be called to show the list of suggested apps for that Piped and cloud provider - User picks app they want to create"}
{"msg": "`hasattr(task, 'param_visibilities')` is more concise with the same effect, but either one works."}
{"msg": "I would hedge this a little, maybe `Positional arguments appear to be out of order`. After all, it's just a guess."}
{"msg": "you can directly call show() method from **SnackBarHandler.show(coordinatorLayout, getString(no_account_signed_in)).show();** no need to create an extra object and then call the show method."}
{"msg": "Will it still be an issue if all the models use the same data set?"}
{"msg": "Instead of `DELETE_MARK`, how about `IS_DELETED`? I don't think that \"mark\" is clear enough to describe what this is. Similarly, I think the docs should be \"Whether the row has been deleted\". There's no need to include \"delete mark\" because that's identifying something that is not defined (this column is _deleted and \"mark\" is not introduced), and \"or not\" is unnecessary because it is implied by \"whether\"."}
{"msg": "Why change the default value of `is_diff`?"}
{"msg": "That's unrelated, but shouldn't there also be a call to `setInternalWebPropertyID`, making it empty, for this case? Otherwise, when selecting to create a new property, any previous internal web property ID will still be in state, potentially causing problems."}
{"msg": "The `move_topic` action be a `post` request since it changes the state of the object."}
{"msg": "Noticing this is really just the same as cart_notification_email. Would be nice to be able to view custom templates. I may update this with some set up that will make viewing specific custom emails easily."}
{"msg": "Should we even fix this test? IMO it should be refactored to check that values are recalculated after `setSourceDataAtCell` and `setSourceDataAtRowProp` calls. This will be the correct way to alter the data since now and we're not testing this use case."}
{"msg": "Was changing this to a write transaction required?"}
{"msg": "Just a small tip: I think you don't need to include pytest here. You can run tests using: - `pytest tests/path/to/my/test` under the virtualenv to run a single test. - `pytest tests/` under the virtualenv to run all the tests. - `make tests` to run all the tests for all python versions, like travis do. Hope this helps! :)"}
{"msg": "Why was this `Task.Yield` removed? It was added in purpose."}
{"msg": "You'll also want to do this below, for the `optionalFieldConfigs`. See `GapicMethodConfig.java:180`."}
{"msg": "But why introduce publish on `accConnsEventSubjNew` subject if we never subscribe on that subject. What is the plan then? Replace subscription on \"old\" with \"new\" at one point? Not sure about all that.."}
{"msg": "strange, for templating\\EngineBundle it was `\\Symfony\\Bundle\\FrameworkBundle\\`"}
{"msg": "But if we're on the merge deployment, and the next one is the booted deployment, we'll still be inserting between the merge and booted deployment, right? It seems like we would need e.g. `met_merge` and `met_booted` vars to keep track."}
{"msg": "Can you put the output of this into data, and list which roles are invalid? Same thing with abstract role. I know that's not strictly part of this PR, but it'd make the messaging about this a bunch better."}
{"msg": "Should we go ahead and push `agent_is_crawler?` into the `skip_session_tracking?` method?"}
{"msg": "How about we raise a warning here and simply change to use self.data_infos = self.load_annotations(self.ann_file)"}
{"msg": "seems incorrect - for 5 validators it will tell that 3 is enough to seal and you need 4 2/3 * 5 is 3.3"}
{"msg": "session is a new term. Should we call more like currentCommandBatch or something else?"}
{"msg": "It was decided that blockSignerAddress is not only redundant (use the miner owner public key instead which is already stored), but does not belong in config."}
{"msg": "are we not asking for trouble here by not pinning this? or does 3.* imply all of the draft versions we'd try to validate?"}
{"msg": "No, we want to compare `tm_py` and `tm_cpp` in this test."}
{"msg": "Can we use EJSON from bson here? and in doing so avoid bringing in the deprecated `mongodb-extjson` lib `const { EJSON } = require('bson')`"}
{"msg": "Actually, it looks like HAVE_RSEQ is only used to determine whether the rseq.h header is around, which then only determines whether the regression test is built: it does not affect whether the core handles an application using rseq. The core rseq mangling code and all the code in rseq_linux.c is always enabled. I believe the idea is that we want DR built on one machine to work on as many others as possible, rather than requiring a custom build for every variant of kernel feature or whatnot. What is the top-level problem being solved here? If it requires disabling or enabling the core handling rseq, probably a separate option should be put in place and maybe HAVE_RSEQ renamed to make it clearer what its consequences are."}
{"msg": "Hmm, do we need to do this for Windows too? It won't have this private loader TLS issue but it will run DR code in a separate thread before DR init is fully done which I think violates some assumptions. For Windows we would move this wait from win32/os.c to win32/callback.s intercept_new_thread where it checks whether it's a client thread right before calling dynamo_thread_init. If you do not want to deal with Windows you could bail on my suggestion and leave the issue open (or maybe file a new issue) for Windows, or if you want to put the suggested core/win32/ change in place and your new test passes on Appveyor we could then claim to have fully solved this related issue too for all platforms."}
{"msg": "We can remove this function and use `lambda_function_name(..)` in this file instead."}
{"msg": "nitpick: `ApplicationVersion` could be `AppVersion`. It's smaller but gives the same understanding for purposes of the field."}
{"msg": "nit: maybe prefer `resp = &workflowservice.PollWorkflowTaskQueueResponse{}` over adding another function exit points especially for non-error cases?"}
{"msg": "Do we specifically need to keep the read preference as a symbol for use elsewhere? If not, I think it would be cleaner to just modify the options before caching them in the `client_options` method so that we don't do this check every time. If we do need it a a symbol elsewhere, I'd suggest either putting `return @client if @client` at the top of the method (and changing the assignment below from `||=` to `=`) or moving this within the parenthetical block in the last assignment so that we don't repeat this work."}
{"msg": "Since this is for video only, should it be called `preferredVideoMimeType`? If we add it for pictures later, it will likely need to be a different option."}
{"msg": "That doesn't make sense. LayoutEntry doesn't match the generator concept."}
{"msg": "I would recommend using Psr\\Container\\ContainerInterface here instead of Interop\\Container\\ContainerInterface; both currently work, but the Interop version is deprecated and will eventually be removed, so using the Psr version will save us time in the future."}
{"msg": "This would also change back to /var/www/html/docroot if we go that way."}
{"msg": "Thanks. Now that you've improved this we should just init and expose the StorageAPI on the node, like the other.s"}
{"msg": "I recommend using StringSliceVarP to resolve the label flag, like `-l key1=value1,key2=value2`. What do you think?"}
{"msg": "@Samuell1 Will assigning the same icons array to all the tabs result in, for example, a primary tab called \"Colours\" and secondary tab called \"Colours\" having the same icon?"}
{"msg": ".GetMethod() cannot return null now, correct?"}
{"msg": "Fair warning, the way that exception block is written won't work in python3 Python 3.2.3 (default, Jun 8 2012, 05:36:09) [GCC 4.7.0 20120507 (Red Hat 4.7.0-5)] on linux2 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. > > > try: > > > ... raise ValueError(\"foo\") > > > ... except ValueError,e: > > > File \"<stdin>\", line 3 > > > except ValueError, e: > > > ^ > > > SyntaxError: invalid syntax"}
{"msg": "Where is this environment variable being set?"}
{"msg": "`module_class ` is already a class and `type(module_class)` always returns `<class 'type'>`"}
{"msg": "Nit: The lambda can be replaced with a method reference: `SparkOrcWriter::new` I think."}
{"msg": "It would be nice to have a docstring that says what range of integer-like objects will be accepted, as well as what the int_like argument is meant for."}
{"msg": "Is this `{clipboard}` or `{primary}`, as the deprecation message for `:paste-primary` says?"}
{"msg": "May be you could elaborate on why you removed this? I see some of this logic has been moved to ia2Web, but couldn't there be cases outside ia2Web (i.e. UIA) in which case ROLE_TABLEROW and ROLE_TABLECOLUMN are mapped to objects, in which case these objects will be of presentation type content erroneously?"}
{"msg": "This is not consistent. Either rename the first to `tradePlayerItem` (which is ugly) or the second to `partnerTradeItem` (:+1:)"}
{"msg": "shouldn't this work? nodesRegex = regexp.MustCompile(api.SpecNodes + \"=(('[0-9A-Za-z,_-]+')|([0-9A-Za-z_-]+)),?\")"}
{"msg": "You mentioned this change was prompted because the `before_create` action was actually a defect. This will be done only for a new record; why is `before_validation`, which will be called repeatedly as accounts get updated and saved, correct whereas `before_create` is not? It looks like one would want to assign and activation code, etc., only once."}
{"msg": "What's the rationale for a default setting to not use a GlobalSamplingRate of 1? I don't know much about the sampling rate stuff"}
{"msg": "Maybe we could add some use of `exporterOptions` in this example, otherwise the proper code would replace this variable name with an underscore?"}
{"msg": "if we're switching to calling FileDownloadHelper, we can just call that directly from the xhtml (see line 357 for example) and then remove this method completely. This is because the other thing it does is check PrivateURLUser, but the FileDownloadHelper method already does that. (and while we're at it, we can remove the method from FileUtil as this is the only place that method is called)"}
{"msg": "Improve the formatting of the message `.Infof(\"setting db capacity to: %v\", db.capacity)` There is a space before `:` and this way it is easier to see the formatting."}
{"msg": "This lock cannot be released here, as it is protecting m_RTPSParticipants and the participant reference."}
{"msg": "This is the fix for the crash. The function to create the intent to launch this activity requires `dbName`, so it has to be set to `null`. In such cases, the value for `dbName` will be set to `null` and cause issues throughout this activity. This adds a default value if the explicitly assigned value in `null`."}
{"msg": "Shouldn't we also trigger vision update here, so that if someone has caret highlighting enabled the correct character is highlighted?"}
{"msg": "Can't you just use runnvda.bat here?"}
{"msg": "these definitions of UNUSED aren't the same as the one you imported, so callers should be fixed (if any)"}
{"msg": "here input could be a normal function or an instance of torch.nn.Module."}
{"msg": "We really, really want to catch _everything_ here. It is safe to leave `azkabanEventReporter` set to null."}
{"msg": "This is just `mol->atomNeightors()`, is it?"}
{"msg": "confusing naming. Identity from \"id\" package :/ why we need alias here? (and in other imports)"}
{"msg": "So `Status` returns metrics?"}
{"msg": "Why would this be called to copy a non-Date object?"}
{"msg": "This alignment issue had not appear because no multiple `Boolmsg`s had been serialized at once."}
{"msg": "Why are we not implementing a BooleanDefaultFalse struct and replacing all of these config vars that default to false with that? Are \"default false\" config vars not affected by this bug?"}
{"msg": "Can this be `test -e /var/run/mysqld/mysqld.sock` instead of `ls`? Using `ls` for noninteractive stuff is a recipe for sadness, IMHO. /cc @tianon"}
{"msg": "Are these `dependent: destroy` attributes intended to implement cascading deletes? I had assumed they were added because of the `paranoia` gem, but since that is no longer part of this PR, are they here as a best practice?"}
{"msg": "This approach would work only if there's a guarantee that the stream does not get freed before `establish_tunnel` is called, even though it _may_ enter CLOSE_WAIT state (at which point `stream->tunnel` is set to NULL). I do not think that assumption holds. Hence the alternate approach."}
{"msg": "If we're going to clean up this package, can we also remove those two `_` imports that appear to serve no purpose? (FWIW, they're also in the manager package too...)"}
{"msg": "Ok, we can't switch it now, because the properties are a field of the interface Rule - which makes it public API. Maybe we should remove it here in the (Java) API in 7.0.0? The only API left would be, when using a rule and setting the properties in the ruleset xml. There the type doesn't matter - since the String is then automatically converted into a Pattern."}
{"msg": "I'm unfortunately unable to review whether you've changed everything that used to use cartIds"}
{"msg": "Will this change the input `heatmap`? Is this behavior expected or not?"}
{"msg": "It would be a good practice to do `.off('click', '.tab-buttons > div').on('click', '.tab-buttons > div', function() {`"}
{"msg": "I moved the instantiation of the signature algorithm here, to execute it before the native libraries are configured. Otherwise the wrong signature algorithm could be configured in a future release when more than one is supported in Besu."}
{"msg": "`this.ieService_` should be initialized to null in the constructor."}
{"msg": "Why not `ebpf::BPF bpf;`? Assuming that the instance is not huge, I do not think there is a good reason to use a pointer when it can be retained as a value."}
{"msg": "Why is IsolationLevel fully qualified? System.Data is already in scope? What do I miss?"}
{"msg": "I suggest \"no parent snapshot found, will read all data\\n\"."}
{"msg": "`LogManager.ThrowExceptions = true` has very special meaning when unit-testing. Why the change to `LogFactory.ThrowExceptions = true` and enabling after the config-load?"}
{"msg": "This is wrong, should be `entry.getValue()`"}
{"msg": "nit: why can't we combine the two add operations into one so that we add `{\"nameCertificates\": []}` to `/spec/servingCerts` ?"}
{"msg": "Pls remove the print statements. Also, you do not need the if statement."}
{"msg": "# `attr_value['string'] is not None` probably not required as `attr_value['string'] == value` check is already being done"}
{"msg": "@alanwest I noticed this while changing the code. I think we _might_ run into some race condition - if a scraper happens to hit the HTTP server before we could add the reader, what would happen (I guess we will hit exception, which turns into HTTP 500)? I haven't looked into the HTTP server logic. I think it _might_ be OKAY. A better version could be - we only start the HTTP server once the exporter/reader are fully ready and both are hooked up to the provider."}
{"msg": "We should still register the script. Just not enqueue it."}
{"msg": "I think this can stay as a method. And we can write our own attribute_change(name) as required."}
{"msg": "@alexshikov @Cheesebaron I might be missing something but isn't the viewType parameter here the actual layout resource id? Why would the GetItemLayoutId method need to be called again? On line 127, the exact same method is called except this time passing in the index of the object in the backing data source, which makes sense - the template selector can return the layout id based on the index of the item in the list."}
{"msg": "Can you change this to use `.format()`?"}
{"msg": "Maybe the parameter should be consulted higher up the stack so that we only set dropEncap if we're rendering a workload egress chain and the flag is set?"}
{"msg": "This leaks EGL/GL implementation details into the generic renderer interface."}
{"msg": "Maybe add *key* i.e. `\"The \\\\`deploy.on\\\\` key should be a hash (dictionary).`"}
{"msg": "its be good also change $code na $id, actual name is misleading and that was probably actual error generator"}
{"msg": "isn't this going to be true by default? if yes, then let's have the env var named `ECS_DISABLE_SPOT_INSTANCE_DRAINING` and have default as false."}
{"msg": "`signer` is a global variable (from `gochecknoglobals`)"}
{"msg": "shouldn't this be `&& opts[:localize]` (i.e. both nil and false skip localization?)"}
{"msg": "Not critical but \"common\" is not that helpful in the commit title. Maybe go with \"libkvs/txn:\" for this one?"}
{"msg": "It's been a while, but I just noticed this was wrong: It migrated `True` to `when-searching` (so people with `scrolling.bar = True` suddenly didn't have scrollbars anymore) and `False` to never. Instead, it should migrate `True` to `always` (no behavior change) and `False` to `when-searching` (so people notice the new feature). I fixed this in cc0f5fc6d400e12833ba729049e31d16cf836d53."}
{"msg": ".decode(sys.getfilesystemencoding()) will be better. Although I think rrdtool should accept bytes.."}
{"msg": "same here, CryptoSm2 won't be changed once command is compiled"}
{"msg": "Loading the login page after the certificate has been loaded. Views can only be loaded from UI thread."}
{"msg": "Sends the incoming message to the decryptor, which will then forward it to the interface once processing is complete."}
{"msg": "FYI This will go the other way, with nil being the correct value for \"no params\""}
{"msg": "Is this necessary? Are there duplicates in your LibKeyIndex?"}
{"msg": "Why not have mailPort as int since your are already parsing while calling t.connect ?"}
{"msg": "This is very unclear what Server means. We need a better name, maybe ServerExtension?"}
{"msg": "Why do you prefer `go` over `run`?"}
{"msg": "`Indicates if this Realm has been closed.`?"}
{"msg": "how is this change adding corr to Series? Do all the methods that are added to Frame automatically get added to Series?"}
{"msg": "Necessary? Could you just use DefaultBuildState here?"}
{"msg": "Instead of having this logic, would it make sense to require *users* to encompass the specified IPv6 address within `[` and `]`? Why the magic handling here?"}
{"msg": "How about making metricNamespace an option, and by default it's the same as `component`? e.g.m Init(component, WithMetricNamespace(\"trigger\"))"}
{"msg": "Should we need to invoke pthread_cancel ?"}
{"msg": "All buttons are submit buttons, except if they are `type=reset` or `type=button`. I suggest you do an exclude of those, rather than only include `button[type=submit]`."}
{"msg": "For consistency, it's best to either always use strict equality (`===`) or loose equality (`==`) in `typeof` checks, and to not mix them."}
{"msg": "wait, are we not mising `WithStamp` here?"}
{"msg": "oh. didn't know we store this stage progress."}
{"msg": "Going with definition from here: > Does Unicode have private-use characters? > A: Yes. There are three ranges of private-use characters in the standard. The main range in the BMP is U+E000..U+F8FF, containing 6,400 private-use characters. That range is often referred to as the Private Use Area (PUA). But there are also two large ranges of supplementary private-use characters, consisting of most of the code points on Planes 15 and 16: U+F0000..U+FFFFD and U+100000..U+10FFFD. Together those ranges allocate another 131,068 private-use characters. Altogether, then, there are 137,468 private-use characters in Unicode. It looks like we are only ignoring ones in BMP and not the supplementary private-use characters. Shouldn't we consider the supplementary ones too?"}
{"msg": "Should this be `ISocketOutput<T> where T : struct`?"}
{"msg": "In which case will this actually return 0? If there is no snapshot, then there is no `Snapshot` object, right?"}
{"msg": "could you please explain a bit where these numbers come from? for example: why is there no `swarm.EncryptedSectionSize`?"}
{"msg": "s/object content/blob object/ (for consistency with the `Size` docs)"}
{"msg": "Thanks for this... is this the only place where the rollback is needed? Are there others?"}
{"msg": "Should this also be a pointer? What happens if there are no BLS messages? I guess that's what this test is exercising, and Lotus also uses a non-pointer here."}
{"msg": "If this method gets all the emails, it should be named appropriately. **all_emails** or just **emails**."}
{"msg": "Can we still random, but if we randomly get a port is used before, we randomly pick again?"}
{"msg": "what if a purchaser is also an approver? or would that not happen?"}
{"msg": "Not sure why this change. You forgot to handle the case where the user has dynamic fees disabled and there are no fee estimates available. He should be able to sweep none-the-less (as he is using static fees anyway). The line with `config.fee_per_kb()` below, that you have deleted, handled that."}
{"msg": "Where does the `alloc` field get set?"}
{"msg": "Can this simply call `in_memory.empty?` ?"}
{"msg": "Using a plural route helps in detecting the path automatically for `= form_for @password_reset`."}
{"msg": "I don't think we need to necessarily check if that returned true or not, we should just remove the shutdown hook. Since nothing would check or do anything with this flag anyways."}
{"msg": "optional: while there's nothing to do, a good way to catch bugs (where we use an outbound without calling `Start`) might be to have this outbound verify that `Start` is called before `Call` or `Stop`"}
{"msg": "How about putting `epochLength` (or something like that) in place of `a` just to make it easier to read"}
{"msg": "I don't love this syntax; it doesn't match anything we're currently doing and it's not obvious. Why isn't this `/keybase/private/jzila,kb_bot/.kbfs_autogit/public/jzila/kbp.git`?"}
{"msg": "Does a type-hint work instead of casting? `return ofAll(toList().<U> zipWith(that, mapper));` (Probably not, just a question.)"}
{"msg": "Note that this is a bug, that should be fixed on master. `DECIMAL_LITERAL` cannot match any token, because it's declared with a `#`."}
{"msg": "On Windows, doesn't `os.Args[0]` include the `.exe`? What if you run the program like `caddy.exe`?"}
{"msg": "Nit: these lines are duplicated from above. They can be refactored by setting etype in a conditional and putting 282 and 283 below that."}
{"msg": "I would do an s.Notice(\"Initiating Shutdown...\") then after Shutdown() do the original Server Exiting."}
{"msg": "Not sure with how many seconds on average are we dealing with but maybe it's better to have hh:mm:ss format in logs - you can make it with `TimeSpan.FromSeconds(seconds).ToString()`"}
{"msg": "Perhaps bondsToCut must be None or non empty."}
{"msg": "Should the rest of the file be updated to use `expect` or should this test use the same format as the rest of the tests?"}
{"msg": "it seems `random.uniform(0, 1)` similar to `random.randint(2)`, all have 1/2 probabilities."}
{"msg": "We shouldn't depend that url is `mysterium` - it can be just `testRequestURL`. Also, `URL` has to be upper-case."}
{"msg": "Please remove the unused import of DBPDataSource."}
{"msg": "we cannot change the behavior of the processRole - that method is used in lots of places. this call must be done only in the method where templates are being handled."}
{"msg": "I think we probably want to follow the same naming convention that we do with `execAgentConfigFileNameTemplate` (using the SHA in the name of the file). This file might be confgurable in the future and when that happens we will be ready. Plus it's pretty much the same code that we already use for the config file."}
{"msg": "If following above, this would be: end_time = time(0) + manual_wall_time_option, which is simpler. Also, make the check manual_wall_time_option > 0, otherwise negative times would terminate the worker right away."}
{"msg": "If we aren't using `errors.Is` we don't need the `Unwrap` as we have `Cause` which is what pkg/errors uses."}
{"msg": "The config.lua.dist still shows `houseAccountOwner`"}
{"msg": "I'd rather just send the parameter twice than break encapsulation here. There's already precedence with webelement IDs"}
{"msg": "Seems like client.getlocalplayer is being called a lot, would it be worth it to do final Player player = client.getlocalplayer?"}
{"msg": "This can already be done with `{>Detected-Locale}`, why make another way to do it?"}
{"msg": "Why setting the status to Continue as at the end it is written OK? Status should be written only once."}
{"msg": "Howdy! You'll want to do this same thing (replace `hydrateParamCache` with `proofs/bin/paramcache` and then do the copy) in `smartdeps`, too."}
{"msg": "Instead of adding a new option, I wonder if we could decide on a port that would disable listening. For instance, port set to 0 means that we use default port 4222. Setting to -1 means that we let OS pick a random free port. We could say anything negative lower than -1 (say -2) means disabled? You don't have to update the PR for that, just wondering if that would be better or not and let's see what others think."}
{"msg": "Should we add some default case if non of the above return some analyzer name? Something like `unknown analyzer`?"}
{"msg": "Upper case is reserved for our versions of top-level chains i.e. the `FORWARD` chain jumps to `cali-FORWARD`."}
{"msg": "`bound/2` is generally the previous bound that we tested, except when `bound` is equal to 1. It won't break in that case since callers are not supposed to call advance on a target that is lte the current doc ID, but this might still make room for bugs?"}
{"msg": "[Nit] I don't have a proposed suggestion, but security seems too generic of a name here."}
{"msg": "do we need to force a buildConfig here? I know it's in muon, but that might actually be making things harder for people"}
{"msg": "This line is here to be compatible with the current way `refs` work, right?"}
{"msg": "Hmm, I wonder if we can safely assume all decimals should be displayed as $$...ok for now I suppose."}
{"msg": "Should we bite the bullet and poll for the full 5 minutes that AWS recommends? If we do that, we'll probably want to leave some kind of breadcrumb in the event log to let users know why it's taking so long to launch."}
{"msg": "Guava changed `Objects` -> `MoreObjects`"}
{"msg": "All these hand generated mocks can be deleted. I think we already moved everything to gomocks."}
{"msg": "This doesn't make sense. The thing being constructed is a blob.Bucket. \"Constructing\" the pointer is trivial."}
{"msg": "Unfortunately this won't work when the \"All time\" range is chosen because `memberStats.days` will be `\"all-time\"` and not a number. What you could do instead is to use `memberStats.stats` as the dependent key and use `Object.keys(memberStats.stats.total_on_date)[0]` to grab the first date in the range and build the label from there."}
{"msg": "We need this left in as `axe.configure` is for the top-level page `axe` and we still need to configure the axe script inside the iframe as well (so both have to be configured),"}
{"msg": "is this rule serviceimpacting? I'm thinking it's mostly around the modeling of pageable in the swagger, thoughts?"}
{"msg": "same here, replace `ks` and `kc` to something more related to Source."}
{"msg": "Nit, these Err not nils should be `t.Fatalf` not error. We want to the test to stop if this error occurs."}
{"msg": "Could you please move the declaration to httpclient.h? I think we have a consistent pattern in declaring global variables in header files."}
{"msg": "we shouldn't add a bunch of static initializers 'everywhere' in the code. Probably just one would be good, during the construction of the 'RemoteWebDriver' class."}
{"msg": "I thought we switched the approach from a payload to boost attribute? Besides; it's not clear we need this toggle at all since the user could arrange for this behavior simply by having the new DelimitedBoost filter thing in the chain."}
{"msg": "the previous code used 'export' when platform is cisco-5, presumably because 'env' cannot be used to load variables? I have no idea if that's the case but this env vs export logic is not here"}
{"msg": "I'm wondering if we need to add some type of validation here that the SecretCount != 0... Or do we think it would be valid to have a SecretCount of 0?"}
{"msg": "This test is being skipped. I unskipped it, and it failed in the same way for both `slaveOk: false` and `secondaryOk: false`. I'm not sure how else to test this broken test."}
{"msg": "This is fine, but maybe we should change the variable name to \"bufferSize_as_uint\"? Or \"...uint32\"?"}
{"msg": "You are comparing two signerIDs here, error message should be \"Signers should match\""}
{"msg": "Who's acquiring this lock for writes?"}
{"msg": "Should there be a `trail.topic_name` method so we don't annoy Demeter?"}
{"msg": "Would it make sense to include this file via composer files-autoloading instead?"}
{"msg": "Each `ExpectedCondition` implements `java.util.Function` These are expected to be stateless. This condition will leak previous `elementText` on the second usage, which doesn't seem ideal."}
{"msg": "The same `ifdef` should apply to `#include <wlr/backend/x11.h>` line 14"}
{"msg": "We're instrumenting a static method, so there's no instance in this case. `diagnosticSource` is the first argument."}
{"msg": "I would avoid the term \"errno\" as it implies the glibc variable. Use error_code or status or something."}
{"msg": "Why `restic.TagLists` and no `restic.TagList` ? Because I'm using `restic.TagList` here and using `restic.TagLists` is a lot of changes"}
{"msg": "An hour seems a significant amount of time to wait for within a test, does it need to be that long?"}
{"msg": "Nit: (newish to golang, don't hesitate to tell me I'm wrong here, but ...) I'd have written this code, just for readability: keepAlive := false return d.dial(hostName, tlsClientConfig, keepAlive) ... or even return d.dial(hostName, tlsClientConfig, false) // keepAlive=false Personally I think Golang should have included named args; I think it's one of the things python got right."}
{"msg": "Can we provide some more useful actionable info here? `fmt.Sprintf(\"The certificate request could not be completed due to invalid request options: %s\", req.Status.Conditions[InvalidRequestCondition].Message)`"}
{"msg": "You can use `netloc.rsplit(\":\")` for that."}
{"msg": "`warningPrefix` looks the same on both platforms, we could move it up to `log.go`."}
{"msg": "What do you think about renaming this method `FromErrorAndCode(code Code, err error) *Status`? One of the benefits is that it will be consistent with the naming of `func FromError(err error) *Status {` which does something almost similar."}
{"msg": "we cannot state that by default the same value is used if we stopped using null - it would suggest that when you change JSON RPC and leave WS port default then they would be same."}
{"msg": "Instead of setting this here, why not have the flag call in the init function set `caddy.LogDestination` directly, and switch on that?"}
{"msg": "This belongs under \"WordPress dependencies\"."}
{"msg": "Shouldn't this say \"a binding with descriptor type VK_DESCRIPTOR_TYPE_MUTABLE_VALVE\""}
{"msg": "Could the name of the status be confusing to users? It says the execution stopped but is it a temporary stop? Will it continue to run at some point? To me the name does not suggest a final status but a transition one. WDYT @sshardool @jakhani @djaiswal83 @aditya1105"}
{"msg": "please change to `could not connect to peer: %s`. it is not relevant to say \"from kademlia\" in a warning"}
{"msg": "What's up with this, isn't it nil? Why not use the real T value from the test function? @elcore @wmark"}
{"msg": "We chose `info` in the test code for obvious reasons. Changing to `finest` makes debugging harder and noisier."}
{"msg": "I don't think `?? null` works here... that's to ensure PHP doesn't throw an \"undefined\" error about `$profile->expirationDate`, but now the code is assuming that `$profile->expirationDate` will be set. Might be cleaner to do: <pre> $expiration = isset($profile->expirationDate) ? $this->dateConverter->convertToDisplayDate(\"Y-m-d H:i\", $profile->expirationDate) : null; </pre> And then assigning the `$expiration` value in the return array..."}
{"msg": "An ENV should be used? Are you sure that the Vue examples are built in the production mode?"}
{"msg": "The result of `FileUtils::fileType` could be saved, instead of calling twice."}
{"msg": "since this debug message is inside a plugin code, it should use flb_plg_debug(ctx->ins, \"...\"), on this case don't need the component prefix since the API will put it there automatically"}
{"msg": "I also took advantage of the changes to change the Timestamps used in this notification from \"java.sql.Timestamp\" to \"com.yahoo.rdl.Timestamp\"."}
{"msg": "this call doesn't work doesn't? I mean there doesn't seem to be an 2 argument allocate overload. Maybe arg_logical_size should just be defaulted to the arg_alloc_size thing. Or we should just report out physical allocation size instead of logical."}
{"msg": "nit: let's call our address ioAddr from now on"}
{"msg": "You're killing this \"else\" case here which currently flags an error when maxBoundDescriptorSets == 0."}
{"msg": "Nitpick: I'd append `_cb` to the function name here to mark it as a callback. Otherwise it looks a bit like this will do the entire job of removing null checksum refs from a hash table."}
{"msg": "or you can use `filter(x => !x.isView)`"}
{"msg": "No need for this, as pylint already only turns things off for this function and it's needed for the entire function."}
{"msg": "`this.getFilter()` won't work on `pre('save')`. Perhaps make this `toySchema.pre(['updateOne', 'findOneAndUpdate'])`?"}
{"msg": "I think this is the only place where we use `UvShutdownReq`. Can we remove the type altogether? Or do you prefer to keep it around?"}
{"msg": "I think we can get this to work by passing in the root ca cert fixture that upstream ca is using"}
{"msg": "Just occurred to me to ask: is the condor log date in localtime or UTC?"}
{"msg": "Can you remove the sculliscep varbits from here too?"}
{"msg": "I understand that it is a common practice in this script to add indexes this way but why don't we check index existence before adding it? I'm not very familiar with MySql but it's can be done easily in MSSQL and I'm pretty sure that there is a way to do the same here."}
{"msg": "Should we do something like `h2o__fatal(file, line, \"fatal error: %s, %s\\n\", mess, RSTRING_PTR(...))` here?"}
{"msg": "recently, IME_ACTION_GO action can trigger key_down and key_up event successfully, so we don't need to send enter key separately as before, otherwise will trigger it twice and cause to enter empty passcode, which cause test failed."}
{"msg": "It seems that you only need to do this `checkExprDepth()` inside `deduceExprType()`. So you don't have to add this check everywhere."}
{"msg": " Questionable way of looping through editors and calling `canEditFile` to show the edit button. Is there a better way?"}
{"msg": "Just to be consistent, can we use the print function `print()` instead of the keyword. Same goes for line 437."}
{"msg": "Could you move it after `stop`?"}
{"msg": "The variable `method` seems not used. Maybe we can remove the parameter `bodyParamName` and generate it by invoking `ParamUtils.generateBodyParameterName(method)` ?"}
{"msg": "You forgot an optimization? `$countries = CountryField::FORMAT_ISO_3166_ALPHA3 === $countryCodeFormat ? Countries::getAlpha3Names() : $countriesAlpha2;`"}
{"msg": "> the time range the listen search the time range of the listen search?"}
{"msg": "would call it connect_retries"}
{"msg": "I use the same zms instance to check authentication in swagger endpoints. Same thing in ZTS."}
{"msg": "What is the motivation for switching from `Schema` to `DiscoveryField` everywhere?"}
{"msg": "During our zoom and working on this, I said that I believe it was set to 64MB, not 32MB, but the diff shows that I was wrong. So we could change it back to 32MB."}
{"msg": "Here I thought you always insisted on ` log \"github.com/Sirupsen/logrus\" ` :) I might do a PR that just globally switches that out wherever we have log."}
{"msg": "We maintain that each (logical) key generation has the same set of device keys, so no need to plumb through `keyGen`."}
{"msg": "Please use `from unittest import mock` instead of this package."}
{"msg": "Should be `if (this.options && this.options.cursor) {`. Options may be undefined. Also, going forward, mongoose will always use curly braces around if blocks."}
{"msg": "This should remain as mailrelay.blackducksoftware.com for staging. Not sure this will be valid, but it shouldn't go through the production mail server."}
{"msg": "Okay sorry about this I was really confused on how to support uncontrolled in this case, so what we want to do is apply `defaultValue` when `props.value` is falsy but not undefined, right? In the case of us seeing it is controlled (value & onChange present) we apply defaultValue to `props.value` (and delete props.defaultValue) In the case of uncontrolled we shouldn't enter this branch at all and go for full native dom behavior"}
{"msg": "nit: call the arg something simple like `f` to avoid repeating \"beforeQuery\"."}
{"msg": "do you think this should be `osd/auth` as a pkg to make it more unique and void conflicts with other `auth` packages?"}
{"msg": "Why are you passing out the Message?"}
{"msg": "In the old code here there was no Source Selector, but CreateDefaultProfile will specify a Source Selector of `\"\"`. Is that equivalent?"}
{"msg": "Changing `prop`=>`col` by reference?   I think you can prepare map `prop`=>`col` in L51."}
{"msg": "Let's just call this PERF_PACKAGES and have them in the same format as WINDOWS/SLES/DEBIAN_PACKAGES constants - since it is only a single package and, as written, you'd have to update the code to add more package names anyway. Might as well be consistent with the rest of the code."}
{"msg": "We don't have a `getPluginIDfromTaskIndex` function? I think it should be implemented in Globals/Plugins.h / .cpp"}
{"msg": "@shalinmangar If lazy field loading isn't enabled, I don't think this actually changes the behavior of `SolrIndexSearcher`, since it was previously ignoring the fields list anyway. What it _should_ do is allow certain distributed queries, like the ones in `DistribJoinFromCollectionTest`, to co-exist with `SolrIndexSearcher#doc()` respecting the `fields` set instead of just discarding it."}
{"msg": "This function isn't useful? it's just a clone of GetParserWithBuiltins?"}
{"msg": "I'm not sure if the boolean flags should always contain `is`, also I generally hate too long names... ;) we already know this is a section for circuit breakers, so the name doesn't have to repeat all of it. How about `cpuBreakerEnabled`, `memoryBreakerEnabled` etc?"}
{"msg": "Before we start the replacing equality deletes with position deletes, I think we need to refactor the RewriteFiles API to adjust more cases: 1. Rewrite data files and remove all the delete rows. The files to delete will be a set of data files and a set of delete files, and the files to add will be a set of data files. 2. Replace equality deletes with position deletes, the files to delete will be a set of equality delete files (we will need to ensure that all delete files are equality delete files ? ) , the files to add will be a set of position delete files. 3. Merging small delete files into a bigger delete files. The files to delete will be a set of equality/position delete files, the files to add will be a set of equality/position delete files."}
{"msg": "Is it possible that the shortcuts list is empty?"}
{"msg": "This just changes the error message from `unable to save snapshot: [...] context canceled` to `canceled`."}
{"msg": "maybe it's better to remove HttpHeaders.CONTENT_LENGTH after the loop"}
{"msg": "Perhaps this belongs in universe?"}
{"msg": "why the additional \"\\n\"?"}
{"msg": "that doesn't say a lot to me. Can you please be more specific on the function of pushsync?"}
{"msg": "> subpass uses a depth/stencil attachment in renderPass with a read-only layout for the depth aspect Assume - VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL - VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL count as well seems there is a `NormalizeDepthImageLayout` for this"}
{"msg": "What's the purpose of this `backgroundCtx` field?"}
{"msg": "I felt we don't need to set it that strict, like if somehow pubsub happens to allow extra 20 bytes for metadata, this test won't work. We would suggest to use 11MB instead."}
{"msg": "In theory `isset($metadata['associationType'])` is `false` if the linked field is not an association field, isn't?"}
{"msg": "@tute the only thing I needed to enable this like as `password` is not in default flow anymore I think."}
{"msg": "nit: to be consistent with `self.members`, please move this up one line, so that it's closer to `allUsers`? You will need to update your test reference."}
{"msg": "we might as well just access `config.gClientVerbose` directly here. If any other options are passed to `gclientSync` or `gclientRunhooks` then the verbose option will be lost the way it's used now"}
{"msg": "Inheriting from `AccountsController` to get access to the `redirect_if_disabled` filter."}
{"msg": "Don't you want to place this check before you add `succ` to `newSucc`?"}
{"msg": "Any reason why we want to remove this code ? It helps debugging AWS ebs attach issues. Ideally yes a library should have minimal logging, but there is no way we can track long running AWS attach calls."}
{"msg": "Should we remove the other `setup_profiler` call site and just let this be the one call site for it, since, AFAIK, the other one is no longer necessary with this? Also, can we make `setup_profiler` private?"}
{"msg": "A brief explanation about this func is required."}
{"msg": "Since this is only counting the failed attempts, can you call it failedAttemptsCount or retryCount instead of attemptsCount?"}
{"msg": "I prefer naming this rateLimitedRemoteHost This can be local host but reads remote Host Is Non Local."}
{"msg": "Is this correct? The auto indexing behavior caused problems fixed in a recently merged PR..."}
{"msg": "make it harmless to commit ws == nil"}
{"msg": "Hmm, I'm surprised if we don't already have a \"find all unpublished datasets\" method but I don't really know. Maybe @scolapasta knows."}
{"msg": "Please put it in following way : `// DeleteStoragePool receives StoragePoolClaim delete event and calls the required handlers to delete other pool related resources.`"}
{"msg": "Make the flag derived default available in the readiness controller"}
{"msg": "Hmm what are these magical constant numbers? And why does this change mean they should increase?"}
{"msg": "This rescue is repeated exactly in `app/jobs/mailchimp_removal_job.rb`. Could we extract a method and pull it up into `MailChimpJob` for reuse?"}
{"msg": "Why the change from rdkit.six to six?"}
{"msg": "@JayanthyChengan This change is still missing (and should be last one!): change this line to call getDateToDisplayOnCard(), that way the logic is in only one place (that method)."}
{"msg": "probably better to use `wlr_seat_keyboard_end_grab()`."}
{"msg": "Is the `cascade` necessary? It should work also without the casdade, because Payments are always already persisted when use cases with them. If it doesn't work, please tell me the reason. It is as same in Transport."}
{"msg": "This should still be guarded with an `#ifdef` since the DataMan code will only be supported for shared lib builds."}
{"msg": "What will be logged when the `Input.Namespace` was not specified?"}
{"msg": "I don't think we should pull aria-query into axe-core at this point. There's a much simpler fix for this. Please don't overthink it."}
{"msg": "Seems like it should be `generated by Wire` here and in the SUT?"}
{"msg": "`Timeout.Infinite` is actually `-1`. Here the correct message can be taken from Line:67."}
{"msg": "`invocation.getInvocationStageTrace().startSend()` is inside `RestClientSender.send`"}
{"msg": "use \"actionHash\" to be consistent with other places"}
{"msg": "I am now confused here, the spec says > If format is VK_FORMAT_UNDEFINED, all members of samplerYcbcrConversionComponents must be the identity swizzle. The spec also says > samplerYcbcrConversionComponents is the component swizzle that **should** be used in VkSamplerYcbcrConversionCreateInfo. so you are allowed to set the swizzle to anything I want, so I guess this is valid usage here... but now I am more curious if I have an external format does it not have to follow any component swizzle rules and can be anything regardless of the `ycbcrModel`? (I guess really a question for @critsec and is not a blocking concern for the scope of this PR)"}
{"msg": "I'd say the error should be an error, not instructions to the user. So error would be something like \"site should be running and is not\""}
{"msg": "Thanks for this PR @pinzon !   Rather than resetting the `sms_messages` list, can we fix the assertion in line 902 - rather than asserting `len` equality, we should assert that all expected messages are contained in the list. (In this case the phone numbers should be reasonably random, and ideally we should not have duplicates across different tests). We're planning to introduce test parallelization in the near future, and this will help us avoiding undesired side-effects.   Thanks"}
{"msg": "nit try rephrasing to something like \" AutoFilesystemTrimUsage returns the volume usage and trimmable space of locally mounted pxd volumes\""}
{"msg": "currently the puppet-agent package doesn't symlink files into /opt/puppetlabs/bin. Also many puppet acceptance tests that execute on Unix assume puppetbindir is a single directory (windows doesn't have this issue). So I think if we want to unblock testing, this should just be changed to `h['puppetbindir'] = '/opt/puppetlabs/puppet/bin`"}
{"msg": "This is not really good to mix different code bases. @TheMarex I understand the point about placing code into cpp file, but we still need to move templated version into an impl header, remove references to offline code here and keep template instantiations in a cpp file to avoid rebuild. So offline code could instantiate own implementations using private impl headers. Otherwise we again make wrong dependencies into OSRM code and block changes in separate projects."}
{"msg": "You probably don't want to assume that `self.underlayer` has a `seq` attribute."}
{"msg": "since we're not using mysql, do we need this migration?"}
{"msg": "unfinishedFlows might not be the same as activeFlows. Will it cause confusion here?"}
{"msg": "What kind of dependency is here, I think we have own implementation of event wo external dependencies"}
{"msg": "we shouldn't need the `FactoryBot.` in these. Ok to leave for now since all of these specs have them. Can clean up later"}
{"msg": "Isn't the better option to actually do `$this->getDisk()->url($uploadsPath)` without changing the filesystems config? Not sure why you think that change is required but it's definitely not getting merged."}
{"msg": "I know that previously this check was here but @ralph-pichler replaced it with the `CheckTimestamp` field stating that checking against `Timestamp` was incorrect. @ralph-pichler can you elaborate?"}
{"msg": "`short_version = __version__`"}
{"msg": "Required for the SparkDataFile SerDe"}
{"msg": "When updating the copyright, we tend to cover previous years, not just the current. So, if we started the file in 2015, we'd update to say 2015-2016. I'm not sure if there's a legal requirement surrounding this, but it's the convention we and many others have adopted for code."}
{"msg": "Wait, so it looks like this function is called _every_ time we fetch the root node, i.e. we do an MD head fetch every time we fetch the root node? Not for this PR, but it seems like we should make that unnecessary, since this function only ever does anything when head is `nil`, i.e. the first time. Maybe add a TODO?"}
{"msg": "`json.RawMessage` is a `[]byte`, which is already a pointer. Why do we need to have pointer here if we just reading this value?"}
{"msg": "should we actually switch to `All` or just add `0.4.0` explicitly to the list of supported CNI versions? What is a new CNI version is released?"}
{"msg": "I think it makes more sense to have this be a method on TaskStatus. Also, nit, Backend, not BackEnd."}
{"msg": "Could you please elaborate on why you need all this magic here? In which cases do you want the same id to be returned? Does this work the same way for all backends?"}
{"msg": "nit: `PluginConfigs` feels a little better"}
{"msg": "Is `<your-id>` really easier to understand than `<your-identity>` for CLI user? For me, `identity` seems like a concept we use publicly, and `id` is just an internal shortcut for it."}
{"msg": "nit.. `if` .. `else` for logging probably can be avoided.. maybe only log that an internal group was created for cluster group"}
{"msg": "Why are these skipped?"}
{"msg": "We'd better add the `json:\"metaServer,omitempty\"` here"}
{"msg": "This can't exist here either because the code editor can be used on other models than CMS templates. You could probably implement this as a `hint` property (so `hint: cms::lang.cms_object.safe_mode_enabled`) on the codeeditor formwidget instead though and I'd be fine with that."}
{"msg": "Hmm, AFAICT `*out_variant` isn't explicitly set to `NULL` in the `ENOENT` case."}
{"msg": "Nit: \"Failed to configure TLS for SDK client\"?"}
{"msg": "\"default 65536\" Not sure if it's important to state, but block_processor_full_size has a different default for fast_bootstrap."}
{"msg": "the above check (by transitivity) checked for `in_data.name_id == out_data.name_id && in_data.name_id != EMPTY_NAME_ID && out_data.name_id != EMPTY_NAME_ID`. The final check of `out_data.name_id != EMPTY_NAME_ID` is missing now."}
{"msg": "The event handle is being passed by reference, so the dereference on 591 is actually correct. To follow the convention that variables be declared before executable statements, please change the code to the following: struct _fpga_event_handle *_eh; fpga_result result = FPGA_OK; int err = 0; if (!event_handle) { return FPGA_INVALID_PARAM; } _eh = (struct _fpga_event_handle *) *event_handle;"}
{"msg": "i don't think these unexported functions belong on the public interface, they can exist solely on the struct."}
{"msg": "The ignore import above should be unused now and can be removed."}
{"msg": "Given that this is a boolean predicate, maybe it should be `full_backtrace?`."}
{"msg": "I like the idea, but we don't want a dependency on mitmproxy in pathod."}
{"msg": "`PY310` should probably be imported from `pylint.const`"}
{"msg": "Why reference is converted to table?"}
{"msg": "Here's the object model change. `CodeFlows` is a set of objects of type `CodeFlow`, rather than a list of list of `AnnotatedCodeLocation`. Exactly parallel with `Stacks`."}
{"msg": "Sorry, one more thing... You should use `app.config` instead of importing it directly. See the code below."}
{"msg": "Does this mean the list operation is done for all the namespaces? How to list the volume replicas per namespace?"}
{"msg": "I would say just change REGARG: no need for a separate thing."}
{"msg": "Do we actually expect users to provide more information here than possibly a SecurityGroup ID? If not, then this should probably use a new type, otherwise users might be confused by what options would be respected/ignored when used in this context."}
{"msg": "I can not think in a good use for it, but may we allow a way to setup a fake with a hook for logs? this fake is special, and we may need access to some of thoe logs, at the same time it may be an overkill because we dont want to test \"sql\" implementation but results.. but we can create some tests with end to end logs in some scenaries, What do you think about it?"}
{"msg": "Instead of just \"See SubscriberOptions....\", say something like \"Use ... to choose between the two.\""}
{"msg": "seems clunky to me to have an `MDOps` interface method that some implementations don't implement. Perhaps define a separate interface, like, `BranchResolver`, and then callers that have an `MDOps` object can check via type assertion?"}
{"msg": "This change should also probably go into the corresponding method of the abstract By class?"}
{"msg": "Why this change (test name still says \"must pass with metadata\")?"}
{"msg": "Oh, I guess I mentioned/pressed this point in the other issue, that this should probably go into the httpserver package. In fact, so should the const above this (URLPathCtxKey). These are specific to the HTTP server."}
{"msg": "The vendor prefix is still being used on Chromium based browsers like Edge Chromium and Chrome. Did you mean to remove this?"}
{"msg": "Need you to delete the `version_` from `HostInfo` struct ?"}
{"msg": "Who invited yoda?   In all seriousness though, wouldn't an `if (empty())` be better here?"}
{"msg": "You can use `appRouter.goHome` to do this (It's defined in site.js), it's less hacky than overriding the href."}
{"msg": "I assume this was removed because it was redundant? and conflicted with the now dynamic contentType? Edit: Oh I see it being set was moved to the `PostSegmentAsync` call."}
{"msg": "The updated copyright header should be: # Copyright (C) 2006-2018 NV Access Limited, yourname"}
{"msg": "File should be renamed `PlugIn` -> `Plugin`"}
{"msg": "you can use a different name, like `maybe_activate` or `is_active` without `component` in the method name as this is used in the class name. E.g: `$component->should_component_be_active` is using twice the `component` word"}
{"msg": "I think this might not be a complete enough check: what if `options` is `null`/`undefined`?"}
{"msg": "another alternate option which doesn't have the risk of too many entries (when user keeps providing keys in different order) Have the dictionary as before If tagKeys lookup fail, sort and lookup again. If fails, insert both original tagKeys and its sorted one to the dictionary. So that we only store atmost 2 entries per key set. And we only do a single lookup in hotpath, as opposed to 2 look ups."}
{"msg": "if (out != nullptr)"}
{"msg": "In the listenstore you catch the exception and then pass it on via Raise. However, here you do not catch the exception. You should catch the exception, but since this is a minor aspect of this page, perhaps show an error message when the count cannot be loaded in time. Then the rest of the page can still be rendered, rather than failing the whole page."}
{"msg": "Can you break this line into two parts - the first line makes the option help text for `--sftp-server` and its too long! `Specifies the path or command to run a sftp server on the remote host. The subsystem option is ignored when sftp_server is defined.`"}
{"msg": "I think we might need some special handling for `Spec.ControlPlaneLoadBalancer.SecurityGroups`, it looks like we are currently only handling the case that `Spec.ControlPlaneLoadBalancer` is nil."}
{"msg": "I'm a bit confused. Doesn't `mdWriterLock` already synchronizes calls to this function?"}
{"msg": "missing: utility, cstddef also: vector is already included in the header (interface requires vectors as in/out types)"}
{"msg": "I'm not sure this is necessary in the config here, as Jest would be setting the global `fetchMock = ''`. See below."}
{"msg": "Can `mFolder == null` happen during regular operations? Or is it only so we can be lazy in tests?"}
{"msg": "Ohh. `TeamName` is actually a \"friendly\" name displayed in the Catalog - not the name used in the CLI. So I guess we'll need a new variable here. (That is, this is going to be mainly a `quilt.yaml` change. You won't need the `.lower()`, though.)"}
{"msg": "Just want to note here that although we do check `length` while writing to choose whether to close and start a new file, that doesn't happen for ORC already so it is fine to use a FS call in this method."}
{"msg": "this `label=` is docker specific, while here in libcontainer there shouldn't be any mention to docker. `DisableSecOpt` and `DupSecOpt` should just deal with `disable,role,type,level`. Both CRI-O and docker should just pass `disable,role,type.level` stuff and not `label=...`."}
{"msg": "You need to declare variable `recurse` above, same place as `localTime`."}
{"msg": "Why does `clone` not already copy `xdensity` and `ydensity` from what it is cloning?"}
{"msg": "The docstring of this context_manager should be updated. As now ``sort=False`` is valid, it should just say it disables sorting regardless of whether the NdMapping has ``sort=True`` or ``sort=False``. I also think the line 'Should only be used if values are guaranteed to be sorted before or after the operation is performed.' should just say something else - maybe just that the initial ordering (whatever it is) should be preserved?"}
{"msg": "extract the port and set to `debug_java_port`"}
{"msg": "nit : I think that it would be \"cleaner\" to set the `flushcount` to nil in case of an error nice catch ;-)"}
{"msg": "You may want to use assertNull"}
{"msg": "Why we need another error printouts? We already have it inside addMapping.."}
{"msg": "suggestion: use `core` package name"}
{"msg": "nit: `Resource Groups Tagging API` -> `Resource Groups API`"}
{"msg": "You can remove this since ES6 modules are strict by default. And thanks for contributing to the Jellyfin Project."}
{"msg": "Why did eip1559 go from a list (0xf9020280.....) to a wrapped string (0xb902060ff9020280...) and not just concatenation (0x0ff9020280...)? implementation detail or is this how it sits on the wire now?"}
{"msg": "Thinking out loud... would `_nextDom` be a better name for this?"}
{"msg": "I think these method names would be clearer if written as \"Create a {type} counter|gauge|measure with given name\". eg \"Create a int64 counter with given name\" \"Create a double gauge with given name\""}
{"msg": "it pushes a boolean, so it has to be explicitly casted to boolean with != nullptr, same with all other similar stuff"}
{"msg": "Code shared by ParentChildrenSyncDownTarget and ParentChildrenSyncUpTarget moved to ParentChildrenSyncTargetHelper"}
{"msg": "The bug is not about the priority , But we use 2 config items CAPACITY and SEQUENTIAL to control 1 action: thoughput. If 'sequential' is given to 'False' as default in configfile and then I use 'capacity' to 10 in my test.yml , the 'capacity' 's priority should be higher than default 'sequential'. So, I suggest we use only one 'capacity', it is enough. '1' is sequential, more than 1 is capacity, None is sys.maxsize."}
{"msg": "Please log once here at Error level \"Failed to connect to Typha, will retry...\""}
{"msg": "Do we need the forXDP parameter in runBpfUnitTest? If not, I think better to revert in order to save a few changes."}
{"msg": "What about \"enter new password\"? That would be a bit more consistent to the `ReadPasswordTwice` usage in cmd_init."}
{"msg": "What is the difference between GraphType and graph_type. Naming should be more accurate."}
{"msg": "hmmm in docblock of contructor it is EntityManagerInterface....maybe it should be that way.... :confused:"}
{"msg": "I'm curious why you went the route of adding a new method name for this. Given that you it would be possible to just have an an overload of `GetPos()`, and that this change breaks existing code, I wonder why you chose to go this way."}
{"msg": "Does this need to change `'active'` to `'Active'` and that? Or is that done in CSS or something?"}
{"msg": "Oh, I missed this one: The other instances of `this` you've added as lambda contexts aren't really needed, although they're harmless. However, in the above connection, the missing context is `panel`, not `this`. Please correct it! Clazy may show warnings about lambda contexts (I don't use Clazy) but, if so, that's a problem in clazy: it isn't smart enough to know about them."}
{"msg": "I'm not sure what the value of this is. So far we've solved this by always doing `tagName.toUpperCase()` for everything. I think we should stick with this."}
{"msg": "This command displays available snapshots on a volume."}
{"msg": "`spb` is the standard package name we use for this proto."}
{"msg": "is this pr support parallelly process application?"}
{"msg": "Based on the assumption that when `EnablePulls` is `true`, `CanEnablePulls` must be `true` as well, then this `if` check is redundant. Actually... we have `AllowsPulls` now... why not use that?"}
{"msg": "I am not sure why the API requires both project name and project ID as inputs. Wouldn't it introduce more opportunities for clients to make mistakes?"}
{"msg": "I believe this was happening for several different flash messages - should we add `now` to all flash messages? (there might be a downside to doing that, but I am not sure what it would be)"}
{"msg": "You've not updated the `o.Status.Reason = fmt.Sprintf(\"Failed to retrieve Order resource: %v\", err)` line below here when you changed this, so here we are checking `errUpdate` but will print the contents of `err` instead."}
{"msg": "Doesn't this need to include `Errno::ECONNRESET` to fix the issue?"}
{"msg": "Please consider keeping the config key in one line as it will help in case someone is looking at how this config is used. public static final String PROJECT_CACHE_THROTTLE_PERCENTAGE = \"azkaban.project_cache_throttle_percentage\";"}
{"msg": "This is a hard one, naming-wise... `ListPowerSelectorEntries` is logical given `ListSelectorEntries`. Another option could be `ListMatchingEntries` or even `FindMatchingEntries`. :shrug:"}
{"msg": "This should be called `Uint` or `Uint32` or simply using our `Uint64` type instead. All of our numbers have varint encoding. It's not inherently a varint."}
{"msg": "We're now going to have 3 `#sections_accordion` will need to see how JS behaves. We should probably switch to a class selector instead"}
{"msg": "Should we use `\\DateTimeInterface` or `DateTimeInterface` and declaration of `DateTimeInterface` in `use`?"}
{"msg": "What do you think of moving this stack related constant to the `stack` pkg?"}
{"msg": "Hmm why did we remove the randomness about which (confusingly) different exception to throw here? This randomness was (is?) useful to help test that Lucene indeed catches `FNFE` and `NSFE` interchangeably."}
{"msg": "Hm, so before in that case `current_collection_id` looks like it was actually an uninitialized pointer. It seems weird to me that the tests pass both ways. I haven't looked closely at the tests - is there something wrong there that causes this to spuriously pass before?"}
{"msg": "is this a breaking change? If I'm not mistaken, this is translating a user-provided `wtimeout` in the connection string into `wTimeoutMS`"}
{"msg": "Can we rename this file to `lambda_echo.py`, to be more descriptive and in line with the other files in this directory? (all files in this folder are lambda functions, after all)"}
{"msg": "why not do it like this ? <pre><code> const ( Kill Action = iota Errno Trap Allow Trace ) <pre><code>"}
{"msg": "lock(this) is a bad practise, since you lock the entire instance. cosider: var appenderCache = xxxx. lock(appenderCache) { Thread.Sleep(TimeSpan.FromHours(5)); } while inside AppenderCache instance lock(this) { is blocked 5 hours. } Its always better to make a class private lock objects."}
{"msg": "I think something like `size_res` would be more descriptive."}
{"msg": "Well, it is providing a platform neutral way of calling Task or TaskEx. We could just call it PlatformTask."}
{"msg": "Typo: this should free `xwayland` instead"}
{"msg": "Is it ok to use \"math/rand\" instead of \"crypto/rand\" here? Do we need to protect this ID somehow?"}
{"msg": "I looks like we can make `allowOptionalMappings` non-optional since we have another overload without it. (I thought this generated a compiler warning, but maybe it's just R#)"}
{"msg": "` per scale.` -> ` per scale.` need to clean the unnecessary blank space"}
{"msg": "i don't think we want/need to make the node API available over UDS"}
{"msg": "How about to skip if and returning null and return a result of `ArticleFacade::findById` directly?"}
{"msg": "There's not particular reason to use a short name. Can we use a more descriptive name for the metric? Perhaps \"negativeLogLikelihood\"?"}
{"msg": "Build on AArch64 fails because WCHAR is not defined."}
{"msg": "I think this may need to be `SetCertificateRequestAnnotations` as it returns a `CertificateRequestModifier`  "}
{"msg": "it would likely be better to do this in the Identifier.by_scheme_name method itself."}
{"msg": "maybe switch the order in order to make this a positive assertion instead of a negative one? i.e. `if key =~ /id/` first."}
{"msg": "Can we expect adequate information emitted to the log in case either requiring preloads.rb or doing the requires in preloads.rb fails? If the answer is yes, I think we can merge this PR right away."}
{"msg": "This is a coarse solution. This check is helpful, but you should also add a check in `$__version()` to avoid calling `isSelected()` if `key === false`"}
{"msg": "Could we rename those to `CustomClientAuthentication` (same for Router) to remove ambiguity between Authentication and Authorization (permissions)?"}
{"msg": "Is the name \"IMvxFormsViewPresenter\" too close to \"IMvxFormsPagePresenter\"? Perhaps something like \"IMvxFormsNativeViewPresenter\" or \"IMvxFormsPlatformViewPresenter\" or inline with Forms naming \"IMvxFormsOnPlatformViewPresenter\""}
{"msg": "`typeof child != 'boolean'` maybe?"}
{"msg": "nit: not a big deal right now but spec assigns ID 0 to InitAddress"}
{"msg": "There are various places where `setZoomFactor` is used but `fuzzyval` isn't set: - `__init__` and `on_config_changed` (should be okay as `init_neighborlist` gets called which essentially does the same) - `zoom` (calls `zoom_perc` with `fuzzyval=False`), which is used by `:zoom-in` and `:zoom-out`. Are you sure this won't break those calls? (Yes, I know there should be tests for this - I'm working on that.) Other existing places probably should get simplified."}
{"msg": "I would have expected the Ready method to need to change to be a `<-chan Result` instead of a `<-chan map[string]Result`. The difference being that now the Ready channel can produce more than one set of results. In fact the name Ready is inaccurate now since its not about the query being ready but just a mechanism to deliver results. If this should be a follow up PR that is fine, lets create an issue for it."}
{"msg": "This is an inaccurate API that has outlived it's purpose. We can't make the determination of phone (vs) tablet, with a 7\" screen in the mix. Also, with the advent of fragments, this API means very little now. It's not being used anywhere, since we switched to `ActionBar`."}
{"msg": "why is this pylint disable needed?"}
{"msg": "If we are going to add config to specify the maximum message pool size, we should probably also add a parameter for the maximum nonce gap and pass it into the `IngestionValidator`. This could be done in this PR or added as an issue."}
{"msg": "Would a check for added columns with non-null default be sufficient for aligned format?"}
{"msg": "Is this PR implementing compute service account for OVF import as well? I thought it's only image/one-step import? Btw, OVF importer uses \"-\" instead of \"_\" in flags (should be `compute-service-account`)."}
{"msg": "Tiniest nit but this can be `tabindex={-1}`, `width={11}`, `height={11}`"}
{"msg": "Is the loop over vars and adding them to the subworkflow below in this file needed, since it's already done by NewSubWorkflowFromFile?"}
{"msg": "Having to write this util makes me think that maybe we should have kept the csv_input stuff. I don't know."}
{"msg": "Passing in and saving a reference to the `BlockCache` at init time is going to break if something calls `config.ResetCaches()`, because it replaces the `BlockCache` instance completely. This happens on user logout or by a manual write to `.kbfs_reset_caches`. So you probably want to give it the whole `config`, or maybe just the `config.BlockCache` function pointer."}
{"msg": "I am not sure this could happen. st should be nil if the error happens. If it does happen, we could also do st.Reset(), since it is an erroureous state so it closes both sides of the stream."}
{"msg": "boolean exists = (existSchema != null) && (existSchema .getSummary() != null);"}
{"msg": "A little skeptical of `explain` being here. Why is this now a property of all commands?"}
{"msg": "Mention something in logs, that fake registration was used e.g. `Fake identity registered`"}
{"msg": "I think it would make sense to also set `internalWebPropertyID` to `''` here. Otherwise, it might keep its previous value (let's say a property was selected before, but then the user chooses \"Create new property\"), but since it always should depend on `propertyID`, that would be incorrect."}
{"msg": "Why not use attemptNo instead of another call to getAttempt? Even better, consider using a private method to calculate this string. This logic is in two places."}
{"msg": "This fails on Go 1.11 because `indexByte` is already defined in strings_go111.go. I would suggest simply renaming one of the two, for example you could rename the other one to `strings_indexByte` (that will be one of the things we'll drop when we drop Go 1.11 support so it's better to make that one look ugly instead of the function that we will likely keep for a longer time)."}
{"msg": "Now `dbType=' MockDbType.int32 '` is correctly interpreted and the value is rendered as an integer instead of a string; hence no more double quotes."}
{"msg": "We know debug and trace as globals exist and are defaulted to 0. In this instance we need to know that c is non- nil, srv is non-nil and logging is non-nil before we can trust this statement not to panic."}
{"msg": "Good removal here for two reasons: we're redeclaring `app.ConfigPath` immediately below without having used the initial value, and `app.GetConfigPath()` will build the value using the same process as in this line anyway."}
{"msg": "Good catch here. Reading the code, it actually seems kind of dumb that `replaceAtom` needs to copy the atom it's passed. Ah well, we're more or less stuck with that."}
{"msg": "`bbox_feats.shape[0] > 0` requires the number of proposal is not 0."}
{"msg": "format.h is not a system header but bundled with LAMMPS. This should be `#include \"fmt/format.h\"`"}
{"msg": "could we always call visitDocValuesWithCardinality? It seems to include the version check already?"}
{"msg": "I think if they _don't_ specify a port, we should assume grid default (which is 4444)"}
{"msg": "These props should be less specifically named since the component is generic, for example `anchorLink`, `anchorLinkLabel`."}
{"msg": "Same as above, use `.delete('_autosave')`, not the command handler."}
{"msg": "It isn't necessary to check whether there are projected ID columns. The code is shorter if the values are available by default, even if they aren't used. This fixes the problem where there are constants to add (like `_file`) but no identity partition values are projected."}
{"msg": "I'm assuming that there isn't a way for us to skip sending an fd here (-1?), and that we're allocating this fd just to send a legal but useless value across?"}
{"msg": "I'd end the sentence after `special indicator (line 3)`. And then start a new sentence: `The special field can indicate that the field specifies a reset, is a sequence ID, or is a timestamp for the record.`"}
{"msg": "These empty lines can be kept."}
{"msg": "For some reason these tests started failing due to an extra `NEWLINE` returned from `h.query()`. Have not tried to check whether this may be a problem for real templates or not, just fixed the failing tests. Anyone with an opinion here?"}
{"msg": "concurrent poller won't be larger than concurrent execution. Jump from 2 -> 16 seems aggressive. I suggest to use 8. Ideally, this should be dynamic config. :)"}
{"msg": "Why? I thought this is for graceful shutdown."}
{"msg": "Can `result.stdout` or `result.stderr` be nil?"}
{"msg": "How can there be a configured max ipset size? Surely we need to write ipsets with however many members are implied by the Calico datastore?"}
{"msg": "This code is passing a non localized string when it should be passing in a localized string or it should use the name of the item being deleted."}
{"msg": "why not be consistent with `isNull` and `notNull` and return null?"}
{"msg": "What if there is no element?"}
{"msg": "I've never seen us do this anywhere else - why here? Why not `address, meshAddress string`?"}
{"msg": "Do you remove \"s\" from \"iptables\" to IPTable\" on purpose? I feel it should be \"IPTablesRules\"."}
{"msg": "Let the Kind, APIVersion & Metadata follow the rules followed by Volume. What is the reason for a change for snapshot struct ?"}
{"msg": "just realised... This breaks things since there is not selenium types module, is there a PR for this?"}
{"msg": "the first problem i found in the passcode change flow is that these two lines were happening in 'lock()' but not in 'showLockActivity' which is what the passcode change flow calls. I've just moved them to happen in that method."}
{"msg": "Doing this adds the actual resources themselves to the dictionary. I think for now, there's no way to know what the resource config provided may be, as we don't permit resource config on `build_solid_context`, so this part can be omitted."}
{"msg": "I would personally prefer a filename without an abbreviation, a newcomer to the project wouldn't be able to translate \"pv\" to \"partition-value\"."}
{"msg": "is this necessary? doesn't `client.close()` imply all sessions will be ended?"}
{"msg": "Is this OK to add in the spec helper? I need to call `Bolt::PAL.load_puppet` so that I can use the new `Bolt::PAL::Issues` module when verifying that plans forbid functions."}
{"msg": "`window.self === window`"}
{"msg": "maybe we should keep one test case for ErrFileNotExists and update only one file for ErrWorkspaceNotFound?"}
{"msg": "Isn't this a false positive? Why are we reporting `unused-variable` on a `del` operation with a `undefined-variable`."}
{"msg": "Can we define this directly in the function `NewConnTrackOvsAppCtl` instead of passing this as an argument?"}
{"msg": "Why is this required to turn the static readonlies into jitted const? Is this a bug in the jitter?"}
{"msg": "Would use parenthesis to explicitly state the associations of operands ```js const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || ((2 ** 53) - 1)"}
{"msg": "This is already imported as docker. You're safe to simply use `docker.utils.kwargs_from_env()` below."}
{"msg": "No need to add this fun. Using RunnableActionsBuilder#AddActions instead"}
{"msg": "I don't think it's possible to do this for hooks  "}
{"msg": "wait(1ms) when sec=0. wait(0ms) waits forever so that's why this is better."}
{"msg": "Do we need `domain` and `so_reuseport` now that we open new sockets immediately after calling `add_listener`?"}
{"msg": "Parsing URLs is hard. Any fixes should avoid manually parsing the URL."}
{"msg": "This is a private api, it doesn't need to return anything so `@group_level -= 1 if @group_level > 0` is preferred."}
{"msg": "FYI modifying an existing file generally doesn't invalidate the copyright date. The date here is when the copy right _begins_, so moving it later is arguably misleading-it still applies. Not a big deal, just something I've seen a few times in passing."}
{"msg": "Because the default value of allowedOrigins is * (all origins), so it isn't necessary to set again at all."}
{"msg": "I think this might be a little more readable in two lines as: <pre> $preferredMarcField = $this->mainConfig->Record->preferredMarcField ?? 'fullrecord'; $marc = trim($this->fields[$preferredMarcField] ?? $this->fields['fullrecord']); </pre>"}
{"msg": "does this still allow this file to be used with Python installations that don't have numpy?"}
{"msg": "Usually we consider APIs that have filesystem interactions to be part of IFileHelper, this would allow us to inject a testable implementation easily. `Path.IsRootedPath` doesn't access the file system. It is string comparison I believe."}
{"msg": "Do we need to use quote? Why not `status: Init`"}
{"msg": "If you end up changing grant to an association, this may need to change to a reference to enforce the foreign_key `add_reference :plans, :grant`"}
{"msg": "This won't work because `notification` comes from an API response here. I think this would be the same as the change to `Alert` where it would get `SmallSunSVG`."}
{"msg": "Will this ever return a \"Stack does not exist\" error? Should we handle it silently here rather than making higher level packages do error checking?"}
{"msg": "Should remove the default templates as well."}
{"msg": "`places=2` seems to be very poor comparison. Do you have any thoughts why is it fail with more strict checks?"}
{"msg": "Curious, is there a way we can get around this without suppressing?"}
{"msg": "I don't think we this field in session, it's a serial number for proposal but not unique index itself"}
{"msg": "Bit surprised by this. I would have thought either you want to set it for both mpl and bokeh...or alternatively it was only ever meant for bokeh and was always wrong?"}
{"msg": "How about `write.metadata.previous-versions-max`? No need to refer to these as a log."}
{"msg": "Logging in Bolt still seems to be a little messy. I think this is more correct than what I had before, but made sure I wouldn't overwrite an existing level. And if console logging gets more options, both debug and verbose need to be fixed here."}
{"msg": "This could be simplified (if including <boost/algorithm/string/erase.hpp> is fine): `auto address_string = boost::algorithm::erase_first_copy (address.to_string (), \"::ffff:\");`"}
{"msg": "Why do we need `do_not_validate_attachment_file_type` is we're doing it in the previous line?"}
{"msg": "Loading login page right away only for the regular use case."}
{"msg": "Did you test this redirect? @thornbill mentioned it might need `web` at the front, but if this works fine I'd rather leave it this way."}
{"msg": "These imports will probably need to be refactored so they aren't here. That applies for all of the database drivers. The reason for this is because we sometimes want a driver to be available and sometimes we don't. When we include this library in our cloud offering, the sqlite3 connector needs to be gone because it's a security vulnerability and there's no use case for it in a cloud environment. But for flux itself, I can see how sqlite3 would be really useful and so I like this change. But this import needs to only exist within the tests and within the `cmd/flux` package. It cannot be here."}
{"msg": "We can use `getQualifiedKeyName` here instead. I will update."}
{"msg": "Can these use `static_cast<unsigned long long>` instead? Other than that, it's fine."}
{"msg": "I think it should pass wallet transaction as well, otherwise there will be 2 wallet read transactions in 1 threads (next in scan_receivable)"}
{"msg": "we shouldn't add a bunch of static initializers 'everywhere' in the code. Probably just one would be good, during the construction of the 'RemoteWebDriver' class."}
{"msg": "do we need both flags? maybe infer that `clef-signer-enabled` whenever `clef-signer-endpoint` is defined?"}
{"msg": "Do we need this? I didn't see css files (only scss)."}
{"msg": "Are you subclassing from `UserList` instead of `list` to satisfy some constraint of Jython? My main concern here is that this is a subtle breaking change to the API because `UserList` is not a subclass of `list`. This has the unfortunate side effect of breaking any user that is using `isinstance` checks to see if a `ResultSet` is a `list`."}
{"msg": "Looking at the code, it seems very odd that this method even exists in the SurfaceNamer, since it is only implemented and used in the PhpSurfaceNamer, and in fact the RetrySettings class name is hardcoded elsewhere. WDYT of just removing this method from SurfaceNamer and PhpSurfaceNamer?"}
{"msg": "This is the wrong context for usage of `global` keyword. It need only be used inside functions."}
{"msg": "Just to stay consistent with naming let's call it CreateGRPCDispatcherForOutbound. Also rename 'CreateDispatcherForOutbound' to 'CreateTChannelDispatcherForOutbound'"}
{"msg": "I don't see this field is set in task_generator.go. worth to double check if we put the timestamp when creating replication tasks."}
{"msg": "should users also do a triple-flush?"}
{"msg": "Here I thought of `toHashMap` and later add `toTreeMap`. But I start to see, what you may have in mind. Alternatively we could provide a `toMap` and `toSortedMap`, which is great, too. On the other hand is always good to be as specific as possible. What do you think?"}
{"msg": "maybe localProjectAppNames? Just a thought."}
{"msg": "if we think this is likely to be augmented with a additional 'run coordination' features or configuration in the future, we could make it an object of some kind instead (or an enum, if we think there may be other resume modes in the future besides just on/off). Just imagining 6 months in the future, it would be unfortunate if there were 7 new args here as the feature gets more complex"}
{"msg": "`affine_grid` and `grid_sample` are currently unused. We may remove it from `ops/__init__.py` to speedup the loading of mmdet."}
{"msg": "Is there a reason why you need to support negative `AttackTimeout`? Why not just throw an error?"}
{"msg": "Is trailer parsing something we have to do in this PR? It would be really helpful to separate stuff like this into smaller, self-contained PRs."}
{"msg": "Maybe it would make sense to use `webmVideoCodecs` here and just append `vpx`. I'm not sure if av1 is currently supported when transcoding to webm though. It looks like it can be included in the mp4 transcoding profile now."}
{"msg": "nit(2/10): `topology && topology.description != null`;"}
{"msg": "Should be \"should fail if the **dt element** has a parent <dl> with a changed role\""}
{"msg": "Just to be clear: 1. This is required for compression, right? 2. This won't actually result in our dynos serving the assets, since they'll be served via the CDN, correct?"}
{"msg": "I would say we should not use the `CacheableResponseTrait` within the `JsonResponseTrait`. Traits within traits tend to lead to a bad developer experience as it can be really hard to find the actual method you're seeing in the implementing class, and in this case it looks like we're using _both_ the cacheable and the JSON traits in the same controller, so it's redundant anyway. I'd recommend just removing that use statement from `JsonResponseTrait` and make sure `ChaceableResponseTrait` is included everywhere it's needed specifically."}
{"msg": "I'm surprised we didn't go with something like `flow := f.Flow.Copy()` to take care of all the fields at once, but as long as it works it's good enough for me"}
{"msg": "We would like this code to run, even when `config.XDPEnabled` is false, so that Felix can clean up its own XDP state after a restart."}
{"msg": "I'd declare this field `qualifiedName` private to hide it. Unless it really needs to be modified from somewhere else... (e.g. unit tests..), but then, we should find a solution, where this field can stay private."}
{"msg": "Is this change implying something or just seems fit b/c regardless of outcome the sessions should still be length 1?"}
{"msg": "Maybe throw an exception if there is more than one, so that discovering the lack of support is easier when someone tries to use it down the road."}
{"msg": "I feel the name of this function could be better, conveying it's a predicate. Something like `HasDockerTestEnvironment` or `CanRunLocalServerTests`, etc."}
{"msg": "Is `username` expected to be case insensitive?"}
{"msg": "Use `std::shared_lock` and `std::try_to_lock_t`. BTW. Why we fail on contention?"}
{"msg": "Not sure what this actually does, but do you need to add `\"\"` here? Or does `[\".jsx\", \".js\"]` work too?"}
{"msg": "`Remove` is unclear. It seems the point is to allow the `FifoByteSink` to delete the underlying file. There seems to be an implicit contract that consumers of this interface call `Remove` after `Close` without necessarily understanding what `Remove` does. I get that it's a little awkward to have `FifoByteSink` delete the file in `Close`. It would probably be best to just remove this from the interface, since `AddSink` is working with an actual `FifoByteSink`. I would rename it in `FifoByteSync` to `DeleteFile` or `Cleanup` or something that's makes it more clear what's being removed."}
{"msg": "So this means that we can remove a callback via instr_set_label_callback(). Maybe consider adding another API function for removal, and add a new assert here such that cb != NULL?"}
{"msg": "this is `test_data` and all other instances are `testdata` - does this change affect any test files, or are there actually no directories called `test_data` in the repo? (I just checked, it seems like there aren't...)"}
{"msg": "Since we'e not 100% sure if `close` will be called more than once, should we set `client` to `null` or add an `AtomicBoolean closed` that will then handle the idempotency issue?"}
{"msg": "nit: Could you add an empty line between `import datetime` (built-in library block) and `import numpy as np` (third-party library block)?"}
{"msg": "Having boolean parameters to change function behavior is not a good practice because it violates the principle of functions being responsible for a single task, so the need for this indicates we need to split something out of here instead. We can introduce a function like `getCurrentDateRangeDayCount` or similar, which does this."}
{"msg": "I think we could add bool addArticle here defaulted to false like its done in item class so std::string Container::getName(bool addArticle /* = false*/) const { and pass that variable to getNameDescription call"}
{"msg": "@i110 Do you have an idea on how we should propagate errors that occur in this block? The error condition happens when i) `h2o_buffer_reserve` fails to allocate space (happens in master as well), or ii) `fill_cb` returns an error (unique to this PR)."}
{"msg": "Does this mean the times will show up in emails as UTC?"}
{"msg": "I'd rephrase it as `Simplify chained comparison between the operands`."}
{"msg": "If there is no authority header (i.e. someone intentionally deleted it), I would argue we probably don't want a Host header in the replay either. How about we only add it if it exists, and do nothing otherwise?"}
{"msg": "What's the advantage of doing it this way over, say, changing the `.circleci/config.yaml` to have `TRACE` as the `root.log.level`?"}
{"msg": "There are few cases like this where default logger is used from CLI/db tools. I would copy `NewTestLogger` to `NewCLILogger` and use it everywhere in CLI. In future these two might be different."}
{"msg": "Can we add a `collection?` method to the `VideoPage` so we don't violate Law of Demeter here?"}
{"msg": "`PseudoSampler` can also be imported from `..bbox`"}
{"msg": "Could you move this import to where the other `github.com/algorand/go-algorand` imports are?"}
{"msg": "Is this dependant on some version of Docker? Do we need to include both or `volumes` is deprecated (or just wrong!?)?"}
{"msg": "I know this is not new code, but should we change `leader.getState() == State.ACTIVE` to `leader.isActive(liveNodes)`?"}
{"msg": "Why not use ASTAnyTypeDeclaration? AbstractAnyTypeDeclaration is deprecated"}
{"msg": "Aren't we able to handle the case where we have MPI-CUDA without NCCL, even if it's suboptimal?"}
{"msg": "This probably should look beyond envConfig, and include `aws.Config.Credentials` as well."}
{"msg": "How does this filter differ from TooExpensiveTxFilter?"}
{"msg": "Use \" List<String>\" instead of ArrayList<String> in declaration."}
{"msg": "we might consider hard throwing when name is None since that is explicitly not working right now and then linking to issue in the exception error message"}
{"msg": "When `args.MemoryLimit` is empty, will `MustParse` panic?"}
{"msg": "How soon after this will Apply() be called? It would be a shame if there was still a significant delay before a missing or superfluous route was corrected."}
{"msg": "Add `--format` as an option. Does it make sense to have all display options available? Also need to add `--inventoryfile` and possibly the global_config_options."}
{"msg": "usually I do either ` IOException|RuntimeException` or if doing Throwable, use propagateIfFatal"}
{"msg": "Wondering whether it should be `self.clone`, or `other.clone` or maybe a new `DynamicMap` declaration entirely. I see this is in the condition where `other` is a `DynamicMap`but is this definitely right in terms of `kdims`? I need to think about it more..."}
{"msg": "I chose a new category because over time I'd like to add metrics also for Authorization plugins and Auditlog plugins (all components registered in security.json). An alternative could have been `CONTAINER` I guess?"}
{"msg": "Why are you including `<Kokkos_Core.hpp>`?"}
{"msg": "So previously health check was consuming from the normal metrics queue, now we duplicate the data to a new queue? I feel like there should be more changes to ensure the health check handler reads from the new queue? @DrewZhang13"}
{"msg": "Should we assert that xstate is aligned here?"}
{"msg": "Hot take: could this instead become `NO_DIFFICULTY_BOMB` and have` HOMESTEAD` wrap it? So this comes first then homestad with the bomb adjustment, making no difficulty the base case?"}
{"msg": "I suggest to use a scheme like \"blobvar\". \"blob\" would potentially collide if we have another API that use the blob package as a driver."}
{"msg": "This assumes that the user has at least one listen, it should have a guard around it, because this won't always be the case"}
{"msg": "@StrikerRUS what if we just removed build numbers and did `r-pkgdown=1.3.0`? Won't we have to fix this again if the RTD build machines change?"}
{"msg": "Maybe rename this to JetStreamStoreDir?"}
{"msg": "In general, what is the reason for the fallback price to be public? If it is public, why does it take baseFeePerGas instead of a block header?"}
{"msg": "LongLivedMarshalByRefObject exists in both the netstandard and netfx xunit?"}
{"msg": "This brings up the question... do we need to start assigning users to the different use cases in some way? We don't want this link to show up for Ric, for example."}
{"msg": "Unless I'm misunderstanding something, this should just be `prefetch_(param.data_param().prefetch())`, no? That should just use the default value if there's no explicit `data_param` or `data_param.prefetch` set, removing the need to also duplicate and hardcode `PREFETCH_COUNT`."}
{"msg": "I don't think retrying here is as useful, since `git-checkout` doesn't access the network AFAIK, and if it fails once it's probably going to fail all three times."}
{"msg": "Please note that adding this will import `extension_condition` in the entire scapy (as you are located in a layer). You might want to move this inside the RTP class ? Would be better i think"}
{"msg": "This will need updating, as I'm not sure we'll want to turn on random ordering if they've specified a seed for programmatic use."}
{"msg": "Are you sure these are all client libs? This seems fragile: if we later load sthg else early this will break. Seems best to have some kind of sanity check: at least add an assert in the current location where this is set."}
{"msg": "Picking nits here, but as a Dictionary already is a collection of KeyValuePairs there's undoubtably a way to code this that doesn't involve constructing any new ones."}
{"msg": "Maybe change it to `module.exports = server` ? Becase there's nothing else to export here"}
{"msg": "Is there a reason not to do something like `if _, ok := doNotUnref[ptr.ID]; ok { return ops }` here?"}
{"msg": "`ChainID()` is a getter method, move up to `Nonce()`"}
{"msg": "nit: alpha-sort `ruamel.yaml` in this list please"}
{"msg": "I am unsure the below implementation is correct, but need this method to not panic else it borks the chain-validation tests."}
{"msg": "[Checkstyle] ERROR: Unused import - javaslang.collection.Stream."}
{"msg": "For some reason, Safari handles ember arrays differently than Chrome/Firefox. To get around that, we cast the ember array to a regular array to verify the deep equal. (Note: I tried wrapping the expected value in an emberA - which would look like `expect(someEmberArray).to.deep.equal(emberA(['a', 'b']));` but that didn't work either)"}
{"msg": "`icebergType` indicates the corresponding iceberg type of the `FieldVector` `originalIcebergType` indicates what the real type we will read from the `FieldVector`. For example, the parquet int backed decimal, the `icebergType` should be integer, `originalIcebergType` is decimal. I intend to only keep the `originalIcebergType`, but listening to your ideas."}
{"msg": "The test name as written was grammatically correct, but now it isn't. Both 'MongooseError' and 'instance' should be both singular or both plural."}
{"msg": "We prefer line wrapping that keeps arguments to the same method aligned rather than aligning arguments to different levels. Here, the lambda to create an `InternalRecordWrapper` is an argument to `transform`, but it is aligned with `deleteSchema.asStruct()` that is an argument to the outer `toEqualitySet` call. Instead, can you add a newline for each argument to `toEqualitySet`? If the line with the lambda is too long, then you can also add a newline for it that it indented from the start of the line with `transform`, so it is clear that it is an argument to `transform` and not `toEqualitySet`."}
{"msg": "I'm a little stuck understanding, how would this result in an error when `this.opts.params` is not set? It will just not do `AssemblyOptions.validateParams(this.opts.params)`  "}
{"msg": "I think it makes sense to do `metadata[:block].clone`, as thats what `new_metadata` is, but somehow it's missing the block from its clone."}
{"msg": "For Se 3.x we shouldn't need to specify `marionette: true`? I'll see if I can figure out where this is getting used that it might be necessary here."}
{"msg": "ad.Source is disk name? Shouldn't the order of initialization be reversed here then? First set ad.DeviceName, if it's empty, set ad.Source? Or this is a different use case? This is the third place where this device/disk default logic is implemented, so another reason to move it to regAttach, if it's possible to be generalized."}
{"msg": "Remove the initializers (\"`= null`\") from both parameters. Remember that that's why we added the overloads: to ensure that all languages could have the convenience of the abbreviated argument lists (not all languages understand default parameters)."}
{"msg": "Looks like `s.inserts` and `s.removes` are updated under sublist's lock, so I don't think you need atomic for those 2."}
{"msg": "The previous `fetch` mock was exposed globally before - can we do the same with `fetchMock` so we don't need to import it in every file?"}
{"msg": "Please wrap this variable within a self invoking anonymous function. (function(){ FEATURE_NAME = \"reports\"; //and rest of the js goes here. })();"}
{"msg": "Can we have the same argument order as `getUploadedFlowFile`?"}
{"msg": "this dynamic config should still be valid, i.e. operator should have the ability to control each individual task queue just in case"}
{"msg": "Comparators (or functions in general) cannot be compared for equality. Therefore `PriorityQueue.of(comparator, ...)` always has to return a new instance."}
{"msg": "It's a little surprising that CachedThreadPool overrides the max_threads argument. This makes sense as a solution though."}
{"msg": "```python # if avg_factor is not specified, just reduce the loss if avg_factor is None: loss = reduce_loss(loss, reduction) else: # if reduction is mean, then average the loss by avg_factor if reduction == 'mean': loss = loss.sum() / avg_factor # if reduction is 'none', then do nothing, otherwise raise an error elif reduction != 'none': raise ValueError('avg_factor can not be used with reduction=\"sum\"')"}
{"msg": "`padding` should be 0 instead. Actually you can just remove padding and dilation to use default values."}
{"msg": "$balance is initialized to 0 above in line 1428 and then assigned in line 1437. If we're no longer manipulating that value, is there a reason to use a variable at all? It might make the overall code less confusing to make some changes there."}
{"msg": "Might still want to log this as `TargetBuilding` but with a slightly different message?"}
{"msg": "Guess it isn't used. The dask thing was just a prototype so removing it is probably the right thing to do."}
{"msg": "This code is correct, but it's a bit confusing to see how (e.g., without the if startswith(\".') the or below would break.) I think it will be clearer for the long run if you refactor this just a bit. CONTENT_INDEX_EXTS (all caps) looks like a constant, but is now being set by the environment. Instead, replace the reference to CONTENT_INDEX_EXTS in index.py with a simple call to a method \"get_content_index_exts\" (or similar). Then you can write all the logic into one clean function."}
{"msg": "please update the zms conf file to have a small description of these options since by default feature is off and must be enabled"}
{"msg": "Whoa, was this opto breaking something? I guess if this final path is filtered out, we still need the queue? Have you run the suggest benchmarks to see if removing this opto hurt performance?"}
{"msg": "why `PhaseSelector` ?"}
{"msg": "Does` AllowlistedModules` have the same meaning of `WhitelistedModules`?"}
{"msg": "I'd say \"cgroup2 hybrid path\" instead."}
{"msg": "`campaignSource` is unused (from `structcheck`)"}
{"msg": "Why don't we want to catch segfaults by default?"}
{"msg": "why do we have an env var for this? not sure why we'd want to suppress welcome emails but not any others"}
{"msg": "I want to get PartitionData field type, I don't know how to get it in other way."}
{"msg": "I think that a single `Get` method would be preferable, that would have the following parameters: Get(addr basics.Address, withPendingRewards bool, cidx basics.CreatableIndex, ctype basics.CreatableType) where we ignore cidx of -1, and adding support for ctype of \"AssetParams\" or something like that. (i.e. so that this Get call would be good for asset holding/asset params and applications )"}
{"msg": "This can handle the '\\\\' problem, but if (not possible) the user define '\\\\' as null, this logic will break. So here, it should be to compare the whole HIVE_DEFAULT_NULL_STRING, and make sure length is equal, as I understand. \\N is NULL, but \\NA is not NULL, what will happen if there is \\NAA ?"}
{"msg": "If this fails, then 'stderr' is not a valid file handler anymore, and then any further 'write' operations will fail. Maybe some handling of such situation should be added here?"}
{"msg": "UT spotted that we weren't marking routes dirty when they targeted at Node and that node's IP changed. e.g., the case where a WEP appears in the syncer before the corresponding node does, so we don't know the node's IP. I added a new map to track the CIDRs for each node so that when the node IP changes we can mark those CIDRs dirty. Right now it's only used for the \"WorkloadIPs\" scenario. Need to decide if the same issue applies in the \"CalicoIPAM' case. I suspect it might. It looks like we have some logic present to detect when our own node IP changes, but we don't seem to handle when a remote node's IP changes."}
{"msg": "Given this will 'pause' bolt for a few seconds on older rubies, perhaps emit a debug message saying \"Warming up OpenSSL\" or something to that effect"}
{"msg": "Initializing _format to None, but asserting that it's not None later, seems unnecessarily fragile. We shouldn't architect the package class to rely on classes or methods that use it (e.g., build). Let's at least set the format to the default in case we don't create all packages through build.py."}
{"msg": "Glad to see this generalized to support the backend argument."}
{"msg": "It's a bit weird to have `svc.go` to include a `ScheduledJobType`...should we rename this file?"}
{"msg": "I don't know what the implications of this change are for pumps other than the insight but i would add `|| trList2.get(0).pumpId == temporaryBasal.pumpId` in case we see the same pump event again, in order to not duplicate it in the database."}
{"msg": "is there anything still referencing `checksumAddress` or can we just delete it?"}
{"msg": "I believe Key is not necessarily nil, it could be empty string. Probably better check a.Kind == Create"}
{"msg": "why delete this method?"}
{"msg": "PersistBlockLevelInfo -> UpdateBlockLevelInfo"}
{"msg": "better use `!isView()` so that we don't need to modify multiple lines in future."}
{"msg": "There's no need to create a new variable here, the other checks just use the item type directly."}
{"msg": "@eugene-manuilov Isn't this already taken care of by `fetchGetURLChannels` via `createFetchStore`? Why is the extra `receiveError` call needed here? (This was already in the IB, but just struck me while reviewing here.)"}
{"msg": "Could you explain why we default to binary now? It seems it's safer to default to text to avoid stuff getting executed or parsed by browsers accidentally. If we need to add support for particular types, we can add them explicitly right?"}
{"msg": "`AddDiagnosticSourceInstrumentation` method can now be eliminated and simply use `AddInstrumentation`"}
{"msg": "I think we also need to add `name:` to the bolt-project.yaml files in `spec/fixtures/projects`."}
{"msg": "`The %s is deprecated...` -> `The %s method is deprecated...`"}
{"msg": "Instead of hardcoding the AWSEmailProvider here, it should come from properties, so that it can be replaced with another EmailProvider for ZMS vs ZTS"}
{"msg": "if retcode is < 0, it should return -1 indicating an error."}
{"msg": "Are those necessary? I feel like `useless-suppression` could be avoided here?"}
{"msg": "\"this table hasn't mutated within this transaction\" may sound like implying that if this transaction contains table mutation changes, `refresh` may have impact, which I think is not true? I guess what you were saying was if other transactions committed to this table successfully when this transaction is half way through, refresh in this transaction will still return the same state as when this transaction begins."}
{"msg": "I'm not sure this is the right fix - I'd be more happy with a `continue`. That way, we don't enter the code at the bottom of the run loop (e.g. sending packets). Keep in mind that this error here may be triggered by a peer doing something security-relevant, so I don't think we should do much more work other than sending the close frame."}
{"msg": "log message should be started with upper-case word."}
{"msg": "I have a PR pending, can you change this bit index to `16`?"}
{"msg": "super nit: `revision string` (the passed value might not be a SHA hash)."}
{"msg": "Why were we disabling health checks before?"}
{"msg": "did `conftest.py` actually show up for you? `test_files` should never contain it..."}
{"msg": "timerNoUserLatency is not being used?"}
{"msg": "@lmazuel - I've made a couple of minor changes to serialization.py, if you could do a quick review :) They should not be breaking, and I doubt are used by the existing clients so may not need a new release yet. Effectively it's a change to support default/constant date and datetime values by allowing strings to passed in instead of date or datetime objects. The strings would need to already be in the correct ISO formatting that the request will serialize to. Let me know if you think this is okay."}
{"msg": "can we have it inside FromAccessList?"}
{"msg": "I am curious, shouldn't \"currentContinuousFlowProcessed++;\" be added right after line 1873? otherwise we will count 1 extra when a exflow wakes up from the sleep section,.even though it hasn't been assigned"}
{"msg": "@Tarrasch this is another change you need to pay attention, it seems `SGEJobTask` is not calling `super.__init__` which break the test case some how."}
{"msg": "Do we need indices for this table?"}
{"msg": "I forget the difference between type definition with \"=\" and without \"=\" again, but can we unify the style? I believe the difference doesn't apply to TableIDType and GroupIDType whatever it is?"}
{"msg": "would be `DEPRECATED Percentage of the graph (in vertices) to contract [0..1]` better?"}
{"msg": "`event_msg` has the same size (1024) as a `message`. Maybe should be increased to 2048 instead? Then this `\"[error] %.512s\", message` could be changed to this: `\"[error] %.*s\", sizeof(message), message`"}
{"msg": "Hit a flake here where I think there may have been some output to stderr that got mixed in with the output from Stdout. Hence switching to `Output()`, which does also capture stderr as `err.Stderr`"}
{"msg": "I would use static_cast<label_t>(0) and static_cast<label_T>(m_num_labels) just in case."}
{"msg": "Even if we want to keep in original case - domain will be lower-cased."}
{"msg": "This array should be logic-less, just the language string (without `Lang::get()`) should appear. Then `trans()` is [or should be] used when the balloon selector renders the values."}
{"msg": "This looks like it runs both pre 3.0 rake tasks and 3 rake tasks, and since pre 3.0 we didn't use bundler, my guess is it will fail then."}
{"msg": "sloppyReassign: re-assignment to `err` can be replaced with `err := kv.WriteBatch(batchForBlock)` (from `gocritic`)"}
{"msg": "As we're currently not applying any logic in the proxy listener, I guess we can simply remove this file (and remove the `listener` argument from the `register_plugin(..)` call above)."}
{"msg": "Isn't the point of the clock module to encapsulate access to `time.Now()`? Coming later?"}
{"msg": "I think we have the same problem here - if folks called the `public void Add` with a `null` key, we need to use `Guard`."}
{"msg": "I thought that the main was in catch_qt.cpp?"}
{"msg": "I would rename the field to IMAGE_TYPES and make it an array. I don't think we need list operations. Also, if possible, I would move the field to the ApiFields class. What do you think?"}
{"msg": "is this configuration key already exist in prometheus ?"}
{"msg": "We already have a method for it 'icon' => $content->getIcon()"}
{"msg": "Instead of importing `golang.org/x/net/context` The SDK should use `aws.BackgroundContext()` instead of `context.Background()`"}
{"msg": "I think this is an agnostic change for the ORM right? Why was it doing this? - this does not work on PHPCR-ODM as the `id` is not a field - although I guess it could be mapped as such."}
{"msg": "Note to self: Why was this not originally not using `stderrbytes`?"}
{"msg": "Thanks for adding this :+1:. Could you please move it to go after the `ctaLink` prop?"}
{"msg": "The other way around Current can be null."}
{"msg": "I fear moving this to some common func. We are swallowing the error here. This might be ok in UT but not in actual source code."}
{"msg": "there needs to be a change here. setting up the batchstore with localstore.Unreserve hook"}
{"msg": "I think if we can provide a more convenient method to add configs . e.g. public static void addConfig(String k, Object v)"}
{"msg": "Please add a copyright notice. Also, could you tell me please why do we need this empty provider here?"}
{"msg": "I feel like this would be easier to read if we join the two if's together: `if (maybePrivacyGroup.isEmpty() && !privacyController.isGroupAdditionTransaction(privateTransaction))`"}
{"msg": "Tests are failing because the exception type is NullPointException here if the soupBlob is deleted (so instead of a mal-format json, it's a null)"}
{"msg": "Glad we fixed this as well. Blockly is going to be left as-is for this case, right?"}
{"msg": "I had accidentally deprecated this class. This is meant to stick around. Only `SalesforceObjectType` goes away."}
{"msg": "`hex(i)[2:]` is trying to do the same thing above. what is `i` in your malformed case?"}
{"msg": "I think this change is redundant; see the previously defined method \"writeUnescapedXML\"."}
{"msg": "I believe in previous PRs @mccheah frequently used `fileSchema` -> `newFileSchema` type of renames to avoid hiding fields in builders. Would it make sense to make it consistent?"}
{"msg": "Do we really need separate error in manager if utils.ErrRequestCancelled is the only error which indicates cancelation ?"}
{"msg": "Just as a tiny clarification, this isn't affected in any way by \"speak typed characters\". That is, \"caps lock on\", etc. is always spoken, even if speak typed characters is off."}
{"msg": "Instead of counting this here on clear, can we use a second counter for the deleteTerms next to `bytesUsed`? This would be great. It doesn't need to be thread safe IMO"}
{"msg": "Typo, should read `firstTimeEmptySubject`"}
{"msg": "The more I see this the more I think the transport layer _should_ actually refer to this as `UnaryHandler`."}
{"msg": "The `warn` message here seems to indicate that the forced closure of the SSH connection should raise an error; is that getting swallowed up somewhere and not raising?"}
{"msg": "I wonder if this is a fitting name. Why \"expands user\"? Wouldn't be `user_expanded` or so be more fitting?"}
{"msg": "I see what you are doing here, but to stay with the `getter/setter` pattern, should we introduce `set isHidden(value)` & `get isHidden()` which them maintains `_isHidden` with in `vNodeCache`. This will avoid what looks like accessing an internal property like `_isHidden` from `axe.utils.isHidden` & keeps things neat."}
{"msg": "As before, shouldn't mention these as being orion options I don't think. Perhaps just enclaveKeyStoreFile etc."}
{"msg": "Do we want to add any specific error on how the url is malformed?"}
{"msg": "why NOT self->lastLogIdSent_ = self->logIdToSend_"}
{"msg": "Would be good to have another context `\"when a duplicate formatter exists for a different output target\"` that shows that it keeps both. As this stands, the specs could pass w/o the `formatter.output == new_formatter.output` check."}
{"msg": "Could you add some extra text here, so that it reads \"eth_coinbase function is not available, please use --private.api.addr option instead of --chaindata option\", so that it is clear that the function can work, but different options"}
{"msg": "Should flash be included in the patterns too? It currently isn't."}
{"msg": "I suspect I will have to keep looking whether Left/Right refers to contract/Implementation while working on the rules code."}
{"msg": "[Nit] can you change the Usage wording to indicate that the flag is used to opt-out of server certificate verification? (e.g. \"disables validation of the Cassandra cluster's server certificate.\")"}
{"msg": "The convention in most of the codebase is to use `if isinstance(body, bytes):` instead."}
{"msg": "I think this would be better as: `label = comp.rsplit('.', 1)[-1]`"}
{"msg": "Same thing about context here."}
{"msg": "there is a function to get namespace entry from mutable state directly"}
{"msg": "If this is needed, should we check that the configured `uri` isn't already equal to the value of the metastore URI configured via `spark.hadoop.hive.metastore.uris` or any of the other ways of setting it. This would be a breaking change for people who have `uri` configured on the SparkSessionCatalog and have it correctly set (which I believe should be everybody as `uri` is currently required if I'm not mistaken)."}
{"msg": "These tests use a self-signed cert so the CA *is* the cert. I considered making a proper chain to use in the tests, but wasn't sure it was necessary to test here, since we test it in the E2E tests anyway."}
{"msg": "We could, maybe, just directly do `excessDomChildren[excessDomChildren.indexOf(dom)] = null;`. Would this improve the size in any way? This will end-up with a property on the `excessDomChildren[\"-1\"]` but maybe we could live with that?"}
{"msg": "I don't think this belongs here. If the application can take a local_ip as input, the application should take care of it, not in this common library"}
{"msg": "@DanHarrin please add a `return true` at the bottom of this method, as the docblock indicates a boolean return value."}
{"msg": "Why do you need to load a specific data reader in lbann_library?"}
{"msg": "why not ValueTask?"}
{"msg": "I'm nervous about this line, I don't want to go regenerate a bunch of imageset jobs for clusters that are old, already installed, but don't have a CLIImage set (which they wouldn't because they're old) Adding the Installed guard is meant to address this. Otherwise this *should* recreate the imageset job due to the code in this function that deletes the job if it's finished. (but we don't have our images set due to this clause)"}
{"msg": "Is it necessary to change this file? Doesn't `tableMetadata` call `newTableMetadata`?"}
{"msg": "The \"good\" and \"bad\" descriptions confused me a bit. Maybe `allowedContentType` and `disallowedContentType`? Not sure if that's better."}
{"msg": "It would be better to just change RWD to throw IllegalStateException if you attempt to execute a command after quit (unless it's a second call to quit())"}
{"msg": "I see a few places where this blob of code is required due to the removal of `errnum` parameter from `flux_respond` -- trading 2 lines of code for 8. The improvement to the function seems like a good idea, but I wonder if we need a convenience macro or function to do it the old way? You went through and made all the changes, was it overall a net win?"}
{"msg": "Good catch, and if we don't declare the newSchedule here, will the last schedule be executed in multi goroutine?"}
{"msg": "`project` should never be null here, unless we have projects that aren't in the solution? Which we shouldn't have  "}
{"msg": "Let's default manifest lists and manifests to overwrite. These use UUID-based file names and should never conflict."}
{"msg": "Please rename [speechView] to [speechViewer]."}
{"msg": "I would use shorter yet still descriptive names, e.g. `KernelPerCpu` and `UserPerCpu`."}
{"msg": "I would say `!= 5`; A packet with <5 would be malformed."}
{"msg": "initializing to null makes me uncomfortable. let's have a default value"}
{"msg": "No need to use the fully qualified path the BackendAuth facade, just `use BackendAuth` is fine."}
{"msg": "Because it's similar for send/open/change/receive types, then probably it can be just common `nano::epoch nano::block::epoch () const` with override for state_block (like nano::block::link (), account (), representative ())"}
{"msg": "what is the effect of changing these buckets in existing data that is available in the monitoring system? if there are any existing dashboards that use previous histogram buckets they are probably going to be wrong ot invalid? also any reason why we chose these specific values?"}
{"msg": "This won't work. For the flag to be passed to the plugin, it should be passed as part of the --plugin argument. --plugin \"yarpc --sanitize-tchannel\""}
{"msg": "@shiyu1994 @StrikerRUS what do you think about this addition to `c_api.cpp`? I think it's a really useful addition to be able to get this type of information from the `Booster`, but I want more opinions since `c_api` is the main public API for the library."}
{"msg": "rename Round -> requestedRound and DbRound -> dbRound. we don't need to export the fields here, only the error struct."}
{"msg": "This expected value should probably be what you literally expect, otherwise there's a chance getClusterRegion is doing something wrong and the test wouldn't catch it because it's being run for both expected and actual."}
{"msg": "this method knows too much - it is kind of a strange side effect I'd prefer if we had separate method for acknowledging that the onboarding was done and should not be shown again"}
{"msg": "Do we need to increase the DB version? Also, should probably be a constant, no?"}
{"msg": "Here we are merging the configs from proto annotations and gapic config. But in other places in this PR we are using the new enum to pick one or the other, right? Or is that not the correct way to think about this?"}
{"msg": "Couldn't you just write this as an if/else or a guard clause like on line 87? Just seems a bit weird doing this conditional assignment for essentially an if/else."}
{"msg": "Also found this bug, where we were setting the min passcode length to 6, but the min length for a connected app is 4. This can cause problems when the app is force closed or the shared pref is removed."}
{"msg": "I kind of did this deliberately, so everything from the distributor appears in the same set of logs."}
{"msg": "We already have a `seq = pkt[TCP].seq` so you can just re-use it."}
{"msg": "Do you test for file existence simply to reduce the warning message that may occur using the include? Also - I think the practice used in BOINC is to go ahead and use include_once even though it isn't strictly necessary in this case."}
{"msg": "`TimeChaos` does not contains a field .spec.action"}
{"msg": "Should this have an add/update/etc pattern? What happens if I need to change some set of data? May be better to just let the callsite manipulate the dictionary."}
{"msg": "I don't think this should be added to PyRegion. Adding it here requires that every region have an \"algorithm\" which may not always make sense and the return value type will be different in every case. But fine to use the same name in the regions where we choose to implement it as a convention if that makes the API more discoverable."}
{"msg": "Since the lock is have moved outside of this function, I think it would be simpler and efficient to just return a ref to the std::vector<hsa_executable_t>? That way, we don't need to make a new copy on read and we won't actually need a write operation."}
{"msg": "also fetch block hash of this height and return hash"}
{"msg": "Shouldn't this return code conditionally? The above line seems like an error occurred."}
{"msg": "i don't think we need to add duplicate check for clusterinstallref here, the function already assumes that it was invoked for clusterprovision"}
{"msg": "\\`bbox_feats.shape[0] > 0\\` requires the number of proposal is not 0."}
{"msg": "Is this meant to be \"2.7\" or \"2.6\". The two lines in this commit don't agree with one another. Looks like everything else in this PR is \"2.6\" and that seems sensible."}
{"msg": "I think that it makes more sense to keep these with the standard definition of non-zero is true and zero is false."}
{"msg": "this reads like \"mock database cache\", maybe a clearer name"}
{"msg": "Do we really want a new type, or can we just use `SpanContext`? The `ISpanContext` interface is read-only, but there's nothing stopping users from casting this to `SpanContext` and modifying it."}
{"msg": "Can we instead do the check in find_instance_group_by_url() ? if we return None when group is not found, it will hit the next if statement (if not instance_group) and continue as expected, in this case we don't need to add 3 separate if statements"}
{"msg": "`!FormatIsMultiplane(image_format)` will always be true at this point due to the test on line 4639."}
{"msg": "Potential NPE? `hasMedia && selectedItem...`"}
{"msg": "nit: Would you mind moving the `ParameterTypeNames` assignment into each of the method-specific attributes? That could reduce confusion if we later decided to instrument other methods in MongoDb"}
{"msg": "So this will only be executed when it is true. I'm not sure that makes it always usable. Why not make the afterAction, `Action<bool>` and always call it, with the result as parameter."}
{"msg": "This could be `for (auto bond: bonds()){`, right?"}
{"msg": "I don't believe the change is sufficient to correctly handle variable substitutions in the name. As part of the process command we pass the original role object that was retreived without taking into account the substitution. So while the first template apply command will work fine because the original role does not exist thus it's a new add operation, if you try to re-apply the same template again, we'll pick up and process a wrong original name thus we'll try to execute an add operation again instead of modify. So we need to take into account the substituted name when we retrieve the original role as well. Same change should be applied to both policy and service blocks as well."}
{"msg": "Please add this to IMvxMainThreadDispatcher as well"}
{"msg": "Is it possible for opt not to be a string? I couldn't tell if this was a typo or if there is actually a case where it is not a string."}
{"msg": "Let's move this up next to the `id` as we usually have `className` as one of the first props."}
{"msg": "I think we can remove this corresponding export from `preact` now! Double check no other s using though lol"}
{"msg": "Maybe `DEFAULT_GITHUB_API_ENDPOINT` would be a better name, since we refer to this as an API endpoint elsewhere?"}
{"msg": "why not simply `paths = search_path_opts.LibrarySearchPaths` ?"}
{"msg": "Are we sure this should be translated by the web client? It was unclear in chat exactly what's getting translated here."}
{"msg": "If we resolve here, isn't the whole `module_install` config setting or any subkeys also pluggable? I think that's totally fine, just want to make sure that that's known, and we should also update the data in `options.rb` for those options"}
{"msg": "it would be better to change `kds` into a `std::vector` then we don't need to explicitly free it"}
{"msg": "Shouldn't there be some kind of validation somewhere? IMO there should be an exception if `$options['lazy']` is not a boolean."}
{"msg": "Shouldn't we then add `mp_impl = nullptr` to the destructor of `RTPSParticipant`"}
{"msg": "consumerMeta only belongs to this invoker instance only relate to this one consumerIntf class seems no need to build a complex key?"}
{"msg": "For a separate PR: Can we make this a JSON/Thrift procedure instead? It could accept the amount of time it needs to sleep as an argument."}
{"msg": "the cartTrait is not used anymore"}
{"msg": "Please do `import enum` instead, then use `enum.Enum` and `enum.unique` - we do this everywhere to see where things are coming from, except for Qt (everything begins with a `Q` anyways) and typing (mostly used in type annotations, so it's clear without the namespacing)."}
{"msg": "Isn't ENCFAIL used in codec.c below? Wouldn't this make it no longer compile?"}
{"msg": "So, the culprit was actually this class \"ConsoleLogHandler\", correct? Because it simply wrote to stdout..."}
{"msg": "Still curious why you need to modify this method? Why not in the future just have a method called `LogFactory.ReloadConfiguration()` instead of the config assigning itself?"}
{"msg": "Should this say \"lint, cleanup, destroy, dependency, syntax, create, prepare, converge, idempotence, side_effect, verify, cleanup, destroy\"?"}
{"msg": "See below: let's use the existing convention _tcsnlen."}
{"msg": "Just above, you have `const auto` for a `RDKit::MOL_SPTR_VECT::const_iterator`, here it is only `auto`. Why is this?"}
{"msg": "@djarek just a quick question, wouldn't be `ptr.reset()` here better as it does not memory leak if we do not call delete on the raw pointer aswell? it maybe makes sense to use `ptr.release` if the event is guaranteed to be loaded again but on a reload it would memory leak if for example I removed that script from my files before reloading or not?"}
{"msg": "Can you explain why you went from a positive value (metrics.viewTop) to a negative value?"}
{"msg": "Let's use a dedicated DTO instead of `List<String>` to remain consistent with all other existing REST API endpoints: * Introduce a new DTO class (e. g. `ExternalTaskTopicNameDto`) located under `org.camunda.bpm.engine.rest.dto.externaltask` * The class should have the attribute `topicName` of type `String` * Introduce a getter & setter for the attribute * Convert the list of strings to a list of `ExternalTaskTopicNameDto`s * Change the method signature to return `List<ExternalTaskTopicNameDto>`"}
{"msg": "Do you plan to remove the `ScriptDTO getScript(List<String> path);` method long-term?"}
{"msg": "Just `writeBytes(content.array())` Back to my original, somewhat broken version ;)"}
{"msg": "do we want to still validate that the context had a nonzero TTL? i suppose it's fine to let clients determine whether or not their streams will timeout (though we still don't have the means to cancel them from the server other than EOF), and they can still cancel their own contexts - so maybe not a huge deal, but thought it was worth bringing up."}
{"msg": "We should also test type confusion here (e.g. `{\"anticache\": \"foo\"}`)"}
{"msg": "From what I can tell, the `serviceAccountFile` is never set to anything except \"\"? It'd be best to remove this altogether, so we don't mislead future developers  "}
{"msg": "Why do we remove the Sign in link?"}
{"msg": "Does this fail validation if you now use the `upload` key instead of `source`?"}
{"msg": "I suggest you move the waitUntilAllElected into init::KV() method."}
{"msg": "Why not just `if (!searches.includes(action.search)) searches.push(action.search)`? That way you don't need to remove then add the element."}
{"msg": "@demiankatz I'm not sure that this is very useful. I just did it to get started. If we had a small handful of predetermined prefixes that were randomly chosen, it would be easier to distinguish them from the rest of the call number. Would that be preferable?"}
{"msg": "Given that IApiResponse is already made disposable, this is not necessary."}
{"msg": "It is relatively cheap to tell whether a bond is a ring bond, we don't have to perform an SSSR."}
{"msg": "This LGTM but don't we need a winning PoSts field to fully implement the protocol? No need to add here as I'm working on this in another PR, but curious how we can interop with lotus blocks without post proofs."}
{"msg": "Pick more specific exception types for these cases. Not sure what would be best for this one (`ValueError`?) but the next one could be `IndexError`."}
{"msg": "Eventually we might want to move this back as generating this data structure takes some time (for large datasets) and we don't want it in the hot-path of `osrm-customize` runs. Thinking long-term making `osrm-customize` eventually digest `.osrm.cells` will will enable only updating cells selectively and using an earlier customization for the rest."}
{"msg": "`stateDB := NewStateDBAdapter(sm, 0, hash.ZeroHash256, NotFixTopicCopyBugOption())`"}
{"msg": "Just one more thing... How about doing all of the following? 1. renaming h2o.rb to bootstrap.rb 2. require and include the acl code _from_ bootstrap.rb"}
{"msg": "Is there a way to deduplicate this somehow? Could we roll it into `RSpec.configuration` with a bit of memoization or is there a chicken and egg problem."}
{"msg": "Converting playbackManager to operate in ms (preferred solution, imo) would allow us to completely drop this function."}
{"msg": "The default value should be a bigger one, I'd like it is the maximum of int32. That means we will not cut-off anything by default. And users would config it with an appropriate value in config-file, such as 1000 or 5000, etc."}
{"msg": "Does this make it easier to read? Previously this would have run `kubectl describe certificate` right? In which case it would have included events related to the cert. Will we miss that? Would the old `kubectl describe` output have gone to stderr?"}
{"msg": "Ah, so the change is that you want the `prune()` side effect before doing the `task.id not in necessary_tasks` membership check? Stupid non-Haskell programming languages :p"}
{"msg": "Do we normally force ReadPreference primary on other write operations? Or is it just that we normally ignore it?"}
{"msg": "Instead of returning null here and discarding nulls automatically, I think this should return null (or some other signaling value) and fix the part that consumes the output of the visitor."}
{"msg": "Really, we want to be setting the validatorsForPreviousBlock against the yet to be created block, so it might make sense to update the cache once the block is created/imported instead."}
{"msg": "Instead of doing that, please create an `assets/js/googlesitekit-subscribe-with-google-bulk-edit.js` file as entry point - all our entry points should be located in `assets/js`."}
{"msg": "Better to call this before EXITING_DR which is supposed to be last."}
{"msg": "`NewUpgradeTaskJob` -> `NewUpgradeResource`"}
{"msg": "Is that the memory usage of the system or the process / awesome?"}
{"msg": "\"change\" *and* \"schema\" events (A bunch of these; not marking them all)."}
{"msg": "I think there is probably a shorter, more descriptive name for this. Something like `commitAtSequenceNumber`?"}
{"msg": "I don't think you need to change this, `array<int, string>` should be accepted whenever `string[]` is expected. (`string[]` is an alias of `array<string>` itself an alias of `array<array-key, string>` which is a parent type of `array<int, string>`"}
{"msg": "Is there any case that tab is None?"}
{"msg": "`attachGamepadScript` above can also be placed inside."}
{"msg": "when we use RegisterWriteCommand,this func should be exported,so we can use this to get signer at the outside action package"}
{"msg": "Dead code - we should remove it or use `log.Trace` for lower logging level. Same applies for change at line 138."}
{"msg": "How does this make sure invalid coordinates making the parser fail? Relying on the Coordinate type's boost numeric_cast calls in the ctor? Shouldn't we rely on a coordinate's `.IsValid()` member function instead?"}
{"msg": "Does this line (and the corresponding one in the test bootstrap) actually do anything? I don't see where CACHE_ENABLED is used as a global constant."}
{"msg": "looks good to me, but it would be better if you assigned `this.countRows()` into a variable, so it doesn't trigger twice in the return statement"}
{"msg": "I was confused by this env name variable, assuming it was the value, not the name. Silly nit, but maybe name it noninteractiveEnv?"}
{"msg": "`sys.platform` could be equal to `darwin` which is posix. Use `not startswith('win')`?"}
{"msg": "I doubt it will work, but without space between -o and ControlPath it should. Lets see. What I do not understand is why we did not see a failure on CI related to this?"}
{"msg": "this is the reason we might be seeing 360 as discrete bearing"}
{"msg": "`FULL_VERSION` is available at module level for others to use, but it won't have `%(prog)s` substituted with pylint. Will that be a problem. Also put it here instead of __pkginfo__ with other versions because it isn't pkginfo related."}
{"msg": "I think there's an `approval_for`"}
{"msg": "The `JavaCompile#getToolChain` method got removed and I am not sure what a good replacement is. I replaced it with `targetCompat` for now but they are not equivalent. Maybe we can use `JavaVersion#current` here?"}
{"msg": "The method name is incorrect. It does not check the existence of the file. I'd suggest deprecating both methods `fileExists` and `findIdByHash` and use findIdByFilename instead of fileExits"}
{"msg": "`writeConcernMax` was changed to return a `writeConcern` formatted the new way-- `writeConcern: {w:1, ...}`. Bulk execute takes an actual `WriteConcern` object as its first parameter (this was changed in master), so we have to un-wrap the `writeConcernMax` result here."}
{"msg": "Out of curiosity - did we make this change to allow dynamically assigning a value to `os.environ[\"TEST_TARGET\"]` during test execution? I kind of liked the decorator style `@only_localstack` - makes the condition a bit more explicit. Looks like `skipif` also allows to specify a condition string, e.g. `pytest.mark.skipif('os.environ.get(\"TEST_TARGET\") == \"AWS_CLOUD\"')` - could that be an option? (not sure if that gets lazily evaluated at runtime right before the execution of the annotated test method starts, though..)"}
{"msg": "would you please rename the message prefix to: [in_syslog] ...\""}
{"msg": "the name confusing, please rename to `pendingCountNoLock` or similar"}
{"msg": "@smcnulty-sfdc We do want to finish the hybrid activity in our hybrid apps though. Could the caller not pass in `frontActivity` instead? Or start it up again post-logout?"}
{"msg": "isn't this going to return a timeout error if the context is canceled?"}
{"msg": "`argNameVal.length` will still be !=2, so line 22 will give true and then continue on line 24"}
{"msg": "It was `$chars[$i]` I believe."}
{"msg": "I will also check if `nameMapping` needs a precondition null check."}
{"msg": "How to distinguish between warning and error?"}
{"msg": "Perhaps you want to check if UIAHandler.handler is not None. The current check will break NVDA if you call UIAHandler.terminate() for some reason."}
{"msg": "can we make `replace-partitions` property a static variable in `SnaphotSummary.java`?"}
{"msg": "FYI, I pulled your branch and hacked a little on your test case. This passes for me (you may want to tweak further): <pre> it('should not set empty string for null props in custom elements', () => { customElements.define('x-bar', class extends HTMLElement { val; }); // @ts-ignore render(&lt;x-bar val={null} /&gt;, scratch); expect(scratch.childNodes).to.have.length(1); expect(scratch.firstChild).to.have.property('nodeName', 'X-BAR'); expect(scratch.firstChild.attributes.length).to.equal(0); expect(scratch.firstChild.val).to.equal(null); }); </pre>"}
{"msg": "this line got me confused for few seconds, as the `AccountData` is both the name of the data structure as well as the function name. I think that `GetAccountData` is a better choice for a name. ( note that the same applies for the previous `BalanceRecord` function name )"}
{"msg": "What does our source validation complain about here? Many of the logok/nowarn places look fine to me at a glance but I'm no match for the logging policeman ;-)"}
{"msg": "It feels like this dependency should not be here. Some deep internal openvpn package (middleware) knows about one of possible stats consumers. Maybe as an alternative, statistics and state callbacks can be extracted as separate interfaces in top openvpn package and reused by both sides"}
{"msg": "Can you please remove `codec` from the parameters too? I think it's unused now."}
{"msg": "Not sure about this name. I think \"explicit\" is also a bit difficult here (I think it should be implicit then) Proposal: FlushOnEvents. Or, It would be cool if we could split into 2 options, FlushOnShutdown and FlushOnReload, but I expect that's far more difficult to implement?"}
{"msg": "I don't think that works - you can't mark a fixture."}
{"msg": "Wow, did it literally mean the retention days is a huge number?"}
{"msg": "Similar to `collate_fn`, we may rename it to `tpfp_fn`."}
{"msg": "If the feed is null, the menu items should still be setup. Just the feed title can be left out. That prevents possible flickering when menu items are displayed/hidden for some feeds."}
{"msg": "I'm not sure that this should call `allowIncompatibleChanges()` because adding a required column when there are no existing values will break reading the new column in any table with data in it. The only time it is safe to add a required column is if there is no data in the table. What about throwing an exception here instead? I agree that the column should not be optional if NOT NULL was specified. Another alternative is to check whether the table has data and allow the incompatible change if it doesn't have any rows."}
{"msg": "Wasn't there a subsequent reason why we had to keep the `/p/project_graph` route? Outside references or is the proposed solution to the original proposal we us `/p/g` as the `compares#project_graph` route?"}
{"msg": "The assertion here is that find should never return end() because this is the only mechanism that reaps items from the activeClientMap. If it == end something went horribly wrong."}
{"msg": "The `unless the collection ...` part reads a little bit hard, maybe separate into its own sentence and explain what it means by `cannot generate a fresh key`?"}
{"msg": "You can simply do `if tab.history_prepared:` here as empty lists are falsey."}
{"msg": "`show_img` is not normalized while `one_img` is normalized. And line 139 pass `show_img` for pytorch2onnx function. Is this expected behavior?"}
{"msg": "I think even you can exclude to run it on nvcc"}
{"msg": "will `failure` always include `arn` and `reason` in its dictionary? If so, :+1:"}
{"msg": "Should this be optional, or default to 'action' as well?"}
{"msg": "you could probably remove keyValue and just compare idx vs ann.length (ex I think the goal here is to ensure it works with a value like `foo=`"}
{"msg": "I don't believe that the `assertDictEqual` call can pass without `api_response` being a `dict`, so this second check isn't needed!"}
{"msg": "if end_level == -1 or end_level == (self.num_ins - 1): for end_level is the Index of the end input backbone level."}
{"msg": "Consider faking the TestClient's GetProject/GetZone/GetMachine methods."}
{"msg": "prefer common_properties::_canonicalRankingNumber if possible, should be quicker in general."}
{"msg": "The meaning of `loss_normalizer` and `loss_normalizer_momentum` should be reflected in docstring."}
{"msg": "Call to `cloexec_pipe` (or an equivalent function) is missing. I presume that this is the reason why you are seeing timeout errors."}
{"msg": "Deleting the files before starting the audit helps avoid stale results if the new file is not created."}
{"msg": "why are these colors needed to be specified here? when are they used?"}
{"msg": "Why remove the `.html_safe` here? Should we use `sanitize` or `raw` instead? This info comes off of the org edit page and is entered by users."}
{"msg": "Safe to reference c.srv without capturing it first under a client lock?"}
{"msg": "@abhinav here is where i need to be able to block/wait until the server is started"}
{"msg": "This will always generate a label for the first keyword, which means this will be a label linked to no element after the first keyword is entered. This label should be generated inside the `values.map` next to the `<TextField><Input /></TextField>` it is for, because the ID changes based on the index. Also, we have a `VisuallyHidden` component I'd prefer we use over the CSS class. Building as many things out of components is more React-y. Admittedly it's sort of a preference, but it's why we have the `VisuallyHidden` component. So let's use that instead  "}
{"msg": "Does it make sense for this to be fatal? Could there be an embedded application that does not have xcursor themes at all? For instance, compositors without a pointer (like a touch-screen kiosk) will never show a cursor. I think I'm ok with this assumption since it simplifies the code and rootston is assumed to have desktop features, but we should always make sure xcursor is not required to be used in the library."}
{"msg": "Is the idea that ``self.keys[0]`` here normally matches ``init_key``?"}
{"msg": "Can this be clarified to \"Exit early when hwnd is the windows desktop handle, UiaHasServerSideProvider would return false anyway.\" ?"}
{"msg": "5 or 10?"}
{"msg": "I've been struggling with this on my cloud-init integration work as well. In addition to info that is currently stored in the cluster providerstatus, we also need some of the info that is available within the base cluster object as well. I think it would make sense to unify the machine and cluster info needed into a consolidated struct rather than continuing to add additional disparate structs."}
{"msg": "Why not `@InternalApi`?"}
{"msg": "FYI: `GenericMeta` is renamed to `_GenericAlias` in Python3.7."}
{"msg": "So this hides the link to re-order sections on Historic Templates? Good catch, Just checked on DMPonline and hitting that throws a 404"}
{"msg": "Is `Reporter#reset` no longer used? If so, can we remove it?"}
{"msg": "same concern here about difference in the write scalar implementation. I am not sure if this could present a consensus problem or not"}
{"msg": "Why listing only first error reason (`ErrStatus.Details.Causes[0].Message`)?"}
{"msg": "This askes a blocking question, which means a local Qt eventloop will be running. While this is unavoidable sometimes, the async functions should be used whenever possible (`message.confirm_async` in this case). This means: - Split everything after this question in a separate private method (you can probably just call it `_tab_close`) - If the tab is not pinned, just call `_tab_close` directly - If it is pinned, call `message.confirm_async` with `yes_action=self._tab_close`"}
{"msg": "@skestle Just recognized that the `::apply` is not necessary. Does it compile if you leave it away? Could you please check that, I'm on vacation and have no IDE at hand... Thx!"}
{"msg": "This one won't change as the resource is not included in the project getting tested with the composite root."}
{"msg": "I think its safe to remove this if we're removing `reIndex` outright. The description shows us that the test is \"An example showing how to force a reindex of a collection\""}
{"msg": "Can this get moved to `Bolt::Project#validate`?"}
{"msg": "I'm pretty sure it doesn't harm, but don't we have a second pass here with the reverse() operation?"}
{"msg": "It's better to not leave this old code here... it just clutters things up and makes reading the code more confusing. We can always recover the old code from the repository if needed."}
{"msg": "If there is no guarantee that tv_sec is of type `time_t`, IMO you should copy the value instead of enforcing a pointer typecast."}
{"msg": "Should we validate the suffix before going to the filesystem?"}
{"msg": "This may change \"\" into None. Better return filename."}
{"msg": "This shouldn't be here but `self.connected = None` in `__init__` instead, otherwise that'd be an attribute which is set this way in _every_ instance of that class (i.e. a class rather than an instance variable). I'd also say let's make it \"private\" (i.e. `_connected`) and please add a quick note about what it is to the docstring of the class."}
{"msg": "This would be better served as a method/property that is set when people don't want to a window."}
{"msg": "I was dubious about putting getNonStreamingMethods in the context, but after some thought, I have decided to embrace the approach. In this particular case, the loop is supposed to be over page streaming methods. So, could you add a getPageStreamingMethods() method in the context, use it here, and remove the isPageStreaming() check below?"}
{"msg": "`const Dims zeros(shape.size(), 0);`"}
{"msg": "this includes the port as well right? should the name be `destinationServicePortName`?"}
{"msg": "I was using this imports for writing the results to file to more easily check that it was valid JSON. You can probably remove these `java.io` imports."}
{"msg": "*\"This **field field** prohibits :other from being present.\"*, **field** word repeated is right?"}
{"msg": "Or `QUIC_LOG_LEVEL`. Which one do you prefer?"}
{"msg": "Minor: you can set it to byte here and only set it to *virtualDiscDesc.CapacityAllocationUnits if that's not nil/\"\". Saves two lines"}
{"msg": "Thank you! That's better, especially the conversion test should not test the mkString method :)"}
{"msg": "You're basically converting client to screen coordinates here, doing it manually. Is there a specific reason why you aren't using clientToScreen here? Does it fail?"}
{"msg": "Let's call this color_host_output or some such - preserve_host_output makes it sound like you won't get any output without this being set."}
{"msg": "suggestion: if we perhaps make `attributes` a getter in `virtualNode`, it does look seamless to access the property, same as what we have done for `isFocusable` or `tabbableElements`. `node.attributes` can become `virtualNode.attributes`"}
{"msg": "This should be (POST,DELETE) `/pss/subscribe/{topic}` for subscriptions and there should be `/pss/send/{topic}` for sending."}
{"msg": "req.getQueryString() != null is not necessary since same check is already done in allowedPostRequest"}
{"msg": "Same here, we need the default padding for this story."}
{"msg": "`this.ieService_` should be initialized to null in the constructor."}
{"msg": "I just noticed that we use Return here, when we have logically allowed a packet, whereas in the forward chain we use AcceptAction. Do you know why that is?"}
{"msg": "I think that you don't want to have these workarounds; you want to make sure that the relayTemplates is configured correctly. If not, we need to fix it there."}
{"msg": "Ditto for not adding this to the axe namespace."}
{"msg": "It might be better to call this `$createRecordMethod` since it's not a full PHP callback, just a method name for the plugin manager."}
{"msg": "I've never seen this syntax before, it's still just an array, the difference is that it's an array of MainMenuItems instead of an array of arrays."}
{"msg": "What's the reason behind these characters?"}
{"msg": "I'd suggest using `ast_error_continue` here to get the `apply` message in the `Info` part of the error report."}
{"msg": "If we decide to change the name of the .ini setting, we might also want to review the naming of this property and related code. Maybe a simple `getOptions` or `getSettings` would be more concise than `getTabDetailConfig`. At very least, I don't think we need Tab in the method name since the method belongs to a helper with \"Tabs\" in the name."}
{"msg": "Use const for \"user\", same as below"}
{"msg": "->setUnsubscribed(false) would be better :)"}
{"msg": "Looks like this could be `const` (I realize it wasn't like that before)?"}
{"msg": "You have replaced single quotes with double ones, this fails linting and our current coding style. Please fix this, otherwise it's a whopping of 1200 LoC while in reality it should be rather small."}
{"msg": "At some point, we would like to get rid of these custom injections as well. Looks Ok for now."}
{"msg": "Since we're calling `self.tab_url(idx)` a third time here already, can you please add a `url = self.tab_url(idx)` somewhere above (e.g. after all the `fields[...] = ...` assignments) and change the calls here to `url.host()` etc.?"}
{"msg": "We can't freeze this and then add something to it in the next line. The `freeze` on line 43 is sufficient. If Rubocop flags this we need to exclude it."}
{"msg": "We call it Kind2 and move out of the `javaslang/control` package into the `javaslang`package. Maybe I will later generate Kind1..Kindn but that's another story."}
{"msg": "i think it might be nicer to have a message like: `database capacity: %d chunks (%d bytes, %d megabytes)`. counting in bytes is so 90s :)"}
{"msg": "This is wrong. xlocale.h is needed on OSX and maybe elsewhere too. This needs a test in configure to see if xlocale.h and uselocale() are available and an #if test here. Also, the NO_PER_THREAD_LOCALE stuff in configure.ac needs to be updated to include test for uselocale()."}
{"msg": "AWS Identity and Access Management (IAM)"}
{"msg": "Why did you have multiple function calls here instead of having one long array of supported mimeTypes? In line with your PR here, I think we might eventually see inline videos or inline pdf. It would be great to generalize this a bit."}
{"msg": "I feel that a slightly safer way is to do if (param_.has_device_id()) { Caffe::SetDevice(param_.device_id()); } just in case a user has hard-coded a device id outside the solver and does not specify the device id in the solver param. Currently, if nothing is set, the solver will always use the 0th device, which might not be desired."}
{"msg": "Please remove the brackets and use `string_type` from `compat.py` module instead of `str` in `isinstance()`."}
{"msg": "Should this be DBWorkingDir?"}
{"msg": "This doesn't solve the entire problem we talked abut yesterday, right? Because it's possible that the step itself didn't skip, but rather that it chose not to yield the output in question?"}
{"msg": "Feels like this needs to be invoked in `PostUnmarshalTask` since that's where most of the task setup happens."}
{"msg": "I wonder what would happen if the granteeName becomes DB__ROOT but the granteeID is not DB__ROOT ID (33333) but something else."}
{"msg": "Feel like this should probably come into this tool as a flag rather than it just grabbing an env var internally?"}
{"msg": "This is an example of why I prefer a flexible custom `render()` solution   'on'/'off' may not be the right value for every application. You have to make a lot of decisions even for very simple form fields :("}
{"msg": "we should also skip the e2e flow aggregator tests if the Flow Exporter feature is disabled."}
{"msg": "We should initialize the observation in the constructor of the Script class - otherwise, we don't have this feature for mitmdump."}
{"msg": "Does \"FPU\" here include XMM/YMM/ZMM SIMD and not just x87 FPU/MMX?"}
{"msg": "From @PetrHeinz review: this should be also aliased (`ImageDirectoryStructureCreator`)"}
{"msg": "Isn't AdditionalTags already of `Tags` type? If not, we should make it so, if it's not a breaking change"}
{"msg": "Perhaps this could be moved into `InitPWM`? I suspect not initializing the clocks will reduce power consumption."}
{"msg": "\"i\" and \"From\" is a bit duplicate, and should it be singular given the method name? I mean \"fromPeer\" or just \"from\"?"}
{"msg": "Did you verify this isn't going to break any existing test assumptions? We probably shouldn't modify this as we don't know what impact this is having on existing tests. It may invalidate a test that has different expectations of the scopes."}
{"msg": "This can return bool. RelaxedReclaimPurge(nodeID string) (bool, error)"}
{"msg": "The genesis block needs to exist in the store the fetcher pulls from, this is because the fetcher will stop fetching when it finds a block it has seen before and this can sometimes be the genesis block."}
{"msg": "should we do the same for os.Mkdir(criuOpts.WorkDirectory, 0755)?"}
{"msg": "Wait, does this not work if we do `btl.reload`? That seems odd that we have to have the object in the same state."}
{"msg": "Can you remove it from the menu instead of setting it hidden? Or are there any other trouble?"}
{"msg": "This should be `return (ev->flags == ASIO_DISPOSABLE);` because `ASIO_DISPOSABLE` has a value of `0` as defined in the enum in `asio.h` and because when `ev->flags` is assigned `ASIO_DISPOSABLE` it is assigned as `ev->flags = ASIO_DISPOSABLE` unsetting any other flags previously assigned."}
{"msg": "Does pandas throw an exception like this?"}
{"msg": "Why do we need to make so much more of this ScanContext public?"}
{"msg": "is choice_name not needed anymore?"}
{"msg": "Is this the right place to do the validation? If a user adds a bad property or performs some schema update that causes a validation error, that would break all writes to the table. To me, it doesn't seem like we are catching the problem early enough and possibly allowing a typo to break scheduled jobs. What do you think about adding this validation when altering the table? `UpdateProperties` could check whether any properties starting with `write.metadata.metrics` were modified and run this. Similarly, `UpdateSchema` could run this as well, although I think that we should probably modify `UpdateSchema` to simply update the properties for column renames (if that's easily done)."}
{"msg": "instead of using `prometheus.Gauge`, using `promethus.Counter` will be better."}
{"msg": "Minor: If this is going to be public, we should fix the name. `get` doesn't add any value. How about `distributionModeFor` instead?"}
{"msg": "minor: I'd add a space between `,` & `'paginggroup'`."}
{"msg": "I don't see us ignoring the field. Are we sure Prometheus wouldn't refuse to load the rules?"}
{"msg": "I wonder if we can just check if the mSession is active and then only call `setActive(true)` and `callSurfaceChanged()` if it isn't?"}
{"msg": "A default value of 100 MB maybe too small. I understand that this is good for mixed workloads, but do consider than plans with Unpack, especially when used for insert/upsert are simple. Unpack is always serial and part of master exe. Often there is only one in a query. The cost of having a low value here seems to be that queue length from unpack could be limited by this when we are loading a table with wide rows (even if actual data in row is not wide). We know from performance runs that queue length is critical to upsert load performance. This is a hunch on my part and could be misguided. It will be good to performance test for upsert of table with wide rows, if you think that is worthwhile."}
{"msg": "> opts.generate_hexfloat_in_json && **IsFloat**(type.base_type)"}
{"msg": "As an alternative to this, we could also create a new method, like `Common() *AppManifest` This way we don't have to add a new method to the interface everytime we add a new field to the `AppManifest`. This is a nit though so it's up to you."}
{"msg": "As long as we have this feature as an inline script, I'm inclined to remove the dependency here. I'd suggest that we just try to import harparser and pytz and throw an error instructing the user to install the dependencies (catch for `ImportError`). In the long term, we probably want to include that in the mitmproxy core, but we first want to introduce a clean extension interface before that's going to happen. As soon as said interface is there, porting the inline script and adding the dependency again should be a breeze."}
{"msg": "makes it work nice with vscode. all logic is now in `.gulp/*.iced` files"}
{"msg": "`typeof` is not a function - its an operator, and the standard way to use it is as `typeof foo !== ...` (i.e. no parenthesis). Also, I would personally use `opts.fee != null` instead (with a non-strict comparison, which also identifies `undefined` values because `null == undefined`)."}
{"msg": "here, you want to use req.GetXattrOpt() referring to the in line 514 of api.proto. This will be nil if not provided. See the example above on line 801 on this file"}
{"msg": "I think this should be done outside LocalPSMP, but in `getNextInQueue`. The reason is that I want to reduce the dependence of the media players on the preferences and database. Also, it will then probably work on Chromecast."}
{"msg": "These should all call `findUpVirtual`."}
{"msg": "Let's keep using the regular expression to make sure that the token is well-formed. I think the regular expression should be altered instead of doing a substring."}
{"msg": "@trevor-vaughan it looks like the spec failures are caused by the fact that although it was a great idea to put the guard clause here first & get the error case out of the way, the main code path has been erased when I assume it should be just below the guard clause."}
{"msg": "this partial is used also for previewing a template, did you test if still works?"}
{"msg": "Would it be better to put like `Which Dockerfile would you like to use for %s?`"}
{"msg": "You mistakenly removed `/docs` here, please add it"}
{"msg": "I missed this earlier, but why does this say \"file blocks\"? This should probably be \"recommended split locations\"."}
{"msg": "Do all the prepare authors also need to be unique? Or is it enough the we have minimumPrepareMessages. I guess I'm wondering if need a hasDuplicateAuthors check like in the RoundChangeCertificateValidator."}
{"msg": "This is an improvement - thanks! Could we rephrase slightly to not use the phrase \"is not supported\" -- instead stating _WHAT_ isn't valid please? e.g. maybe `String.format(\"Unsupported BoundType provided: %s\" type)` or something like that."}
{"msg": "nit: `procfd` seems more appropriate now?"}
{"msg": "Let's not call it django. Maybe `auth_provider_headers`? `auth_headers`?"}
{"msg": "Suggestion: `.. the CertificateRequest is ready for signing` - could we perhaps word this differently? I understand that in this case it will be the associated X.509 certificate that can now be signed, so maybe `the certificate is ready for signing` ? (Same with `CertificateRequestReasonDenied`)."}
{"msg": "We should use `! isValidAccountID( accountID )` for the `accountID` checks."}
{"msg": "This looks like a bug: pretty sure there are scatter-gather instructions on AArch64. Ditto below."}
{"msg": "Should this be in the parent struct? `AppManifest` since it's embedded to `LBFargateManifest` it'll get the method as well."}
{"msg": "This might end up not doing exactly what we want (the retry only picks up the `go get`, not the `go build`, due to the `&&`)."}
{"msg": "Is there a BOM change?"}
{"msg": "I deleted this because `WellFormed` is immediately called by `verify.TxnPool` below. Can someone please double check this for me since it's... pretty important"}
{"msg": "Did you actually test this with ply 3.4? That release is pretty old (2011), so I think we can bump this to at least 3.6 (2015) or even 3.10 (2017)..."}
{"msg": "what about making a `ProfilesController` or `UserProfilesController` and having this be a `show` action instead? That would be more Railsy (although that can be considered a compliment or a dis, depending on who you are :hamburger: )"}
{"msg": "Just wondering - would it make more sense to simply replace `PMIX_DESTRUCT(&t->nslist)` with `PMIX_LIST_DESTRUCT(&t->nslist)` here, and then add `PMIX_RELEASE(p->jobbkt)` to the `pmix_nspace_caddy_t` destructor on line 154 of src/include/pmix_globals.c? Seems to me like we always want to have these things removed/destructed."}
{"msg": "I think, we should fix/improve AbstractRuleSetFactoryTest. I guess, both apex and visualforce rules are now tested, which is unnecessary."}
{"msg": "In php8 named parameters were introduced and now it is required to match called method parameter name when setting parameters by array destructing or `call_user_func_array()` etc."}
{"msg": "Ignoring the pack entry from an existing entry but using the new entry from a non-finalized index, is subtle enough that it needs explaining."}
{"msg": "Suggestion: log some additional info here so we know where we are i.e 'Failed to prepare coverage framework..'"}
{"msg": "There didn't seem to be any good place to put constants that are .NET Tracer-specific, so I created this internal static class. If there's a better place, let me know."}
{"msg": "`ctx` is unused in EnableApplication"}
{"msg": "should we be using `aws.String` here? it seems there are a few other spots we could use `aws.String` in the `if change.Attachment != nil { ...` block."}
{"msg": "We can't pass raw dates like this because they need to be formatted as `YYYYMMDD` as noted in the IB. We added the `generateDateRangeArgs` utilities to handle this for us, as well as abstracting the relationship between arg name and specific dates which is not obvious just by looking at it. Let's update it to use `generateDateRangeArgs( { startDate, endDate } )` instead   Use care to make sure we're sourcing the utility from Analytics utils though since AdSense has its own version by the same name, which is different."}
{"msg": "`default=True` shouldn't be used for BoolParameters iirc."}
{"msg": "It would be better to use `return refStr[12:]`. or `11`... I have problem with counting.."}
{"msg": "we should keep this counter using the \"isYarpcError\" api"}
{"msg": "Could we just use case insensitive strings as keys instead of creating a new map implementation? e.g. simply using a treemap with a comparator `Map<String, Integer> idToPos = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);` could work I think"}
{"msg": "I think this should be a throw. Or the method should be TryGetSlot?"}
{"msg": "Maybe we should use underscores like `health_check` - what do you think?"}
{"msg": "Are the fields in this struct grouped by IP address family or by function? There are separate fields for IPv4Addresses and IPv6Addresses, but a single field for DomainNameServers. Should this new field be named SubnetGatewayAddress with type array consisting of both IPv4 and IPv6 gateways?"}
{"msg": "Will be good to have the iris interface moved to geoviews. Could this be done for 1.10.6?"}
{"msg": "If you want to express \"any role that is not creator\" you could use the following statement: Role.where(plan: self).where(Role.not_creator_condition).any? which would be less verbose and a bit more efficient if it is used for Yes/No shared?"}
{"msg": "`lile *LeaseInLedgerError` to reduce copying?"}
{"msg": "should it be `newsessionqueue` or `newsessionqueuer`? In case we'd like to be consistent"}
{"msg": "We don't have a requirement anywhere in Test Platform for GetStream() with write access. It is ok to directly change `return new FileStream(filePath, mode, FileAccess.Read)`."}
{"msg": "FWIW `from qutebrowser.browser import hints` is okay - it's just things like `from qutebrowser.browser.hints import HintManager` I try to avoid."}
{"msg": "nit: What do you think of `copilot-task-group`?"}
{"msg": "We should check whether or not the input node has a value since we can just have an onChange on an uncontrolled component as well."}
{"msg": "What about `VOLTA72`, `TURING75`, `AMPERE80` and `AMPERE86`? We only want to set the number of teams for these two architectures or for all the architectures newer than Maxwell?"}
{"msg": "Since we have specified `load_from`, `pretrained` can be left None."}
{"msg": "Why not `export default API` instead? This ensures we export the same that we export on the global."}
{"msg": "cluster not having omitempty, does this imply that cluster is required? seems empty is valid so just checking"}
{"msg": "nit: aspects are defined in `OperationBase`, should `defineAspects` live there as well?"}
{"msg": "Why the `os.path.abspath`? `os.path.dirname` should always give a valid directory path."}
{"msg": "Is `rbegin` correct? We can't make sure that the last index column is the `rbegin` of `scanItems`."}
{"msg": "there is no \"DEFAULT_REVISION\" logic, no need to define this."}
{"msg": "It doesn't seem like the right way to implement this, because you add a new element that doesn't really exist (noteTextViewer). Instead you should modify the command handler `if (command.name === 'focusElement' && command.target === 'noteBody') {` in NoteText.jsx. Then focus either the editor or the viewer depending on what's currently visible."}
{"msg": "Different i18n keys. By mistake or on purpose?"}
{"msg": "Given the description for this is `// Describes how the ACME challenge self check behaves when it fails.`, perhaps `RetryForever` is better terminology here as when the check fails, we don't just wait, we retry periodically."}
{"msg": "I am a bit confused about this function. If it is used to set priority, we actually use function \"Table.BuildFlow(priority uint16)\" to set the value. If it is used to parse the priority value, I think adding a property(if you don't want to consume Match.Priority directly) to cache it and consume that property should be simpler than using string regex."}
{"msg": "Just export `createFile` directly."}
{"msg": "interface for bitcoin should not change if possible. i.e: networks.testnet should return networks['btc'].testnet"}
{"msg": "Do not import torch in the test function because it will import torch every test iteration and will slow down the testing speed."}
{"msg": "How about renaming the `ApiJob` class to `JobApi`. As per rails convention, get method is to get a single object, not a collection, can we change that to `fetch`/`where`. It would be great if we can move the `get` method to a class method."}
{"msg": "Are these allocations necessary, or can these be instantiated normally (i.e., `VkCommandBufferObj secondary_full_clear(...)`). If the allocations _are_ necessar, I'd vote for using something like `std::unique_ptr` and then remove the associated `delete`s."}
{"msg": "Golang naming convention is to use camel case `icmpPktWithTypeCode` Often the linter will complain"}
{"msg": "is `settings.icon` always null/undefined when there's no icon or does is it get set to a blank string? It might be worth wrapping it in an `isBlank()` anyway"}
{"msg": "I think that bytes is too precise. Can we just calculate the approximate value in appropriate units? Something like MB, GB depending on the value, `db capacity: 5000000 chunks (approximately 20GB)` ."}
{"msg": "can you catch the error here please and return err if it can't read the template"}
{"msg": "Is this method called at another location too? I'm just asking because you didn't remove another call to `updateLibrary`"}
{"msg": "Not necessary but you should be able to add a `?` on `is_default?` and `published?`"}
{"msg": "here is us decoding directly the bytebuffer in benchmarks"}
{"msg": "NIT: If we are renaming the JsonRpcError, should we also rename this enum value to be consistent?"}
{"msg": "I think that there is a general consensus of trying to avoid this kind of mocks in the new tests that we write. I would suggest to have tests using fake service implementations. In this case, we can have a fake entry service. Examples of how tests have been written this way are the tests for the `spire-server agent` and `spire-server bundle` commands. It would be great if we can have that kind of testing here also. What do you think?"}
{"msg": "We should create the monitor after the `if (!primary_drm)` check."}
{"msg": "Is doing a straight string compare of the files the right way to determine this? I guess if you expect to be the only one writing this file it could work but it does seem like it might be a large string compare and if we are doing this hundreds of times that might cause some memory issues."}
{"msg": "Hmm, why is this needed? `wlr_input_device_destroy` should destroy the tablet tool."}
{"msg": "Keys.COMMAND seems to be an alias to Keys.META. That isn't mentioned?"}
{"msg": "s/must specify secrets/must specify secrets or Role info/"}
{"msg": "We'll be renaming ActivitySampler to Sampler anyway, so this change will be non-required. Prefer to avoid changes here to avoid merge conflict with my PR doing the rename."}
{"msg": "I'm not sure we should deprecate this. I kinda like the idea, that we would provide all exceptions (if we throw any) with a common super type. Of course, the exception should be not a checked exception like this one, but rather a runtime exception. We maybe need additionally an internal exception that we would convert into such a public API exception. But that's out of scope of this PR - that's the question of exception handling."}
{"msg": "This file still uses Blockly.VariableModel..."}
{"msg": "can we remove this since `getDocValues` already returns an iterator? (we might need to do `T extends DocIdSetIterator` above)"}
{"msg": "Don't check this in. This is already implemented in core_extensions/ruby/string.rb"}
{"msg": "This is used for both `id`, and `hash` we may not want these both to be enumerable."}
{"msg": "Don't miss this one `2: I102 copyright year is outdated, expected 2014 but got 2013`. Thanks"}
{"msg": "?: is unnecessary because we already force preserve_hosts to be a string with to_s."}
{"msg": "should it be `newsessionqueue` or `newsessionqueuer`? In case we'd like to be consistent"}
{"msg": "There is a `is_content_editable()` method just above this, what's the difference?"}
{"msg": "Should we specify the name of the folder?"}
{"msg": "it's not wrong, but you don't technical need `rdmolops` here since it's imported as part of `Chem`"}
{"msg": "Maybe `sortByColumnHeader` would be more precise? The plugin has a method with the same name and it could be confusing."}
{"msg": "@developit I vaguely remember you mentioning something about some JS engines having an escape analysis feature that makes objects (and arrays?) locally declared that never leave the function essentially free from a GC perspective or something. Do you think we could benefit from that here? Or should we leave this as it is?"}
{"msg": "Did you mean to negate the not_a_peer check?"}
{"msg": "Copyright (C) 2010-2021 DBeaver Corp and others"}
{"msg": "Just to double-check -- are you sure this needs to be done *before* we create a new session? (Is `SetKeyLabel` setting what the label will be for all future keys or the label for the current key?)"}
{"msg": "This comparison looks a bit strange, we should first check existence of key \"IsApiToken\" and then check if it is equal to true. ~~Besdies, s/IsApiToken/IsAuthedByToken/~~"}
{"msg": "This just feels weird... can we use some kind of constant here? something like: `if (_.isUndefined(data) || data === PrivateKey.Random)`"}
{"msg": "any tests for nextPrefix() ?"}
{"msg": "In general I'm saying \"if there is no common type I'm just going to skip some stuff and fail silently.\""}
{"msg": "did we move the eventing logging here? Probably the eventing logging was removing and they are now using the pkg logging in eventing. If that is the case, we should do the same here"}
{"msg": "I think that `Handler` should preserve the `operation` member and the span formatter should receive the operation name string as a parameter too, otherwise the `operation` parameter in the `NewHandler` function becomes useless if we pass a custom span formatter. Also, shouldn't it be called `spanNameFormatter`?"}
{"msg": "Can you merge #466? That would make the current `None` default value working and more relevant that `\"127.0.0.1\"`."}
{"msg": "Would a KBFS_DISABLE_JOURNAL make more sense?"}
{"msg": "My preference here is to keep a stricter hierarchy. We should have a mixin or something that is an AssetEvent that Observation and Materialization can both inherit from. That way we can check the type in the frontend if we need to."}
{"msg": "Another cleanup. There are two additional `using namespace std::chrono;` under this one. Should also remove std::chrono:: from the full file. Please do this on a single commit."}
{"msg": "Might be better to use a tag here. I for one have used 1000 isotopes as a tag in the past..."}
{"msg": "This tests seems it was broken from the start :joy:. It \"worked\" because the old sample chance was small enough that this have always be off. Thanks for fixing this. Could you also change the strings on this test? `\"Recording off\"` and `\"new span is recording events\"`"}
{"msg": "Python 3 will throw an exception for inf, but not providing a timeout will result in no timeout exception."}
{"msg": "`ctx` is unused in rollbackTraffic"}
{"msg": "This is not bullet proof if e.g. user has `clientPort=1234` in `zoo.cfg` and in zkHost connection string. Then we'll add a warning that dynamic config differs from zkHost, which is not entirely true since we just lack the port part. We have no way from client to read the `clientPort` from server except from connecting to the server with 4LW *ont the clientPort* which is a chicken and egg. This hack will make the comparison work for default port, which is a compromise."}
{"msg": "Should remove in `_MissingPandasLikeMultiIndex:` too"}
{"msg": "We should scope this down to the bits that we're actually using, otherwise the API is going to be problematic, as it includes references to NAT gateways and public and/or private subnets. Copying the types to be more local to the task in hand is fine."}
{"msg": "Is it is a hard requirement for this field to be 'cn-northwest-1' when wanting to interact with AWS China? It appears that putting in 'cn-north-1' would also result in using the alternative API endpoint (with the region overridden to use 'cn-northwest-1' for the created AWS client)."}
{"msg": "Stephen already fixed this one. Only the OverSize test is flaky now right?"}
{"msg": "if the `activity_mailer` has a layout, should we include the footer in that? Realize there may also be conflicts with work @rememberlenny is working on..."}
{"msg": "Please, don't remove the `getDisabledMetricAttributes` method. All changes must be backward-compatible."}
{"msg": "I've fallen for this before myself :) We _do_ call `close` inside of `done` on L65"}
{"msg": "That looks fine! You could use `\"rclone/\"+fs.Version` too if you wanted. BTW does tardigrade use http under the hood? If you were using rclone's http Client then you'd get a User-Agent and you'd also get support for `-vv --dump bodies` and other nice things."}
{"msg": "Adding one line `prob = prob.clamp(min=EPS, max=1-EPS)` already works."}
{"msg": "Do you think we should have some tests here for `tlf.SingleTeam` too?"}
{"msg": "The purpose of this test is to ensure that the `OAuth2UserRequest` passed into `loadUser` is **not** null else throw `IllegalArgumentException`. Changing the `List` of `OAuth2UserService` mocks to `DefaultOAuth2UserService` doesn't really apply to what is being tested here. Please revert this. Thank you."}
{"msg": "nit: rename to nativeStk? proto might lead to think protobuf"}
{"msg": "Why not `queryUUID` (and reference the same constant as in other places)?"}
{"msg": "before, a binary annotation had the same service name as a regular annotation, masking the bug where we weren't querying the latter"}
{"msg": "One nit here I forgot about this before but we usually structure error messages as \"Cannot X because Y. Then the recommendation goes here\" I would also recommend not using \"it\" in the message since it the pronoun is a bit ambiguous. \"to specify write sort-order\" may be clearer"}
{"msg": "I'm surprised this worked at all! It was importing the default export but `eslint-plugin-import` warned me `warning Using exported name 'initialState' as identifier for default export import/no-named-as-default`"}
{"msg": "we got no chance that `err` is not nil here, need to revisit how `NewUpstreamController` is defined."}
{"msg": "This is going to create a problem - we are already encountering issues with the length of the usock pathname on recent Linux kernels as the temp directory base has moved down to the var directory under a name created by a hash. So adding another field to it is going to add to the problem."}
{"msg": "As the bokeh renderer also has a ``load_nb`` classmethod (and notebooks are explicitly mentioned in that method name), I would consider making ``_notebook`` into a constant ``notebook_context`` class parameter. The docstring can say it is set to True if the ``load_nb`` classmethod has been called."}
{"msg": "How exactly are you expecting the user to see issues with their Midas library? It seems like all error information is being swallowed and not clearly reported to the user. Even if the eventual result is to report that loading the file failed, it seems like the exception, in this case, might have more information about why."}
{"msg": "`isinstance(ip6, Net6)` instead"}
{"msg": "Do we really need the param here? If only partial results returned, we could return ResultCode::PARTIAL_RESULTS;"}
{"msg": "The Hash interface states that a call to `Write()` never returns an error. Does this also apply to the number of written bytes?"}
{"msg": "I don't see a validation on `published_on`, we generally shouldn't specify it in the base factory unless the model would be invalid without the model. Is there a different way we can handle this?"}
{"msg": "Should we add error info for not supporting the compressed binary?"}
{"msg": "Can't we just make _serializer static? We use same settings every time. I would also put those fields on top of the class for readability."}
{"msg": "Can't we just use `metadata['websocket_flow']` to identify handshake flows and not add another attribute?"}
{"msg": "Funny that we were wrapping this with string interpolation before..."}
{"msg": "I had an eslint error saying I must \"alias\" my model - so I copied this from controllers/site.js"}
{"msg": "unsure if the methodname can still be `GetMetricPoints()` as before..."}
{"msg": "I felt that this was the most non-invasive way to fix the test, but this does expose some raw DB queries and knowledge about how SQLite works which may be a code smell. The alternative to getting this to pass is to perform enough writes to trigger a checkpoint, but that threshold is determined in the config stage and this test may not be able to know what that page threshold is set to. This could lead to inconsistent test runs which is why I elected to force the checkpoint regardless of the page threshold."}
{"msg": "Is new model format backward compatible with current v2?"}
{"msg": "JMX offers normal APIs for this. I don't think you want the glassfish one."}
{"msg": "This exposes what a bad name `dagster_type` was, but is it crazy to want this to just be `type` -- do we gain usability by being super-explicit that this is a `runtime_type`? If so, would it make sense to rename the `config_field` to be `config_type`?"}
{"msg": "It might help here if you give a brief explanation of what you mean with a selection being anchored at the start."}
{"msg": "I don't think this can just be renamed; it's saying that privacyMode is a BooleanSetting, which it's not."}
{"msg": "I would appreciate it if you could refrain from using `stdbool.h`. We allow the header files of H2O to be included from C++ (which means that `bool` might be a C++ type), and therefore my preference is to not use `bool` in our code (but instead use `int` or `char` for the purpose) to avoid confusion."}
{"msg": "@danielbidala What happens if `searchScope` is not defined in `config_relation.yaml` ?"}
{"msg": "Just use the word \"veld\" instead of \"gebied\" here"}
{"msg": "This change (import org.shredzone.flatter4j.model.User;) does not seem relevant to this fix / commit."}
{"msg": "This should be a failure if we don't get the exact number of expected rules. You can use a constant if you don't want to update several lines any time you update the test rule strings."}
{"msg": "Why you duplicate it? The underlaying transport should live as long as the multiplexed one. And must be destroyed after protocol is destroyed. Duplicating the transport may lead to object references hold and maybe memory freeing problems. I think this property must hold a reference to it and not a copy. The copy can lead to memory freeing problems."}
{"msg": "`in.Status.Experiment.Phase`. we can omit `ChaosStatus`"}
{"msg": "I think you don't need the `... if '{}' in arg else arg` part - if the arg doesn't contain `{}`, `arg.replace('{}', ...)` will return the unchanged string anyways."}
{"msg": "need to update this command to use the name field instead of principal_id"}
{"msg": "nit: I can't help but think the privateTransactionHandler should be a base-class member ... every Priv Json RPC seems to need it..."}
{"msg": "Changing the default value for isClosed from TRUE to FALSE can have other repercussions. We might miss throwing error. Can you please confirm this change."}
{"msg": "Perhaps this would be more idiomatic as `ConfigFor(interface{}) (*PluginConfig, bool)`?"}
{"msg": "nit: We could import `APPLICATION_AMZ_JSON_1_1` from `constants.py` here."}
{"msg": "Should this not inherit from IMvxMainThreadDispatcher?"}
{"msg": "The iterator is not wrapped when the score mode is set to `COMPLETE_NO_SCORES` so you don't need to change this assertion anymore ?"}
{"msg": "IS_FIRST_PULL revision is better to use instance property, not static. When KieClient has only one instance, instance property is better. When KieClient has many instances(not possible), static is not good eitheir."}
{"msg": "Let's call this `share` and not `upload` - the user wants to share their flows, uploading is just the implementation of that. :)"}
{"msg": "I think `NoAuth` is a better name"}
{"msg": "This does create a minor bifurcation in how closing the InputWriter is done in success vs failure cases. Is there anyway to merge this with the success exit path? This is something that seems like it would be better as a function closure instead of method on the `$esapi.Name` type. Can the `es.Close` not be used instead of this method?"}
{"msg": "You are not passing in a `:params` key here."}
{"msg": "The parameter in the docstring should be fixed too. Actually, why don't you try to implement the other axis? It wouldn't be impossible to do if we use pandas UDF from a cursory look. We have enough time before the next release currently."}
{"msg": "Maybe it would make sense to move that to DecorateRootSpan? Currently it only has Azure stuff, but given the name of the method I feel like it would be semantically appropriate"}
{"msg": "Weird that we have to check for `s == nil` here.. I would instead have fixed the call stack to find out when this gets invoked with a nil server."}
{"msg": "Are you sure you want to do this? This will affect the working set block cache too, such that it'll now be tracking global free space. It throws off the fraction calculation."}
{"msg": "This change is not related to what this PR wanted to fix, but undefined behavior sanitizer warns without this parenthesis because `h2o__tokens + i` overflows."}
{"msg": "This is actually incorrect and should be the other way around. Going to fix this tomorrow. If `no_docstring_rgx == re.compile(\"\")` no function should be checked, since every function matches the pattern. If `no_docstring_rgx == re.compile(\"^$\")` all functions should be checked."}
{"msg": "Oh, so this test leaks DateTimeUtils offset? It would be safer to place the reset in an `@After` method to not cause side effects even if the test case fails."}
{"msg": "Kind of a nit-pick, but is there no way to solve this while still not rendering an empty div if `footerText` is empty? We could still use the `Row` to maintain the same layout but then only render the `Cell` for the pagination - I think it's possible to use specific classes to horizontally offset?"}
{"msg": "Perhaps note here that `--drive-use-created-date` takes precedence if both set?"}
{"msg": "Is there a need to replace the Index with a MasterIndex?"}
{"msg": "How much difference is there between sort and sort_by ?"}
{"msg": "Mongo is a hard dependency for Mongoid. Why do we need an if-statement to if it's defined? We should always use Mongo::QueryCache"}
{"msg": "moved to `errors.go` which is the only places `math/rand` is used in this package"}
{"msg": "This use is wrong, corrent is: `Shopsys\\FrameworkBundle\\Component\\Environment` It is the same in classes below"}
{"msg": "This is not really needed, the line added in `GridNodeConfiguration.java` is what really fixes the `remoteHost` regression."}
{"msg": "the whole idea was to display information on the plugin directory in case it was missing - need to add if...else... and display the plugin dir if it is configured (non empty) but cannot be found"}
{"msg": "Can you please set this as an error on the password view, rather than a toast, just to make sure that it is kept consistent. Check out a couple of lines below."}
{"msg": "Including both functions seems like overkill for this PR since only _is_internal_node is ever used. Keep them if you think they'll both be used in the future, but if not, the code will be easier to read if you collapse the logic into a single function."}
{"msg": "Do we need to set lastLogTerm_ to committedLogTerm when `lastLogId_ < committedLogId_`, on line 286"}
{"msg": "Can this be `null:false, default: ''` to avoid the nil vs blank issue?"}
{"msg": "Could we keep the original signatures as well, so we do not have to rewrite the method calls everywhere and add `null, null`? I think this could greatly reduce the changes needed in this patch"}
{"msg": "minor: to be consistent with other logs, either use \"cleaning up\" (preferred) or \"cleanup\"."}
{"msg": "`ReadConfig` is a global variable (from `gochecknoglobals`)"}
{"msg": "This is duplicated with `+build !cgo`?"}
{"msg": "Can we also add the length of the slice here? Some like `<binary> len %d`"}
{"msg": "Make this a member variable instead (move to header inside `class` and rename to `m_bUsingLocalPrefs`)."}
{"msg": "Generally I'd say we should factor this out into something more extensible (check an array of potentially skipped tests, for examples), but since we're likely to remove this soon for scheduled work I think this is fine. What do you think @daprahamian?"}
{"msg": "I think a \"string\" in Scapy's spirit (if such a thing exists) is actually a `bytes` object in Python 3 (see `Str*Field`s). So maybe `RandString._fix()` should return a `bytes` object. What do you think?"}
{"msg": "this need to be moved up after getting policy.."}
{"msg": "This was broken before as the name of the metadata table started with its type, not catalog."}
{"msg": "Maybe remake `VersionAsString()` function, so that that we would have build info in all places"}
{"msg": "This should probably say something other than SSL_peek?"}
{"msg": "Why do we need RawTransactions?"}
{"msg": "should not be this lessThan15MinAgo ?"}
{"msg": "It is not a \"perfect\" test, but: webOS 1.2 emulator says `probably`. webOS 3 emulator says \\``. webOS 4 emulator says \\``. Why did you remove `options.supportsDts`?"}
{"msg": "Maybe it should be `plugins.history` here instead of `listeners.X`, since we use those for listeners configured via `.ini` files?"}
{"msg": "Hmm, I also don't have a better idea here. As a small thing, could you make this `@team_page.present?` or similar to make the intent slightly more clear?"}
{"msg": "Without that check it would fail later (probably in the getDecryptingCipher method) but the error could be hard to make sense of."}
{"msg": "I don't think that this belongs in the host code. A host is pretty much unaware of what hypervisor is running it and I don't want them to be so coupled to their hypervisor."}
{"msg": "I'm here to tell you that this doesn't make sense because of the way it works. `setuptools.setup()` installs this only for setup-time and then discards those. But the problem is that it will not pick up a newer version because the older version is already in runtime and module cannot substitute itself. The proper place for adding build deps nowadays is `pyproject.toml`->`[build-system]`->`requires'."}
{"msg": "fakeConnectionManager -> mockConnectionManager. We probably should not use the `fake` anymore."}
{"msg": "no need in BigInt just m.Unwrap().Big().Bitlen() == 0"}
{"msg": "I'm curious why the table name is bound at compile time? Is it just to save the table create/drop overhead in a prepare-once-execute-many situation?"}
{"msg": "quick question, isn't ProcessJob used by all job types? Then why is JOB_ID not found?"}
{"msg": "I think the check should be `config.sync.fullSynchronization === false` - otherwise this will get triggered even when full sync is `true`."}
{"msg": "this should be controller-container-status"}
{"msg": "Actually, it looks like the entire `normalizeProxyConfiguration` function isn't needed anymore"}
{"msg": "How about `unless current_path == carts_path`?"}
{"msg": "Should sending an address into address error? Since the call isn't needed, and could be fixed easily."}
{"msg": "This is the wrong MDC; see MDCLoggingContext which imports `org.slf4j.MDC`"}
{"msg": "We avoid static method imports. Can you call `MetadataTableUtils.createMetadataTableInstance` instead?"}
{"msg": "I'm actually surprised this is valid Ruby. I thought you'd need either `delegate(...)` or `delegate \\ ...`."}
{"msg": "Maybe change it to `'Can't UPLOAD remote files when bundle: true is set'`?"}
{"msg": "What will happen if neither `rvm` nor `ruby` is present in the .travis.yml?"}
{"msg": "i have removed this line because whenever a video is played in AntennaPod this line was making play button invisible"}
{"msg": "Looks like this might be one of those \"promoted features\" where you can enable it by _either_ enabling the extension _or_ enabling the feature bit. If that is the case, I think this needs to be: `(device_extensions.vk_ext_scalar_block_layout == kEnabledByCreateinfo) || (enabled_features.core12.scalarBlockLayout == VK_TRUE)`."}
{"msg": "This is a definite improvement! Hardcoding nonzero is vastly better than hardcoding length. Even so, is there no way to determine the actual value of nonzero in a way that doesn't load the entire dataset?"}
{"msg": "do not print the payload since it might be corrupted, you can get the data with _debug.http.response_payload configuration property"}
{"msg": "maybe \"app init creates an copilot directory and a workspace file\"? since you validate for the file as well."}
{"msg": "Nit: Could rename this file from SabreEvent.php now that it's not for Sabre"}
{"msg": "This entire clause should now be removed. It was only relevant if `accountID` couldn't be parsed from `clientID`, which is now no longer needed."}
{"msg": "FTR: Unlike commonly known practice, `latest` in Ansible docs corresponds to the stable version, not to the latest state of the main Git branch. Is this your intention? Just checking..."}
{"msg": "Why do we have || CharInfo::UnknownCharSet here? I do not see it it in neighbouring statements. This is just for my understanding."}
{"msg": "couldn't we run this query whether there are observations or not?"}
{"msg": "This seemed broken to me. Why would browserify only check the (previously `cdn`, now) `bundle` example? And even so, the path is incorrect here. Fixing this is unrelated so should not go into this PR I feel. But when we fix this in master, perhaps that solves the reload issues that you experienced @hedgerh?"}
{"msg": "Can all the BaseFeePerGas methods that are added be removed? It's not needed for the bomb and not referenced anywhere else in this PR."}
{"msg": "3) Subscribe to the script change signal in `FlowMaster.__init__`. The event handler should call `self.masterq.put((\"script_change\", script))`. 4) Add a `handle_script_change` function, that once called, takes the script object and calls `script.reload()`."}
{"msg": "lets keep our \"testing framework\" header only if possible. since there is an `assert(0)` in there, it is intended to halt on the first test failure."}
{"msg": "What if you don't want to continue with the behavior, but you just want the deprecation to go away? Should we add `skip_after_action :discard_flash_if_xhr`?"}
{"msg": "change `accountNonceMap` to map[address.Address][]uint64"}
{"msg": "Does this mean all admins get the default batch size (which is 20) no matter the value of `-sync-batch-size`? It seems the command line flag doesn't do anything then does it?"}
{"msg": "Please move this to L3115 to group the code logically - all code for `feval` in one place."}
{"msg": "Perhaps the only test needed is to see if the socket is not an invalid socket? Is the >= 0 test necessary at this point?"}
{"msg": "@runcom says there is no need to use `selinux` here. `selinux` \"github.com/opencontainers/selinux/go-selinux\" The code should work fine without it."}
{"msg": "prefix it with azkaban. Maybe azkaban.server.schedule.enable_quartz?"}
{"msg": "It will be better to add contains check for key in hashAndFileNameToDep instead of null check over here. All of these should be inside that contains if case."}
{"msg": "The sender doesn't use `GetTipSet`, so please remove it from this interface."}
{"msg": ">PartitionFlagBiosGrubLegacy PartitionFlag = \"bios-grub\" [](start = 1, length = 55) I presume this is to fix a breaking change...and it's too late to fix the breaking change (since it already escaped into the world?)"}
{"msg": "I would also check whether or not this \"defaultParameters\" is null or empty to allow for people to omit it from the config file."}
{"msg": "I think event.Content is of type interface{}, so we may need %v here?"}
{"msg": "I'm wondering if a positive test case is needed here? Then we might compare the result DataFrame with a pre-created Koalas DataFrame."}
{"msg": "This makes me wonder if the TBufferTransport should have a size limit that is configurable, with a default of INT32_MAX, and then the test can make a smaller one like 4KB, and write 4KB and then one byte more, instead of using up 2GB of memory."}
{"msg": "If you use an enum for the streaming type, you wouldn't need to add each boolean as a separate attribute."}
{"msg": "can you check if you can use `sqlalchemy.exc.IntegrityError` instead?"}
{"msg": "Why we need to use recursive_mutex here?"}
{"msg": "The string \"DVN_3_0\" appears in `if (!SOURCE_DVN_3_0.equals(xmlr.getAttributeValue(null, \"source\"))) {` in ImportDDIServiceBean. It's not an exact match so I don't *think* this will break dataset import from DDI but I thought I'd at least mention it."}
{"msg": "Can you add docstring to this? Also, this might be a nit but I think `CompareCommits` or `CommitRange` might be a better name. What do you think?"}
{"msg": "is there any reason we are not adding this to companion as well?   There are no CORS concerns there, so adding probably shouldn't be a problem, no? **One question about the requestId;** Are the request Ids unique to each tus-js-client request, or are they unique to an upload instance instead?"}
{"msg": "Looks like each AppendHistoryNodes is its own transaction - what happens if `len(request.NewWorkflowNewEvents) == 5` but we only succeed in writing 3 of them? Will the system be able to pick up from there later? I'm _guessing_ the answer is related to the `ON CONFLICT` and `INSERT IGNORE` changes below? What does Cassandra do?"}
{"msg": "why are you replacing log here? it is defined above and contains EntryID and SPIFFEID"}
{"msg": "> Note: Non-headless tests (that run on selenium-webdriver) need to wire up to mocha reporter to collect all the results and report them. (See `test-webdriver.js`). But for other tests this can be skipped."}
{"msg": "Why do we returning `interface{}` here? Don't we have a predefined type for `ID`?"}
{"msg": "`lodash` shouldn't be grouped under WordPress dependencies"}
{"msg": "Not sure why you want to make the distinction between null and undefined? And also `null == undefined` anyway so I think you could simply have `!noteIds` here."}
{"msg": "if (typeof (opts.fee) !== 'undefined' || typeof (opts.feeSat) !=='undefined') {"}
{"msg": "I not sure we need to change this method's logic. Isn't no perms and invalid config?"}
{"msg": "While you're here, can you change the casing on this so it is unexported? `nextPlanNodeIDKey` instead."}
{"msg": "thanks for tidying all these up, as you can tell they've been used pretty arbitrarily in the past to just exclude things from bootstrap..."}
{"msg": "It fills me with endless sadness that we can't use Selenium's own `SessionId` here."}
{"msg": "You want \"current_min_count\""}
{"msg": "This doesn't look right. I think what you want here is `\\\\[([^\\\\]]+)\\\\]\\\\[[A-Za-z_][A-Za-z_.0-9]*]*\\\\]`."}
{"msg": "`TimeoutAfter` to be safe."}
{"msg": "The description of `load_time` here is different from the description below..is that intentional?"}
{"msg": "Actually it could also be a video playlist. But music is used more often."}
{"msg": "From the ticket: > I understand why a session ID would be silently omitted for implicit sessions, but what is the reasoning behind omitting it for explicit sessions instead of raising a logic error to the user? So what this change is doing is \"silently omitting\" the session if its an unacknowledged write. I think we want to actually return an error in this case."}
{"msg": "You can simplify this by doing: return (EndTime - StartTime) * 60 / PointsAcrossPeak;"}
{"msg": "I already set up cd10 for \"inventory_version in google analytics. I've added cd11 for Boltdir Type now"}
{"msg": "@henrikhodne We are lazily skipping `jruby-*` here (assuming that JRuby all of a sudden start using these version numbers)."}
{"msg": "It seems like it's too big now: can we remove signal_frame_extra_size from line 537? That should only be needed when placing xstate separately. It seems like it isn't needed at all for pending? Also, if we have special heap align forward for us, we don't need this align here either."}
{"msg": "Just double checked the `-in` operator. It's PS3 only, so we might want to change `$_ -in $allowedArgs` to `$allowedArgs -contains $_`"}
{"msg": "There is a very similar line `lowType = expr.Low.Type().(*types.Basic)` a few lines above this line. Can you change that in the same way?"}
{"msg": "if I give a non-existent script, then I don't get an errors. I would have expected the `copy` method to raise, but maybe `net-sftp` silently exits?"}
{"msg": "The super impl Spliterator.getComparator() throws an IllegalStateException by default. Is it really necessary to return null? If null is used somewhere it will throw a NPE, which is roughly the same as throwing an IllegalStateException. I'm just curious - I'm sure there is a reason!"}
{"msg": "What do you think of renaming this file to `stack.go` or `cfn_stack.go`? `common.go`/`util.go` don't provide us anything descriptive about the contents of the file."}
{"msg": "We called `t._1.equals(...)` where `t._1` potentially could be `null`."}
{"msg": "would be helpful to make these a package level constant so they are accessible to the user. similar to Service Name. Not directly related note, v2 SDK ServiceName should be renamed to ServiceEndpointPrefix."}
{"msg": "Added a validator for _root_, which is now added automatically since the schema used here declares _root_."}
{"msg": "The other properties are `file-open-cost`, not `open-file-cost`."}
{"msg": "This is incomplete I think (at least source_address and ip_address are missing)"}
{"msg": "We have a `stop` method here, we should probably be calling that instead of just exiting. There could be important resources to close or cleanup nicely now or in the future."}
{"msg": "`NotFound` is a generic error code derived from the HTTP response message's status code, and can be returned for any S3 operation that responds with a 404 status code and no other error code present. Due to this the constant `ErrCodeBucketNotFound`. In addition, these constants are generated based on the API model defined by Amazon S3, modifications to the file directly will be lost during regeneration of the API. With that said, we are looking at ways to work with the Amazon S3 team to better represent this error in a way that is more easily consumed."}
{"msg": "This is currently a db.tar.gz with just one .sql file in it. It might be worth another test (or maybe I'll find one) that has more than one sql file in it."}
{"msg": "It should be `IsNullOrWhitespace` I believe, since we're going to trim the value afterwards (and I just realized the other configuration keys have the same issue)"}
{"msg": "it is confusing to return ID as Name"}
{"msg": "Keys.COMMAND seems to be an alias to Keys.META. That isn't mentioned?"}
{"msg": "You can move this import down to before line 8 (import org.junit.Test;)."}
{"msg": "It's okay to add the `scanner_index_id` here. But we still should keep the `inventory_index_id` reference because it will help the user to know right away, which inventory the violation is coming from, without having to do another lookup."}
{"msg": "this shouldn't be beforeClickOn, but rather beforeSubmit? and added to WebDriverEventListener. Since submit does not synthesize the 'click' events, this isn't accurate."}
{"msg": "I think Rails complains about the `null: false` part if we ever decide to roll this migration back. Might need to split this up into separate `up/down` methods to handle that."}
{"msg": "I don't think we need this line. You're logging in `waitForContainerTransition()` anyway"}
{"msg": "Shouldn't the `:attribute` placeholder appear?"}
{"msg": "Could you update this to `structLike` instead of `arg`?"}
{"msg": "Think you need to keep `RawWrite` around as obsolete until NLog6 (Property that just assigns `ForceTraceWriteLine`)"}
{"msg": "maybe should rename this to be `run_status_sensor_definition.py`"}
{"msg": "I know this is a port from the previous PR, but I am wondering if we can take the chance to improve the naming? `--vpc-host-project-id` ?"}
{"msg": "Let's maybe be nice and `unlinkat()` here in the interest of having `/run` be less littered. Or in addition/alternatively, make the file `/run/ostree/initramfs-mount-var` since we already made `/run/ostree/` for the deployment staging bits."}
{"msg": "we should probably deprecate (and display a warning) the misspelled keyword arg here rather than removing it... and then add the new one. This changes a public API and will break any code that is currently using the misspelled version."}
{"msg": "But won't we do case-insensitive matching for all the drivers? For example, we will get the revision field case-insensitively. Let's make this case-sensitive. I think the way the mongo driver works, by lowercasing field names, will be OK with that."}
{"msg": ".NET Framework: Fallback to `DD_INTEGRATIONS` if `DD_DOTNET_TRACER_HOME` was not set."}
{"msg": "Can you use `authority, _, path = rest.partition(b\"/\")` here? That should make stuff a bit cleaner."}
{"msg": "Please add \"Array\" back, right now it's not a proper sentence."}
{"msg": "There may be another bug, it looks like we're already in a `if telemetryConfig.Enable` block at this point, maybe that block should be unnested?"}
{"msg": "This... looks like it plainly didn't work before? Good catch. I would suggest we change the logic here to 1. Check if `self.headers[\"content_type\"].startswith(\"multipart/form-data\")`, and if that's not the case, add a content-type header with a random (?) boundary. The point here is that if someone assigns to `.multipart_form = ` in their addon, the header should be updated accordingly if the request was not multipart before. 2. *After* that, call `self.content = multipart.encode(self.headers, value)` (as we do right now)"}
{"msg": "Wouldn't it be enough to change the condition in the for loop to `link_state != IBL_UNLINKED`?"}
{"msg": "We can just include the public UDPv4TransportDescriptor header here ..."}
{"msg": "Is this because you don't have % on your version of Slot? I don't really care either way."}
{"msg": "Please use var declaration for variables you are declaring. I could not find one for userInjectedExpandableRowHeaderColDef and finalExpandableRowHeaderColDef. Also code styling in the if block needs to be corrected."}
{"msg": "If cachedLibPath > 200 bytes, it will overflow errString."}
{"msg": "Talked this through with a few more folks. I think it would be better to flag prohibited attributes for review, instead of outright failing them. ARIA labels are used fairly liberally. We don't really know if they are actually needed whenever they are used."}
{"msg": "We send the `instanceUrl` encrypted, but never bothered to decrypt it. I guess it was working because we never did any org split testing where the `instanceUrl` actually changes."}
{"msg": "Can this be moved to QbftBlockHeaderFunctions class as it is only used for qbft"}
{"msg": "I'm not sure where this should go, but one of the `get_extents` methods should mention that `range_type` can be `'data'` or `'combined'` (are there others?). I found out those are the two expected values by searching the code..."}
{"msg": "I see that CI found a couple test hangs, maybe your `TogglePrefetcher` change below wasn't enough and this still needs to be a `go` invocation for some reason?"}
{"msg": "I have no explanation for why this test wasn't erroring before... There are two applicable nodes in this tree, one passes, the other fails."}
{"msg": "Remove the \"rm\" from the end of \"HAVE_CONFIG_H\""}
{"msg": "Is `vertigo` another name for Vertica databases?"}
{"msg": "That doesn't do the right thing - it strips any of the characters m, a, i, l, t, o and :. It'd probably be cleaner to do this before converting the URL to a string."}
{"msg": "hmmm did this pass spotless check? I don't think we typically use wildcard imports"}
{"msg": "Do we need to internalize net.sourceforge.pmd.lang.java.ast.JavaParserConstants on master, so that we can rename it?"}
{"msg": "What do you think of a name like azkaban.server.logging.kafka.brokerList? This way the name signals that this is a server config."}
{"msg": "Maybe change into `return _concurrentWrites ?? PlatformDetector.SupportsSharableMutex` ?"}
{"msg": "Here `global.VERDACCIO_API_URL` I'd use something different as `global.TEST_VERDACCIO_API_URL` then when you search by `VERDACCIO_API_URL` we don't confuse with `window.VERDACCIO_API_URL`"}
{"msg": "Be careful memory leaks. memory leaks occur when getters.getAliasProp == nullptr . right?"}
{"msg": "I would suggest to have plurals in the api `\"/chunks/{address}\"`"}
{"msg": "Let's just not do this. We don't have LabelAtoms.O17 here. This is just a short-cut to avoid needing to write out a more verbose function like: 5O\" - 5O i.e. Add 5 x 17O atoms to replace 5 x 16O atoms. This was the original implementation in Skyline before I added the checkboxes to denote simply labeling all atoms in the amino acid."}
{"msg": "nit: `Set` (and swap `forEach`s for `for (const i of CONNECTION_EVENTS)`)"}
{"msg": "Not sure how particularly useful these exceptions are. Seem to be exceptions required in copying and pasting the EndpointResolver over. I wonder if it makes sense to move these out of ``exceptions.py``"}
{"msg": "Overall LGTM, one nit is that I think `partitionFields` here would be good to be renamed so that it's easy to tell it's just for collision detection. Also I wonder if we want to do this check for other transformations too (e.g. bucket, and record numBuckets in the string), so that we might be able to combine `fields` and `partitionFields` into potentially something like a LinkedHashMap?"}
{"msg": "Please, use the default padding here."}
{"msg": "let's actually use the direct include: `require('../core/error').MongoError;`"}
{"msg": ":bike: :derelict_house: , but maybe the default option should be `multipleResults: false` or `combineMultipleResults: false`? i feel like `replaceResultInFormWithNew` is very verbose but also doesn't immediately clarify what it's for."}
{"msg": "* This will defer until the function returns. Are you sure this won't happen multiple times. * Alternatively, why is the deadline timer not defined outside the outer loop? * More generally, why are we looping in the first place instead of reading one frame and returning?"}
{"msg": "Need to remove the surface destroy listener (and `wl_list_init` it so that `touch_point_destroy` still works)"}
{"msg": "If we want to expose this for FFI use in the standard library, it needs to get either a `pony_` or `ponyint_` prefix to its name, for cleanliness of the function namespace. `pony_` means it is a public API meant for use by third party code, whereas `ponyint_` means it is internal. Unless there is a good reason to make it public, we should prefer to keep it internal because public functions require us to treat any changes to them as breaking changes in Pony. So, this function should end up named `ponyint_address_length`, or something else with that prefix."}
{"msg": "Fuse for shared volumes is a px specific implementation. libopenstorage doesn't know about it, right? So should this be called DeviceVirtualMount (or something similar) instead?"}
{"msg": "I think these assertions want to be `.to.not.exist` which would pass for `null` or `undefined`"}
{"msg": "order wrong for \"outgoing and incoming\""}
{"msg": "We know it's a boolean and it's in the MemoryCircuitBreaker, why not simply call it `enabled` (like many other Solr plugins do)?"}
{"msg": "Should team be a \"feature\" that can be \"included\" or a type? In code it seems to me that a `team` flag makes sense."}
{"msg": "`upsertHistoryTreeQuery` is a better name for this query now. Is it ok to change history?"}
{"msg": "Keep the mpi.h include, just move it to after adios2.h and guard with the ifdef. Otherwise everything else looks good."}
{"msg": "Shouldn't this be something like `rootmountmode` to fit the pattern of the other fields' serialized representations?"}
{"msg": "Storing a reference to source data isn't the best choice. Maybe you can find a different way (without storing the reference) to save removed data?"}
{"msg": "Is the tutorial going to move to the new Trafodion website or will it stay on the Confluence wiki? (Check with Gunnar.)"}
{"msg": "maybe call it `fromRetryTaskV2Failure`"}
{"msg": "why not ? maybe another phpstan plugin"}
{"msg": "Does this resolve the scenario when the user-triggered forseti process is running, and it would be killed by the cron job restarting the server?"}
{"msg": "This should be grouped together with the import of \"go.opentelemetry.io/{api/core,sdk/export}\" below."}
{"msg": "What's the impact to people upgrading to the new version? If they don't change their file names, they'll suddenly be broken. While I agree that your naming makes more intuitive sense, I think we need to maintain backwards compatibility. Please choose a new rules file name for the new scanner and keep ke_rules.yaml for the existing version scanner."}
{"msg": "Was this an intentional deletion? Why not just allow overwrite of `deploy_mode`?"}
{"msg": "Does this mean that `kinto_redis` is required to run tests?"}
{"msg": "will this ensure the indexes for ordered writes as well?"}
{"msg": "Put `BoolArray` first?"}
{"msg": "Does the errors returned from these controllers indicate which controller threw the error? If not, there might be some value in making the \"CustomControllers\" type a `map[string]func(ctx context.Context, sc *server.Context) error` with the name of the controller as the key and include the key in this error string. This would apply for below as well."}
{"msg": "You are opening a door to race-condition-hell by returning an unprotected dictionary. I recommend that you return `IReadOnlyDictionary` that only works on the platforms where it is known."}
{"msg": "also seems we should not skip this test"}
{"msg": "This is mostly for my understanding: is `DeleteFile[] deletes` a mandatory builder param now for file scan tasks? If not, from a v1 / v2 compatibility standpoint would it make sense to add an overloaded constructor?"}
{"msg": "Can the error message reflect the purpose of the query more closely? Something like \"Error fetching executions queued for a long time\""}
{"msg": "Are you making it so startup script HAS to be in sources?"}
{"msg": "remember that logger methods will do string interpolation automatically anyway, so you should be able to do `logger.error('message %s', var, exc_info=True)`"}
{"msg": "Perhaps rename to `render_service_args_struct`?"}
{"msg": "Since this is a recurring theme, would it make sense to have an ioencode interface for it like `ioencode_rank()` that takes an integer rank like before?"}
{"msg": "Is it a concern that we initialize these fields irrespective of whether resources like cgroup/volumes are enabled or not?"}
{"msg": "Wouldn't this be the first panic in yarpc? What do we do for transport validation? Return errors?"}
{"msg": "For the record, class-string is now suported by PHPStorm. Don't know if it's worth moving it to `@phpstan-param` then."}
{"msg": "This might be very confusing. Maybe `resource-tags`? I"}
{"msg": "We may use `_pair` to wrap `dilation`."}
{"msg": "Ohhhh I see, this change was previously having *no effect* - I had thought you meant we were doing something like bind mounting the initramfs' `/etc` as the real `/etc` but we'd clearly notice if that happened, we'd be missing all sorts of config files etc."}
{"msg": "I think this needs a more specific name, like `sequenceNumberOverride`"}
{"msg": "Ought we just raise an exception if the adapter isn't defined?"}
{"msg": "Should this have been removed? We still set the region to \"aws-global\" in v3model.go#L115"}
{"msg": "You could shorten this to `qs or None`. But why not just build a dict of parameters we want to include and only add `querystring` if there's something here, similar to the way you do in the error view?"}
{"msg": "This is probably more digits than needed - perhaps rename OneOverK0 to IonMobility instead"}
{"msg": "End with 'Method', so: - FlattenedAsyncCallSettingsMethod - FlattenedAsyncCancellationTokenMethod"}
{"msg": "Use `FullBlock`, it comes from the same package."}
{"msg": "Error return value of `s.idx.BuildIndex` is not checked"}
{"msg": "Just spotted the `local` on here; that shouldn't be needed - no reason to limit this config to env vars only"}
{"msg": "I had some weird issues when importing ``from .. import util`` getting the wrong utilities, hence I did this."}
{"msg": "should this state that we're falling back to `:acceptable_exit_codes`?"}
{"msg": "Why was it necessary to add this check against `this.servers.size`?"}
{"msg": "This tests for < 0 but the error message says it must be > 0. The `if` should probably be `<=` to match the message."}
{"msg": "/DispatcherStatistics ? /statistics is a bit confusing with /stats"}
{"msg": "nit: Wondering if we should simply filter on `\"tail: unrecognized file system type\"`, or is the type identifier `0x794c7630` always the same?"}
{"msg": "I think the goal of using `fake-cluster-id` was to make it sure clear that this is a fake cluster, replacing this with UUID only now makes these clusters look very similar to real ones which can cause problems.. any reason why we didn't go for the original recommendation from slack thread of `fake-cluster-UUID` @twiest"}
{"msg": "I need to spruce up my `mypy` knowledge but I think this is incorrect. Using `T_Node` twice makes it so that both should be the same type. I think this would be better: `Tuple[Optional[T_Node], Optional[nodes.NodeNG ]]`. It might even better to do: `Union[Tuple[None, None]. Tuple[T_Node, nodes.NodeNG ]]` as that shows that `None` should always pair with `None`"}
{"msg": "I'm not against adding a kill event, but we need to do it properly, please. That means listing it in events.py, adding docs for it, and so forth."}
{"msg": "I originally factored out these functions from date_input. Currently, they are only used in datepicker, but they seemed more general purpose. If you decide we should keep the current date_input API (in case anyone is using it directly), then I think it makes sense to factor these out in order to be able to maintain consistency, but otherwise they could be inlined into datepicker.jsx if you prefer."}
{"msg": "I think this should never happen and should return an error also. Having `WorkflowBackoffTimerTask` with `UNSPECIFIED` type looks weird."}
{"msg": "Would it be good practice to add a nonce in here (that's also stored in the config), so it's harder to tell when passwords are being reused?"}
{"msg": "For consistency, the return type could be `TelemetryDataDto` here. This would be more consistent with the other REST API interfaces. From a functional perspective, the current code is perfectly fine though."}
{"msg": "I've never seen this `boost::make_shared`...why use it instead of `reset`?"}
{"msg": "if its optional, move it to last item an use JsonRpcUrl? url = null"}
{"msg": "I think we can now remove this test case since we can ensure that multiple calls to `Fetch` will double the interval on each call"}
{"msg": "The Email field is not translated into Russian, and into any other. It's kind of a \"standard\" word. Therefore, we may face the fact that you have to create files with exceptions for all languages. @caouecs, what do you say?"}
{"msg": "I think this warning message is the same as above one. Anyway, it's fine to keep it."}
{"msg": "`configs` isn't very descriptive, especially when there are other config-ish things like `generatorConfigs`."}
{"msg": "we should keep the camel case format - selfServe"}
{"msg": "consider the alias `compute` in case this ever references other apis."}
{"msg": "It probably doesn't matter in practice, but we're not supposed to access a map without holding a lock. This is why I have suggested using `m.Path(\"devices\")` earlier -- it takes a lock before accessing m.paths. Alternatively, you can leave this code as is but add taking a lock (same as `Path()`)."}
{"msg": "Since `ga` is an acronym here, we should rename the generated actions and selectors to adhere to our naming conventions as it will no longer be capitalized properly. See below for how this is already done for the amp container ID settings. We should add `GA` to our list of checked acronyms as well in `packages/eslint-plugin/rules/acronym-case.js`."}
{"msg": "uploading_finished and upload_meta_data_extracted can fire very quickly after another, and there is not much difference in the Assembly status that's useful to us. I kept only the Assembly fetch after metadata is extracted, which ensures that we'll have all the correct `uploads.*.meta` properties on the client side."}
{"msg": "`DbCapacity` -> `DBCapacity`"}
{"msg": "Does `sudo` required for `darwin` only? Don't we need it for `linux` too?"}
{"msg": "Although this is needed for `getSnapshotBeforeUpdate` this also fixes a bug with `componentDidUpdate`. During rendering, the `state` variable is mutated. This has the consequence, that `previousState` would never hold the previous state, but the most current one."}
{"msg": "I understand why `xhr = null`, but I think adding `error = null` implies that this method should work even if we don't pass the `error` argument. Should we remove it?"}
{"msg": "changed bc we are using the `error` var below"}
{"msg": "@nghialv btw, perhaps was this method originally created for copying the repo root to the given `dest` as a subdirectory?"}
{"msg": "The name `errors` is a bit mis-leading -- usually I'd expect a field called `errors` to be an array of errors but here it's just a count. And it's not a count of _all_ errors -- it's a count only of some errors."}
{"msg": "`AccountMaxVersionPrefix` is a global variable (from `gochecknoglobals`)"}
{"msg": "I see it is not part of this PR but I somehow overlooked it before. Can you use same import aliases as we use everywhere in the project: `apicommon` -> `commonpb` `apireplication` -> `replicationpb` `\"go.temporal.io/api/enums/v1\"` -> `enumspb \"go.temporal.io/api/enums/v1\"`"}
{"msg": "Why make a new file for this? I think keeping everything related to the scheduler in a single file increases readability. Especially when there is no API-boundary in between. Functions like `getCoroutine` and `yield` also live in the normal scheduler files so it doesn't seem consistent."}
{"msg": "Removing since all of the domain-neutral testing will be done in the new `Samples.MultiDomainHost.Runner` app"}
{"msg": "Using sync.Map(key: nodename; value: state) instead of this \"EdgeNodes\" string slice here would be much better. Reasons: 1. Using sync.Map makes the time complexity of function UpdateEdgeNode and IsEdgeNode O(1), while using string slice with for loop makes it O(n). 2. Later we could be checking node state whether it's \"ready\" or still \"not ready\" by directly comparing \"value\" of sync.Map and doing the node state updating."}
{"msg": "Why did you remove this spec?"}
{"msg": "The vendor prefix is still being used on Chromium based browsers like Edge Chromium and Chrome. Did you mean to remove this?"}
{"msg": "Hit a flake here where I think there may have been some output to stderr that got mixed in with the output from Stdout. Hence switching to `Output()`, which does also capture stderr as `err.Stderr`"}
{"msg": "Is there any official CUDA API called cuMemcpy2D_v2?"}
{"msg": "Can you please move this interface as class in common Constants file in az-core module?"}
{"msg": "Why not TempDir?"}
{"msg": "IMvxFormsView -> IMvxElement is a breaking change, isn't it?"}
{"msg": "Please apply same changes as for Payment"}
{"msg": "This should only be used in the `ScrollEffect` component, as you have in the `DashboardMainApp` below  "}
{"msg": "I'd call it `g.auth_token`, just to make it more clear"}
{"msg": "Shouldn't we use `:branchname` here? Or just `:branch`?"}
{"msg": "@eddynaka Looks like the same block more or less 4 times, should we have a helper method? private void AddOrReplaceAttribute or something?"}
{"msg": "note that `balance` does not necessarily fit into `int64`, especially with the new bzz token. so you might want to avoid the `int64` conversion step using `big.NewFloat(0).SetInt(balance).Float64()`."}
{"msg": "lets leave out the `-S` ?"}
{"msg": "How about, instead of reading the param every time, just add a class member variable to hold the value of the flag, and just set it once during `LayerSetUp`?"}
{"msg": "@aokolnychyi, shouldn't this check whether the operation is a delete? If this is invoked by `DELETE FROM` then we don't need to validate conflicting deletes."}
{"msg": "`Tags.AppSecEnabled` should probably move to `Metrics.AppSecEnabled` I guess?"}
{"msg": "What happens if you remove this? Can't you still initialize this atomic_file class, since it's just AtomicLocalFile with an additional method (move_to_final_destination)?"}
{"msg": "As previously discussed in #1944 it's not safe to remove IC like this as it will break every language that still has a `%{ic}` marker in the translation."}
{"msg": "I believe these rules will be enforced both (1) on egress from a local workload, and (2) on ingress **to** a local workload. Right? I understand that we definitely want (1), but do we really want to enforce (2) as well?"}
{"msg": "`mPluginLoader` is nullptr in static plugins, which causes segmentation faults"}
{"msg": "Why not make this a subclass of `MessagingException` so we don't need to change all `throws` clause?"}
{"msg": "it should instead be `from .hmac_drbg import DRBG` also, please put it at the bottom of the imports (PEP 8 order), so near line 36"}
{"msg": "I would rather recommend using 'Wird hochgeladen' since the imperative form of 'Lade hoch' confuses me whether this is an action I need to do or whether it's an action that Uppy is currently doing. Just my two cents."}
{"msg": "if we are removing this, is it useful to have the `isGetMoreError` message below? If that's not required, can we also remove the `mongoErrorContextSymbol` outright?"}
{"msg": "@tofumatt now that I see this in context, we're now resetting 2/3 of the keys in the `NewComponent` state - the other being `error`. It seems that `error` should probably also be reset - essentially resetting all of the component state when the date range changes. What do you think? cc: @felixarntz @adamsilverstein"}
{"msg": "Better to just do `const err = yield User.bulkWrite(ops).then(() => null, err => err);` so you don't need to write out the whole `try/catch` block."}
{"msg": "`action.ExecutionDataGas = 100`"}
{"msg": "Do we need the forXDP parameter in runBpfUnitTest? If not, I think better to revert in order to save a few changes."}
{"msg": "How is this new interface different from existing `validateProxyUser` method? If I understand correctly the `proxyUser` parameter is essentially a group and the method should verify if `realUser` belongs to it."}
{"msg": "Can you expand the warning slightly \"Your password contains leading/trailing whitespace - in previous versions of rclone this was stripped\" Just so users know they might have to type their password without a leading space."}
{"msg": "Are these values expected to change over time? Why not inject these values in ECS backend instead of agent doing it?"}
{"msg": "!txReceipts[i].Removed and We can check it for first item outside of for loop, we don't expect mixed batches"}
{"msg": "We can't unfortunately change any of our old flags :( it'd be a breaking change. Instead, we can keep both `githubURLFlag` and `repoURLFlag` and make the description of `githubURLFlagDescription` as \"(Deprecated) Use --url instead. GitHub respository URL for your service.\" It would be even better if we can make `githubURLFlag` as hidden but keep in the command. This way old commands will still work with `--github-url` but it won't appear anymore in the help menu."}
{"msg": "One thing we can do in a follow up is use the shorthand calls, so You can just call `aSelection.unselect()` instead of calling the more verbose `execute()`. The fact that you have to check if the action is available sort of sucks though."}
{"msg": "Why when current user is owner but still check access? Should we use `else if` here?"}
{"msg": "I think this is not the best way to handle this problem. This way every relative path will be converted to absolute path. What if the user would like to move his config directory to a different directory?"}
{"msg": "Why is CircularJSON imported here? It is never used in this file."}
{"msg": "Solr dependency was downgraded?"}
{"msg": "or should we just autoload everything in `lib` ?"}
{"msg": "Prefer `Stream.anyMatch` instead of iterating over all slots."}
{"msg": "Initialize `needs_reshape_` with true and call `Reshape` method"}
{"msg": "This is a _very_ complicated line. I'm not a fan of ternaries to begin with (although, I allow them in very simple situations), but this ternary has compound conditionals and would really need to be broken up. That said: if I'm reading this right, it sounds like this logic can make it where this lambda (which is called `RANDOM_ORDERING`) can make it not random and basically do the opposite of what it says. In general, it's good to avoid making methods or lambdas do the opposite of what they say."}
{"msg": "Why do we have that extra \"ENGINE-16002 Exception while closing command context:\" now? Is that done intentionally by us or where does that now come from?"}
{"msg": "don't use `init` function (from `gochecknoinits`)"}
{"msg": "You are fixing the crash problem, and you have fixed it, so it won't crash anymore. So `crash_test` is not a proper name."}
{"msg": "I think you meant, self.floor_thr = 0"}
{"msg": "With this commit, `MemoryUnlimited` is defined as a `unit64`, so I think you can drop the redundant cast from this line (and the later lines which also have `uint64(configs.MemoryUnlimited)`."}
{"msg": "`props.totalFileCount < props.maxNumberOfFiles` makes the intent a bit more clear I think. And a check to see if maxNumberOfFiles even exists?"}
{"msg": "`epochNum` is a global variable (from `gochecknoglobals`)"}
{"msg": "can you use either `connectID` or `ConnectID` i would preffer `connectID`"}
{"msg": "should we consider add deprecated annotation here?"}
{"msg": "Why can't the implementor get the username from the config?"}
{"msg": "@alastair, because the `insertId` for two listens with different metadata and same ts was the same, only one of them would get written into BQ. A question is what would be the ideal way to write tests for stuff like this, so that this doesn't break again?"}
{"msg": "is this needed? 10 is already the default"}
{"msg": "One day we can try to allow the user to specify font sizes in something other than points. For now this is fine though..."}
{"msg": "It feels like this will break some stuff, but let it break. We need \"text\" version anyway."}
{"msg": "Here are two things I wonder: First, would it make sense to replace the TRUE here with \"leftExpr->getValueId().getType().supportsSQLnull() && rightExpr->getValueId().getType().supportsSQLnull()\". I'm not sure we have optimizations elsewhere that set the \"special nulls\" semantics back to FALSE if one of the operands it not nullable. Second, I wonder whether we have bugs elsewhere in the code that may not check for the \"special nulls\" semantics. For example, hash and merge joins probably can't use such predicates as equi-join predicates - one of the reasons for the optimization above. When I look at method ItemExpr::isAnEquiJoinPredicate() in core/sql/optimizer/OptItemExpr.cpp, I don't see a check for that. You have an example with a NULL value that is working, so hopefully this is not an issue, but I'm not sure how and why it works."}
{"msg": "This will cause someone writing a schema field like `inf:string` to get a pretty confusing error? If they intended to use `inf` as short for `information` or whatever :) Might it be better to keep it as `Identifier` and explicitly recognize the few identifiers we care about only when parsing values (not while parsing field names)?"}
{"msg": "I don't think this is going to work. We need to get the actual assembly of the app project. @johnnywebb thoughts?"}
{"msg": "validate() will be called by either V1 or V2"}
{"msg": "@AskAlexSharov @tjayrush , I'm still feeling uncomfortable with this change: - because it works by accident. For example in next lines `tx` object used as: `ReadBlockByNumber(tx)`. If you go inside `ReadBlockByNumber` you can find `!errors.Is(err, ethdb.ErrKeyNotFound)` - but ethdb.Tx doesn't return this error - and it satisfy `DatabaseReader` by accident - (I faced this problem last week - when passed Tx to place which expected Db - and I promised to change tx API - rename Get to GetOne or even remove the method). - we can merge this PR if it doesn't break things and solve problem of localDb use of RPCDaemon. But I will make PR now which will allow open Read tx by TxDb/ObjectDb - and will ask you to use it. Then will take a look how hard to change LmdbTx to not satisfy rawdb.DatabaseReader interface."}
{"msg": "Do we want to continue on logging the `dumpedBody`, if an error was thrown? It is probably an empty string. This would make the log after this one pretty much useless."}
{"msg": "This will make other pods that run antctl will also connect its localhost? Maybe only do it when it's in antrea-agent and antrea-controller"}
{"msg": "The corresponding action for this key needs to be removed as well, along with any unused translations."}
{"msg": "Why do we need this flag? can this be detected if the table is bucketed/partitioned and enabled/disabled automatically? Is this for backwards compatibility?"}
{"msg": "suggestion to add: An soc is a chunks whose address is derived of (...)"}
{"msg": "It doesn't make sense. if we are going to have the profile page where the user can change the password and he / she is already logged in ... I do not need to register a new username. only: new password..confirm new password..something similar...and \"USERNAME_ALREADY_REGISTERED\" only if I have a register page..are we going to have? We need to talk about it."}
{"msg": "not a great fan of this change - maybe worth splitting into CommitTree() and CloseBlock(long blockNumber)?"}
{"msg": "Ugh, if we're going to make a breaking change, I'd like this to be moved to ConnectionContext."}
{"msg": "I was planning to add it as a common option, but there is a cyclic import for the rc & fs libs. Thoughts on avoiding it or should I remove this for now?"}
{"msg": "I don't understand why you want to populate the storage class in this case, if the S3 docs say they won't populate the header in this case?"}
{"msg": "Should the last sentence be `If no region was found` rather than `specified`?"}
{"msg": "How about `ApplicationKindFromConfigKind`? And I think this function should be better in the config package. The reason is `config` package can import and refer things from the model package but not vice versa."}
{"msg": "I believe it's misleading name for the condition. I prefer \"element_to_be_disable\" We can have a condition, when element is enabled but we can't click it, because another element overlays above it. So, If we use \"unclickable\" we might mislead people, who use that condition to verify if element can be clicked"}
{"msg": "Same here. Should this be pipeline YAML file? Like `MarshalPipelineManifest`"}
{"msg": "Is there a reason you're not using `self._die(\"The file {} ...\")` here?"}
{"msg": "I think we'll want @rickmanelius (or somebody) to go through all the help and make it more accessible. Probably later in the cycle. But \"Run a command in an app container\" doesn't do it for me :)"}
{"msg": "This is a bit of a throwaway field in the xunit output, it doesn't impact anything on EVG, should we just name it `integration` now?"}
{"msg": "I don't think we need to necessarily check if that returned true or not, we should just remove the shutdown hook. Since nothing would check or do anything with this flag anyways."}
{"msg": "We should add an additional call to Recv() somewhere after here that we assert returns io.EOF."}
{"msg": "Would it be appropriate for this to be a `MongoStreamClosedError`?"}
{"msg": "The `?` is unnecessary since `Assert.Single` will fail if it can't find the stop event."}
{"msg": "What about providers that don't have a reliable location? Do they return null?"}
{"msg": "I might not be thinking about things right, but would it make sense for a MetricProcessor to have a handle on the ParentProvider kinda like how we do for traces? That way instead of calling `SetGetMetricFunction(this.Collect)` in the MeterProviderSdk you'd have a handle on the provider to call `Collect` directly."}
{"msg": "nit: If we want to squeeze out a few more milliseconds from the startup, we may actually be able to remove this line (`wait_for_port_open(PORT_DYNAMODB_BACKEND, http_path=\"/\", ...` should already be sufficient to ensure that the service is up and responding to HTTP requests). Thoughts?"}
{"msg": "I am not certain if this should be 0 or 7 here. I think a basefee under 7 is pathological"}
{"msg": "Think this needs to go right below line 91. `parseResponse` can return `null` (line 133), which will cause this future to never complete."}
{"msg": "Compute `(time_forward + 1e-3) * 1e3 / loop_num` ahead."}
{"msg": "To make it more clear, `fill=self.num_classes`."}
{"msg": "Nit: \"ByteSize estimates the size in bytes of the message for the purpose of restricting batch sizes.\""}
{"msg": "is it safe for us to use the `blob.type?.length` optional chaining with IE11 support? @goto-bus-stop"}
{"msg": "This should not be needed. 1) all 1.1 promoted extensions are marked as enabled when a 1.1 device is created (which happens iff both physical device support and apiVersion are set to 1.1) 2) The KHR and non-KHR versions of the bits are aliases of each other, so no different set is required."}
{"msg": "Turns out my previous fix of doing `!dom.hasAttribute('value')` is not a good one as it leads to all input values always being updated. The new fix only updates it, despite `dom.value === props.value` when the value is `0` for progress elements."}
{"msg": "Is `WHERE` should `Language` param ?"}
{"msg": "ps - first letter from preview, when we move it into public it will not be relevant. my suggestion is spmd or ds(distributed)"}
{"msg": "@reyang when exponentialhistogram arrives, we won't have any bits left for it.. unless we take Summary or make this 16 bits instead of current 8 bytes"}
{"msg": "Could you add an assertion to make sure the `IncludeAllInstances` parameter is actually set and passed to the request?"}
{"msg": "We should never skip unit tests, but instead fix them. Look at `pytest.raises` for cases where we expect an exception."}
{"msg": "Could we just set the list of header modification commands to `req->overrides` and apply them only when the request is sent upstream in lib/core/proxy.c? The reason I ask is because an upstream server (accessed using the modified headers) might return 399. In such case, the request would be delegated to the next handler. I think that the headers of the original request should be passed to the next handler, since per my understanding the intended behavior of `proxy.header.*` is to modify the headers passed to the upstream server only."}
{"msg": "Can we rename 'refresh' to 'read' and 'update' to 'write'? Until I had read more of the code below, I couldn't tell the difference between 'update' and 'refresh'."}
{"msg": "I take it that by the time we get here, colName has already been case-shifted to upper case?"}
{"msg": "Ahh the correct fix is to call `collectLinkLibraries` on the SourceFile being compiled, not the module. Sorry for our mistake!"}
{"msg": "There's no point \"deprecating\" this interface method (the customer still has to implement the new callback that we have introduced which makes it a breaking change). I'd make an exception and simply rename it to `onResponse`."}
{"msg": "We chose `info` in the test code for obvious reasons. Changing to `finest` makes debugging harder and noisier."}
{"msg": "I think this should be `GOMAXPROCS=$(nproc 2>/dev/null || echo 2)`"}
{"msg": "This is not really needed, the line added in `GridNodeConfiguration.java` is what really fixes the `remoteHost` regression."}
{"msg": "I do not care much, but you could as well just return bool(focusObject and focusObject.isProtected) here and avoid the if check? I know, really trivial."}
{"msg": "Do DiscoveryContext and GoGapicContext have a more specific common ancestor than Object? If so, let's use that."}
{"msg": "I think it would be better to move this try/catch block inside of the `FlushAsyncInternal` function as there are a few of places that can call it, eg event timer (here), AppendAsync, FlushAsync and CloseAsync."}
{"msg": "I would prefer that this tool follow the driver framework conventions, which use OutputFilePath as an argument, take a look at AnalyzeCommandBase. You can propose changes to that if you'd like, but binskim, sqlskim, this tool should all conform (in the interests of building an eco-system with consistent command-line interface)"}
{"msg": "(...), where each element ~are~ **is the** given {@code element}."}
{"msg": "What if `AddOpenTelemetryTracing` is called multiple times?"}
{"msg": "Why is the condition of \"lastId <= wal _-> lastLogId() \" added here?"}
{"msg": "`environmentID` is unused in MakeEnvironmentURL"}
{"msg": "'Supports'? Very uninformative naming inside protocol. Why not just paymentVersion, or just recognise supported payment version from generic protocol version supported by the client."}
{"msg": "We should add an additional call to Recv() somewhere after here that we assert returns io.EOF."}
{"msg": "Is dropping the **Allergen table** necessary? Can't we just add the two new columns to the existing table using a raw query?"}
{"msg": "I think closeable should be handled by the concrete impl of a catalog and not by the base class, I don't think all catalogs must implement closeable by design. This should be done via composition rather than inheritance. Additionally, I don't know what the effect of this change is on other catalogs so this feels a bit on the risky side."}
{"msg": "@JaeseungYeom I believe you had set this in a previous commit to, by default, not train model1 when loading from ckpt. Would it work for you to have this as a command line option `--no_model1_train` instead of the default behavior?"}
{"msg": "I don't see anything here that excludes people on a Team plan from from the revenue report. I see that TeamPlans are counted below, but the individual subscribers on the plan would still be included."}
{"msg": "I'd make this a `throw new NullPointerException(\"registry == null\");` instead"}
{"msg": "I don't mind the `make_spammer` route name. It seems to more clearly convey that the state of the account will change. The \"label as\" route name seems less definitive, as if one is simply adding something to the account -- a new label -- instead of changing the status of the account."}
{"msg": "I want to know in which situation you need to traverse from \"Timestamp\" data....."}
{"msg": "If I enable the clangsa analyzer with the `--stats` flag the checkers will be disabled even if they were enabled previously. I think we should check here if stats was enabled. `if 'stats_enabled' in args and args.stats_enabled` we should leave them enabled."}
{"msg": "Note that we probably should set the default gasPrice to `0.1 gwei` considering our minimum gas limit has to be 21k. At 21k the minimum fee would end up being `0.000021 ETH` which is just a little too high"}
{"msg": "So during a config reload, this function is invoked, but prior to that the o.TrustedKeys slice is set to nil, so this code would work. However, I am wondering what happens to s.trustedKeys, I am not sure this is handled at all. (same with the new map you are adding). I am not sure if this is supposed to be supported with a config reload, but just wondering if this is not putting things into a bad state."}
{"msg": "`sql` module is imported later."}
{"msg": "I think it's strange, whether `assert cfg.nms.type == 'nms'` would be better."}
{"msg": "This is really a minimum, isn't it, so `minPostWriteInterval` perhaps? IIUC it never gets used as a default, because the default IptablesPostWriteCheckInterval is 1s, which is larger than this."}
{"msg": "Let's call this \"NEW_BROADCAST_MESSAGE\". Msg.NEW_MESSAGE will be confusing down the line."}
{"msg": "A better way to do this (in your future PR) would be to: 1. get rid of `TransitionDependencySet` altogether 2. tag `TransitionDependenciesMap` as `\"TransitionDependencySet\"` in JSON 3. update the JSON marshaler to deal with `\"TransitionDependencySet\"` tag. If it's a map, no big deal. Else, construct the `TransitionDependenciesMap` map. Doing that would mean that we don't need to have duplicate code, names for this."}
{"msg": "It's very error-prone to have so large `try` clause with such non-specific exceptions handled. Consider rewriting it with either of these: 1. Check that expected columns are present in `DataFrame` (`{'physical_key', 'logical_key', 'size'}.issubset(df.columns)`). 2. Normalizing output of query by using `COALESCE()` (or normalizing `DataFrame` itself?). Also it looks like a row with package metadata isn't used here, so might make sense to filter out it with `WHERE logical_key IS NOT MISSING`."}
{"msg": "Change to `DisableHTTPGit`"}
{"msg": "this dependency to a callback also has to be a callback (eslint now warns us)"}
{"msg": "since goal is to restore old_protocol, shouldn't we get it from pandas if possible? e.g. this will break if their source code changes."}
{"msg": "This should consume less resources because str_replace don't need to assign arrays with all the values"}
{"msg": "It would be better to pass `param` as the second argument here, so that the parameter declaration is printed alongside the type. Same thing for the changes in `ffi.c` and `lambda.c`."}
{"msg": "That makes this error message incorrect; if someone has extended Cms\\Classes\\MediaLibraryItem, then this error message will read \"Class My\\Classes\\CustomMediaLibraryItem has been deprecated\"."}
{"msg": "Just curious: where do these pin numbers come from? I see you took the SPI0 pin numbers from the Arduino board layout which is good, but I can't find such a relation for `SPI1`."}
{"msg": "Isn't that already too late? I'd expect, that the LinkageError occurs the first time, we have the class instance (the classloader tried to load the class) - or do we get a partially linked class back, and we get the exception when retrieving the methods?"}
{"msg": "nit:s/Traceparent/traceparent/ - As per the spec header name is all lowercase."}
{"msg": "We need to have unit tests for it since it is now a public function. Also I'm not a fan for making this movement since `relPath` doesn't consume any info in this pkg."}
{"msg": "sizeof(port) seems ever-so-slightly clearer."}
{"msg": "Not sure if this has been discussed. I wonder why SourceGroups and DestinationGroups are not in From and To NetworkPolicyPeer as NetworkPolicyPeer already describes the source/destination of the traffic."}
{"msg": "This doesn't account for `:bind --mode caret ...` (i.e. `--mode caret` instead of `--mode=caret`; both work). Do you see an easy way to make that work?"}
{"msg": "seems pretty strange here because TiSession contains PDClient."}
{"msg": "should it be `newsessionqueue` or `newsessionqueuer`? In case we'd like to be consistent"}
{"msg": "Maybe add `@lucene.experimental`? We are exposing (slightly) internal details about `IndexWriter` so maybe we need to reserve the right to change this API in the future ..."}
{"msg": "@johnduarte I know this isn't part of your code change, but it seems to me that this `curl_with_retries` is not necessary. If the `retry_on` host command is successful, isn't puppetdb ostensibly listening to the ssl port as well? What do you think about removing that `curl_with_retries` after the `retry_on`?"}
{"msg": "nit: This should perhaps be called `waitForAndReportSelectionChange`, as it affects braille as well, not just speech."}
{"msg": "nit: I suggest that we rename `tag_error_response` to `tag_resource_success`, as later in line 132 we're returning an error if this value is *not* truthy."}
{"msg": "_base_ = 'retinanet_pvt-t_fpn_1x_coco.py'"}
{"msg": "We should remove `throws Exception` here, since we're catching it anyway and triggering `onAuthFlowError`."}
{"msg": "a super thin wrapper like this makes me think we should consider not having it, instead just defining in the plumbing.api the publisher and subscriber interfaces we expect a ps dependency passed in to support and then to pass calls directly to that thing rather than through this wrapper"}
{"msg": "We should set a 1.7 upper bound for this as well. :smiley:"}
{"msg": "Lodash mixed in with WordPress dependencies"}
{"msg": "perhaps we should test that users cannot edit the profiles of others?"}
{"msg": "Perhaps move this option into a separate speechViewer section, as we are planning to also save position information as well."}
{"msg": "Did you measure the performance with and without this option. Do we want to export fixits even if the `clang-apply-replacements` tool is not available in the user's PATH?"}
{"msg": "What if we do not change this file ? Are we using this `pkg/disk/v1alpha1` elsewhere for block device requirement?"}
{"msg": "regarding dropping the port/host/uri methods on Nod: this would `options[:port] = target.port if target.port`"}
{"msg": "This is so that if we turn on bundler caching globally it still won't affect python etc. Same inheritance logic as for the cache slug."}
{"msg": "[You can ignore it] Maybe a better method name would be IsSupported or HasSupportForAllocation?"}
{"msg": "Why is this changed to `\\*`? The behavior of the code on line 42, shows that `*` is what's handled?"}
{"msg": "Number types are hard  . Should we be considering byte/sbyte? What about unsigned variants that would otherwise fit in a signed 64 bit integer like UInt16, UInt32?"}
{"msg": "`Assert.True(true)`...   xunit used to have Assert.DoesNotThrow  "}
{"msg": "should this be an env var like the other `S3_*` values?"}
{"msg": "If you do go this route, I think it would be worth adding a note here that IE 11 is the only reason why we're not using the more obvious `node.remove()`."}
{"msg": "The added text doesn't really match why it's possible. Maybe it would be better to name that as a separate case for this checker? (e.g. dict lookup is quicker than list comparison)"}
{"msg": "Prefer `Stream.anyMatch` instead of iterating over all slots."}
{"msg": "`Binded` is weird. I think it needs to be something with `Bound` in it (and drop the `Mvx` bit) like `ViewHolderBound` or something."}
{"msg": "can we have String() and GoString() implementation of `apis.CStorPool` struct to pretty print it."}
{"msg": "Is there a better way to filter these other than relying on the hashKey. I few like this might now be trustworthy in the long run. If angular ever removes this property, this feature would be broken."}
{"msg": "No need to check dynamo_exited"}
{"msg": "from linter: >method SetTlsCACertificate should be SetTLSCACertificate"}
{"msg": "what is potential use for current scope? It seems you'd only want it to stop it. But if you get current scope you never know if it's yours to stop - i.e. this is not safe or correct to stop current scope. So I wonder should we even try to expose it?"}
{"msg": "We may keep this config unchanged since `use_depthwise=True` by default."}
{"msg": "if (StoreInbox* storeInbox = getStoreInbox()) {"}
{"msg": "The button for the date range selector has incorrect width since it has `padding-right: 8px` which sets the width to: `44px`. Can you review to make the button `36px` on small screens as per the AC?"}
{"msg": "MAX_RETRY_TIMES makes much more sense."}
{"msg": "This file is unrelated to the aims of this PR. Please remove. If it is needed to demonstrate Sonar Deltas then it has been proven and can be removed."}
{"msg": "I want to get more perspectives regarding this one. Making it `readonly` makes me feel that we're assuming the head should never change, and my worry is that other code might assume it (e.g. they might cache the value and assume it will never change). While this is true for now, I guess in the future we might want to support something like `PrependProcessor(processor)` or `InsertProcessor(index, processor)`."}
{"msg": "Please remove Descriptors3D from this file. We just did this in master."}
{"msg": "You could pass the MetaClient instance in ctor, and create a new instance if nullptr."}
{"msg": "What does this do? Seems like a poor mans mutex/semaphore?"}
{"msg": "why is this variable introduced? Please stick `_o.Test3.A` directly in the call below."}
{"msg": "lets print nodeName that got passed also"}
{"msg": "Is there any need to pass this through `string_metric_parse`? I believe you can either create an off_t or just pass 0, with no need to added a string conversion into the mix."}
{"msg": "I think we'll want @rickmanelius (or somebody) to go through all the help and make it more accessible. Probably later in the cycle. But \"Run a command in an app container\" doesn't do it for me :)"}
{"msg": "wouldn't `int.to_bytes(counter, 32, 'little')` be equivalent, clearer and faster?"}
{"msg": "This looks better than before, but we'll now likely run into issues with `'` characters in the spec. Maybe we can just use `manager.call_strings` instead?"}
{"msg": "Should this replace `splitSize` instead of adding a parallel call? The `SparkReadConf` is not yet released, so we can change it still."}
{"msg": "To reduce complexity, please use OSError on Python3 as well."}
{"msg": "The biggest chunk does not guarantee that it contains the biggest CIDR-aligned range. If we don't care too much about a few CPU cycles being wasted, then I'd suggest to merge the if-statements."}
{"msg": "Parentheses aren't needed here. `if len(statusParts) > 0 {` will suffice."}
{"msg": "The name of the test should be updated to \"it 'should return bad_request if api key is invalid\""}
{"msg": "Please put it like this: `CStorPoolPhase is a typed string for phase field of CStorPool`"}
{"msg": "variable must be in camelCase => $newStock"}
{"msg": "@guihecheng Thanks for the fixing! Actually this is not the dup codes, when we first registerNode, then update the nodestatus immediately, or the node will keep not ready for 10s. And do you have other ways to refactor it?"}
{"msg": "What this does is narrow down what we are saying the descriptor set is requiring. This is a good thing, but doesn't go far enough, we are still potentially setting unused bindings to either a required state or an invalid one. set_binding_pair.second is a map of the binding/requirements from the bound shaders... and instead of marking all bindings, looking at that will mark only the used ones. Will open a new PR"}
{"msg": "curious: are we planning to add link to each of the rules in the message?"}
{"msg": "same here; `@param array $user Array of user data`"}
{"msg": "I was confused by this env name variable, assuming it was the value, not the name. Silly nit, but maybe name it noninteractiveEnv?"}
{"msg": "It doesn't make sense to accept all 2xx status code. For example, `203 Non-Authoritative Information` or `205 Reset Content`, etc."}
{"msg": "Shouldn't we consider the situation where it doesn't find a plugin?"}
{"msg": "nit `non-standard` might be a bit subjective - maybe \"Cron schedule {blah} is in an unrecognized format. Dagster cron strings must consist of five characters separated by a single space chacater\"."}
{"msg": "Throw `fragInfo.CachedFragment.ViewModel.GetType()` into a variable so it's not evaluated each time."}
{"msg": "JS abstraction leaks so this should be `if (el.parentNode !== null) { el.parentNode.removeChild(el) }` @developit  "}
{"msg": "nit: change it to `Exchange: unexpected status 0x%x` so that we'll know where this issue came from as well as making it easier to decode."}
{"msg": "Can you check this case Assuming you have a dashboard with 2 users, test1 and test2 Currently logged in user is test1. You should not be able to change it to test2. You open dev console and paste in `countlyGlobal[\"member\"].username = \"test2\";` then you enter value test2 in the input and it is allowed and form would be submitted. Would server side validation deal with such case?"}
{"msg": "since we're changing this class, let's fix the default class name as well. it should be com.mysql.cj.jdbc.Driver"}
{"msg": "Maybe a good opportunity to do a related improvement: The parameter `total_blocks` in `bootstrap_attempt::process_block` shadows a field with the same name, so maybe rename the parameter to `total_blocks_a` The parameter and field are incremented at the same time, but the field is used by `populate_connections` as well, so I assume they mean different things. Other than that, LGTM"}
{"msg": "Please revise the naming of these two flags. _**default**_ is the value we take when user doesn't provide. You could infer from the fact how `default_parts_num` are used."}
{"msg": "I don't think we should have separate \"transformer\" and \"generator\" terms. I would suggest renaming this existing class `ImportTypeTransformer` to `StandardImportTypeTransformer` and renaming the interface `ImportGenerator` to `ImportTypeTransformer`."}
{"msg": "I believe `tag-matchers` is the proper form for this filename. Only components should use pascal case, I believe everything else should continue to use kabob-case."}
{"msg": "`--public-volume-create-allowed=true` and set the default to `true`, then use `!c.Bool('...')`"}
{"msg": "Might as well add a docstring for the new `exit_code` parameter too."}
{"msg": "`poll` and `remove` have different meanings."}
{"msg": "Is it really necessary to store them in a new setting? I think it should be enough to store the credentials in `ProxyConfig.direct()`. Then AntennaPod does not need to store multiple different proxy settings. Also, it will not change existing users' settings (currently the proxy settings would be lost on upgrade)."}
{"msg": "This stuff is a bit ugly and should probably become a utility. The main problem is that ``.map`` is being abused a bit."}
{"msg": "Maybe there is a better way here so that we don't even bother triggering a storage query since we want an empty list here."}
{"msg": "can you please change this to `_collection_to_single_partition()`, like we've done for alll other helper methods defined in this module?"}
{"msg": "actually use type_name=print_config_type_to_string(self, with_lines=False) to populate this"}
{"msg": "We should be using dependency injection here, instead of fetching the config factory at the last minute from the container. That would allow us to more easily overwrite the \"delete_local_resource\" setting in tests."}
{"msg": "everywhere else in the project, `LOGGER` is used"}
{"msg": "Why is this value set to \"min_by\", and what are the implications of it? Does `&:to_f` play nice with semver (e.g. 1.2.0)?"}
{"msg": "Wanted to double-check: does the `log` middleware still set its own \"empty\" value (should default to `-` at least for the default log format)?"}
{"msg": "It would be better to just change RWD to throw IllegalStateException if you attempt to execute a command after quit (unless it's a second call to quit())"}
{"msg": "Maybe just one import line - `from collections import OrderedDict, Mapping` ?"}
{"msg": "should we create a fixture without first name and last name and have a spec like this one that uses it to make sure nothing errors out when they are not present?"}
{"msg": "code smell here, a function that create a reward calculator from transaction processor?"}
{"msg": "Does it work to run all the sil diagnostic passes before we serialize? That would be more consistent with what the normal compiler does in `FrontendTool.cpp : performCompileStepsPostSILGen()`"}
{"msg": "Hmm, should we also cache the `smoothingScore` for this hit? Or, if we will keep it at returning `0`, couldn't we remove this impl and inherit the default from `Scorable`?"}
{"msg": "Were you having trouble with timeouts in general acceptance tests or only the editor test? It's possible to set timeouts on a per-test basis by using `this.timeout(25000)` within the `it()` function. I'd like to drop the global timeout in the future if possible rather than increase it - in some circumstances a failing test can have a knock-on effect which makes all later tests timeout so Travis can get hung up for a long time if no one notices and cancels the build."}
{"msg": "Instead of blindly ignoring all errors, this should just ignore the volume not found error."}
{"msg": "The `rowPosition` will be ignored if the position column is not projected."}
{"msg": "Is there a possibility of a clash between periodSeconds and timeoutSeconds? For instance, the current probe is not yet timed-out and the next one has started."}
{"msg": "This logic is already been performed in `CommandLine.defaultFactory().create(cls)` ... whats the point of repeating it here?"}
{"msg": "Please change from `let` to `const` here and above. Setting value to `this.hot.countSourceCols()` should be enought probably."}
{"msg": "Somewhat nitpick: I see the `!=` pattern mentioned in the fluent-bit style guide, but imo, it would be safer to check that a fd is non-negative with ` > -1` or `>= 0`"}
{"msg": "The Error log message should not expose internals. The message should be something like this `\"done split failed for address %v\", tagr.Address`. Also, the Debugf would be more informative with the address in the message."}
{"msg": "can we rename `fileLogLevelUsage` to be more generic like `instanceLogLevelUsage`? Same goes for other var below like fileLogLevelFlagName, FileLogLevel."}
{"msg": "Our use of the terms `managed` and `unmanaged` in CAPA is interesting. I think we should probably update the docs (as part of a separate PR) to explain that we are referring to whether its CAPA managed infra. As opposed to meaning AWS managed service."}
{"msg": "nit: \"*mapping\" for a map is unnecessary. Consider calling this `originalNames` or similar."}
{"msg": "Please split this into two sentences; i.e. \"This profile will be permanently deleted. This action cannot be undone.\""}
{"msg": "`isIE9` was reverted. Shouldn't this condition be reverted as well?"}
{"msg": "Why not go back to `c.setPingTimer()` here instead so you don't need the new boolean in setFirstPingTimer()."}
{"msg": "Why are we including the `files/` directory in this check? I know `tasks/` and `plans/` make sense, since you can reference content in those directories from the CLI, but I don't think you can for `files/` (unless I'm missing a command)."}
{"msg": "Please use `isinstance(text, bytes)` instead. Otherwise, this will lead to unnecessary decoding on python 2 unicode strings."}
{"msg": "`RpmDependenciesDirectory` should start with a lowercase character so it's not exported outside of this package, it looks like its only referenced in this file."}
{"msg": "wonder if we should collect c.trace, c.pa.subject, etc.. while under the lock to prevent data races.. or simply move the tracing under the lock."}
{"msg": "Minor/Nitpick: replace `1` with a constant, esp. as used in `prog/weaver/http.go` in `{{if eq .Plugin.Version 1}}`"}
{"msg": "Unless a log file has been specified, IMO you should set the server option to enable syslog (windows event log) here, or someplace along the service start code path. We shouldn't really rely on users to specify that when creating the service."}
{"msg": "I'm not sure regarding this approach, for me the whole text including anchors should go to resources like ` netConfigLink.setText(CoreMessages.dialog_connection_edit_wizard_conn_conf_network_link); ` You shouldn't concatenate translated values inside the code. If you need some params, please use NLS.bind()"}
{"msg": "How was the name `controller` arrived? Can you get a consensus for the name controller ? This may be OK for jiva. However, c-stor does not have a concept called `controller`."}
{"msg": "i dont think we need to explicitly single out `kernel.domainname` here since its not a TODO for OCI either right ?"}
{"msg": "Should we better change the operator to `<` since the variable defines the minimum size that gets compressed?"}
{"msg": "That part that still leaves me mystified is how the String class, when populated with a value from the SQL_ASCII encoded database is set to \"UTF-8\" encoding. Since the database is SQL_ASCII, each byte in the string stored in the database is considered one character. Ruby, however, is using UTF-8, which is writing a series of one-byte code points that are only meaningful when considered in the correct encoding. When Ruby passes a string to Postgresql, the code points are essentially \"flattened\" into bytes as they are written to the DB. When Rails (through Ruby) asks for a string from the DB, where does the information about the encoding come from?"}
{"msg": "now that I have started using, I realized, I could have named my new class singular `Sport` and not having to make this change. let me know, I will update"}
{"msg": "I don't think this change is necessary. If we cast `value` to type `six.text_type`, then the next if statement should evaluate to True and do the encoding for us."}
{"msg": "You could perhaps call this `strlen` (although I don't particularly care about the name as it is an implementation detail)."}
{"msg": "should we start p2p even after dispatcher? b/c dispatcher handles msg from p2p"}
{"msg": "Please change this back to `Error saving WebCal-calendar` (and `Error saving WebCal-calendar` only)"}
{"msg": "The vendor prefix is still being used on Chromium based browsers like Edge Chromium and Chrome. Did you mean to remove this?"}
{"msg": "I think the condition should be ` uint(headerLengthSize) + crypto.Extension + (len(p.blobs)+1)*uint(EntrySize) > uint(maxHeaderSize)` `headerLengthSize` is only the length field. But the pack header also includes the blob type and its ID. And the result of the check, currently seems to be inverted."}
{"msg": "nit: `Additional configuration used while sending notification to external services.`"}
{"msg": "the paymentchannel dir is where the paymentchannel manager will live. it will store the types below."}
{"msg": "I guess we aim for hardcoded port for Prometheus operated ports right?"}
{"msg": "This is the same effect as doing `node.parent.fromlineno` but avoids the `StatementMissing` exception from calling `statement`."}
{"msg": "This code is necessary. It makes sure that you can sleep for longer durations than the timer supports."}
{"msg": "If you're going to start testing that impl itself is not NULL you should probably be doing it everywhere."}
{"msg": "`ctx` is unused in LoadPlainYAMLManifests"}
{"msg": "why is this called toBuilder when the method is called fromBuilder? (I realise you did not change this...)"}
{"msg": "I think it'd make sense to only calculate time.time() once (it's also used if max_ts and min_ts aren't set)"}
{"msg": "Use existing `grpcStubCallString` instead"}
{"msg": "In a recent PR, Bob added a `TracerConstants` class. Do you think this makes sense to put in that class instead so that we can consolidate?"}
{"msg": "I want to propose couple of different names for catchpointWriting: syncInterruptedWaitingCatchpointWriting syncWaitingForCatchpointWriting catchpointWriting is lacking context, and I found it difficult to understand the logic without this context."}
{"msg": "Do you still need the `name` in the arg description, if this is not `str` type anymore.?"}
{"msg": "I think this will break the case (you can try even with /usr/bin/bison as value): `YACC=\"/path/to/bison -y\" ./configure` I wonder if we should use AC_PROG_YACC at all or simply use AC_CHECK_PROGS since we want to use bison and not another yacc"}
{"msg": "Thanks! We're already replacing File.separatorChar with '/' in the call to FileUtil#toCanonicalPath above, so the correct fix here should be: `relativePath.replace('/', '.')` I'll make the change upstream."}
{"msg": "Here we also need to determine if gJobMgr has called the init function."}
{"msg": "Always use `std::make_shared` whenever possible, it will save you one memory allocation."}
{"msg": "Is there any better string that only exposed by prometheus? We have changed the meter tags to contain method and service name. For example `scrape()` contains `method=getHealth` and `service=server.internal.health.ITzipkinHealth` which made this test failed.  "}
{"msg": "can you combine this passing test, code, solidity binary into existing ArrDelete? the function is much similar, pushing int value into an array, and delete one item in the array"}
{"msg": "I'd say the error should be an error, not instructions to the user. So error would be something like \"site should be running and is not\""}
{"msg": "This mutex is never used. Should it be, if users can now make calls into the crypto setup?"}
{"msg": "I see this getting unwieldy as we add more commands with subcommands. Can we perhaps enhance it to handle subcommands properly? Perhaps something like `\"etcd-snapshot:1\"` which would indicate that the etcd-snapshot command may have 1 subcommand after it, and if the 1 next argument after it doesn't start with `--` then the args should be appended after that subcommand."}
{"msg": "Was there a reason for changing all these integration names?   Are they actually used for anything besides information in logs?"}
{"msg": "This needs to be just return self.get_screenshot_as_file(filename)"}
{"msg": "I think the name of the method should match the name of the action: `removeReachableFiles`."}
{"msg": "Prefer `Stream.anyMatch` instead of iterating over all slots."}
{"msg": "This is also a question of style. src[i] will always be valid because of check if 'for' statement"}
{"msg": "Having \"wf\" prefix doesn't make sense anymore. Please remove."}
{"msg": "Removed this copy of the `spyAll` function and replaced it with the same function declared in `helpers.js`. Same for `sortAttributes` below"}
{"msg": "Default max cpu should be 8 and memory 64GB"}
{"msg": "What happened to the assertion on `conf.TaskCPUMemLimit`?"}
{"msg": "The format like gcloud-beta-prod is a bit hard to understand. Maybe find a a more clear way to describe it,"}
{"msg": "I guess nothing is wrong with this approach, but more curious if you didn't just go `|| (format != VK_FORMAT_UNDEFINED)) {` As if there ever was another external format system added in Vulkan it would need to be manually added here"}
{"msg": "Looks like I was wrong about the sync cache size being 15% before. There seems to be some reporting bug related to my use of the sync cache, that makes the limit different from the working set cache limit. For now, I say we keep this at `0.10` (change the param default too), and we can change it later if needed."}
{"msg": "It turn out that when we close server it closed underlying listener itself, so this line always generated and error."}
{"msg": "Same here - this code is duplicated. I think we can just remove the `exists?` method completely from `Criteria` and it should delegate to the context."}
{"msg": "I'm not quite sure that we preallocate memory. Do you have a good reason for that?"}
{"msg": "If we have added to s.clients, we could just do the following since if its a route will be ok I think. s.mu.Lock() defer s.mu.Unlock() return len(s.clients) <+ s.opts.MaxConn"}
{"msg": "if the targetLeader is src_ itself, it is really need call transLeader function?"}
{"msg": "This line should actually be: `if c.KubernetesProvider == config.ProviderAKS && c.Wireguard.EncryptHostTraffic {` because we only need to tweak the MTU like this on AKS."}
{"msg": "I believe this is incorrect, if I'm not wrong, MESSAGE_TRADE should be used when buying/selling items from NPC's"}
{"msg": "Does it send requests with urlencoded bodies anywhere? I thought it sends only json. Maybe content-type should be `application/json` by default?"}
{"msg": "This test name doesn't really reflect what the test does any more... Then again I'm not really sure what it is testing now - is it actually just testing that FactoryGirl can create records? or does that itself funnel through the rails code so that we're testing rails can create records?"}
{"msg": "better use `with mp.Pool(...) as pool:` here"}
{"msg": "Since this is a config problem, BAD_REQUEST is probably not the right response."}
{"msg": "can you rename `that_col` to `that_column`?"}
{"msg": "This is not correct, it will override everything else that is currently in `Widgets`. This file shouldn't be modified at all, we should be adding `components.Widget` in `assets/js/googlesitekit/widgets/index.js`, where the rest of that object is defined. Oh, and there's a typo here :)"}
{"msg": "Each task finished will result in the meta info updated?"}
{"msg": "Quick follow-up @aaemnnosttv, why this and not `.trim()`?"}
{"msg": "Why conditional check is done? As i understand, later both `applyPreflightCorsResponse()` and `allowAllCorsActions()` does the same"}
{"msg": "We chose `info` in the test code for obvious reasons. Changing to `finest` makes debugging harder and noisier."}
{"msg": "Should probably panic here. I think hashers are contracted not to return errors (and returning \"\" doesn't handle the error)"}
{"msg": "We expect to use Bolt::CommandResult for scripts as well?"}
{"msg": "`HardKiller` doing `os.Exit()` without proper shutting down other dependencies. I think there should be a better approach for this."}
{"msg": "This should change to a call to `Layer::find_layer_index`, which should be renamed to `find_child_layer_index` and it should return a `size_t` (technically the `difference_type` for whatever iterators are going to be used)."}
{"msg": "Why did we leave the `stderr` param in this case while we removed it from other bake methods?"}
{"msg": "hmm.. this is Hacky, the test will succeed in Windows even if you remove the calls to these, right?"}
{"msg": "should this block be in the file `05_install_ruby.rb`?"}
{"msg": "`string.encode('utf-8')` is more common but I guess this is mostly cosmetic :)"}
{"msg": "Consider logging `r.Url.Path`? Either way, ship it!"}
{"msg": "Is this if statement here necessary? It looks like this is the same logic that is taken care of in the setter for the property \"CompensationVoltage\"."}
{"msg": "I wonder if this new logic would actually fit better as a support method, both for readability and overriding... e.g. <pre> protected function getRouteNameFromDataSource($route) { if ($route === 'collection') { return $this->getDataSource()->getCollectionRoute(); } elseif ($route === 'record') { return $this->getDataSource()->getRecordRoute(); } return $route; } </pre> That's extremely nitpicky, and you can feel free to leave this as-is if you prefer... but that feels marginally better to me."}
{"msg": "I'm suspicious of this. For one thing, `query._fields[paths[i]]` may be `0`, `false`, etc. so checking for falsy will catch both cases where both the field isn't in the projection and if the field is explicitly excluded from the projection. For another, I'm not so sure that #6546 is a bug. Let's discuss that more."}
{"msg": "What is this? I'm a bit unclear why the parser would have a list of statements in it."}
{"msg": "I believe this is Prometheus name, wonder if this is descriptive enough of a label name? @nrchakradhar @simonpasquier wdyt?"}
{"msg": "Are most of our other fields default-zero-value? Would `AllowVXLANPacketsFromWorkloads` be a better formulation of this? I think it would make it easier for golang users of the API (default value matches the type zero-value)"}
{"msg": "void RemoveTransactions(Address sander, long removeBelowThisNonce) and separate these two calls"}
{"msg": ">public const string LINQ = \"LINQ\"; [](start = 8, length = 34) Are there duplicated benchmarks here? #Closed"}
{"msg": "`await this.driver().loadExtension(path);` should work"}
{"msg": "Can you add a mention here and in `ostree-repo.c` that the holes were found with `pahole`?"}
{"msg": "While we're changing this, I wonder if we can do away with `extra_controller_params`.. Maybe a new type of `solr_search_params_logic` that appends the attributes?"}
{"msg": "I believe that you only need to rescue Beaker::DSL::Assertions, as they include Minitest::Assertions."}
{"msg": "I count only four times where `selection_specs` had to be specified as a keyword instead of by position! If that is how often it was used that positional argument in our own codebase, I am pretty certain users barely used it (if at all)."}
{"msg": "_and_synched seems to be more consistent w/ exited_and_cleaned"}
{"msg": "may be nice to have helper method to generate s3 paths rather than the minor code dup"}
{"msg": "This isn't needed here, we still run `this._afterAuthentication` which loads settings & config - the reason the settings fetch is here is to make sure we have all the settings before saving the blog title rather than fetching everything once auth has completed. Probably moot anyway as the oauth code will be removed shortly  "}
{"msg": "We have to navigate up four directories to come down three? I see it, but it's kinda icky. Is something like `load Rails.root + 'app/lib/twitter_digits.rb'` out of fashion nowadays?"}
{"msg": "How about `const { promises: fs } = require('fs')` and then replacing `fs.promises.` with `fs.`?"}
{"msg": "This ignores errors closing the body. Not likely to happen, but no reason to take the risk either."}
{"msg": "Needs a description added to CommandArgsUsage.resx"}
{"msg": "Prefer `Stream.anyMatch` instead of iterating over all slots."}
{"msg": "`s/singlePointer/singlePtr` or please rename the type to `singlePointer`."}
{"msg": "You are never calling oldUnmount, this could lead to a plugin chain failing."}
{"msg": "What does setting partitionInfo to null mean exactly?"}
{"msg": "I think `serializer.xml` can be moved into condition below too"}
{"msg": "For consistency, shouldn't this use `SwaggerModeler.GetMethodNameFromOperationId(method.Name)` as above? I'd just reuse `\"Additional parameters for \" + SwaggerModeler.GetMethodNameFromOperationId(method.Name) + \" operation.\"` here, `string.Format` with `CultureInfo` is complete nonsense here anyways."}
{"msg": "All changes to signature code stem from here. The syscalls interfaces expects VerifySignature to return an error. I performed the change here and bubbled it up through the rest of the code - mostly mechanical."}
{"msg": "We had a wrong predicate before: we compared a list to an expression."}
{"msg": "This stat may fail, right? I think dag_file_exists does not actually check the file is there."}
{"msg": "I think we can make a safe assumption that if only two values are passed in then you have `(optionsToValidate, optionsForValidation)`, if its three then you have `(optionsToValidate, overrideOptions, optionsForValidation)`"}
{"msg": "* We need to deprecate/internalize first on master. * We should directly make the AST node final now * The setter `setName()` can be package-private."}
{"msg": "maybe should firstly check whether current tidb support `split table region`?"}
{"msg": "Perhaps show attempt x of y in message ie: Failed to download block %d (attempt %d of %d). %v"}
{"msg": "// Keys are stored in an in-memory map, where the key is the name of the // private key, and the value is the structure where the actual private key and the password are // stored."}
{"msg": "Why we dont delete app specific notes when app is deleted?"}
{"msg": "Can you facet on this new externalStatus Solr field?"}
{"msg": "I wonder if it would it make sense to push the pivot facet handling down into `FilterField` (or maybe a subclass, `PivotFilterField`?)?"}
{"msg": "Try using using `.setDismissOnTouch(true)` instead"}
{"msg": "Zach, is `UpdateSpan` of concern too? I see that it is called from `ExecuteAsyncInternal`."}
{"msg": "Should this be `ForceFlushAsync`? Given we have the `async` suffix elsewhere."}
{"msg": "why add `return` here?"}
{"msg": "Note that `hasAttacked` that is called before this function already performs this check. You probably don't need to check `hasAttacked` then."}
{"msg": "Unfortunately, the site example only has access to imports from `components/index.js` that means that you can't import the items file `carousel-items.js`. You can import that file in all the other storybook files though."}
{"msg": "Leave this out and move the script to the scripts folder."}
{"msg": "Is this `@missing_text` ?"}
{"msg": "I'd suggest we use `response.profiles[ 0 ].webPropertyId` here instead, to make sure it's based on the profiles retrieved. The value _should_ be the same, but I think it's a bit more accurate like that."}
{"msg": "`assertItemsEqual` compares the sequences after sorting them, is that intended?"}
{"msg": "why is this here? We already have a message pool in the node."}
{"msg": "I don't think it's necessary to change this for the history plugin tests?"}
{"msg": "Is the removal of `[AppDomainFixedOutput]` on purpose? (looks like a copy-paste...euh..remove error)"}
{"msg": "AWS Identity and Access Management (IAM)"}
{"msg": "There is a simpler way to do this: 1. Don't bother with the whole lowerCamelApiTypeName in SampleConfig 2. Use this code: `return localVarName(Name.upperCamel(apiTypeName, \"Service\"));` Basically, each of the static creation methods of Name just need to have their arguments all be in the same casing, so you would just pass the upper camel string \"Service\" here."}
{"msg": "let us rename the artifact to `storageclass-single-replica.yaml`"}
{"msg": "Nit: I should have done this before, but rename the file to LibuvFunctions.cs. Make sure no other files are misnamed."}
{"msg": "We should not add new types unless absolutely required. I'm not sure `UUID` is requires a new type"}
{"msg": "As this method is just set the internal cofigModel, it's better to use setConfigs instead of addConfigs."}
{"msg": "`whether this resource is paused` to `whether this resource has been paused` ? To keep same doc style."}
{"msg": "This method is validating permission for hp flow. Can you please rename this method to convey the same?"}
{"msg": "Just to confirm, do we actually want to explicitly set the `kBeforeHandshake` symbol on all network errors regardless of whether the options/property is passed in?"}
{"msg": "While this is commonly correct, the more reliable check is to get the package's identifier from the type checker and check those for equality. The information should be there, just another matter of plumbing it."}
{"msg": "Just to clarify, should this be 'composite_root/root/' or 'composite_root/'?"}
{"msg": "Any reason not to move it to after line 281? These are all pubsub related fields IIUC."}
{"msg": "Checks if value is a negative `Number` primitive or object. Zero is considered neither positive nor negative."}
{"msg": "Group w/ algorand imports"}
{"msg": "if lowest inserted header is non null non zero then pivot should be higher and a better best known on the left. maybe Head?.Number ?? Math.Max(Pivot, LowestInsertedHeader))?"}
{"msg": "Is a FakeApp class needed? Can test use a Mockito mock instance instead?"}
{"msg": "I think int and float can be handled in one if statement. The subsequent calculations don't really care whether it si a float or an int."}
{"msg": "no need to add this flag query the endpoint set-up to determine the chainID"}
{"msg": "BuildIDOSEnvVarName or similar, otherwise it sounds it's actually holding actual value of env var"}
{"msg": "unrelated to your change, but I don't think that this is correct anymore. We also seen to remove application support from `primaryNodeUnupgradedProtocol` for the test to be correct."}
{"msg": "fwiw, in tchannel-go I've implemented a similar method on TChannel that either returns a Tracer instance it was initialized with, or returns `opentracing.GlobalTracer()`, which by default happens to return a singleton instance of `NoopTracer`. In Go the use of global variables is not frowned upon as say in Java, so this pattern allows minimal work to enable tracing in a service, one just needs to store a real tracer in the global variable, e.g. via `opentracing.InitGlobalTracer(someTracerImpl)`, while the instances of TChannel do not need to be explicitly given any tracer since they will default to that global."}
{"msg": "Enabling `YAML` by default would be a breaking change in behavior for some applications if the struct's used by that application already include YAML tags, but their application has been (un)marshaling DynamoDB Attributes based on the struct name."}
{"msg": "For the command executor, which in turn, uses the HTTP client to talk to the WebDriver, the client might have high-timeout values set, so the shutdown can take a long time if we wait for it to complete, especially if multiple-long running threads are there. I think it might be a good idea in general to couple the shutdown() with `awaitTermination()` with a timeout, if the ongoing tasks do not complete within that timeout then call `shutdownNow()`. What do you think?"}
{"msg": "Is this change needed? `start()` is still defined and uses `HiveMetastoreTest.class`. The only difference is that this doesn't pass a `Configuration` and the parameterless `start` passes `new Configuration()`."}
{"msg": "I think it is weird to store sr in protocol struct"}
{"msg": "Will this cause a reload _all_ NATable information? It's too bad we don't have some way to limit the reload to just the tables that have a metadata mismatch."}
{"msg": "I've filed an internal spec issue to add these missing VUs."}
{"msg": "Since we now keep track of all bytes written, and extend the write timeout as needed, it's tempting to no longer add 2 times the max buffer size to the bytes written accounting for the connection drain timeout. As we've discussed before, this add several minutes to the timeout with the default 240 bytes/sec rate limit. I'm thinking instead this line changes to `timeoutControl.BytesWritten(minDataRate, 1);` to add a grace period to the drain if necessary. What do you think @Tratcher?"}
{"msg": "I think best practice is to use `NamedList<Object>` as the return type, and `NamedList<?>` as the argument type in methods, but I can't find a reference for it right now."}
{"msg": "Do we want to make this part of the default? Probably not. In fact, the default should probably be eth, web3 and net (which are the standard namespaces on other nodes)."}
{"msg": "I don't think we should be pulling the runtime name from the Compiler. There are two compiler frontends, but both of them compile the same source to generate the \"go\" runtime. I think until there is a request from an alternative implementation (the embedded world **might** have a different runtime), it's fine to hardcode this as \"go\""}
{"msg": "DiskGroupList can be better name"}
{"msg": "nit: lets leave gateway options at the end of the func signature."}
{"msg": "It will be better to use `commit()` on a separate thread, apart from the UI thread. The reason is `commit()` is synchronous while `apply()` is asynchronous. So in case it might not perform actions immediately as expected."}
{"msg": "Should we be escaping $attr and/or $value here? Seems like htmlspecialchars() might be in order to be on the safe side."}
{"msg": "why not remove the need for the `quiet_o` method and just add it similar to how the `--branch` is added? also, looks like the indenting is a little off"}
{"msg": "query_args is a string, not a list. Therefore you cannot call append to it. Also, line 986-989 of key.py already have code that is appending the versionId query parameter."}
{"msg": "why hidden name? How about `index_name`?"}
{"msg": "In this test, we want xax to be dead, so that aflags are not spilled to a slot."}
{"msg": "Stubbin a value object (like `RSpec.configuration`) is a bit of a code smell, I think. You can just set `color_enabled` and `success_color` through the configuration APIs provided by `RSpec::Configuration` -- no need to stub. The `sandboxed` thing in `spec_helper.rb` takes care of preventing changes to the configuration object in one example from leaking into other examples."}
{"msg": "i hope there is some magic where isEmpty or some cron can strip all non listable products from cart, but since we have the situation tested it should be OK and also we'll see during tests"}
{"msg": "We should raise `ValueError` if `update_policy not in ['existing', 'incoming']`. (or `in Enum.__members__` or however we want to express legal values)"}
{"msg": "`_applicationDelegate` and `_window` are already set in the call for `: this (applicationDelegate, window)`, no need to assigning them again here"}
{"msg": "We might not have a selector prop in the consumer"}
{"msg": "I don't see much difference between this and `create_db` module. How about having a function with a `database` argument?"}
{"msg": "`model.schema.base.options.strictPopulate != null`. Why hardcoding false? Also, `model.base.options` should work and be shorter. Finally, any way to move this up to the `populate()` function in `model.js` that calls `getModelsMapForPopulate()` and shallow clone the object before modifying? A bit random to modify this option here."}
{"msg": "We now have Prepare.A/Build.A/Builders.Build.A - what are the differences?"}
{"msg": "Could you reduce this to one line and change the first argument to a single quoted backslash string? Perhaps we can add this as an option named `:preserve_backslash` to the manify method. That way, we don't need an extra method in the first two cases. Obviously, we still need it for the inline case."}
{"msg": "guessing this method could/should close it but I didn't see where it was getting called."}
{"msg": "Remove the pylint disable and remove the .format() from the string. The tablename is just 'violations'"}
{"msg": "I may have missed previous discussion on this; apologies if that's the case. What do you think about just `input-yaml`, without the `cli-`?"}
{"msg": "Nit: rename to sendError."}
{"msg": "To me, using a `RuntimeException` for this feels a bit weird. I would just extend `Exception`, or maybe even `IoException`. Could you also please overwrite the `getMessage` function to return something like `\"Result does not specify a feed url\"`?"}
{"msg": "I'm confusied - Isn't `countryString` left empty if `len(country)` != 0?"}
{"msg": "Would you please update this by using `#if (QT_VERSION >= QT_VERSION_CHECK(5,15,0))` and `QSignalMapper::mappedInt` for Qt >= 5.15?"}
{"msg": "This type of change opens a question on how we can cleanly shutdown or prevent all running agents so we do not run the risk of an agent holding kernel mountpoints, which can cause unsafe unmount/chroot exit. Will open a github issue to track this. This specific change itself is fine. It is a pointed change specifically for stopping the offending agent."}
{"msg": "this file is model generated by protobuf, just for compatible test it's better not change it."}
{"msg": "This class is very similar to `Catalog`. Is there a way to have this class compose a `Catalog` instance or extract a common class which they can both compose?"}
{"msg": "Maybe I am daft but it looks like you removed fixed width readers but I don't see where you added any readers?"}
{"msg": "Why not import audit as well?"}
{"msg": "nitpick: use `const virtualTree`, I know it was `let` earlier."}
{"msg": "Actually, I think it might be easier to do it here. Rough outline: 1. Save a list of the md cache keys and new brmd while looping. 2. After the loop, for each entry: 2a. Look up the old cache entry. If it doesn't exist, continue. 2b. Otherwise, make a deep copy of it, and replace its brmd with the newly-generated one. 2c. Delete the old cache entry, put the new cache entry. What do you think? The problem with the current approach is that the gap between dropping the old version and putting the new version is large enough that when we put the new version, we may be kicking out hotter cache entries. In this case, we'd be doing so to a lesser extent. Ideally, we'd be able to replace the entry in the MDCache LRU without changing the LRU info."}
{"msg": "NewExporter takes in two arguments: a configuration for the metrics connection and one for the traces"}
{"msg": "Why not use currentPlayer instead of playbackManager.getCurrentPlayer()?"}
{"msg": "could not import k8s.io/kubernetes/pkg/util/slice (invalid package name: \"\") (from `typecheck`)"}
{"msg": "It appears that using SERCOM1 was a bug: the only SERCOM that is supported on the TX/RX pins is SERCOM0. Previous UART support wouldn't have worked on the Trinket M0 TX/RX pins anyway (`PA06`/`PA07`). This PR fixes that, and should thereby add support for UART on the Trinket M0."}
{"msg": "doing this as a binding map was insane, but with the ConstBindingIterator to hide the binding->index gunk and avoid the hashes during access it sticks out."}
{"msg": "You should do: AssertEx.AreEqual(importPeptideSearchDlg.CurrentPage, ImportPeptideSearchDlg.Pages.match_modifications_page);"}
{"msg": "Shouldn't \"source\" be a noun? How about? -EXECUTION_SOURCE_USER -EXECUTION_SOURCE_SCHEDULE -EXECUTION_SOURCE_EVENT (because it's an event based trigger mechanism)"}
{"msg": "Should not switch to `lvis_v1_instance` here because that base config uses ClassBalancedDataset to oversample the data."}
{"msg": "Would \"DisableIID\" be a better name? For example, we used DisableMetrics, ImageCleanupDisabled, ... etc. for other similar fields."}
{"msg": "So this is a swing of 2: but I think we only need to reduce by 1? The artificial jump added on truncation is not passed to clients: it's like other mangling added later. So if `-max_bb_instrs 4` means 4 app instrs passed to clients, we'd want ==, not ==-1, right? Plus, if we did want -1 and to stop at 3 instead of 4, this is not sufficient: the inner loop above currently has `total_instrs <= cur_max_bb_instrs`."}
{"msg": "Does Tinyint belong to this set of types? I suppose the answer is No, but thought it safer to check."}
{"msg": "I'm a bit leery of this implementation, because it assumes that the only \"outside\" is to the right side. Note that Blockly assumes that there's nothing useful to the \"outside\" of the toolbox, based on the configuration of the workspace, so it's not like we're doing the right thing either. I think this will break in RTL. If you keep the editor in the same place but inject with RTL, everything you're looking for will be in the delete area. If the editor and stage swap places, this will just be looking on the wrong side."}
{"msg": "I suspect L2Socket needs a similar change (line 502) for the case where `iface` is None (line 479)"}
{"msg": "Was this all that was needed to add CRUD operations for the LicensePermission model? :-)"}
{"msg": "Instead of a `bool`, can we just call this `MaxAssetDecimals` and have it be a `uint8`/`uint16`/`uint32` whose value is 0 before the upgrade and 19 after (2**64 - 1 is 20 decimal digits)? We'll need to set a maximum value anyway, and that way there's only one new proto variable instead of two."}
{"msg": "where `$aliases` is defined ? @javiereguiluz"}
{"msg": "This is for creating binlog file for building bdn generated template project. I feel that it's may be helpful in general for bdn diagnostic purpose."}
{"msg": "I'm curious -- do we have information on the upper bound of the delay we would expect with high probability from a peer with no network issues? My intuition is that we want to set this as low as we can reasonably get away with before we start killing productive connections. My uninformed intuition is also that 10 seconds is probably higher than we need and I'd love to know if this is wrong and 10 seconds is already pushing the limit."}
{"msg": "IMO this should be defined in the form theme instead. This class should always be there. If the user configured additional css classes, it should be appended instead of replacing the `{view}-form` css class."}
{"msg": "This test modification isn't correct. This task could run immediately and you wouldn't be able to tell if OnCompleted was called or not."}
{"msg": "what is the difference between `/core/events/javascripts/countly.views.js` and `/core/events/javascripts/countly.events.views.js`"}
{"msg": "If the `MemoryBasedStorage` relies on a `self._bump_and_store_timestamp()`, then every child class will have to implement it. So it should not be prefixed with `_`. And should raise `NotImplementedError` etc. :)"}
{"msg": "why removed the MemoryDiagnoser attribute?"}
{"msg": "Why do this instead of `localFieldPath.applyGetters(doc[localField], doc)` ?"}
{"msg": "Nit: what about just `pay`? Is there some other subcommand that would conflict with?"}
{"msg": "Maybe leaving this out will save some bytes as in let `let isHydrating = replaceNode === null`"}
{"msg": "I think this can be called `HasField`, because that's what it's doing. It really is independent of revision."}
{"msg": "nit: a better name for this variable would be enableLogStats, but it's beyond the scope of your change."}
{"msg": "Because linters don't handle reports now, this was breaking the setup for _all_ tests. I deleted it so I could run my tests, but I didn't check the impact on other tests as many tests are failing at the moment."}
{"msg": "I'm not really a fan of this -- why not set up logging for `init` here (or setting a global flag) rather than doing it this way?"}
{"msg": "having this extend `UnsynchronizedStaticFormatterRule` seems semantically incorrect even if it works  we should probably refactor `UnsynchronizedStaticFormatterRule` into a `UnsynchronizedStaticAccessRule` which can be configured through properties to track unsynchronized static access to any given types (with proper defaults to include `Formatter` and `MessageDigest`). This will also scale better as new types are suggested to have a thread-safe access enforced. The `UnsynchronizedStaticFormatterRule` can be marked as deprecated at the ruleset level, point to the new implementation, overriding the property defaults to keep just looking for `Formatter`. Moreover, the `THREAD_SAFE_FORMATTER` static should probably be replaced with a property of thread-safe classes to ignore, once again with proper defaults."}
{"msg": "Keccak.Zero should not be used to mean null"}
{"msg": "Same potential FP: The stream is provided from outside (here as a method parameter), so we should not be responsible here to close it, should we?"}
{"msg": "add 'sriovNetSupport' also to this list"}
{"msg": "What we did in docker before, when working directly with libcontainer, is check if the source is `/dev` and the destination has a `/dev/` prefix. This implementation is probably ok. If someone is mounting their own `/dev` I would expect it to be pre-configured and not need the extra check for if it's the host's `/dev`. (that said, I've not tested yet, just reading through the code)"}
{"msg": "Maybe `consumerID, receiverID, issuerID`, at least it's a convension in overal repo"}
{"msg": "0 < minimum gas price, `ErrUnderpriced` is more proper"}
{"msg": "the CAS call here is now wrong since dirty will never be 3 anymore. it might be useful to sweep through the entire usage of this field to see that everything is correct"}
{"msg": "import but not used"}
{"msg": "What about the call in `case PACKED` just below? Does that also need to use the `typeWidth`?"}
{"msg": "not sure i like this change. The encryption package does not need to know about references"}
{"msg": "I'm not really sure how this would happen. once the binary is already compiled, the config.Consensus should already have the entry for protocol.ConsensusCurrentVersion."}
{"msg": "Is the `vmultiplier` only used here for checking if a grid value is nodata?"}
{"msg": "Rather than have another member and and if/else statement, if the user passes in `PreInvocationAuthorizationAdvice` it could be adapted to match `PreInvocationAuthorizationReactiveAdvice`"}
{"msg": "Is there any issue with 2.2.3? If not this should be `<2.3`.  "}
{"msg": "how about rename to shouldNarrowDataTypeTo?"}
{"msg": "Why not check that the one available renderer is 'bokeh'?"}
{"msg": "Can you import `bundler.ErrOverflow` rather than redefine it here?"}
{"msg": "This is just a renaming of the function getResourceType() to getResourceReference()"}
{"msg": "here you assigning it to a local variable, in the original code it assigned to combat(CombatSpell member). Not sure if CombatSpell needs to use a shared_ptr since currently it does not and it works \"good\"."}
{"msg": "I think we should keep these, o.w. our examples will be wrong (where we're importing from `dagster.utils`). Also, we might break folks who've imported following our docs."}
{"msg": "This is good and something that I think opens a lot of possibilities. I think what would be even better is to change up `TracerProviderSdk` to take factories for the processors just like it already does for the instrumentations. Should probably use use a factory for the sampler. If we made those 2 changes then we could actually split this all up into the config and the build phase and we could use the factory methods in the hosting version to call into the IServiceProvider to get those instances."}
{"msg": "I'd like to see if this can just be set on the service account instead of the project. Using the SVC_ACCT_ROLES (which should otherwise be deleted as I don't think anything else is using it.)"}
{"msg": "Avoid using old mortbay utilities for converting JSON. Uses existing Solr Utils to convert from JSON string."}
{"msg": "I actually think this wrapping is great, but let's call it `RunCommandOperation`?"}
{"msg": "This lea should match instr_check_xsp_mangling and be undone. I don't think i#3307 applies here."}
{"msg": "Nit: I believe the electrum convention is to use `bfh` instead of `bytes.fromhex`. Great catch on this bug!"}
{"msg": "Use a more granular error type. I would recommend `ValueError` in this case."}
{"msg": "Maybe rename to `RegisterListener` or `RegisterSubscriber`?"}
{"msg": "My one concern here is that we are adding a new array allocation for each depth of the tree which could add some non-trivial GC churn. Perhaps this would be okay if we think that refs are used through a tree commonly enough such that they'll get allocated anyway but I'm not sure refs are *that* often used. Every app has a couple, but probably not at every level of their app :/ So maybe the extra bytes are worth it in this case? Though I have no data to back up my hypothesis so I could way off lol."}
{"msg": "Should we cache the result of `Mvx.Resolve<IMvxChildViewModelCache>()` to avoid a lookup each time?"}
{"msg": "If you get to this line avg_size_of_message is an undefined value, yet you use it below. You you should set this value to something in the exception block."}
{"msg": "let's just fold this inline in mux.go, no need for the indirection to this new file"}
{"msg": "Should we add the flows only when NodePort is enabled?"}
{"msg": "What's the difference between typescript-eslint/eslint-recommended and typescript-eslint/recommended? I really can't get it."}
{"msg": "Thinking: Maybe it would be more useful to define this in terms of RTTs. That would also make it easier to switch this to a bool, since we could then pick a reasonable default value. Unless of course an attacker could influence our RTT estimate. Is that the case?"}
{"msg": "Thinking if it would be nice to have something like `setNothingSelected`."}
{"msg": "Not needed for actions. `_super(...arguments)` is only needed when you're extending from a base class and want to run the logic in the base class before your own logic"}
{"msg": "I still need to run this code to verify my understanding, but my first reading through makes me think this may need to be `suspendingComponent._vnode` since we set `vnode._hydrating` on the vnode that threw the error (diff/index.js:275), not on `Suspense._vnode` (though we could in Suspense's `_catchError` implementation at the top of this file)."}
{"msg": "keeping this as an unexported constant, as importing the role pkg creates a cyclic dependency."}
{"msg": "Why `c.RevisionField()` here but `c.opts.RevisionField` just below?"}
{"msg": "Properly describe valid flag values here: `neither` should be replaced with `none` as they parsed below."}
{"msg": "Instead of adding the `--target` flag here, the `Target` struct should be set up correctly. Assuming this is for the Raspberry Pi 3, adding it to the `cflags` key of the JSON file should be enough (if not, you can print `config.CFlags()` here to check whether `--target` is already included)."}
{"msg": "The changes in this file look unnecessary since `rpccontext.AuditRPCWithTypesStatus()` already does this check. Was there a reason you needed to add them?"}
{"msg": "This looks like an \"ES Module\" to me. I do not understand this TODO."}
{"msg": "this double check for lombok annotation + specific lombok annotation seems pointless, just keep the second (specific) check. Moreover, since we have a property with ignored annotations... why don't we use it? a user may setup the property and it will be ignored here. Also, this class should probably not extend `AbstractLombokAwareRule` anymore. We have a configurable set of annotations that suppress the warning, defaulting to ALL lombok annotations, yet we only check for `lombok.NoArgsConstructor`... Maybe directly extending `AbstractIgnoredAnnotRule` and settig the default property to `lombok.NoArgsConstructor`? Or, to avoid a breaking API change, keep extending it, but override the default. For 7.0.0 we can change the class hierarchy."}
{"msg": "nit: the ordering may be misunderstood, as \"invoked in the same order\" could suggest the passed-in functions are called in-order, but the actual wrapping is LIFO. Some other ways to describe it (don't think any of these are ideal, but maybe it will help you come up with something better), * the handled returned by the first interceptor is executed first * interceptors are applied outside-in (don't like the terms outside/in though) * interceptors are applied in LIFO order, leading to an earlier interceptor's handler being executed before latter interceptor handlers"}
{"msg": "We should not use a static import to be consistent with other existing use of the QueryElevationParams."}
{"msg": "nitpick: `required_subject` doesn't seem to be used here"}
{"msg": "why those additional checks after published? template.version should always be present and greater than zero"}
{"msg": "Could rename to `ServiceVersionKey` for consistency with the suggestion to rename the TracerSetting."}
{"msg": "Use a literal constant here, and use `assertEqual`, e.g. `self.assertEqual(2, len(...))` You should also check that the number of rules is correct, i.e. 1 rule for buckets, 0 rules for tables."}
{"msg": "change looks good.. but, better to make populateVersion to return same object in the case of error.. that avoids lot of complex logic and probable issues"}
{"msg": "Is this a `MetricKey` ?"}
{"msg": "We chose `info` in the test code for obvious reasons. Changing to `finest` makes debugging harder and noisier."}
{"msg": "After discussing what ``irregular_dims`` really is, we agreed that we need a better name that makes it clearer that this is more of an xarray concept of irregular dimensions than a holoviews one."}
{"msg": "Could we rename the parameter to `overrideStatusCode`? The name `alwaysOk` implies that the health check result would be always healthy.  "}
{"msg": "\"/schedpolicy\" is repeated, i would make it a constant and use it here and cluster client.go"}
{"msg": "This button should also be disabled when in secure mode since it opens a web browser from which you can easily do a lot of insecure stuff."}
{"msg": "Should this be done as part of `expireSnapshots`? I'd like to avoid adding a lot of operations to `Table` because it is already a large API."}
{"msg": "Instead of creating a new file, put this in tls.go, like right after or before DNSProviderConstructor is defined."}
{"msg": "Instead of OC.getLocale() for the default value the default should be the value of the user value 'core' 'lang'. When loading the page this can be added to the parameters by retrieving $this->config->getUserValue($user->getUID(), 'core', 'lang'); in viewcontroller.php."}
{"msg": "Why interface1 ? It should be in inner so."}
{"msg": "Should we consider move this expression evaluation to SETUP_INSERT step since it evaluates from queue entry. Also, this expression is not evaluated in ExHbaseAccessVsbbUpsertTcb."}
{"msg": "shouldn't we name abbreviations up-cased? `myId` -> `myID`?"}
{"msg": "This was sort of a pre-existing bug -- we should be busting our local cache if the key isn't present. However, `KBPKIClient.HasVerifyingKey` already took care of it on that path. This way is better though."}
{"msg": "You want to return if it's quiet time and notifications during quiet time are **not** enabled. So this is either a logic error or it's bad naming of the setting/field/method."}
{"msg": "cool, here (L146 && L148) maybe (repo_private? || force_private?) && !installation? to prevent double call of installation?"}
{"msg": "this error carries a bit more meaning for us, but less meaning for users. we also lose the context of what command produced the failure. I'd prefer to keep the original error message. If we need better identification of GetActiveApp errors, maybe we could address that in the error messages it returns?"}
{"msg": "This is probably more nuanced than I can feasibly check in a PR review, haha. Was the issue here that `replaceChild()` removes `initialBase` from the DOM before `recollectNodeTree()` invokes `componentWillUnmount()` on the owning component?"}
{"msg": "I believe it's misleading name for the condition. I prefer \"element_to_be_disable\" We can have a condition, when element is enabled but we can't click it, because another element overlays above it. So, If we use \"unclickable\" we might mislead people, who use that condition to verify if element can be clicked"}
{"msg": "the test was failing likely due to locale issue. had to increment the date by 1 to make it pass"}
{"msg": "Instead of importing context besides beehivecontext, I'd suggest include golang context functionalities into beehivecontext. To keep channelq only rely on beehive."}
{"msg": "Might be easier to just do `handler{Handler: rpcHandler}` since zero-value of `Deps` is now valid."}
{"msg": "This will now wait for 2.5 hours, not 90 minutes, if the waiter delay is 5s"}
{"msg": "See this error on console too so I don't think it's just test simulation. For some reason event doesn't show up sometimes"}
{"msg": "Shouldn't the value in Bootstrap.Data be just a plain string?"}
{"msg": "@robertpi Isn't this changing the sampling priority when `KeepTraces==false`? The sampling priority could be `AutoReject` or `AutoKeep`, based on the sampling decision (or the user may have specified something else). Seems like we shouldn't be changing it in this case?"}
{"msg": "The operationTracer is passed into the processTransaction() method. We should probably pass the no tracing in one in from where it is called."}
{"msg": "I believe this line was an error, it should have been `sercomRXPad1` to be consistent with the pin numbers. Resolving this ambiguity by following the pin numbers."}
{"msg": "This should either be `hint` that takes a string to render inside of the partial container or probably better you should just render a separate hint field above the code field in the same tab."}
{"msg": "I just noticed that we use Return here, when we have logically allowed a packet, whereas in the forward chain we use AcceptAction. Do you know why that is?"}
{"msg": "Would this incorrectly trigger if `loadingUrl.getHost() = \"something.app\"` and `bridge.getHost() = \"app\"`?"}
{"msg": "License header should use the Apache one."}
{"msg": "I think this makes more sense to be applied within the parser code where we evaluate the `glob` builtin? This function looks generic in the sense of where it can be used, and perhaps no matches is fine in other cases?"}
{"msg": "should we validate that AWSRegion has also been set here so that we don't get into the if-block that relies on the ec2 metadata client below?"}
{"msg": "maybe naming `version` to `package_version` or something similar can be more descriptive"}
{"msg": "this warning shouldn't be produced if we configured a cache either"}
{"msg": "what if the collection is already there?"}
{"msg": "instead of removing can you reference org.openqa.selenium.TakesScreenshot ?"}
{"msg": "I suggest, that we move the regex (`[^a-zA-Z0-9_]`) to a separate constant field, because we're using it in multiple places and I think it's quite prone to misspellings."}
{"msg": "Feel free to disregard, but I've been trying to use `Mapping` and `Sequence` instead of `Dict` and `List` when possible, because they communicate that the type is immutable, and also are covariant."}
{"msg": "let's call it `in-cluster` instead of `local`. less chance of confusion."}
{"msg": "Should we use `#if NETFRAMEWORK` for consistency with the other projects?"}
{"msg": "If it parses failed, both of the `containerName` and `podId` should be the empty strings, it's non-sense to define this error, I suggest just return it."}
{"msg": "What is this checking for? Why is returning the list of interfaces the correct behaviour in this case?"}
{"msg": "This changes the behavior of the parser, right? Any particular reason to do this aside from the fact that you have to since the function takes a const?"}
{"msg": "Given how simple the Portal implementation is, I wonder if we should move it core... Though we'd have to export it which would be more bytes we can't crawl back..."}
{"msg": "The more correct way of doing this is `this.s.hooks.clone()` but either way works. Thanks for finding this :+1:"}
{"msg": "There can be multiple subrows, so it is not a good idea to use `id` there, as id should identify single unique element. Instead you could just add the id of whole table or of whole crash plugin view"}
{"msg": "Why was this assert removed? Shouldn't we check if the file is in the zip?"}
{"msg": "Just to remove branching, use `defaultTitle` explicitly in the test cases. (Is this gofmt'd?)"}
{"msg": "I don't think you use this variable anywhere. (You call `SampleTransformer.newBuilder()` below)"}
{"msg": "The digest is in binary and variable size (the digest size is result if > 0). So we can't use xxstrdup."}
{"msg": "maybe we can replace `mongoClient.s.options.autoEncryption.cryptdConnectionString` with `options.autoEncryption.cryptdConnectionString`?"}
{"msg": "Under what circumstance would we have a span id already? Is this for testing purposes?"}
{"msg": "The original text can be read to say \"not waited on by queue ...\" meaing that the second queue was supposed to have *waited* for the signal... which is especially confusing when it's the same queue that has signalled the semaphore *twice* without a wait."}
{"msg": "maybe better Error(string text) and Error(Exception ex) separately?"}
{"msg": "what about merging the error checking logic to within `errShouldUnload`?"}
{"msg": "Probably want Topic.find_by_slug! to handle bogus topics. The next line will try to load articles off of nil otherwise."}
{"msg": "Can we elaborate on why? I'm guessing because we need the execution role to call FE stopTask during `cleanupTask`, but would be good if we make it clear here."}
{"msg": "Are these mutually exclusive options (parameters vs qualifiers)? If parameters aren't supported, may want to consider throwing an exception for \"hasParameters\". If parameters and qualifiers are both legit options, then maybe change this to `if (hasQualifiers) { ... } if(!hasQualifiers && !hasParameters)`"}
{"msg": "I believe you can simplify this to simply `return array_unique(array_filter($authors));` -- the default behavior of array_filter is to filter out empty elements, so the callback should not be required in this situation. Do you mind giving it a try and updating the PR if it works?"}
{"msg": "\"in the keystore\", but nevermind"}
{"msg": "nit: It's a matter of taste, but it would be tighter if this is called `api_quota`."}
{"msg": "I noticed in all of these we now have to import the PrecompiledContract under testing. Could also rename the package these are in s/precompiles/precompile to keep them in the same package as they are elsewhere."}
{"msg": "I think this is an unrelated remark. I thought we had moved toward the practice of using \"Config\" as the structure name, and Option as a functional argument (`func(*Config)`), and Options as a `[]Option`. See api/trace `StartConfig` and `StartOption`, for example. That's why I prefer this struct be called Config."}
{"msg": "I think @sergeybykov converted (wanted to convert) all `shardID` to `int32` from `int64`. Please check with him."}
{"msg": "Could we not just always include `self.config.options.listen_host`? If that is empty, the `address[0]` check should also never be true."}
{"msg": "This should remain as `ListServices`"}
{"msg": "In case there is more configuration to be added to the \"inmem\" metrics later (however unlikely that is), we may want to play it safe and create an `InMemConfig` struct and include the disabled flag there. This also gives the config symmetry across the plugins."}
{"msg": "I'll need to pull this out of here since we're sharing this in other tests. Same for `procurement_spec.rb`"}
{"msg": "could you change this to instead of being a `try.. except` be `message = message.get('message')`"}
{"msg": "Can we use record.update here?"}
{"msg": "Lint/UnneededDisable: Unnecessary disabling of Naming/PredicateName."}
{"msg": "streamHandle sounds vague to me. Can you be more specific?"}
{"msg": "Does everything on cursorState belong in the command options?"}
{"msg": "the variable names are not entirely clear. \"bucket\" is essentially the regex that follows gcs naming pattern, right? if so, it should be changed to bucketregex. and then bucketregex, gsregex should be changed to something more specific to what pattern the regex is supposed to match."}
{"msg": "I think `ApiModelT` would be clearer than `T`"}
{"msg": "We should consider giving this state a more generic name which could be used for flows in similar state in non-containerized Azkban. For instance in the event of a bare-metal executor crashing we could the switch any flows assigned to that executor to this state. Something like `EXECUTE_INFRA_FAILED`, better alternatives should be possible though."}
{"msg": "While this is potentially convenient it seems off topic for the PR/Issue. Also if it is kept, in the realm of taste/style I tend to not use get/set/is for things that are not properties of the object. maybe hasLiveNode(String node) thus someone using it might write `if (zkReader.hasLiveNode(\"foo\")) ...` which reads quite nicely."}
{"msg": "Shouldn't this `TEXT` also be dependent on the platform, then?"}
{"msg": "Can we name this `TableObject`? I'm not a big fan of the `I` prefix for interfaces and that's not really used in Go. Is it also possible to have the method be unexported? I don't know if that's possible. If it's not, this is good. If it is possible, I'd prefer this method to be unexported."}
{"msg": "If tbb.h is included, there is no big sense to include other TBB headers."}
{"msg": "Let's use the same `S3_HOSTNAME_PATTERN` as above here."}
{"msg": "why are we adding the current tag count to new tag count ?"}
{"msg": "Is there a reason for logging `error.message` specifically, maybe log the whole error object?"}
{"msg": "Nothing. We only expect container-connected events when going via the plugin, not the proxy."}
{"msg": "Still confusing. Why don't we return something like `'Fee too low: expected X but found Y'`?"}
{"msg": "Should be from lowercase `json:\"ports\"` the same is defined in MarshalJSON"}
{"msg": "This code should be executed in NashornEngineFactory"}
{"msg": "this is not so great as it sets the global rand seed. in tests that invoke this method multiple times for whatever reason, the global seed would be overridden every time the constructor would be called and the instances would have a different seed after every constructor call. it would be better to just pass a new source here as a parameter and do the same within the test. it should simplify things and clean this up"}
{"msg": "This looks inverted to me: if `--rpc-require-chainid-in-txs=true`, then shouldn't `unprotectedTransactionsAllowed == false`? Suggest changing this variable to `requireTxReplayProtection` or similar. I think the flag name could be clearer as well, maybe: `--require-tx-replay-protection`."}
